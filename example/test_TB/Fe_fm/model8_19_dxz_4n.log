/data/home/kongfh/DFTBAI1/module/Hamiltonian/Hamiltonian4TB/tight_binding_hamiltonian.py:80: UserWarning: Gimbal lock detected. Setting third angle to zero since it is not possible to uniquely determine all angles.
  orbit_rotation_list = [wyck_orbit.tool.get_orbit_rot_dict(rot_dict,latt,op_list) for wyck_orbit in orbit_list]
atom间距搜索达到近邻要求
rot_name  C4z+,第2阶，补全轨道dyz,轨道个数1
轨道dyz没设置自旋，根据对称性，设置自旋轨道数为1
atom_rep: [[0. 0. 0. 1. 1. 1. 0.]]
neighbour_table: [{'0': [(0, array([0., 0., 0.]))], '1': [(0, array([-1., -1., -1.])), (0, array([-1.,  0.,  0.])), (0, array([ 0., -1.,  0.])), (0, array([ 0.,  0., -1.])), (0, array([0., 0., 1.])), (0, array([0., 1., 0.])), (0, array([1., 0., 0.])), (0, array([1., 1., 1.]))], '2': [(0, array([-1., -1.,  0.])), (0, array([-1.,  0., -1.])), (0, array([ 0., -1., -1.])), (0, array([0., 1., 1.])), (0, array([1., 0., 1.])), (0, array([1., 1., 0.]))], '3': [(0, array([-1.,  0.,  1.])), (0, array([-1.,  1.,  0.])), (0, array([ 0., -1.,  1.])), (0, array([ 0.,  1., -1.])), (0, array([ 1., -1.,  0.])), (0, array([ 1.,  0., -1.])), (0, array([-2., -1., -1.])), (0, array([-1., -2., -1.])), (0, array([-1., -1., -2.])), (0, array([1., 1., 2.])), (0, array([1., 2., 1.])), (0, array([2., 1., 1.]))]}]
orbit0 ['dxz', 'dyz']{'dxz': 1, 'dyz': 1}
lattice vector: Matrix([[-1/2, 1/2, 1/2], [1/2, -1/2, 1/2], [1/2, 1/2, -1/2]])
完成无对称性约束的Hamiltonian生成
完成Hamiltonian旋转矩阵的构建
(16, 28)
[1, 8, 9, 2, 3, 16, 17, 4, 5, 24, 25, 6, 7, 11, 18, 19, 12, 13, 26, 27, 14, 15, 21, 28, 29, 22, 23, 31]
([0, 2, 3, 4, 5, 6, 7, 10, 12, 13, 14, 15, 20, 22, 23, 30], 16)
neighbour: 0 op_name: ['E', [0.0, 0.0, 0.0], False]
([0, 2, 3, 4, 5, 6, 7, 10, 12, 13, 14, 15, 20, 22, 23, 30], 16)
neighbour: 0 op_name: ['C4z+', [0.0, 0.0, 0.0], False]
(16, 14)
([0, 5, 10, 15], 4)
neighbour: 0 op_name: ['C4z-', [0.0, 0.0, 0.0], False]
([0, 5, 10, 15], 4)
neighbour: 0 op_name: ['C2x', [0.0, 0.0, 0.0], True]
([0, 5, 10, 15], 4)
neighbour: 0 op_name: ['C2y', [0.0, 0.0, 0.0], True]
([0, 5, 10, 15], 4)
neighbour: 0 op_name: ['C2z', [0.0, 0.0, 0.0], False]
([0, 5, 10, 15], 4)
neighbour: 0 op_name: ['C2a', [0.0, 0.0, 0.0], True]
([0, 5, 10, 15], 4)
neighbour: 0 op_name: ['C2b', [0.0, 0.0, 0.0], True]
([0, 5, 10, 15], 4)
neighbour: 0 op_name: ['I', [0.0, 0.0, 0.0], False]
([0, 5, 10, 15], 4)
neighbour: 0 op_name: ['S4z-', [0.0, 0.0, 0.0], False]
([0, 5, 10, 15], 4)
neighbour: 0 op_name: ['S4z+', [0.0, 0.0, 0.0], False]
([0, 5, 10, 15], 4)
neighbour: 0 op_name: ['Sigma_x', [0.0, 0.0, 0.0], True]
([0, 5, 10, 15], 4)
neighbour: 0 op_name: ['Sigma_y', [0.0, 0.0, 0.0], True]
([0, 5, 10, 15], 4)
neighbour: 0 op_name: ['Sigma_z', [0.0, 0.0, 0.0], False]
([0, 5, 10, 15], 4)
neighbour: 0 op_name: ['Sigma_da', [0.0, 0.0, 0.0], True]
([0, 5, 10, 15], 4)
neighbour: 0 op_name: ['Sigma_db', [0.0, 0.0, 0.0], True]
([0, 5, 10, 15], 4)
(128, 256)
[0, 1, 14, 15, 2, 3, 12, 13, 4, 5, 10, 11, 6, 7, 8, 9, 64, 65, 30, 31, 66, 67, 28, 29, 68, 69, 26, 27, 70, 71, 24, 25, 72, 73, 22, 23, 74, 75, 20, 21, 76, 77, 18, 19, 78, 79, 16, 17, 128, 129, 46, 47, 130, 131, 44, 45, 132, 133, 42, 43, 134, 135, 40, 41, 136, 137, 38, 39, 138, 139, 36, 37, 140, 141, 34, 35, 142, 143, 32, 33, 192, 193, 62, 63, 194, 195, 60, 61, 196, 197, 58, 59, 198, 199, 56, 57, 200, 201, 54, 55, 202, 203, 52, 53, 204, 205, 50, 51, 206, 207, 48, 49, 80, 81, 94, 95, 82, 83, 92, 93, 84, 85, 90, 91, 86, 87, 88, 89, 144, 145, 110, 111, 146, 147, 108, 109, 148, 149, 106, 107, 150, 151, 104, 105, 152, 153, 102, 103, 154, 155, 100, 101, 156, 157, 98, 99, 158, 159, 96, 97, 208, 209, 126, 127, 210, 211, 124, 125, 212, 213, 122, 123, 214, 215, 120, 121, 216, 217, 118, 119, 218, 219, 116, 117, 220, 221, 114, 115, 222, 223, 112, 113, 160, 161, 174, 175, 162, 163, 172, 173, 164, 165, 170, 171, 166, 167, 168, 169, 224, 225, 190, 191, 226, 227, 188, 189, 228, 229, 186, 187, 230, 231, 184, 185, 232, 233, 182, 183, 234, 235, 180, 181, 236, 237, 178, 179, 238, 239, 176, 177, 240, 241, 254, 255, 242, 243, 252, 253, 244, 245, 250, 251, 246, 247, 248, 249]
([14, 15, 12, 13, 10, 11, 8, 9, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 94, 95, 92, 93, 90, 91, 88, 89, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 174, 175, 172, 173, 170, 171, 168, 169, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 254, 255, 252, 253, 250, 251, 248, 249], 128)
neighbour: 1 op_name: ['E', [0.0, 0.0, 0.0], False]
([14, 15, 12, 13, 10, 11, 8, 9, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 94, 95, 92, 93, 90, 91, 88, 89, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 174, 175, 172, 173, 170, 171, 168, 169, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 254, 255, 252, 253, 250, 251, 248, 249], 128)
neighbour: 1 op_name: ['C4z+', [0.0, 0.0, 0.0], False]
(128, 128)
([8, 9, 12, 13, 24, 25, 18, 19, 30, 31, 26, 27, 40, 41, 34, 35, 56, 57, 50, 51, 62, 63, 58, 59, 88, 89, 92, 93, 120, 121, 114, 115], 32)
neighbour: 1 op_name: ['C4z-', [0.0, 0.0, 0.0], False]
([8, 9, 12, 13, 24, 25, 18, 19, 30, 31, 26, 27, 40, 41, 34, 35, 56, 57, 50, 51, 62, 63, 58, 59, 88, 89, 92, 93, 120, 121, 114, 115], 32)
neighbour: 1 op_name: ['C2x', [0.0, 0.0, 0.0], True]
(96, 24)
([12, 13, 26, 27, 30, 31, 40, 41, 34, 35, 58, 59, 62, 63, 92, 93, 120, 121, 114, 115], 20)
neighbour: 1 op_name: ['C2y', [0.0, 0.0, 0.0], True]
([12, 13, 26, 27, 30, 31, 40, 41, 34, 35, 58, 59, 62, 63, 92, 93, 120, 121, 114, 115], 20)
neighbour: 1 op_name: ['C2z', [0.0, 0.0, 0.0], False]
([12, 13, 26, 27, 30, 31, 40, 41, 34, 35, 58, 59, 62, 63, 92, 93, 120, 121, 114, 115], 20)
neighbour: 1 op_name: ['C2a', [0.0, 0.0, 0.0], True]
(64, 8)
([12, 13, 40, 41, 34, 35, 92, 93, 120, 121, 114, 115], 12)
neighbour: 1 op_name: ['C2b', [0.0, 0.0, 0.0], True]
([12, 13, 40, 41, 34, 35, 92, 93, 120, 121, 114, 115], 12)
neighbour: 1 op_name: ['I', [0.0, 0.0, 0.0], False]
(64, 10)
([12, 34, 35, 92, 114, 115], 6)
neighbour: 1 op_name: ['S4z-', [0.0, 0.0, 0.0], False]
([12, 34, 35, 92, 114, 115], 6)
neighbour: 1 op_name: ['S4z+', [0.0, 0.0, 0.0], False]
([12, 34, 35, 92, 114, 115], 6)
neighbour: 1 op_name: ['Sigma_x', [0.0, 0.0, 0.0], True]
([12, 34, 35, 92, 114, 115], 6)
neighbour: 1 op_name: ['Sigma_y', [0.0, 0.0, 0.0], True]
([12, 34, 35, 92, 114, 115], 6)
neighbour: 1 op_name: ['Sigma_z', [0.0, 0.0, 0.0], False]
([12, 34, 35, 92, 114, 115], 6)
neighbour: 1 op_name: ['Sigma_da', [0.0, 0.0, 0.0], True]
([12, 34, 35, 92, 114, 115], 6)
neighbour: 1 op_name: ['Sigma_db', [0.0, 0.0, 0.0], True]
([12, 34, 35, 92, 114, 115], 6)
(96, 192)
[0, 1, 10, 11, 2, 3, 8, 9, 4, 5, 6, 7, 48, 49, 22, 23, 50, 51, 20, 21, 52, 53, 18, 19, 54, 55, 16, 17, 56, 57, 14, 15, 58, 59, 12, 13, 96, 97, 34, 35, 98, 99, 32, 33, 100, 101, 30, 31, 102, 103, 28, 29, 104, 105, 26, 27, 106, 107, 24, 25, 144, 145, 46, 47, 146, 147, 44, 45, 148, 149, 42, 43, 150, 151, 40, 41, 152, 153, 38, 39, 154, 155, 36, 37, 60, 61, 70, 71, 62, 63, 68, 69, 64, 65, 66, 67, 108, 109, 82, 83, 110, 111, 80, 81, 112, 113, 78, 79, 114, 115, 76, 77, 116, 117, 74, 75, 118, 119, 72, 73, 156, 157, 94, 95, 158, 159, 92, 93, 160, 161, 90, 91, 162, 163, 88, 89, 164, 165, 86, 87, 166, 167, 84, 85, 120, 121, 130, 131, 122, 123, 128, 129, 124, 125, 126, 127, 168, 169, 142, 143, 170, 171, 140, 141, 172, 173, 138, 139, 174, 175, 136, 137, 176, 177, 134, 135, 178, 179, 132, 133, 180, 181, 190, 191, 182, 183, 188, 189, 184, 185, 186, 187]
([10, 11, 8, 9, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 70, 71, 68, 69, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 130, 131, 128, 129, 126, 127, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 190, 191, 188, 189, 186, 187], 96)
neighbour: 2 op_name: ['E', [0.0, 0.0, 0.0], False]
([10, 11, 8, 9, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 70, 71, 68, 69, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 130, 131, 128, 129, 126, 127, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 190, 191, 188, 189, 186, 187], 96)
neighbour: 2 op_name: ['C4z+', [0.0, 0.0, 0.0], False]
(96, 96)
([10, 11, 8, 6, 14, 15, 18, 19, 24, 25, 26, 27, 38, 39, 42, 43, 70, 71, 68, 66, 84, 85, 86, 87], 24)
neighbour: 2 op_name: ['C4z-', [0.0, 0.0, 0.0], False]
([10, 11, 8, 6, 14, 15, 18, 19, 24, 25, 26, 27, 38, 39, 42, 43, 70, 71, 68, 66, 84, 85, 86, 87], 24)
neighbour: 2 op_name: ['C2x', [0.0, 0.0, 0.0], True]
(48, 6)
([10, 11, 8, 6, 14, 19, 24, 25, 27, 39, 42, 70, 71, 68, 66, 84, 85, 87], 18)
neighbour: 2 op_name: ['C2y', [0.0, 0.0, 0.0], True]
([10, 11, 8, 6, 14, 19, 24, 25, 27, 39, 42, 70, 71, 68, 66, 84, 85, 87], 18)
neighbour: 2 op_name: ['C2z', [0.0, 0.0, 0.0], False]
([10, 11, 8, 6, 14, 19, 24, 25, 27, 39, 42, 70, 71, 68, 66, 84, 85, 87], 18)
neighbour: 2 op_name: ['C2a', [0.0, 0.0, 0.0], True]
(32, 4)
([10, 11, 8, 6, 24, 25, 27, 70, 71, 68, 66, 84, 85, 87], 14)
neighbour: 2 op_name: ['C2b', [0.0, 0.0, 0.0], True]
([10, 11, 8, 6, 24, 25, 27, 70, 71, 68, 66, 84, 85, 87], 14)
neighbour: 2 op_name: ['I', [0.0, 0.0, 0.0], False]
(16, 4)
([10, 8, 6, 25, 27, 70, 68, 66, 85, 87], 10)
neighbour: 2 op_name: ['S4z-', [0.0, 0.0, 0.0], False]
([10, 8, 6, 25, 27, 70, 68, 66, 85, 87], 10)
neighbour: 2 op_name: ['S4z+', [0.0, 0.0, 0.0], False]
([10, 8, 6, 25, 27, 70, 68, 66, 85, 87], 10)
neighbour: 2 op_name: ['Sigma_x', [0.0, 0.0, 0.0], True]
([10, 8, 6, 25, 27, 70, 68, 66, 85, 87], 10)
neighbour: 2 op_name: ['Sigma_y', [0.0, 0.0, 0.0], True]
([10, 8, 6, 25, 27, 70, 68, 66, 85, 87], 10)
neighbour: 2 op_name: ['Sigma_z', [0.0, 0.0, 0.0], False]
([10, 8, 6, 25, 27, 70, 68, 66, 85, 87], 10)
neighbour: 2 op_name: ['Sigma_da', [0.0, 0.0, 0.0], True]
([10, 8, 6, 25, 27, 70, 68, 66, 85, 87], 10)
neighbour: 2 op_name: ['Sigma_db', [0.0, 0.0, 0.0], True]
([10, 8, 6, 25, 27, 70, 68, 66, 85, 87], 10)
(192, 384)
[0, 1, 10, 11, 2, 3, 8, 9, 4, 5, 6, 7, 12, 13, 22, 23, 14, 15, 20, 21, 16, 17, 18, 19, 96, 97, 34, 35, 98, 99, 32, 33, 100, 101, 30, 31, 102, 103, 28, 29, 104, 105, 26, 27, 106, 107, 24, 25, 108, 109, 46, 47, 110, 111, 44, 45, 112, 113, 42, 43, 114, 115, 40, 41, 116, 117, 38, 39, 118, 119, 36, 37, 192, 193, 58, 59, 194, 195, 56, 57, 196, 197, 54, 55, 198, 199, 52, 53, 200, 201, 50, 51, 202, 203, 48, 49, 204, 205, 70, 71, 206, 207, 68, 69, 208, 209, 66, 67, 210, 211, 64, 65, 212, 213, 62, 63, 214, 215, 60, 61, 288, 289, 82, 83, 290, 291, 80, 81, 292, 293, 78, 79, 294, 295, 76, 77, 296, 297, 74, 75, 298, 299, 72, 73, 300, 301, 94, 95, 302, 303, 92, 93, 304, 305, 90, 91, 306, 307, 88, 89, 308, 309, 86, 87, 310, 311, 84, 85, 120, 121, 130, 131, 122, 123, 128, 129, 124, 125, 126, 127, 132, 133, 142, 143, 134, 135, 140, 141, 136, 137, 138, 139, 216, 217, 154, 155, 218, 219, 152, 153, 220, 221, 150, 151, 222, 223, 148, 149, 224, 225, 146, 147, 226, 227, 144, 145, 228, 229, 166, 167, 230, 231, 164, 165, 232, 233, 162, 163, 234, 235, 160, 161, 236, 237, 158, 159, 238, 239, 156, 157, 312, 313, 178, 179, 314, 315, 176, 177, 316, 317, 174, 175, 318, 319, 172, 173, 320, 321, 170, 171, 322, 323, 168, 169, 324, 325, 190, 191, 326, 327, 188, 189, 328, 329, 186, 187, 330, 331, 184, 185, 332, 333, 182, 183, 334, 335, 180, 181, 240, 241, 250, 251, 242, 243, 248, 249, 244, 245, 246, 247, 252, 253, 262, 263, 254, 255, 260, 261, 256, 257, 258, 259, 336, 337, 274, 275, 338, 339, 272, 273, 340, 341, 270, 271, 342, 343, 268, 269, 344, 345, 266, 267, 346, 347, 264, 265, 348, 349, 286, 287, 350, 351, 284, 285, 352, 353, 282, 283, 354, 355, 280, 281, 356, 357, 278, 279, 358, 359, 276, 277, 360, 361, 370, 371, 362, 363, 368, 369, 364, 365, 366, 367, 372, 373, 382, 383, 374, 375, 380, 381, 376, 377, 378, 379]
([10, 11, 8, 9, 6, 7, 22, 23, 20, 21, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 130, 131, 128, 129, 126, 127, 142, 143, 140, 141, 138, 139, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 250, 251, 248, 249, 246, 247, 262, 263, 260, 261, 258, 259, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 370, 371, 368, 369, 366, 367, 382, 383, 380, 381, 378, 379], 192)
neighbour: 3 op_name: ['E', [0.0, 0.0, 0.0], False]
([10, 11, 8, 9, 6, 7, 22, 23, 20, 21, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 130, 131, 128, 129, 126, 127, 142, 143, 140, 141, 138, 139, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 250, 251, 248, 249, 246, 247, 262, 263, 260, 261, 258, 259, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 370, 371, 368, 369, 366, 367, 382, 383, 380, 381, 378, 379], 192)
neighbour: 3 op_name: ['C4z+', [0.0, 0.0, 0.0], False]
(192, 192)
([20, 21, 8, 6, 7, 18, 38, 39, 26, 27, 28, 29, 30, 31, 44, 45, 42, 43, 62, 63, 66, 67, 68, 69, 86, 87, 74, 75, 76, 77, 78, 79, 92, 93, 90, 91, 140, 141, 128, 126, 127, 138, 182, 183, 186, 187, 188, 189], 48)
neighbour: 3 op_name: ['C4z-', [0.0, 0.0, 0.0], False]
([20, 21, 8, 6, 7, 18, 38, 39, 26, 27, 28, 29, 30, 31, 44, 45, 42, 43, 62, 63, 66, 67, 68, 69, 86, 87, 74, 75, 76, 77, 78, 79, 92, 93, 90, 91, 140, 141, 128, 126, 127, 138, 182, 183, 186, 187, 188, 189], 48)
neighbour: 3 op_name: ['C2x', [0.0, 0.0, 0.0], True]
(144, 36)
([20, 21, 18, 6, 7, 44, 45, 42, 43, 30, 31, 68, 69, 66, 67, 92, 93, 90, 91, 78, 79, 140, 141, 138, 126, 127, 188, 189, 186, 187], 30)
neighbour: 3 op_name: ['C2y', [0.0, 0.0, 0.0], True]
([20, 21, 18, 6, 7, 44, 45, 42, 43, 30, 31, 68, 69, 66, 67, 92, 93, 90, 91, 78, 79, 140, 141, 138, 126, 127, 188, 189, 186, 187], 30)
neighbour: 3 op_name: ['C2z', [0.0, 0.0, 0.0], False]
([20, 21, 18, 6, 7, 44, 45, 42, 43, 30, 31, 68, 69, 66, 67, 92, 93, 90, 91, 78, 79, 140, 141, 138, 126, 127, 188, 189, 186, 187], 30)
neighbour: 3 op_name: ['C2a', [0.0, 0.0, 0.0], True]
(96, 12)
([20, 21, 18, 6, 7, 68, 69, 66, 67, 140, 141, 138, 126, 127, 188, 189, 186, 187], 18)
neighbour: 3 op_name: ['C2b', [0.0, 0.0, 0.0], True]
([20, 21, 18, 6, 7, 68, 69, 66, 67, 140, 141, 138, 126, 127, 188, 189, 186, 187], 18)
neighbour: 3 op_name: ['I', [0.0, 0.0, 0.0], False]
(64, 6)
([20, 18, 6, 69, 66, 67, 140, 138, 126, 189, 186, 187], 12)
neighbour: 3 op_name: ['S4z-', [0.0, 0.0, 0.0], False]
([20, 18, 6, 69, 66, 67, 140, 138, 126, 189, 186, 187], 12)
neighbour: 3 op_name: ['S4z+', [0.0, 0.0, 0.0], False]
([20, 18, 6, 69, 66, 67, 140, 138, 126, 189, 186, 187], 12)
neighbour: 3 op_name: ['Sigma_x', [0.0, 0.0, 0.0], True]
([20, 18, 6, 69, 66, 67, 140, 138, 126, 189, 186, 187], 12)
neighbour: 3 op_name: ['Sigma_y', [0.0, 0.0, 0.0], True]
([20, 18, 6, 69, 66, 67, 140, 138, 126, 189, 186, 187], 12)
neighbour: 3 op_name: ['Sigma_z', [0.0, 0.0, 0.0], False]
([20, 18, 6, 69, 66, 67, 140, 138, 126, 189, 186, 187], 12)
neighbour: 3 op_name: ['Sigma_da', [0.0, 0.0, 0.0], True]
([20, 18, 6, 69, 66, 67, 140, 138, 126, 189, 186, 187], 12)
neighbour: 3 op_name: ['Sigma_db', [0.0, 0.0, 0.0], True]
([20, 18, 6, 69, 66, 67, 140, 138, 126, 189, 186, 187], 12)
完成Hamiltonian构建
{0: 0, 5: 1, 10: 2, 15: 3}
{12: 4, 34: 5, 35: 6, 92: 7, 114: 8, 115: 9}
{10: 10, 8: 11, 6: 12, 25: 13, 27: 14, 70: 15, 68: 16, 66: 17, 85: 18, 87: 19}
{20: 20, 18: 21, 6: 22, 69: 23, 66: 24, 67: 25, 140: 26, 138: 27, 126: 28, 189: 29, 186: 30, 187: 31}
{0: array([[([array([0., 0., 0.])], [{0: 1}]), ([], []),
        ([array([0., 0., 0.])], [{1: 1j}]), ([], [])],
       [([], []), ([array([0., 0., 0.])], [{2: 1}]), ([], []),
        ([array([0., 0., 0.])], [{3: 1j}])],
       [([array([0., 0., 0.])], [{1: -1j}]), ([], []),
        ([array([0., 0., 0.])], [{0: (1-0j)}]), ([], [])],
       [([], []), ([array([0., 0., 0.])], [{3: -1j}]), ([], []),
        ([array([0., 0., 0.])], [{2: (1-0j)}])]], dtype=object), 1: array([[([array([-1., -1., -1.]), array([-1.,  0.,  0.]), array([ 0., -1.,  0.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([0., 1., 0.]), array([1., 0., 0.]), array([1., 1., 1.])], [{4: (1-0j)}, {4: (1-0j)}, {4: (1-0j)}, {4: (1-0j)}, {4: (1-0j)}, {4: (1-0j)}, {4: 1}, {4: (1-0j)}]),
        ([], []),
        ([array([-1., -1., -1.]), array([-1.,  0.,  0.]), array([ 0., -1.,  0.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([0., 1., 0.]), array([1., 0., 0.]), array([1., 1., 1.])], [{5: (-1+0j), 6: 1j}, {5: 1, 6: 1j}, {5: (1-0j), 6: 1j}, {5: (-1+0j), 6: 1j}, {5: (-1+0j), 6: 1j}, {5: (1-0j), 6: 1j}, {5: (1-0j), 6: 1j}, {5: (-1+0j), 6: 1j}]),
        ([], [])],
       [([], []),
        ([array([-1., -1., -1.]), array([-1.,  0.,  0.]), array([ 0., -1.,  0.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([0., 1., 0.]), array([1., 0., 0.]), array([1., 1., 1.])], [{7: (1-0j)}, {7: (1-0j)}, {7: (1-0j)}, {7: (1-0j)}, {7: (1-0j)}, {7: (1-0j)}, {7: 1}, {7: (1-0j)}]),
        ([], []),
        ([array([-1., -1., -1.]), array([-1.,  0.,  0.]), array([ 0., -1.,  0.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([0., 1., 0.]), array([1., 0., 0.]), array([1., 1., 1.])], [{8: (-1+0j), 9: 1j}, {8: 1, 9: 1j}, {8: (1-0j), 9: 1j}, {8: (-1+0j), 9: 1j}, {8: (-1+0j), 9: 1j}, {8: (1-0j), 9: 1j}, {8: (1-0j), 9: 1j}, {8: (-1+0j), 9: 1j}])],
       [([array([-1., -1., -1.]), array([-1.,  0.,  0.]), array([ 0., -1.,  0.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([0., 1., 0.]), array([1., 0., 0.]), array([1., 1., 1.])], [{5: (-1+0j), 6: -1j}, {5: (1-0j), 6: -1j}, {5: (1-0j), 6: -1j}, {5: (-1+0j), 6: -1j}, {5: (-1+0j), 6: -1j}, {5: (1-0j), 6: -1j}, {5: (1-0j), 6: -1j}, {5: (-1+0j), 6: -1j}]),
        ([], []),
        ([array([-1., -1., -1.]), array([-1.,  0.,  0.]), array([ 0., -1.,  0.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([0., 1., 0.]), array([1., 0., 0.]), array([1., 1., 1.])], [{4: (1-0j)}, {4: (1-0j)}, {4: (1-0j)}, {4: (1-0j)}, {4: (1-0j)}, {4: (1-0j)}, {4: (1-0j)}, {4: (1-0j)}]),
        ([], [])],
       [([], []),
        ([array([-1., -1., -1.]), array([-1.,  0.,  0.]), array([ 0., -1.,  0.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([0., 1., 0.]), array([1., 0., 0.]), array([1., 1., 1.])], [{8: (-1+0j), 9: -1j}, {8: (1-0j), 9: -1j}, {8: (1-0j), 9: -1j}, {8: (-1+0j), 9: -1j}, {8: (-1+0j), 9: -1j}, {8: (1-0j), 9: -1j}, {8: (1-0j), 9: -1j}, {8: (-1+0j), 9: -1j}]),
        ([], []),
        ([array([-1., -1., -1.]), array([-1.,  0.,  0.]), array([ 0., -1.,  0.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([0., 1., 0.]), array([1., 0., 0.]), array([1., 1., 1.])], [{7: (1-0j)}, {7: (1-0j)}, {7: (1-0j)}, {7: (1-0j)}, {7: (1-0j)}, {7: (1-0j)}, {7: (1-0j)}, {7: (1-0j)}])]],
      dtype=object), 2: array([[([array([-1., -1.,  0.]), array([-1.,  0., -1.]), array([ 0., -1., -1.]), array([0., 1., 1.]), array([1., 0., 1.]), array([1., 1., 0.])], [{10: (1-0j)}, {11: (1-0j)}, {12: (1-0j)}, {12: 1}, {11: 1}, {10: 1}]),
        ([], []),
        ([array([-1., -1.,  0.]), array([-1.,  0., -1.]), array([ 0., -1., -1.]), array([0., 1., 1.]), array([1., 0., 1.]), array([1., 1., 0.])], [{13: 1j}, {14: 1j}, {14: 1j}, {14: 1j}, {14: 1j}, {13: 1j}]),
        ([], [])],
       [([], []),
        ([array([-1., -1.,  0.]), array([-1.,  0., -1.]), array([ 0., -1., -1.]), array([0., 1., 1.]), array([1., 0., 1.]), array([1., 1., 0.])], [{15: (1-0j)}, {16: (1-0j)}, {17: (1-0j)}, {17: 1}, {16: 1}, {15: 1}]),
        ([], []),
        ([array([-1., -1.,  0.]), array([-1.,  0., -1.]), array([ 0., -1., -1.]), array([0., 1., 1.]), array([1., 0., 1.]), array([1., 1., 0.])], [{18: 1j}, {19: 1j}, {19: 1j}, {19: 1j}, {19: 1j}, {18: 1j}])],
       [([array([-1., -1.,  0.]), array([-1.,  0., -1.]), array([ 0., -1., -1.]), array([0., 1., 1.]), array([1., 0., 1.]), array([1., 1., 0.])], [{13: -1j}, {14: -1j}, {14: -1j}, {14: -1j}, {14: -1j}, {13: -1j}]),
        ([], []),
        ([array([-1., -1.,  0.]), array([-1.,  0., -1.]), array([ 0., -1., -1.]), array([0., 1., 1.]), array([1., 0., 1.]), array([1., 1., 0.])], [{10: (1-0j)}, {12: (1-0j)}, {11: (1-0j)}, {11: (1-0j)}, {12: (1-0j)}, {10: (1-0j)}]),
        ([], [])],
       [([], []),
        ([array([-1., -1.,  0.]), array([-1.,  0., -1.]), array([ 0., -1., -1.]), array([0., 1., 1.]), array([1., 0., 1.]), array([1., 1., 0.])], [{18: -1j}, {19: -1j}, {19: -1j}, {19: -1j}, {19: -1j}, {18: -1j}]),
        ([], []),
        ([array([-1., -1.,  0.]), array([-1.,  0., -1.]), array([ 0., -1., -1.]), array([0., 1., 1.]), array([1., 0., 1.]), array([1., 1., 0.])], [{15: (1-0j)}, {17: (1-0j)}, {16: (1-0j)}, {16: (1-0j)}, {17: (1-0j)}, {15: (1-0j)}])]],
      dtype=object), 3: array([[([array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  1., -1.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.]), array([-2., -1., -1.]), array([-1., -2., -1.]), array([-1., -1., -2.]), array([1., 1., 2.]), array([1., 2., 1.]), array([2., 1., 1.])], [{20: (1-0j)}, {21: (1-0j)}, {22: (1-0j)}, {22: 1}, {21: (1-0j)}, {20: (1-0j)}, {22: (1-0j)}, {20: (1-0j)}, {21: (1-0j)}, {21: 1}, {20: 1}, {22: (1-0j)}]),
        ([], []),
        ([array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  1., -1.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.]), array([-2., -1., -1.]), array([-1., -2., -1.]), array([-1., -1., -2.]), array([1., 1., 2.]), array([1., 2., 1.]), array([2., 1., 1.])], [{23: 1j}, {24: (-1+0j), 25: 1j}, {23: 1j}, {23: 1j}, {24: (-1+0j), 25: 1j}, {23: 1j}, {23: 1j}, {23: 1j}, {24: (1-0j), 25: 1j}, {24: 1, 25: 1j}, {23: 1j}, {23: 1j}]),
        ([], [])],
       [([], []),
        ([array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  1., -1.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.]), array([-2., -1., -1.]), array([-1., -2., -1.]), array([-1., -1., -2.]), array([1., 1., 2.]), array([1., 2., 1.]), array([2., 1., 1.])], [{26: (1-0j)}, {27: (1-0j)}, {28: (1-0j)}, {28: 1}, {27: (1-0j)}, {26: (1-0j)}, {28: (1-0j)}, {26: (1-0j)}, {27: (1-0j)}, {27: 1}, {26: 1}, {28: (1-0j)}]),
        ([], []),
        ([array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  1., -1.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.]), array([-2., -1., -1.]), array([-1., -2., -1.]), array([-1., -1., -2.]), array([1., 1., 2.]), array([1., 2., 1.]), array([2., 1., 1.])], [{29: 1j}, {30: (-1+0j), 31: 1j}, {29: 1j}, {29: 1j}, {30: (-1+0j), 31: 1j}, {29: 1j}, {29: 1j}, {29: 1j}, {30: (1-0j), 31: 1j}, {30: 1, 31: 1j}, {29: 1j}, {29: 1j}])],
       [([array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  1., -1.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.]), array([-2., -1., -1.]), array([-1., -2., -1.]), array([-1., -1., -2.]), array([1., 1., 2.]), array([1., 2., 1.]), array([2., 1., 1.])], [{23: -1j}, {24: (-1+0j), 25: -1j}, {23: -1j}, {23: -1j}, {24: (-1+0j), 25: -1j}, {23: -1j}, {23: -1j}, {23: -1j}, {24: (1-0j), 25: -1j}, {24: (1-0j), 25: -1j}, {23: -1j}, {23: -1j}]),
        ([], []),
        ([array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  1., -1.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.]), array([-2., -1., -1.]), array([-1., -2., -1.]), array([-1., -1., -2.]), array([1., 1., 2.]), array([1., 2., 1.]), array([2., 1., 1.])], [{22: (1-0j)}, {21: (1-0j)}, {20: (1-0j)}, {20: (1-0j)}, {21: (1-0j)}, {22: (1-0j)}, {20: (1-0j)}, {22: (1-0j)}, {21: (1-0j)}, {21: (1-0j)}, {22: (1-0j)}, {20: (1-0j)}]),
        ([], [])],
       [([], []),
        ([array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  1., -1.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.]), array([-2., -1., -1.]), array([-1., -2., -1.]), array([-1., -1., -2.]), array([1., 1., 2.]), array([1., 2., 1.]), array([2., 1., 1.])], [{29: -1j}, {30: (-1+0j), 31: -1j}, {29: -1j}, {29: -1j}, {30: (-1+0j), 31: -1j}, {29: -1j}, {29: -1j}, {29: -1j}, {30: (1-0j), 31: -1j}, {30: (1-0j), 31: -1j}, {29: -1j}, {29: -1j}]),
        ([], []),
        ([array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  1., -1.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.]), array([-2., -1., -1.]), array([-1., -2., -1.]), array([-1., -1., -2.]), array([1., 1., 2.]), array([1., 2., 1.]), array([2., 1., 1.])], [{28: (1-0j)}, {27: (1-0j)}, {26: (1-0j)}, {26: (1-0j)}, {27: (1-0j)}, {28: (1-0j)}, {26: (1-0j)}, {28: (1-0j)}, {27: (1-0j)}, {27: (1-0j)}, {28: (1-0j)}, {26: (1-0j)}])]],
      dtype=object)}
