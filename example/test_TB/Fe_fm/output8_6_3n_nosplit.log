band_index: [5, 6, 7, 8]
model_index [2, 3, 4, 5, 6, 7, 8, 9]
mask: []
neighbour_list [3]
0 特征值优化 tensor(29.1291, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990]],
       device='cuda:0') 0
1000 特征值优化 tensor(2.5380, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0269,  0.1827, -0.0323,  0.0251, -0.1013, -0.1316, -0.0500, -0.0474,
         -0.0659,  0.0068, -0.0416, -0.0637,  0.1351,  0.2385,  0.2375,  0.1320,
          0.2869,  0.0928,  0.1920,  0.1591,  0.1139,  0.0482,  0.0792,  0.1355,
          0.1430,  0.1204,  0.3582,  0.1149,  0.1503,  0.1011,  0.1004,  0.1502,
          0.1409,  0.1030,  0.1018,  0.1160,  0.0673,  0.1650,  0.0608,  0.1394,
          0.0638,  0.0618, -0.0143,  0.0597,  0.0597,  0.2380,  0.1551, -0.0082,
          0.0928,  0.0928,  0.0247,  0.0289, -0.0244, -0.0386,  0.2571,  0.2566,
         -0.0548, -0.0106,  0.2378,  0.2383,  0.0286,  0.1082,  0.0456,  0.1270,
         -0.0197,  0.1155,  0.0734,  0.1331,  0.0191,  0.0963, -0.0166,  0.1279]],
       device='cuda:0') tensor(0.2063, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
2000 特征值优化 tensor(0.7801, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7361,  0.0725, -0.5964, -0.3856, -0.5391, -0.6518, -0.7742, -0.3691,
         -0.6245, -0.1571, -0.9217, -0.4469,  0.1423,  0.2474,  0.2265,  0.1171,
          0.3416,  0.0238,  0.1792,  0.0654,  0.0289, -0.0661,  0.1462,  0.0514,
         -0.0345, -0.0048,  0.1855,  0.1196,  0.0956,  0.1225,  0.1536,  0.1642,
          0.0073,  0.1762,  0.0425,  0.1460,  0.0208,  0.2658, -0.0514,  0.1989,
         -0.0564, -0.0828, -0.2211, -0.0297, -0.0297,  0.6140,  0.1958, -0.0410,
          0.2451,  0.2450, -0.1547,  0.0990, -0.4297, -0.1846,  0.6007, -0.0375,
         -0.5430, -0.1307, -0.0569,  0.5930,  0.2251,  0.0645, -0.0253,  0.0958,
         -0.1043,  0.1531,  0.0725,  0.1081,  0.1201,  0.0862,  0.0142,  0.2854]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
3000 特征值优化 tensor(0.6539, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0162e+00, -1.8193e-02, -5.3831e-01, -2.7938e-01, -4.2883e-01,
         -6.5500e-01, -9.3548e-01, -4.7061e-01, -9.3307e-01, -2.1339e-01,
         -1.2119e+00, -5.0869e-01,  1.7153e-01,  1.9863e-01,  2.5920e-01,
          8.6876e-02,  4.3983e-01,  2.3427e-02,  1.1979e-01,  7.6360e-02,
          3.1806e-04, -6.3814e-02,  1.6101e-01,  4.9042e-02, -1.8827e-02,
          1.0531e-02,  1.8684e-01,  1.4121e-01,  1.3727e-02,  1.1943e-01,
          1.5787e-01,  1.5561e-01,  2.8827e-02,  1.7315e-01,  5.9500e-02,
          1.1830e-01,  2.3158e-02,  2.6237e-01, -5.2043e-02,  1.5276e-01,
         -8.6314e-02, -8.5108e-02, -1.1185e-01, -4.8572e-02, -4.8567e-02,
          6.6804e-01,  2.2521e-01,  3.2313e-02,  1.8245e-01,  1.8115e-01,
         -1.9431e-01,  8.0567e-02, -6.4639e-01, -1.1180e-01,  4.8933e-01,
         -5.3255e-02, -7.1579e-01, -6.1129e-02, -1.6487e-01,  5.0074e-01,
          4.7267e-01,  7.7160e-02,  3.8563e-02,  9.0301e-02, -1.0918e-01,
          1.0132e-01,  1.7178e-01,  1.1898e-01,  1.9977e-01, -3.9274e-02,
          3.3108e-01,  2.4898e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
4000 特征值优化 tensor(0.6091, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1891,  0.0770, -0.5286, -0.2973, -0.3249, -0.6771, -1.0017, -0.3787,
         -1.1075, -0.1556, -1.2402, -0.4024,  0.1969,  0.1791,  0.2571,  0.1046,
          0.5053,  0.0199,  0.1008,  0.0959, -0.0232, -0.0648,  0.1512,  0.0347,
         -0.0059,  0.0179,  0.2136,  0.1295,  0.0199,  0.1206,  0.1648,  0.2161,
          0.0076,  0.1929,  0.0318,  0.1280, -0.0143,  0.2499, -0.0837,  0.0792,
         -0.0554, -0.0495, -0.0870, -0.0633, -0.0634,  0.6512,  0.2570,  0.0847,
          0.1793,  0.1314, -0.1162,  0.0582, -0.7078, -0.0681,  0.4889, -0.1767,
         -0.7347, -0.0895, -0.2526,  0.4351,  0.2864,  0.2481, -0.1156,  0.1615,
         -0.1788,  0.0609,  0.2859,  0.0594,  0.1365, -0.0708,  0.4502,  0.2868]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
5000 特征值优化 tensor(0.5861, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2266,  0.1299, -0.5375, -0.2847, -0.2811, -0.6692, -0.9757, -0.3336,
         -1.1180, -0.1899, -1.2465, -0.3953,  0.2067,  0.2264,  0.2609,  0.0986,
          0.4804,  0.0121,  0.0802,  0.0999, -0.0333, -0.0665,  0.1524,  0.0621,
          0.0219,  0.0206,  0.1948,  0.1956, -0.0619,  0.1195,  0.1647,  0.2312,
         -0.0022,  0.1926,  0.0279,  0.1317, -0.0180,  0.2388, -0.0816,  0.0746,
         -0.0554, -0.0462, -0.0873, -0.0731, -0.0734,  0.6395,  0.2708,  0.0952,
          0.2157,  0.0987, -0.1320,  0.0693, -0.7799, -0.0409,  0.4392, -0.2748,
         -0.7378, -0.0897, -0.2536,  0.4395,  0.2921,  0.2858, -0.1570,  0.1744,
         -0.1626,  0.0595,  0.2887,  0.0564,  0.1094, -0.0875,  0.4399,  0.2949]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
6000 特征值优化 tensor(0.5837, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2810,  0.1711, -0.5401, -0.2799, -0.2499, -0.6684, -1.0013, -0.3221,
         -1.1202, -0.1837, -1.2232, -0.4101,  0.2098,  0.2170,  0.2612,  0.1027,
          0.4965,  0.0190,  0.0719,  0.1062, -0.0365, -0.0664,  0.1523,  0.0585,
          0.0239,  0.0236,  0.1932,  0.2107, -0.0736,  0.1189,  0.1666,  0.2347,
         -0.0064,  0.1933,  0.0268,  0.1316, -0.0203,  0.2371, -0.0804,  0.0771,
         -0.0507, -0.0473, -0.0761, -0.0759, -0.0762,  0.6031,  0.2832,  0.1011,
          0.2549,  0.0566, -0.1441,  0.0751, -0.8058, -0.0322,  0.4364, -0.2684,
         -0.7396, -0.0888, -0.2495,  0.4402,  0.3132,  0.2840, -0.1664,  0.1763,
         -0.1563,  0.0599,  0.2825,  0.0629,  0.0943, -0.0820,  0.4463,  0.2922]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
7000 特征值优化 tensor(0.5833, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2838,  0.1679, -0.5479, -0.2685, -0.2440, -0.6673, -1.0333, -0.3059,
         -1.1162, -0.1758, -1.1723, -0.4245,  0.2096,  0.2075,  0.2686,  0.0808,
          0.5011,  0.0296,  0.0931,  0.1061, -0.0368, -0.0666,  0.1530,  0.0606,
          0.0150,  0.0198,  0.1949,  0.2163, -0.0776,  0.1184,  0.1665,  0.2365,
         -0.0100,  0.1934,  0.0265,  0.1330, -0.0222,  0.2363, -0.0784,  0.0788,
         -0.0436, -0.0493, -0.0746, -0.0758, -0.0761,  0.6045,  0.2837,  0.1056,
          0.2570,  0.0548, -0.1517,  0.0773, -0.8057, -0.0347,  0.4373, -0.2588,
         -0.7425, -0.0876, -0.2462,  0.4428,  0.3354,  0.2799, -0.1800,  0.1772,
         -0.1560,  0.0602,  0.2804,  0.0659,  0.0652, -0.0689,  0.4500,  0.2917]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
8000 特征值优化 tensor(0.5832, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2850,  0.1679, -0.5467, -0.2702, -0.2454, -0.6670, -1.0570, -0.2873,
         -1.1171, -0.1754, -1.1609, -0.4259,  0.2096,  0.2089,  0.2686,  0.0840,
          0.5037,  0.0306,  0.0914,  0.1062, -0.0366, -0.0668,  0.1521,  0.0604,
          0.0149,  0.0199,  0.1949,  0.2172, -0.0787,  0.1187,  0.1660,  0.2367,
         -0.0104,  0.1941,  0.0266,  0.1330, -0.0239,  0.2377, -0.0785,  0.0788,
         -0.0439, -0.0492, -0.0736, -0.0757, -0.0760,  0.6046,  0.2841,  0.1055,
          0.2573,  0.0550, -0.1523,  0.0773, -0.8006, -0.0380,  0.4388, -0.2589,
         -0.7411, -0.0872, -0.2457,  0.4431,  0.3438,  0.2768, -0.1834,  0.1786,
         -0.1560,  0.0600,  0.2806,  0.0662,  0.0549, -0.0677,  0.4501,  0.2919]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
9000 特征值优化 tensor(0.5832, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2852,  0.1674, -0.5472, -0.2689, -0.2468, -0.6664, -1.0738, -0.2767,
         -1.1164, -0.1754, -1.1584, -0.4263,  0.2093,  0.2100,  0.2688,  0.0852,
          0.5049,  0.0310,  0.0904,  0.1066, -0.0369, -0.0666,  0.1527,  0.0599,
          0.0148,  0.0194,  0.1953,  0.2163, -0.0780,  0.1184,  0.1657,  0.2361,
         -0.0102,  0.1936,  0.0263,  0.1331, -0.0249,  0.2400, -0.0782,  0.0788,
         -0.0462, -0.0491, -0.0733, -0.0752, -0.0756,  0.6046,  0.2843,  0.1055,
          0.2572,  0.0552, -0.1521,  0.0772, -0.7986, -0.0390,  0.4394, -0.2612,
         -0.7413, -0.0872, -0.2456,  0.4425,  0.3483,  0.2725, -0.1843,  0.1800,
         -0.1550,  0.0600,  0.2804,  0.0664,  0.0506, -0.0671,  0.4505,  0.2915]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
10000 特征值优化 tensor(0.5832, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2865,  0.1681, -0.5476, -0.2694, -0.2472, -0.6661, -1.0823, -0.2701,
         -1.1161, -0.1762, -1.1554, -0.4269,  0.2099,  0.2094,  0.2680,  0.0870,
          0.5053,  0.0339,  0.0906,  0.1060, -0.0367, -0.0667,  0.1525,  0.0592,
          0.0144,  0.0198,  0.1951,  0.2169, -0.0782,  0.1186,  0.1660,  0.2360,
         -0.0100,  0.1935,  0.0261,  0.1330, -0.0258,  0.2408, -0.0787,  0.0787,
         -0.0467, -0.0495, -0.0734, -0.0766, -0.0770,  0.6037,  0.2837,  0.1057,
          0.2573,  0.0552, -0.1520,  0.0771, -0.7964, -0.0402,  0.4406, -0.2623,
         -0.7415, -0.0874, -0.2459,  0.4431,  0.3521,  0.2714, -0.1851,  0.1805,
         -0.1551,  0.0597,  0.2810,  0.0663,  0.0485, -0.0674,  0.4503,  0.2917]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
11000 特征值优化 tensor(3.6688, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5456,  2.3756, -1.5747, -0.3575, -0.8914, -1.2733, -0.8363, -0.4689,
          0.3389,  1.0256, -2.8649, -1.3691, -0.3560,  0.7382, -0.1223, -0.0450,
          0.1685,  0.1755, -0.4573,  0.0277,  0.4325,  1.3838,  0.0079,  0.0206,
          0.0120,  0.0267,  0.0452,  0.1626, -0.0540,  0.1197,  0.3929,  0.8252,
          0.1551,  0.1400,  0.0156, -0.0649, -0.2958, -0.1629,  0.0459, -0.0030,
         -0.5424, -0.0259,  0.7464, -0.1864, -0.6348, -0.9287,  0.2565, -0.7942,
         -0.5063, -1.1775,  0.3321, -0.4187, -0.7335,  0.5005, -0.1211,  0.3021,
         -0.0758,  0.0821, -0.2500,  0.2530, -0.9694,  0.6516,  0.4518, -0.3864,
         -0.6117,  0.1617, -0.2182, -0.2439, -0.3342, -0.2992, -0.3941,  1.5783]],
       device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
12000 特征值优化 tensor(1.0119, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9166,  1.5016, -1.8918, -0.8151, -1.0544, -1.1386, -1.1780,  0.0559,
         -0.2384,  0.4161, -1.7550, -1.3297, -0.1575,  0.4178, -0.1676,  0.2024,
          0.0639,  0.1270,  0.0041,  0.0501,  0.1599,  0.9195, -0.0164, -0.0443,
         -0.0077,  0.1454, -0.0081,  0.1979, -0.0710,  0.1863,  0.2102,  0.3387,
         -0.0139,  0.0621,  0.0414,  0.0032, -0.2646, -0.0280, -0.0856, -0.1450,
         -0.2249,  0.0120,  0.4739,  0.0221, -0.2576, -0.7663,  0.0243, -0.6138,
         -0.1250, -1.0094,  0.0256, -0.2265, -0.6497,  0.2813, -0.3046,  0.2999,
         -0.0989, -0.0099, -0.4067,  0.2492, -0.5712,  0.4842,  0.5265, -0.0788,
         -0.0265,  0.1447, -0.1621, -0.0071,  0.3131, -0.0712, -0.5074,  0.9082]],
       device='cuda:0') tensor(0.2034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
13000 特征值优化 tensor(0.7152, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9455,  1.2450, -1.7763, -1.2374, -0.9519, -1.0987, -1.3877,  0.1407,
         -0.1872,  0.3422, -1.5524, -0.9560, -0.1609,  0.4013, -0.1757,  0.2660,
          0.1018,  0.3336, -0.0041,  0.0502,  0.1413,  0.8418, -0.0382, -0.0644,
          0.0627,  0.1937,  0.0484,  0.1829, -0.0111,  0.3044,  0.2170,  0.1600,
         -0.0986,  0.0726,  0.0192,  0.0755, -0.2122, -0.0275, -0.0980, -0.1280,
         -0.1998,  0.0345,  0.4301,  0.0434, -0.2768, -0.7665,  0.0080, -0.5403,
         -0.1321, -0.8719, -0.1625, -0.2414, -0.4338,  0.1265, -0.2671,  0.5765,
         -0.2148,  0.0302, -0.4444,  0.1803, -0.1550,  0.1864,  0.2792,  0.0419,
          0.1376,  0.2771, -0.2549, -0.0360,  0.4081,  0.0278, -0.2658,  0.4200]],
       device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
14000 特征值优化 tensor(0.6416, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9611,  1.1898, -1.6870, -1.5115, -1.0199, -1.1348, -1.5015,  0.1362,
         -0.2059,  0.3872, -1.6385, -0.9959, -0.1491,  0.3714, -0.1774,  0.2933,
          0.1410,  0.4177, -0.0067,  0.1016,  0.1316,  0.8322,  0.0570, -0.1063,
          0.0417,  0.2416, -0.0136,  0.1500, -0.0171,  0.3625,  0.2179,  0.0810,
         -0.1222,  0.0773, -0.0143,  0.0597, -0.1491, -0.0170, -0.0507, -0.1085,
         -0.3048,  0.0027,  0.3677,  0.0701, -0.1934, -0.7574,  0.0077, -0.5795,
         -0.1709, -0.8064, -0.1840, -0.3043, -0.4128,  0.1122, -0.3222,  0.6086,
         -0.3009,  0.0763, -0.4218,  0.2262,  0.0881, -0.0077,  0.2399,  0.0103,
          0.3719,  0.2282, -0.3584,  0.0100,  0.3879,  0.0904, -0.1712,  0.2713]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
15000 特征值优化 tensor(0.6343, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.4872e-01,  1.2147e+00, -1.6579e+00, -1.6075e+00, -9.7535e-01,
         -1.1387e+00, -1.5403e+00,  3.9110e-01, -1.9892e-01,  3.9460e-01,
         -1.6827e+00, -1.0654e+00, -1.4921e-01,  3.1162e-01, -1.5558e-01,
          3.1719e-01,  1.9790e-01,  4.6858e-01, -3.6389e-02,  1.0447e-01,
          1.3120e-01,  8.2323e-01,  7.0747e-02, -4.3734e-02, -1.7452e-02,
          2.3084e-01, -4.3916e-02,  1.6247e-01, -3.1323e-02,  3.9116e-01,
          2.2099e-01,  6.6991e-02, -1.0322e-01,  8.1393e-02,  6.0232e-03,
          6.9608e-02, -2.0548e-01, -2.2089e-02, -3.8927e-02, -1.0346e-01,
         -2.6323e-01,  5.9644e-04,  3.6314e-01,  6.9163e-02, -1.9489e-01,
         -7.6849e-01,  6.1029e-03, -5.7884e-01, -1.6885e-01, -7.7911e-01,
         -1.8781e-01, -3.3868e-01, -4.3457e-01,  1.1138e-01, -2.3553e-01,
          6.4570e-01, -3.2433e-01,  9.7188e-02, -4.4453e-01,  1.7996e-01,
          1.2808e-01, -5.4029e-02,  2.0499e-01,  1.8654e-02,  3.8112e-01,
          2.2203e-01, -3.1469e-01, -5.0934e-03,  3.8104e-01,  1.1143e-01,
         -1.5000e-01,  2.5952e-01]], device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
16000 特征值优化 tensor(0.6309, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.6104e-01,  1.2321e+00, -1.6333e+00, -1.6139e+00, -9.4891e-01,
         -1.1544e+00, -1.5353e+00,  5.4595e-01, -2.3459e-01,  4.6543e-01,
         -1.8328e+00, -1.1196e+00, -1.4954e-01,  3.2409e-01, -1.7464e-01,
          3.1211e-01,  2.4680e-01,  4.5721e-01, -3.2772e-02,  1.0198e-01,
          1.3177e-01,  8.2053e-01,  3.7731e-02, -1.0113e-01, -2.6502e-02,
          2.0040e-01, -8.6655e-02,  1.4426e-01,  1.3399e-03,  3.9331e-01,
          2.1832e-01,  4.8870e-02, -1.2321e-01,  7.7385e-02,  6.1493e-03,
          7.0398e-02, -1.8193e-01, -4.9772e-03, -3.3072e-02, -1.1151e-01,
         -2.9895e-01, -4.9698e-03,  3.6986e-01,  6.9510e-02, -1.9770e-01,
         -7.7740e-01,  8.4365e-03, -6.1064e-01, -1.3184e-01, -7.8125e-01,
         -1.7800e-01, -3.3897e-01, -4.7236e-01,  1.3069e-01, -2.7401e-01,
          6.5741e-01, -3.0769e-01,  8.5055e-02, -4.3050e-01,  2.0049e-01,
          1.2487e-01, -3.3605e-02,  1.3226e-01,  3.7228e-03,  4.0178e-01,
          2.0119e-01, -3.5295e-01,  1.7334e-02,  3.9413e-01,  9.5500e-02,
         -1.2896e-01,  2.6994e-01]], device='cuda:0') tensor(0.2041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
17000 特征值优化 tensor(0.6289, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.6731e-01,  1.2366e+00, -1.6201e+00, -1.5986e+00, -9.4529e-01,
         -1.1363e+00, -1.5624e+00,  7.0952e-01, -2.0984e-01,  4.9789e-01,
         -2.0003e+00, -1.1629e+00, -1.4939e-01,  3.1942e-01, -1.6772e-01,
          3.1299e-01,  3.0818e-01,  4.7015e-01, -3.1042e-02,  1.0157e-01,
          1.3155e-01,  8.1716e-01,  2.3334e-02, -1.0327e-01, -3.9342e-02,
          2.0513e-01, -1.1319e-01,  1.2391e-01, -4.6589e-04,  3.8863e-01,
          2.1887e-01,  3.9865e-02, -1.3566e-01,  8.2270e-02,  1.3379e-02,
          6.8895e-02, -1.8407e-01,  2.3298e-02, -2.1664e-02, -1.0309e-01,
         -3.3199e-01, -1.7469e-02,  3.7301e-01,  6.8962e-02, -1.9895e-01,
         -7.7974e-01,  7.8877e-03, -6.1039e-01, -1.3008e-01, -7.7539e-01,
         -1.7531e-01, -3.3608e-01, -4.8779e-01,  1.3991e-01, -2.7016e-01,
          6.7643e-01, -3.2547e-01,  9.7619e-02, -4.2241e-01,  2.0258e-01,
          8.2903e-02, -2.2528e-02,  1.0758e-01,  2.5975e-02,  4.1689e-01,
          2.1400e-01, -3.4181e-01,  1.5497e-02,  4.5963e-01,  5.1929e-02,
         -1.1042e-01,  2.3959e-01]], device='cuda:0') tensor(0.2041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
18000 特征值优化 tensor(0.6320, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.9170e-01,  1.2633e+00, -1.6782e+00, -1.6420e+00, -9.2580e-01,
         -1.1439e+00, -1.5749e+00,  6.0470e-01, -2.6592e-01,  4.3776e-01,
         -1.9255e+00, -1.0908e+00, -1.4979e-01,  3.2598e-01, -1.4697e-01,
          3.3771e-01,  2.5773e-01,  4.7028e-01, -6.6873e-02,  1.0154e-01,
          1.3163e-01,  8.3597e-01,  8.1061e-02, -6.1908e-02, -1.3770e-02,
          1.9520e-01, -7.3950e-02,  1.4742e-01, -5.2762e-02,  4.0842e-01,
          2.1773e-01,  4.8006e-02, -9.9649e-02,  8.0465e-02,  3.5479e-04,
          6.9417e-02, -2.0741e-01, -7.9550e-03, -4.3696e-02, -1.2033e-01,
         -2.9539e-01,  4.0175e-03,  3.8553e-01,  6.7866e-02, -1.9803e-01,
         -7.9317e-01,  8.1904e-03, -6.1203e-01, -1.4894e-01, -8.0134e-01,
         -1.7222e-01, -3.6828e-01, -5.0854e-01,  1.4237e-01, -2.8271e-01,
          6.4980e-01, -3.0988e-01,  8.7789e-02, -4.2338e-01,  2.1733e-01,
          1.3073e-01, -4.1887e-02,  1.1244e-01,  1.7977e-02,  4.0563e-01,
          1.9542e-01, -3.7959e-01,  1.8287e-02,  4.8915e-01,  4.1867e-02,
         -1.2613e-01,  2.7526e-01]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
19000 特征值优化 tensor(0.6316, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.9448e-01,  1.2726e+00, -1.6849e+00, -1.6492e+00, -9.2207e-01,
         -1.1429e+00, -1.5370e+00,  5.4183e-01, -2.7245e-01,  4.3729e-01,
         -1.8382e+00, -1.0874e+00, -1.4991e-01,  3.2415e-01, -1.4864e-01,
          3.3892e-01,  2.4751e-01,  4.7330e-01, -7.5328e-02,  1.0159e-01,
          1.3164e-01,  8.3787e-01,  7.7237e-02, -6.3009e-02, -1.1775e-02,
          1.9476e-01, -7.3398e-02,  1.4846e-01, -4.5769e-02,  4.1055e-01,
          2.1759e-01,  5.0983e-02, -9.2827e-02,  8.0231e-02,  4.2985e-04,
          7.0002e-02, -2.0332e-01, -2.4678e-02, -4.5547e-02, -1.2070e-01,
         -2.6694e-01,  5.5193e-03,  3.8737e-01,  6.8149e-02, -1.9730e-01,
         -7.9931e-01,  8.3360e-03, -6.1054e-01, -1.5037e-01, -8.0323e-01,
         -1.7160e-01, -3.6972e-01, -5.1959e-01,  1.4622e-01, -2.7136e-01,
          6.2760e-01, -3.0885e-01,  8.8203e-02, -4.2149e-01,  2.2088e-01,
          1.3610e-01, -3.5540e-02,  1.1437e-01,  8.6863e-03,  4.0799e-01,
          1.9538e-01, -3.8618e-01,  2.0824e-02,  5.1307e-01,  5.6777e-02,
         -1.2777e-01,  2.7579e-01]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
20000 特征值优化 tensor(0.6315, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.9622e-01,  1.2760e+00, -1.6873e+00, -1.6509e+00, -9.1748e-01,
         -1.1453e+00, -1.5214e+00,  4.9498e-01, -2.7333e-01,  4.3601e-01,
         -1.7863e+00, -1.0854e+00, -1.4959e-01,  3.2379e-01, -1.5013e-01,
          3.4104e-01,  2.4060e-01,  4.7661e-01, -8.0895e-02,  1.0136e-01,
          1.3146e-01,  8.3799e-01,  7.7938e-02, -6.3746e-02, -1.2333e-02,
          1.9524e-01, -7.3847e-02,  1.4837e-01, -4.5187e-02,  4.1121e-01,
          2.1707e-01,  5.2134e-02, -8.8683e-02,  8.0086e-02,  1.4614e-03,
          7.0215e-02, -1.9840e-01, -3.7469e-02, -4.5730e-02, -1.2121e-01,
         -2.4868e-01,  5.8926e-03,  3.8768e-01,  6.7371e-02, -1.9727e-01,
         -8.0062e-01,  8.6906e-03, -6.1050e-01, -1.5086e-01, -8.0384e-01,
         -1.7149e-01, -3.7042e-01, -5.2124e-01,  1.4568e-01, -2.6456e-01,
          6.1103e-01, -3.0914e-01,  8.7528e-02, -4.2123e-01,  2.2137e-01,
          1.4074e-01, -2.4355e-02,  1.1530e-01,  2.2676e-03,  4.0789e-01,
          1.9521e-01, -3.8696e-01,  2.0491e-02,  5.3201e-01,  6.3395e-02,
         -1.2772e-01,  2.7566e-01]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
21000 特征值优化 tensor(3.7215, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6371,  0.3580, -1.8637,  1.4533, -0.0524, -0.9790, -1.4625, -1.8605,
         -1.1982,  1.1428,  0.8426, -0.4689,  0.4697, -0.0590,  0.0522, -0.0240,
          0.6547, -0.0593, -0.2174,  0.0027,  0.4338, -0.1703, -0.4229,  0.2946,
         -0.0505, -0.1082, -0.1142,  0.0754, -0.6047,  0.1983,  0.1963,  0.0869,
          0.0237, -0.1192,  0.1605, -0.9422,  1.1215,  0.3777, -0.0929,  0.2855,
         -0.0497, -0.2971,  1.0918,  0.1377, -0.6020, -0.2177, -0.2070, -0.7424,
          0.5064,  0.6944, -1.1151,  0.3369, -0.4052,  0.6155, -0.4944, -1.0886,
         -1.4742,  0.7528, -0.1561, -0.9955, -1.2518, -0.5322, -0.1702, -0.4559,
         -0.2991,  0.0104, -1.1283,  0.3571, -1.2861,  0.5433, -1.7778,  0.5408]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
22000 特征值优化 tensor(0.7778, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9406,  0.1232, -1.5620,  0.5843, -0.2242, -1.6808, -1.8834, -1.5325,
         -0.8350,  0.5861,  0.6703, -1.1998,  0.1170, -0.0040, -0.0270, -0.0586,
          0.1347, -0.0549, -0.0748,  0.0299,  0.2238, -0.0171,  0.0071,  0.0306,
         -0.0215, -0.2083, -0.2022,  0.1540, -0.1451,  0.1004,  0.1162, -0.0048,
          0.0118, -0.1595,  0.1949, -0.7688,  0.8382,  0.2558, -0.1103,  0.2262,
         -0.0426, -0.0524,  0.6315,  0.1136, -0.1547, -0.3747, -0.0758, -0.0338,
         -0.2290,  0.3119, -0.6101,  0.1389, -0.2656,  0.3163, -0.0108, -0.4669,
         -1.2833,  0.6948, -0.0226, -1.2826, -0.7415, -0.4923, -0.0152, -0.3612,
          0.0770, -0.0841, -0.8149,  0.0498, -0.7998,  0.2359, -1.6360,  0.7854]],
       device='cuda:0') tensor(0.2102, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
23000 特征值优化 tensor(0.6596, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.9003e-01,  1.6124e-01, -1.5865e+00,  5.9942e-01, -2.5272e-01,
         -1.8838e+00, -1.9277e+00, -1.4293e+00, -3.2450e-01,  7.7278e-01,
          6.9739e-01, -1.7342e+00,  1.0710e-01,  1.3119e-02, -5.4677e-02,
         -5.5737e-02,  1.3351e-01, -9.1095e-02, -4.5016e-02,  2.6816e-02,
          2.3113e-01, -2.2431e-02,  4.9240e-02,  1.0209e-02, -2.1344e-02,
         -1.8109e-01, -2.4005e-01,  2.4886e-01, -9.3269e-02,  1.0494e-01,
          1.3214e-01, -2.6988e-02, -4.9164e-02, -1.9766e-01,  1.1788e-01,
         -7.3550e-01,  7.6850e-01,  2.3002e-01, -1.9822e-01,  1.8823e-01,
         -4.1518e-04,  2.5966e-02,  5.6838e-01,  1.2349e-01, -1.1909e-01,
         -4.1088e-01, -4.3774e-02, -9.5676e-02, -2.4076e-01,  4.0073e-01,
         -5.3796e-01,  9.2040e-02, -2.3227e-01,  3.0439e-01,  1.0487e-01,
         -3.6713e-01, -1.1591e+00,  5.8980e-01,  2.0841e-01, -1.3080e+00,
         -6.4627e-01, -5.1767e-01, -1.3255e-01, -3.1855e-01, -1.5751e-02,
         -2.3549e-02, -5.7987e-01, -2.8784e-02, -5.0335e-01,  8.9358e-02,
         -1.6777e+00,  7.8858e-01]], device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
24000 特征值优化 tensor(0.6164, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.7392e-01,  1.7216e-01, -1.6274e+00,  6.5244e-01, -2.3807e-01,
         -1.9248e+00, -1.9291e+00, -1.3856e+00, -1.4923e-04,  9.5457e-01,
          6.9626e-01, -2.2627e+00,  1.0984e-01, -3.0314e-02,  4.4253e-02,
         -5.3237e-02,  1.0353e-01, -8.9773e-02, -8.5129e-02,  2.8968e-02,
          2.2996e-01, -1.5638e-02,  8.0381e-02,  5.8908e-02,  3.8542e-02,
         -1.6624e-01, -2.0699e-01,  2.9515e-01,  1.7160e-02,  9.8547e-02,
          1.2916e-01, -7.3321e-02, -3.4297e-02, -1.8673e-01,  2.7994e-02,
         -7.2207e-01,  7.5896e-01,  2.2832e-01, -2.4664e-01,  1.7398e-01,
          2.4870e-03,  3.6743e-02,  5.4699e-01,  1.2941e-01, -1.1228e-01,
         -4.3361e-01, -3.4813e-02, -5.7898e-02, -2.2320e-01,  3.5907e-01,
         -6.6759e-01,  1.5563e-01, -2.0018e-01,  2.7895e-01,  6.9915e-02,
         -3.5580e-01, -9.4477e-01,  5.0676e-01,  3.9054e-01, -1.2916e+00,
         -6.5032e-01, -4.9468e-01, -1.5249e-01, -3.1655e-01, -1.5415e-01,
         -3.4325e-03, -2.9234e-01, -8.8569e-02, -4.7465e-01,  6.7913e-02,
         -1.7310e+00,  8.2005e-01]], device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
25000 特征值优化 tensor(0.6099, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.8066e-01,  1.7092e-01, -1.7098e+00,  7.0017e-01, -2.2575e-01,
         -1.8548e+00, -1.9099e+00, -1.3865e+00,  5.4532e-02,  1.1317e+00,
          6.6581e-01, -2.6279e+00,  1.0960e-01,  3.2465e-02, -4.9541e-02,
         -8.4963e-02,  7.7545e-02, -2.2740e-01,  1.4990e-02,  2.9690e-02,
          2.2916e-01, -1.6399e-02,  7.8569e-02,  4.7951e-02,  7.6190e-02,
         -1.1355e-01, -3.1993e-01,  4.5861e-01,  1.6642e-03,  1.0155e-01,
          1.3438e-01, -5.3255e-02, -8.9897e-02, -1.6130e-01, -4.2441e-03,
         -6.8563e-01,  7.4573e-01,  2.2513e-01, -2.6933e-01,  1.6065e-01,
         -6.4862e-03,  1.4827e-02,  5.5100e-01,  1.3172e-01, -1.1322e-01,
         -4.3479e-01, -3.2954e-02, -2.6629e-02, -2.2388e-01,  3.7280e-01,
         -6.3520e-01,  1.2497e-01, -1.6877e-01,  2.7157e-01,  1.4118e-01,
         -3.2479e-01, -7.7754e-01,  4.4139e-01,  4.8059e-01, -1.2382e+00,
         -6.1414e-01, -5.2554e-01, -1.2829e-01, -3.2136e-01, -2.1539e-01,
          2.0917e-02, -1.5047e-01, -9.2254e-02, -5.0702e-01,  1.0722e-01,
         -1.7593e+00,  7.9493e-01]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
26000 特征值优化 tensor(0.6054, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.7388e-01,  1.5481e-01, -1.7531e+00,  7.4033e-01, -2.3957e-01,
         -1.7306e+00, -1.8749e+00, -1.3787e+00,  5.1742e-02,  1.3062e+00,
          6.6577e-01, -2.9325e+00,  1.0994e-01,  4.7707e-02, -6.0344e-02,
         -8.9967e-02,  7.9458e-02, -1.4587e-01, -2.0685e-02,  3.8023e-02,
          2.2969e-01, -1.3853e-02,  7.1819e-02,  3.3773e-02,  6.0022e-02,
         -1.1427e-01, -3.2604e-01,  4.9952e-01,  3.0668e-02,  9.9163e-02,
          1.3472e-01, -5.6055e-02, -9.3947e-02, -1.2845e-01, -3.5150e-02,
         -6.3086e-01,  7.3348e-01,  2.1118e-01, -2.9172e-01,  1.8350e-01,
         -1.1188e-02, -3.1033e-02,  5.4542e-01,  1.3203e-01, -1.1332e-01,
         -4.2359e-01, -3.5279e-02, -1.4599e-04, -2.2857e-01,  3.6246e-01,
         -6.7337e-01,  1.3841e-01, -1.5478e-01,  2.6575e-01,  8.4803e-02,
         -3.5158e-01, -6.6003e-01,  4.1372e-01,  5.2375e-01, -1.1907e+00,
         -6.3202e-01, -5.2060e-01, -9.7386e-02, -3.1529e-01, -2.6121e-01,
         -1.2666e-02, -7.5665e-02, -7.6376e-02, -4.8374e-01,  1.2211e-01,
         -1.7472e+00,  7.5921e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
27000 特征值优化 tensor(0.6017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.7328e-01,  1.5620e-01, -1.9100e+00,  9.5364e-01, -2.5359e-01,
         -1.6957e+00, -1.8443e+00, -1.3706e+00, -7.6766e-03,  1.4529e+00,
          7.0421e-01, -3.2930e+00,  1.1032e-01,  3.3176e-02, -3.5635e-02,
         -5.9710e-02,  1.0306e-01, -9.7163e-02, -3.8407e-02,  2.7428e-02,
          2.2907e-01, -2.6965e-02,  6.9243e-02,  4.4392e-02,  2.8126e-02,
         -1.7101e-01, -3.8722e-01,  5.5325e-01,  1.4929e-02,  1.1401e-01,
          1.3398e-01, -4.1574e-02, -9.1169e-02, -1.1381e-01, -4.3713e-02,
         -5.5890e-01,  7.3134e-01,  2.1067e-01, -3.2116e-01,  2.1726e-01,
          1.8540e-03, -8.9189e-02,  5.4358e-01,  1.3194e-01, -1.0953e-01,
         -4.3370e-01, -3.0152e-02,  6.7706e-02, -2.6940e-01,  3.5372e-01,
         -7.4190e-01,  1.5320e-01, -1.6238e-01,  2.6717e-01,  1.3161e-01,
         -3.1689e-01, -5.0962e-01,  3.3962e-01,  5.5976e-01, -1.1462e+00,
         -6.7692e-01, -5.0810e-01, -1.0735e-01, -3.1613e-01, -3.0342e-01,
         -4.0708e-02, -9.1673e-04, -4.3252e-02, -4.6220e-01,  1.1244e-01,
         -1.6696e+00,  6.7701e-01]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
28000 特征值优化 tensor(0.6183, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.8617e-01,  1.6192e-01, -2.0570e+00,  1.1299e+00, -2.6134e-01,
         -1.6332e+00, -1.8724e+00, -1.3669e+00, -1.9564e-02,  1.5924e+00,
          7.1839e-01, -3.6677e+00,  1.1026e-01, -2.4116e-02,  3.5243e-02,
         -3.0771e-02,  1.3983e-01, -2.0321e-02, -9.5341e-02,  3.1598e-02,
          2.2927e-01, -3.0186e-02,  5.7438e-02,  1.7942e-02, -4.0518e-02,
         -2.3096e-01, -4.2360e-01,  6.5202e-01, -9.5672e-03,  1.2019e-01,
          1.3618e-01, -5.3598e-02, -9.0759e-02, -1.1464e-01, -4.0822e-02,
         -4.7854e-01,  7.2628e-01,  2.1796e-01, -3.3679e-01,  2.3306e-01,
          2.3566e-03, -1.3639e-01,  5.5093e-01,  1.2888e-01, -1.1294e-01,
         -4.3269e-01, -3.3307e-02,  1.1974e-01, -2.6494e-01,  3.6642e-01,
         -8.1397e-01,  1.5711e-01, -1.1183e-01,  2.4842e-01,  1.4828e-01,
         -3.2635e-01, -3.8319e-01,  2.5979e-01,  5.7759e-01, -1.0795e+00,
         -7.1768e-01, -4.5539e-01, -1.0976e-01, -3.1905e-01, -3.4963e-01,
         -5.3460e-02,  4.8464e-02, -7.0285e-03, -4.9325e-01,  1.1334e-01,
         -1.4981e+00,  5.7572e-01]], device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
29000 特征值优化 tensor(0.5916, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8989,  0.1796, -2.1691,  1.2103, -0.2685, -1.6469, -1.8177, -1.3856,
         -0.0347,  1.7543,  0.6937, -4.0071,  0.1112, -0.0044,  0.0261, -0.0394,
          0.1389, -0.0909, -0.0139,  0.0214,  0.2290, -0.0322,  0.0556,  0.0235,
         -0.0212, -0.1704, -0.4627,  0.7315,  0.0383,  0.1190,  0.1336, -0.0545,
         -0.1063, -0.1113, -0.0645, -0.4569,  0.7510,  0.2036, -0.3473,  0.2649,
         -0.0323, -0.2155,  0.5564,  0.1335, -0.1131, -0.4481, -0.0296,  0.1898,
         -0.2832,  0.3492, -0.8699,  0.1663, -0.0986,  0.2357,  0.1066, -0.3461,
         -0.3785,  0.2537,  0.6129, -1.0786, -0.6743, -0.5087, -0.0602, -0.3213,
         -0.3617, -0.0649,  0.0765,  0.0189, -0.5103,  0.1540, -1.4067,  0.4556]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
30000 特征值优化 tensor(0.5901, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.1162e-01,  1.8776e-01, -2.2636e+00,  1.2927e+00, -2.4925e-01,
         -1.6330e+00, -1.8246e+00, -1.4253e+00, -1.6256e-02,  1.8670e+00,
          7.4735e-01, -4.3102e+00,  1.1286e-01, -9.8000e-03,  2.4082e-02,
         -8.8667e-02,  7.7011e-02, -1.8768e-01,  3.4907e-02,  1.8372e-02,
          2.3054e-01, -3.7135e-02,  8.1707e-02,  2.7683e-02, -1.6271e-02,
         -1.6742e-01, -5.4685e-01,  7.4380e-01, -2.2101e-03,  1.2226e-01,
          1.3369e-01, -6.1184e-02, -1.0380e-01, -1.0934e-01, -7.1566e-02,
         -4.4059e-01,  7.1858e-01,  2.1044e-01, -3.5699e-01,  2.7987e-01,
         -1.4791e-02, -2.5376e-01,  5.6047e-01,  1.3018e-01, -1.1419e-01,
         -4.5496e-01, -3.0755e-02,  2.3988e-01, -3.0235e-01,  3.4497e-01,
         -8.7758e-01,  1.5860e-01, -1.0642e-01,  2.3782e-01,  3.7486e-02,
         -3.7046e-01, -3.5273e-01,  2.3538e-01,  6.2976e-01, -1.0733e+00,
         -6.3318e-01, -5.0863e-01, -6.6749e-02, -3.2418e-01, -4.0557e-01,
         -6.7225e-02,  1.1336e-01,  3.1443e-02, -5.5058e-01,  1.6454e-01,
         -1.3670e+00,  4.1280e-01]], device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
31000 特征值优化 tensor(0.6135, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.2038e-01,  2.0653e-01, -2.3376e+00,  1.3972e+00, -2.8498e-01,
         -1.6303e+00, -1.8570e+00, -1.3934e+00, -7.8436e-02,  1.9124e+00,
          7.5803e-01, -4.5809e+00,  1.1273e-01,  5.0650e-03,  4.0650e-04,
         -3.7838e-02,  1.2895e-01, -5.5691e-02, -1.0435e-01,  3.1282e-02,
          2.3022e-01, -3.9802e-02,  6.7961e-02,  1.7396e-02, -6.4803e-02,
         -2.1572e-01, -5.4435e-01,  7.4634e-01, -8.1683e-03,  1.2071e-01,
          1.3526e-01, -4.5884e-02, -9.2195e-02, -1.0715e-01, -5.4412e-02,
         -4.1977e-01,  7.2661e-01,  2.1078e-01, -3.7356e-01,  3.1454e-01,
         -6.0418e-04, -2.6485e-01,  5.6189e-01,  1.3837e-01, -1.2134e-01,
         -4.6834e-01, -3.2729e-02,  2.7335e-01, -3.2670e-01,  3.9561e-01,
         -9.2926e-01,  1.5973e-01, -9.3073e-02,  2.3892e-01,  1.3402e-01,
         -3.3709e-01, -2.9578e-01,  2.1312e-01,  6.1880e-01, -1.1033e+00,
         -7.4801e-01, -4.4994e-01, -7.0899e-02, -3.2871e-01, -4.0125e-01,
         -8.6376e-02,  1.2493e-01,  7.2091e-02, -4.8887e-01,  1.2670e-01,
         -1.4707e+00,  3.2060e-01]], device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
32000 特征值优化 tensor(0.5894, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.0592e-01,  1.5152e-01, -2.4102e+00,  1.4501e+00, -2.6348e-01,
         -1.6144e+00, -1.8712e+00, -1.3593e+00, -1.0185e-01,  1.9832e+00,
          7.4882e-01, -4.8461e+00,  1.1268e-01,  3.0915e-02, -4.3097e-02,
         -3.7149e-02,  1.2448e-01, -5.2737e-02, -5.4895e-02,  1.6716e-02,
          2.3172e-01, -4.4271e-02,  5.2681e-02,  8.0690e-03, -8.5667e-02,
         -2.2554e-01, -6.0942e-01,  8.0587e-01, -3.5552e-02,  1.2763e-01,
          1.3445e-01, -7.3192e-02, -7.2366e-02, -1.1247e-01, -5.1529e-02,
         -3.6635e-01,  7.2268e-01,  2.1247e-01, -3.8433e-01,  3.4204e-01,
         -3.7435e-03, -2.9436e-01,  5.5356e-01,  1.4137e-01, -1.2812e-01,
         -4.4851e-01, -2.9461e-02,  3.0092e-01, -3.4251e-01,  3.8063e-01,
         -9.4294e-01,  1.6676e-01, -7.8295e-02,  2.2488e-01,  1.2601e-01,
         -3.4469e-01, -2.4569e-01,  1.8814e-01,  6.1771e-01, -1.0989e+00,
         -7.2090e-01, -4.4836e-01, -1.0227e-01, -3.3687e-01, -4.0756e-01,
         -9.3317e-02,  1.2413e-01,  5.1754e-02, -4.7628e-01,  9.5666e-02,
         -1.4447e+00,  3.6297e-01]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
33000 特征值优化 tensor(0.5852, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.1159e-01,  1.5287e-01, -2.5271e+00,  1.5848e+00, -2.6058e-01,
         -1.6134e+00, -1.8383e+00, -1.3519e+00, -1.1584e-01,  2.0740e+00,
          7.6808e-01, -5.1762e+00,  1.1296e-01,  4.2467e-03, -3.0573e-02,
         -3.5871e-02,  1.1952e-01,  1.9476e-02, -1.2594e-01,  1.3254e-02,
          2.3097e-01, -4.2466e-02,  5.2696e-02,  8.8438e-03, -9.1210e-02,
         -2.4313e-01, -6.5995e-01,  8.5491e-01, -4.0784e-02,  1.2626e-01,
          1.3662e-01, -8.5962e-02, -7.5209e-02, -1.1357e-01, -5.3284e-02,
         -3.4840e-01,  7.1503e-01,  1.9825e-01, -3.8866e-01,  3.5550e-01,
         -1.1254e-02, -3.0580e-01,  5.5568e-01,  1.3742e-01, -1.2421e-01,
         -4.5021e-01, -2.9553e-02,  3.6676e-01, -3.4777e-01,  3.8384e-01,
         -9.9998e-01,  1.5782e-01, -7.1508e-02,  2.1883e-01,  1.3113e-01,
         -3.2970e-01, -2.1969e-01,  1.7733e-01,  6.2605e-01, -1.1225e+00,
         -7.4435e-01, -4.2932e-01, -6.1905e-02, -3.3870e-01, -4.2282e-01,
         -8.9263e-02,  1.7024e-01,  5.0891e-02, -4.5829e-01,  9.6402e-02,
         -1.5492e+00,  3.3348e-01]], device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
34000 特征值优化 tensor(0.5851, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.1195e-01,  1.7671e-01, -2.6283e+00,  1.6802e+00, -2.4646e-01,
         -1.6351e+00, -1.7558e+00, -1.3466e+00, -1.2097e-01,  2.1706e+00,
          7.1725e-01, -5.3689e+00,  1.1279e-01, -1.7660e-02,  1.6590e-02,
         -5.5779e-02,  6.9892e-02, -1.9250e-01, -1.4962e-02,  1.3543e-02,
          2.3081e-01, -4.3323e-02,  3.1426e-02,  1.7350e-02, -7.0680e-02,
         -2.0132e-01, -6.9086e-01,  9.1746e-01, -1.8391e-03,  1.2506e-01,
          1.3415e-01, -5.4819e-02, -1.0110e-01, -1.0851e-01, -5.0259e-02,
         -3.6695e-01,  7.3749e-01,  1.9443e-01, -3.9183e-01,  3.5795e-01,
         -4.2131e-02, -3.6254e-01,  5.5601e-01,  1.3621e-01, -1.2264e-01,
         -4.6491e-01, -2.6736e-02,  4.1375e-01, -3.4098e-01,  3.8517e-01,
         -1.0697e+00,  1.6959e-01, -9.1700e-02,  2.2756e-01,  9.8833e-02,
         -3.4884e-01, -2.1705e-01,  1.7162e-01,  6.4159e-01, -1.1411e+00,
         -6.5643e-01, -4.9173e-01, -6.2612e-02, -3.0703e-01, -4.4126e-01,
         -9.4989e-02,  2.0996e-01,  8.5662e-02, -5.2700e-01,  1.5683e-01,
         -1.6198e+00,  3.2542e-01]], device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
35000 特征值优化 tensor(0.5834, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.9998e-01,  1.5774e-01, -2.7453e+00,  1.8043e+00, -2.6742e-01,
         -1.6394e+00, -1.7377e+00, -1.2827e+00, -1.4183e-01,  2.2011e+00,
          8.1600e-01, -5.5660e+00,  1.1312e-01,  1.9071e-02,  6.4209e-03,
         -2.7614e-03,  1.0454e-01, -7.8907e-02, -1.4466e-01,  2.1645e-02,
          2.3063e-01, -4.2761e-02,  3.8853e-02,  2.7728e-02, -1.0335e-01,
         -2.6079e-01, -7.3366e-01,  9.1036e-01, -3.9682e-02,  1.2637e-01,
          1.3747e-01, -8.6020e-02, -7.4593e-02, -1.0984e-01, -4.5900e-02,
         -3.5736e-01,  6.8547e-01,  1.8462e-01, -3.9898e-01,  3.8664e-01,
         -1.6480e-02, -3.8084e-01,  5.4993e-01,  1.3228e-01, -1.2028e-01,
         -4.4507e-01, -3.3472e-02,  4.7636e-01, -3.4856e-01,  3.8519e-01,
         -1.1096e+00,  1.5706e-01, -5.8482e-02,  2.1791e-01,  1.3372e-01,
         -3.3683e-01, -1.9281e-01,  1.6197e-01,  6.3577e-01, -1.1810e+00,
         -7.6346e-01, -3.9525e-01, -5.5924e-02, -3.3130e-01, -4.4216e-01,
         -9.6768e-02,  2.2630e-01,  7.4711e-02, -4.5665e-01,  1.0487e-01,
         -1.7914e+00,  3.5090e-01]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
36000 特征值优化 tensor(6.4293, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9324,  0.3360, -1.3774, -0.3339, -1.0207, -0.8967, -0.3047, -0.3571,
         -0.0802, -0.6733, -0.7535, -0.6158, -0.1373,  0.0136,  0.1673,  1.8613,
          0.4220, -0.4116, -0.0654,  0.0680, -0.2473,  0.6508,  0.0866, -0.1596,
         -0.2533, -0.0662, -0.0344, -0.3257,  0.2586, -0.7711, -0.0305, -0.4005,
          0.4082,  0.0515,  0.0176,  0.3455, -0.0116,  0.1356, -1.0126, -0.3168,
          0.8306, -0.1932, -0.3715,  0.4350,  0.5112, -0.5471, -0.8912, -0.0144,
         -2.2418,  1.2996,  0.7143,  0.4515,  1.0868,  0.7013, -0.2794,  0.0973,
          1.0857, -1.6259, -0.0352,  0.0636, -2.2691,  1.2773, -0.3789,  0.1131,
         -0.7704, -0.3641, -0.2479, -0.1908, -0.8276, -1.3057,  0.4991,  0.0278]],
       device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
37000 特征值优化 tensor(1.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.1122,  0.7649, -1.8008,  0.1776, -1.0707, -1.6884, -1.0996, -0.5551,
         -0.7225, -0.5676, -1.3827, -0.7414, -0.0305,  0.1037,  0.0921,  0.8700,
          0.3368, -0.1420,  0.1429,  0.0418,  0.0159,  0.4797,  0.1369, -0.1525,
         -0.1104, -0.1233,  0.1135, -0.1381,  0.0824, -0.4972, -0.0237, -0.0888,
          0.0835, -0.0699, -0.0181,  0.0106,  0.0998,  0.1368, -0.4451, -0.1089,
          0.4638, -0.0710,  0.5223,  0.2988,  0.2790, -0.4979, -0.4150, -0.2063,
         -1.4325,  0.9174,  0.6229,  0.2640,  0.8068,  0.3751, -0.1786,  0.2273,
          0.1868, -0.6935, -0.4904,  0.0411, -1.3441,  0.8761, -0.0960, -0.0735,
         -0.4093,  0.0720, -0.0593, -0.1328, -0.5039, -0.5604,  0.2663, -0.1025]],
       device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
38000 特征值优化 tensor(0.8071, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.8270,  0.6598, -1.8495,  0.1388, -0.4627, -1.5434, -1.0142, -0.8152,
         -0.6917, -0.4591, -1.4613, -0.7294, -0.0230,  0.0111,  0.0461,  0.6967,
          0.3167, -0.2084,  0.2573,  0.0247,  0.0217,  0.4604,  0.1086, -0.2825,
         -0.2630,  0.1683, -0.0218,  0.0290,  0.1167, -0.4651, -0.0234,  0.1300,
          0.0485, -0.1340, -0.1088,  0.0666,  0.0698,  0.1184, -0.2760,  0.0209,
          0.5104, -0.0489,  0.6035,  0.2940, -0.0239, -0.7491, -0.2561, -0.1427,
         -0.9259,  0.5235,  0.4956,  0.3128,  0.6502,  0.2784, -0.1225,  0.1513,
         -0.2337, -0.6117, -0.5668,  0.1766, -0.6522,  0.4879,  0.0562, -0.1927,
         -0.1656,  0.1137, -0.0595, -0.0518, -0.7706, -0.3836,  0.1964, -0.0698]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
39000 特征值优化 tensor(0.7080, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6181e+00,  3.8964e-01, -1.7943e+00,  8.0609e-02, -4.6155e-01,
         -1.6220e+00, -9.4738e-01, -1.2080e+00, -6.7755e-01, -2.1873e-01,
         -1.4076e+00, -7.4318e-01, -1.4766e-02,  6.7624e-03,  7.9922e-02,
          5.6247e-01,  3.0136e-01, -2.0839e-01,  5.3440e-01,  4.0061e-02,
          2.8084e-02,  4.5214e-01,  2.2773e-02, -2.7935e-01, -2.0402e-01,
          2.2113e-03,  7.7075e-02,  1.1356e-01,  1.1036e-01, -4.6029e-01,
         -2.1769e-02,  1.5924e-01,  7.3618e-02, -1.4719e-01, -1.5240e-01,
          6.0426e-02,  3.0346e-02,  7.3282e-02, -2.5435e-01,  8.5569e-02,
          4.2255e-01, -5.6545e-02,  4.7057e-01,  1.6324e-01,  9.5609e-02,
         -7.0341e-01, -2.2190e-01, -1.5677e-01, -8.5894e-01,  4.7546e-01,
          4.6230e-01,  3.1895e-01,  4.4497e-01,  3.7186e-01,  4.3886e-02,
          3.8715e-01, -4.4219e-01, -5.3188e-01, -5.7174e-01,  1.6973e-01,
         -2.4116e-01,  2.2714e-01,  2.7329e-01, -1.4751e-01,  1.5052e-01,
         -4.4391e-02, -1.3469e-01,  1.1241e-02, -5.5031e-01, -2.7305e-01,
          1.3107e-01,  7.2337e-04]], device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
40000 特征值优化 tensor(0.6119, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3702e+00,  1.1178e-01, -1.7667e+00,  6.5814e-02, -5.0040e-01,
         -1.7716e+00, -7.4227e-01, -1.1309e+00, -7.3700e-01, -1.2506e-01,
         -1.2786e+00, -7.4801e-01, -1.6126e-02, -2.4246e-02,  1.5091e-01,
          4.5421e-01,  2.4302e-01, -1.7461e-01,  5.4017e-01,  6.5823e-02,
          2.4976e-02,  4.4485e-01,  2.1765e-02, -2.8391e-01, -2.9397e-01,
         -8.1561e-02,  1.0471e-01,  6.5207e-02,  1.1095e-01, -4.4902e-01,
         -2.1571e-02,  1.1949e-01,  3.8725e-02, -2.1857e-01, -1.4432e-01,
          1.2128e-03, -1.7158e-02,  4.4776e-02, -2.7194e-01,  9.1871e-02,
          3.9336e-01, -5.5804e-02,  4.2952e-01,  2.9510e-02,  1.3828e-01,
         -6.7866e-01, -1.6204e-01, -1.5315e-01, -6.6542e-01,  3.2006e-01,
          4.4719e-01,  3.1963e-01,  5.3018e-01,  3.2865e-01,  9.1246e-02,
          3.3286e-01, -7.9902e-01, -4.2569e-01, -4.6028e-01,  1.2995e-01,
         -2.4181e-01,  1.3106e-01,  3.0060e-01, -5.0109e-02,  2.6074e-01,
         -1.2085e-01, -1.3716e-01,  4.1393e-03, -4.4470e-01, -1.5998e-01,
          8.1886e-02,  2.1530e-02]], device='cuda:0') tensor(0.2072, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
41000 特征值优化 tensor(0.6014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2041, -0.1065, -1.6854, -0.0123, -0.5066, -1.8575, -0.5535, -1.0118,
         -0.7244, -0.1898, -1.0999, -0.7370, -0.0155, -0.0169,  0.1307,  0.3166,
          0.1862, -0.2051,  0.5422,  0.0851,  0.0232,  0.4228, -0.0096, -0.2517,
         -0.2728, -0.0520,  0.0441,  0.1164,  0.1085, -0.4297, -0.0210,  0.1199,
          0.0295, -0.2414, -0.1336,  0.0040, -0.0125, -0.0095, -0.2586,  0.1005,
          0.2952, -0.0564,  0.3332, -0.1741,  0.3559, -0.5195, -0.1892, -0.1484,
         -0.5668,  0.2648,  0.4363,  0.3057,  0.5261,  0.3325,  0.1048,  0.4138,
         -0.7996, -0.4518, -0.4747,  0.1195, -0.2706,  0.1530,  0.2907, -0.0142,
          0.2423, -0.1391, -0.1148,  0.0241, -0.4300, -0.0803,  0.0736,  0.0416]],
       device='cuda:0') tensor(0.2028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
42000 特征值优化 tensor(0.5928, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1030e+00, -2.2369e-01, -1.5767e+00, -1.2932e-01, -5.1922e-01,
         -1.9038e+00, -4.0970e-01, -9.6912e-01, -7.7347e-01, -2.3223e-01,
         -9.6456e-01, -7.0677e-01, -1.4884e-02, -1.0647e-02,  1.0291e-01,
          2.5971e-01,  1.6648e-01, -1.8780e-01,  5.3296e-01,  7.8612e-02,
          2.3720e-02,  3.9480e-01, -2.8236e-02, -2.4242e-01, -2.3313e-01,
         -1.7319e-02,  2.0435e-02,  1.5490e-01,  1.0858e-01, -4.0156e-01,
         -2.0606e-02,  1.2766e-01,  1.4328e-02, -2.5581e-01, -1.4419e-01,
          7.5462e-04, -5.2098e-03, -2.8640e-02, -2.7118e-01,  7.9317e-02,
          2.2587e-01, -6.0534e-02,  2.8508e-01, -1.7311e-01,  3.4601e-01,
         -4.6893e-01, -1.8637e-01, -1.4678e-01, -5.1839e-01,  2.7127e-01,
          4.3408e-01,  2.7940e-01,  5.2259e-01,  3.3470e-01,  9.1076e-02,
          4.4717e-01, -8.1215e-01, -4.5965e-01, -5.3655e-01, -2.4882e-02,
         -3.2802e-01,  1.5185e-01,  2.8478e-01,  8.6946e-03,  2.3336e-01,
         -1.4405e-01, -1.2508e-01, -1.7021e-02, -4.1768e-01,  5.9525e-04,
          7.3244e-02,  4.5389e-02]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
43000 特征值优化 tensor(0.5849, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0429e+00, -2.9105e-01, -1.4563e+00, -2.3577e-01, -5.2264e-01,
         -2.0615e+00, -4.1513e-01, -9.2231e-01, -7.3659e-01, -2.0203e-01,
         -9.4846e-01, -7.9105e-01, -1.7717e-02, -6.2254e-03,  5.5969e-02,
          2.4667e-01,  1.6185e-01, -1.7895e-01,  5.2805e-01,  8.6970e-02,
          2.0946e-02,  3.6516e-01, -1.6200e-02, -2.3861e-01, -2.9169e-01,
         -9.2172e-02,  6.6729e-02,  1.0051e-01,  1.0401e-01, -3.7596e-01,
         -2.0385e-02,  1.3142e-01,  1.8353e-03, -3.0019e-01, -1.4358e-01,
         -7.8769e-03, -6.5782e-03, -3.8120e-02, -2.6837e-01,  7.6964e-02,
          2.2511e-01, -5.7314e-02,  2.4129e-01, -1.9641e-01,  3.6724e-01,
         -4.2552e-01, -1.9687e-01, -1.4279e-01, -4.6419e-01,  2.7029e-01,
          4.2239e-01,  2.6010e-01,  5.2109e-01,  3.3486e-01,  9.7106e-02,
          4.4444e-01, -8.3139e-01, -5.0426e-01, -5.1472e-01,  1.1552e-01,
         -3.2151e-01,  1.4663e-01,  2.7389e-01,  2.5838e-02,  2.2403e-01,
         -1.2659e-01, -1.4833e-01, -9.2837e-03, -4.4305e-01,  2.2760e-02,
          1.3101e-01,  3.0529e-02]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
44000 特征值优化 tensor(0.5846, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0435, -0.2895, -1.4032, -0.2902, -0.5250, -2.1358, -0.4136, -0.9188,
         -0.7414, -0.2128, -0.9465, -0.7809, -0.0178, -0.0052,  0.0562,  0.2468,
          0.1606, -0.1766,  0.5273,  0.0862,  0.0207,  0.3516, -0.0170, -0.2400,
         -0.2900, -0.0922,  0.0680,  0.0963,  0.1028, -0.3623, -0.0203,  0.1301,
          0.0027, -0.3184, -0.1435, -0.0068, -0.0070, -0.0384, -0.2661,  0.0776,
          0.2257, -0.0581,  0.2413, -0.1962,  0.3672, -0.4263, -0.1967, -0.1424,
         -0.4427,  0.2756,  0.4190,  0.2480,  0.5234,  0.3337,  0.0986,  0.4443,
         -0.8308, -0.5234, -0.5195,  0.1135, -0.3246,  0.1477,  0.2707,  0.0276,
          0.2292, -0.1279, -0.1418, -0.0126, -0.4442,  0.0226,  0.1234,  0.0338]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
45000 特征值优化 tensor(0.5840, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0434, -0.2879, -1.3658, -0.3312, -0.5256, -2.2073, -0.4143, -0.9174,
         -0.7408, -0.2151, -0.9469, -0.7784, -0.0180, -0.0049,  0.0569,  0.2471,
          0.1603, -0.1760,  0.5278,  0.0860,  0.0208,  0.3420, -0.0318, -0.2353,
         -0.2869, -0.0874,  0.0658,  0.0962,  0.1035, -0.3522, -0.0202,  0.1298,
          0.0028, -0.3339, -0.1448, -0.0067, -0.0071, -0.0384, -0.2628,  0.0763,
          0.2255, -0.0593,  0.2416, -0.1964,  0.3674, -0.4268, -0.1961, -0.1422,
         -0.4283,  0.2803,  0.4207,  0.2372,  0.5244,  0.3330,  0.0999,  0.4433,
         -0.8259, -0.5387, -0.5248,  0.1091, -0.3254,  0.1482,  0.2691,  0.0280,
          0.2282, -0.1297, -0.1408, -0.0168, -0.4451,  0.0222,  0.1245,  0.0367]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
46000 特征值优化 tensor(4.4006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5893, -0.5456, -1.1934, -0.8065, -0.6300, -0.1484, -1.3345, -0.2084,
          0.3945, -0.2632,  0.2614, -1.4170, -0.5664,  0.2874,  0.0419,  0.0275,
          0.0139, -0.0665,  0.3218,  0.7390, -0.5394, -0.0575,  0.0205, -0.0427,
         -0.2867,  0.7646,  0.2926,  0.0461, -0.3772, -0.0341,  0.6343,  0.0090,
          0.8146, -0.2920,  0.0923, -0.2725,  0.1057,  0.0047,  0.3137,  0.1887,
         -0.0380,  0.3110, -1.2153,  0.3233,  0.1550, -0.5242, -0.2702,  0.7161,
          0.6782, -0.0860,  1.0962,  0.0827,  0.4369, -0.1752,  0.1893,  0.2475,
         -0.9513, -0.4192,  0.4465, -0.5933, -0.0066, -0.1004,  0.0780,  0.0362,
         -1.4192,  0.3431, -1.1549, -0.4782,  0.2260,  0.8646,  0.0563, -0.2759]],
       device='cuda:0') tensor(0.2306, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
47000 特征值优化 tensor(0.8236, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.7340e-01, -5.4561e-01, -1.3440e+00, -5.4471e-01, -1.0692e+00,
         -5.6232e-01, -1.5607e+00, -2.1101e-01, -6.0361e-02, -3.9715e-02,
         -1.5649e-01, -1.8824e+00, -3.8086e-01,  4.3764e-02,  1.5168e-01,
          1.0629e-01,  8.9743e-02, -1.8157e-01,  1.0435e-01,  4.7140e-01,
         -3.6587e-01, -6.3884e-02,  2.6523e-01, -1.0808e-01, -9.8679e-02,
          2.7398e-01,  3.4155e-01,  9.7182e-02, -3.4108e-02, -4.2526e-02,
          3.2249e-01, -2.2255e-02,  3.1119e-01, -4.2346e-02, -1.3831e-02,
         -6.0350e-02,  1.6039e-01,  5.0598e-02,  1.8188e-01,  1.5353e-03,
         -5.1613e-02,  8.6949e-02, -1.1456e+00,  4.5457e-01,  5.0681e-02,
         -5.6332e-01, -1.9852e-02,  5.7277e-01,  3.0445e-01, -5.7338e-02,
          7.0716e-01,  3.2704e-02,  5.3323e-02,  1.3470e-01,  2.7717e-01,
          2.3939e-01, -6.2818e-01, -1.5795e-01,  3.9866e-01, -5.1440e-01,
          1.1636e-01, -1.0279e-01,  1.8704e-01,  1.0947e-01, -6.4480e-01,
          1.1176e-01, -6.2215e-01, -1.3371e-01, -1.5972e-02,  4.9384e-01,
          2.8599e-01, -1.3640e-01]], device='cuda:0') tensor(0.2097, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
48000 特征值优化 tensor(0.7316, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7226, -0.3706, -1.2632, -0.4305, -1.0675, -0.5578, -1.8407, -0.4250,
         -0.1058, -0.0780, -0.1719, -2.0115, -0.3659,  0.0176,  0.0847,  0.1995,
          0.1044, -0.1748,  0.0997,  0.3828, -0.3488, -0.0569,  0.3286,  0.0355,
         -0.0649,  0.1269,  0.4088,  0.0910, -0.0547, -0.0342,  0.3414, -0.0617,
          0.1998, -0.0528, -0.0294, -0.0516,  0.2160,  0.1514,  0.2108,  0.0043,
         -0.0796,  0.0521, -0.9617,  0.3748, -0.0487, -0.4930, -0.0655,  0.5093,
          0.3107, -0.0577,  0.6012,  0.0544,  0.0285,  0.1095,  0.2113,  0.3122,
         -0.6381, -0.1493,  0.3544, -0.5394,  0.1463,  0.0070, -0.1082,  0.1890,
         -0.5039,  0.0688, -0.5735, -0.1237,  0.1964,  0.2583,  0.2920, -0.1028]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
49000 特征值优化 tensor(0.7011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7700, -0.4199, -1.1996, -0.3871, -1.0599, -0.5411, -1.8884, -0.5178,
         -0.0975, -0.0090, -0.2700, -2.0508, -0.3756,  0.0802,  0.1609,  0.2923,
          0.0952, -0.1701,  0.1053,  0.3635, -0.3602, -0.0571,  0.3489, -0.0095,
         -0.0943,  0.0725,  0.4210,  0.0579, -0.0644, -0.0355,  0.3428, -0.1091,
          0.1311, -0.0472, -0.0285, -0.0465,  0.1842,  0.2051,  0.2641,  0.0027,
         -0.0597, -0.0117, -0.8994,  0.3344, -0.0916, -0.4003, -0.1220,  0.4770,
          0.3163, -0.0592,  0.5647,  0.0649, -0.0527,  0.1506,  0.2040,  0.3247,
         -0.6418, -0.1429,  0.3312, -0.5863,  0.1645,  0.1312, -0.2001,  0.1598,
         -0.4958,  0.0092, -0.5606, -0.0895,  0.2799,  0.1305,  0.3215, -0.0416]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
50000 特征值优化 tensor(0.6657, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8064, -0.2837, -1.1362, -0.4064, -1.0656, -0.4873, -2.0341, -0.5640,
         -0.2176, -0.1272, -0.3532, -2.2909, -0.3742,  0.0622,  0.1510,  0.2916,
          0.0857, -0.2523,  0.1126,  0.2539, -0.3487, -0.0467,  0.3081,  0.0418,
         -0.1350,  0.0786,  0.4186,  0.0183, -0.0702, -0.0482,  0.3439, -0.1525,
          0.1178, -0.0224, -0.0424, -0.0284,  0.2250,  0.2059,  0.3195,  0.0636,
         -0.0517,  0.0150, -0.6539,  0.2307, -0.2364, -0.2408, -0.2039,  0.4696,
          0.3601, -0.0708,  0.5441,  0.0623, -0.1585,  0.1988,  0.2624,  0.3455,
         -0.6658, -0.1215,  0.2872, -0.5919,  0.1521,  0.0768, -0.1936,  0.1679,
         -0.4449, -0.0245, -0.5562, -0.1271,  0.3287,  0.1131,  0.3066, -0.0975]],
       device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
51000 特征值优化 tensor(0.6620, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.2905e-01, -3.3258e-01, -1.0459e+00, -3.1769e-01, -1.0592e+00,
         -4.5677e-01, -2.0639e+00, -5.8469e-01, -1.7424e-01, -1.8553e-01,
         -3.5967e-01, -2.5215e+00, -3.8467e-01,  9.9490e-02,  1.2499e-01,
          2.7389e-01,  5.8639e-02, -2.3618e-01,  1.1782e-01,  2.3584e-01,
         -3.6042e-01, -4.7499e-02,  2.6299e-01, -2.2215e-03, -1.0914e-01,
          1.3259e-01,  3.7257e-01,  4.4938e-02, -7.5298e-02, -4.8188e-02,
          3.4229e-01, -1.5944e-01,  1.2057e-01, -2.3205e-02, -3.7593e-02,
         -2.8000e-02,  2.1938e-01,  2.0395e-01,  3.3355e-01,  1.0479e-01,
         -4.5053e-02,  2.8962e-02, -6.3638e-01,  1.9414e-01, -2.6711e-01,
         -2.4742e-01, -2.0178e-01,  4.2148e-01,  3.6489e-01, -7.8738e-02,
          4.9031e-01,  7.0656e-02, -2.9116e-01,  2.6704e-01,  2.7415e-01,
          3.4453e-01, -6.8398e-01, -1.2774e-01,  3.2656e-01, -5.8834e-01,
          2.3294e-01,  1.1894e-02, -1.3911e-01,  1.5028e-01, -3.9473e-01,
         -4.1884e-02, -4.9001e-01, -1.2559e-01,  3.8837e-01,  1.2009e-01,
          2.8503e-01, -1.0558e-01]], device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
52000 特征值优化 tensor(0.6635, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.8568e-01, -2.7786e-01, -8.7390e-01, -1.2477e-01, -1.0303e+00,
         -4.6152e-01, -2.0825e+00, -6.8754e-01, -1.6575e-01, -2.4638e-01,
         -2.9682e-01, -2.6758e+00, -3.9302e-01,  1.2982e-01,  1.3176e-01,
          2.1678e-01,  5.0820e-02, -2.2924e-01,  1.4026e-01,  2.0808e-01,
         -3.6127e-01, -4.6426e-02,  2.4161e-01,  3.0775e-02,  6.0758e-03,
          6.6353e-02,  3.1812e-01,  5.1236e-02, -6.9210e-02, -4.9332e-02,
          3.3968e-01, -1.6249e-01,  1.3602e-01, -2.6555e-02, -4.4808e-02,
          1.5174e-03,  2.3156e-01,  2.1452e-01,  3.4068e-01,  1.3472e-01,
         -3.5535e-02,  5.2854e-02, -5.5852e-01,  1.1515e-01, -2.5662e-01,
         -2.7094e-01, -2.1426e-01,  3.3968e-01,  3.5563e-01, -6.6394e-02,
          4.0391e-01,  6.2374e-02, -3.9243e-01,  3.2031e-01,  2.6452e-01,
          3.4403e-01, -7.1292e-01, -1.0985e-01,  3.6481e-01, -5.7970e-01,
          2.1441e-01, -6.6236e-04, -4.6302e-02,  9.2126e-02, -3.3963e-01,
         -8.1910e-02, -4.0061e-01, -1.7295e-01,  3.9821e-01,  8.9704e-02,
          2.2567e-01, -1.0030e-01]], device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
53000 特征值优化 tensor(0.6536, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8227, -0.2482, -0.8715, -0.0945, -1.0434, -0.4581, -2.1532, -0.8184,
         -0.1620, -0.2677, -0.1827, -2.9670, -0.3735,  0.1203,  0.1358,  0.1793,
         -0.0089, -0.2490,  0.1002,  0.1931, -0.3505, -0.0488,  0.2363,  0.0332,
         -0.0233,  0.0570,  0.3120,  0.0623, -0.0785, -0.0521,  0.3390, -0.1978,
          0.1122, -0.0268, -0.0428,  0.0138,  0.1824,  0.2132,  0.3604,  0.1725,
          0.0079,  0.0634, -0.5226,  0.0896, -0.2385, -0.2837, -0.1841,  0.3259,
          0.3671, -0.0844,  0.3567,  0.0750, -0.4591,  0.3569,  0.2918,  0.2693,
         -0.7314, -0.1025,  0.3858, -0.5611,  0.1314,  0.0189, -0.0112,  0.0536,
         -0.3436, -0.0971, -0.3778, -0.1645,  0.4446,  0.0973,  0.3496, -0.1329]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
54000 特征值优化 tensor(0.6376, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.3805e-01, -9.3928e-02, -8.7480e-01, -8.1655e-02, -1.0209e+00,
         -4.9563e-01, -2.1843e+00, -8.4653e-01, -1.6314e-01, -3.7670e-01,
         -1.6428e-01, -3.2750e+00, -3.4517e-01,  1.1295e-01,  1.3563e-01,
          1.7190e-01,  6.0823e-03, -2.5347e-01,  1.1087e-01,  1.7257e-01,
         -3.2162e-01, -4.8617e-02,  2.2616e-01,  7.0507e-02, -3.6092e-03,
          7.3545e-02,  3.2303e-01,  5.7189e-02, -7.6976e-02, -5.2505e-02,
          3.4478e-01, -1.9282e-01,  1.1911e-01, -3.3339e-02,  2.7727e-03,
          1.8640e-02,  1.8062e-01,  2.2103e-01,  3.9197e-01,  2.5452e-01,
          1.3767e-02,  1.1789e-01, -4.7428e-01,  6.1776e-02, -1.9858e-01,
         -2.7699e-01, -1.6571e-01,  3.2618e-01,  3.6449e-01, -8.0272e-02,
          3.5357e-01,  7.0721e-02, -5.2009e-01,  3.9432e-01,  3.0426e-01,
          2.5994e-01, -7.3088e-01, -9.8482e-02,  4.2744e-01, -5.2921e-01,
          1.4580e-01,  3.3619e-02,  1.7125e-02,  4.4312e-02, -3.7622e-01,
         -1.3360e-01, -3.3568e-01, -1.6841e-01,  4.4769e-01,  6.9795e-02,
          3.9481e-01, -1.9056e-01]], device='cuda:0') tensor(0.2062, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
55000 特征值优化 tensor(0.6397, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6208,  0.0424, -0.8681, -0.0921, -1.0118, -0.4991, -2.2279, -0.8615,
         -0.3104, -0.4222, -0.2148, -3.4714, -0.3137,  0.0749,  0.1297,  0.1521,
          0.0437, -0.2749,  0.1131,  0.1695, -0.2912, -0.0491,  0.2266,  0.0412,
         -0.0106, -0.0144,  0.3335,  0.0803, -0.0784, -0.0526,  0.3419, -0.1891,
          0.0853, -0.0272,  0.0433,  0.0177,  0.1985,  0.2159,  0.4068,  0.2813,
          0.0146,  0.1647, -0.4717,  0.0969, -0.1789, -0.2783, -0.1336,  0.3219,
          0.3646, -0.0827,  0.3523,  0.0748, -0.5191,  0.3951,  0.3023,  0.2832,
         -0.6941, -0.1250,  0.4010, -0.5594,  0.1722, -0.0282,  0.0067,  0.0384,
         -0.3528, -0.1331, -0.3749, -0.2054,  0.4633,  0.0860,  0.3824, -0.2296]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
56000 特征值优化 tensor(0.6318, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6084,  0.0545, -0.8859, -0.1119, -1.0281, -0.5229, -2.2003, -0.8505,
         -0.5097, -0.3870, -0.2476, -3.5191, -0.3131,  0.0803,  0.1295,  0.1532,
          0.0524, -0.2782,  0.1169,  0.1673, -0.2925, -0.0483,  0.2177,  0.0907,
          0.0682, -0.1537,  0.4124,  0.1521, -0.0785, -0.0523,  0.3403, -0.1888,
          0.0910, -0.0322, -0.0129,  0.0153,  0.2025,  0.2061,  0.4231,  0.2886,
          0.0075,  0.1931, -0.4794,  0.0955, -0.1856, -0.2834, -0.1332,  0.3315,
          0.3651, -0.0817,  0.3642,  0.0736, -0.5371,  0.4014,  0.3065,  0.2921,
         -0.7236, -0.1048,  0.3686, -0.6000,  0.1663, -0.0429, -0.0053,  0.0600,
         -0.2644, -0.1717, -0.4507, -0.2610,  0.4879,  0.0967,  0.3522, -0.2624]],
       device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
57000 特征值优化 tensor(0.6323, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6120,  0.0530, -0.8802, -0.1087, -1.0232, -0.5241, -2.1667, -0.8476,
         -0.5347, -0.3917, -0.2383, -3.5400, -0.3147,  0.0881,  0.1358,  0.1576,
          0.0448, -0.2748,  0.1183,  0.1670, -0.2924, -0.0480,  0.2164,  0.1218,
          0.0968, -0.1560,  0.3916,  0.1830, -0.0788, -0.0523,  0.3408, -0.1854,
          0.0942, -0.0348, -0.0279,  0.0095,  0.1975,  0.2093,  0.4238,  0.2912,
          0.0092,  0.1991, -0.4771,  0.0951, -0.1854, -0.2834, -0.1345,  0.3285,
          0.3661, -0.0811,  0.3603,  0.0746, -0.5304,  0.3993,  0.3043,  0.2851,
         -0.7256, -0.1125,  0.3658, -0.6048,  0.1562, -0.0299,  0.0077,  0.0507,
         -0.2517, -0.1752, -0.4551, -0.2654,  0.4882,  0.0931,  0.3488, -0.2690]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
58000 特征值优化 tensor(0.6302, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5995,  0.0476, -0.8694, -0.0950, -1.0245, -0.5229, -2.1931, -0.8461,
         -0.5515, -0.3977, -0.2464, -3.5822, -0.3148,  0.0988,  0.1268,  0.1641,
          0.0422, -0.2734,  0.1210,  0.1611, -0.2927, -0.0478,  0.2285,  0.0981,
          0.0916, -0.1532,  0.3901,  0.1600, -0.0783, -0.0520,  0.3398, -0.1808,
          0.0947, -0.0346, -0.0223,  0.0145,  0.1988,  0.2040,  0.4256,  0.2995,
          0.0074,  0.2048, -0.4820,  0.0902, -0.1868, -0.2886, -0.1317,  0.3211,
          0.3633, -0.0783,  0.3551,  0.0738, -0.5535,  0.4122,  0.3051,  0.2871,
         -0.7341, -0.1117,  0.3691, -0.5989,  0.1805, -0.0489, -0.0122,  0.0626,
         -0.2271, -0.1899, -0.4508, -0.2685,  0.4858,  0.1046,  0.3585, -0.2745]],
       device='cuda:0') tensor(0.2082, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
59000 特征值优化 tensor(0.6267, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5990,  0.0405, -0.8815, -0.0995, -1.0165, -0.5401, -2.1998, -0.8518,
         -0.5553, -0.4248, -0.2506, -3.5986, -0.3158,  0.0874,  0.1349,  0.1591,
          0.0289, -0.2769,  0.1187,  0.1641, -0.2939, -0.0483,  0.2146,  0.1201,
          0.0821, -0.1511,  0.4128,  0.1498, -0.0785, -0.0522,  0.3419, -0.1747,
          0.0998, -0.0397, -0.0331,  0.0119,  0.2010,  0.1857,  0.4326,  0.3060,
          0.0039,  0.2137, -0.4826,  0.0896, -0.1890, -0.2806, -0.1352,  0.3284,
          0.3649, -0.0805,  0.3571,  0.0746, -0.5719,  0.4230,  0.3018,  0.2992,
         -0.7320, -0.1172,  0.3578, -0.6141,  0.2013, -0.0945, -0.0227,  0.0835,
         -0.2612, -0.1779, -0.4580, -0.2707,  0.4935,  0.1337,  0.3529, -0.2856]],
       device='cuda:0') tensor(0.2085, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
60000 特征值优化 tensor(0.6319, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6066,  0.0462, -0.8856, -0.0976, -1.0097, -0.5346, -2.2146, -0.8563,
         -0.5343, -0.4275, -0.2306, -3.6112, -0.3155,  0.1120,  0.1416,  0.1358,
          0.0235, -0.2592,  0.1016,  0.1638, -0.2936, -0.0480,  0.2356,  0.0561,
          0.1030, -0.1484,  0.4068,  0.1729, -0.0795, -0.0522,  0.3470, -0.1628,
          0.1361, -0.0327, -0.0137,  0.0138,  0.2028,  0.1863,  0.4280,  0.2942,
          0.0079,  0.2078, -0.4802,  0.0889, -0.1899, -0.2824, -0.1327,  0.3298,
          0.3657, -0.0806,  0.3515,  0.0768, -0.5744,  0.4294,  0.2977,  0.2750,
         -0.7254, -0.1049,  0.3601, -0.6100,  0.2088, -0.0976, -0.0188,  0.0701,
         -0.2511, -0.1869, -0.4559, -0.2800,  0.4629,  0.1466,  0.3646, -0.2750]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
61000 特征值优化 tensor(0.6269, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6171,  0.0460, -0.8700, -0.1093, -1.0013, -0.5174, -2.2060, -0.8806,
         -0.5271, -0.4250, -0.2084, -3.6347, -0.3180,  0.1234,  0.1395,  0.1389,
          0.0449, -0.2523,  0.1089,  0.1606, -0.2955, -0.0478,  0.2580,  0.0314,
          0.1414, -0.1384,  0.3687,  0.2007, -0.0797, -0.0520,  0.3458, -0.1611,
          0.1221, -0.0312, -0.0056,  0.0197,  0.1904,  0.2153,  0.4258,  0.2888,
          0.0173,  0.2037, -0.4723,  0.0826, -0.1922, -0.2872, -0.1359,  0.3213,
          0.3652, -0.0805,  0.3569,  0.0768, -0.5458,  0.4140,  0.2930,  0.2597,
         -0.7504, -0.0893,  0.3600, -0.6107,  0.2075, -0.0414,  0.0206,  0.0420,
         -0.2414, -0.1937, -0.4551, -0.2784,  0.4687,  0.0906,  0.3899, -0.2740]],
       device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
62000 特征值优化 tensor(0.6286, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6061,  0.0392, -0.8807, -0.0965, -1.0230, -0.5323, -2.1909, -0.8723,
         -0.5489, -0.4352, -0.2530, -3.6456, -0.3158,  0.0950,  0.1333,  0.1623,
          0.0249, -0.2791,  0.1173,  0.1640, -0.2932, -0.0478,  0.2247,  0.1016,
          0.0812, -0.1547,  0.4046,  0.1540, -0.0785, -0.0526,  0.3399, -0.1736,
          0.0969, -0.0344, -0.0263,  0.0128,  0.1959,  0.1899,  0.4319,  0.3017,
          0.0072,  0.2080, -0.4786,  0.0885, -0.1889, -0.2813, -0.1331,  0.3286,
          0.3646, -0.0806,  0.3553,  0.0734, -0.5617,  0.4160,  0.2974,  0.2942,
         -0.7258, -0.1099,  0.3587, -0.6112,  0.2027, -0.0883, -0.0206,  0.0725,
         -0.2645, -0.1826, -0.4508, -0.2714,  0.4860,  0.1303,  0.3882, -0.2787]],
       device='cuda:0') tensor(0.2173, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
63000 特征值优化 tensor(0.6324, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6034,  0.0428, -0.8861, -0.1014, -1.0090, -0.5448, -2.1810, -0.8529,
         -0.5256, -0.4407, -0.2583, -3.6512, -0.3144,  0.0915,  0.1417,  0.1414,
          0.0196, -0.2681,  0.1083,  0.1668, -0.2921, -0.0476,  0.2339,  0.0563,
          0.0970, -0.1576,  0.4139,  0.1721, -0.0803, -0.0519,  0.3469, -0.1578,
          0.1526, -0.0351, -0.0149,  0.0142,  0.2045,  0.1835,  0.4287,  0.2964,
          0.0043,  0.2128, -0.4814,  0.0964, -0.1855, -0.2806, -0.1355,  0.3288,
          0.3650, -0.0805,  0.3501,  0.0776, -0.5746,  0.4293,  0.2981,  0.2784,
         -0.7277, -0.1060,  0.3575, -0.6142,  0.1904, -0.1013, -0.0246,  0.0783,
         -0.2539, -0.1898, -0.4525, -0.2803,  0.4782,  0.1540,  0.3754, -0.2779]],
       device='cuda:0') tensor(0.2095, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
64000 特征值优化 tensor(0.6276, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6130,  0.0482, -0.8676, -0.1001, -0.9942, -0.5207, -2.1662, -0.8663,
         -0.5029, -0.4413, -0.2461, -3.6562, -0.3150,  0.1057,  0.1533,  0.1404,
          0.0376, -0.2623,  0.1071,  0.1655, -0.2933, -0.0480,  0.2500,  0.0314,
          0.1249, -0.1456,  0.3886,  0.1775, -0.0799, -0.0523,  0.3471, -0.1624,
          0.1452, -0.0298, -0.0077,  0.0172,  0.1951,  0.2004,  0.4247,  0.2903,
          0.0120,  0.2060, -0.4760,  0.0945, -0.1877, -0.2810, -0.1354,  0.3204,
          0.3647, -0.0801,  0.3517,  0.0769, -0.5462,  0.4164,  0.2970,  0.2666,
         -0.7320, -0.0977,  0.3637, -0.6078,  0.1656, -0.0513, -0.0132,  0.0730,
         -0.2539, -0.1888, -0.4394, -0.2788,  0.4792,  0.1176,  0.3931, -0.2740]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
65000 特征值优化 tensor(0.6247, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6242,  0.0530, -0.8624, -0.0976, -0.9997, -0.5157, -2.1640, -0.8774,
         -0.4860, -0.4361, -0.2437, -3.6675, -0.3155,  0.1091,  0.1515,  0.1394,
          0.0447, -0.2621,  0.1127,  0.1647, -0.2942, -0.0482,  0.2600,  0.0161,
          0.1437, -0.1431,  0.3771,  0.1840, -0.0791, -0.0521,  0.3459, -0.1664,
          0.1355, -0.0309, -0.0074,  0.0182,  0.1916,  0.2113,  0.4238,  0.2848,
          0.0152,  0.1964, -0.4703,  0.0922, -0.1889, -0.2851, -0.1368,  0.3177,
          0.3651, -0.0807,  0.3525,  0.0762, -0.5332,  0.4078,  0.2993,  0.2643,
         -0.7376, -0.0942,  0.3654, -0.6037,  0.1538, -0.0223,  0.0076,  0.0649,
         -0.2590, -0.1893, -0.4348, -0.2735,  0.4807,  0.0924,  0.4218, -0.2652]],
       device='cuda:0') tensor(0.2080, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
66000 特征值优化 tensor(0.6320, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6054,  0.0418, -0.8759, -0.0947, -0.9988, -0.5372, -2.1373, -0.8265,
         -0.4835, -0.4419, -0.2710, -3.6601, -0.3110,  0.1037,  0.1532,  0.1294,
          0.0189, -0.2654,  0.1030,  0.1657, -0.2895, -0.0481,  0.2414,  0.0312,
          0.0948, -0.1560,  0.4156,  0.1486, -0.0806, -0.0523,  0.3457, -0.1596,
          0.1551, -0.0337, -0.0150,  0.0136,  0.2116,  0.1796,  0.4262,  0.2894,
         -0.0055,  0.1970, -0.4809,  0.0952, -0.1884, -0.2802, -0.1389,  0.3243,
          0.3659, -0.0813,  0.3470,  0.0786, -0.5548,  0.4189,  0.2997,  0.2752,
         -0.7244, -0.1043,  0.3637, -0.6062,  0.1460, -0.0970, -0.0384,  0.0962,
         -0.2757, -0.1850, -0.4346, -0.2696,  0.4910,  0.1691,  0.4136, -0.2648]],
       device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
67000 正交保障 tensor(0.2033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.8809e-01,  3.1699e-02, -8.8496e-01, -8.1095e-02, -1.0267e+00,
         -5.4863e-01, -2.1496e+00, -8.2977e-01, -4.6739e-01, -4.4581e-01,
         -2.9423e-01, -3.6681e+00, -3.1499e-01,  9.0714e-02,  1.2912e-01,
          1.5961e-01,  9.0997e-03, -2.8526e-01,  1.1980e-01,  1.6408e-01,
         -2.9328e-01, -4.8233e-02,  2.1670e-01,  9.0106e-02,  6.4726e-02,
         -1.6142e-01,  4.4717e-01,  1.0673e-01, -8.0129e-02, -5.1249e-02,
          3.4013e-01, -1.6525e-01,  1.1993e-01, -3.9573e-02, -3.6468e-02,
          8.9918e-03,  2.0656e-01,  1.6398e-01,  4.2550e-01,  2.9462e-01,
         -2.9206e-03,  1.9969e-01, -4.8836e-01,  9.3321e-02, -1.8951e-01,
         -2.7629e-01, -1.3413e-01,  3.2721e-01,  3.6341e-01, -7.8313e-02,
          3.4252e-01,  7.7022e-02, -5.6728e-01,  4.1932e-01,  2.9652e-01,
          2.8667e-01, -7.2609e-01, -1.1820e-01,  3.6355e-01, -6.1042e-01,
          1.8779e-01, -1.3909e-01, -6.8695e-02,  1.2306e-01, -2.9381e-01,
         -1.6932e-01, -4.3207e-01, -2.5750e-01,  5.0728e-01,  1.8564e-01,
          4.1451e-01, -2.7069e-01]], device='cuda:0') tensor(0.2033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
68000 特征值优化 tensor(0.6275, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.8934e-01,  3.4044e-02, -8.8851e-01, -8.1169e-02, -1.0242e+00,
         -5.4898e-01, -2.1700e+00, -8.5136e-01, -4.6740e-01, -4.5148e-01,
         -2.6742e-01, -3.6811e+00, -3.1165e-01,  9.7940e-02,  1.3041e-01,
          1.5423e-01,  7.7469e-03, -2.7797e-01,  1.1354e-01,  1.6354e-01,
         -2.8928e-01, -4.8210e-02,  2.1349e-01,  9.1402e-02,  6.8384e-02,
         -1.6600e-01,  4.5149e-01,  1.1514e-01, -8.0273e-02, -5.1683e-02,
          3.4124e-01, -1.6552e-01,  1.2396e-01, -4.0106e-02, -4.1373e-02,
          8.2017e-03,  2.0370e-01,  1.7150e-01,  4.2629e-01,  2.9675e-01,
         -2.6361e-03,  2.0072e-01, -4.8921e-01,  9.3665e-02, -1.9254e-01,
         -2.7690e-01, -1.3537e-01,  3.2875e-01,  3.6237e-01, -7.7483e-02,
          3.3962e-01,  7.8300e-02, -5.7396e-01,  4.2414e-01,  2.9581e-01,
          2.8850e-01, -7.2775e-01, -1.1911e-01,  3.6239e-01, -6.1147e-01,
          2.0312e-01, -1.3461e-01, -6.7735e-02,  1.0859e-01, -2.9392e-01,
         -1.7035e-01, -4.3097e-01, -2.5631e-01,  4.8944e-01,  1.8577e-01,
          4.1993e-01, -2.7124e-01]], device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
69000 特征值优化 tensor(0.6286, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.0786e-01,  4.1805e-02, -8.7684e-01, -8.1619e-02, -1.0250e+00,
         -5.4082e-01, -2.1594e+00, -8.4963e-01, -4.7253e-01, -4.5281e-01,
         -2.8513e-01, -3.7000e+00, -3.1559e-01,  7.9810e-02,  1.2291e-01,
          1.7692e-01,  1.3908e-02, -2.9184e-01,  1.2332e-01,  1.6302e-01,
         -2.9323e-01, -4.8035e-02,  2.2136e-01,  9.2444e-02,  6.8629e-02,
         -1.6119e-01,  4.2104e-01,  1.2504e-01, -7.9141e-02, -5.2227e-02,
          3.4038e-01, -1.7133e-01,  1.0819e-01, -3.5813e-02, -2.3555e-02,
          1.2248e-02,  2.0168e-01,  1.8110e-01,  4.2385e-01,  2.8983e-01,
          6.6762e-04,  1.9790e-01, -4.7783e-01,  8.6332e-02, -1.8962e-01,
         -2.8621e-01, -1.3171e-01,  3.2474e-01,  3.6388e-01, -7.9296e-02,
          3.4479e-01,  7.5535e-02, -5.5941e-01,  4.1468e-01,  2.9805e-01,
          2.8358e-01, -7.2470e-01, -1.1130e-01,  3.6183e-01, -6.0907e-01,
          1.8108e-01, -1.0013e-01, -4.0107e-02,  9.1413e-02, -2.8963e-01,
         -1.7155e-01, -4.2876e-01, -2.6252e-01,  4.9957e-01,  1.4914e-01,
          4.3749e-01, -2.6868e-01]], device='cuda:0') tensor(0.2099, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
70000 特征值优化 tensor(0.6275, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.0516e-01,  3.8716e-02, -8.7597e-01, -7.9698e-02, -1.0249e+00,
         -5.4512e-01, -2.1534e+00, -8.4903e-01, -4.7667e-01, -4.6297e-01,
         -2.8263e-01, -3.7007e+00, -3.1577e-01,  8.4698e-02,  1.2399e-01,
          1.7208e-01,  9.2809e-03, -2.8833e-01,  1.2290e-01,  1.6314e-01,
         -2.9330e-01, -4.8108e-02,  2.2146e-01,  9.2233e-02,  6.5760e-02,
         -1.6127e-01,  4.2557e-01,  1.1785e-01, -7.9235e-02, -5.2029e-02,
          3.4046e-01, -1.6788e-01,  1.0854e-01, -3.6503e-02, -2.3779e-02,
          1.2186e-02,  2.0029e-01,  1.7473e-01,  4.2613e-01,  2.9375e-01,
         -3.6729e-04,  2.0041e-01, -4.7863e-01,  8.7414e-02, -1.8843e-01,
         -2.8527e-01, -1.3087e-01,  3.2355e-01,  3.6288e-01, -7.8682e-02,
          3.4350e-01,  7.5760e-02, -5.6690e-01,  4.1921e-01,  2.9641e-01,
          2.8500e-01, -7.2498e-01, -1.1164e-01,  3.6110e-01, -6.1040e-01,
          1.8836e-01, -1.1378e-01, -4.5311e-02,  9.9833e-02, -2.9160e-01,
         -1.7319e-01, -4.2727e-01, -2.6300e-01,  5.0165e-01,  1.5932e-01,
          4.3421e-01, -2.7287e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
71000 特征值优化 tensor(0.6305, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6069,  0.0421, -0.8718, -0.0907, -1.0331, -0.5315, -2.1739, -0.8628,
         -0.4969, -0.4547, -0.2712, -3.7160, -0.3145,  0.1012,  0.1383,  0.1561,
          0.0308, -0.2720,  0.1228,  0.1664, -0.2928, -0.0482,  0.2265,  0.0976,
          0.0770, -0.1639,  0.4055,  0.1346, -0.0783, -0.0522,  0.3418, -0.1839,
          0.1137, -0.0356, -0.0306,  0.0116,  0.2047,  0.1982,  0.4284,  0.2917,
          0.0065,  0.1946, -0.4800,  0.0942, -0.1871, -0.2786, -0.1360,  0.3230,
          0.3646, -0.0802,  0.3530,  0.0736, -0.5318,  0.3983,  0.3030,  0.2766,
         -0.7256, -0.1131,  0.3597, -0.6073,  0.1521, -0.0641, -0.0258,  0.0727,
         -0.2870, -0.1768, -0.4298, -0.2613,  0.4862,  0.1286,  0.4507, -0.2666]],
       device='cuda:0') tensor(0.2096, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
72000 特征值优化 tensor(0.6317, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6107,  0.0444, -0.8683, -0.0924, -1.0254, -0.5192, -2.1553, -0.8632,
         -0.4930, -0.4617, -0.2713, -3.7110, -0.3149,  0.0925,  0.1310,  0.1651,
          0.0263, -0.2782,  0.1159,  0.1644, -0.2942, -0.0479,  0.2203,  0.0884,
          0.0829, -0.1646,  0.4096,  0.1454, -0.0779, -0.0525,  0.3398, -0.1761,
          0.1014, -0.0346, -0.0272,  0.0118,  0.1991,  0.2025,  0.4270,  0.2894,
          0.0075,  0.1929, -0.4768,  0.0893, -0.1890, -0.2815, -0.1334,  0.3216,
          0.3641, -0.0797,  0.3548,  0.0730, -0.5333,  0.4008,  0.2993,  0.2890,
         -0.7299, -0.1105,  0.3628, -0.6047,  0.1651, -0.0561, -0.0113,  0.0637,
         -0.2831, -0.1795, -0.4222, -0.2640,  0.4928,  0.1143,  0.4512, -0.2628]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
73000 特征值优化 tensor(0.6305, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6108,  0.0388, -0.8727, -0.0872, -1.0268, -0.5299, -2.1602, -0.8616,
         -0.4871, -0.4717, -0.2734, -3.7174, -0.3165,  0.0903,  0.1255,  0.1712,
          0.0253, -0.2807,  0.1226,  0.1625, -0.2943, -0.0478,  0.2219,  0.0936,
          0.0819, -0.1680,  0.4084,  0.1472, -0.0780, -0.0522,  0.3401, -0.1764,
          0.0993, -0.0348, -0.0208,  0.0134,  0.1971,  0.2011,  0.4279,  0.2893,
          0.0090,  0.1942, -0.4757,  0.0853, -0.1900, -0.2837, -0.1335,  0.3231,
          0.3641, -0.0785,  0.3515,  0.0731, -0.5435,  0.4070,  0.2989,  0.2856,
         -0.7290, -0.1094,  0.3590, -0.6094,  0.1732, -0.0596, -0.0204,  0.0675,
         -0.2897, -0.1792, -0.4241, -0.2649,  0.4920,  0.1172,  0.4524, -0.2647]],
       device='cuda:0') tensor(0.2097, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
74000 特征值优化 tensor(0.6292, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6103,  0.0407, -0.8735, -0.0841, -1.0258, -0.5385, -2.1576, -0.8568,
         -0.4873, -0.4786, -0.2759, -3.7146, -0.3162,  0.0935,  0.1243,  0.1713,
          0.0165, -0.2824,  0.1229,  0.1622, -0.2938, -0.0480,  0.2243,  0.0955,
          0.0752, -0.1654,  0.4099,  0.1381, -0.0791, -0.0521,  0.3400, -0.1715,
          0.1026, -0.0343, -0.0228,  0.0126,  0.1979,  0.1877,  0.4293,  0.2895,
          0.0042,  0.1948, -0.4755,  0.0858, -0.1894, -0.2860, -0.1320,  0.3226,
          0.3632, -0.0785,  0.3469,  0.0749, -0.5540,  0.4123,  0.2980,  0.2817,
         -0.7241, -0.1102,  0.3568, -0.6122,  0.1795, -0.0841, -0.0297,  0.0819,
         -0.2937, -0.1777, -0.4251, -0.2646,  0.4972,  0.1360,  0.4527, -0.2666]],
       device='cuda:0') tensor(0.2032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
75000 特征值优化 tensor(0.6285, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6030,  0.0401, -0.8767, -0.0826, -1.0330, -0.5402, -2.1696, -0.8603,
         -0.4914, -0.4817, -0.2866, -3.7176, -0.3146,  0.0870,  0.1305,  0.1660,
          0.0268, -0.2814,  0.1217,  0.1661, -0.2931, -0.0477,  0.2204,  0.0955,
          0.0817, -0.1652,  0.4166,  0.1396, -0.0791, -0.0524,  0.3411, -0.1855,
          0.1097, -0.0361, -0.0320,  0.0102,  0.2066,  0.1974,  0.4319,  0.2911,
          0.0055,  0.1924, -0.4817,  0.0968, -0.1883, -0.2763, -0.1358,  0.3246,
          0.3639, -0.0793,  0.3444,  0.0761, -0.5562,  0.4122,  0.3077,  0.2930,
         -0.7250, -0.1131,  0.3559, -0.6120,  0.1587, -0.0705, -0.0328,  0.0827,
         -0.2948, -0.1807, -0.4248, -0.2624,  0.4940,  0.1290,  0.4567, -0.2634]],
       device='cuda:0') tensor(0.2276, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
76000 特征值优化 tensor(0.6272, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.9422e-01,  3.5731e-02, -8.7938e-01, -8.0195e-02, -1.0254e+00,
         -5.4054e-01, -2.1495e+00, -8.5107e-01, -4.9765e-01, -4.9924e-01,
         -2.7549e-01, -3.7098e+00, -3.1515e-01,  9.1358e-02,  1.2907e-01,
          1.6004e-01,  1.0498e-02, -2.8151e-01,  1.1854e-01,  1.6438e-01,
         -2.9352e-01, -4.7701e-02,  2.1106e-01,  9.7903e-02,  7.6827e-02,
         -1.6740e-01,  4.3407e-01,  1.2772e-01, -7.9790e-02, -5.1984e-02,
          3.4006e-01, -1.6811e-01,  1.0762e-01, -3.8914e-02, -3.9505e-02,
          9.7817e-03,  1.9751e-01,  1.7632e-01,  4.3581e-01,  2.9583e-01,
          1.6914e-03,  1.9593e-01, -4.8541e-01,  9.0254e-02, -1.8869e-01,
         -2.7999e-01, -1.3359e-01,  3.2565e-01,  3.6521e-01, -7.9656e-02,
          3.4230e-01,  7.6391e-02, -5.6869e-01,  4.1946e-01,  2.9591e-01,
          2.8418e-01, -7.2970e-01, -1.1631e-01,  3.5242e-01, -6.1620e-01,
          1.8831e-01, -1.0783e-01, -4.4889e-02,  1.0017e-01, -3.0163e-01,
         -1.8072e-01, -4.2275e-01, -2.6273e-01,  4.9721e-01,  1.5757e-01,
          4.4659e-01, -2.6835e-01]], device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
77000 特征值优化 tensor(0.6271, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.8952e-01,  4.0507e-02, -8.8435e-01, -8.2194e-02, -1.0257e+00,
         -5.4763e-01, -2.1501e+00, -8.4274e-01, -5.0032e-01, -5.0365e-01,
         -2.8313e-01, -3.7030e+00, -3.1421e-01,  8.4442e-02,  1.2856e-01,
          1.5707e-01,  6.5680e-03, -2.8344e-01,  1.1841e-01,  1.6347e-01,
         -2.9345e-01, -4.8003e-02,  2.1163e-01,  8.9580e-02,  6.6503e-02,
         -1.7416e-01,  4.5009e-01,  1.1450e-01, -7.9831e-02, -5.2181e-02,
          3.4028e-01, -1.6559e-01,  1.1314e-01, -3.9736e-02, -3.9338e-02,
          8.4836e-03,  2.0339e-01,  1.6695e-01,  4.3638e-01,  2.9577e-01,
         -1.3625e-03,  1.9527e-01, -4.8828e-01,  9.2701e-02, -1.9078e-01,
         -2.7895e-01, -1.3406e-01,  3.2840e-01,  3.6381e-01, -7.8423e-02,
          3.4238e-01,  7.7244e-02, -5.7514e-01,  4.2305e-01,  2.9562e-01,
          2.8482e-01, -7.3021e-01, -1.1581e-01,  3.5083e-01, -6.1740e-01,
          1.9303e-01, -1.3189e-01, -5.3778e-02,  1.1168e-01, -3.0034e-01,
         -1.8305e-01, -4.2432e-01, -2.6286e-01,  5.0325e-01,  1.7593e-01,
          4.4328e-01, -2.6626e-01]], device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
78000 特征值优化 tensor(0.6276, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5913,  0.0429, -0.8812, -0.0791, -1.0229, -0.5455, -2.1811, -0.8560,
         -0.4968, -0.4973, -0.2626, -3.7120, -0.3155,  0.1015,  0.1357,  0.1457,
          0.0129, -0.2721,  0.1154,  0.1644, -0.2934, -0.0480,  0.2115,  0.0882,
          0.0679, -0.1790,  0.4491,  0.1108, -0.0791, -0.0521,  0.3404, -0.1666,
          0.1133, -0.0402, -0.0495,  0.0084,  0.2038,  0.1700,  0.4359,  0.2940,
          0.0078,  0.1929, -0.4860,  0.0904, -0.1885, -0.2827, -0.1332,  0.3272,
          0.3648, -0.0801,  0.3426,  0.0758, -0.5715,  0.4211,  0.2945,  0.2758,
         -0.7336, -0.1162,  0.3518, -0.6144,  0.2050, -0.1366, -0.0506,  0.1011,
         -0.2995, -0.1843, -0.4252, -0.2595,  0.4917,  0.1758,  0.4534, -0.2647]],
       device='cuda:0') tensor(0.2028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
79000 特征值优化 tensor(0.6275, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.9349e-01,  4.3807e-02, -8.7761e-01, -7.7865e-02, -1.0211e+00,
         -5.4389e-01, -2.1947e+00, -8.6066e-01, -4.9374e-01, -5.0714e-01,
         -2.6726e-01, -3.7121e+00, -3.1604e-01,  1.0048e-01,  1.3464e-01,
          1.5095e-01,  1.0530e-02, -2.7316e-01,  1.1762e-01,  1.6405e-01,
         -2.9378e-01, -4.8204e-02,  2.1171e-01,  9.1927e-02,  7.0746e-02,
         -1.7374e-01,  4.3997e-01,  1.1434e-01, -7.8086e-02, -5.2143e-02,
          3.4078e-01, -1.6591e-01,  1.1377e-01, -3.9209e-02, -3.9361e-02,
          9.0914e-03,  2.0384e-01,  1.6574e-01,  4.3613e-01,  2.9395e-01,
          3.1181e-03,  1.9297e-01, -4.8498e-01,  8.8801e-02, -1.8809e-01,
         -2.8318e-01, -1.3344e-01,  3.2682e-01,  3.6474e-01, -8.0769e-02,
          3.4566e-01,  7.4793e-02, -5.7337e-01,  4.2241e-01,  2.9416e-01,
          2.8787e-01, -7.2860e-01, -1.1683e-01,  3.5213e-01, -6.1381e-01,
          2.1477e-01, -1.4347e-01, -5.3120e-02,  1.0198e-01, -3.0438e-01,
         -1.8309e-01, -4.1848e-01, -2.6191e-01,  4.8448e-01,  1.7618e-01,
          4.5280e-01, -2.6419e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
80000 特征值优化 tensor(0.6265, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.8986e-01,  3.4530e-02, -8.7623e-01, -7.9569e-02, -1.0216e+00,
         -5.5054e-01, -2.1579e+00, -8.5010e-01, -4.7427e-01, -5.1187e-01,
         -2.7575e-01, -3.7148e+00, -3.1443e-01,  8.1936e-02,  1.3118e-01,
          1.5593e-01,  1.4384e-03, -2.8712e-01,  1.1218e-01,  1.6422e-01,
         -2.9250e-01, -4.7763e-02,  2.2191e-01,  9.7538e-02,  5.8504e-02,
         -1.6492e-01,  4.3640e-01,  9.9441e-02, -7.8965e-02, -5.1778e-02,
          3.4159e-01, -1.6396e-01,  1.1893e-01, -3.7761e-02, -2.9245e-02,
          9.6223e-03,  2.0658e-01,  1.6154e-01,  4.3414e-01,  2.9343e-01,
         -4.1785e-03,  1.9328e-01, -4.8664e-01,  9.2182e-02, -1.8857e-01,
         -2.7843e-01, -1.3236e-01,  3.2368e-01,  3.6304e-01, -7.8543e-02,
          3.4248e-01,  7.5979e-02, -5.8356e-01,  4.2841e-01,  2.9458e-01,
          2.8592e-01, -7.2157e-01, -1.1548e-01,  3.5546e-01, -6.1383e-01,
          2.0426e-01, -1.4999e-01, -5.9065e-02,  1.1665e-01, -3.0953e-01,
         -1.7887e-01, -4.1141e-01, -2.6112e-01,  4.9920e-01,  1.9169e-01,
          4.5271e-01, -2.6439e-01]], device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
81000 特征值优化 tensor(0.6277, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.9786e-01,  3.8286e-02, -8.8274e-01, -8.0390e-02, -1.0237e+00,
         -5.5682e-01, -2.1555e+00, -8.3161e-01, -4.9645e-01, -5.0658e-01,
         -2.9646e-01, -3.6988e+00, -3.1419e-01,  8.5906e-02,  1.4501e-01,
          1.6371e-01,  1.6186e-02, -2.8667e-01,  1.2421e-01,  1.6665e-01,
         -2.9251e-01, -4.7913e-02,  2.0912e-01,  8.7773e-02,  6.5810e-02,
         -1.8340e-01,  4.5243e-01,  1.1206e-01, -7.9399e-02, -5.2571e-02,
          3.3998e-01, -1.7845e-01,  1.2300e-01, -4.0081e-02, -3.2516e-02,
          9.2821e-03,  2.1234e-01,  1.7318e-01,  4.3508e-01,  2.9306e-01,
          7.8806e-04,  1.9377e-01, -4.8423e-01,  9.6145e-02, -1.8621e-01,
         -2.7574e-01, -1.3509e-01,  3.2851e-01,  3.6458e-01, -7.9766e-02,
          3.4339e-01,  7.6196e-02, -5.7039e-01,  4.2010e-01,  3.0332e-01,
          2.8901e-01, -7.2255e-01, -1.1681e-01,  3.5228e-01, -6.1463e-01,
          1.6267e-01, -1.1481e-01, -6.7971e-02,  1.1600e-01, -3.0090e-01,
         -1.8276e-01, -4.1726e-01, -2.6542e-01,  4.9308e-01,  1.7283e-01,
          4.4638e-01, -2.6545e-01]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
82000 特征值优化 tensor(0.6291, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.0024e-01,  3.6080e-02, -8.7509e-01, -8.2998e-02, -1.0260e+00,
         -5.4461e-01, -2.1721e+00, -8.6237e-01, -4.8204e-01, -5.1080e-01,
         -2.6022e-01, -3.7068e+00, -3.1169e-01,  9.4642e-02,  1.2803e-01,
          1.5942e-01,  1.5787e-02, -2.7737e-01,  1.1470e-01,  1.6374e-01,
         -2.8910e-01, -4.8030e-02,  2.2842e-01,  9.4165e-02,  6.8159e-02,
         -1.6389e-01,  4.1477e-01,  1.1443e-01, -7.8827e-02, -5.1838e-02,
          3.4065e-01, -1.6713e-01,  1.1504e-01, -3.5671e-02, -2.1522e-02,
          1.1189e-02,  1.9911e-01,  1.8601e-01,  4.3339e-01,  2.8922e-01,
          2.6386e-03,  1.9085e-01, -4.8361e-01,  9.1166e-02, -1.9215e-01,
         -2.7844e-01, -1.3431e-01,  3.2335e-01,  3.6303e-01, -7.8284e-02,
          3.4604e-01,  7.4683e-02, -5.5119e-01,  4.1104e-01,  2.9551e-01,
          2.8063e-01, -7.2150e-01, -1.1206e-01,  3.5438e-01, -6.1405e-01,
          1.9106e-01, -9.8738e-02, -4.2422e-02,  8.3508e-02, -3.0498e-01,
         -1.7946e-01, -4.1177e-01, -2.6385e-01,  4.8581e-01,  1.5387e-01,
          4.5589e-01, -2.6255e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
83000 特征值优化 tensor(0.6337, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6163,  0.0462, -0.8726, -0.1060, -1.0113, -0.5017, -2.1829, -0.8990,
         -0.5021, -0.5097, -0.2246, -3.7089, -0.3170,  0.1146,  0.1400,  0.1423,
          0.0234, -0.2601,  0.1100,  0.1632, -0.2931, -0.0484,  0.2231,  0.0806,
          0.0976, -0.1632,  0.4097,  0.1587, -0.0788, -0.0523,  0.3422, -0.1767,
          0.0991, -0.0321, -0.0242,  0.0137,  0.1880,  0.1967,  0.4336,  0.2869,
          0.0191,  0.1871, -0.4728,  0.0841, -0.1883, -0.2847, -0.1334,  0.3241,
          0.3666, -0.0828,  0.3591,  0.0750, -0.5495,  0.4123,  0.2988,  0.2713,
         -0.7379, -0.1067,  0.3573, -0.6076,  0.1817, -0.0623,  0.0086,  0.0421,
         -0.2914, -0.1853, -0.4070, -0.2658,  0.4725,  0.1154,  0.4622, -0.2574]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
84000 特征值优化 tensor(0.6332, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6239,  0.0448, -0.8664, -0.0984, -1.0118, -0.5060, -2.1753, -0.9040,
         -0.5178, -0.5209, -0.2266, -3.7102, -0.3181,  0.1097,  0.1382,  0.1401,
          0.0224, -0.2597,  0.1095,  0.1617, -0.2950, -0.0481,  0.2232,  0.0832,
          0.0970, -0.1688,  0.4034,  0.1569, -0.0786, -0.0526,  0.3427, -0.1747,
          0.0970, -0.0315, -0.0268,  0.0129,  0.1845,  0.1997,  0.4391,  0.2870,
          0.0187,  0.1843, -0.4689,  0.0808, -0.1919, -0.2857, -0.1342,  0.3214,
          0.3658, -0.0822,  0.3547,  0.0738, -0.5476,  0.4115,  0.2939,  0.2743,
         -0.7384, -0.1060,  0.3535, -0.6100,  0.1911, -0.0600,  0.0088,  0.0413,
         -0.2945, -0.1920, -0.4091, -0.2675,  0.4729,  0.1126,  0.4707, -0.2556]],
       device='cuda:0') tensor(0.2034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
85000 特征值优化 tensor(0.6298, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6032,  0.0396, -0.8737, -0.0836, -1.0224, -0.5308, -2.1875, -0.8916,
         -0.5201, -0.5257, -0.2545, -3.7124, -0.3161,  0.1154,  0.1325,  0.1481,
          0.0233, -0.2634,  0.1142,  0.1638, -0.2931, -0.0480,  0.2256,  0.0975,
          0.0807, -0.1722,  0.3963,  0.1402, -0.0780, -0.0525,  0.3399, -0.1723,
          0.1013, -0.0338, -0.0268,  0.0126,  0.1918,  0.1932,  0.4415,  0.2876,
          0.0152,  0.1857, -0.4804,  0.0887, -0.1891, -0.2808, -0.1327,  0.3247,
          0.3646, -0.0800,  0.3508,  0.0727, -0.5611,  0.4156,  0.2918,  0.2778,
         -0.7237, -0.1103,  0.3461, -0.6169,  0.2105, -0.0913, -0.0276,  0.0656,
         -0.3057, -0.1891, -0.4175, -0.2664,  0.4752,  0.1351,  0.4720, -0.2581]],
       device='cuda:0') tensor(0.2046, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
86000 特征值优化 tensor(0.6270, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5968,  0.0314, -0.8756, -0.0779, -1.0107, -0.5481, -2.1665, -0.8866,
         -0.5136, -0.5362, -0.2762, -3.7050, -0.3155,  0.0834,  0.1397,  0.1517,
          0.0055, -0.2810,  0.1107,  0.1641, -0.2936, -0.0479,  0.2092,  0.0994,
          0.0728, -0.1816,  0.4322,  0.1204, -0.0786, -0.0521,  0.3429, -0.1692,
          0.1123, -0.0409, -0.0363,  0.0107,  0.1991,  0.1775,  0.4423,  0.2914,
          0.0048,  0.1885, -0.4835,  0.0895, -0.1891, -0.2756, -0.1355,  0.3248,
          0.3646, -0.0803,  0.3448,  0.0744, -0.5799,  0.4283,  0.2929,  0.2839,
         -0.7290, -0.1177,  0.3450, -0.6195,  0.2028, -0.1241, -0.0388,  0.0905,
         -0.3084, -0.1887, -0.4130, -0.2652,  0.4903,  0.1657,  0.4624, -0.2611]],
       device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
87000 特征值优化 tensor(0.6370, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.9687e-01,  3.4373e-02, -8.7244e-01, -8.0827e-02, -1.0134e+00,
         -5.5143e-01, -2.1660e+00, -8.5325e-01, -5.0284e-01, -5.4068e-01,
         -2.9221e-01, -3.7044e+00, -3.1222e-01,  8.7740e-02,  1.3212e-01,
          1.4428e-01,  7.4900e-03, -2.7402e-01,  1.1073e-01,  1.6351e-01,
         -2.9067e-01, -4.8331e-02,  2.1569e-01,  6.3159e-02,  7.1273e-02,
         -1.6446e-01,  4.2525e-01,  1.3672e-01, -7.8972e-02, -5.2999e-02,
          3.4727e-01, -1.6084e-01,  1.4493e-01, -3.3935e-02, -2.2057e-02,
          1.3302e-02,  2.0425e-01,  1.7308e-01,  4.3900e-01,  2.8624e-01,
          1.7264e-03,  1.9079e-01, -4.8419e-01,  8.8038e-02, -1.9070e-01,
         -2.7822e-01, -1.3791e-01,  3.2322e-01,  3.6471e-01, -8.0439e-02,
          3.4475e-01,  7.4958e-02, -5.8064e-01,  4.3539e-01,  2.9786e-01,
          2.8533e-01, -7.1659e-01, -1.0861e-01,  3.4723e-01, -6.1691e-01,
          1.9006e-01, -1.3014e-01, -4.1143e-02,  8.2454e-02, -3.0369e-01,
         -1.9040e-01, -4.1059e-01, -2.7590e-01,  4.7505e-01,  1.8731e-01,
          4.5655e-01, -2.6277e-01]], device='cuda:0') tensor(0.2043, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
88000 特征值优化 tensor(0.6296, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6074,  0.0383, -0.8712, -0.0880, -1.0015, -0.5210, -2.1598, -0.8846,
         -0.5011, -0.5450, -0.2582, -3.7122, -0.3160,  0.1201,  0.1454,  0.1325,
          0.0262, -0.2581,  0.1050,  0.1637, -0.2935, -0.0479,  0.2450,  0.0345,
          0.1174, -0.1589,  0.3997,  0.1620, -0.0803, -0.0521,  0.3461, -0.1521,
          0.1401, -0.0300, -0.0105,  0.0132,  0.1949,  0.1944,  0.4389,  0.2848,
          0.0121,  0.1902, -0.4789,  0.0904, -0.1902, -0.2785, -0.1345,  0.3222,
          0.3646, -0.0806,  0.3451,  0.0773, -0.5563,  0.4197,  0.2897,  0.2683,
         -0.7281, -0.1010,  0.3484, -0.6162,  0.1980, -0.0881, -0.0082,  0.0652,
         -0.2906, -0.2014, -0.4092, -0.2768,  0.4869,  0.1369,  0.4569, -0.2579]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
89000 特征值优化 tensor(0.6283, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6087,  0.0374, -0.8674, -0.0921, -0.9991, -0.5192, -2.1481, -0.9048,
         -0.4951, -0.5487, -0.2442, -3.7104, -0.3119,  0.1164,  0.1409,  0.1297,
          0.0260, -0.2610,  0.0994,  0.1635, -0.2902, -0.0480,  0.2523,  0.0257,
          0.1344, -0.1547,  0.3884,  0.1717, -0.0803, -0.0518,  0.3461, -0.1547,
          0.1339, -0.0299, -0.0059,  0.0152,  0.1911,  0.2021,  0.4373,  0.2812,
          0.0105,  0.1887, -0.4792,  0.0895, -0.1924, -0.2783, -0.1382,  0.3196,
          0.3650, -0.0805,  0.3476,  0.0777, -0.5457,  0.4148,  0.2895,  0.2637,
         -0.7311, -0.0981,  0.3498, -0.6144,  0.1829, -0.0688,  0.0055,  0.0562,
         -0.2851, -0.2034, -0.4056, -0.2791,  0.4890,  0.1277,  0.4598, -0.2561]],
       device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
90000 特征值优化 tensor(0.6244, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.1972e-01,  4.7208e-02, -8.6122e-01, -9.3995e-02, -1.0018e+00,
         -5.1806e-01, -2.1601e+00, -9.1538e-01, -5.0068e-01, -5.4018e-01,
         -2.5339e-01, -3.7138e+00, -3.1818e-01,  1.2192e-01,  1.4227e-01,
          1.4272e-01,  4.4221e-02, -2.5838e-01,  1.1778e-01,  1.6060e-01,
         -2.9578e-01, -4.8018e-02,  2.6626e-01,  9.7649e-04,  1.5367e-01,
         -1.5584e-01,  3.7440e-01,  1.8169e-01, -7.9703e-02, -5.2218e-02,
          3.4591e-01, -1.5967e-01,  1.2172e-01, -3.0905e-02, -6.8916e-03,
          1.9060e-02,  1.8152e-01,  2.1877e-01,  4.3898e-01,  2.7904e-01,
          2.5701e-02,  1.8328e-01, -4.7005e-01,  8.2886e-02, -1.9275e-01,
         -2.8702e-01, -1.3649e-01,  3.1716e-01,  3.6491e-01, -7.9987e-02,
          3.4921e-01,  7.6715e-02, -5.4580e-01,  4.1413e-01,  2.9069e-01,
          2.6190e-01, -7.4505e-01, -9.1167e-02,  3.4812e-01, -6.1570e-01,
          1.9207e-01, -3.2909e-02,  2.7467e-02,  4.4888e-02, -2.8750e-01,
         -2.0472e-01, -4.0905e-01, -2.7716e-01,  4.8806e-01,  8.1851e-02,
          4.7934e-01, -2.5441e-01]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
91000 特征值优化 tensor(0.6305, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6054,  0.0472, -0.8693, -0.0840, -1.0146, -0.5326, -2.1675, -0.9074,
         -0.5388, -0.5519, -0.2869, -3.7053, -0.3150,  0.0843,  0.1327,  0.1614,
          0.0183, -0.2791,  0.1172,  0.1616, -0.2932, -0.0480,  0.2218,  0.0920,
          0.0874, -0.1780,  0.4056,  0.1436, -0.0782, -0.0521,  0.3423, -0.1713,
          0.1046, -0.0348, -0.0277,  0.0132,  0.1906,  0.1993,  0.4475,  0.2921,
          0.0151,  0.1812, -0.4789,  0.0888, -0.1872, -0.2871, -0.1304,  0.3227,
          0.3636, -0.0794,  0.3514,  0.0726, -0.5496,  0.4117,  0.2908,  0.2857,
         -0.7318, -0.1106,  0.3481, -0.6088,  0.1971, -0.0811, -0.0194,  0.0578,
         -0.2835, -0.2097, -0.4060, -0.2636,  0.4846,  0.1258,  0.4762, -0.2543]],
       device='cuda:0') tensor(0.2089, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
92000 特征值优化 tensor(0.6259, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.9373e-01,  3.2393e-02, -8.7848e-01, -7.8038e-02, -1.0116e+00,
         -5.4492e-01, -2.1561e+00, -9.0648e-01, -5.3213e-01, -5.5780e-01,
         -2.9867e-01, -3.7041e+00, -3.1585e-01,  8.4628e-02,  1.3917e-01,
          1.4635e-01,  2.2446e-03, -2.7878e-01,  1.1391e-01,  1.6408e-01,
         -2.9411e-01, -4.8024e-02,  2.0740e-01,  9.6415e-02,  7.6293e-02,
         -1.8694e-01,  4.3686e-01,  1.2376e-01, -7.9205e-02, -5.2226e-02,
          3.4319e-01, -1.6524e-01,  1.1929e-01, -4.1535e-02, -4.2683e-02,
          9.0737e-03,  1.9744e-01,  1.7236e-01,  4.4630e-01,  2.9058e-01,
          6.4065e-03,  1.8615e-01, -4.8502e-01,  9.0037e-02, -1.8915e-01,
         -2.7598e-01, -1.3594e-01,  3.2579e-01,  3.6472e-01, -8.0073e-02,
          3.4319e-01,  7.5130e-02, -5.7703e-01,  4.2686e-01,  2.8918e-01,
          2.9108e-01, -7.3235e-01, -1.1859e-01,  3.3836e-01, -6.2454e-01,
          2.0678e-01, -1.4059e-01, -4.8760e-02,  9.6829e-02, -3.0934e-01,
         -1.9297e-01, -4.1225e-01, -2.6512e-01,  4.9125e-01,  1.7819e-01,
          4.6472e-01, -2.5787e-01]], device='cuda:0') tensor(0.2099, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
93000 特征值优化 tensor(0.6277, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6127,  0.0439, -0.8652, -0.0907, -1.0019, -0.5225, -2.1518, -0.9151,
         -0.5156, -0.5646, -0.2687, -3.7052, -0.3161,  0.1189,  0.1446,  0.1373,
          0.0340, -0.2584,  0.1120,  0.1630, -0.2939, -0.0475,  0.2489,  0.0294,
          0.1391, -0.1615,  0.3825,  0.1810, -0.0799, -0.0520,  0.3465, -0.1561,
          0.1307, -0.0308, -0.0080,  0.0166,  0.1854,  0.2103,  0.4423,  0.2800,
          0.0230,  0.1867, -0.4754,  0.0890, -0.1902, -0.2825, -0.1341,  0.3188,
          0.3653, -0.0801,  0.3467,  0.0769, -0.5506,  0.4168,  0.2870,  0.2677,
         -0.7371, -0.0972,  0.3424, -0.6206,  0.2005, -0.0597,  0.0066,  0.0501,
         -0.2872, -0.2082, -0.4077, -0.2820,  0.4830,  0.1064,  0.4667, -0.2558]],
       device='cuda:0') tensor(0.2044, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
94000 特征值优化 tensor(0.6292, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6027,  0.0370, -0.8725, -0.0840, -1.0241, -0.5326, -2.1550, -0.9216,
         -0.5652, -0.5648, -0.2903, -3.7050, -0.3159,  0.0971,  0.1329,  0.1574,
          0.0180, -0.2761,  0.1183,  0.1641, -0.2935, -0.0480,  0.2177,  0.1036,
          0.0890, -0.1755,  0.4083,  0.1495, -0.0783, -0.0521,  0.3402, -0.1714,
          0.1026, -0.0356, -0.0387,  0.0109,  0.1871,  0.1968,  0.4540,  0.2960,
          0.0185,  0.1891, -0.4804,  0.0886, -0.1882, -0.2801, -0.1334,  0.3237,
          0.3647, -0.0801,  0.3506,  0.0736, -0.5597,  0.4148,  0.2885,  0.2838,
         -0.7307, -0.1110,  0.3374, -0.6233,  0.2070, -0.0918, -0.0246,  0.0614,
         -0.3003, -0.2060, -0.4169, -0.2731,  0.4831,  0.1326,  0.4606, -0.2616]],
       device='cuda:0') tensor(0.2047, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
95000 特征值优化 tensor(0.6318, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5992,  0.0540, -0.8748, -0.0879, -1.0085, -0.5309, -2.1457, -0.9076,
         -0.5610, -0.5750, -0.2942, -3.7075, -0.3156,  0.1016,  0.1414,  0.1356,
          0.0249, -0.2639,  0.1116,  0.1641, -0.2928, -0.0481,  0.2351,  0.0529,
          0.1112, -0.1684,  0.4014,  0.1721, -0.0794, -0.0522,  0.3468, -0.1563,
          0.1463, -0.0314, -0.0130,  0.0141,  0.1931,  0.1934,  0.4504,  0.2903,
          0.0183,  0.1967, -0.4823,  0.0893, -0.1890, -0.2872, -0.1314,  0.3241,
          0.3651, -0.0806,  0.3466,  0.0767, -0.5702,  0.4300,  0.2886,  0.2832,
         -0.7283, -0.1021,  0.3364, -0.6253,  0.2020, -0.1004, -0.0240,  0.0648,
         -0.2833, -0.2139, -0.4206, -0.2897,  0.4721,  0.1481,  0.4420, -0.2652]],
       device='cuda:0') tensor(0.2056, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
96000 特征值优化 tensor(6.5279, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.6758, -0.0398, -1.3961, -1.1781, -1.9034, -1.4774, -1.4476,  0.0902,
         -0.2682, -0.3220,  1.3101,  0.3812,  0.0615, -0.9610,  0.1899, -0.3174,
         -0.4175,  0.0237, -0.0842, -0.4472, -0.0616, -0.0083, -0.0599, -0.1870,
         -0.2429,  0.2936, -0.7567, -0.7321, -0.0664, -0.0781,  0.1367,  0.5964,
         -0.7952, -0.3046,  0.2814, -0.4758, -0.1930, -0.4872, -1.2097,  0.0366,
          0.2964, -0.0882, -0.3848, -0.4915, -0.0150, -0.1820, -0.0235, -0.6810,
         -0.6744,  0.1017, -0.2929, -0.6387,  0.1252,  1.3266, -0.8140, -0.2016,
          0.3913,  0.8879,  0.3289,  0.3156, -0.6275,  0.2999, -1.3701,  0.5465,
          0.7365,  0.2080,  0.1623,  0.0187, -0.8049,  0.2982,  0.3067,  0.2063]],
       device='cuda:0') tensor(0.2160, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
97000 特征值优化 tensor(0.9414, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 8.1958e-01, -7.1113e-02, -1.7792e+00, -2.6275e-01, -2.3484e+00,
         -1.6262e+00, -2.3223e+00,  1.2039e-01, -1.0899e+00, -4.6666e-01,
          6.0229e-01, -4.1663e-01,  1.0447e-01, -2.1179e-01,  8.0507e-02,
         -6.0481e-02, -1.9113e-02, -4.8191e-02, -1.5523e-01, -1.2310e-01,
         -1.1858e-01,  2.7714e-01, -6.7874e-02, -1.1799e-01,  8.1668e-02,
         -9.3836e-02, -8.9595e-02, -1.1803e-01, -8.7749e-02,  1.1300e-01,
          3.7877e-02,  4.8985e-01, -5.0718e-01, -1.8008e-01,  4.3150e-02,
         -1.2932e-01,  7.2813e-02, -1.6505e-01, -5.0027e-01, -3.5585e-02,
         -6.0661e-03,  1.2468e-01, -5.5956e-01, -2.1482e-01,  2.8066e-01,
          1.2218e-01, -7.7405e-02, -3.2846e-01, -4.4539e-01, -2.0403e-01,
         -1.2385e-01, -2.6753e-01, -1.5110e-01,  7.0822e-01, -9.0760e-01,
         -1.4853e-01,  1.6162e-01,  5.0589e-01,  2.9754e-01,  5.5358e-01,
         -7.9259e-01,  4.8647e-01, -1.1196e+00,  5.4520e-01,  1.0415e-01,
         -2.2789e-01, -4.4317e-04, -2.8241e-02, -8.2233e-01,  7.1511e-01,
         -2.6487e-03,  2.3487e-01]], device='cuda:0') tensor(0.2034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
98000 特征值优化 tensor(0.6713, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.4579, -0.1659, -1.7094, -0.1829, -2.3163, -1.3758, -2.6784, -0.2980,
         -1.1357, -0.7679,  0.3730, -0.4462,  0.1032, -0.1327,  0.1470, -0.0325,
          0.0074, -0.1059, -0.1581, -0.1293, -0.1159,  0.2603, -0.0960, -0.1153,
          0.0995, -0.1223, -0.0622, -0.0831, -0.0892,  0.0911,  0.0521,  0.5105,
         -0.3992, -0.1852,  0.0693, -0.1221,  0.0622,  0.0043, -0.4079, -0.0592,
          0.0110,  0.0477, -0.4804, -0.1115,  0.0889,  0.1008, -0.0570, -0.3278,
         -0.3902, -0.2243, -0.1221, -0.2479,  0.0103,  0.6035, -0.8871, -0.1413,
          0.2857,  0.3473,  0.4185,  0.4744, -0.9215,  0.5478, -1.2722,  0.4232,
         -0.0317, -0.1646, -0.2299, -0.0770, -0.6042,  0.6426,  0.0891,  0.2523]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
99000 特征值优化 tensor(0.6364, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.4047, -0.2246, -1.6898, -0.1876, -2.2320, -1.2924, -2.6947, -0.5076,
         -1.1211, -0.9316,  0.2884, -0.4331,  0.1031, -0.0891,  0.1350, -0.0291,
         -0.1390, -0.1423, -0.1798, -0.1117, -0.1206,  0.2560, -0.1163, -0.1545,
          0.1105, -0.1281, -0.0223, -0.0813, -0.0860,  0.0843,  0.0526,  0.5121,
         -0.3551, -0.1850,  0.0968, -0.0635,  0.0474,  0.0189, -0.3397, -0.0826,
          0.0200, -0.0176, -0.4783, -0.0588,  0.0254,  0.2024, -0.0955, -0.3363,
         -0.3981, -0.1975, -0.1120, -0.2556,  0.0590,  0.5533, -0.8119, -0.1077,
          0.2878,  0.3216,  0.5673,  0.3918, -1.1556,  0.6845, -1.2815,  0.4250,
         -0.1592, -0.1211, -0.2289, -0.1330, -0.5862,  0.6009,  0.2336,  0.1914]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
100000 特征值优化 tensor(0.6259, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3723, -0.1684, -1.6910, -0.2355, -2.1562, -1.2960, -2.7213, -0.7091,
         -1.0370, -0.8881,  0.2399, -0.3393,  0.1006, -0.0977,  0.1010, -0.0341,
         -0.2174, -0.1297, -0.1957, -0.0833, -0.1208,  0.2631, -0.0912, -0.1000,
          0.1080, -0.0914, -0.1125, -0.0658, -0.0848,  0.0817,  0.0514,  0.5536,
         -0.3317, -0.1837,  0.0762, -0.0846,  0.0364,  0.0288, -0.3007, -0.0644,
          0.0247, -0.0125, -0.4623, -0.0833,  0.0415,  0.2252, -0.1422, -0.3388,
         -0.3811, -0.2126, -0.1068, -0.2682,  0.0241,  0.5448, -0.8499, -0.1233,
          0.2466,  0.3417,  0.6264,  0.3245, -1.4060,  0.8436, -1.2928,  0.4350,
         -0.2180, -0.0680, -0.1997, -0.0990, -0.5883,  0.5682,  0.3065,  0.1645]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
101000 特征值优化 tensor(0.6234, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3784, -0.1791, -1.7263, -0.2607, -2.1352, -1.2916, -2.7535, -0.8272,
         -0.9933, -0.8816,  0.1874, -0.2727,  0.1007, -0.1019,  0.1100, -0.0216,
         -0.2348, -0.1165, -0.1869, -0.0792, -0.1209,  0.2703, -0.1134, -0.1197,
          0.1341, -0.0850, -0.0826, -0.0428, -0.0859,  0.0924,  0.0516,  0.5597,
         -0.3271, -0.1842,  0.0953, -0.0645,  0.0385,  0.0275, -0.2585, -0.0530,
          0.0213, -0.0169, -0.4640, -0.0830,  0.0420,  0.2333, -0.1459, -0.3394,
         -0.3994, -0.2198, -0.1116, -0.2702,  0.0513,  0.5243, -0.8455, -0.1292,
          0.2503,  0.3396,  0.6248,  0.3095, -1.6319,  0.9802, -1.3319,  0.4663,
         -0.1870, -0.0529, -0.1393, -0.0978, -0.5968,  0.5706,  0.2918,  0.1892]],
       device='cuda:0') tensor(0.2049, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
102000 特征值优化 tensor(0.6175, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3692, -0.1719, -1.7240, -0.2903, -2.1492, -1.2990, -2.7186, -0.8657,
         -0.9482, -0.8920,  0.1092, -0.2593,  0.1009, -0.0966,  0.0820, -0.0359,
         -0.2447, -0.1120, -0.2070, -0.0825, -0.1214,  0.2736, -0.1429, -0.1336,
          0.1611, -0.1077, -0.0589, -0.0161, -0.0857,  0.0930,  0.0538,  0.5698,
         -0.3725, -0.1834,  0.0627, -0.0978,  0.0454,  0.0137, -0.2569, -0.0440,
          0.0054, -0.0071, -0.4626, -0.0827,  0.0423,  0.2262, -0.1421, -0.3434,
         -0.3935, -0.2254, -0.1059, -0.2763,  0.0798,  0.5076, -0.8528, -0.1382,
          0.2442,  0.3433,  0.6044,  0.2919, -1.8963,  1.1227, -1.4054,  0.4801,
         -0.2240, -0.0251, -0.1462, -0.0777, -0.6073,  0.5584,  0.3378,  0.1619]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
103000 特征值优化 tensor(0.6188, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.7000e-01, -1.7407e-01, -1.7427e+00, -2.9897e-01, -2.2558e+00,
         -1.2953e+00, -2.5994e+00, -8.9643e-01, -9.3630e-01, -8.7600e-01,
          7.0548e-04, -2.6610e-01,  1.0058e-01, -9.3177e-02,  6.3981e-02,
         -2.7576e-02, -2.6204e-01, -1.1500e-01, -2.1478e-01, -8.0782e-02,
         -1.2066e-01,  2.7719e-01, -1.1070e-01, -1.2819e-01,  1.2339e-01,
         -1.0859e-01, -7.7169e-02, -3.2432e-02, -8.4890e-02,  9.7471e-02,
          5.7758e-02,  5.9384e-01, -3.7793e-01, -1.8383e-01,  6.3889e-02,
         -9.2800e-02,  4.2585e-02,  5.0090e-03, -2.4520e-01, -5.2728e-02,
         -2.8749e-03, -1.9546e-02, -4.6059e-01, -8.3866e-02,  4.2064e-02,
          2.2872e-01, -1.4398e-01, -3.4066e-01, -4.0203e-01, -2.3027e-01,
         -1.0820e-01, -2.7713e-01,  1.3939e-01,  4.9707e-01, -8.6992e-01,
         -1.5578e-01,  2.6350e-01,  3.3348e-01,  5.9302e-01,  2.8169e-01,
         -2.1895e+00,  1.2647e+00, -1.5043e+00,  4.9011e-01, -2.4407e-01,
         -1.7862e-02, -1.6506e-01, -8.3854e-02, -6.1544e-01,  5.3745e-01,
          3.4351e-01,  1.6310e-01]], device='cuda:0') tensor(0.2104, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
104000 特征值优化 tensor(0.6188, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.7992e-01, -2.0871e-01, -1.7457e+00, -2.8102e-01, -2.3525e+00,
         -1.3091e+00, -2.5184e+00, -9.1440e-01, -9.1783e-01, -8.6099e-01,
         -4.5714e-02, -2.9144e-01,  9.9973e-02, -9.6473e-02,  9.8250e-02,
         -1.4227e-02, -2.2082e-01, -1.4424e-01, -2.0117e-01, -8.1398e-02,
         -1.2097e-01,  2.7564e-01, -1.6227e-01, -4.9204e-02,  1.2773e-01,
         -8.2668e-02, -8.9516e-02, -5.1942e-02, -8.6652e-02,  9.8274e-02,
          5.7550e-02,  6.3904e-01, -3.7937e-01, -1.8415e-01,  8.3650e-02,
         -8.0500e-02,  4.2742e-02, -3.1854e-04, -2.4745e-01, -4.4968e-02,
         -6.9956e-03, -1.0678e-02, -4.6630e-01, -8.2406e-02,  4.3412e-02,
          2.4397e-01, -1.4235e-01, -3.3797e-01, -4.0416e-01, -2.2856e-01,
         -1.1754e-01, -2.7104e-01,  1.6202e-01,  5.1487e-01, -9.0307e-01,
         -1.8490e-01,  2.8066e-01,  3.2712e-01,  6.1355e-01,  3.0159e-01,
         -2.4667e+00,  1.4001e+00, -1.6299e+00,  5.3487e-01, -2.1132e-01,
         -2.7463e-02, -1.4546e-01, -8.5818e-02, -6.4994e-01,  5.4515e-01,
          3.0184e-01,  1.9032e-01]], device='cuda:0') tensor(0.2055, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
105000 特征值优化 tensor(0.6136, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3810, -0.1582, -1.7646, -0.2835, -2.4790, -1.3433, -2.5298, -0.9790,
         -0.9331, -0.8859, -0.0422, -0.2464,  0.1009, -0.0714,  0.1607, -0.0139,
         -0.2314, -0.1272, -0.1987, -0.0867, -0.1206,  0.2776, -0.1133, -0.0603,
          0.0904, -0.1231, -0.0684, -0.0477, -0.0881,  0.1025,  0.0560,  0.6849,
         -0.3734, -0.1836,  0.1138, -0.0055,  0.0565, -0.0229, -0.2280, -0.0560,
         -0.0324, -0.0293, -0.4669, -0.0818,  0.0432,  0.2159, -0.1356, -0.3341,
         -0.3929, -0.2424, -0.1232, -0.2735,  0.1977,  0.5284, -0.9626, -0.2326,
          0.2553,  0.3489,  0.5863,  0.3406, -2.7319,  1.5321, -1.7418,  0.5872,
         -0.1850, -0.0376, -0.1961, -0.0707, -0.7140,  0.5596,  0.2966,  0.1847]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
106000 特征值优化 tensor(0.6316, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3672, -0.1856, -1.7255, -0.2987, -2.5569, -1.3056, -2.4972, -0.9939,
         -0.9173, -0.8358, -0.1798, -0.2633,  0.1000, -0.0551,  0.1542, -0.0224,
         -0.2582, -0.1291, -0.1963, -0.0849, -0.1224,  0.2764, -0.1323, -0.0367,
          0.0887, -0.0940, -0.0687, -0.0942, -0.0844,  0.0946,  0.0593,  0.7299,
         -0.3840, -0.1842,  0.1104, -0.0444,  0.0651, -0.0338, -0.2299, -0.0526,
         -0.0508, -0.0207, -0.4621, -0.0724,  0.0372,  0.2258, -0.1355, -0.3452,
         -0.3897, -0.2310, -0.1015, -0.2808,  0.2005,  0.5437, -1.0343, -0.2585,
          0.2776,  0.3300,  0.5886,  0.3333, -2.9307,  1.6367, -1.8484,  0.6307,
         -0.1764, -0.0201, -0.1635, -0.0969, -0.7214,  0.5582,  0.2750,  0.1909]],
       device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
107000 特征值优化 tensor(0.6182, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3655, -0.2252, -1.7786, -0.3016, -2.5739, -1.3209, -2.4649, -1.0238,
         -0.8883, -0.8560, -0.2283, -0.2643,  0.0988, -0.0436,  0.1467, -0.0398,
         -0.2622, -0.1403, -0.1963, -0.0885, -0.1231,  0.2815, -0.1622, -0.0368,
          0.1448, -0.0773, -0.1011, -0.0369, -0.0852,  0.1031,  0.0600,  0.7522,
         -0.3972, -0.1834,  0.0757, -0.0845,  0.0606, -0.0361, -0.2345, -0.0526,
         -0.0611, -0.0214, -0.4617, -0.0821,  0.0396,  0.2420, -0.1350, -0.3310,
         -0.3899, -0.2492, -0.1163, -0.2835,  0.2028,  0.5531, -1.0583, -0.2838,
          0.2839,  0.3286,  0.5878,  0.2900, -3.1016,  1.7292, -1.9288,  0.6478,
         -0.2355, -0.0126, -0.1619, -0.0896, -0.7748,  0.5534,  0.3104,  0.1762]],
       device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
108000 特征值优化 tensor(0.6159, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.6299e-01, -2.2286e-01, -1.7737e+00, -3.0000e-01, -2.5570e+00,
         -1.2969e+00, -2.4382e+00, -1.0751e+00, -8.2177e-01, -8.4621e-01,
         -3.4426e-01, -2.4244e-01,  9.9196e-02, -4.5496e-02,  1.6895e-01,
         -2.5054e-02, -2.5845e-01, -1.4758e-01, -1.8867e-01, -8.9260e-02,
         -1.2340e-01,  2.8131e-01, -1.6928e-01, -7.9266e-02,  1.0181e-01,
         -9.6166e-02, -1.1161e-01, -4.5259e-02, -8.5222e-02,  1.0131e-01,
          5.6658e-02,  7.7153e-01, -4.0147e-01, -1.8322e-01,  7.3859e-02,
         -8.6510e-02,  1.1262e-01, -5.5252e-02, -2.0528e-01, -5.0019e-02,
         -1.0999e-01, -2.7250e-02, -4.6175e-01, -7.6977e-02,  3.3850e-02,
          2.4109e-01, -1.3531e-01, -3.3233e-01, -3.8367e-01, -2.5116e-01,
         -1.1758e-01, -2.8412e-01,  1.8454e-01,  5.5294e-01, -1.0682e+00,
         -2.8309e-01,  2.6400e-01,  3.3335e-01,  6.0225e-01,  2.9938e-01,
         -3.2042e+00,  1.8358e+00, -1.9676e+00,  6.7786e-01, -2.2767e-01,
          2.5898e-03, -1.5318e-01, -8.3399e-02, -7.9391e-01,  5.3040e-01,
          3.1311e-01,  1.8000e-01]], device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
109000 特征值优化 tensor(0.6142, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3642, -0.1831, -1.7575, -0.3216, -2.5313, -1.3064, -2.4037, -1.0270,
         -0.8250, -0.8639, -0.3744, -0.2515,  0.0999, -0.0576,  0.1398, -0.0099,
         -0.2493, -0.1331, -0.2286, -0.0844, -0.1231,  0.2818, -0.1503, -0.0163,
          0.0990, -0.1075, -0.0378, -0.0817, -0.0872,  0.1032,  0.0568,  0.7707,
         -0.3870, -0.1835,  0.1123, -0.0148,  0.1318, -0.0567, -0.2007, -0.0438,
         -0.1174, -0.0211, -0.4634, -0.0762,  0.0334,  0.2293, -0.1434, -0.3434,
         -0.3921, -0.2497, -0.1105, -0.2783,  0.1970,  0.5406, -1.0664, -0.2798,
          0.2787,  0.3271,  0.5617,  0.3457, -3.3152,  1.9025, -2.0288,  0.7134,
         -0.2222,  0.0163, -0.1347, -0.0796, -0.7952,  0.5416,  0.3163,  0.1825]],
       device='cuda:0') tensor(0.2059, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
110000 特征值优化 tensor(0.6086, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.6613e-01, -1.7780e-01, -1.7400e+00, -3.1617e-01, -2.5277e+00,
         -1.2964e+00, -2.3678e+00, -9.6759e-01, -8.1971e-01, -8.6127e-01,
         -3.6584e-01, -2.9106e-01,  9.9862e-02, -7.7689e-02,  9.6668e-02,
         -1.4115e-03, -2.7647e-01, -1.1521e-01, -2.3446e-01, -8.3903e-02,
         -1.2289e-01,  2.7993e-01, -1.7311e-01,  9.5681e-03,  5.8792e-02,
         -1.0955e-01, -7.1991e-02, -8.8442e-02, -8.5915e-02,  9.9958e-02,
          5.8804e-02,  7.6898e-01, -3.7312e-01, -1.8449e-01,  1.3132e-01,
          2.0498e-02,  1.4553e-01, -5.9094e-02, -2.3295e-01, -2.7954e-02,
         -1.2797e-01,  4.6977e-03, -4.6367e-01, -7.9510e-02,  3.6681e-02,
          2.2591e-01, -1.4164e-01, -3.4788e-01, -3.8677e-01, -2.4731e-01,
         -1.0823e-01, -2.7964e-01,  2.1885e-01,  5.2441e-01, -1.0520e+00,
         -2.6989e-01,  2.8017e-01,  3.2611e-01,  6.1154e-01,  2.4925e-01,
         -3.4215e+00,  1.9564e+00, -2.0984e+00,  7.4642e-01, -2.1041e-01,
          1.2860e-02, -1.5093e-01, -8.0578e-02, -8.1886e-01,  5.5154e-01,
          2.9312e-01,  1.8577e-01]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
111000 特征值优化 tensor(0.6110, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.6518e-01, -1.7562e-01, -1.7350e+00, -2.9812e-01, -2.4860e+00,
         -1.3015e+00, -2.3842e+00, -9.7114e-01, -8.6733e-01, -8.7051e-01,
         -3.6723e-01, -2.8002e-01,  9.9884e-02, -7.9047e-02,  1.1903e-01,
          1.5449e-03, -2.5093e-01, -1.4127e-01, -2.2950e-01, -8.4661e-02,
         -1.2266e-01,  2.7785e-01, -1.7043e-01, -2.1172e-02,  3.4630e-02,
         -1.3090e-01, -8.4583e-02, -6.9597e-02, -8.6915e-02,  9.7942e-02,
          5.7473e-02,  7.6572e-01, -3.7597e-01, -1.8357e-01,  1.2680e-01,
          8.6739e-03,  1.4215e-01, -5.9182e-02, -2.1907e-01, -4.7919e-02,
         -1.2360e-01, -2.1017e-02, -4.6368e-01, -7.6343e-02,  3.3962e-02,
          2.2402e-01, -1.4115e-01, -3.4603e-01, -3.9532e-01, -2.3442e-01,
         -1.1351e-01, -2.7535e-01,  2.1020e-01,  5.1786e-01, -1.0546e+00,
         -2.7114e-01,  2.9426e-01,  3.1808e-01,  6.1051e-01,  2.5374e-01,
         -3.5030e+00,  1.9985e+00, -2.1437e+00,  7.6810e-01, -2.2070e-01,
          2.3532e-03, -1.4715e-01, -8.7750e-02, -8.4368e-01,  5.6348e-01,
          2.9278e-01,  1.8895e-01]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
112000 特征值优化 tensor(0.6100, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.7629e-01, -1.8599e-01, -1.7413e+00, -2.8213e-01, -2.4685e+00,
         -1.2997e+00, -2.4220e+00, -9.9172e-01, -8.6792e-01, -8.3186e-01,
         -3.5458e-01, -2.9305e-01,  9.9880e-02, -7.9243e-02,  1.1567e-01,
          3.5302e-03, -2.5428e-01, -1.3787e-01, -2.2941e-01, -8.6694e-02,
         -1.2302e-01,  2.7444e-01, -1.6258e-01, -8.5391e-03,  3.8790e-02,
         -1.3771e-01, -9.3210e-02, -8.2124e-02, -8.6612e-02,  9.6739e-02,
          5.8433e-02,  7.6418e-01, -3.7493e-01, -1.8383e-01,  1.3058e-01,
          1.7171e-02,  1.3348e-01, -6.3360e-02, -2.2781e-01, -4.4585e-02,
         -1.2490e-01, -1.6024e-02, -4.6954e-01, -7.3304e-02,  3.0226e-02,
          2.2621e-01, -1.3817e-01, -3.3692e-01, -3.9658e-01, -2.2715e-01,
         -1.1872e-01, -2.7470e-01,  2.1486e-01,  5.0969e-01, -1.0622e+00,
         -2.7707e-01,  3.0184e-01,  3.1478e-01,  6.2043e-01,  2.5269e-01,
         -3.5749e+00,  2.0284e+00, -2.1801e+00,  7.7653e-01, -2.4429e-01,
          1.3083e-02, -1.5734e-01, -1.0574e-01, -8.7439e-01,  5.6429e-01,
          3.0203e-01,  1.7700e-01]], device='cuda:0') tensor(0.2053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
113000 特征值优化 tensor(0.6117, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.7089e-01, -2.4409e-01, -1.8252e+00, -3.4598e-01, -2.4422e+00,
         -1.2996e+00, -2.4661e+00, -1.0848e+00, -8.8461e-01, -8.3310e-01,
         -3.7536e-01, -2.4217e-01,  9.9552e-02, -7.0540e-02,  1.8700e-01,
          1.7578e-02, -2.5420e-01, -1.5181e-01, -1.7681e-01, -8.9288e-02,
         -1.2298e-01,  2.9335e-01, -1.8000e-01, -3.9086e-02,  1.0709e-01,
         -1.2990e-01, -9.3981e-02, -3.2343e-02, -8.6596e-02,  1.1431e-01,
          5.9386e-02,  7.6524e-01, -3.6422e-01, -1.8271e-01,  9.1322e-02,
         -3.4329e-02,  1.2476e-01, -6.0970e-02, -2.0816e-01, -5.2745e-02,
         -1.2598e-01, -3.7710e-02, -4.6807e-01, -8.3892e-02,  4.1375e-02,
          2.5211e-01, -1.3578e-01, -3.3075e-01, -3.8633e-01, -2.7091e-01,
         -1.2557e-01, -2.9447e-01,  2.1944e-01,  5.0142e-01, -1.0540e+00,
         -2.7441e-01,  2.6360e-01,  3.3466e-01,  6.0613e-01,  3.2411e-01,
         -3.6352e+00,  2.0741e+00, -2.1902e+00,  7.8777e-01, -2.7618e-01,
         -6.2003e-04, -1.6902e-01, -1.0120e-01, -8.9397e-01,  5.6793e-01,
          3.6746e-01,  1.5985e-01]], device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
114000 特征值优化 tensor(0.6137, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.6446e-01, -1.7607e-01, -1.7814e+00, -3.1216e-01, -2.4723e+00,
         -1.2976e+00, -2.4949e+00, -1.0629e+00, -8.7743e-01, -8.5934e-01,
         -3.6132e-01, -2.7205e-01,  1.0000e-01, -6.1874e-02,  9.2192e-02,
         -1.8022e-02, -2.7333e-01, -1.1892e-01, -2.3412e-01, -8.3575e-02,
         -1.2293e-01,  2.8349e-01, -1.4546e-01,  2.6439e-03,  9.5615e-02,
         -1.3681e-01, -5.3049e-02, -6.7337e-02, -8.6739e-02,  1.0599e-01,
          5.9215e-02,  7.8616e-01, -3.8479e-01, -1.8398e-01,  1.4391e-01,
          3.7790e-02,  1.2704e-01, -6.8973e-02, -2.2854e-01, -4.6148e-02,
         -1.2957e-01, -1.5886e-02, -4.6193e-01, -7.2303e-02,  2.9628e-02,
          2.2479e-01, -1.4218e-01, -3.3460e-01, -3.7626e-01, -2.6792e-01,
         -1.2015e-01, -2.8186e-01,  2.0317e-01,  5.1606e-01, -1.0808e+00,
         -2.8338e-01,  2.8687e-01,  3.2191e-01,  6.1646e-01,  2.5006e-01,
         -3.6964e+00,  2.0954e+00, -2.2176e+00,  8.0163e-01, -2.2294e-01,
          1.6919e-04, -1.4878e-01, -9.0862e-02, -9.0421e-01,  5.7243e-01,
          2.8853e-01,  1.8636e-01]], device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
115000 特征值优化 tensor(0.6119, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.7157e-01, -1.7321e-01, -1.8119e+00, -3.4286e-01, -2.4616e+00,
         -1.2989e+00, -2.5340e+00, -1.0400e+00, -8.5495e-01, -8.4276e-01,
         -3.4578e-01, -2.6300e-01,  9.9475e-02, -7.3328e-02,  9.9347e-02,
          2.1998e-03, -2.6851e-01, -1.0621e-01, -2.3716e-01, -9.0927e-02,
         -1.2334e-01,  2.9104e-01, -1.6079e-01, -1.2899e-03,  9.6638e-02,
         -1.4605e-01, -5.9610e-02, -6.7497e-02, -8.7145e-02,  1.1424e-01,
          5.9953e-02,  7.8376e-01, -3.7769e-01, -1.8371e-01,  1.4382e-01,
          4.2486e-02,  1.3228e-01, -7.7689e-02, -2.1819e-01, -4.3057e-02,
         -1.4003e-01, -1.6015e-02, -4.6725e-01, -7.6441e-02,  3.3422e-02,
          2.1448e-01, -1.3330e-01, -3.3503e-01, -3.8290e-01, -2.7655e-01,
         -1.2289e-01, -2.8859e-01,  2.1428e-01,  5.0539e-01, -1.0892e+00,
         -2.8846e-01,  2.8769e-01,  3.2170e-01,  6.1195e-01,  2.4387e-01,
         -3.7550e+00,  2.1164e+00, -2.2550e+00,  8.2330e-01, -2.2626e-01,
          8.4169e-03, -1.4784e-01, -8.5611e-02, -9.2293e-01,  5.8841e-01,
          2.9616e-01,  1.8769e-01]], device='cuda:0') tensor(0.2033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
116000 特征值优化 tensor(0.6089, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.6423e-01, -1.7340e-01, -1.7658e+00, -2.9936e-01, -2.4576e+00,
         -1.3008e+00, -2.5932e+00, -1.0541e+00, -8.6151e-01, -8.4028e-01,
         -3.4493e-01, -2.7838e-01,  1.0033e-01, -9.5522e-02,  8.9895e-02,
          1.5376e-02, -2.7474e-01, -1.1444e-01, -2.3166e-01, -8.5525e-02,
         -1.2327e-01,  2.8077e-01, -1.9081e-01,  1.1093e-02,  2.9810e-02,
         -1.4026e-01, -8.5924e-02, -8.0753e-02, -8.7956e-02,  1.0446e-01,
          5.9247e-02,  7.9815e-01, -3.8381e-01, -1.8350e-01,  1.3996e-01,
          3.9567e-02,  1.2880e-01, -7.0108e-02, -2.3548e-01, -3.2872e-02,
         -1.3027e-01, -2.4140e-03, -4.6443e-01, -6.8839e-02,  2.6513e-02,
          2.2204e-01, -1.3957e-01, -3.3716e-01, -3.7236e-01, -2.6474e-01,
         -1.2595e-01, -2.7742e-01,  2.0019e-01,  5.1413e-01, -1.0955e+00,
         -2.9003e-01,  2.9958e-01,  3.1632e-01,  6.2377e-01,  2.4702e-01,
         -3.7952e+00,  2.1658e+00, -2.2828e+00,  8.3737e-01, -2.4513e-01,
          1.2109e-02, -1.3647e-01, -9.4183e-02, -9.3473e-01,  5.9245e-01,
          2.9772e-01,  1.8645e-01]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
117000 特征值优化 tensor(0.6120, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3755, -0.1786, -1.7870, -0.3002, -2.4441, -1.2896, -2.7177, -1.0819,
         -0.8593, -0.8219, -0.3315, -0.2672,  0.0996, -0.0585,  0.1165, -0.0072,
         -0.2620, -0.1124, -0.2315, -0.0898, -0.1233,  0.2825, -0.1449, -0.0171,
          0.1043, -0.0973, -0.0809, -0.0862, -0.0861,  0.1046,  0.0611,  0.8120,
         -0.3745, -0.1845,  0.1290,  0.0107,  0.1421, -0.0690, -0.2494, -0.0275,
         -0.1348,  0.0053, -0.4676, -0.0720,  0.0285,  0.2182, -0.1348, -0.3290,
         -0.3846, -0.2553, -0.1234, -0.2835,  0.1985,  0.5068, -1.1127, -0.2937,
          0.2975,  0.3165,  0.6221,  0.2384, -3.8237,  2.2223, -2.2980,  0.8690,
         -0.2461,  0.0042, -0.1544, -0.0894, -0.9603,  0.6067,  0.2908,  0.1860]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
118000 特征值优化 tensor(0.6097, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3633, -0.1728, -1.7702, -0.3016, -2.4486, -1.2978, -2.7323, -1.1293,
         -0.8783, -0.8666, -0.3499, -0.2537,  0.1000, -0.0647,  0.0980, -0.0187,
         -0.2661, -0.1179, -0.2446, -0.0868, -0.1233,  0.2807, -0.1640,  0.0103,
          0.0906, -0.1198, -0.0559, -0.0726, -0.0876,  0.1044,  0.0611,  0.8206,
         -0.3823, -0.1843,  0.1336,  0.0232,  0.1358, -0.0674, -0.2422, -0.0249,
         -0.1306,  0.0046, -0.4634, -0.0753,  0.0318,  0.2191, -0.1383, -0.3358,
         -0.3738, -0.2651, -0.1238, -0.2777,  0.1960,  0.5102, -1.1174, -0.2975,
          0.2967,  0.3179,  0.6294,  0.2423, -3.8950,  2.2623, -2.3211,  0.8835,
         -0.2301,  0.0091, -0.1248, -0.0911, -0.9736,  0.6105,  0.2850,  0.1890]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
119000 特征值优化 tensor(0.6179, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3657, -0.2125, -1.7755, -0.3086, -2.4322, -1.2902, -2.7279, -1.1695,
         -0.8687, -0.8057, -0.3654, -0.2519,  0.1012, -0.0625,  0.1530, -0.0216,
         -0.2467, -0.1510, -0.2043, -0.0816, -0.1223,  0.2818, -0.1801, -0.0087,
          0.0859, -0.1367, -0.0568, -0.0735, -0.0870,  0.1038,  0.0604,  0.8216,
         -0.3802, -0.1835,  0.1155, -0.0194,  0.1348, -0.0644, -0.2041, -0.0494,
         -0.1281, -0.0287, -0.4609, -0.0818,  0.0315,  0.2483, -0.1505, -0.3351,
         -0.3817, -0.2554, -0.1178, -0.2830,  0.1950,  0.5078, -1.1072, -0.2890,
          0.2750,  0.3264,  0.6241,  0.2516, -3.9458,  2.2964, -2.3276,  0.8930,
         -0.2620,  0.0191, -0.1080, -0.1101, -0.9814,  0.6117,  0.3423,  0.1772]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
120000 特征值优化 tensor(0.6153, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.6848e-01, -1.9625e-01, -1.7526e+00, -2.9253e-01, -2.4122e+00,
         -1.2961e+00, -2.7443e+00, -1.1218e+00, -8.7615e-01, -8.2373e-01,
         -3.6479e-01, -2.4237e-01,  9.9744e-02, -7.2487e-02,  1.4248e-01,
          1.5965e-03, -2.4833e-01, -1.5209e-01, -2.0181e-01, -8.2713e-02,
         -1.2266e-01,  2.7866e-01, -1.7703e-01,  5.4551e-03,  4.6949e-02,
         -1.2651e-01, -8.1742e-02, -6.2524e-02, -8.5654e-02,  9.8632e-02,
          5.9686e-02,  8.1705e-01, -3.9311e-01, -1.8360e-01,  1.1665e-01,
         -1.6254e-02,  1.2454e-01, -7.1532e-02, -2.0267e-01, -4.9259e-02,
         -1.3015e-01, -2.9071e-02, -4.6373e-01, -7.6900e-02,  3.4174e-02,
          2.3691e-01, -1.4429e-01, -3.3722e-01, -3.9152e-01, -2.3747e-01,
         -1.1658e-01, -2.8021e-01,  1.8320e-01,  5.0719e-01, -1.1122e+00,
         -2.9302e-01,  2.8951e-01,  3.2010e-01,  6.2630e-01,  2.3886e-01,
         -3.9972e+00,  2.3026e+00, -2.3782e+00,  8.9500e-01, -2.5872e-01,
          1.0625e-02, -1.0953e-01, -9.7915e-02, -9.8713e-01,  6.1554e-01,
          3.3355e-01,  1.8780e-01]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
121000 特征值优化 tensor(0.6099, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.7292e-01, -1.7461e-01, -1.7400e+00, -2.8327e-01, -2.3914e+00,
         -1.2911e+00, -2.8080e+00, -1.1071e+00, -9.2053e-01, -8.1429e-01,
         -3.5279e-01, -2.4747e-01,  1.0026e-01, -8.2584e-02,  9.0881e-02,
          5.6464e-03, -2.7065e-01, -1.1429e-01, -2.3533e-01, -9.2164e-02,
         -1.2404e-01,  2.7555e-01, -1.8191e-01, -3.4858e-02,  2.7864e-02,
         -1.3140e-01, -1.1587e-01, -7.2872e-02, -8.6741e-02,  9.6954e-02,
          6.0938e-02,  8.1141e-01, -3.8458e-01, -1.8397e-01,  1.3398e-01,
          2.3374e-02,  1.2159e-01, -8.6047e-02, -2.4816e-01, -2.9861e-02,
         -1.4327e-01,  2.4253e-04, -4.6878e-01, -6.1259e-02,  1.8645e-02,
          2.1341e-01, -1.3179e-01, -3.3858e-01, -3.9369e-01, -2.2938e-01,
         -1.2196e-01, -2.7552e-01,  1.9108e-01,  4.9852e-01, -1.1181e+00,
         -2.9784e-01,  2.9909e-01,  3.1479e-01,  6.2777e-01,  2.4763e-01,
         -4.0442e+00,  2.3074e+00, -2.4083e+00,  9.0560e-01, -2.2470e-01,
         -8.9273e-03, -1.5701e-01, -8.2721e-02, -9.9897e-01,  6.2143e-01,
          2.7345e-01,  1.9953e-01]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
122000 特征值优化 tensor(11.9434, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2788e+00,  1.9982e-01, -4.3150e-01,  2.9538e-01, -1.5034e+00,
          5.6993e-01, -3.8323e-01,  8.8553e-02, -2.6867e+00, -5.2197e-01,
          8.3402e-01,  5.1827e-01,  2.1415e-01,  3.8390e-01,  5.1686e-01,
          1.4371e-04,  1.1409e-01, -1.1679e+00, -8.2348e-01,  5.3643e-03,
          2.5211e-01,  2.6717e-01,  1.6404e+00,  1.1871e+00, -1.2942e-01,
         -1.7642e-02,  5.1831e-02, -7.5013e-02,  4.9674e-01, -1.6412e+00,
         -5.8029e-02, -3.7581e-01, -9.5439e-02,  1.1221e-01, -2.2451e-01,
          1.3339e-01,  3.0604e-03, -5.4993e-01,  1.7281e+00,  3.7885e-01,
         -6.3132e-01,  1.1054e+00,  7.6234e-01, -4.2439e-01, -4.5955e-01,
          1.0084e+00, -3.9360e-01,  5.7519e-01,  6.8122e-04, -5.9202e-01,
          3.4438e-01,  4.6191e-01,  6.8597e-01,  6.2078e-01, -6.2473e-01,
          1.2428e+00,  1.9885e-01,  2.5569e-01,  1.9513e-01,  1.5675e+00,
          1.2168e+00, -9.7426e-01,  1.9475e-01, -2.8092e-01, -3.9993e-01,
         -2.5768e-01, -3.3801e-01, -3.8113e-01,  1.2465e+00,  1.4326e+00,
          1.0122e+00, -8.0005e-01]], device='cuda:0') tensor(0.2953, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
123000 特征值优化 tensor(1.1166, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9051e+00, -2.0445e-01, -1.4035e+00, -2.5579e-01, -1.3011e+00,
         -4.1062e-01, -1.1474e+00, -1.0010e-01, -3.4208e+00, -7.9578e-01,
         -2.0766e-01, -5.3431e-01, -5.3239e-03,  1.9144e-01,  2.0153e-01,
          1.1729e-01, -8.9457e-02, -2.7364e-01, -7.1278e-02, -6.2835e-02,
         -1.4027e-02,  8.0166e-03,  4.8139e-01,  2.1379e-01, -1.3972e-01,
          1.0745e-02,  5.2192e-02, -5.5773e-02, -9.3231e-04, -8.4883e-01,
         -1.8495e-01, -8.1351e-02,  7.2285e-03, -3.0754e-02, -6.8748e-02,
          2.0701e-03, -1.0399e-01, -2.3833e-03,  1.1505e+00,  3.0808e-01,
         -8.6898e-02,  4.2374e-01,  1.9999e-01,  2.9303e-02,  5.6569e-03,
          4.0802e-01,  1.9286e-02, -3.1612e-01, -2.6212e-01, -8.6433e-01,
          1.1859e-01, -1.4709e-02,  3.3114e-01,  3.0158e-01, -6.5347e-02,
          2.6867e-01, -4.7504e-01,  2.3767e-01,  1.3899e-01,  6.5903e-01,
          4.6304e-01, -2.8072e-01,  1.1100e-01,  3.2783e-02, -8.9808e-01,
         -6.8262e-01, -2.0473e-01, -2.7663e-01,  2.4899e-01,  3.7070e-01,
         -4.4714e-02, -1.9165e-01]], device='cuda:0') tensor(0.2047, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
124000 特征值优化 tensor(0.7759, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6856e+00,  7.8386e-03, -1.4359e+00, -6.2125e-01, -1.2018e+00,
         -4.7967e-01, -1.2477e+00, -1.3012e-02, -3.5928e+00, -4.2848e-01,
         -2.4929e-01, -5.4045e-01, -6.2757e-03,  1.0179e-01,  2.8477e-01,
          1.7963e-01, -4.9729e-02, -1.1595e-01, -2.2062e-01, -7.1531e-02,
         -1.0329e-02, -1.4846e-01,  2.9240e-01,  7.7348e-02, -1.2881e-01,
          8.1385e-03,  2.5037e-03, -7.0410e-02, -3.7462e-02, -7.7757e-01,
         -1.8973e-01, -1.2941e-01, -4.3721e-02, -1.8242e-02, -5.0173e-02,
          1.0968e-01, -1.4002e-01, -1.9268e-02,  1.0529e+00,  2.6949e-01,
          4.1057e-03,  3.9720e-01, -2.6590e-02,  1.3851e-01,  1.3696e-01,
          3.2216e-01,  2.6634e-02, -4.2813e-01, -1.2315e-01, -8.3569e-01,
          3.3826e-02, -1.8597e-01,  7.1655e-01,  9.4845e-02, -1.0806e-01,
          1.1643e-01, -4.2228e-01,  1.4224e-01,  1.9308e-01,  6.1722e-01,
          4.0378e-01, -6.5418e-02,  4.1947e-01,  3.3100e-02, -7.4732e-01,
         -6.9045e-01, -4.2445e-01, -2.0531e-01,  2.4431e-01,  3.0176e-01,
         -2.1193e-01, -1.3307e-01]], device='cuda:0') tensor(0.2030, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
125000 特征值优化 tensor(0.7485, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7069,  0.0060, -1.3470, -0.8131, -1.3449, -0.4766, -1.1893,  0.1158,
         -3.6286, -0.3108, -0.2554, -0.3789, -0.0053,  0.1113,  0.3540,  0.1691,
         -0.0123, -0.0797, -0.2375, -0.0714, -0.0084, -0.2169,  0.2841,  0.1138,
         -0.1683, -0.0344, -0.0154, -0.0931, -0.0297, -0.7713, -0.1890, -0.1417,
         -0.0481, -0.0185, -0.0409,  0.1283, -0.1363,  0.0060,  0.9887,  0.2302,
          0.0088,  0.3584, -0.0139,  0.1260,  0.1352,  0.3196,  0.0275, -0.5044,
         -0.0976, -0.8301,  0.0292, -0.2730,  0.7828,  0.0964, -0.1022,  0.0866,
         -0.3900,  0.1271,  0.1976,  0.6365,  0.3827, -0.0075,  0.3970,  0.0757,
         -0.5626, -0.6589, -0.3566, -0.1569,  0.2793,  0.2493, -0.3060, -0.1041]],
       device='cuda:0') tensor(0.2030, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
126000 特征值优化 tensor(0.7054, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6989,  0.0809, -1.2252, -0.8192, -1.2958, -0.4425, -1.2449,  0.1948,
         -3.5279, -0.3902, -0.2993, -0.0567, -0.0074, -0.0259,  0.4193,  0.0243,
         -0.0800,  0.0568, -0.2415,  0.0083, -0.0112, -0.2186,  0.2906,  0.0604,
         -0.0587,  0.0615,  0.0107, -0.1245, -0.0303, -0.7493, -0.1902, -0.1281,
         -0.0314, -0.0184, -0.0230,  0.1093, -0.1136,  0.0053,  0.9382,  0.0907,
          0.0035,  0.3070,  0.0387,  0.1065,  0.1067,  0.3059,  0.0243, -0.5100,
         -0.0710, -0.7894,  0.0465, -0.2753,  0.8467,  0.0426, -0.0250,  0.0045,
         -0.3240,  0.0886,  0.1080,  0.5961,  0.3153,  0.0467,  0.4013,  0.0858,
         -0.4723, -0.5638, -0.2781, -0.1095,  0.3152,  0.1933, -0.4782, -0.0608]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
127000 特征值优化 tensor(0.6888, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7572,  0.1383, -1.1101, -0.6723, -1.2998, -0.4838, -1.1793,  0.2501,
         -3.3753, -0.3992, -0.3639,  0.1753, -0.0052, -0.0648,  0.4239, -0.0166,
         -0.0455,  0.0058, -0.1835,  0.0303, -0.0098, -0.1811,  0.3097,  0.0630,
         -0.0342,  0.0561,  0.0708, -0.0546, -0.0275, -0.7175, -0.1887, -0.1214,
         -0.0204, -0.0187,  0.0071,  0.1047, -0.0830,  0.0259,  0.8290,  0.0240,
         -0.0281,  0.2813,  0.0623,  0.1099,  0.1097,  0.2641,  0.0339, -0.5048,
         -0.0512, -0.7559,  0.0423, -0.2396,  0.8917,  0.0236, -0.0061, -0.0105,
         -0.2688,  0.0670,  0.1144,  0.6102,  0.2242,  0.1092,  0.3577,  0.1228,
         -0.2955, -0.4938, -0.1005, -0.0067,  0.3659,  0.1462, -0.5870, -0.0087]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
128000 特征值优化 tensor(0.6808, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7801,  0.1248, -0.9488, -0.5454, -1.3172, -0.5447, -1.1414,  0.2417,
         -3.1336, -0.3263, -0.3889,  0.2340, -0.0040, -0.0477,  0.4178, -0.0715,
         -0.0620,  0.0386, -0.1941,  0.0437, -0.0079, -0.1389,  0.1968,  0.1460,
         -0.1214, -0.0258,  0.0060, -0.1342, -0.0376, -0.6700, -0.1909, -0.1155,
         -0.0288, -0.0192, -0.0469,  0.1160, -0.0619,  0.0352,  0.7500,  0.0413,
         -0.0510,  0.2836,  0.0641,  0.1073,  0.1074,  0.2546,  0.0347, -0.5047,
         -0.0377, -0.6834,  0.0432, -0.1975,  0.9008,  0.0175,  0.0982, -0.0375,
         -0.2492,  0.0732,  0.1325,  0.6038,  0.1969,  0.1169,  0.3508,  0.1276,
         -0.2641, -0.4186,  0.0100, -0.1085,  0.3778,  0.1470, -0.5638, -0.0315]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
129000 特征值优化 tensor(0.6859, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7749e+00,  1.3448e-01, -8.1804e-01, -4.3653e-01, -1.2765e+00,
         -5.3726e-01, -1.1247e+00,  2.3514e-01, -2.6065e+00, -2.5515e-01,
         -4.3474e-01,  2.4669e-01, -5.1856e-03, -5.3890e-02,  4.1073e-01,
         -6.3653e-02, -5.1932e-02,  3.6504e-02, -2.0668e-01,  3.5594e-02,
         -9.4386e-03, -1.1086e-01,  2.6146e-01,  5.5871e-02, -4.7760e-02,
          8.4725e-03,  3.9838e-02, -9.4218e-02, -3.9326e-02, -6.3476e-01,
         -1.9120e-01, -1.0735e-01, -2.9198e-02, -1.7718e-02, -2.2112e-02,
          1.0845e-01, -7.1325e-02,  3.3813e-02,  6.3405e-01, -1.2763e-02,
         -4.4030e-02,  2.8645e-01,  6.3844e-02,  1.1126e-01,  1.1134e-01,
          2.6717e-01,  3.3620e-02, -5.0228e-01, -2.0368e-02, -6.3210e-01,
          4.1564e-02, -1.6759e-01,  8.9752e-01,  8.9062e-03,  1.2686e-02,
          1.0884e-02, -2.4117e-01,  6.4684e-02,  1.5357e-02,  5.2609e-01,
          1.9143e-01,  1.1631e-01,  3.6580e-01,  1.1869e-01, -2.8259e-01,
         -3.2833e-01,  4.4148e-02, -1.8192e-02,  3.8884e-01,  1.5455e-01,
         -5.8420e-01, -1.4549e-03]], device='cuda:0') tensor(0.2109, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
130000 特征值优化 tensor(0.6672, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7773e+00,  1.2702e-01, -7.3605e-01, -2.8646e-01, -1.2603e+00,
         -5.6905e-01, -1.1348e+00,  2.3150e-01, -2.2470e+00, -1.6948e-01,
         -4.4698e-01,  2.3418e-01, -5.3073e-03, -6.3228e-02,  4.0383e-01,
         -5.8375e-02, -5.0762e-02, -7.4463e-04, -2.2213e-01,  3.2367e-02,
         -9.6237e-03, -8.4269e-02,  2.5203e-01,  4.1145e-02, -8.6320e-02,
         -4.5936e-02,  3.3784e-02, -6.6357e-02, -4.1124e-02, -6.2285e-01,
         -1.9002e-01, -1.0918e-01, -2.7216e-02, -1.7940e-02, -3.4561e-02,
          1.0446e-01, -7.6413e-02,  2.9781e-02,  5.3312e-01, -2.3386e-02,
         -3.7516e-02,  2.7907e-01,  6.2731e-02,  1.1145e-01,  1.1138e-01,
          2.7553e-01,  3.1447e-02, -5.1789e-01,  3.5984e-03, -6.1480e-01,
          1.3335e-02, -1.2536e-01,  8.8558e-01,  1.0723e-02,  4.4228e-02,
         -8.4516e-03, -2.1827e-01,  6.1468e-02, -8.5446e-02,  5.4314e-01,
          1.8808e-01,  1.1780e-01,  3.6890e-01,  1.2080e-01, -2.9224e-01,
         -2.1047e-01,  3.8034e-02, -1.8115e-02,  3.9095e-01,  1.5079e-01,
         -5.7524e-01, -1.2820e-03]], device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
131000 特征值优化 tensor(0.6781, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7788,  0.1332, -0.7434, -0.3085, -1.3190, -0.5490, -1.1615,  0.2266,
         -2.1931, -0.1680, -0.3872,  0.2364, -0.0042, -0.0578,  0.4121, -0.0504,
         -0.0519,  0.0181, -0.2081,  0.0367, -0.0085, -0.0865,  0.1959,  0.0771,
         -0.0813, -0.0734,  0.0107, -0.0880, -0.0447, -0.6221, -0.1903, -0.1132,
         -0.0285, -0.0180, -0.0378,  0.1053, -0.0636,  0.0375,  0.5126,  0.0109,
         -0.0524,  0.2884,  0.0588,  0.1123,  0.1122,  0.2698,  0.0304, -0.5059,
          0.0062, -0.6155,  0.0233, -0.1258,  0.9080,  0.0141, -0.0230,  0.0265,
         -0.2222,  0.0566, -0.0037,  0.5356,  0.2123,  0.1067,  0.3637,  0.1176,
         -0.3130, -0.1903,  0.0134, -0.0494,  0.3705,  0.1555, -0.5934,  0.0100]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
132000 特征值优化 tensor(0.6787, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7764,  0.1295, -0.7388, -0.2837, -1.2745, -0.5629, -1.1974,  0.2205,
         -2.1662, -0.1679, -0.3470,  0.2382, -0.0052, -0.0643,  0.4012, -0.0605,
         -0.0553,  0.0030, -0.2063,  0.0377, -0.0093, -0.0778,  0.1971,  0.0766,
         -0.0920, -0.0691,  0.0339, -0.0833, -0.0439, -0.6189, -0.1904, -0.1084,
         -0.0291, -0.0178, -0.0381,  0.1026, -0.0568,  0.0414,  0.5082,  0.0100,
         -0.0598,  0.2888,  0.0586,  0.1127,  0.1127,  0.2713,  0.0316, -0.5103,
          0.0059, -0.6127,  0.0203, -0.1196,  0.8915,  0.0104, -0.0079,  0.0215,
         -0.2115,  0.0555, -0.0092,  0.5356,  0.2203,  0.1119,  0.3578,  0.1177,
         -0.3242, -0.1781,  0.0088, -0.0501,  0.3577,  0.1564, -0.5883,  0.0043]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
133000 特征值优化 tensor(0.6795, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7820e+00,  1.3513e-01, -7.4459e-01, -2.8889e-01, -1.2793e+00,
         -5.5991e-01, -1.2284e+00,  2.2671e-01, -2.1647e+00, -1.7525e-01,
         -3.0251e-01,  2.5132e-01, -4.8572e-03, -6.4122e-02,  4.0205e-01,
         -5.5907e-02, -6.7925e-02,  9.7961e-03, -2.0143e-01,  3.9257e-02,
         -8.9468e-03, -7.6940e-02,  1.8970e-01,  8.9374e-02, -9.1309e-02,
         -7.3291e-02,  2.0752e-02, -7.7106e-02, -4.5003e-02, -6.1786e-01,
         -1.9167e-01, -1.0858e-01, -2.6323e-02, -1.7885e-02, -3.7414e-02,
          1.0419e-01, -5.8399e-02,  4.0714e-02,  5.0882e-01,  1.4689e-02,
         -5.7535e-02,  2.8911e-01,  5.6881e-02,  1.1387e-01,  1.1384e-01,
          2.6786e-01,  2.9236e-02, -5.0541e-01,  2.4811e-03, -6.1438e-01,
          2.8909e-02, -1.2069e-01,  8.9071e-01,  9.3358e-03, -1.5261e-02,
          2.3699e-02, -2.1790e-01,  5.8923e-02, -6.7486e-03,  5.3291e-01,
          2.3161e-01,  1.1038e-01,  3.5376e-01,  1.1757e-01, -3.3100e-01,
         -1.7768e-01,  1.0953e-02, -5.8899e-02,  3.4149e-01,  1.5766e-01,
         -5.8998e-01,  3.6347e-04]], device='cuda:0') tensor(0.2034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
134000 特征值优化 tensor(0.6759, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7776e+00,  1.2386e-01, -7.4600e-01, -2.7954e-01, -1.2730e+00,
         -5.6160e-01, -1.2676e+00,  2.3466e-01, -2.1531e+00, -1.7375e-01,
         -2.7975e-01,  2.3419e-01, -4.2715e-03, -8.5847e-02,  3.9991e-01,
         -5.1823e-02, -7.6195e-02,  2.4887e-03, -1.9843e-01,  3.2948e-02,
         -8.7150e-03, -7.8746e-02,  2.0507e-01,  8.2120e-02, -9.3234e-02,
         -8.4670e-02,  3.0605e-02, -6.7402e-02, -4.4010e-02, -6.2249e-01,
         -1.9025e-01, -1.1054e-01, -2.6926e-02, -1.8033e-02, -3.6344e-02,
          1.0446e-01, -6.0637e-02,  3.9565e-02,  5.0538e-01,  7.6666e-03,
         -5.4867e-02,  2.8622e-01,  5.7280e-02,  1.0993e-01,  1.0987e-01,
          2.7444e-01,  2.8046e-02, -5.1265e-01,  1.9483e-03, -6.1357e-01,
          1.7019e-02, -1.1993e-01,  8.9071e-01,  1.0769e-02,  2.6425e-03,
          1.6035e-02, -2.1394e-01,  5.6670e-02, -2.3507e-02,  5.3714e-01,
          2.4854e-01,  1.0737e-01,  3.4910e-01,  1.1693e-01, -3.2546e-01,
         -1.7357e-01,  1.2406e-02, -4.8137e-02,  3.3335e-01,  1.6004e-01,
         -5.8912e-01,  6.2499e-03]], device='cuda:0') tensor(0.2098, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
135000 特征值优化 tensor(0.6853, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7871e+00,  1.3552e-01, -7.7212e-01, -2.7788e-01, -1.2697e+00,
         -5.7049e-01, -1.2529e+00,  2.2647e-01, -2.1240e+00, -1.7296e-01,
         -2.6964e-01,  2.3474e-01, -4.9251e-03, -6.7502e-02,  4.0062e-01,
         -6.2993e-02, -7.2191e-02,  1.8945e-02, -1.9509e-01,  4.1651e-02,
         -9.0387e-03, -6.9391e-02,  1.9521e-01,  1.1772e-01, -9.1246e-02,
         -7.2714e-02, -1.5706e-02, -1.1193e-01, -4.2487e-02, -6.1778e-01,
         -1.9214e-01, -1.0581e-01, -2.4453e-02, -1.9311e-02, -3.3185e-02,
          1.0299e-01, -5.4396e-02,  4.2436e-02,  4.9966e-01,  1.9468e-02,
         -6.0771e-02,  2.9235e-01,  6.0758e-02,  1.1188e-01,  1.1187e-01,
          2.6350e-01,  3.0627e-02, -4.9797e-01,  5.3274e-03, -6.1165e-01,
          2.9155e-02, -1.1495e-01,  8.9757e-01,  5.5658e-03, -3.3669e-02,
          3.3018e-02, -2.0702e-01,  5.6456e-02, -1.4925e-03,  5.3826e-01,
          2.4027e-01,  1.1222e-01,  3.5337e-01,  1.1639e-01, -3.2924e-01,
         -1.6809e-01,  5.3091e-04, -6.7194e-02,  3.2854e-01,  1.5666e-01,
         -5.8729e-01, -1.0021e-03]], device='cuda:0') tensor(0.2087, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
136000 特征值优化 tensor(0.6671, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7891e+00,  1.3129e-01, -7.4529e-01, -2.8236e-01, -1.2820e+00,
         -5.7676e-01, -1.2617e+00,  2.3169e-01, -2.1303e+00, -1.7846e-01,
         -2.7585e-01,  2.5834e-01, -2.8882e-03, -4.9283e-02,  4.0137e-01,
         -7.4597e-02, -5.1547e-02,  2.5510e-02, -2.0217e-01,  4.4741e-02,
         -7.0375e-03, -7.4770e-02,  1.9056e-01,  1.2798e-01, -1.2810e-01,
         -6.6000e-02, -1.7816e-02, -1.1885e-01, -4.4484e-02, -6.1809e-01,
         -1.8855e-01, -1.1095e-01, -2.6541e-02, -1.8299e-02, -3.5544e-02,
          1.0264e-01, -5.0760e-02,  4.3578e-02,  5.0024e-01,  2.6259e-02,
         -6.4114e-02,  2.8269e-01,  5.8659e-02,  1.1235e-01,  1.1246e-01,
          2.6471e-01,  3.0391e-02, -5.1216e-01, -4.7212e-04, -6.0999e-01,
          1.8280e-02, -1.1716e-01,  9.0224e-01,  1.2666e-02, -3.2624e-02,
          3.9166e-02, -2.1141e-01,  6.0103e-02,  6.1459e-03,  5.4616e-01,
          2.3643e-01,  1.1112e-01,  3.5579e-01,  1.1624e-01, -3.3636e-01,
         -1.5825e-01, -2.4852e-02, -7.5453e-02,  3.2772e-01,  1.5870e-01,
         -5.7375e-01, -2.9686e-03]], device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
137000 特征值优化 tensor(0.6704, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7840e+00,  1.2058e-01, -7.3614e-01, -2.9018e-01, -1.2848e+00,
         -5.6710e-01, -1.2704e+00,  2.3664e-01, -2.1570e+00, -1.9024e-01,
         -2.6524e-01,  2.2907e-01, -2.8364e-03, -3.9070e-02,  4.0960e-01,
         -7.0379e-02, -5.1861e-02,  2.0559e-02, -1.9422e-01,  4.2877e-02,
         -6.8819e-03, -7.8240e-02,  1.8860e-01,  1.0771e-01, -9.6518e-02,
         -7.0735e-02, -2.7364e-02, -1.2406e-01, -4.3775e-02, -6.1726e-01,
         -1.8815e-01, -1.1689e-01, -2.5763e-02, -1.8179e-02, -2.5833e-02,
          1.0563e-01, -5.6212e-02,  4.0663e-02,  5.0770e-01,  3.2471e-03,
         -5.7977e-02,  2.8279e-01,  5.7076e-02,  1.1178e-01,  1.1185e-01,
          2.7079e-01,  3.0085e-02, -5.1520e-01,  3.4554e-03, -6.1121e-01,
          1.6391e-02, -1.2164e-01,  8.9317e-01,  1.8129e-02, -8.6113e-03,
          2.8093e-02, -2.1871e-01,  6.0846e-02, -4.2259e-02,  5.3685e-01,
          2.4574e-01,  1.0946e-01,  3.4751e-01,  1.2023e-01, -3.1874e-01,
         -1.7349e-01,  4.5185e-04, -4.1083e-02,  3.2722e-01,  1.5635e-01,
         -5.7432e-01, -6.0476e-05]], device='cuda:0') tensor(0.2033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
138000 特征值优化 tensor(0.6765, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7769e+00,  1.2761e-01, -7.3504e-01, -2.8106e-01, -1.2455e+00,
         -5.5826e-01, -1.2629e+00,  2.3827e-01, -2.1541e+00, -2.0171e-01,
         -2.8135e-01,  2.2298e-01, -4.5967e-03, -3.9172e-02,  4.0827e-01,
         -5.1873e-02, -5.0376e-02, -7.8371e-03, -1.9418e-01,  3.4689e-02,
         -8.5991e-03, -7.4224e-02,  2.0575e-01,  6.1945e-02, -8.1705e-02,
         -3.3362e-02,  8.3426e-03, -1.1567e-01, -4.5372e-02, -6.1532e-01,
         -1.8801e-01, -1.1480e-01, -2.4131e-02, -1.7604e-02, -1.5992e-02,
          1.1065e-01, -6.2931e-02,  3.9071e-02,  5.1280e-01, -1.8378e-02,
         -5.3495e-02,  2.8337e-01,  6.0326e-02,  1.1170e-01,  1.1175e-01,
          2.7352e-01,  3.0950e-02, -5.1034e-01,  8.0090e-03, -6.1224e-01,
          1.8185e-02, -1.1577e-01,  8.7520e-01,  1.9451e-02,  4.6905e-02,
          9.7110e-04, -2.3127e-01,  6.4462e-02, -7.2224e-02,  5.2793e-01,
          2.4904e-01,  1.1402e-01,  3.3977e-01,  1.2470e-01, -3.1293e-01,
         -1.8863e-01,  2.9564e-02, -6.7840e-03,  3.3636e-01,  1.5170e-01,
         -5.8265e-01,  7.0196e-03]], device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
139000 特征值优化 tensor(0.6676, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7731e+00,  1.1797e-01, -7.3480e-01, -2.8805e-01, -1.2551e+00,
         -5.6474e-01, -1.3124e+00,  2.4255e-01, -2.1721e+00, -2.2164e-01,
         -2.6107e-01,  2.5506e-01, -5.5681e-03, -6.7323e-02,  4.0568e-01,
         -5.3771e-02, -5.6394e-02, -4.2102e-02, -2.0345e-01,  2.6771e-02,
         -9.5566e-03, -8.0993e-02,  2.5464e-01,  2.6758e-02, -7.3227e-02,
         -7.1901e-02,  2.7994e-02, -7.9215e-02, -4.3511e-02, -6.1737e-01,
         -1.9088e-01, -1.0944e-01, -2.5910e-02, -1.7466e-02, -2.6973e-02,
          1.0555e-01, -6.2799e-02,  3.8007e-02,  5.1132e-01, -2.8307e-02,
         -5.2365e-02,  2.7182e-01,  6.2265e-02,  1.0870e-01,  1.0861e-01,
          2.7975e-01,  2.9322e-02, -5.1612e-01,  3.2872e-03, -6.1134e-01,
          1.0895e-02, -1.2418e-01,  8.8653e-01,  8.3610e-03,  6.4904e-02,
         -1.8386e-02, -2.2113e-01,  6.0749e-02, -1.0526e-01,  5.4459e-01,
          2.5422e-01,  1.1297e-01,  3.4127e-01,  1.1941e-01, -2.8473e-01,
         -1.8170e-01,  4.2237e-02, -1.7328e-03,  3.2560e-01,  1.5760e-01,
         -5.8084e-01,  1.3273e-03]], device='cuda:0') tensor(0.2037, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
140000 特征值优化 tensor(0.6819, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7832,  0.1197, -0.7422, -0.3017, -1.2592, -0.5768, -1.2953,  0.2265,
         -2.1727, -0.2066, -0.2458,  0.2472, -0.0045, -0.0812,  0.3928, -0.0701,
         -0.0751,  0.0199, -0.1931,  0.0433, -0.0075, -0.0809,  0.1860,  0.0868,
         -0.0906, -0.0598,  0.0228, -0.0862, -0.0430, -0.6161, -0.1919, -0.1063,
         -0.0255, -0.0184, -0.0311,  0.1039, -0.0581,  0.0416,  0.5126,  0.0247,
         -0.0592,  0.2921,  0.0544,  0.1137,  0.1136,  0.2739,  0.0308, -0.5047,
          0.0048, -0.6126,  0.0280, -0.1274,  0.8891,  0.0071, -0.0148,  0.0202,
         -0.2069,  0.0562, -0.0138,  0.5332,  0.2596,  0.1117,  0.3505,  0.1180,
         -0.3210, -0.1837, -0.0078, -0.0682,  0.3153,  0.1570, -0.5972, -0.0100]],
       device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
141000 特征值优化 tensor(0.6705, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7874e+00,  1.3195e-01, -7.4359e-01, -3.0205e-01, -1.2788e+00,
         -5.8505e-01, -1.3068e+00,  2.4194e-01, -2.1841e+00, -2.1540e-01,
         -2.4635e-01,  2.2552e-01, -3.7634e-03, -4.7910e-02,  4.0180e-01,
         -6.8037e-02, -5.6331e-02,  2.2479e-02, -1.9744e-01,  4.1305e-02,
         -7.8433e-03, -7.8409e-02,  1.8364e-01,  1.0884e-01, -9.4443e-02,
         -6.7977e-02, -4.4700e-03, -1.3363e-01, -4.4477e-02, -6.1763e-01,
         -1.9088e-01, -1.1043e-01, -2.6704e-02, -1.8130e-02, -3.0785e-02,
          1.0601e-01, -5.2798e-02,  4.1627e-02,  5.1488e-01,  1.2099e-02,
         -6.1456e-02,  2.8304e-01,  6.0545e-02,  1.1183e-01,  1.1191e-01,
          2.6710e-01,  3.0383e-02, -5.1109e-01,  3.1401e-03, -6.1295e-01,
          2.2914e-02, -1.2104e-01,  8.9664e-01,  8.8564e-03, -1.5360e-02,
          3.1725e-02, -2.0668e-01,  5.9584e-02, -4.1227e-02,  5.3951e-01,
          2.5043e-01,  1.1162e-01,  3.4382e-01,  1.1770e-01, -3.0648e-01,
         -1.8763e-01, -8.4235e-03, -5.1436e-02,  3.1974e-01,  1.5902e-01,
         -5.7082e-01, -1.8976e-03]], device='cuda:0') tensor(0.2082, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
142000 特征值优化 tensor(0.6677, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7815e+00,  1.3177e-01, -7.2572e-01, -3.1068e-01, -1.2578e+00,
         -5.7866e-01, -1.3033e+00,  2.3887e-01, -2.1855e+00, -2.5754e-01,
         -2.6652e-01,  2.4744e-01, -5.5695e-03, -7.4527e-02,  4.0017e-01,
         -5.2970e-02, -5.9079e-02, -3.4618e-02, -2.0960e-01,  3.1918e-02,
         -9.7937e-03, -8.6656e-02,  2.5310e-01,  2.7182e-02, -9.8938e-02,
         -4.7372e-03,  3.2785e-02, -7.4268e-02, -4.3328e-02, -6.1652e-01,
         -1.9034e-01, -1.0391e-01, -2.4499e-02, -1.7532e-02, -2.4345e-02,
          1.0764e-01, -5.5329e-02,  4.1502e-02,  5.1442e-01, -1.9979e-02,
         -5.9798e-02,  2.6929e-01,  6.5119e-02,  1.0923e-01,  1.0917e-01,
          2.7042e-01,  3.1683e-02, -5.1774e-01,  8.3043e-03, -6.1485e-01,
          1.4441e-02, -1.3018e-01,  8.9843e-01,  2.8118e-03,  6.5759e-02,
         -2.1947e-02, -2.1619e-01,  6.1838e-02, -1.2267e-01,  5.3837e-01,
          2.3872e-01,  1.1800e-01,  3.4723e-01,  1.1592e-01, -2.7503e-01,
         -1.8483e-01,  3.0364e-02, -7.1946e-03,  3.2259e-01,  1.5867e-01,
         -5.8036e-01,  8.3980e-04]], device='cuda:0') tensor(0.2055, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
143000 特征值优化 tensor(0.6680, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7684e+00,  1.2394e-01, -8.0344e-01, -2.2594e-01, -1.2722e+00,
         -5.7285e-01, -1.2597e+00,  2.2864e-01, -2.1951e+00, -2.4134e-01,
         -2.7262e-01,  2.3841e-01, -4.1406e-03, -9.8934e-02,  4.0464e-01,
         -1.0712e-01, -6.7083e-02,  7.2129e-02, -1.9839e-01,  3.2458e-02,
         -7.7951e-03, -5.9454e-02,  2.0883e-01,  8.4440e-02, -9.2403e-02,
         -3.4875e-02,  1.2382e-02, -1.2378e-01, -4.6533e-02, -6.3016e-01,
         -1.9038e-01, -1.0374e-01, -2.5796e-02, -1.7876e-02, -4.0432e-02,
          1.0602e-01, -4.1670e-02,  4.8737e-02,  5.0070e-01,  3.3923e-02,
         -7.4321e-02,  2.9126e-01,  5.5243e-02,  1.1037e-01,  1.1048e-01,
          2.7397e-01,  3.0187e-02, -5.0175e-01,  1.8206e-03, -6.4022e-01,
          1.4981e-02, -9.8121e-02,  9.0542e-01,  2.5795e-03, -2.9843e-02,
          3.7391e-02, -2.1388e-01,  5.9477e-02,  9.2943e-03,  5.5087e-01,
          2.2407e-01,  1.1734e-01,  3.5728e-01,  1.1361e-01, -2.9041e-01,
         -1.8333e-01, -8.6775e-04, -8.4222e-02,  3.2215e-01,  1.5934e-01,
         -5.7159e-01, -1.1259e-03]], device='cuda:0') tensor(0.2092, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
144000 特征值优化 tensor(0.6692, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7778e+00,  1.2134e-01, -7.5688e-01, -2.6022e-01, -1.2731e+00,
         -5.5629e-01, -1.2828e+00,  2.3814e-01, -2.1793e+00, -2.5089e-01,
         -2.6207e-01,  1.9552e-01, -3.3662e-03, -2.9396e-02,  4.0916e-01,
         -7.5157e-02, -6.9884e-02,  4.3485e-02, -1.9165e-01,  3.7351e-02,
         -7.5295e-03, -6.6432e-02,  1.9357e-01,  1.0668e-01, -9.3313e-02,
         -5.4167e-02,  2.3345e-02, -1.3261e-01, -4.7042e-02, -6.1987e-01,
         -1.9039e-01, -1.1323e-01, -2.5654e-02, -1.8296e-02, -2.7539e-02,
          1.0461e-01, -5.4929e-02,  4.1089e-02,  5.1306e-01,  6.0890e-03,
         -5.9484e-02,  2.8409e-01,  5.7380e-02,  1.1062e-01,  1.1069e-01,
          2.7422e-01,  2.9252e-02, -5.0725e-01, -7.9532e-04, -6.1448e-01,
          1.9800e-02, -1.0575e-01,  8.8788e-01,  1.3407e-02, -1.2517e-02,
          2.5881e-02, -2.2029e-01,  5.9054e-02, -5.9665e-02,  5.3818e-01,
          2.4583e-01,  1.1328e-01,  3.4354e-01,  1.2150e-01, -3.0781e-01,
         -1.8101e-01,  1.2256e-02, -4.3508e-02,  3.2614e-01,  1.5423e-01,
         -5.6272e-01, -4.3827e-03]], device='cuda:0') tensor(0.2051, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
145000 特征值优化 tensor(0.6850, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7688e+00,  1.2635e-01, -7.2172e-01, -2.9970e-01, -1.2784e+00,
         -5.6841e-01, -1.2938e+00,  2.3901e-01, -2.1553e+00, -2.8455e-01,
         -2.3954e-01,  2.3690e-01, -6.5210e-03, -5.4585e-02,  4.0331e-01,
         -4.5910e-02, -5.2571e-02, -2.5409e-02, -1.9399e-01,  3.4203e-02,
         -9.9774e-03, -8.1418e-02,  2.2753e-01,  3.9059e-02, -6.3943e-02,
         -2.6333e-02,  1.8498e-02, -9.4376e-02, -4.1760e-02, -6.1196e-01,
         -1.9157e-01, -1.0763e-01, -2.5106e-02, -1.8368e-02, -9.5241e-03,
          1.0446e-01, -6.4112e-02,  3.8826e-02,  5.1751e-01, -1.7209e-02,
         -5.2547e-02,  2.8764e-01,  5.7758e-02,  1.1160e-01,  1.1163e-01,
          2.7468e-01,  3.1450e-02, -5.1144e-01,  1.0911e-02, -6.0981e-01,
          1.7855e-02, -1.2759e-01,  8.9763e-01,  6.4514e-03,  6.8054e-02,
         -1.7112e-02, -2.2177e-01,  6.1746e-02, -1.1228e-01,  5.2611e-01,
          2.5235e-01,  1.1148e-01,  3.4620e-01,  1.1686e-01, -2.9929e-01,
         -1.9903e-01,  3.7053e-02, -1.0310e-03,  3.1856e-01,  1.5960e-01,
         -5.9411e-01, -5.3352e-03]], device='cuda:0') tensor(0.2045, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
146000 特征值优化 tensor(0.6705, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7799e+00,  1.3919e-01, -7.3109e-01, -2.9661e-01, -1.2671e+00,
         -5.5343e-01, -1.2982e+00,  2.3540e-01, -2.1652e+00, -2.8925e-01,
         -2.6570e-01,  2.1175e-01, -5.6130e-03, -5.8328e-02,  3.9354e-01,
         -5.2854e-02, -5.9648e-02, -1.4194e-02, -2.0758e-01,  3.6662e-02,
         -9.6323e-03, -8.2471e-02,  2.4778e-01,  4.1150e-02, -5.2229e-02,
         -8.3364e-02,  7.0651e-02, -6.0677e-02, -4.3417e-02, -6.1743e-01,
         -1.9011e-01, -1.0858e-01, -2.7327e-02, -1.7833e-02, -2.3601e-02,
          1.0850e-01, -5.3881e-02,  4.2745e-02,  5.1488e-01, -6.6223e-03,
         -6.1273e-02,  2.7588e-01,  6.1597e-02,  1.1210e-01,  1.1202e-01,
          2.6748e-01,  3.2296e-02, -5.1553e-01,  5.8845e-03, -6.1208e-01,
          1.5971e-02, -1.2424e-01,  8.9253e-01,  8.8195e-03,  3.6606e-02,
         -1.6568e-03, -2.2695e-01,  6.0892e-02, -1.0286e-01,  5.3788e-01,
          2.5041e-01,  1.0720e-01,  3.4321e-01,  1.1714e-01, -2.9711e-01,
         -1.8185e-01,  3.8188e-02, -2.7871e-02,  3.2821e-01,  1.5966e-01,
         -5.7621e-01,  2.4238e-03]], device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
147000 特征值优化 tensor(0.6711, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7875e+00,  1.3123e-01, -7.4761e-01, -3.1550e-01, -1.2604e+00,
         -5.8524e-01, -1.2605e+00,  2.2792e-01, -2.1312e+00, -2.8326e-01,
         -2.9221e-01,  2.2121e-01, -4.1617e-03, -4.5601e-02,  3.9654e-01,
         -6.8901e-02, -5.4172e-02,  1.5771e-02, -2.0398e-01,  4.2420e-02,
         -7.8083e-03, -8.0831e-02,  1.8289e-01,  1.0513e-01, -9.5933e-02,
         -7.2483e-02,  9.2576e-03, -1.3436e-01, -4.3783e-02, -6.1913e-01,
         -1.9053e-01, -1.0876e-01, -2.6380e-02, -1.8303e-02, -2.8448e-02,
          1.0589e-01, -5.1406e-02,  4.2718e-02,  5.0256e-01,  2.5103e-02,
         -6.3519e-02,  2.8442e-01,  6.1266e-02,  1.1181e-01,  1.1191e-01,
          2.6892e-01,  3.1220e-02, -5.1250e-01, -8.3217e-04, -6.1270e-01,
          2.6734e-02, -1.2519e-01,  8.8907e-01,  8.6625e-03, -4.3205e-02,
          3.7917e-02, -2.0713e-01,  5.9512e-02, -4.2554e-02,  5.4061e-01,
          2.3031e-01,  1.1734e-01,  3.5216e-01,  1.1876e-01, -3.1167e-01,
         -1.6732e-01, -9.7545e-03, -6.5023e-02,  3.3703e-01,  1.5562e-01,
         -5.7614e-01, -6.2362e-03]], device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
148000 特征值优化 tensor(0.6978, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7666e+00,  1.2086e-01, -7.2883e-01, -2.9083e-01, -1.2695e+00,
         -5.6676e-01, -1.2846e+00,  2.3986e-01, -2.1276e+00, -3.3038e-01,
         -2.8069e-01,  2.3732e-01, -5.6747e-03, -5.9450e-02,  4.0417e-01,
         -5.5698e-02, -5.3329e-02, -4.0978e-02, -2.0818e-01,  2.7645e-02,
         -9.6342e-03, -8.0527e-02,  2.6568e-01,  1.7290e-02, -1.0099e-01,
         -1.8368e-02,  2.9170e-02, -7.4885e-02, -4.3370e-02, -6.1656e-01,
         -1.9076e-01, -1.0496e-01, -2.4570e-02, -1.7587e-02, -2.0319e-02,
          1.0832e-01, -6.5667e-02,  3.5710e-02,  5.0498e-01, -1.7502e-02,
         -4.8833e-02,  2.7206e-01,  6.2172e-02,  1.0950e-01,  1.0946e-01,
          2.7737e-01,  3.0521e-02, -5.1821e-01,  5.1862e-03, -6.1107e-01,
          1.1026e-02, -1.2360e-01,  8.9679e-01,  6.3300e-03,  7.6997e-02,
         -2.5814e-02, -2.2248e-01,  6.1659e-02, -1.2853e-01,  5.3667e-01,
          2.4099e-01,  1.1190e-01,  3.5317e-01,  1.1647e-01, -2.9145e-01,
         -1.7663e-01,  4.6338e-02,  2.5551e-03,  3.3104e-01,  1.6071e-01,
         -5.7784e-01,  1.7059e-03]], device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
149000 特征值优化 tensor(0.6746, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7859e+00,  1.4035e-01, -7.5107e-01, -2.9024e-01, -1.2579e+00,
         -5.4681e-01, -1.2752e+00,  2.3468e-01, -2.1123e+00, -3.1044e-01,
         -2.7971e-01,  2.0493e-01, -4.4427e-03, -6.7662e-02,  3.9432e-01,
         -5.8979e-02, -6.2892e-02, -1.0543e-03, -2.0541e-01,  3.9004e-02,
         -7.9235e-03, -8.3150e-02,  2.1763e-01,  7.0205e-02, -8.1901e-02,
         -7.1035e-02,  4.8360e-02, -8.2367e-02, -4.1203e-02, -6.2007e-01,
         -1.9056e-01, -1.0873e-01, -2.7008e-02, -1.7977e-02, -2.8301e-02,
          1.0739e-01, -5.6340e-02,  4.2307e-02,  5.0178e-01,  1.5565e-02,
         -5.9745e-02,  2.8592e-01,  6.1800e-02,  1.1210e-01,  1.1205e-01,
          2.6460e-01,  3.1793e-02, -5.1300e-01, -1.7435e-04, -6.1663e-01,
          8.9919e-03, -1.2719e-01,  8.8687e-01,  9.9164e-03,  9.9922e-03,
          8.2598e-03, -2.2012e-01,  5.5915e-02, -6.5530e-02,  5.3918e-01,
          2.3973e-01,  1.1142e-01,  3.4561e-01,  1.1872e-01, -3.2290e-01,
         -1.6739e-01,  2.4159e-02, -4.9492e-02,  3.3516e-01,  1.5848e-01,
         -5.8864e-01,  2.4239e-03]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
150000 特征值优化 tensor(0.6681, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7685,  0.1246, -0.7909, -0.2241, -1.2690, -0.5667, -1.2384,  0.2242,
         -2.1427, -0.3193, -0.2747,  0.1982, -0.0045, -0.0775,  0.4112, -0.1059,
         -0.0763,  0.0879, -0.1881,  0.0334, -0.0084, -0.0582,  0.2084,  0.0847,
         -0.0841, -0.0278,  0.0136, -0.1277, -0.0474, -0.6273, -0.1883, -0.1106,
         -0.0269, -0.0181, -0.0253,  0.1025, -0.0494,  0.0441,  0.5000,  0.0229,
         -0.0658,  0.2853,  0.0540,  0.1104,  0.1105,  0.2734,  0.0287, -0.5036,
          0.0033, -0.6334,  0.0159, -0.0971,  0.8952,  0.0126, -0.0224,  0.0360,
         -0.2104,  0.0561, -0.0448,  0.5438,  0.2240,  0.1137,  0.3570,  0.1177,
         -0.3104, -0.1485,  0.0064, -0.0682,  0.3258,  0.1561, -0.5700, -0.0148]],
       device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
151000 特征值优化 tensor(0.6869, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7735e+00,  1.2249e-01, -7.2924e-01, -2.7962e-01, -1.2558e+00,
         -5.4923e-01, -1.3042e+00,  2.3622e-01, -2.1342e+00, -3.5983e-01,
         -2.5888e-01,  2.2736e-01, -5.3947e-03, -5.0272e-02,  3.9788e-01,
         -4.8089e-02, -5.0691e-02, -3.4729e-02, -1.9868e-01,  3.3883e-02,
         -9.6474e-03, -7.8123e-02,  2.2873e-01,  5.0340e-02, -6.5652e-02,
         -1.8894e-02,  4.5962e-02, -9.0628e-02, -4.1686e-02, -6.1691e-01,
         -1.9029e-01, -1.0838e-01, -2.5431e-02, -1.7776e-02, -5.7125e-03,
          1.0500e-01, -5.8264e-02,  3.9745e-02,  5.1282e-01, -1.6149e-02,
         -5.6164e-02,  2.8037e-01,  6.3116e-02,  1.1083e-01,  1.1083e-01,
          2.7503e-01,  3.1538e-02, -5.1794e-01,  5.8019e-03, -6.1039e-01,
          1.3065e-02, -1.2295e-01,  8.8584e-01,  7.8618e-03,  7.8522e-02,
         -2.0430e-02, -2.3218e-01,  6.3235e-02, -1.2355e-01,  5.2926e-01,
          2.5073e-01,  1.1340e-01,  3.4151e-01,  1.1927e-01, -2.8802e-01,
         -1.8761e-01,  5.4716e-02, -1.9783e-03,  3.3046e-01,  1.5749e-01,
         -5.9254e-01, -5.7240e-03]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
152000 特征值优化 tensor(0.6799, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7861,  0.1392, -0.7709, -0.2896, -1.2721, -0.5649, -1.2720,  0.2231,
         -2.0769, -0.3295, -0.2578,  0.1962, -0.0040, -0.0769,  0.3974, -0.0611,
         -0.0694,  0.0144, -0.1980,  0.0414, -0.0078, -0.0745,  0.1971,  0.0917,
         -0.1002, -0.0770,  0.0142, -0.0855, -0.0448, -0.6242, -0.1916, -0.1065,
         -0.0273, -0.0179, -0.0342,  0.1050, -0.0530,  0.0456,  0.4945,  0.0291,
         -0.0653,  0.2921,  0.0579,  0.1134,  0.1134,  0.2640,  0.0297, -0.5031,
         -0.0054, -0.6218,  0.0253, -0.1217,  0.8959,  0.0060, -0.0200,  0.0222,
         -0.2085,  0.0558, -0.0447,  0.5349,  0.2446,  0.1113,  0.3503,  0.1130,
         -0.3342, -0.1577,  0.0258, -0.0710,  0.3229,  0.1617, -0.5870, -0.0052]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
153000 特征值优化 tensor(0.6688, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7845e+00,  1.1608e-01, -7.4996e-01, -2.8922e-01, -1.2641e+00,
         -5.8215e-01, -1.2793e+00,  2.2524e-01, -2.0740e+00, -3.3149e-01,
         -2.6959e-01,  2.0815e-01, -2.5527e-03, -3.5914e-02,  4.0766e-01,
         -8.2388e-02, -6.7390e-02,  4.2254e-02, -1.9536e-01,  3.9638e-02,
         -6.6673e-03, -7.7974e-02,  1.8821e-01,  1.1519e-01, -9.8098e-02,
         -9.1783e-02, -1.1347e-02, -1.3331e-01, -4.3450e-02, -6.2096e-01,
         -1.8881e-01, -1.0989e-01, -2.6184e-02, -1.8020e-02, -2.4494e-02,
          1.0583e-01, -5.2370e-02,  4.2997e-02,  4.8995e-01,  3.1736e-02,
         -6.3127e-02,  2.8651e-01,  5.8059e-02,  1.1065e-01,  1.1075e-01,
          2.7249e-01,  2.9999e-02, -5.1399e-01,  2.0190e-03, -6.1695e-01,
          1.7733e-02, -1.2213e-01,  8.9512e-01,  1.0836e-02, -2.8540e-02,
          3.4701e-02, -2.0674e-01,  5.8906e-02, -5.0123e-02,  5.3987e-01,
          2.3983e-01,  1.1512e-01,  3.5340e-01,  1.1683e-01, -3.3251e-01,
         -1.4331e-01, -3.8870e-03, -7.0968e-02,  3.2582e-01,  1.5732e-01,
         -5.7691e-01, -8.8734e-03]], device='cuda:0') tensor(0.2056, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
154000 特征值优化 tensor(0.6828, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7733,  0.1286, -0.7316, -0.2839, -1.2588, -0.5606, -1.2615,  0.2273,
         -2.0905, -0.3665, -0.2790,  0.2097, -0.0053, -0.0491,  0.4041, -0.0503,
         -0.0486, -0.0157, -0.2005,  0.0343, -0.0091, -0.0789,  0.2231,  0.0532,
         -0.0619, -0.0227,  0.0226, -0.1021, -0.0410, -0.6133, -0.1905, -0.1089,
         -0.0247, -0.0182, -0.0043,  0.1081, -0.0600,  0.0397,  0.5086, -0.0055,
         -0.0562,  0.2864,  0.0608,  0.1112,  0.1112,  0.2732,  0.0317, -0.5094,
          0.0064, -0.6124,  0.0206, -0.1251,  0.8835,  0.0110,  0.0662, -0.0141,
         -0.2271,  0.0627, -0.1230,  0.5182,  0.2453,  0.1104,  0.3492,  0.1201,
         -0.3131, -0.1848,  0.0435, -0.0115,  0.3327,  0.1555, -0.5911, -0.0045]],
       device='cuda:0') tensor(0.2056, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
155000 特征值优化 tensor(0.6713, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7835e+00,  1.3344e-01, -7.3961e-01, -2.8979e-01, -1.2570e+00,
         -5.6047e-01, -1.2783e+00,  2.3243e-01, -2.0917e+00, -3.7157e-01,
         -2.8563e-01,  2.0212e-01, -4.5058e-03, -7.1874e-02,  3.9876e-01,
         -5.9392e-02, -6.0310e-02, -1.7142e-02, -2.0809e-01,  3.4608e-02,
         -8.3427e-03, -8.0797e-02,  2.3378e-01,  4.5000e-02, -8.7203e-02,
         -6.4701e-02,  3.7686e-02, -9.0027e-02, -4.3097e-02, -6.1812e-01,
         -1.9009e-01, -1.0762e-01, -2.6775e-02, -1.7792e-02, -2.2494e-02,
          1.0836e-01, -5.6701e-02,  4.0561e-02,  5.0019e-01,  2.1374e-03,
         -5.7924e-02,  2.7660e-01,  6.3171e-02,  1.1066e-01,  1.1059e-01,
          2.6883e-01,  3.1272e-02, -5.1453e-01,  2.2116e-03, -6.1183e-01,
          1.1397e-02, -1.2493e-01,  8.8799e-01,  8.3820e-03,  4.1171e-02,
         -5.6093e-03, -2.2183e-01,  6.0076e-02, -1.2137e-01,  5.3653e-01,
          2.4286e-01,  1.0963e-01,  3.4839e-01,  1.1782e-01, -3.0643e-01,
         -1.6461e-01,  4.9669e-02, -3.1501e-02,  3.3598e-01,  1.5918e-01,
         -5.7891e-01, -3.4777e-04]], device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
156000 特征值优化 tensor(0.6676, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7920e+00,  1.3022e-01, -7.4120e-01, -2.9078e-01, -1.2676e+00,
         -5.7613e-01, -1.2528e+00,  2.2853e-01, -2.1052e+00, -3.7106e-01,
         -2.8364e-01,  2.1262e-01, -2.3601e-03, -5.5520e-02,  4.0481e-01,
         -7.8710e-02, -5.2135e-02,  3.1066e-02, -1.9719e-01,  4.6573e-02,
         -6.8242e-03, -7.7305e-02,  1.8706e-01,  1.1907e-01, -1.1164e-01,
         -8.2287e-02, -1.6809e-02, -1.3420e-01, -4.3647e-02, -6.1846e-01,
         -1.8804e-01, -1.0920e-01, -2.5819e-02, -1.8203e-02, -2.7720e-02,
          1.0427e-01, -5.0244e-02,  4.3318e-02,  5.0198e-01,  4.2856e-02,
         -6.4055e-02,  2.8746e-01,  5.8608e-02,  1.1208e-01,  1.1219e-01,
          2.6506e-01,  3.0210e-02, -5.1479e-01,  2.1273e-04, -6.0976e-01,
          1.8687e-02, -1.2127e-01,  8.9700e-01,  1.0466e-02, -2.2420e-02,
          3.7451e-02, -2.0761e-01,  5.7483e-02, -4.1615e-02,  5.4316e-01,
          2.2993e-01,  1.1182e-01,  3.5922e-01,  1.1504e-01, -3.3667e-01,
         -1.4649e-01, -7.0351e-03, -9.0168e-02,  3.3042e-01,  1.5923e-01,
         -5.7711e-01, -1.9126e-02]], device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
157000 特征值优化 tensor(0.6692, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7862,  0.1272, -0.7348, -0.2893, -1.2779, -0.5687, -1.2466,  0.2357,
         -2.1025, -0.3732, -0.2855,  0.1772, -0.0028, -0.0472,  0.4075, -0.0793,
         -0.0538,  0.0306, -0.1966,  0.0453, -0.0068, -0.0771,  0.1905,  0.1207,
         -0.0960, -0.0798, -0.0166, -0.1342, -0.0437, -0.6168, -0.1885, -0.1165,
         -0.0258, -0.0182, -0.0183,  0.1070, -0.0553,  0.0404,  0.5063,  0.0216,
         -0.0590,  0.2846,  0.0553,  0.1122,  0.1123,  0.2662,  0.0297, -0.5143,
          0.0025, -0.6088,  0.0183, -0.1201,  0.8895,  0.0186, -0.0036,  0.0299,
         -0.2175,  0.0610, -0.0809,  0.5334,  0.2378,  0.1090,  0.3510,  0.1197,
         -0.3263, -0.1653,  0.0191, -0.0558,  0.3337,  0.1557, -0.5680, -0.0092]],
       device='cuda:0') tensor(0.2045, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
158000 特征值优化 tensor(0.6761, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7806e+00,  1.2562e-01, -7.4554e-01, -2.9106e-01, -1.2525e+00,
         -5.6067e-01, -1.2510e+00,  2.4037e-01, -2.0936e+00, -3.8293e-01,
         -2.8757e-01,  1.7544e-01, -5.0388e-03, -3.1465e-02,  4.0816e-01,
         -5.4944e-02, -4.9435e-02,  5.6778e-04, -1.9467e-01,  3.6178e-02,
         -8.2635e-03, -7.5935e-02,  2.0254e-01,  7.1988e-02, -7.1874e-02,
         -3.9341e-02,  6.0282e-04, -1.1946e-01, -4.4722e-02, -6.1721e-01,
         -1.8695e-01, -1.1718e-01, -2.3833e-02, -1.8297e-02, -8.2433e-03,
          1.0963e-01, -6.1898e-02,  3.9760e-02,  5.0985e-01,  1.0303e-03,
         -5.5827e-02,  2.8256e-01,  6.0515e-02,  1.1241e-01,  1.1246e-01,
          2.7651e-01,  3.1382e-02, -5.0918e-01,  2.2491e-03, -6.1166e-01,
          1.9310e-02, -1.1870e-01,  8.7675e-01,  2.1456e-02,  3.9645e-02,
          7.1050e-03, -2.2394e-01,  6.0472e-02, -1.1476e-01,  5.1922e-01,
          2.4465e-01,  1.1467e-01,  3.4388e-01,  1.2345e-01, -3.2046e-01,
         -1.7852e-01,  4.3544e-02, -2.4774e-02,  3.3546e-01,  1.5073e-01,
         -5.7775e-01,  1.2927e-03]], device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
159000 特征值优化 tensor(0.6736, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7794e+00,  1.3261e-01, -7.4732e-01, -2.8449e-01, -1.2597e+00,
         -5.6660e-01, -1.2936e+00,  2.4228e-01, -2.0528e+00, -3.8850e-01,
         -2.6321e-01,  1.8587e-01, -4.4612e-03, -8.3114e-02,  3.9913e-01,
         -6.2408e-02, -6.7393e-02, -4.7705e-03, -2.0093e-01,  3.3002e-02,
         -8.0062e-03, -7.7940e-02,  2.2275e-01,  4.9496e-02, -1.0205e-01,
         -8.8235e-02,  2.9281e-02, -9.9114e-02, -4.3969e-02, -6.1874e-01,
         -1.9061e-01, -1.0768e-01, -2.7209e-02, -1.7878e-02, -2.8225e-02,
          1.0625e-01, -5.4373e-02,  4.2053e-02,  4.9488e-01,  1.4354e-02,
         -6.1382e-02,  2.8309e-01,  6.0880e-02,  1.0991e-01,  1.0987e-01,
          2.6993e-01,  3.0342e-02, -5.1117e-01,  2.0011e-03, -6.1278e-01,
          1.5080e-02, -1.2123e-01,  8.9083e-01,  7.0903e-03,  2.2453e-02,
          2.7812e-03, -2.1033e-01,  5.5804e-02, -9.2547e-02,  5.3757e-01,
          2.4908e-01,  1.1207e-01,  3.4693e-01,  1.1589e-01, -3.3344e-01,
         -1.5834e-01,  5.2181e-02, -4.6303e-02,  3.2059e-01,  1.5935e-01,
         -5.7555e-01, -2.6206e-03]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
160000 特征值优化 tensor(0.6674, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7876e+00,  1.2933e-01, -7.3622e-01, -2.8610e-01, -1.2784e+00,
         -5.7995e-01, -1.2786e+00,  2.3658e-01, -2.1073e+00, -4.0375e-01,
         -2.6515e-01,  2.0782e-01, -2.6007e-03, -4.8195e-02,  3.9798e-01,
         -7.6120e-02, -5.2986e-02,  2.4034e-02, -2.0026e-01,  4.7403e-02,
         -6.8930e-03, -7.6472e-02,  1.8838e-01,  1.2018e-01, -1.1935e-01,
         -7.9800e-02, -1.1058e-02, -1.3563e-01, -4.3916e-02, -6.1787e-01,
         -1.8911e-01, -1.0931e-01, -2.6444e-02, -1.8324e-02, -2.5305e-02,
          1.0609e-01, -4.6758e-02,  4.5377e-02,  5.0284e-01,  5.0203e-02,
         -6.8438e-02,  2.8952e-01,  5.7914e-02,  1.1237e-01,  1.1248e-01,
          2.6545e-01,  3.0534e-02, -5.1613e-01,  1.0321e-03, -6.0890e-01,
          1.7995e-02, -1.1933e-01,  9.0371e-01,  9.9643e-03, -2.2377e-02,
          3.5653e-02, -2.1044e-01,  6.0041e-02, -4.9840e-02,  5.4214e-01,
          2.4555e-01,  1.1379e-01,  3.5380e-01,  1.1368e-01, -3.2974e-01,
         -1.5215e-01, -1.4031e-02, -9.2004e-02,  3.1772e-01,  1.5854e-01,
         -5.7756e-01, -2.2536e-02]], device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
161000 特征值优化 tensor(0.6811, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7727e+00,  1.2710e-01, -7.2646e-01, -2.8290e-01, -1.2592e+00,
         -5.6194e-01, -1.2815e+00,  2.4165e-01, -2.0980e+00, -4.2886e-01,
         -2.6014e-01,  1.7981e-01, -5.5435e-03, -4.3282e-02,  4.0928e-01,
         -4.5660e-02, -4.4390e-02, -1.9662e-02, -1.9373e-01,  3.3150e-02,
         -9.7955e-03, -7.5174e-02,  2.1555e-01,  5.3582e-02, -6.1026e-02,
         -2.7131e-02,  1.0447e-02, -1.0832e-01, -4.3477e-02, -6.1296e-01,
         -1.8991e-01, -1.1016e-01, -2.5709e-02, -1.7963e-02, -7.2874e-03,
          1.1034e-01, -6.2185e-02,  3.9488e-02,  5.1627e-01,  1.4533e-03,
         -5.5390e-02,  2.8368e-01,  5.9521e-02,  1.1100e-01,  1.1104e-01,
          2.7379e-01,  3.0621e-02, -5.0937e-01,  1.0640e-02, -6.1102e-01,
          2.3824e-02, -1.2115e-01,  8.8402e-01,  1.2141e-02,  6.5369e-02,
         -1.5757e-02, -2.2490e-01,  6.3014e-02, -1.3867e-01,  5.1193e-01,
          2.5673e-01,  1.1351e-01,  3.4156e-01,  1.2127e-01, -3.0446e-01,
         -1.9741e-01,  4.9832e-02, -1.7425e-02,  3.2059e-01,  1.5392e-01,
         -5.8563e-01, -1.3630e-03]], device='cuda:0') tensor(0.2089, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
162000 特征值优化 tensor(0.6714, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7797e+00,  1.3051e-01, -7.3649e-01, -2.9062e-01, -1.2662e+00,
         -5.5831e-01, -1.2772e+00,  2.4373e-01, -2.1044e+00, -4.3417e-01,
         -2.8299e-01,  1.6793e-01, -4.0815e-03, -7.6590e-02,  4.0214e-01,
         -5.5545e-02, -6.1113e-02, -1.6010e-02, -2.0428e-01,  3.2809e-02,
         -8.3314e-03, -8.4503e-02,  2.3647e-01,  4.1287e-02, -7.6978e-02,
         -5.9334e-02,  4.0991e-02, -8.0624e-02, -4.1337e-02, -6.1792e-01,
         -1.9072e-01, -1.0851e-01, -2.6520e-02, -1.7905e-02, -1.8755e-02,
          1.0987e-01, -5.7230e-02,  4.0205e-02,  5.0799e-01,  1.2303e-02,
         -5.8493e-02,  2.8070e-01,  6.2721e-02,  1.0998e-01,  1.0990e-01,
          2.7086e-01,  3.0515e-02, -5.1502e-01,  3.3294e-03, -6.1370e-01,
          8.0680e-03, -1.2771e-01,  8.9279e-01,  7.5287e-03,  3.5415e-02,
         -1.0850e-03, -2.2392e-01,  6.0517e-02, -1.2016e-01,  5.3151e-01,
          2.4871e-01,  1.1338e-01,  3.4313e-01,  1.1972e-01, -3.0587e-01,
         -1.7574e-01,  5.6389e-02, -4.1403e-02,  3.2895e-01,  1.5520e-01,
         -5.7739e-01, -1.9648e-03]], device='cuda:0') tensor(0.2033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
163000 特征值优化 tensor(0.6954, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7826e+00,  1.3104e-01, -7.3967e-01, -2.8647e-01, -1.3001e+00,
         -5.7363e-01, -1.2476e+00,  2.3771e-01, -2.1027e+00, -4.3207e-01,
         -2.7704e-01,  1.9133e-01, -2.4025e-03, -5.1128e-02,  4.0972e-01,
         -8.8336e-02, -5.4436e-02,  2.5579e-02, -1.9758e-01,  4.5232e-02,
         -6.9424e-03, -7.6423e-02,  1.9000e-01,  1.2075e-01, -1.0996e-01,
         -8.2919e-02, -1.9285e-02, -1.3738e-01, -4.3972e-02, -6.1806e-01,
         -1.8896e-01, -1.1277e-01, -2.8928e-02, -1.7919e-02, -2.4167e-02,
          1.0531e-01, -5.0526e-02,  4.4011e-02,  5.0781e-01,  4.8910e-02,
         -6.5748e-02,  2.8852e-01,  5.3165e-02,  1.1222e-01,  1.1230e-01,
          2.6537e-01,  3.0389e-02, -5.1445e-01, -8.8138e-05, -6.0829e-01,
          1.7765e-02, -1.1999e-01,  9.0633e-01,  1.5240e-02, -9.9237e-03,
          3.3151e-02, -2.1582e-01,  6.1049e-02, -4.9087e-02,  5.4314e-01,
          2.4555e-01,  1.0967e-01,  3.5720e-01,  1.1522e-01, -3.3200e-01,
         -1.5179e-01, -5.6394e-03, -9.5665e-02,  3.2084e-01,  1.5929e-01,
         -5.7341e-01, -2.6879e-02]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
164000 特征值优化 tensor(0.6688, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7805,  0.1204, -0.7360, -0.2766, -1.2879, -0.5820, -1.2711,  0.2432,
         -2.0805, -0.4167, -0.2770,  0.1405, -0.0034, -0.0401,  0.4032, -0.0752,
         -0.0528,  0.0195, -0.1984,  0.0435, -0.0072, -0.0719,  0.1966,  0.1108,
         -0.0955, -0.0682,  0.0249, -0.1392, -0.0474, -0.6123, -0.1902, -0.1126,
         -0.0296, -0.0183, -0.0149,  0.1080, -0.0541,  0.0405,  0.5043,  0.0270,
         -0.0596,  0.2870,  0.0555,  0.1116,  0.1117,  0.2723,  0.0295, -0.5043,
          0.0098, -0.6110,  0.0160, -0.1106,  0.8950,  0.0133, -0.0137,  0.0301,
         -0.2115,  0.0615, -0.0981,  0.5317,  0.2518,  0.1127,  0.3498,  0.1203,
         -0.3272, -0.1615,  0.0140, -0.0587,  0.3214,  0.1538, -0.5633, -0.0121]],
       device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
165000 特征值优化 tensor(0.6687, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7729e+00,  1.1740e-01, -7.3175e-01, -2.9887e-01, -1.2636e+00,
         -5.5118e-01, -1.3072e+00,  2.5016e-01, -2.0855e+00, -4.6565e-01,
         -2.5360e-01,  1.7877e-01, -4.8308e-03, -7.1631e-02,  4.0787e-01,
         -4.3964e-02, -6.5168e-02, -5.1292e-02, -2.0454e-01,  2.6111e-02,
         -8.7138e-03, -8.3663e-02,  2.4082e-01,  3.3045e-02, -7.3230e-02,
         -4.7332e-02,  3.4256e-02, -7.9711e-02, -4.2232e-02, -6.1818e-01,
         -1.9102e-01, -1.0901e-01, -2.6852e-02, -1.7534e-02, -1.8712e-02,
          1.0887e-01, -6.4052e-02,  3.7794e-02,  5.0808e-01,  1.1040e-03,
         -5.2295e-02,  2.7084e-01,  6.0127e-02,  1.0753e-01,  1.0743e-01,
          2.7864e-01,  2.8323e-02, -5.1890e-01,  3.6466e-03, -6.1203e-01,
          1.3514e-02, -1.2759e-01,  8.8901e-01,  9.1586e-03,  3.6206e-02,
          6.4095e-04, -2.2590e-01,  6.0534e-02, -1.6485e-01,  5.3174e-01,
          2.6561e-01,  1.0809e-01,  3.4209e-01,  1.1902e-01, -2.9519e-01,
         -1.7561e-01,  6.5356e-02, -2.2425e-02,  3.1574e-01,  1.5797e-01,
         -5.7343e-01,  2.4271e-03]], device='cuda:0') tensor(0.2168, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
166000 特征值优化 tensor(0.6797, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7790,  0.1374, -0.7399, -0.2822, -1.2959, -0.5629, -1.2679,  0.2413,
         -2.0800, -0.4497, -0.2645,  0.1627, -0.0046, -0.0755,  0.4026, -0.0540,
         -0.0670,  0.0143, -0.1960,  0.0394, -0.0091, -0.0764,  0.1945,  0.0837,
         -0.0925, -0.0644,  0.0389, -0.0901, -0.0448, -0.6187, -0.1923, -0.1065,
         -0.0276, -0.0178, -0.0220,  0.1069, -0.0504,  0.0451,  0.5047,  0.0394,
         -0.0668,  0.2950,  0.0535,  0.1146,  0.1146,  0.2685,  0.0295, -0.5089,
          0.0043, -0.6123,  0.0223, -0.1177,  0.9049,  0.0061,  0.0053,  0.0093,
         -0.2182,  0.0594, -0.0738,  0.5289,  0.2545,  0.1139,  0.3497,  0.1144,
         -0.3452, -0.1600,  0.0325, -0.0780,  0.3142,  0.1575, -0.5749, -0.0187]],
       device='cuda:0') tensor(0.2167, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
167000 特征值优化 tensor(0.6668, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7817,  0.1130, -0.7431, -0.2784, -1.2671, -0.5943, -1.2629,  0.2433,
         -2.0569, -0.4403, -0.2797,  0.1486, -0.0021, -0.0376,  0.4084, -0.0860,
         -0.0684,  0.0468, -0.1935,  0.0396, -0.0063, -0.0685,  0.1935,  0.1245,
         -0.1113, -0.0741,  0.0336, -0.1446, -0.0479, -0.6152, -0.1889, -0.1100,
         -0.0277, -0.0188, -0.0209,  0.1038, -0.0532,  0.0421,  0.5031,  0.0361,
         -0.0623,  0.2886,  0.0555,  0.1106,  0.1107,  0.2745,  0.0290, -0.5053,
          0.0042, -0.6104,  0.0240, -0.1076,  0.8944,  0.0114, -0.0070,  0.0263,
         -0.1974,  0.0585, -0.0764,  0.5397,  0.2485,  0.1175,  0.3539,  0.1183,
         -0.3467, -0.1483,  0.0106, -0.0729,  0.3171,  0.1535, -0.5619, -0.0233]],
       device='cuda:0') tensor(0.2032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
168000 特征值优化 tensor(0.6698, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7633e+00,  1.2658e-01, -7.6625e-01, -2.7564e-01, -1.2298e+00,
         -5.7410e-01, -1.2686e+00,  2.4685e-01, -2.0824e+00, -4.8869e-01,
         -2.6845e-01,  1.6954e-01, -5.8189e-03, -1.3856e-01,  4.0343e-01,
         -5.0067e-02, -5.6943e-02, -5.7945e-02, -1.9958e-01,  2.4767e-02,
         -9.8167e-03, -7.4876e-02,  2.4878e-01,  4.7065e-02, -3.2672e-02,
         -2.1503e-02,  3.6163e-02, -9.0673e-02, -4.5450e-02, -6.2170e-01,
         -1.9036e-01, -1.0389e-01, -2.4979e-02, -1.7655e-02, -9.6479e-03,
          1.1213e-01, -5.5900e-02,  4.0720e-02,  5.0858e-01, -7.6444e-03,
         -6.0015e-02,  2.6851e-01,  5.9740e-02,  1.0883e-01,  1.0874e-01,
          2.7627e-01,  3.0487e-02, -5.0755e-01,  3.0026e-03, -6.2194e-01,
          1.5016e-02, -1.1743e-01,  8.8184e-01,  3.2200e-03,  8.5075e-02,
         -2.6390e-02, -2.1683e-01,  6.0980e-02, -1.7079e-01,  5.2797e-01,
          2.4013e-01,  1.2097e-01,  3.4668e-01,  1.1981e-01, -3.0360e-01,
         -1.6898e-01,  6.8151e-02, -8.5157e-03,  3.1737e-01,  1.5313e-01,
         -5.6637e-01,  1.5171e-03]], device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
169000 特征值优化 tensor(0.6708, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7806,  0.1353, -0.7321, -0.2886, -1.2663, -0.5496, -1.2882,  0.2506,
         -2.1001, -0.4884, -0.2822,  0.1481, -0.0056, -0.0680,  0.3988, -0.0569,
         -0.0613, -0.0249, -0.2052,  0.0342, -0.0091, -0.0827,  0.2405,  0.0364,
         -0.0767, -0.0401,  0.0467, -0.0825, -0.0428, -0.6177, -0.1906, -0.1092,
         -0.0282, -0.0176, -0.0182,  0.1095, -0.0569,  0.0398,  0.5119,  0.0131,
         -0.0580,  0.2789,  0.0630,  0.1104,  0.1104,  0.2698,  0.0317, -0.5177,
          0.0041, -0.6131,  0.0088, -0.1259,  0.8922,  0.0086,  0.0404, -0.0072,
         -0.2264,  0.0594, -0.1450,  0.5269,  0.2547,  0.1135,  0.3439,  0.1192,
         -0.3009, -0.1794,  0.0629, -0.0381,  0.3237,  0.1557, -0.5734, -0.0035]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
170000 特征值优化 tensor(0.6668, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7827,  0.1171, -0.7472, -0.2896, -1.2506, -0.5622, -1.2760,  0.2426,
         -2.0826, -0.4782, -0.2723,  0.1597, -0.0028, -0.0332,  0.4055, -0.0854,
         -0.0720,  0.0498, -0.1919,  0.0421, -0.0064, -0.0753,  0.1883,  0.1302,
         -0.0950, -0.0848, -0.0391, -0.1480, -0.0457, -0.6170, -0.1891, -0.1075,
         -0.0267, -0.0182, -0.0178,  0.1057, -0.0532,  0.0418,  0.5065,  0.0415,
         -0.0620,  0.2869,  0.0558,  0.1110,  0.1110,  0.2717,  0.0308, -0.5082,
          0.0039, -0.6136,  0.0200, -0.1169,  0.8893,  0.0082, -0.0162,  0.0311,
         -0.2190,  0.0596, -0.0847,  0.5337,  0.2484,  0.1186,  0.3545,  0.1175,
         -0.3355, -0.1496,  0.0153, -0.0791,  0.3139,  0.1543, -0.5669, -0.0239]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
171000 特征值优化 tensor(0.6693, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7732e+00,  1.2239e-01, -7.3428e-01, -2.9341e-01, -1.2662e+00,
         -5.7803e-01, -1.2809e+00,  2.4929e-01, -2.0364e+00, -5.0555e-01,
         -2.8297e-01,  1.7049e-01, -5.6785e-03, -7.0018e-02,  4.0162e-01,
         -5.3755e-02, -5.7152e-02, -4.4089e-02, -2.0626e-01,  3.0086e-02,
         -9.5897e-03, -8.3953e-02,  2.5103e-01,  1.1895e-02, -7.9775e-02,
         -6.0399e-02,  2.9013e-02, -9.0599e-02, -4.3157e-02, -6.1673e-01,
         -1.9009e-01, -1.0967e-01, -2.7191e-02, -1.7817e-02, -5.1624e-03,
          1.1004e-01, -5.9367e-02,  3.8810e-02,  5.0765e-01, -1.0018e-02,
         -5.5733e-02,  2.6412e-01,  6.2824e-02,  1.0843e-01,  1.0833e-01,
          2.7853e-01,  2.8635e-02, -5.1283e-01,  6.8498e-03, -6.1138e-01,
          1.1512e-02, -1.2697e-01,  8.9105e-01,  8.9548e-03,  6.9673e-02,
         -1.8838e-02, -2.1801e-01,  6.2627e-02, -1.7000e-01,  5.2701e-01,
          2.5536e-01,  1.1259e-01,  3.4394e-01,  1.2062e-01, -3.1701e-01,
         -1.6192e-01,  7.1486e-02, -3.8946e-03,  3.2697e-01,  1.5421e-01,
         -5.6389e-01, -1.3151e-04]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
172000 特征值优化 tensor(14.2175, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0304, -0.7944,  0.7304, -0.5617, -0.7678,  1.3137,  1.1185, -0.3117,
         -0.6987, -1.4492,  0.6082, -1.1534,  1.9702, -2.1605,  1.0040,  0.9221,
          0.7503,  1.2754,  0.8327, -0.3304,  1.1670,  0.1087,  0.0391, -0.0269,
         -0.3589, -0.2923, -0.4530,  0.7203, -0.0225,  0.2676,  0.3741,  0.2370,
         -0.0626,  0.8533, -0.0987, -0.8747,  0.2216,  0.4278, -1.0291,  0.2129,
         -1.4861, -0.2927, -0.3357, -0.7038, -0.5711, -0.0500,  0.5274,  0.9166,
         -0.0617,  0.7450,  1.7906, -0.6727, -0.0292,  0.4881,  0.5862, -1.0578,
          0.8281,  0.3413,  0.9944,  0.6239,  0.2631, -0.4686,  0.9863,  0.6944,
         -0.4218, -1.1390,  0.9320,  0.0403,  0.0851,  0.5114, -1.1224, -0.7143]],
       device='cuda:0') tensor(0.2139, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
173000 特征值优化 tensor(1.7840, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0505, -1.3304, -0.3175, -0.6798, -1.8444,  0.3627,  0.0563,  0.2053,
         -1.5419, -0.7261, -0.3737, -2.0065,  1.0575, -1.0790,  0.1496,  0.1743,
          0.0540,  0.3345,  0.2012, -0.0285,  0.4822, -0.1071,  0.0199, -0.0172,
          0.0218, -0.0931,  0.0215,  0.0844, -0.0101,  0.0559, -0.0166,  0.0153,
         -0.0492,  0.2317, -0.0550, -0.1429, -0.0096,  0.0424, -0.3117, -0.0106,
         -0.5823,  0.0714, -0.9455, -0.6562, -0.5268, -0.4092, -0.1895,  0.1819,
          0.3027,  0.4797,  0.9028, -0.2293,  0.3462,  0.1045, -0.0636, -0.4218,
          0.0728, -0.0022,  0.4414, -0.1731, -0.4022,  0.2023,  0.1513, -0.0447,
         -0.3612, -0.2295,  0.6142, -0.0221, -0.5526, -0.0662, -0.1103, -0.0677]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
174000 特征值优化 tensor(0.7746, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.2386, -1.3273, -0.5357, -0.0882, -2.1356, -0.3431, -0.5032,  0.3726,
         -1.3789, -0.8448, -0.5910, -1.6590,  0.8931, -0.5900,  0.0469,  0.2205,
          0.0061,  0.2107,  0.1698, -0.1389,  0.4527, -0.1142,  0.0933, -0.0072,
         -0.0788, -0.2320, -0.0064, -0.0269, -0.0513,  0.0737, -0.0174,  0.0592,
         -0.0754,  0.2357, -0.1417, -0.0226, -0.0239, -0.0507, -0.0962, -0.0875,
         -0.3362,  0.0431, -0.8405, -0.5588, -0.4206, -0.2790, -0.2096,  0.2651,
          0.1856,  0.4224,  0.4785, -0.0694,  0.5701,  0.0789, -0.0675, -0.4962,
         -0.0450,  0.0773,  0.5021, -0.2085, -0.0541,  0.0235,  0.0607, -0.0181,
          0.1848, -0.2302,  0.6849, -0.0083, -0.2594,  0.0646, -0.0590, -0.1506]],
       device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
175000 特征值优化 tensor(0.7261, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.2224e+00, -1.3155e+00, -5.5410e-01,  1.2233e-02, -1.9912e+00,
         -5.1884e-01, -5.0956e-01,  5.5230e-01, -1.3011e+00, -8.8151e-01,
         -5.5138e-01, -1.5625e+00,  8.8798e-01, -5.1215e-01,  1.5648e-01,
          2.0688e-01, -9.5308e-03,  2.6427e-01,  8.4228e-02, -1.5715e-01,
          4.4894e-01, -1.1310e-01,  1.2433e-01, -1.9686e-03, -1.5045e-01,
         -2.0839e-01,  2.5606e-02, -5.5140e-02, -6.0019e-02,  7.4680e-02,
         -5.1157e-04,  2.8233e-02, -4.3726e-02,  2.4825e-01, -1.7392e-01,
         -1.8650e-02, -4.4186e-02, -2.3690e-02, -9.4669e-02, -9.1635e-02,
         -2.7188e-01,  4.6901e-02, -8.0395e-01, -6.7953e-01, -3.2096e-01,
         -1.6066e-01, -2.5933e-01,  3.7600e-01,  4.9530e-03,  4.9041e-01,
          2.9223e-01,  5.1991e-05,  5.0745e-01,  1.1661e-01, -4.2332e-02,
         -4.5377e-01, -3.9969e-02,  8.8436e-02,  5.5428e-01, -2.7381e-01,
         -2.3300e-02, -2.1417e-03,  9.6294e-02, -2.9539e-04,  1.1999e-01,
         -1.6122e-01,  6.8928e-01, -4.1432e-02, -2.2059e-01,  1.2680e-01,
         -1.3030e-01, -1.7730e-01]], device='cuda:0') tensor(0.2032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
176000 特征值优化 tensor(0.7185, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.1921e+00, -1.3523e+00, -5.3231e-01, -2.2562e-02, -1.8474e+00,
         -5.2334e-01, -4.8507e-01,  5.6021e-01, -1.3114e+00, -8.9688e-01,
         -4.8425e-01, -1.6166e+00,  8.8293e-01, -4.8634e-01,  1.6082e-01,
          1.8399e-01, -3.4328e-02,  2.6965e-01,  1.0013e-01, -1.5257e-01,
          4.5818e-01, -1.0931e-01,  1.1547e-01, -1.6052e-03, -9.8960e-02,
         -2.0606e-01,  1.1863e-02, -4.3515e-02, -7.3501e-02,  6.6840e-02,
         -2.8681e-02,  3.2144e-02, -3.5701e-02,  2.4677e-01, -1.7519e-01,
         -2.0928e-02, -6.9643e-02, -5.3236e-02, -1.1137e-01, -6.4375e-02,
         -2.2403e-01,  4.6636e-02, -7.8481e-01, -7.3903e-01, -2.6587e-01,
         -4.1357e-02, -3.3247e-01,  3.8036e-01, -6.9721e-03,  5.0408e-01,
          2.4599e-01,  1.8378e-02,  3.2285e-01,  1.3262e-01, -1.0305e-01,
         -4.3720e-01, -1.1422e-02,  7.3151e-02,  5.2271e-01, -3.2832e-01,
          5.5785e-02, -9.3710e-03,  5.6391e-02,  1.9575e-02,  9.9009e-02,
         -1.3803e-01,  6.9569e-01, -4.6158e-02, -2.6699e-01,  1.3846e-01,
         -1.2418e-01, -1.9941e-01]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
177000 特征值优化 tensor(0.7111, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.1612, -1.4277, -0.5415, -0.0051, -1.7366, -0.5309, -0.4671,  0.5625,
         -1.2831, -0.7942, -0.4936, -1.5875,  0.8717, -0.4312,  0.1272,  0.2301,
          0.0086,  0.3315,  0.0397, -0.1478,  0.4698, -0.1101,  0.1132, -0.0054,
         -0.1480, -0.2050,  0.0267, -0.0345, -0.0823,  0.0679, -0.0272,  0.0592,
         -0.0268,  0.2471, -0.1668, -0.0173, -0.0595, -0.0461, -0.0864, -0.0593,
         -0.2318,  0.0405, -0.7519, -0.7301, -0.2843,  0.0531, -0.3921,  0.3814,
         -0.0123,  0.5067,  0.2057,  0.0345,  0.2150,  0.1683, -0.0956, -0.4475,
         -0.0200,  0.0829,  0.5582, -0.2697,  0.0196, -0.0225,  0.0326,  0.0322,
          0.1191, -0.1474,  0.7060, -0.0284, -0.1897,  0.1322, -0.1290, -0.1915]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
178000 特征值优化 tensor(0.7093, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.1063, -1.4669, -0.5358, -0.0120, -1.7507, -0.5296, -0.4563,  0.5223,
         -1.2902, -0.7829, -0.5173, -1.5881,  0.8593, -0.4050,  0.1032,  0.2518,
          0.0325,  0.3639,  0.0235, -0.1439,  0.4783, -0.1104,  0.1171, -0.0228,
         -0.1561, -0.1973,  0.0334, -0.0370, -0.0829,  0.0677, -0.0295,  0.0532,
         -0.0291,  0.2468, -0.1700, -0.0175, -0.0413, -0.0398, -0.0890, -0.0581,
         -0.2513,  0.0385, -0.7474, -0.7095, -0.2838,  0.0810, -0.4152,  0.3765,
         -0.0134,  0.5082,  0.2037,  0.0372,  0.2189,  0.1632, -0.0813, -0.4816,
         -0.0270,  0.0867,  0.5569, -0.2648, -0.0227, -0.0369,  0.0407,  0.0163,
          0.1144, -0.1458,  0.7084, -0.0256, -0.1700,  0.1549, -0.1310, -0.1934]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
179000 特征值优化 tensor(0.7092, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0701, -1.4421, -0.5363, -0.0121, -1.7509, -0.5281, -0.4560,  0.5097,
         -1.2880, -0.7836, -0.5193, -1.5883,  0.8504, -0.4020,  0.1057,  0.2535,
          0.0311,  0.3648,  0.0258, -0.1429,  0.4721, -0.1096,  0.1182, -0.0210,
         -0.1523, -0.1989,  0.0335, -0.0381, -0.0832,  0.0680, -0.0294,  0.0536,
         -0.0279,  0.2462, -0.1703, -0.0185, -0.0398, -0.0414, -0.0887, -0.0584,
         -0.2527,  0.0385, -0.7471, -0.6968, -0.2784,  0.0857, -0.4112,  0.3762,
         -0.0134,  0.5079,  0.2028,  0.0378,  0.2189,  0.1636, -0.0840, -0.4835,
         -0.0251,  0.0851,  0.5574, -0.2609, -0.0282, -0.0352,  0.0429,  0.0125,
          0.1123, -0.1453,  0.7116, -0.0272, -0.1617,  0.1518, -0.1345, -0.1913]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
180000 特征值优化 tensor(0.7092, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0325, -1.4138, -0.5366, -0.0122, -1.7519, -0.5266, -0.4548,  0.5050,
         -1.2873, -0.7838, -0.5202, -1.5896,  0.8410, -0.3935,  0.1096,  0.2577,
          0.0248,  0.3656,  0.0213, -0.1428,  0.4646, -0.1100,  0.1188, -0.0212,
         -0.1524, -0.1989,  0.0339, -0.0378, -0.0831,  0.0679, -0.0291,  0.0495,
         -0.0249,  0.2462, -0.1702, -0.0193, -0.0381, -0.0417, -0.0886, -0.0581,
         -0.2538,  0.0388, -0.7467, -0.6833, -0.2740,  0.0901, -0.4059,  0.3765,
         -0.0141,  0.5091,  0.2025,  0.0375,  0.2177,  0.1641, -0.0830, -0.4852,
         -0.0265,  0.0842,  0.5577, -0.2609, -0.0310, -0.0361,  0.0446,  0.0101,
          0.1119, -0.1451,  0.7137, -0.0282, -0.1548,  0.1511, -0.1358, -0.1901]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
181000 特征值优化 tensor(0.7091, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0007, -1.3867, -0.5363, -0.0115, -1.7527, -0.5259, -0.4529,  0.5053,
         -1.2869, -0.7839, -0.5223, -1.5898,  0.8329, -0.3902,  0.1134,  0.2581,
          0.0216,  0.3649,  0.0172, -0.1420,  0.4584, -0.1098,  0.1181, -0.0217,
         -0.1532, -0.1983,  0.0333, -0.0377, -0.0835,  0.0677, -0.0288,  0.0460,
         -0.0239,  0.2467, -0.1700, -0.0193, -0.0373, -0.0410, -0.0882, -0.0587,
         -0.2547,  0.0386, -0.7462, -0.6728, -0.2690,  0.0936, -0.4016,  0.3766,
         -0.0131,  0.5085,  0.2033,  0.0379,  0.2167,  0.1644, -0.0801, -0.4845,
         -0.0261,  0.0848,  0.5557, -0.2610, -0.0344, -0.0359,  0.0473,  0.0089,
          0.1120, -0.1449,  0.7137, -0.0284, -0.1502,  0.1520, -0.1359, -0.1897]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
182000 特征值优化 tensor(16.9258, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9545,  0.1309,  0.8137,  0.8380, -1.3945, -1.2673, -0.5044, -1.9562,
          0.7594,  0.5469, -0.6590, -0.2654, -0.2453,  0.6210,  0.1657, -0.6967,
          0.5670, -1.5545, -1.0868,  1.9064,  0.7117,  0.1799, -0.4859,  0.7708,
          0.2667, -1.7501, -0.6453,  0.4215, -0.0696,  1.1097,  0.5323, -1.1545,
         -0.7842, -1.3991,  1.1379,  0.0709, -0.6604, -1.4387,  0.0847,  0.0217,
          0.2513,  0.0885,  0.6228,  0.2825, -0.1244,  1.8107,  0.6751, -1.2632,
         -2.8189,  0.3586, -1.0425,  0.0626, -0.8394,  0.0417,  0.8200,  0.5445,
         -0.3381,  0.6969, -0.7125,  0.4724, -0.2590, -1.8227,  0.7132,  1.3968,
          0.2366,  1.0349,  1.2731, -0.4929, -0.0383,  0.0502, -1.2633,  0.7393]],
       device='cuda:0') tensor(0.2037, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
183000 特征值优化 tensor(2.5490, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.8631, -0.9438, -0.3297,  0.4535, -1.2053, -1.2164, -1.4557, -0.7849,
         -0.1775, -0.0713, -1.4395, -0.8157,  0.1544,  0.0770,  0.0095, -0.3730,
          0.2704, -0.4550, -0.4004,  0.9665,  0.0187,  0.0442, -0.0058,  0.0706,
         -0.0670, -0.5900, -0.0667,  0.0558, -0.0672,  0.4683,  0.1426, -0.1846,
         -0.0547, -0.4114,  0.3191,  0.2150, -0.0352, -0.6793, -0.0918,  0.0699,
          0.3342, -0.0437, -0.3248,  1.1032,  0.7078,  0.9077,  0.0406, -0.6644,
         -1.9167,  1.1269, -0.2927,  0.2248, -0.4481,  0.0148,  0.7810,  0.1023,
         -0.3571,  0.4574, -0.1614, -0.0772, -0.3215, -0.7131,  0.4754,  0.4639,
         -0.4457,  0.5325,  0.4878, -0.3921, -0.2399,  0.1364, -0.4333,  0.3346]],
       device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
184000 特征值优化 tensor(0.7591, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0088, -0.9425, -0.7581,  0.5497, -1.2620, -1.4422, -1.6430, -0.4375,
         -0.0319,  0.2929, -1.3243, -0.6107,  0.1854,  0.0601,  0.0584, -0.5016,
          0.1679, -0.2785, -0.1585,  0.7345, -0.0306, -0.0435, -0.0920,  0.2591,
          0.0528, -0.2604,  0.0470,  0.0748, -0.0501,  0.3735,  0.1269, -0.1201,
         -0.0193, -0.2540,  0.0533,  0.0467,  0.0884, -0.4239, -0.1234, -0.0857,
          0.1969, -0.0648, -0.3813,  0.9240,  0.6543,  0.7796,  0.0050, -0.6363,
         -1.2862,  0.8651,  0.1390,  0.0646, -0.1510, -0.0893,  0.7310, -0.2547,
          0.4692,  0.1511, -0.2208, -0.1370,  0.1471, -0.4302,  0.5627,  0.2056,
         -0.0443,  0.1156,  0.2351, -0.0580,  0.1488,  0.0966, -0.0929,  0.1354]],
       device='cuda:0') tensor(0.2037, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
185000 特征值优化 tensor(0.7055, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9648e+00, -8.9017e-01, -7.8823e-01,  5.7866e-01, -1.2724e+00,
         -1.5262e+00, -1.5959e+00, -3.9557e-01,  3.8045e-02,  3.7276e-01,
         -1.1003e+00, -6.6792e-01,  1.8629e-01,  5.7723e-02, -5.0202e-03,
         -5.0306e-01,  1.6311e-01, -2.6394e-01, -1.4179e-01,  6.7112e-01,
         -3.1923e-02, -7.2646e-02, -1.3102e-01,  2.5616e-01,  7.3881e-02,
         -2.1699e-01,  9.6295e-02,  1.0682e-01, -1.0857e-01,  3.8315e-01,
          1.2900e-01, -1.5618e-01, -4.1861e-03, -2.5732e-01, -1.7078e-02,
          5.3823e-02,  1.0400e-01, -4.1868e-01, -1.0908e-01, -6.9701e-02,
          1.6364e-01, -7.5655e-02, -3.0090e-01,  8.3663e-01,  6.2534e-01,
          7.8505e-01, -1.2568e-02, -6.7473e-01, -1.1490e+00,  7.3899e-01,
          1.7600e-01,  9.3602e-02, -1.2240e-01, -1.0535e-01,  7.3334e-01,
         -2.2084e-01,  4.8677e-01,  1.4782e-01, -2.1533e-01, -1.1813e-01,
          1.0373e-01, -3.6623e-01,  5.4364e-01,  1.6173e-01,  7.0706e-03,
          1.0205e-01,  2.0243e-01, -3.3452e-02,  3.5115e-02,  1.0160e-01,
         -5.1150e-05,  7.0759e-02]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
186000 特征值优化 tensor(0.6979, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9287, -0.8463, -0.8031,  0.6442, -1.2866, -1.5556, -1.4785, -0.4194,
         -0.0289,  0.3853, -0.9908, -0.6248,  0.1846,  0.0599,  0.0745, -0.5148,
          0.1794, -0.2452, -0.1040,  0.6401, -0.0305, -0.0797, -0.1544,  0.2436,
          0.0296, -0.2223,  0.1122,  0.1160, -0.0873,  0.3961,  0.1304, -0.1641,
         -0.0107, -0.2650,  0.0382,  0.0133,  0.0915, -0.4002, -0.1150, -0.0765,
          0.1580, -0.0677, -0.2632,  0.7558,  0.6361,  0.7696, -0.0152, -0.7209,
         -1.1375,  0.7496,  0.2366,  0.0494, -0.0869, -0.1215,  0.7129, -0.2218,
          0.5060,  0.1281, -0.1872, -0.1613,  0.0968, -0.3006,  0.5485,  0.1494,
          0.0949,  0.0708,  0.1447, -0.0229, -0.0215,  0.1138, -0.0812,  0.0988]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
187000 特征值优化 tensor(0.6922, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9023, -0.8121, -0.8182,  0.6037, -1.3168, -1.5439, -1.3036, -0.5084,
         -0.0323,  0.4588, -0.8782, -0.6227,  0.1845,  0.1008,  0.0429, -0.4875,
          0.1472, -0.1899, -0.0753,  0.6309, -0.0305, -0.0857, -0.1479,  0.2345,
          0.0350, -0.1890,  0.1344,  0.1353, -0.1032,  0.3941,  0.1307, -0.1666,
         -0.0156, -0.2624, -0.0191,  0.0569,  0.0198, -0.3603, -0.1376, -0.0594,
          0.1632, -0.0464, -0.2741,  0.7158,  0.6707,  0.7684, -0.0249, -0.7209,
         -1.1531,  0.7616,  0.2590,  0.0702, -0.0588, -0.1279,  0.6833, -0.2477,
          0.5046,  0.1313, -0.2271, -0.0824,  0.1027, -0.2395,  0.5292,  0.1371,
          0.0808,  0.1225,  0.1150, -0.0281, -0.0391,  0.1320, -0.0410,  0.0333]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
188000 特征值优化 tensor(0.6793, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.8796, -0.7687, -0.7918,  0.5878, -1.3112, -1.5709, -0.9941, -0.7465,
          0.0233,  0.4575, -0.6907, -0.6934,  0.1858,  0.0693,  0.0725, -0.4369,
          0.1399, -0.2491, -0.1242,  0.6337, -0.0298, -0.0690, -0.1607,  0.2922,
          0.0372, -0.2293,  0.1087,  0.0640, -0.0969,  0.3898,  0.1370, -0.1602,
         -0.0310, -0.2636,  0.0054,  0.0408, -0.1191, -0.2684, -0.1103, -0.0873,
          0.1642, -0.0802, -0.2882,  0.6991,  0.6923,  0.7437, -0.0184, -0.7257,
         -1.1493,  0.7774,  0.2282,  0.0438, -0.1078, -0.1107,  0.5830, -0.2039,
          0.5528,  0.1064, -0.2091, -0.1661,  0.1724, -0.1462,  0.4841,  0.1006,
         -0.0296,  0.0811,  0.1229,  0.0053, -0.0700,  0.1620,  0.0033,  0.1012]],
       device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
189000 特征值优化 tensor(0.6622, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.8087, -0.6677, -0.8962,  0.4135, -1.4363, -1.5521, -0.6767, -0.8208,
         -0.0092,  0.4595, -0.6306, -0.6559,  0.1918, -0.0231,  0.0151, -0.3693,
          0.1429, -0.2267, -0.0875,  0.6325, -0.0345, -0.0338, -0.1086,  0.3350,
          0.0603, -0.2278,  0.0822,  0.0293, -0.0867,  0.4076,  0.1486, -0.1331,
         -0.0230, -0.2639,  0.0195,  0.0469, -0.1566, -0.2080, -0.1191, -0.0596,
          0.1989, -0.0681, -0.3265,  0.6873,  0.6866,  0.6951, -0.0106, -0.6773,
         -1.2025,  0.7467,  0.2194,  0.0294, -0.1765, -0.0591,  0.4838, -0.2765,
          0.5083,  0.1258, -0.1870, -0.1599,  0.2619, -0.1077,  0.4550,  0.1098,
         -0.0320,  0.1138,  0.1253,  0.0020, -0.0961,  0.1461,  0.0257,  0.0531]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
190000 特征值优化 tensor(0.6796, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7253, -0.6088, -0.9665,  0.3473, -1.4858, -1.5785, -0.6241, -0.9403,
         -0.0659,  0.3759, -0.6913, -0.6354,  0.1880, -0.0500, -0.0034, -0.3615,
          0.1669, -0.2311, -0.0778,  0.6263, -0.0327, -0.0287, -0.0899,  0.3591,
          0.0422, -0.2199,  0.1029, -0.0394, -0.0702,  0.4401,  0.1478, -0.0841,
          0.0062, -0.2653,  0.0082,  0.0636, -0.1835, -0.2074, -0.1218, -0.0623,
          0.2102, -0.0511, -0.3644,  0.6909,  0.6908,  0.6655, -0.0141, -0.6851,
         -1.2679,  0.7401,  0.2410,  0.0281, -0.3007,  0.0107,  0.4161, -0.3350,
          0.5216,  0.1301, -0.1848, -0.1866,  0.4258, -0.1289,  0.4887,  0.0676,
         -0.0474,  0.1560,  0.1350, -0.0245, -0.0993,  0.1080,  0.0279,  0.0251]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
191000 特征值优化 tensor(0.6420, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7229e+00, -5.7885e-01, -1.1334e+00,  1.5361e-01, -1.4805e+00,
         -1.5813e+00, -6.2507e-01, -9.4295e-01, -6.0024e-02,  3.6571e-01,
         -6.7918e-01, -6.2670e-01,  1.9146e-01, -3.5080e-02, -1.3477e-03,
         -3.6025e-01,  1.5840e-01, -2.2048e-01, -5.4213e-02,  6.2046e-01,
         -3.4396e-02,  1.8719e-02, -4.6110e-02,  4.7144e-01,  1.8332e-02,
         -1.8086e-01, -6.4072e-03, -3.2326e-02, -6.2774e-02,  4.7762e-01,
          1.5448e-01, -1.1027e-01, -3.1923e-02, -2.6368e-01,  4.4637e-02,
          4.1959e-02, -1.8286e-01, -2.0349e-01, -1.4259e-01, -4.9576e-02,
          2.0927e-01, -3.1116e-02, -3.6344e-01,  6.8501e-01,  6.8477e-01,
          6.4710e-01, -9.6297e-03, -6.5838e-01, -1.3537e+00,  7.1685e-01,
          2.2266e-01, -1.3061e-02, -3.4039e-01,  1.5346e-02,  4.3216e-01,
         -3.5377e-01,  5.4669e-01,  1.0915e-01, -2.4434e-01, -1.2858e-01,
          4.1034e-01, -1.1977e-01,  5.1618e-01,  5.1613e-02, -1.1865e-01,
          2.2312e-01,  1.2832e-01, -3.8675e-02, -1.1362e-01,  1.0916e-01,
          6.3175e-02, -1.7215e-02]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
192000 特征值优化 tensor(0.6409, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7016, -0.5561, -1.1298,  0.0391, -1.4671, -1.5815, -0.6135, -0.9414,
         -0.0616,  0.3773, -0.6848, -0.6300,  0.1915, -0.0340,  0.0027, -0.3547,
          0.1491, -0.2160, -0.0542,  0.6209, -0.0341,  0.0515, -0.0217,  0.4778,
          0.0286, -0.1750,  0.0048, -0.0520, -0.0561,  0.4719,  0.1548, -0.1058,
         -0.0238, -0.2636,  0.0512,  0.0477, -0.1841, -0.2009, -0.1472, -0.0489,
          0.2115, -0.0285, -0.3746,  0.6852,  0.6850,  0.6368, -0.0096, -0.6368,
         -1.3437,  0.7071,  0.2084, -0.0425, -0.3480,  0.0172,  0.4252, -0.3593,
          0.5569,  0.1039, -0.2465, -0.1319,  0.4095, -0.1219,  0.5037,  0.0589,
         -0.1182,  0.2345,  0.1205, -0.0444, -0.1246,  0.1176,  0.0607, -0.0262]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
193000 特征值优化 tensor(0.6402, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6708, -0.5268, -1.1050, -0.0126, -1.4774, -1.5833, -0.6031, -0.9479,
         -0.0714,  0.3858, -0.6907, -0.6266,  0.1920, -0.0537, -0.0085, -0.3449,
          0.1415, -0.2102, -0.0510,  0.6197, -0.0337,  0.0647, -0.0161,  0.4800,
          0.0300, -0.1707,  0.0195, -0.0446, -0.0529,  0.4651,  0.1555, -0.1096,
         -0.0279, -0.2645,  0.0530,  0.0473, -0.1900, -0.1959, -0.1472, -0.0486,
          0.2170, -0.0268, -0.3898,  0.6841,  0.6838,  0.6222, -0.0108, -0.6376,
         -1.3312,  0.7076,  0.2105, -0.0581, -0.3380,  0.0110,  0.4181, -0.3676,
          0.5628,  0.0999, -0.2475, -0.1349,  0.4068, -0.1177,  0.5030,  0.0581,
         -0.1186,  0.2383,  0.1126, -0.0454, -0.1241,  0.1140,  0.0573, -0.0302]],
       device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
194000 特征值优化 tensor(0.6404, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6515, -0.5067, -1.1308, -0.0137, -1.4762, -1.5800, -0.5600, -0.9950,
         -0.0815,  0.3916, -0.7183, -0.6221,  0.1920, -0.0458,  0.0072, -0.3358,
          0.1445, -0.2113, -0.0636,  0.6151, -0.0335,  0.0670, -0.0294,  0.4895,
          0.0522, -0.1666,  0.0734, -0.0613, -0.0488,  0.4697,  0.1555, -0.1106,
         -0.0307, -0.2644,  0.0515,  0.0489, -0.2051, -0.1790, -0.1458, -0.0495,
          0.2318, -0.0280, -0.3963,  0.6812,  0.6809,  0.6143, -0.0136, -0.6326,
         -1.3368,  0.7054,  0.2117, -0.0624, -0.3343,  0.0097,  0.3848, -0.3916,
          0.5637,  0.0994, -0.2473, -0.1357,  0.4011, -0.1026,  0.4881,  0.0548,
         -0.1184,  0.2389,  0.1080, -0.0421, -0.1280,  0.1032,  0.0583, -0.0304]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
195000 特征值优化 tensor(0.6416, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6655, -0.5218, -1.2050, -0.0080, -1.4630, -1.5799, -0.5569, -1.0026,
         -0.0737,  0.3889, -0.7070, -0.6485,  0.1911, -0.0774,  0.0097, -0.3424,
          0.1492, -0.2150, -0.1022,  0.6197, -0.0344,  0.0585, -0.0258,  0.4642,
          0.0507, -0.1895,  0.0605, -0.0595, -0.0406,  0.4970,  0.1515, -0.1084,
         -0.0311, -0.2649,  0.0465,  0.0428, -0.2043, -0.1804, -0.1375, -0.0556,
          0.2305, -0.0356, -0.3937,  0.6862,  0.6859,  0.6170, -0.0084, -0.6499,
         -1.3837,  0.6990,  0.2374, -0.0589, -0.3364,  0.0148,  0.3770, -0.3877,
          0.5649,  0.0990, -0.2417, -0.1471,  0.4026, -0.1045,  0.4890,  0.0559,
         -0.1570,  0.2377,  0.1061, -0.0220, -0.1335,  0.1035,  0.0991, -0.0262]],
       device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
196000 特征值优化 tensor(0.6400, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6903e+00, -5.4673e-01, -1.2823e+00, -2.1494e-04, -1.4543e+00,
         -1.5799e+00, -5.7875e-01, -9.9296e-01, -6.7956e-02,  4.2273e-01,
         -7.0148e-01, -6.3910e-01,  1.9224e-01, -4.1599e-02,  2.3101e-02,
         -3.5161e-01,  1.5212e-01, -2.1706e-01, -1.0307e-01,  6.2119e-01,
         -3.3480e-02,  6.1277e-02, -2.6471e-02,  4.8730e-01,  5.3778e-02,
         -1.7062e-01,  8.6903e-02, -6.8567e-02, -5.8215e-02,  5.1027e-01,
          1.5108e-01, -1.0331e-01, -2.7263e-02, -2.6379e-01,  4.8827e-02,
          3.8749e-02, -1.9909e-01, -1.8656e-01, -1.4116e-01, -5.6104e-02,
          2.2526e-01, -3.2732e-02, -3.8198e-01,  6.8419e-01,  6.8395e-01,
          6.2714e-01, -9.5703e-03, -6.3678e-01, -1.4179e+00,  7.0359e-01,
          2.0468e-01, -5.1614e-02, -3.3535e-01,  1.3977e-02,  3.9589e-01,
         -3.8556e-01,  5.4822e-01,  1.0810e-01, -2.4067e-01, -1.4559e-01,
          4.0774e-01, -1.0609e-01,  4.9893e-01,  5.1957e-02, -1.4045e-01,
          2.3700e-01,  1.0195e-01, -3.3559e-02, -1.4427e-01,  1.0858e-01,
          9.1563e-02, -3.5938e-02]], device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
197000 特征值优化 tensor(0.6390, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7030, -0.5735, -1.3739, -0.0806, -1.4502, -1.5696, -0.5894, -0.9804,
         -0.0456,  0.4087, -0.6913, -0.6603,  0.1931, -0.0299,  0.0300, -0.3566,
          0.1553, -0.2170, -0.1039,  0.6204, -0.0346,  0.0734, -0.0237,  0.4744,
          0.0810, -0.1812,  0.0670, -0.0558, -0.0425,  0.5402,  0.1498, -0.1291,
         -0.0458, -0.2609,  0.0670,  0.0373, -0.1936, -0.1873, -0.1365, -0.0614,
          0.2241, -0.0416, -0.3801,  0.6897,  0.6881,  0.6494, -0.0152, -0.6525,
         -1.4767,  0.7049,  0.2381, -0.0743, -0.3124,  0.0050,  0.4030, -0.3768,
          0.5215,  0.1246, -0.2209, -0.1602,  0.3988, -0.0943,  0.5167,  0.0433,
         -0.2045,  0.2511,  0.1155, -0.0190, -0.1481,  0.1098,  0.1846, -0.0627]],
       device='cuda:0') tensor(0.2039, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
198000 特征值优化 tensor(0.6374, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6569, -0.5490, -1.4683, -0.2445, -1.4516, -1.5932, -0.5523, -1.0019,
         -0.0636,  0.4295, -0.7506, -0.6142,  0.1908, -0.0397,  0.0437, -0.3871,
          0.1455, -0.2019, -0.0647,  0.6247, -0.0331,  0.1191,  0.0041,  0.4615,
          0.0791, -0.1677,  0.0247, -0.0712, -0.0385,  0.5640,  0.1497, -0.0982,
         -0.0354, -0.2667,  0.0527,  0.0367, -0.2186, -0.1639, -0.1302, -0.0665,
          0.2436, -0.0414, -0.4042,  0.6979,  0.6977,  0.6383, -0.0193, -0.6560,
         -1.4931,  0.6704,  0.2295, -0.1191, -0.3435,  0.0204,  0.3753, -0.4050,
          0.5546,  0.1012, -0.1763, -0.1735,  0.3965, -0.1029,  0.4743,  0.0588,
         -0.1880,  0.2296,  0.1283, -0.0174, -0.1204,  0.1006,  0.1350, -0.0176]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
199000 特征值优化 tensor(0.6362, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6422, -0.5256, -1.4791, -0.3693, -1.4528, -1.6027, -0.5578, -1.0262,
         -0.0569,  0.4301, -0.7526, -0.5998,  0.1910, -0.0926,  0.0205, -0.3866,
          0.1633, -0.2078, -0.0595,  0.6228, -0.0331,  0.1477,  0.0125,  0.4655,
          0.0847, -0.1829,  0.0247, -0.0708, -0.0341,  0.5651,  0.1457, -0.0989,
         -0.0538, -0.2656,  0.0508,  0.0296, -0.2243, -0.1558, -0.1325, -0.0661,
          0.2495, -0.0416, -0.4112,  0.6954,  0.6950,  0.6268, -0.0191, -0.6478,
         -1.4988,  0.6680,  0.2409, -0.1526, -0.3805,  0.0476,  0.3977, -0.3487,
          0.5429,  0.1105, -0.1566, -0.1882,  0.4013, -0.0985,  0.4812,  0.0501,
         -0.2041,  0.2374,  0.1080, -0.0037, -0.0841,  0.0748,  0.1686, -0.0418]],
       device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
200000 特征值优化 tensor(0.6353, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6188, -0.5198, -1.4769, -0.3828, -1.4692, -1.6127, -0.5395, -1.0546,
         -0.0861,  0.4364, -0.7696, -0.5764,  0.1893, -0.1164,  0.0145, -0.3946,
          0.1473, -0.2020, -0.0535,  0.6196, -0.0303,  0.1533,  0.0215,  0.4569,
          0.0805, -0.1825,  0.0305, -0.0732, -0.0335,  0.5632,  0.1517, -0.0938,
         -0.0484, -0.2641,  0.0489,  0.0317, -0.2312, -0.1456, -0.1265, -0.0689,
          0.2554, -0.0487, -0.4162,  0.6954,  0.6951,  0.6224, -0.0239, -0.6431,
         -1.4918,  0.6619,  0.2377, -0.1565, -0.3910,  0.0481,  0.3895, -0.3472,
          0.5397,  0.1190, -0.1605, -0.1788,  0.4028, -0.0970,  0.4761,  0.0466,
         -0.1965,  0.2296,  0.1113, -0.0024, -0.0736,  0.0665,  0.1651, -0.0381]],
       device='cuda:0') tensor(0.2069, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
201000 特征值优化 tensor(0.6365, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6240, -0.5295, -1.4600, -0.3694, -1.4628, -1.6066, -0.5374, -1.0467,
         -0.0970,  0.4451, -0.7648, -0.5725,  0.1885, -0.0725,  0.0394, -0.3957,
          0.1400, -0.2004, -0.0531,  0.6214, -0.0304,  0.1503,  0.0125,  0.4475,
          0.0870, -0.1801,  0.0434, -0.0519, -0.0335,  0.5591,  0.1538, -0.0979,
         -0.0443, -0.2628,  0.0458,  0.0326, -0.2286, -0.1481, -0.1162, -0.0706,
          0.2544, -0.0611, -0.4161,  0.6972,  0.6970,  0.6260, -0.0230, -0.6456,
         -1.4858,  0.6661,  0.2350, -0.1526, -0.3916,  0.0412,  0.3897, -0.3445,
          0.5329,  0.1247, -0.1498, -0.1895,  0.4006, -0.0956,  0.4688,  0.0501,
         -0.2024,  0.2249,  0.1107, -0.0016, -0.0714,  0.0667,  0.1752, -0.0339]],
       device='cuda:0') tensor(0.2058, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
202000 特征值优化 tensor(0.6382, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6300, -0.5350, -1.4644, -0.3609, -1.4769, -1.5977, -0.5222, -1.0459,
         -0.1057,  0.4471, -0.7730, -0.5446,  0.1881, -0.0781,  0.0316, -0.3977,
          0.1404, -0.2034, -0.0525,  0.6217, -0.0312,  0.1488,  0.0257,  0.4401,
          0.0771, -0.1860,  0.0377, -0.0644, -0.0332,  0.5605,  0.1536, -0.0899,
         -0.0301, -0.2636,  0.0411,  0.0364, -0.2343, -0.1397, -0.1075, -0.0732,
          0.2594, -0.0668, -0.4131,  0.6977,  0.6975,  0.6298, -0.0228, -0.6461,
         -1.4834,  0.6631,  0.2351, -0.1509, -0.3876,  0.0453,  0.3750, -0.3585,
          0.5401,  0.1184, -0.1490, -0.1889,  0.3943, -0.0978,  0.4543,  0.0593,
         -0.1939,  0.2198,  0.0978,  0.0039, -0.0731,  0.0719,  0.1474, -0.0216]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
203000 特征值优化 tensor(0.6375, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6252, -0.5325, -1.4665, -0.3592, -1.4756, -1.6027, -0.5269, -1.0340,
         -0.1292,  0.4594, -0.7705, -0.5317,  0.1887, -0.0891,  0.0276, -0.3937,
          0.1395, -0.1967, -0.0516,  0.6240, -0.0312,  0.1474,  0.0194,  0.4494,
          0.0840, -0.1789,  0.0453, -0.0531, -0.0337,  0.5615,  0.1515, -0.0873,
         -0.0278, -0.2647,  0.0419,  0.0380, -0.2313, -0.1441, -0.1104, -0.0719,
          0.2566, -0.0662, -0.4189,  0.6997,  0.6996,  0.6275, -0.0222, -0.6483,
         -1.4870,  0.6646,  0.2374, -0.1503, -0.3865,  0.0460,  0.3839, -0.3544,
          0.5480,  0.1129, -0.1512, -0.1917,  0.3964, -0.1024,  0.4583,  0.0604,
         -0.1903,  0.2209,  0.1019,  0.0036, -0.0778,  0.0761,  0.1374, -0.0174]],
       device='cuda:0') tensor(0.2036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
204000 特征值优化 tensor(0.6398, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6214, -0.5292, -1.4644, -0.3654, -1.4706, -1.5907, -0.5164, -1.0165,
         -0.1493,  0.4512, -0.7721, -0.5149,  0.1882, -0.0723,  0.0292, -0.3884,
          0.1364, -0.1968, -0.0501,  0.6226, -0.0312,  0.1493,  0.0180,  0.4477,
          0.0831, -0.1847,  0.0454, -0.0544, -0.0340,  0.5612,  0.1514, -0.0753,
         -0.0128, -0.2658,  0.0408,  0.0482, -0.2344, -0.1409, -0.1089, -0.0726,
          0.2584, -0.0675, -0.4180,  0.6989,  0.6988,  0.6273, -0.0229, -0.6486,
         -1.4845,  0.6619,  0.2392, -0.1532, -0.3854,  0.0470,  0.3749, -0.3611,
          0.5647,  0.0969, -0.1525, -0.1946,  0.3919, -0.1089,  0.4464,  0.0725,
         -0.1881,  0.2097,  0.0940,  0.0136, -0.0834,  0.0849,  0.1152,  0.0052]],
       device='cuda:0') tensor(0.2056, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
205000 特征值优化 tensor(0.7363, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6210, -0.5235, -1.4625, -0.3718, -1.5007, -1.5771, -0.5048, -1.0154,
         -0.1511,  0.4681, -0.7503, -0.5342,  0.1884, -0.0407, -0.0070, -0.3801,
          0.1447, -0.2131, -0.0630,  0.6241, -0.0307,  0.1492,  0.0129,  0.4488,
          0.1053, -0.1736,  0.0275, -0.0272, -0.0342,  0.5611,  0.1504, -0.0871,
          0.0519, -0.2642,  0.0052,  0.1139, -0.2312, -0.1413, -0.0915, -0.0629,
          0.2589, -0.0691, -0.4205,  0.7002,  0.7004,  0.6224, -0.0224, -0.6467,
         -1.4856,  0.6704,  0.2403, -0.1507, -0.3734,  0.0427,  0.3696, -0.3522,
          0.5832,  0.0903, -0.0978, -0.2331,  0.3844, -0.1021,  0.4237,  0.0877,
         -0.1942,  0.1672,  0.0691,  0.0271, -0.0673,  0.0756,  0.1189,  0.0355]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
206000 特征值优化 tensor(0.6345, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6225e+00, -5.2554e-01, -1.4684e+00, -3.5739e-01, -1.4993e+00,
         -1.5739e+00, -4.9729e-01, -1.0208e+00, -1.6350e-01,  4.9290e-01,
         -7.5368e-01, -4.9014e-01,  1.8819e-01, -3.6470e-02, -2.1489e-04,
         -3.8501e-01,  1.4122e-01, -2.0901e-01, -6.2076e-02,  6.2319e-01,
         -3.0716e-02,  1.5462e-01,  2.0275e-02,  4.4917e-01,  9.7744e-02,
         -1.7347e-01,  3.3377e-02, -2.6986e-02, -3.3692e-02,  5.5154e-01,
          1.5021e-01, -8.8023e-02,  4.5716e-02, -2.6366e-01,  9.4033e-03,
          1.0860e-01, -2.3159e-01, -1.3882e-01, -9.2549e-02, -6.4260e-02,
          2.6023e-01, -7.0082e-02, -4.1893e-01,  6.9935e-01,  6.9957e-01,
          6.2335e-01, -2.2272e-02, -6.2792e-01, -1.4640e+00,  6.6613e-01,
          2.2102e-01, -1.5784e-01, -3.6904e-01,  4.1281e-02,  3.6710e-01,
         -3.5882e-01,  5.7898e-01,  9.3334e-02, -9.5914e-02, -2.3155e-01,
          3.8016e-01, -1.0106e-01,  4.2821e-01,  8.5006e-02, -1.8522e-01,
          1.6468e-01,  6.6676e-02,  2.0688e-02, -7.1153e-02,  7.7742e-02,
          9.4330e-02,  3.7862e-02]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
207000 特征值优化 tensor(0.6337, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6262, -0.5274, -1.4582, -0.3629, -1.4999, -1.5726, -0.5008, -1.0117,
         -0.1919,  0.5060, -0.7594, -0.4862,  0.1884, -0.0394, -0.0025, -0.3796,
          0.1409, -0.2083, -0.0617,  0.6232, -0.0305,  0.1464,  0.0144,  0.4479,
          0.1052, -0.1711,  0.0390, -0.0224, -0.0335,  0.5591,  0.1499, -0.0892,
          0.0414, -0.2628,  0.0108,  0.1085, -0.2292, -0.1420, -0.0908, -0.0630,
          0.2581, -0.0716, -0.4166,  0.6991,  0.6993,  0.6244, -0.0220, -0.6483,
         -1.4843,  0.6700,  0.2408, -0.1492, -0.3633,  0.0385,  0.3688, -0.3595,
          0.5781,  0.0939, -0.0819, -0.2465,  0.3831, -0.1015,  0.4310,  0.0831,
         -0.1743,  0.1605,  0.0599,  0.0251, -0.0755,  0.0821,  0.1031,  0.0440]],
       device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
208000 特征值优化 tensor(0.6329, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6164, -0.5182, -1.4615, -0.3570, -1.4898, -1.5817, -0.4957, -1.0289,
         -0.2199,  0.5000, -0.7615, -0.4617,  0.1884, -0.0410, -0.0035, -0.3897,
          0.1459, -0.2115, -0.0590,  0.6229, -0.0308,  0.1547,  0.0218,  0.4482,
          0.1013, -0.1722,  0.0447, -0.0330, -0.0335,  0.5494,  0.1479, -0.0968,
          0.0431, -0.2651,  0.0130,  0.1034, -0.2335, -0.1380, -0.0824, -0.0691,
          0.2602, -0.0813, -0.4222,  0.6999,  0.7000,  0.6198, -0.0221, -0.6271,
         -1.4604,  0.6654,  0.2206, -0.1583, -0.3659,  0.0414,  0.3708, -0.3569,
          0.5777,  0.0921, -0.1069, -0.2363,  0.3725, -0.0976,  0.4345,  0.0800,
         -0.1818,  0.1594,  0.0607,  0.0200, -0.0665,  0.0743,  0.0922,  0.0393]],
       device='cuda:0') tensor(0.2048, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
209000 特征值优化 tensor(0.6340, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6206, -0.5235, -1.4470, -0.3700, -1.4800, -1.5847, -0.4996, -1.0314,
         -0.2240,  0.4804, -0.7725, -0.4712,  0.1886, -0.0317,  0.0072, -0.3943,
          0.1490, -0.2129, -0.0619,  0.6228, -0.0308,  0.1490,  0.0136,  0.4468,
          0.1051, -0.1739,  0.0448, -0.0404, -0.0341,  0.5561,  0.1461, -0.1027,
          0.0309, -0.2655,  0.0195,  0.0879, -0.2328, -0.1400, -0.0830, -0.0685,
          0.2594, -0.0777, -0.4191,  0.6992,  0.6994,  0.6226, -0.0223, -0.6475,
         -1.4749,  0.6654,  0.2401, -0.1518, -0.3588,  0.0373,  0.3761, -0.3549,
          0.5815,  0.0895, -0.0976, -0.2416,  0.3723, -0.0951,  0.4419,  0.0725,
         -0.2080,  0.1697,  0.0494,  0.0298, -0.0745,  0.0789,  0.1311,  0.0318]],
       device='cuda:0') tensor(0.2036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
210000 特征值优化 tensor(0.6360, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6192, -0.5220, -1.4673, -0.3732, -1.4798, -1.5871, -0.4959, -1.0323,
         -0.2099,  0.4776, -0.7823, -0.4752,  0.1879, -0.0409,  0.0059, -0.3982,
          0.1496, -0.2111, -0.0530,  0.6231, -0.0315,  0.1500,  0.0088,  0.4383,
          0.1066, -0.1793,  0.0502, -0.0371, -0.0349,  0.5615,  0.1468, -0.1053,
          0.0206, -0.2653,  0.0235,  0.0723, -0.2327, -0.1391, -0.0825, -0.0636,
          0.2596, -0.0749, -0.4209,  0.6997,  0.6998,  0.6223, -0.0223, -0.6470,
         -1.4840,  0.6647,  0.2367, -0.1520, -0.3484,  0.0314,  0.3761, -0.3564,
          0.5788,  0.0936, -0.0685, -0.2529,  0.3720, -0.0922,  0.4442,  0.0678,
         -0.2338,  0.1768,  0.0428,  0.0364, -0.0803,  0.0824,  0.1613,  0.0216]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
211000 特征值优化 tensor(0.6415, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6235e+00, -5.2556e-01, -1.4758e+00, -3.7088e-01, -1.4529e+00,
         -1.5768e+00, -5.1309e-01, -1.0327e+00, -2.1568e-01,  4.8439e-01,
         -7.9826e-01, -4.7282e-01,  1.8764e-01, -1.8929e-02,  1.8928e-02,
         -4.0143e-01,  1.5979e-01, -2.2042e-01, -5.4929e-02,  6.2086e-01,
         -3.1460e-02,  1.5186e-01,  8.2871e-03,  4.3760e-01,  1.0350e-01,
         -1.7409e-01,  6.0361e-02, -3.7121e-02, -3.3356e-02,  5.6183e-01,
          1.4597e-01, -9.9331e-02, -6.4335e-04, -2.6483e-01,  3.2069e-02,
          4.2974e-02, -2.3141e-01, -1.4339e-01, -8.8972e-02, -6.3807e-02,
          2.5847e-01, -7.0221e-02, -4.1496e-01,  6.9764e-01,  6.9774e-01,
          6.2757e-01, -2.4160e-02, -6.4357e-01, -1.4847e+00,  6.6280e-01,
          2.3278e-01, -1.5230e-01, -3.4444e-01,  2.4468e-02,  3.7413e-01,
         -3.5906e-01,  5.7576e-01,  9.5415e-02, -8.7331e-02, -2.3539e-01,
          3.8746e-01, -9.6851e-02,  4.5980e-01,  6.2297e-02, -2.3817e-01,
          1.9237e-01,  2.9262e-02,  4.2908e-02, -8.8854e-02,  9.0515e-02,
          1.5915e-01,  1.2557e-02]], device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
212000 特征值优化 tensor(0.6497, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6204, -0.5248, -1.4790, -0.3661, -1.4427, -1.5668, -0.5292, -1.0631,
         -0.2262,  0.4799, -0.8114, -0.4521,  0.1882, -0.0460,  0.0255, -0.4044,
          0.1461, -0.2158, -0.0576,  0.6193, -0.0309,  0.1556,  0.0174,  0.4421,
          0.0991, -0.1733,  0.0784, -0.0232, -0.0368,  0.5577,  0.1489, -0.0970,
         -0.0142, -0.2641,  0.0397,  0.0287, -0.2259, -0.1468, -0.1031, -0.0715,
          0.2565, -0.0757, -0.4167,  0.6953,  0.6954,  0.6251, -0.0260, -0.6383,
         -1.4793,  0.6687,  0.2238, -0.1597, -0.3643,  0.0292,  0.3845, -0.3438,
          0.5682,  0.0962, -0.1101, -0.2129,  0.3902, -0.0942,  0.4578,  0.0733,
         -0.2234,  0.2033,  0.0192,  0.0526, -0.0933,  0.0965,  0.1457,  0.0052]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
213000 特征值优化 tensor(0.6339, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6182, -0.5240, -1.4666, -0.3674, -1.4778, -1.5924, -0.5146, -1.0521,
         -0.2599,  0.5077, -0.7716, -0.3964,  0.1883, -0.0298,  0.0523, -0.3930,
          0.1383, -0.2046, -0.0632,  0.6206, -0.0306,  0.1494,  0.0140,  0.4487,
          0.0912, -0.1710,  0.0776, -0.0272, -0.0338,  0.5613,  0.1540, -0.0960,
         -0.0382, -0.2645,  0.0614,  0.0308, -0.2225, -0.1571, -0.0996, -0.0725,
          0.2491, -0.0757, -0.4177,  0.6965,  0.6964,  0.6250, -0.0243, -0.6462,
         -1.4900,  0.6669,  0.2368, -0.1528, -0.3946,  0.0476,  0.3937, -0.3349,
          0.5480,  0.1088, -0.1261, -0.2082,  0.3958, -0.0982,  0.4779,  0.0480,
         -0.2089,  0.2406,  0.0539,  0.0333, -0.0628,  0.0647,  0.1479, -0.0324]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
214000 特征值优化 tensor(0.6392, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6156, -0.5226, -1.4471, -0.3685, -1.4641, -1.5819, -0.4969, -1.0111,
         -0.2956,  0.4783, -0.7866, -0.3605,  0.1886, -0.0730,  0.0263, -0.3850,
          0.1332, -0.1982, -0.0488,  0.6228, -0.0308,  0.1481,  0.0272,  0.4505,
          0.0932, -0.1654,  0.0827, -0.0325, -0.0348,  0.5569,  0.1516, -0.0754,
         -0.0106, -0.2657,  0.0497,  0.0494, -0.2331, -0.1421, -0.1122, -0.0737,
          0.2577, -0.0606, -0.4220,  0.6989,  0.6989,  0.6232, -0.0229, -0.6476,
         -1.4741,  0.6613,  0.2401, -0.1516, -0.3915,  0.0449,  0.3766, -0.3598,
          0.5694,  0.0939, -0.1395, -0.2148,  0.3819, -0.1095,  0.4449,  0.0734,
         -0.1502,  0.1986,  0.0556,  0.0323, -0.0750,  0.0852,  0.0786,  0.0180]],
       device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
215000 特征值优化 tensor(0.6737, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6166, -0.5211, -1.4650, -0.3469, -1.4964, -1.5848, -0.4925, -1.0134,
         -0.2986,  0.5209, -0.7788, -0.3926,  0.1884, -0.0402,  0.0115, -0.3890,
          0.1456, -0.2058, -0.0635,  0.6269, -0.0314,  0.1546,  0.0192,  0.4410,
          0.0978, -0.1670,  0.0687, -0.0151, -0.0331,  0.5520,  0.1522, -0.0707,
          0.0351, -0.2686,  0.0325,  0.0719, -0.2330, -0.1439, -0.0864, -0.0748,
          0.2617, -0.0981, -0.4195,  0.7000,  0.7001,  0.6220, -0.0228, -0.6288,
         -1.4647,  0.6670,  0.2209, -0.1583, -0.3851,  0.0563,  0.3750, -0.3441,
          0.5902,  0.0898, -0.1173, -0.2161,  0.3760, -0.1018,  0.4165,  0.0964,
         -0.1538,  0.1513,  0.0454,  0.0235, -0.0659,  0.0868,  0.0426,  0.0509]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
216000 特征值优化 tensor(0.6354, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6154, -0.5185, -1.4532, -0.3534, -1.4817, -1.5890, -0.4787, -1.0311,
         -0.2689,  0.5118, -0.7754, -0.4182,  0.1883, -0.0078,  0.0057, -0.3962,
          0.1498, -0.2172, -0.0616,  0.6238, -0.0307,  0.1558,  0.0155,  0.4354,
          0.0919, -0.1691,  0.0732, -0.0098, -0.0327,  0.5488,  0.1455, -0.0983,
          0.0358, -0.2673,  0.0294,  0.0784, -0.2318, -0.1414, -0.0674, -0.0554,
          0.2588, -0.0974, -0.4220,  0.6995,  0.6997,  0.6218, -0.0232, -0.6299,
         -1.4580,  0.6650,  0.2166, -0.1595, -0.3582,  0.0393,  0.3744, -0.3528,
          0.5917,  0.0833, -0.0860, -0.2456,  0.3642, -0.0976,  0.4389,  0.0774,
         -0.1740,  0.1861,  0.0387,  0.0550, -0.0704,  0.0803,  0.0817,  0.0199]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
217000 特征值优化 tensor(0.6368, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6154, -0.5160, -1.4409, -0.3848, -1.4622, -1.5974, -0.5164, -1.0647,
         -0.2997,  0.4976, -0.7844, -0.3784,  0.1884, -0.0745,  0.0371, -0.3943,
          0.1364, -0.2063, -0.0595,  0.6191, -0.0310,  0.1520,  0.0246,  0.4401,
          0.0967, -0.1685,  0.0865, -0.0240, -0.0345,  0.5553,  0.1556, -0.0968,
         -0.0452, -0.2645,  0.0517,  0.0329, -0.2251, -0.1552, -0.1060, -0.0689,
          0.2504, -0.0705, -0.4168,  0.6955,  0.6953,  0.6227, -0.0244, -0.6492,
         -1.4745,  0.6655,  0.2406, -0.1555, -0.4156,  0.0510,  0.3963, -0.3334,
          0.5349,  0.1175, -0.1451, -0.1902,  0.3968, -0.0972,  0.4809,  0.0428,
         -0.2131,  0.2089,  0.0421,  0.0533, -0.0495,  0.0573,  0.1816, -0.0149]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
218000 特征值优化 tensor(0.6392, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6204, -0.5254, -1.4538, -0.3672, -1.4717, -1.5957, -0.4922, -1.0112,
         -0.2957,  0.4893, -0.7922, -0.3789,  0.1885, -0.0587,  0.0339, -0.3860,
          0.1324, -0.1994, -0.0542,  0.6227, -0.0310,  0.1499,  0.0279,  0.4502,
          0.0830, -0.1716,  0.0665, -0.0440, -0.0335,  0.5581,  0.1530, -0.0772,
         -0.0118, -0.2663,  0.0492,  0.0418, -0.2304, -0.1469, -0.0881, -0.0760,
          0.2551, -0.0892, -0.4196,  0.6987,  0.6986,  0.6244, -0.0224, -0.6482,
         -1.4780,  0.6634,  0.2367, -0.1523, -0.3885,  0.0443,  0.3812, -0.3544,
          0.5699,  0.0951, -0.1293, -0.2104,  0.3794, -0.1100,  0.4530,  0.0699,
         -0.2015,  0.2039,  0.0528,  0.0393, -0.0727,  0.0863,  0.1322,  0.0124]],
       device='cuda:0') tensor(0.2075, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
219000 特征值优化 tensor(0.6358, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6215, -0.5231, -1.4702, -0.3409, -1.4901, -1.5786, -0.4766, -0.9941,
         -0.3133,  0.5237, -0.7836, -0.3569,  0.1879, -0.0288,  0.0238, -0.3862,
          0.1366, -0.2110, -0.0598,  0.6233, -0.0307,  0.1508,  0.0183,  0.4519,
          0.0927, -0.1640,  0.0655, -0.0236, -0.0333,  0.5521,  0.1492, -0.0649,
          0.0401, -0.2649,  0.0347,  0.0828, -0.2322, -0.1430, -0.0709, -0.0627,
          0.2581, -0.0934, -0.4197,  0.6997,  0.7000,  0.6229, -0.0225, -0.6288,
         -1.4683,  0.6683,  0.2201, -0.1538, -0.3788,  0.0486,  0.3693, -0.3553,
          0.5821,  0.0906, -0.0776, -0.2283,  0.3761, -0.1171,  0.4152,  0.0973,
         -0.1620,  0.1467,  0.0833,  0.0173, -0.0607,  0.0880,  0.0667,  0.0513]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
220000 特征值优化 tensor(0.6352, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6192, -0.5208, -1.4620, -0.3459, -1.4951, -1.5964, -0.4815, -1.0059,
         -0.2951,  0.5216, -0.7800, -0.3913,  0.1883, -0.0332,  0.0104, -0.3839,
          0.1387, -0.2117, -0.0587,  0.6235, -0.0306,  0.1537,  0.0140,  0.4352,
          0.0875, -0.1642,  0.0903,  0.0039, -0.0341,  0.5506,  0.1502, -0.0863,
          0.0285, -0.2689,  0.0278,  0.0580, -0.2307, -0.1449, -0.0513, -0.0483,
          0.2566, -0.1107, -0.4208,  0.6997,  0.6999,  0.6209, -0.0221, -0.6295,
         -1.4628,  0.6665,  0.2179, -0.1580, -0.3647,  0.0403,  0.3737, -0.3580,
          0.6055,  0.0743, -0.1049, -0.2365,  0.3693, -0.1082,  0.4332,  0.0856,
         -0.1661,  0.2059,  0.0502,  0.0562, -0.0691,  0.0871,  0.0563,  0.0067]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
221000 特征值优化 tensor(0.6366, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6198, -0.5126, -1.4571, -0.3667, -1.4680, -1.6564, -0.4931, -1.0374,
         -0.2942,  0.5239, -0.7792, -0.3350,  0.1897, -0.0931,  0.0301, -0.3952,
          0.1360, -0.1975, -0.0468,  0.6229, -0.0318,  0.1567,  0.0280,  0.4620,
          0.0912, -0.1638,  0.0713, -0.0284, -0.0354,  0.5487,  0.1502, -0.0951,
         -0.0412, -0.2617,  0.0446,  0.0456, -0.2281, -0.1479, -0.0860, -0.0695,
          0.2540, -0.0892, -0.4225,  0.6979,  0.6977,  0.6173, -0.0205, -0.6271,
         -1.4583,  0.6628,  0.2221, -0.1605, -0.3839,  0.0483,  0.3822, -0.3495,
          0.5197,  0.1463, -0.1720, -0.1687,  0.3788, -0.1023,  0.4562,  0.0657,
         -0.1451,  0.1555,  0.0594,  0.0339, -0.0612,  0.0728,  0.1445,  0.0151]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
222000 特征值优化 tensor(0.6337, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6103e+00, -5.1247e-01, -1.4475e+00, -3.7719e-01, -1.4851e+00,
         -1.5877e+00, -4.8872e-01, -1.0285e+00, -3.5615e-01,  4.4688e-01,
         -7.7868e-01, -3.6975e-01,  1.8810e-01, -1.4047e-02,  2.3583e-04,
         -3.9065e-01,  1.5091e-01, -2.1790e-01, -6.1081e-02,  6.2353e-01,
         -3.0699e-02,  1.5136e-01,  1.2845e-02,  4.4429e-01,  1.0878e-01,
         -1.6239e-01,  9.1065e-02, -3.4067e-02, -3.3333e-02,  5.5672e-01,
          1.4562e-01, -1.0299e-01,  3.9336e-02, -2.6650e-01,  5.0721e-02,
          3.9386e-02, -2.3005e-01, -1.4378e-01, -7.6490e-02, -6.8593e-02,
          2.5745e-01, -8.4059e-02, -4.2599e-01,  6.9997e-01,  7.0010e-01,
          6.1752e-01, -2.2158e-02, -6.4745e-01, -1.4771e+00,  6.6791e-01,
          2.3658e-01, -1.5435e-01, -3.6442e-01,  4.1947e-02,  3.7767e-01,
         -3.4650e-01,  6.1677e-01,  7.1533e-02, -1.0300e-01, -2.4193e-01,
          3.6736e-01, -9.5513e-02,  4.3624e-01,  7.6530e-02, -2.0114e-01,
          1.9783e-01,  6.9780e-02,  2.1436e-02, -6.1632e-02,  7.4882e-02,
          9.1210e-02,  2.5138e-02]], device='cuda:0') tensor(0.2059, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
223000 特征值优化 tensor(0.6553, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6150, -0.5187, -1.4466, -0.3640, -1.4548, -1.6299, -0.4911, -1.0532,
         -0.3298,  0.4872, -0.7962, -0.3602,  0.1875, -0.0358,  0.0333, -0.3953,
          0.1356, -0.2099, -0.0517,  0.6239, -0.0322,  0.1571,  0.0237,  0.4482,
          0.0948, -0.1601,  0.0761, -0.0226, -0.0341,  0.5471,  0.1520, -0.0862,
         -0.0164, -0.2646,  0.0416,  0.0489, -0.2261, -0.1487, -0.0786, -0.0711,
          0.2537, -0.1020, -0.4211,  0.6969,  0.6970,  0.6225, -0.0238, -0.6286,
         -1.4536,  0.6660,  0.2220, -0.1592, -0.3718,  0.0297,  0.3821, -0.3456,
          0.5376,  0.1352, -0.1248, -0.1889,  0.3757, -0.0981,  0.4563,  0.0737,
         -0.1180,  0.1253,  0.0582,  0.0320, -0.0802,  0.0894,  0.1017,  0.0604]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
224000 特征值优化 tensor(0.6299, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6157, -0.5213, -1.4564, -0.3646, -1.4735, -1.6227, -0.4949, -1.0353,
         -0.2659,  0.5395, -0.7794, -0.3765,  0.1883, -0.0411,  0.0450, -0.3953,
          0.1342, -0.1991, -0.0486,  0.6218, -0.0311,  0.1576,  0.0174,  0.4392,
          0.0974, -0.1782,  0.0561, -0.0360, -0.0332,  0.5488,  0.1527, -0.0970,
         -0.0342, -0.2627,  0.0438,  0.0789, -0.2260, -0.1509, -0.0695, -0.0696,
          0.2530, -0.1072, -0.4228,  0.6988,  0.6987,  0.6220, -0.0221, -0.6277,
         -1.4565,  0.6635,  0.2202, -0.1611, -0.3851,  0.0440,  0.3872, -0.3450,
          0.5389,  0.1261,  0.0023, -0.2948,  0.3812, -0.1000,  0.4632,  0.0602,
         -0.1430,  0.1472,  0.0576,  0.0312, -0.0666,  0.0748,  0.1191,  0.0270]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
225000 特征值优化 tensor(0.6390, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6095, -0.5122, -1.4561, -0.3556, -1.4791, -1.5854, -0.4797, -1.0208,
         -0.3099,  0.5018, -0.7920, -0.3395,  0.1880, -0.0342,  0.0096, -0.3930,
          0.1426, -0.2074, -0.0486,  0.6222, -0.0307,  0.1549,  0.0193,  0.4523,
          0.0967, -0.1601,  0.0860, -0.0226, -0.0332,  0.5481,  0.1497, -0.0985,
          0.0131, -0.2661,  0.0431,  0.0363, -0.2318, -0.1416, -0.1043, -0.0651,
          0.2579, -0.0609, -0.4252,  0.6988,  0.6990,  0.6170, -0.0231, -0.6283,
         -1.4570,  0.6655,  0.2202, -0.1573, -0.3483,  0.0273,  0.3760, -0.3580,
          0.5655,  0.0979, -0.1541, -0.1755,  0.3639, -0.0970,  0.4450,  0.0724,
         -0.1660,  0.1750,  0.0683,  0.0308, -0.0847,  0.0907,  0.0970,  0.0274]],
       device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
226000 特征值优化 tensor(0.6398, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6185, -0.5207, -1.4444, -0.3675, -1.4774, -1.5820, -0.4854, -1.0025,
         -0.3012,  0.4909, -0.7909, -0.3564,  0.1880, -0.0270,  0.0226, -0.3884,
          0.1369, -0.2050, -0.0491,  0.6227, -0.0310,  0.1499,  0.0203,  0.4387,
          0.1024, -0.1692,  0.0823, -0.0308, -0.0334,  0.5550,  0.1503, -0.0901,
          0.0091, -0.2659,  0.0471,  0.0377, -0.2290, -0.1453, -0.1035, -0.0701,
          0.2556, -0.0700, -0.4203,  0.6994,  0.6996,  0.6225, -0.0225, -0.6476,
         -1.4731,  0.6655,  0.2360, -0.1521, -0.3441,  0.0274,  0.3733, -0.3640,
          0.5664,  0.0969, -0.1369, -0.1940,  0.3705, -0.1031,  0.4425,  0.0760,
         -0.1874,  0.1925,  0.0534,  0.0478, -0.0883,  0.0969,  0.1208,  0.0213]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
227000 特征值优化 tensor(0.6378, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6205e+00, -5.2248e-01, -1.4528e+00, -3.4701e-01, -1.4888e+00,
         -1.5845e+00, -4.9461e-01, -9.7900e-01, -2.5868e-01,  5.0225e-01,
         -7.7516e-01, -3.9372e-01,  1.8791e-01, -2.3272e-02,  2.8830e-02,
         -3.8358e-01,  1.3490e-01, -2.0918e-01, -6.2356e-02,  6.2305e-01,
         -3.1338e-02,  1.4561e-01, -1.2836e-03,  4.2900e-01,  1.0508e-01,
         -1.7759e-01,  7.8129e-02, -3.2760e-02, -3.2727e-02,  5.5776e-01,
          1.4939e-01, -7.0454e-02,  3.3221e-02, -2.6632e-01,  6.0147e-02,
          2.7965e-02, -2.2661e-01, -1.5129e-01, -1.0665e-01, -7.4233e-02,
          2.5247e-01, -6.8731e-02, -4.1998e-01,  6.9970e-01,  6.9994e-01,
          6.2239e-01, -2.1830e-02, -6.4885e-01, -1.4828e+00,  6.7097e-01,
          2.3496e-01, -1.4750e-01, -3.7277e-01,  4.6065e-02,  3.7514e-01,
         -3.5456e-01,  5.6866e-01,  9.5525e-02, -1.0725e-01, -2.2138e-01,
          3.8220e-01, -1.1880e-01,  4.2404e-01,  9.4551e-02, -2.5318e-01,
          2.3332e-01,  4.7143e-03,  6.9411e-02, -7.0958e-02,  9.4178e-02,
          1.6981e-01, -1.6261e-02]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
228000 特征值优化 tensor(16.1317, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0858,  0.3481,  0.6265, -1.0219, -2.5759,  0.3318,  1.5369, -0.4980,
         -1.0138, -1.5486,  1.1644,  0.2307, -0.4465, -0.5560, -1.2017,  0.1672,
          0.2395, -0.1737,  0.5611,  0.3625, -1.2585,  0.3806, -0.3740, -1.2898,
         -1.6032, -0.3911, -1.0150,  0.6283,  0.7457, -0.5573, -1.1466,  0.6871,
         -1.3754, -1.0526,  0.6767, -0.5743, -0.3844, -1.1715, -0.7103,  0.4750,
          0.5068, -0.5812,  0.7811,  0.8343,  0.0676, -0.0126,  1.2719,  1.6646,
          0.2249,  0.7007, -0.1728,  0.7483, -0.4330,  1.2696, -0.0553,  0.6722,
          0.2210, -0.7755,  0.4885, -0.5286, -0.3160, -1.1961, -0.2394,  1.0668,
          1.9697, -0.0971,  0.8080,  0.0512, -1.6932, -0.7770, -0.1078, -0.8660]],
       device='cuda:0') tensor(0.2084, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
229000 特征值优化 tensor(1.3032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0145e+00,  5.3770e-01, -4.2641e-01, -4.1355e-01, -3.4943e+00,
         -5.9735e-01,  4.3400e-01,  3.0003e-01, -2.0555e+00, -7.3174e-01,
          1.8944e-01, -7.5369e-01,  1.9508e-01,  2.6789e-02, -4.2104e-01,
          9.6879e-04,  2.6742e-04,  9.7660e-02, -7.2077e-02,  4.0099e-03,
         -4.1843e-01,  1.9396e-01, -3.4033e-02, -3.2117e-01, -6.1458e-01,
          9.5194e-02, -8.8332e-02, -8.0554e-02,  5.0163e-02, -6.8961e-02,
         -3.2954e-01,  2.3438e-01, -5.8639e-01, -2.2178e-01,  6.1448e-02,
         -2.9858e-02,  2.9404e-02, -1.8990e-01, -1.8970e-01,  4.9053e-02,
          1.2341e-01,  1.4512e-01, -1.1234e-01,  4.4775e-01, -3.4649e-01,
         -2.1433e-01,  4.1475e-01,  6.3891e-01, -1.6419e-01,  1.4274e-01,
          3.3483e-01,  1.1274e-02, -1.1668e+00,  1.3212e+00,  3.0211e-01,
          4.2080e-01, -6.3756e-01, -1.2005e-01,  1.9481e-01, -3.1320e-01,
         -7.0575e-01, -1.0688e-01, -4.3253e-01,  2.6343e-01,  1.0310e+00,
          1.8476e-01,  2.4522e-01, -8.9600e-02, -1.2087e+00,  1.8113e-01,
         -5.2853e-01,  9.6203e-02]], device='cuda:0') tensor(0.2064, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
230000 特征值优化 tensor(0.8156, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1277,  0.6938, -0.7441, -0.5873, -3.3156, -0.6424,  0.0743,  0.2040,
         -2.2198, -0.5066, -0.0487, -1.2982,  0.1658,  0.1001, -0.3032, -0.0575,
          0.0727,  0.1339, -0.0049,  0.0538, -0.3389,  0.1769, -0.0277, -0.2800,
         -0.4598,  0.1818, -0.1581, -0.1920,  0.0280, -0.0701, -0.3784,  0.3805,
         -0.5447, -0.2472, -0.0293, -0.0263, -0.1164, -0.0671, -0.1492,  0.1065,
          0.2229,  0.1093, -0.0132,  0.5900, -0.4785,  0.0062,  0.2464,  0.5078,
         -0.2346,  0.2390,  0.4632, -0.0167, -1.1102,  1.1779,  0.4030,  0.3967,
         -0.7819, -0.1009,  0.2253, -0.5617, -0.6157, -0.0577, -0.4138,  0.2285,
          1.0397,  0.1118, -0.0846, -0.0531, -1.2229,  0.2709, -0.3355,  0.0590]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
231000 特征值优化 tensor(0.7309, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0382,  0.5766, -0.8402, -0.6005, -2.8924, -0.5669,  0.0190,  0.1360,
         -2.2813, -0.5373, -0.1194, -1.3392,  0.1606, -0.0096, -0.1877, -0.1186,
          0.0529,  0.1532, -0.0474,  0.0539, -0.3318,  0.1889, -0.0359, -0.2799,
         -0.4795,  0.2269, -0.1552, -0.2412,  0.0519, -0.0630, -0.5280,  0.3510,
         -0.5681, -0.2274, -0.0783, -0.0629, -0.1047, -0.0838, -0.1418,  0.1042,
          0.2081,  0.1106, -0.0246,  0.5863, -0.4283,  0.1000,  0.1805,  0.4795,
         -0.2090,  0.2247,  0.4365, -0.0122, -0.6831,  0.5472,  0.5052,  0.4621,
         -0.6829, -0.1259,  0.1820, -0.5618, -0.8471,  0.0727, -0.3070,  0.1759,
          1.0813,  0.1329, -0.0946, -0.0150, -1.2902,  0.3452, -0.2947,  0.0377]],
       device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
232000 特征值优化 tensor(0.7076, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9939,  0.5166, -0.9131, -0.6494, -2.6463, -0.5195,  0.0068,  0.1552,
         -2.3707, -0.6111, -0.1329, -1.3677,  0.1549, -0.0488, -0.1785, -0.0727,
          0.0888,  0.1681, -0.0825,  0.0510, -0.3293,  0.1927, -0.0390, -0.2812,
         -0.5019,  0.2617, -0.1544, -0.2393,  0.0558, -0.0645, -0.5421,  0.2874,
         -0.5316, -0.2160, -0.0789, -0.0590, -0.0959, -0.0948, -0.1351,  0.1093,
          0.2136,  0.1075, -0.0342,  0.5989, -0.4246,  0.1303,  0.1624,  0.5114,
         -0.1620,  0.1781,  0.4400, -0.0040, -0.2538,  0.2310,  0.5924,  0.5373,
         -0.6838, -0.1155,  0.1673, -0.5637, -0.9354,  0.1300, -0.4494,  0.2316,
          1.1144,  0.1376, -0.0708, -0.0153, -1.4916,  0.4300, -0.2757,  0.0415]],
       device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
233000 特征值优化 tensor(0.7001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0087e+00,  4.7733e-01, -9.3170e-01, -6.5129e-01, -2.4941e+00,
         -4.9464e-01,  1.0269e-01, -3.3900e-03, -2.4321e+00, -6.9203e-01,
         -1.9177e-01, -1.3715e+00,  1.5289e-01, -1.6069e-01, -7.5042e-02,
         -1.7609e-01,  1.7104e-02,  1.6917e-01, -1.2190e-01,  4.9668e-02,
         -3.2959e-01,  1.9270e-01, -3.4063e-02, -2.8584e-01, -5.1418e-01,
          2.6707e-01, -1.6238e-01, -2.3407e-01,  5.6661e-02, -6.2420e-02,
         -5.0344e-01,  3.0705e-01, -5.3361e-01, -2.0860e-01, -7.0458e-02,
         -7.3434e-02, -9.1309e-02, -1.1242e-01, -1.3034e-01,  1.1130e-01,
          2.0206e-01,  1.0553e-01, -3.0693e-02,  6.0620e-01, -4.3132e-01,
          1.4285e-01,  1.5824e-01,  5.1993e-01, -1.6622e-01,  1.8064e-01,
          4.4298e-01, -1.8366e-03, -2.5052e-01,  2.7171e-01,  5.9917e-01,
          5.2319e-01, -6.9223e-01, -1.0316e-01,  1.5996e-01, -5.6092e-01,
         -9.4628e-01,  1.2992e-01, -4.2348e-01,  1.9691e-01,  1.1321e+00,
          1.4495e-01, -4.9157e-02, -6.9233e-03, -1.5533e+00,  4.5795e-01,
         -2.5934e-01,  3.8756e-02]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
234000 特征值优化 tensor(0.6998, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0125e+00,  4.7487e-01, -9.3716e-01, -6.4941e-01, -2.4268e+00,
         -4.8994e-01,  1.1443e-01, -2.0603e-02, -2.5019e+00, -7.2552e-01,
         -2.3829e-01, -1.3788e+00,  1.5280e-01, -1.6023e-01, -7.1332e-02,
         -1.7834e-01,  1.3994e-02,  1.7376e-01, -1.2763e-01,  4.9730e-02,
         -3.3025e-01,  1.9255e-01, -3.5819e-02, -2.8580e-01, -5.2070e-01,
          2.7274e-01, -1.6619e-01, -2.3761e-01,  5.6546e-02, -6.3194e-02,
         -4.8769e-01,  3.0991e-01, -5.4737e-01, -2.0776e-01, -7.1385e-02,
         -7.2530e-02, -9.2102e-02, -1.1325e-01, -1.3168e-01,  1.1068e-01,
          2.0566e-01,  1.0606e-01, -2.8700e-02,  6.0615e-01, -4.3215e-01,
          1.4368e-01,  1.5862e-01,  5.2193e-01, -1.6768e-01,  1.8093e-01,
          4.4182e-01, -1.9618e-03, -2.6440e-01,  2.9474e-01,  6.1347e-01,
          5.5070e-01, -6.9176e-01, -1.0255e-01,  1.6244e-01, -5.6118e-01,
         -9.5627e-01,  1.3490e-01, -4.3530e-01,  2.0030e-01,  1.1706e+00,
          1.4282e-01, -2.7026e-02, -9.3780e-03, -1.5836e+00,  4.7373e-01,
         -2.5958e-01,  3.9381e-02]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
235000 特征值优化 tensor(0.6996, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0086e+00,  4.7778e-01, -9.3907e-01, -6.5077e-01, -2.3718e+00,
         -4.8579e-01,  1.2026e-01, -2.1759e-02, -2.5705e+00, -7.5311e-01,
         -2.5063e-01, -1.3881e+00,  1.5287e-01, -1.5843e-01, -6.3576e-02,
         -1.7781e-01,  1.2445e-02,  1.7866e-01, -1.2498e-01,  4.9685e-02,
         -3.3012e-01,  1.9231e-01, -3.8033e-02, -2.8724e-01, -5.2575e-01,
          2.7597e-01, -1.6748e-01, -2.4032e-01,  5.6528e-02, -6.3887e-02,
         -4.7268e-01,  3.1279e-01, -5.5480e-01, -2.0684e-01, -7.1421e-02,
         -7.2510e-02, -9.2921e-02, -1.1312e-01, -1.3340e-01,  1.0910e-01,
          2.0546e-01,  1.0679e-01, -3.0338e-02,  6.0525e-01, -4.3154e-01,
          1.4312e-01,  1.5868e-01,  5.2225e-01, -1.6785e-01,  1.7997e-01,
          4.4156e-01, -2.0759e-03, -2.6561e-01,  3.0889e-01,  6.1488e-01,
          5.5333e-01, -6.9290e-01, -1.0089e-01,  1.6524e-01, -5.6075e-01,
         -9.6555e-01,  1.3938e-01, -4.4982e-01,  2.0692e-01,  1.2092e+00,
          1.4103e-01, -7.5520e-03, -1.0649e-02, -1.6051e+00,  4.8757e-01,
         -2.5941e-01,  3.9485e-02]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
236000 特征值优化 tensor(0.6971, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.9855e-01,  5.0024e-01, -9.2496e-01, -6.6073e-01, -2.2693e+00,
         -4.3449e-01,  9.5808e-03,  1.1238e-01, -2.5984e+00, -7.4816e-01,
         -2.1708e-01, -1.3685e+00,  1.5072e-01, -9.5200e-02, -9.9563e-02,
         -9.0263e-02,  5.0956e-02,  1.9889e-01, -9.2422e-02,  1.4763e-02,
         -3.3258e-01,  1.9250e-01, -4.3949e-02, -2.8403e-01, -5.0949e-01,
          2.8464e-01, -1.5752e-01, -2.2900e-01,  5.6970e-02, -6.1719e-02,
         -4.4746e-01,  2.7703e-01, -5.5045e-01, -1.9475e-01, -8.6290e-02,
         -9.2748e-02, -9.7582e-02, -9.6138e-02, -1.2966e-01,  1.1574e-01,
          2.1963e-01,  1.0232e-01, -7.1150e-03,  5.8025e-01, -4.5701e-01,
          1.8342e-01,  1.3502e-01,  5.0404e-01, -1.6645e-01,  1.9341e-01,
          4.4416e-01, -2.5053e-03, -2.3036e-01,  3.1673e-01,  5.8170e-01,
          5.3602e-01, -7.3717e-01, -6.5959e-02,  1.9080e-01, -5.5629e-01,
         -9.3974e-01,  1.3083e-01, -4.5226e-01,  2.1876e-01,  1.2353e+00,
          1.2629e-01,  1.6398e-02, -4.0163e-02, -1.5234e+00,  4.4693e-01,
         -2.9073e-01,  5.9081e-02]], device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
237000 特征值优化 tensor(0.6942, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9973,  0.5086, -0.9158, -0.6441, -2.1585, -0.4127, -0.0423,  0.2201,
         -2.5646, -0.7678, -0.1386, -1.2970,  0.1534, -0.0880, -0.0978, -0.0650,
          0.0967,  0.2011, -0.0714,  0.0131, -0.3355,  0.1974, -0.0322, -0.2792,
         -0.5067,  0.2561, -0.1503, -0.2193,  0.0668, -0.0618, -0.4214,  0.2672,
         -0.5342, -0.1894, -0.0932, -0.0701, -0.1028, -0.0879, -0.1226,  0.1333,
          0.2246,  0.0905, -0.0062,  0.5769, -0.4548,  0.1763,  0.1357,  0.4969,
         -0.1634,  0.2036,  0.4010,  0.0202, -0.2313,  0.3457,  0.5601,  0.5127,
         -0.7133, -0.0752,  0.1616, -0.5637, -0.9212,  0.1184, -0.4501,  0.2287,
          1.2227,  0.0866, -0.0072, -0.0594, -1.4623,  0.4132, -0.3103,  0.0762]],
       device='cuda:0') tensor(0.2041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
238000 特征值优化 tensor(0.6953, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0024,  0.5066, -0.9221, -0.6537, -2.1368, -0.4136, -0.0322,  0.1986,
         -2.5605, -0.7122, -0.1542, -1.3096,  0.1536, -0.0831, -0.1008, -0.0719,
          0.0817,  0.2003, -0.0777,  0.0145, -0.3354,  0.1949, -0.0401, -0.2858,
         -0.4974,  0.2724, -0.1511, -0.1997,  0.0629, -0.0605, -0.4152,  0.2615,
         -0.5397, -0.1882, -0.0919, -0.0899, -0.1009, -0.0908, -0.1244,  0.1275,
          0.2229,  0.0916, -0.0073,  0.5735, -0.4560,  0.1807,  0.1390,  0.4969,
         -0.1588,  0.1967,  0.4279,  0.0069, -0.2295,  0.3489,  0.5582,  0.5102,
         -0.7347, -0.0621,  0.1751, -0.5624, -0.9191,  0.1193, -0.4404,  0.2220,
          1.2151,  0.0939, -0.0186, -0.0559, -1.4720,  0.4179, -0.3155,  0.0797]],
       device='cuda:0') tensor(0.2051, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
239000 特征值优化 tensor(0.6925, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0074,  0.5109, -0.9286, -0.6484, -2.1296, -0.4403,  0.0074,  0.1592,
         -2.5482, -0.7451, -0.1433, -1.3131,  0.1507, -0.1290, -0.0926, -0.1141,
          0.0589,  0.1582, -0.1290,  0.0176, -0.3348,  0.1967,  0.0183, -0.2768,
         -0.5096,  0.2535, -0.1814, -0.1769,  0.0644, -0.0603, -0.4141,  0.2693,
         -0.5247, -0.1949, -0.0816, -0.1097, -0.0958, -0.1004, -0.1218,  0.1266,
          0.2120,  0.0942, -0.0040,  0.5782, -0.4632,  0.1692,  0.1379,  0.4994,
         -0.1601,  0.1981,  0.4186,  0.0086, -0.2052,  0.3393,  0.5467,  0.4968,
         -0.7321, -0.0674,  0.1626, -0.5514, -0.9181,  0.1048, -0.4033,  0.2102,
          1.2021,  0.1240, -0.0511, -0.0223, -1.4742,  0.4347, -0.3109,  0.0719]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
240000 特征值优化 tensor(0.6945, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9994,  0.5027, -0.9258, -0.6598, -2.1373, -0.4209, -0.0699,  0.2394,
         -2.5464, -0.6916, -0.1135, -1.2489,  0.1510, -0.0864, -0.1026, -0.0589,
          0.1031,  0.1909, -0.0722,  0.0137, -0.3320,  0.1931, -0.0401, -0.2831,
         -0.4934,  0.2820, -0.1516, -0.2071,  0.0608, -0.0607, -0.4158,  0.2574,
         -0.5417, -0.1907, -0.1033, -0.0787, -0.1029, -0.0882, -0.1122,  0.1384,
          0.2260,  0.0826, -0.0065,  0.5805, -0.4581,  0.1808,  0.1362,  0.5047,
         -0.1653,  0.1939,  0.4440, -0.0027, -0.2317,  0.3504,  0.5484,  0.5301,
         -0.6961, -0.0828,  0.1817, -0.5670, -0.9155,  0.1164, -0.4412,  0.2263,
          1.1954,  0.0872, -0.0234, -0.0761, -1.4736,  0.4179, -0.3687,  0.1115]],
       device='cuda:0') tensor(0.2038, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
241000 特征值优化 tensor(0.6987, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0055,  0.5091, -0.9222, -0.6531, -2.1229, -0.4255, -0.0105,  0.1567,
         -2.5577, -0.6689, -0.1716, -1.3249,  0.1525, -0.0839, -0.1105, -0.0874,
          0.0634,  0.1957, -0.0961,  0.0145, -0.3339,  0.1950, -0.0310, -0.2822,
         -0.5183,  0.2635, -0.1497, -0.2028,  0.0615, -0.0611, -0.4120,  0.2578,
         -0.5327, -0.1912, -0.0806, -0.0956, -0.0936, -0.1017, -0.1239,  0.1210,
          0.2092,  0.0963, -0.0051,  0.5745, -0.4567,  0.1798,  0.1389,  0.4977,
         -0.1593,  0.1967,  0.4280,  0.0063, -0.2209,  0.3481,  0.5459,  0.5102,
         -0.7418, -0.0607,  0.1628, -0.5608, -0.9027,  0.1103, -0.4090,  0.2050,
          1.1956,  0.1265, -0.0624, -0.0312, -1.4713,  0.4231, -0.2851,  0.0568]],
       device='cuda:0') tensor(0.2108, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
242000 特征值优化 tensor(0.7057, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9919,  0.5098, -0.9262, -0.6516, -2.1200, -0.4359, -0.0583,  0.2320,
         -2.5498, -0.6899, -0.1100, -1.2145,  0.1467, -0.0890, -0.1031, -0.0748,
          0.0916,  0.1688, -0.1048,  0.0167, -0.3294,  0.1946, -0.0273, -0.2809,
         -0.5122,  0.2591, -0.1494, -0.1857,  0.0642, -0.0601, -0.4131,  0.2561,
         -0.5279, -0.1977, -0.0825, -0.0779, -0.0904, -0.1001, -0.1062,  0.1361,
          0.2086,  0.0734, -0.0104,  0.5814, -0.4616,  0.1712,  0.1386,  0.5025,
         -0.1578,  0.1935,  0.4263,  0.0061, -0.2073,  0.3418,  0.5361,  0.5036,
         -0.7049, -0.0899,  0.1750, -0.5773, -0.8969,  0.0970, -0.4248,  0.2313,
          1.1874,  0.0832, -0.0415, -0.0733, -1.4665,  0.4287, -0.3877,  0.1227]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
243000 特征值优化 tensor(0.6963, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9968,  0.4996, -0.9224, -0.6514, -2.1268, -0.4141, -0.0543,  0.2145,
         -2.5504, -0.6575, -0.1345, -1.2594,  0.1509, -0.0813, -0.1045, -0.0635,
          0.0900,  0.1959, -0.0792,  0.0139, -0.3330,  0.1950, -0.0420, -0.2862,
         -0.5027,  0.2733, -0.1418, -0.1927,  0.0618, -0.0611, -0.4136,  0.2495,
         -0.5407, -0.1890, -0.0913, -0.0911, -0.0968, -0.0962, -0.1129,  0.1359,
          0.2199,  0.0818, -0.0072,  0.5792, -0.4583,  0.1838,  0.1368,  0.4985,
         -0.1618,  0.1964,  0.4277,  0.0069, -0.2240,  0.3493,  0.5416,  0.5239,
         -0.7315, -0.0644,  0.1631, -0.5683, -0.9007,  0.1104, -0.4248,  0.2164,
          1.1889,  0.0882, -0.0650, -0.0630, -1.4827,  0.4209, -0.3248,  0.0915]],
       device='cuda:0') tensor(0.2032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
244000 特征值优化 tensor(0.6977, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9986,  0.5012, -0.9249, -0.6415, -2.1311, -0.4340, -0.0640,  0.2376,
         -2.5715, -0.6869, -0.1093, -1.2592,  0.1511, -0.0934, -0.1002, -0.0551,
          0.1046,  0.1886, -0.0805,  0.0137, -0.3331,  0.1962, -0.0293, -0.2833,
         -0.5067,  0.2637, -0.1482, -0.1844,  0.0639, -0.0611, -0.4142,  0.2483,
         -0.5380, -0.1935, -0.0882, -0.0757, -0.0983, -0.0938, -0.1145,  0.1338,
          0.2215,  0.0832, -0.0069,  0.5792, -0.4590,  0.1815,  0.1375,  0.4964,
         -0.1570,  0.2002,  0.4128,  0.0126, -0.2228,  0.3475,  0.5393,  0.5234,
         -0.6995, -0.0853,  0.1418, -0.5721, -0.8945,  0.1062, -0.4263,  0.2213,
          1.1725,  0.1051, -0.0749, -0.0458, -1.4773,  0.4176, -0.2985,  0.0746]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
245000 特征值优化 tensor(0.6976, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.9448e-01,  4.9453e-01, -9.2403e-01, -6.6199e-01, -2.1425e+00,
         -4.2194e-01, -6.4081e-02,  2.1515e-01, -2.5713e+00, -6.4378e-01,
         -1.2176e-01, -1.2622e+00,  1.4993e-01, -8.5248e-02, -1.0804e-01,
         -6.3741e-02,  9.0717e-02,  1.9317e-01, -8.0361e-02,  1.4097e-02,
         -3.3173e-01,  1.9308e-01, -4.4331e-02, -2.8580e-01, -5.0654e-01,
          2.8206e-01, -1.3789e-01, -1.9204e-01,  6.1183e-02, -6.1125e-02,
         -4.1698e-01,  2.4652e-01, -5.3969e-01, -1.9056e-01, -8.9466e-02,
         -8.9557e-02, -9.5723e-02, -9.8811e-02, -1.0932e-01,  1.3490e-01,
          2.1861e-01,  8.1920e-02, -8.3734e-03,  5.8184e-01, -4.5829e-01,
          1.8540e-01,  1.3545e-01,  5.0344e-01, -1.6470e-01,  1.9412e-01,
          4.4409e-01, -2.2057e-03, -2.2564e-01,  3.4621e-01,  5.3735e-01,
          5.2960e-01, -7.2020e-01, -7.0910e-02,  1.6737e-01, -5.6898e-01,
         -8.8793e-01,  1.0588e-01, -4.1407e-01,  2.1190e-01,  1.1842e+00,
          1.0379e-01, -7.0054e-02, -6.0653e-02, -1.4839e+00,  4.1874e-01,
         -3.2922e-01,  9.3782e-02]], device='cuda:0') tensor(0.2048, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
246000 特征值优化 tensor(14.2066, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1273,  2.5517, -1.4365, -0.5500, -1.1915,  1.3885, -0.6372,  1.8254,
         -0.8031, -0.5859, -1.4477, -1.4420,  0.6013, -1.1840,  0.5549,  0.7903,
         -2.0407, -1.0445,  1.4901, -0.5273,  0.2348, -0.3484, -0.1374,  0.6066,
         -0.2079,  0.4552,  0.4437,  1.2772,  0.1878,  1.2315, -0.2764, -0.2772,
          0.0888,  0.2087,  0.2910, -0.6749,  0.6316, -1.2499, -0.0580,  0.5006,
         -1.1347,  1.3316,  0.8180,  2.0219,  1.1278,  0.0607, -0.5112, -2.8181,
          0.9129, -1.3841,  1.4171, -0.6035, -0.7978, -0.5332,  1.3133, -0.8918,
          0.1835,  1.5586,  0.5624, -0.8292,  0.8946,  1.3237, -1.3046,  0.4927,
          1.2202,  0.2480,  0.5086, -1.5872,  0.1644, -0.2042, -0.8454, -0.4475]],
       device='cuda:0') tensor(0.2181, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
247000 特征值优化 tensor(1.4720, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.8793e-01,  1.6587e+00, -2.0051e+00,  2.4123e-01, -1.3026e+00,
          6.1321e-01, -1.3810e+00,  1.1388e+00, -1.8264e+00, -1.1598e+00,
         -2.2082e+00, -2.2298e+00,  5.1712e-02, -1.3066e-01,  6.6233e-02,
         -2.2552e-01, -8.2668e-01, -5.3529e-01,  5.6276e-01, -2.2684e-01,
          7.3044e-02, -2.3866e-01, -4.3614e-02,  8.6825e-02,  8.8988e-03,
          7.2242e-02, -7.7487e-02,  2.7379e-01,  2.0482e-01,  3.8249e-01,
         -4.6595e-02, -1.6602e-02,  7.8881e-03, -8.1422e-02,  3.1863e-02,
         -1.4502e-03,  6.4930e-02, -4.4257e-01,  2.0183e-01,  3.8878e-01,
         -5.2635e-01,  6.8317e-01,  1.9319e-02,  1.0681e+00,  1.9514e-01,
         -3.4395e-01, -3.8825e-01, -1.8788e+00,  1.5813e+00, -6.1166e-01,
          1.9591e+00, -5.9980e-01,  1.6254e-02, -1.6942e-01,  5.6243e-01,
          5.9821e-02, -4.8349e-01,  5.6094e-01,  2.5930e-01, -3.8854e-02,
          2.2693e-01,  3.8924e-01, -8.6800e-01, -5.2843e-03,  4.8114e-01,
         -2.5672e-01,  1.1004e-01, -6.4085e-01, -1.9807e-01, -6.3361e-01,
         -7.4126e-01, -6.0829e-01]], device='cuda:0') tensor(0.2180, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
248000 特征值优化 tensor(0.8762, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8132,  1.1744, -2.0964,  0.3077, -1.4845,  0.4408, -1.2452,  1.1512,
         -2.1676, -1.0304, -2.0424, -2.3429,  0.0256, -0.1127,  0.0558, -0.1632,
         -0.4673, -0.5318,  0.4667, -0.2544,  0.0767, -0.3113, -0.1449,  0.1145,
          0.0991,  0.1589, -0.1746,  0.1975,  0.1434,  0.4470, -0.0295,  0.0907,
         -0.0450, -0.0788,  0.1163, -0.0110,  0.1733, -0.3510,  0.1533,  0.2978,
         -0.4494,  0.6317,  0.1736,  0.7882,  0.0439, -0.5149, -0.1824, -1.7791,
          1.3498, -0.5532,  1.9898, -0.5302,  0.0441, -0.1726,  0.5106,  0.4213,
         -0.1720,  0.3660,  0.2503, -0.0226,  0.3171,  0.1387, -0.5425, -0.0398,
          0.7469, -0.2460,  0.0189, -0.3844,  0.0596, -0.5103, -0.6579, -0.5728]],
       device='cuda:0') tensor(0.2056, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
249000 特征值优化 tensor(0.7918, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7969,  0.9896, -1.9947,  0.2593, -1.4885,  0.3635, -1.2898,  1.1939,
         -2.1218, -1.0277, -1.8390, -2.0956,  0.0268, -0.0452,  0.0255, -0.1584,
         -0.4200, -0.3526,  0.5438, -0.2158,  0.0819, -0.3117, -0.1210,  0.3390,
          0.2469,  0.1787, -0.0368,  0.1500,  0.1069,  0.4453, -0.0278,  0.1154,
         -0.0555, -0.0671,  0.0818, -0.0283,  0.1941, -0.3454,  0.1364,  0.2964,
         -0.3799,  0.5868,  0.2271,  0.7407, -0.0061, -0.4491, -0.1716, -1.5615,
          1.1534, -0.6401,  1.6857, -0.3705,  0.0573, -0.1821,  0.5161,  0.4029,
         -0.0253,  0.2811,  0.2399, -0.0555,  0.2902,  0.0905, -0.5513, -0.0472,
          0.5445, -0.1119,  0.0088, -0.3006,  0.3093, -0.4788, -0.7389, -0.5132]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
250000 特征值优化 tensor(0.7579, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7334,  0.9032, -1.8740,  0.1384, -1.5033,  0.3103, -1.2391,  1.2929,
         -2.0316, -0.9737, -1.7127, -1.7864,  0.0301, -0.0577,  0.0109, -0.1291,
         -0.4176, -0.2526,  0.4688, -0.2185,  0.0891, -0.2572, -0.1527,  0.2806,
          0.1692,  0.1037, -0.0358,  0.1536,  0.0311,  0.3938, -0.0238,  0.1157,
         -0.0474, -0.0587,  0.0758, -0.0421,  0.2321, -0.3040,  0.1185,  0.2525,
         -0.3344,  0.5135,  0.1900,  0.7235, -0.0041, -0.4380, -0.1537, -1.1989,
          0.8885, -0.5914,  1.3386, -0.2702,  0.0443, -0.1817,  0.5187,  0.3735,
          0.0317,  0.2426,  0.2492, -0.0065,  0.2114,  0.0691, -0.5724, -0.0433,
          0.5129, -0.0419,  0.0783, -0.2629,  0.4584, -0.3762, -0.8250, -0.4487]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
251000 特征值优化 tensor(0.6422, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5616,  0.6427, -1.5676, -0.1786, -1.5455,  0.2831, -1.1246,  1.8241,
         -2.0778, -0.9011, -1.6682, -1.7450,  0.0437, -0.0388,  0.0656, -0.1536,
         -0.4495, -0.3136,  0.3618, -0.1680,  0.0785, -0.1585, -0.1732,  0.2801,
          0.1564,  0.0754, -0.0739,  0.0761,  0.1583,  0.3215, -0.0180,  0.0877,
          0.0386, -0.0758,  0.0418, -0.0981,  0.2709, -0.2447,  0.0732,  0.2128,
         -0.2210,  0.4889,  0.2349,  0.6873, -0.0479, -0.4682, -0.0785, -0.5329,
          0.4049, -0.6911,  0.5593,  0.0660, -0.0181, -0.1548,  0.4564,  0.2948,
          0.0671,  0.2199,  0.2745,  0.1451,  0.2821,  0.0339, -0.5910, -0.0447,
          0.4125,  0.0373, -0.0242, -0.1836,  0.5975, -0.2268, -0.7831, -0.3793]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
252000 特征值优化 tensor(0.5749, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5482,  0.6119, -1.3379, -0.4520, -1.5837,  0.2809, -1.2873,  2.0618,
         -2.0328, -1.0407, -1.8501, -1.3358,  0.0470, -0.0106,  0.0498, -0.1719,
         -0.4605, -0.3068,  0.4126, -0.1408,  0.0753, -0.0728, -0.1372,  0.2911,
          0.1790,  0.1295, -0.0328,  0.1202,  0.0338,  0.2340, -0.0128,  0.0483,
          0.0577, -0.0851, -0.0374, -0.0732,  0.2794, -0.2625,  0.0830,  0.1738,
         -0.1657,  0.3633,  0.2409,  0.6721, -0.0528, -0.5564, -0.0335, -0.2990,
          0.2244, -0.5322,  0.2271,  0.1303, -0.1526, -0.0833,  0.4461,  0.2133,
          0.0756,  0.2233,  0.2825,  0.1826,  0.3900, -0.0098, -0.6692, -0.0181,
          0.3976,  0.0430,  0.0955, -0.1111,  0.7545, -0.2338, -0.8022, -0.2548]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
253000 特征值优化 tensor(0.5475, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4759,  0.4969, -1.2569, -0.4996, -1.5444,  0.2165, -1.3999,  2.2183,
         -1.9909, -1.0358, -2.0479, -1.1604,  0.0544, -0.0407, -0.0086, -0.2012,
         -0.4547, -0.2118,  0.3868, -0.0977,  0.0799, -0.0512, -0.1358,  0.2897,
          0.1799,  0.1231, -0.0762,  0.1137,  0.0157,  0.2207, -0.0146,  0.0940,
          0.0795, -0.0978, -0.0579, -0.0647,  0.2979, -0.2451,  0.0553,  0.1297,
         -0.1902,  0.3355,  0.2841,  0.5232,  0.0061, -0.4893, -0.0457, -0.3107,
          0.2259, -0.4753,  0.1985,  0.1272, -0.2430, -0.0439,  0.4061,  0.3306,
          0.0531,  0.2281,  0.2981,  0.1570,  0.4134,  0.0223, -0.6621, -0.0114,
          0.3934,  0.0283,  0.0916, -0.1053,  0.7185, -0.2240, -0.7802, -0.2222]],
       device='cuda:0') tensor(0.2057, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
254000 特征值优化 tensor(0.5554, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.5587e-01,  4.7571e-01, -1.2660e+00, -4.9330e-01, -1.5404e+00,
          1.9748e-01, -1.5459e+00,  2.3613e+00, -1.9295e+00, -9.7398e-01,
         -2.1694e+00, -9.7622e-01,  5.3275e-02, -1.8377e-02,  9.9142e-03,
         -2.1775e-01, -4.3882e-01, -2.4557e-01,  4.3917e-01, -9.3765e-02,
          7.9367e-02, -5.3306e-02, -1.4339e-01,  2.9613e-01,  1.7180e-01,
          1.1677e-01, -5.9368e-02,  1.2465e-01,  2.2479e-02,  2.2330e-01,
         -1.4451e-02,  9.3300e-02,  9.3846e-02, -9.5948e-02, -6.4207e-02,
         -6.6326e-02,  3.2886e-01, -2.3939e-01,  3.8045e-02,  1.1211e-01,
         -2.1270e-01,  2.6999e-01,  2.7425e-01,  5.2229e-01,  1.1714e-02,
         -4.9034e-01, -3.7981e-02, -3.1263e-01,  2.3975e-01, -4.9049e-01,
          2.0447e-01,  1.3098e-01, -2.4792e-01, -4.0702e-02,  4.0146e-01,
          3.4971e-01,  4.7046e-02,  2.2836e-01,  3.0345e-01,  1.7573e-01,
          4.2754e-01, -2.9348e-03, -7.3513e-01,  1.0808e-03,  3.6280e-01,
          2.7140e-02,  1.1976e-01, -6.9641e-02,  8.0094e-01, -2.0936e-01,
         -7.5730e-01, -1.5230e-01]], device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
255000 特征值优化 tensor(0.5358, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4377,  0.4690, -1.2618, -0.5326, -1.5805,  0.2017, -1.6694,  2.4941,
         -1.8562, -0.9141, -2.2730, -0.9298,  0.0531,  0.0072,  0.0226, -0.1957,
         -0.4236, -0.2828,  0.4769, -0.0902,  0.0750, -0.0597, -0.1351,  0.3001,
          0.1571,  0.1144,  0.0050,  0.1350,  0.0171,  0.2246, -0.0134,  0.0788,
          0.1179, -0.0984, -0.0570, -0.0605,  0.3283, -0.2381,  0.0693,  0.1171,
         -0.1986,  0.2161,  0.2668,  0.5111,  0.0139, -0.4954, -0.0392, -0.3281,
          0.2328, -0.5000,  0.2222,  0.1330, -0.2259, -0.0450,  0.3870,  0.3507,
          0.0590,  0.2234,  0.3097,  0.1795,  0.5095, -0.0032, -0.7787, -0.0032,
          0.3621,  0.0876,  0.1059, -0.0257,  0.8376, -0.2055, -0.7227, -0.1466]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
256000 特征值优化 tensor(0.5355, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4261,  0.4553, -1.2109, -0.5726, -1.5683,  0.2136, -1.7673,  2.6206,
         -1.8358, -0.8423, -2.3647, -0.8599,  0.0530,  0.0100,  0.0396, -0.2157,
         -0.4294, -0.2772,  0.4792, -0.0909,  0.0752, -0.0469, -0.1499,  0.2921,
          0.1190,  0.1266,  0.0039,  0.1238,  0.0215,  0.2157, -0.0134,  0.0837,
          0.1261, -0.0974, -0.0532, -0.0760,  0.3294, -0.2315,  0.0458,  0.0972,
         -0.2054,  0.2106,  0.2613,  0.5138,  0.0124, -0.4867, -0.0409, -0.3303,
          0.2482, -0.4795,  0.2249,  0.1176, -0.2132, -0.0554,  0.3881,  0.3344,
          0.0512,  0.2262,  0.2970,  0.2095,  0.5439,  0.0137, -0.8132, -0.0042,
          0.3748,  0.0822,  0.1313, -0.0161,  0.8733, -0.2225, -0.7466, -0.1052]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
257000 特征值优化 tensor(0.5351, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4233,  0.4614, -1.2062, -0.5768, -1.5482,  0.2021, -1.8433,  2.6906,
         -1.7830, -0.8094, -2.4324, -0.7895,  0.0552, -0.0504, -0.0501, -0.2121,
         -0.4712, -0.2433,  0.4090, -0.0928,  0.0784, -0.0461, -0.1124,  0.2999,
          0.1834,  0.0777, -0.0325,  0.1057,  0.0189,  0.2146, -0.0135,  0.1232,
          0.0906, -0.0969, -0.0466, -0.0833,  0.3091, -0.2415,  0.0320,  0.0506,
         -0.1701,  0.2104,  0.2586,  0.5156,  0.0149, -0.4861, -0.0390, -0.3328,
          0.2415, -0.4752,  0.2272,  0.1187, -0.2260, -0.0537,  0.3930,  0.3058,
          0.0597,  0.2255,  0.2981,  0.1855,  0.5965,  0.0383, -0.8181, -0.0182,
          0.3752,  0.0948,  0.1113, -0.0455,  0.9113, -0.2043, -0.7600, -0.1070]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
258000 特征值优化 tensor(0.5608, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.2067e-01,  4.5145e-01, -1.2015e+00, -5.7318e-01, -1.5385e+00,
          1.9611e-01, -1.9068e+00,  2.7442e+00, -1.7815e+00, -7.5378e-01,
         -2.4863e+00, -7.5776e-01,  5.3606e-02, -4.0887e-02, -5.0790e-02,
         -2.1388e-01, -4.7640e-01, -2.7125e-01,  4.0347e-01, -9.2135e-02,
          8.0230e-02, -4.5067e-02, -1.1046e-01,  3.1922e-01,  1.8745e-01,
          8.5452e-02, -3.3473e-02,  1.0064e-01,  2.1838e-02,  2.1007e-01,
         -1.5719e-02,  1.2605e-01,  9.4503e-02, -9.5959e-02, -4.8907e-02,
         -8.1452e-02,  3.1740e-01, -2.3072e-01,  1.4663e-02,  6.2622e-02,
         -1.7391e-01,  2.0495e-01,  2.5630e-01,  5.1785e-01,  1.4772e-02,
         -4.8977e-01, -3.2874e-02, -3.2702e-01,  2.3937e-01, -4.8010e-01,
          2.2245e-01,  1.1372e-01, -2.2369e-01, -5.3966e-02,  3.9182e-01,
          2.9825e-01,  5.6620e-02,  2.2569e-01,  2.7893e-01,  1.9976e-01,
          6.0205e-01,  4.3194e-02, -8.5770e-01,  9.9690e-04,  3.6238e-01,
          8.8128e-02,  1.4391e-01, -2.5316e-02,  9.4663e-01, -1.9730e-01,
         -7.5446e-01, -9.3963e-02]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
259000 特征值优化 tensor(0.5370, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4288,  0.4555, -1.1909, -0.5847, -1.5763,  0.2145, -1.9454,  2.8040,
         -1.7533, -0.7216, -2.5355, -0.7945,  0.0534,  0.0130,  0.0139, -0.2204,
         -0.4480, -0.2980,  0.4889, -0.0916,  0.0751, -0.0452, -0.1277,  0.2941,
          0.1374,  0.0902, -0.0180,  0.1187,  0.0204,  0.2133, -0.0134,  0.0970,
          0.1280, -0.0978, -0.0498, -0.0760,  0.3237, -0.2282,  0.0395,  0.0774,
         -0.2013,  0.1825,  0.2612,  0.5130,  0.0162, -0.4883, -0.0395, -0.3360,
          0.2467, -0.4750,  0.2262,  0.1155, -0.2026, -0.0586,  0.3936,  0.3307,
          0.0547,  0.2247,  0.2706,  0.2464,  0.6422,  0.0225, -0.9005, -0.0031,
          0.3717,  0.1073,  0.1248,  0.0158,  0.9462, -0.2019, -0.7431, -0.0929]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
260000 特征值优化 tensor(0.5333, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.2128e-01,  4.6283e-01, -1.2065e+00, -5.7725e-01, -1.5454e+00,
          2.0683e-01, -2.0001e+00,  2.8760e+00, -1.7389e+00, -7.3052e-01,
         -2.5841e+00, -7.5283e-01,  5.5782e-02, -6.4756e-02, -6.5742e-02,
         -2.2699e-01, -4.8227e-01, -2.6005e-01,  4.1801e-01, -9.1615e-02,
          7.7738e-02, -4.6214e-02, -1.1718e-01,  3.0226e-01,  1.7234e-01,
          8.1149e-02, -2.8823e-02,  9.3425e-02,  1.8946e-02,  2.1581e-01,
         -1.3406e-02,  1.2526e-01,  8.6178e-02, -9.7273e-02, -3.1611e-02,
         -9.8402e-02,  3.1645e-01, -2.4040e-01,  1.6982e-02,  2.5925e-02,
         -1.6498e-01,  1.9583e-01,  2.5740e-01,  5.1653e-01,  1.4920e-02,
         -4.9041e-01, -3.6677e-02, -3.3406e-01,  2.4210e-01, -4.7517e-01,
          2.2824e-01,  1.1883e-01, -2.1756e-01, -5.9043e-02,  3.9588e-01,
          2.9944e-01,  6.8839e-02,  2.1946e-01,  2.7889e-01,  2.1676e-01,
          6.5866e-01,  3.8919e-02, -9.0962e-01, -7.0327e-04,  3.6189e-01,
          1.0647e-01,  1.0960e-01, -3.3651e-02,  9.9715e-01, -2.1169e-01,
         -7.6078e-01, -9.5563e-02]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
261000 特征值优化 tensor(0.5467, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4367,  0.4463, -1.1981, -0.5619, -1.5325,  0.2042, -2.0659,  2.9066,
         -1.7647, -0.7168, -2.6533, -0.7578,  0.0536, -0.0144, -0.0150, -0.2454,
         -0.4827, -0.2715,  0.4487, -0.0936,  0.0764, -0.0477, -0.1203,  0.2910,
          0.1672,  0.0804, -0.0231,  0.1165,  0.0173,  0.2176, -0.0140,  0.1062,
          0.1092, -0.0971, -0.0499, -0.0831,  0.3294, -0.2326,  0.0056,  0.0457,
         -0.1960,  0.2024,  0.2629,  0.5172,  0.0107, -0.4794, -0.0422, -0.3349,
          0.2464, -0.4817,  0.2257,  0.1231, -0.2038, -0.0690,  0.3878,  0.3265,
          0.0445,  0.2328,  0.2825,  0.2451,  0.6787,  0.0136, -0.9419, -0.0071,
          0.3423,  0.0757,  0.1135, -0.0055,  1.0243, -0.1886, -0.7461, -0.0874]],
       device='cuda:0') tensor(0.2061, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
262000 特征值优化 tensor(0.5354, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4233,  0.4378, -1.2359, -0.5469, -1.5669,  0.2147, -2.1037,  2.9689,
         -1.7537, -0.7083, -2.6898, -0.7859,  0.0535,  0.0337,  0.0166, -0.2191,
         -0.4585, -0.3177,  0.4922, -0.0915,  0.0758, -0.0518, -0.1437,  0.2860,
          0.1371,  0.1256,  0.0141,  0.1434,  0.0166,  0.2203, -0.0135,  0.0587,
          0.1228, -0.0969, -0.0455, -0.0814,  0.3489, -0.2415,  0.0337,  0.0709,
         -0.1995,  0.1822,  0.2576,  0.5129,  0.0138, -0.4802, -0.0402, -0.3269,
          0.2442, -0.4919,  0.2198,  0.1267, -0.1885, -0.0677,  0.3891,  0.3242,
          0.0552,  0.2235,  0.2711,  0.2423,  0.7049, -0.0200, -0.9736,  0.0211,
          0.3639,  0.1112,  0.1310,  0.0119,  1.0357, -0.2315, -0.7456, -0.0840]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
263000 特征值优化 tensor(0.5394, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4307,  0.4628, -1.2497, -0.5264, -1.5435,  0.2082, -2.1968,  2.9963,
         -1.7385, -0.7099, -2.7612, -0.7421,  0.0548, -0.0239, -0.0254, -0.2391,
         -0.5071, -0.2667,  0.4300, -0.0958,  0.0784, -0.0583, -0.1097,  0.2973,
          0.1711,  0.0957, -0.0203,  0.1308,  0.0144,  0.2253, -0.0137,  0.0753,
          0.0762, -0.0982, -0.0477, -0.0834,  0.3533, -0.2656,  0.0149,  0.0400,
         -0.1685,  0.2018,  0.2632,  0.5186,  0.0123, -0.4793, -0.0443, -0.3294,
          0.2394, -0.5014,  0.2198,  0.1327, -0.1603, -0.0880,  0.3950,  0.3078,
          0.0547,  0.2272,  0.2746,  0.2355,  0.7290, -0.0328, -0.9860,  0.0330,
          0.3528,  0.0968,  0.1119, -0.0119,  1.0636, -0.2358, -0.7553, -0.0868]],
       device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
264000 特征值优化 tensor(0.5347, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4124,  0.4415, -1.2460, -0.5197, -1.5667,  0.2217, -2.2626,  3.0467,
         -1.7400, -0.6840, -2.7943, -0.7765,  0.0532,  0.0178,  0.0386, -0.2390,
         -0.4624, -0.3093,  0.4961, -0.0918,  0.0749, -0.0566, -0.1269,  0.2986,
          0.1495,  0.1051, -0.0092,  0.1330,  0.0298,  0.2248, -0.0135,  0.0570,
          0.0794, -0.0963, -0.0464, -0.0806,  0.3821, -0.2698,  0.0298,  0.0643,
         -0.1899,  0.1839,  0.2535,  0.5155,  0.0122, -0.4801, -0.0409, -0.3309,
          0.2444, -0.5014,  0.2177,  0.1306, -0.1421, -0.0916,  0.3797,  0.3475,
          0.0510,  0.2235,  0.2630,  0.2544,  0.7147, -0.0634, -1.0332,  0.0579,
          0.3695,  0.1114,  0.1310,  0.0217,  1.0946, -0.2646, -0.7553, -0.0798]],
       device='cuda:0') tensor(0.2048, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
265000 特征值优化 tensor(0.5334, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4132,  0.4340, -1.2638, -0.5286, -1.5622,  0.2197, -2.3084,  3.1085,
         -1.7464, -0.6947, -2.8258, -0.7731,  0.0541,  0.0194,  0.0333, -0.2319,
         -0.4675, -0.3199,  0.4957, -0.0916,  0.0763, -0.0587, -0.1384,  0.2980,
          0.1424,  0.1127, -0.0031,  0.1274,  0.0176,  0.2245, -0.0133,  0.0498,
          0.0836, -0.0971, -0.0487, -0.0795,  0.3813, -0.2668,  0.0309,  0.0663,
         -0.1877,  0.1851,  0.2529,  0.5154,  0.0128, -0.4778, -0.0403, -0.3271,
          0.2431, -0.5052,  0.2193,  0.1312, -0.1510, -0.0883,  0.3791,  0.3359,
          0.0509,  0.2256,  0.2646,  0.2512,  0.7518, -0.0637, -1.0510,  0.0592,
          0.3787,  0.1053,  0.1333,  0.0180,  1.1207, -0.2689, -0.7533, -0.0820]],
       device='cuda:0') tensor(0.2066, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
266000 特征值优化 tensor(0.5336, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4141,  0.4364, -1.2481, -0.5113, -1.5673,  0.2217, -2.3584,  3.1559,
         -1.7541, -0.6972, -2.8576, -0.7823,  0.0539,  0.0262,  0.0251, -0.2307,
         -0.4715, -0.3269,  0.4977, -0.0898,  0.0758, -0.0574, -0.1278,  0.2999,
          0.1506,  0.1092, -0.0095,  0.1332,  0.0307,  0.2256, -0.0133,  0.0497,
          0.0864, -0.0970, -0.0450, -0.0806,  0.3832, -0.2651,  0.0313,  0.0678,
         -0.1886,  0.1856,  0.2542,  0.5136,  0.0121, -0.4821, -0.0387, -0.3306,
          0.2434, -0.5029,  0.2142,  0.1316, -0.1439, -0.0907,  0.3795,  0.3360,
          0.0513,  0.2239,  0.2688,  0.2464,  0.7718, -0.0622, -1.0752,  0.0593,
          0.3722,  0.1085,  0.1332,  0.0145,  1.1383, -0.2632, -0.7486, -0.0851]],
       device='cuda:0') tensor(0.2029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
267000 特征值优化 tensor(0.5357, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4040,  0.4259, -1.2621, -0.5195, -1.5551,  0.2193, -2.4192,  3.1885,
         -1.7533, -0.6973, -2.8941, -0.7824,  0.0536,  0.0126,  0.0332, -0.2397,
         -0.4754, -0.3171,  0.4952, -0.0915,  0.0753, -0.0600, -0.1276,  0.3004,
          0.1544,  0.1089, -0.0090,  0.1319,  0.0272,  0.2272, -0.0136,  0.0588,
          0.0758, -0.0972, -0.0497, -0.0787,  0.3813, -0.2615,  0.0289,  0.0652,
         -0.1893,  0.1904,  0.2496,  0.5134,  0.0111, -0.4718, -0.0428, -0.3292,
          0.2422, -0.5080,  0.2236,  0.1347, -0.1439, -0.0934,  0.3795,  0.3391,
          0.0513,  0.2260,  0.2655,  0.2493,  0.7952, -0.0550, -1.0967,  0.0606,
          0.3766,  0.1046,  0.1312,  0.0154,  1.1600, -0.2636, -0.7528, -0.0852]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
268000 特征值优化 tensor(0.5384, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4071,  0.4507, -1.2581, -0.5054, -1.5401,  0.2041, -2.4712,  3.2227,
         -1.7444, -0.7023, -2.9362, -0.7311,  0.0551, -0.0348, -0.0121, -0.2540,
         -0.5050, -0.2650,  0.4409, -0.0944,  0.0780, -0.0608, -0.1122,  0.2971,
          0.1738,  0.1054, -0.0193,  0.1343,  0.0159,  0.2317, -0.0136,  0.0650,
          0.0669, -0.0956, -0.0481, -0.0826,  0.3822, -0.2590,  0.0136,  0.0411,
         -0.1808,  0.1999,  0.2523,  0.5191,  0.0122, -0.4747, -0.0413, -0.3283,
          0.2409, -0.5073,  0.2179,  0.1393, -0.1381, -0.0993,  0.3898,  0.3209,
          0.0478,  0.2282,  0.2718,  0.2479,  0.8235, -0.0613, -1.1031,  0.0591,
          0.3528,  0.0909,  0.1143, -0.0120,  1.1756, -0.2556, -0.7532, -0.0856]],
       device='cuda:0') tensor(0.2041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
269000 特征值优化 tensor(0.5328, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3983,  0.4349, -1.2674, -0.5295, -1.5745,  0.2123, -2.5051,  3.2647,
         -1.7437, -0.6979, -2.9468, -0.7691,  0.0545,  0.0212,  0.0367, -0.2509,
         -0.4739, -0.3158,  0.5075, -0.0889,  0.0761, -0.0594, -0.1425,  0.2958,
          0.1350,  0.1251,  0.0244,  0.1464,  0.0185,  0.2247, -0.0134,  0.0396,
          0.1034, -0.0976, -0.0448, -0.0790,  0.3950, -0.2551,  0.0356,  0.0730,
         -0.2072,  0.1764,  0.2467,  0.5127,  0.0140, -0.4835, -0.0365, -0.3265,
          0.2432, -0.5073,  0.2194,  0.1310, -0.1455, -0.0881,  0.3722,  0.3401,
          0.0546,  0.2213,  0.2680,  0.2492,  0.8352, -0.0749, -1.1311,  0.0598,
          0.3667,  0.1124,  0.1290,  0.0196,  1.1958, -0.2595, -0.7453, -0.0841]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
270000 特征值优化 tensor(0.5338, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4011,  0.4243, -1.2415, -0.5160, -1.5673,  0.2209, -2.5341,  3.3107,
         -1.7619, -0.7226, -2.9600, -0.7615,  0.0544,  0.0250,  0.0222, -0.2395,
         -0.4833, -0.3312,  0.4970, -0.0907,  0.0759, -0.0563, -0.1332,  0.2943,
          0.1424,  0.1058, -0.0164,  0.1372,  0.0305,  0.2242, -0.0134,  0.0572,
          0.0813, -0.0970, -0.0491, -0.0644,  0.3899, -0.2565,  0.0325,  0.0698,
         -0.1934,  0.1821,  0.2466,  0.5154,  0.0131, -0.4744, -0.0386, -0.3317,
          0.2442, -0.4996,  0.2149,  0.1316, -0.1507, -0.0873,  0.3734,  0.3405,
          0.0613,  0.2183,  0.2677,  0.2458,  0.8446, -0.0617, -1.1516,  0.0631,
          0.3676,  0.1063,  0.1214,  0.0192,  1.2094, -0.2626, -0.7288, -0.0931]],
       device='cuda:0') tensor(0.2084, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
271000 特征值优化 tensor(0.5344, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4011,  0.4222, -1.2449, -0.5360, -1.5675,  0.2062, -2.5882,  3.3357,
         -1.7641, -0.7303, -2.9918, -0.7634,  0.0541,  0.0192,  0.0366, -0.2503,
         -0.4824, -0.3194,  0.5028, -0.0901,  0.0759, -0.0551, -0.1297,  0.2998,
          0.1423,  0.1184, -0.0085,  0.1335,  0.0185,  0.2241, -0.0135,  0.0555,
          0.0783, -0.0964, -0.0559, -0.0626,  0.3942, -0.2556,  0.0322,  0.0677,
         -0.1976,  0.1818,  0.2487,  0.5142,  0.0132, -0.4726, -0.0386, -0.3292,
          0.2431, -0.5001,  0.2217,  0.1318, -0.1429, -0.0911,  0.3712,  0.3449,
          0.0648,  0.2198,  0.2753,  0.2339,  0.8629, -0.0631, -1.1688,  0.0695,
          0.3599,  0.1092,  0.1147,  0.0200,  1.2247, -0.2694, -0.7205, -0.0956]],
       device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
272000 特征值优化 tensor(0.5331, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3965,  0.4243, -1.2370, -0.5412, -1.5753,  0.2082, -2.6308,  3.3675,
         -1.7632, -0.7403, -3.0144, -0.7607,  0.0542,  0.0276,  0.0262, -0.2462,
         -0.4865, -0.3247,  0.5016, -0.0888,  0.0765, -0.0523, -0.1273,  0.3030,
          0.1323,  0.1206,  0.0045,  0.1460,  0.0182,  0.2211, -0.0133,  0.0481,
          0.0909, -0.0972, -0.0556, -0.0634,  0.3998, -0.2544,  0.0350,  0.0708,
         -0.2051,  0.1781,  0.2465,  0.5131,  0.0137, -0.4768, -0.0379, -0.3272,
          0.2436, -0.4930,  0.2181,  0.1281, -0.1457, -0.0878,  0.3677,  0.3457,
          0.0623,  0.2210,  0.2797,  0.2306,  0.8801, -0.0725, -1.1852,  0.0686,
          0.3533,  0.1117,  0.1097,  0.0214,  1.2408, -0.2673, -0.7118, -0.0960]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
273000 特征值优化 tensor(0.5335, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3925,  0.4257, -1.2381, -0.5420, -1.5791,  0.2083, -2.6728,  3.3962,
         -1.7565, -0.7347, -3.0391, -0.7674,  0.0545,  0.0252,  0.0446, -0.2575,
         -0.4844, -0.3156,  0.5056, -0.0889,  0.0762, -0.0556, -0.1264,  0.3056,
          0.1346,  0.1249,  0.0235,  0.1501,  0.0154,  0.2220, -0.0132,  0.0499,
          0.0885, -0.0974, -0.0569, -0.0629,  0.4009, -0.2498,  0.0368,  0.0721,
         -0.2068,  0.1754,  0.2436,  0.5131,  0.0142, -0.4783, -0.0369, -0.3321,
          0.2433, -0.4977,  0.2205,  0.1303, -0.1425, -0.0887,  0.3678,  0.3488,
          0.0605,  0.2223,  0.2793,  0.2316,  0.8975, -0.0691, -1.2016,  0.0713,
          0.3529,  0.1138,  0.1073,  0.0239,  1.2547, -0.2689, -0.7092, -0.0984]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
274000 特征值优化 tensor(0.5328, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3937,  0.4205, -1.2200, -0.5373, -1.5793,  0.2098, -2.7010,  3.4341,
         -1.7642, -0.7427, -3.0537, -0.7619,  0.0544,  0.0303,  0.0278, -0.2508,
         -0.4918, -0.3251,  0.5019, -0.0894,  0.0763, -0.0511, -0.1317,  0.2980,
          0.1209,  0.1200,  0.0107,  0.1540,  0.0252,  0.2191, -0.0132,  0.0459,
          0.0978, -0.0970, -0.0549, -0.0633,  0.4015, -0.2470,  0.0352,  0.0710,
         -0.2103,  0.1778,  0.2442,  0.5133,  0.0135, -0.4743, -0.0377, -0.3316,
          0.2447, -0.4890,  0.2152,  0.1266, -0.1480, -0.0857,  0.3657,  0.3448,
          0.0614,  0.2218,  0.2811,  0.2283,  0.9166, -0.0711, -1.2149,  0.0677,
          0.3496,  0.1136,  0.1076,  0.0218,  1.2693, -0.2658, -0.7090, -0.0965]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
275000 特征值优化 tensor(0.5351, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3936,  0.4168, -1.2301, -0.5346, -1.5679,  0.2080, -2.7393,  3.4594,
         -1.7676, -0.7399, -3.0765, -0.7563,  0.0546,  0.0135,  0.0318, -0.2595,
         -0.4916, -0.3253,  0.4999, -0.0903,  0.0763, -0.0522, -0.1259,  0.3005,
          0.1451,  0.1080, -0.0236,  0.1331,  0.0262,  0.2207, -0.0134,  0.0584,
          0.0768, -0.0969, -0.0547, -0.0625,  0.4011, -0.2500,  0.0325,  0.0679,
         -0.2050,  0.1812,  0.2434,  0.5143,  0.0134, -0.4695, -0.0389, -0.3304,
          0.2442, -0.4929,  0.2156,  0.1266, -0.1424, -0.0914,  0.3662,  0.3525,
          0.0641,  0.2207,  0.2782,  0.2297,  0.9246, -0.0665, -1.2348,  0.0722,
          0.3543,  0.1103,  0.1121,  0.0200,  1.2744, -0.2683, -0.7184, -0.0936]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
276000 特征值优化 tensor(0.5333, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3880,  0.4308, -1.2282, -0.5497, -1.5513,  0.2104, -2.7740,  3.4865,
         -1.7578, -0.7421, -3.0973, -0.7422,  0.0553, -0.0411, -0.0392, -0.2703,
         -0.5206, -0.2700,  0.4461, -0.0935,  0.0773, -0.0526, -0.1133,  0.3115,
          0.1756,  0.0795, -0.0486,  0.0858,  0.0166,  0.2200, -0.0138,  0.0785,
          0.0478, -0.0970, -0.0456, -0.0792,  0.3898, -0.2513,  0.0186,  0.0347,
         -0.1816,  0.2008,  0.2429,  0.5175,  0.0147, -0.4687, -0.0404, -0.3308,
          0.2413, -0.4889,  0.2217,  0.1286, -0.1542, -0.0902,  0.3737,  0.3190,
          0.0624,  0.2234,  0.2844,  0.2105,  0.9613, -0.0605, -1.2181,  0.0653,
          0.3548,  0.1068,  0.0998, -0.0166,  1.2983, -0.2640, -0.7432, -0.0969]],
       device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
277000 特征值优化 tensor(0.5333, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3848,  0.4286, -1.2369, -0.5508, -1.5836,  0.2050, -2.7937,  3.5127,
         -1.7537, -0.7249, -3.1075, -0.7688,  0.0541,  0.0195,  0.0658, -0.2749,
         -0.4877, -0.3174,  0.5129, -0.0894,  0.0761, -0.0528, -0.1448,  0.2952,
          0.1275,  0.1273,  0.0201,  0.1525,  0.0166,  0.2187, -0.0135,  0.0454,
          0.0973, -0.0973, -0.0545, -0.0633,  0.4032, -0.2436,  0.0361,  0.0716,
         -0.2137,  0.1738,  0.2406,  0.5130,  0.0151, -0.4776, -0.0369, -0.3272,
          0.2446, -0.4918,  0.2187,  0.1254, -0.1400, -0.0885,  0.3647,  0.3477,
          0.0616,  0.2227,  0.2785,  0.2353,  0.9573, -0.0681, -1.2567,  0.0734,
          0.3468,  0.1176,  0.1047,  0.0264,  1.2953, -0.2690, -0.7036, -0.0990]],
       device='cuda:0') tensor(0.2032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
278000 特征值优化 tensor(0.5338, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3924,  0.4139, -1.2217, -0.5327, -1.5720,  0.2089, -2.8217,  3.5413,
         -1.7651, -0.7377, -3.1176, -0.7544,  0.0537,  0.0179,  0.0277, -0.2700,
         -0.4947, -0.3226,  0.5062, -0.0898,  0.0756, -0.0517, -0.1328,  0.2963,
          0.1355,  0.1086, -0.0163,  0.1356,  0.0248,  0.2196, -0.0132,  0.0551,
          0.0837, -0.0969, -0.0548, -0.0638,  0.4030, -0.2482,  0.0338,  0.0694,
         -0.2050,  0.1786,  0.2439,  0.5142,  0.0135, -0.4696, -0.0381, -0.3323,
          0.2446, -0.4899,  0.2134,  0.1270, -0.1424, -0.0905,  0.3645,  0.3439,
          0.0634,  0.2207,  0.2781,  0.2324,  0.9659, -0.0688, -1.2677,  0.0724,
          0.3532,  0.1117,  0.1111,  0.0215,  1.3094, -0.2645, -0.7155, -0.0938]],
       device='cuda:0') tensor(0.2098, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
279000 特征值优化 tensor(0.5347, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3887,  0.4085, -1.2421, -0.5402, -1.5725,  0.2060, -2.8574,  3.5674,
         -1.7817, -0.7620, -3.1310, -0.7603,  0.0538,  0.0149,  0.0274, -0.2652,
         -0.5007, -0.3263,  0.5034, -0.0922,  0.0751, -0.0546, -0.1303,  0.2995,
          0.1463,  0.1098, -0.0176,  0.1330,  0.0154,  0.2226, -0.0138,  0.0708,
          0.0665, -0.0969, -0.0640, -0.0546,  0.4015, -0.2497,  0.0307,  0.0682,
         -0.2027,  0.1871,  0.2407,  0.5141,  0.0124, -0.4637, -0.0422, -0.3290,
          0.2429, -0.4978,  0.2217,  0.1302, -0.1650, -0.0774,  0.3586,  0.3409,
          0.0577,  0.2248,  0.2895,  0.2147,  0.9714, -0.0580, -1.2775,  0.0802,
          0.3448,  0.1102,  0.1031,  0.0192,  1.3241, -0.2736, -0.7047, -0.1010]],
       device='cuda:0') tensor(0.2041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
280000 特征值优化 tensor(0.5342, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.6714e-01,  4.2353e-01, -1.2300e+00, -5.4959e-01, -1.5619e+00,
          1.9571e-01, -2.8890e+00,  3.6019e+00, -1.7968e+00, -7.8421e-01,
         -3.1492e+00, -7.0082e-01,  5.4860e-02, -5.6085e-02, -4.3441e-02,
         -2.7489e-01, -5.2116e-01, -2.8132e-01,  4.4584e-01, -9.2396e-02,
          7.6977e-02, -5.1816e-02, -1.0383e-01,  3.2164e-01,  1.7714e-01,
          9.3823e-02, -5.5980e-02,  8.8124e-02,  1.7233e-02,  2.1974e-01,
         -1.3293e-02,  1.0486e-01,  2.7903e-02, -9.6587e-02, -5.5407e-02,
         -6.2132e-02,  3.8733e-01, -2.4377e-01,  1.1592e-02,  4.5150e-02,
         -1.7956e-01,  2.1047e-01,  2.3267e-01,  5.1727e-01,  1.5875e-02,
         -4.6714e-01, -3.8166e-02, -3.2970e-01,  2.4114e-01, -4.9158e-01,
          2.2070e-01,  1.2818e-01, -1.8859e-01, -6.9147e-02,  3.7088e-01,
          3.1444e-01,  7.2610e-02,  2.2054e-01,  2.8837e-01,  2.1013e-01,
          1.0049e+00, -3.9740e-02, -1.2704e+00,  6.6768e-02,  3.3445e-01,
          1.1076e-01,  1.0575e-01, -4.0907e-04,  1.3488e+00, -2.6717e-01,
         -7.2779e-01, -8.8983e-02]], device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
281000 特征值优化 tensor(0.5325, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3825,  0.4154, -1.2220, -0.5417, -1.5856,  0.2020, -2.9084,  3.6261,
         -1.7877, -0.7786, -3.1558, -0.7491,  0.0535,  0.0314,  0.0404, -0.2814,
         -0.4949, -0.3175,  0.5124, -0.0908,  0.0752, -0.0504, -0.1488,  0.2969,
          0.1092,  0.1315,  0.0308,  0.1639,  0.0182,  0.2195, -0.0132,  0.0657,
          0.0916, -0.0968, -0.0696, -0.0512,  0.3990, -0.2270,  0.0325,  0.0682,
         -0.2188,  0.1828,  0.2373,  0.5118,  0.0154, -0.4689, -0.0394, -0.3312,
          0.2436, -0.4892,  0.2157,  0.1255, -0.1833, -0.0663,  0.3557,  0.3475,
          0.0530,  0.2296,  0.3023,  0.2006,  1.0123, -0.0536, -1.3051,  0.0650,
          0.3264,  0.1197,  0.0958,  0.0133,  1.3564, -0.2633, -0.6904, -0.1033]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
282000 特征值优化 tensor(0.5338, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3751,  0.4185, -1.2340, -0.5528, -1.5607,  0.2013, -2.9513,  3.6498,
         -1.7868, -0.7810, -3.1789, -0.7187,  0.0552, -0.0325, -0.0503, -0.2812,
         -0.5205, -0.2812,  0.4536, -0.0926,  0.0780, -0.0517, -0.1049,  0.3199,
          0.1839,  0.0858, -0.0423,  0.0990,  0.0168,  0.2198, -0.0134,  0.1055,
          0.0384, -0.0971, -0.0542, -0.0639,  0.3837, -0.2370,  0.0139,  0.0427,
         -0.1843,  0.2112,  0.2350,  0.5161,  0.0155, -0.4637, -0.0392, -0.3286,
          0.2410, -0.4916,  0.2224,  0.1272, -0.1995, -0.0639,  0.3727,  0.3202,
          0.0695,  0.2200,  0.2906,  0.2028,  1.0413, -0.0337, -1.2942,  0.0584,
          0.3425,  0.1073,  0.1003, -0.0100,  1.3681, -0.2604, -0.7283, -0.0985]],
       device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
283000 特征值优化 tensor(0.5455, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3835,  0.3994, -1.2224, -0.5457, -1.5363,  0.1909, -2.9845,  3.6699,
         -1.8147, -0.7782, -3.2026, -0.7384,  0.0535, -0.0134, -0.0069, -0.2793,
         -0.5156, -0.2985,  0.4821, -0.0920,  0.0768, -0.0500, -0.1267,  0.2973,
          0.1784,  0.1154, -0.0491,  0.1164,  0.0185,  0.2194, -0.0137,  0.0989,
          0.0592, -0.0948, -0.0648, -0.0530,  0.3856, -0.2302,  0.0166,  0.0655,
         -0.1975,  0.1900,  0.2407,  0.5200,  0.0117, -0.4622, -0.0346, -0.3281,
          0.2400, -0.4900,  0.2218,  0.1256, -0.1984, -0.0684,  0.3681,  0.3099,
          0.0671,  0.2197,  0.2891,  0.2209,  1.0359, -0.0180, -1.3384,  0.0750,
          0.3225,  0.1047,  0.1109,  0.0155,  1.3554, -0.2525, -0.7171, -0.0846]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
284000 特征值优化 tensor(0.5311, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3674,  0.4314, -1.2091, -0.5733, -1.5819,  0.1963, -2.9954,  3.7146,
         -1.7966, -0.7847, -3.1964, -0.7035,  0.0552, -0.0711, -0.0490, -0.2880,
         -0.5221, -0.2885,  0.4551, -0.0913,  0.0769, -0.0442, -0.1101,  0.3167,
          0.1878,  0.0903, -0.0546,  0.0891,  0.0218,  0.2124, -0.0133,  0.1171,
          0.0382, -0.0970, -0.0543, -0.0628,  0.3745, -0.2409,  0.0116,  0.0417,
         -0.1780,  0.2080,  0.2324,  0.5171,  0.0167, -0.4736, -0.0364, -0.3242,
          0.2426, -0.4768,  0.2182,  0.1198, -0.2094, -0.0535,  0.3722,  0.3046,
          0.0736,  0.2198,  0.2879,  0.2108,  1.0678, -0.0182, -1.3209,  0.0441,
          0.3355,  0.1116,  0.1049, -0.0043,  1.3850, -0.2602, -0.7275, -0.0918]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
285000 特征值优化 tensor(0.5344, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3834,  0.4316, -1.1417, -0.6203, -1.6023,  0.2118, -2.9938,  3.7416,
         -1.7691, -0.7321, -3.2084, -0.7714,  0.0540,  0.0274,  0.0279, -0.3024,
         -0.5038, -0.3178,  0.5281, -0.0902,  0.0766, -0.0309, -0.1410,  0.2767,
          0.0808,  0.1110,  0.0478,  0.1854,  0.0286,  0.1996, -0.0131,  0.0722,
          0.1269, -0.0965, -0.0749, -0.0477,  0.3673, -0.2171,  0.0293,  0.0616,
         -0.2105,  0.1850,  0.2390,  0.5104,  0.0207, -0.4787, -0.0353, -0.3319,
          0.2440, -0.4498,  0.2169,  0.1046, -0.2013, -0.0531,  0.3674,  0.3242,
          0.0389,  0.2336,  0.2995,  0.2122,  1.1052, -0.0166, -1.3446,  0.0345,
          0.3347,  0.1228,  0.0869,  0.0244,  1.3698, -0.2282, -0.6895, -0.1112]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
286000 特征值优化 tensor(0.5343, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3927,  0.4249, -1.1406, -0.6419, -1.5823,  0.2019, -3.0259,  3.7472,
         -1.7739, -0.7505, -3.2227, -0.7636,  0.0532,  0.0135,  0.0525, -0.3513,
         -0.4911, -0.2914,  0.5525, -0.0891,  0.0750, -0.0286, -0.1329,  0.2893,
          0.1172,  0.1034,  0.0202,  0.1542,  0.0284,  0.1966, -0.0134,  0.0846,
          0.0899, -0.0970, -0.0727, -0.0498,  0.3927, -0.2104,  0.0300,  0.0638,
         -0.2245,  0.1842,  0.2448,  0.5109,  0.0154, -0.4756, -0.0380, -0.3279,
          0.2438, -0.4440,  0.2229,  0.1009, -0.1870, -0.0650,  0.3515,  0.3587,
          0.0498,  0.2304,  0.3002,  0.2075,  1.0622, -0.0339, -1.3723,  0.0619,
          0.3272,  0.1231,  0.0907,  0.0215,  1.3909, -0.2363, -0.6873, -0.1067]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
287000 特征值优化 tensor(0.5346, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3844,  0.4165, -1.1418, -0.6424, -1.5958,  0.1998, -3.0584,  3.7678,
         -1.7771, -0.7548, -3.2377, -0.7559,  0.0531,  0.0379,  0.0284, -0.2881,
         -0.5110, -0.3236,  0.5184, -0.0908,  0.0751, -0.0286, -0.1356,  0.2843,
          0.1197,  0.1054,  0.0165,  0.1563,  0.0289,  0.1970, -0.0133,  0.0769,
          0.1009, -0.0968, -0.0714, -0.0505,  0.3922, -0.2077,  0.0266,  0.0627,
         -0.2276,  0.1865,  0.2390,  0.5129,  0.0150, -0.4704, -0.0385, -0.3273,
          0.2442, -0.4439,  0.2238,  0.1010, -0.1854, -0.0624,  0.3541,  0.3522,
          0.0512,  0.2295,  0.2988,  0.2110,  1.0856, -0.0346, -1.3779,  0.0584,
          0.3255,  0.1225,  0.0948,  0.0209,  1.4025, -0.2406, -0.6892, -0.1037]],
       device='cuda:0') tensor(0.2030, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
288000 特征值优化 tensor(0.5350, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3791,  0.4037, -1.1681, -0.6152, -1.5836,  0.2002, -3.0775,  3.7915,
         -1.7780, -0.7572, -3.2480, -0.7668,  0.0534,  0.0273,  0.0391, -0.2889,
         -0.5105, -0.3254,  0.5147, -0.0899,  0.0753, -0.0344, -0.1315,  0.2908,
          0.1409,  0.1004, -0.0074,  0.1406,  0.0267,  0.2025, -0.0132,  0.0830,
          0.0906, -0.0968, -0.0699, -0.0508,  0.3897, -0.2130,  0.0279,  0.0645,
         -0.2207,  0.1884,  0.2375,  0.5119,  0.0131, -0.4648, -0.0390, -0.3252,
          0.2427, -0.4569,  0.2208,  0.1082, -0.1925, -0.0619,  0.3555,  0.3486,
          0.0579,  0.2273,  0.2953,  0.2106,  1.0972, -0.0319, -1.3894,  0.0597,
          0.3230,  0.1243,  0.0955,  0.0177,  1.4117, -0.2405, -0.6905, -0.1079]],
       device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
289000 特征值优化 tensor(0.5307, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3636,  0.4220, -1.1809, -0.6256, -1.5679,  0.1948, -3.1045,  3.8265,
         -1.7913, -0.7953, -3.2551, -0.7124,  0.0551, -0.1002, -0.0665, -0.2977,
         -0.5176, -0.2809,  0.4520, -0.0910,  0.0768, -0.0370, -0.1010,  0.3169,
          0.1677,  0.0939, -0.0296,  0.1024,  0.0244,  0.2003, -0.0130,  0.1194,
          0.0385, -0.0962, -0.0529, -0.0637,  0.3796, -0.2274,  0.0134,  0.0429,
         -0.1824,  0.2074,  0.2311,  0.5147,  0.0175, -0.4703, -0.0350, -0.3244,
          0.2385, -0.4609,  0.2207,  0.1067, -0.1994, -0.0630,  0.3797,  0.3094,
          0.0774,  0.2158,  0.2893,  0.2056,  1.0956, -0.0070, -1.3815,  0.0565,
          0.3359,  0.1122,  0.1066, -0.0040,  1.4287, -0.2556, -0.7284, -0.0921]],
       device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
290000 特征值优化 tensor(0.5387, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.8082e-01,  3.9370e-01, -1.1550e+00, -6.2264e-01, -1.5443e+00,
          1.8784e-01, -3.1346e+00,  3.8270e+00, -1.7867e+00, -7.6071e-01,
         -3.2866e+00, -7.5651e-01,  5.3826e-02, -1.3417e-03,  2.0702e-02,
         -2.9870e-01, -5.1273e-01, -3.1774e-01,  5.1671e-01, -9.1103e-02,
          7.5171e-02, -3.4096e-02, -1.3046e-01,  2.8852e-01,  1.5137e-01,
          9.3688e-02, -3.0232e-02,  1.1903e-01,  2.5877e-02,  2.0104e-01,
         -1.3554e-02,  9.2815e-02,  8.3701e-02, -9.5768e-02, -6.7926e-02,
         -5.1475e-02,  3.7526e-01, -2.2065e-01,  2.3648e-02,  6.0540e-02,
         -2.0611e-01,  1.9080e-01,  2.3670e-01,  5.1449e-01,  1.0712e-02,
         -4.5896e-01, -4.0721e-02, -3.3003e-01,  2.4265e-01, -4.5437e-01,
          2.2385e-01,  1.0899e-01, -2.1710e-01, -5.9059e-02,  3.6504e-01,
          3.4005e-01,  6.6573e-02,  2.2221e-01,  2.8875e-01,  2.2298e-01,
          1.1399e+00, -1.2331e-02, -1.3967e+00,  5.8542e-02,  3.2730e-01,
          1.2144e-01,  1.0629e-01,  1.9777e-02,  1.4157e+00, -2.4199e-01,
         -7.0337e-01, -9.8283e-02]], device='cuda:0') tensor(0.2063, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
291000 特征值优化 tensor(0.5376, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.8268e-01,  3.9585e-01, -1.1553e+00, -6.2722e-01, -1.5550e+00,
          1.9471e-01, -3.1353e+00,  3.8503e+00, -1.7809e+00, -7.5859e-01,
         -3.2945e+00, -7.5537e-01,  5.3793e-02, -5.3246e-03,  2.5904e-02,
         -3.1171e-01, -5.1152e-01, -3.1892e-01,  5.1632e-01, -9.0938e-02,
          7.5568e-02, -3.1533e-02, -1.3460e-01,  2.8884e-01,  1.3949e-01,
          9.4875e-02, -2.1536e-02,  1.2982e-01,  2.7880e-02,  1.9882e-01,
         -1.3079e-02,  9.4091e-02,  9.5909e-02, -9.6884e-02, -6.6690e-02,
         -5.3249e-02,  3.6285e-01, -2.1823e-01,  2.5186e-02,  6.0303e-02,
         -2.0252e-01,  1.8786e-01,  2.3817e-01,  5.1317e-01,  1.2135e-02,
         -4.5756e-01, -4.1080e-02, -3.2478e-01,  2.4224e-01, -4.5007e-01,
          2.2021e-01,  1.0532e-01, -2.1902e-01, -5.5284e-02,  3.6730e-01,
          3.3793e-01,  6.4425e-02,  2.2393e-01,  2.8935e-01,  2.1861e-01,
          1.1656e+00, -3.0883e-03, -1.4100e+00,  4.1459e-02,  3.2418e-01,
          1.2249e-01,  1.0719e-01,  1.7119e-02,  1.4028e+00, -2.3153e-01,
         -6.9471e-01, -1.0165e-01]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
292000 特征值优化 tensor(0.5308, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.8120e-01,  4.1989e-01, -1.1645e+00, -6.5237e-01, -1.5619e+00,
          1.9254e-01, -3.1690e+00,  3.8721e+00, -1.7807e+00, -7.8018e-01,
         -3.2786e+00, -7.2287e-01,  5.5264e-02, -4.2721e-02, -4.4161e-02,
         -2.8501e-01, -5.5966e-01, -3.0315e-01,  4.3849e-01, -8.8905e-02,
          7.6764e-02, -3.5662e-02, -1.0739e-01,  3.1297e-01,  1.7467e-01,
          7.9699e-02, -3.7033e-02,  9.2167e-02,  2.4083e-02,  1.9461e-01,
         -1.3265e-02,  1.2132e-01,  5.2226e-02, -9.6359e-02, -5.3511e-02,
         -6.3450e-02,  3.8265e-01, -2.0845e-01,  1.0864e-02,  3.8875e-02,
         -1.8779e-01,  2.0970e-01,  2.3858e-01,  5.1148e-01,  1.5074e-02,
         -4.7458e-01, -3.7012e-02, -3.2913e-01,  2.3816e-01, -4.5548e-01,
          2.2380e-01,  1.0288e-01, -2.0889e-01, -5.9217e-02,  3.6772e-01,
          3.0694e-01,  7.7724e-02,  2.1616e-01,  2.8516e-01,  2.1450e-01,
          1.1146e+00, -2.9312e-05, -1.4052e+00,  5.8073e-02,  3.3630e-01,
          1.1385e-01,  1.0872e-01,  5.2661e-04,  1.4619e+00, -2.3814e-01,
         -7.2737e-01, -9.4136e-02]], device='cuda:0') tensor(0.2030, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
293000 特征值优化 tensor(0.5348, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.8205e-01,  4.1078e-01, -1.1559e+00, -6.3302e-01, -1.5520e+00,
          2.0721e-01, -3.2002e+00,  3.8619e+00, -1.7667e+00, -7.7044e-01,
         -3.3199e+00, -7.4401e-01,  5.5393e-02, -3.6026e-02, -1.7583e-02,
         -3.1505e-01, -5.2742e-01, -2.8034e-01,  4.6135e-01, -9.1901e-02,
          7.7290e-02, -3.1519e-02, -1.1707e-01,  3.0200e-01,  1.6280e-01,
          7.2784e-02, -3.4557e-02,  1.0576e-01,  2.7535e-02,  1.9963e-01,
         -1.3076e-02,  1.0304e-01,  5.9791e-02, -9.7177e-02, -6.1371e-02,
         -5.7617e-02,  3.9175e-01, -2.2120e-01,  1.1567e-02,  3.8221e-02,
         -2.0565e-01,  2.1093e-01,  2.3944e-01,  5.1624e-01,  1.3640e-02,
         -4.6005e-01, -3.9807e-02, -3.2568e-01,  2.4211e-01, -4.5045e-01,
          2.2277e-01,  1.0427e-01, -1.9371e-01, -6.9042e-02,  3.6505e-01,
          3.3886e-01,  5.8724e-02,  2.2501e-01,  2.8587e-01,  2.0812e-01,
          1.1422e+00, -3.1302e-02, -1.4213e+00,  5.2330e-02,  3.3281e-01,
          1.1330e-01,  9.7320e-02,  1.9068e-03,  1.4380e+00, -2.3473e-01,
         -7.2219e-01, -1.0227e-01]], device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
294000 特征值优化 tensor(0.5311, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.5878e-01,  4.1514e-01, -1.1728e+00, -6.3225e-01, -1.5642e+00,
          1.9355e-01, -3.2303e+00,  3.8892e+00, -1.7833e+00, -7.9547e-01,
         -3.3182e+00, -7.1897e-01,  5.5673e-02, -7.9824e-02, -5.8703e-02,
         -2.9557e-01, -5.2525e-01, -2.8705e-01,  4.6676e-01, -8.9993e-02,
          7.7281e-02, -3.7405e-02, -1.0286e-01,  3.1800e-01,  1.7197e-01,
          8.6347e-02, -3.7129e-02,  9.3183e-02,  2.4407e-02,  2.0050e-01,
         -1.3159e-02,  1.1984e-01,  3.1041e-02, -9.6963e-02, -5.5527e-02,
         -6.2365e-02,  3.8026e-01, -2.3213e-01,  1.2272e-02,  4.1468e-02,
         -1.7930e-01,  2.0753e-01,  2.2760e-01,  5.1433e-01,  1.6572e-02,
         -4.7017e-01, -3.5326e-02, -3.2913e-01,  2.3664e-01, -4.5790e-01,
          2.2456e-01,  1.0767e-01, -2.1204e-01, -5.7078e-02,  3.7174e-01,
          3.0532e-01,  7.4545e-02,  2.1908e-01,  2.8773e-01,  2.1205e-01,
          1.1638e+00, -1.1849e-02, -1.4058e+00,  5.5940e-02,  3.3269e-01,
          1.1340e-01,  1.1280e-01, -3.1786e-03,  1.4698e+00, -2.6590e-01,
         -7.2255e-01, -9.3993e-02]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
295000 特征值优化 tensor(0.5367, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3788,  0.3912, -1.1728, -0.6083, -1.5494,  0.1971, -3.2434,  3.8962,
         -1.7748, -0.7693, -3.3329, -0.7629,  0.0533,  0.0134,  0.0252, -0.2981,
         -0.5204, -0.3142,  0.5117, -0.0904,  0.0755, -0.0376, -0.1317,  0.2902,
          0.1446,  0.0990, -0.0207,  0.1279,  0.0250,  0.2054, -0.0134,  0.0860,
          0.0770, -0.0972, -0.0680, -0.0519,  0.3942, -0.2167,  0.0281,  0.0627,
         -0.2139,  0.1855,  0.2366,  0.5106,  0.0128, -0.4567, -0.0410, -0.3292,
          0.2420, -0.4632,  0.2233,  0.1127, -0.1982, -0.0673,  0.3562,  0.3475,
          0.0620,  0.2263,  0.2909,  0.2150,  1.1648, -0.0328, -1.4375,  0.0714,
          0.3272,  0.1212,  0.1086,  0.0178,  1.4602, -0.2487, -0.6939, -0.1021]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
296000 特征值优化 tensor(0.5347, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3767,  0.4022, -1.1649, -0.6177, -1.5863,  0.1991, -3.2432,  3.9204,
         -1.7671, -0.7682, -3.3327, -0.7663,  0.0531,  0.0236,  0.0406, -0.3095,
         -0.5148, -0.3212,  0.5264, -0.0893,  0.0752, -0.0339, -0.1361,  0.2878,
          0.1252,  0.1078,  0.0082,  0.1524,  0.0263,  0.2024, -0.0131,  0.0795,
          0.0924, -0.0966, -0.0718, -0.0493,  0.3932, -0.2102,  0.0272,  0.0637,
         -0.2204,  0.1863,  0.2367,  0.5109,  0.0149, -0.4638, -0.0381, -0.3260,
          0.2424, -0.4545,  0.2213,  0.1076, -0.1880, -0.0640,  0.3536,  0.3488,
          0.0530,  0.2296,  0.2977,  0.2094,  1.1742, -0.0364, -1.4521,  0.0631,
          0.3219,  0.1228,  0.1019,  0.0208,  1.4615, -0.2416, -0.6876, -0.1041]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
297000 特征值优化 tensor(1.6945, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.6084,  0.3307, -0.9573,  0.4590, -0.7415, -0.3016,  0.1281, -0.4855,
         -1.3117, -0.7784, -1.4717, -1.0966,  0.4342, -0.2961,  0.3637, -0.0360,
         -0.1425, -0.1173,  1.3419, -0.4381,  0.4054,  0.1962, -0.0477, -0.0152,
          0.0061, -0.0299,  0.0190,  0.0087,  0.0215,  0.1739,  0.0664,  0.0166,
         -0.0711, -0.2057,  0.0198,  0.3876, -0.4420, -0.3822,  0.1047,  0.0965,
         -0.3391,  0.0129, -0.0136,  0.3848, -0.3072, -1.0420, -0.0910,  0.6459,
          0.2683,  0.0202, -0.6552, -0.0442,  0.1932,  0.2541,  0.6376,  0.4569,
          0.0269,  0.2687,  0.0632,  0.1436, -0.7514, -0.1298, -0.3888, -0.0112,
         -0.5137, -0.0925,  0.2146, -0.5426, -0.6343, -0.2993, -1.7842,  0.4833]],
       device='cuda:0') tensor(0.2147, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
298000 特征值优化 tensor(0.7086, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.6649e+00,  4.7955e-01, -8.7363e-01,  2.2461e-01, -1.3357e+00,
         -4.5909e-01,  1.3093e-01, -3.8380e-01, -8.2501e-01, -2.7226e-01,
         -1.6463e+00, -7.1096e-01,  3.6862e-01, -2.4101e-01,  8.1788e-02,
          7.5041e-02, -1.1635e-01, -4.4220e-01,  6.4408e-01, -2.6013e-01,
          3.6947e-01,  1.6378e-01, -1.2658e-01,  4.2373e-02,  6.0419e-02,
          4.3218e-02,  7.5992e-02,  1.2129e-01,  7.0754e-02,  1.9689e-01,
          4.4866e-02, -2.3547e-02,  2.3519e-02, -1.8746e-01,  1.3953e-03,
          2.4809e-01, -3.3095e-01, -1.8445e-01, -3.1095e-02, -5.2297e-02,
         -2.6241e-01,  1.6978e-02,  1.5713e-01,  9.8790e-02, -1.0262e-01,
         -9.2138e-01, -1.0741e-01,  4.5494e-01,  2.3309e-01,  4.9810e-02,
         -7.8202e-01,  5.1499e-02,  2.4884e-01,  2.3717e-01,  4.1542e-01,
          5.0168e-01,  7.9053e-02,  2.2374e-01,  2.1014e-02,  6.6735e-01,
         -3.3435e-01, -1.1544e-01, -8.0240e-02, -7.3231e-02, -2.4161e-01,
          1.3432e-01,  4.2583e-01, -2.3273e-01, -4.3110e-01, -4.4154e-01,
         -1.6791e+00,  2.4556e-01]], device='cuda:0') tensor(0.2098, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
299000 特征值优化 tensor(0.6628, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.5848,  0.5597, -0.7241,  0.0914, -1.4829, -0.4826,  0.1879, -0.3335,
         -0.9718, -0.1735, -1.3883, -0.5123,  0.3431, -0.3321,  0.1493, -0.0418,
         -0.1344, -0.4059,  0.5514, -0.2027,  0.3384,  0.1627, -0.0912,  0.1260,
         -0.0335,  0.0409,  0.1212,  0.1215,  0.0101,  0.1998,  0.0538, -0.0446,
          0.0220, -0.1862,  0.0095,  0.2072, -0.3145, -0.1575, -0.0599, -0.0838,
         -0.2339,  0.0563,  0.2995,  0.0789, -0.1566, -0.8413, -0.1149,  0.3691,
          0.2235,  0.0757, -0.6752,  0.0276,  0.3257,  0.2143,  0.4067,  0.5025,
          0.1406,  0.1961,  0.0559,  0.5851, -0.3212, -0.0953, -0.0673, -0.0456,
         -0.2184,  0.0875,  0.2335, -0.1536, -0.5319, -0.3937, -1.3650,  0.1337]],
       device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
300000 特征值优化 tensor(0.6545, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.5677,  0.5377, -0.6709,  0.0330, -1.5306, -0.4928,  0.1591, -0.2622,
         -0.9958, -0.1979, -1.1885, -0.5526,  0.3427, -0.3891,  0.1469, -0.1095,
         -0.1942, -0.3779,  0.4633, -0.1995,  0.3396,  0.1647, -0.1081,  0.1685,
         -0.0182, -0.0028,  0.1176,  0.1823, -0.0104,  0.2026,  0.0547, -0.0792,
          0.0214, -0.1859,  0.0239,  0.1947, -0.3110, -0.1695, -0.0651, -0.0608,
         -0.2201,  0.0618,  0.2975,  0.0709, -0.1594, -0.8240, -0.1187,  0.3358,
          0.2090,  0.0871, -0.6254,  0.0113,  0.3387,  0.2182,  0.3972,  0.5381,
          0.1530,  0.1918,  0.0443,  0.5709, -0.3435, -0.1038, -0.0643, -0.0255,
         -0.1943,  0.0839,  0.0937, -0.1136, -0.5427, -0.3439, -1.2032,  0.0644]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
301000 特征值优化 tensor(0.6442, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.5477,  0.4687, -0.6659,  0.0129, -1.5316, -0.5543,  0.1036, -0.2674,
         -1.0078, -0.2152, -0.9793, -0.5609,  0.3436, -0.4133,  0.0791, -0.0464,
         -0.2862, -0.3467,  0.3392, -0.1791,  0.3488,  0.1654, -0.1213,  0.1707,
          0.0377, -0.0396,  0.0830,  0.2318,  0.0101,  0.1991,  0.0476, -0.0612,
          0.0292, -0.1841,  0.0335,  0.1698, -0.3183, -0.1780, -0.0726, -0.0422,
         -0.1842,  0.0847,  0.3028,  0.0360, -0.1814, -0.7806, -0.1264,  0.3320,
          0.2068,  0.0990, -0.6228,  0.0140,  0.3473,  0.2156,  0.3661,  0.5811,
          0.2064,  0.1807,  0.0889,  0.5269, -0.3665, -0.1169, -0.0265, -0.0163,
         -0.1930,  0.0770,  0.0505, -0.1016, -0.5845, -0.2999, -0.9782, -0.0038]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
302000 特征值优化 tensor(0.6386, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.6007,  0.2118, -0.6244, -0.0435, -1.5008, -0.5372,  0.0942, -0.2570,
         -0.9814, -0.1937, -0.9452, -0.6267,  0.3780, -0.4086,  0.0685, -0.0059,
         -0.2638, -0.3510,  0.2730, -0.1645,  0.3892,  0.1689, -0.1400,  0.1712,
          0.0698, -0.0123,  0.0713,  0.2450,  0.0196,  0.1948,  0.0509, -0.0458,
          0.0313, -0.1810,  0.0441,  0.1563, -0.3188, -0.1736, -0.0705, -0.0270,
         -0.1822,  0.0885,  0.2807, -0.0148, -0.2445, -0.7059, -0.1686,  0.3208,
          0.1867,  0.1259, -0.6127,  0.0167,  0.3209,  0.2161,  0.3558,  0.5862,
          0.2086,  0.1814,  0.0628,  0.5125, -0.3631, -0.1181, -0.0180, -0.0128,
         -0.2055,  0.0882, -0.0071, -0.1104, -0.5878, -0.2890, -0.8764, -0.0500]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
303000 特征值优化 tensor(0.6398, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.6442, -0.0250, -0.6220, -0.0501, -1.4969, -0.4816,  0.1335, -0.2179,
         -0.9972, -0.0634, -0.9063, -0.6042,  0.4160, -0.4256,  0.0620,  0.0198,
         -0.2626, -0.3413,  0.2618, -0.1572,  0.4238,  0.1697, -0.0935,  0.2011,
          0.0351,  0.0604,  0.0670,  0.2753, -0.0266,  0.1954,  0.0510, -0.0297,
          0.0399, -0.1801,  0.0297,  0.1593, -0.3223, -0.1668, -0.0962, -0.0513,
         -0.1431,  0.1080,  0.2472, -0.0649, -0.2793, -0.6571, -0.2078,  0.3230,
          0.1575,  0.1499, -0.6010,  0.0107,  0.3281,  0.2091,  0.3442,  0.5764,
          0.1926,  0.1771,  0.2071,  0.4596, -0.3829, -0.1221, -0.0173, -0.0101,
         -0.2319,  0.0973,  0.0507, -0.1177, -0.5641, -0.2626, -0.9220, -0.0158]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
304000 特征值优化 tensor(0.6362, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.6296e+00, -2.1489e-01, -6.3588e-01, -4.5014e-02, -1.5205e+00,
         -5.3731e-01,  1.7101e-01, -2.3964e-01, -9.8753e-01,  9.1420e-03,
         -8.0642e-01, -6.2479e-01,  4.3722e-01, -4.4441e-01,  3.6384e-02,
         -8.6993e-04, -2.5222e-01, -2.7694e-01,  2.3319e-01, -1.5732e-01,
          4.4537e-01,  1.7080e-01, -1.3744e-01,  1.4185e-01,  6.8008e-03,
          3.2301e-02, -2.1871e-02,  3.2083e-01,  2.4373e-02,  1.9578e-01,
          5.1219e-02, -4.9397e-02,  3.1150e-02, -1.7714e-01,  1.2602e-02,
          1.4952e-01, -3.2071e-01, -1.6493e-01, -8.4977e-02, -4.0247e-02,
         -1.4292e-01,  1.0112e-01,  1.9581e-01, -1.0193e-01, -2.8248e-01,
         -6.0755e-01, -2.2850e-01,  3.2740e-01,  1.5057e-01,  1.5729e-01,
         -5.8792e-01,  3.0511e-05,  3.4685e-01,  2.0608e-01,  3.5391e-01,
          5.9769e-01,  2.4066e-01,  1.6782e-01,  1.9337e-01,  4.4426e-01,
         -3.8515e-01, -1.3292e-01,  1.9471e-02, -1.7657e-02, -2.4519e-01,
          8.5058e-02,  1.6812e-02, -1.3847e-01, -5.9557e-01, -2.2452e-01,
         -9.1051e-01, -4.3850e-03]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
305000 特征值优化 tensor(0.6230, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.6178e+00, -5.0269e-01, -6.2183e-01, -1.6174e-02, -1.5338e+00,
         -5.9472e-01,  2.1484e-01, -1.3572e-01, -1.0409e+00, -1.1681e-01,
         -6.0160e-01, -5.0340e-01,  4.6866e-01, -4.0590e-01, -2.8601e-02,
         -6.8554e-05, -2.7892e-01, -2.3834e-01,  1.8622e-01, -1.5721e-01,
          4.7918e-01,  1.6973e-01, -1.1494e-01,  8.6261e-02,  8.1821e-02,
          1.2637e-02, -6.3267e-02,  2.9844e-01,  2.6789e-02,  1.9657e-01,
          5.9078e-02, -3.4491e-02,  1.9742e-02, -1.8576e-01, -2.7773e-03,
          1.5651e-01, -2.7135e-01, -1.2104e-01, -9.2864e-02, -2.0708e-02,
         -1.1887e-01,  1.1604e-01,  1.1775e-01, -2.6087e-01, -1.7742e-01,
         -5.4129e-01, -2.5835e-01,  3.1863e-01,  1.6119e-01,  1.4386e-01,
         -6.0218e-01,  1.0289e-03,  3.3631e-01,  2.1193e-01,  3.9945e-01,
          5.7423e-01,  2.4193e-01,  1.6870e-01,  2.0021e-01,  4.5476e-01,
         -2.8032e-01, -7.8867e-02, -7.1440e-02,  8.4553e-02, -2.1721e-01,
          6.4628e-02,  5.2199e-02, -1.6874e-01, -6.7672e-01, -2.2430e-01,
         -9.5174e-01,  3.7065e-02]], device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
306000 特征值优化 tensor(0.6207, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.7133e+00, -6.0328e-01, -6.4930e-01, -1.0377e-02, -1.5629e+00,
         -5.6457e-01,  2.7056e-01, -1.5454e-01, -9.8260e-01, -9.6682e-02,
         -6.8062e-01, -4.8363e-01,  4.8970e-01, -4.1493e-01, -3.4539e-02,
         -1.5733e-03, -2.9508e-01, -2.3832e-01,  1.8077e-01, -1.5941e-01,
          5.0142e-01,  1.6951e-01, -6.5789e-02,  8.9531e-02,  8.0596e-02,
          5.9454e-03, -9.6600e-02,  3.2112e-01,  3.1837e-02,  1.9696e-01,
          5.9394e-02, -3.1090e-02,  2.9167e-02, -1.8595e-01,  1.0760e-02,
          1.4963e-01, -2.6503e-01, -1.2763e-01, -8.6945e-02,  2.2587e-03,
         -1.3908e-01,  1.2470e-01,  1.2620e-01, -2.4619e-01, -2.4361e-01,
         -5.2544e-01, -2.8498e-01,  3.3171e-01,  1.5803e-01,  1.4534e-01,
         -6.0261e-01,  1.3163e-03,  3.5254e-01,  2.1050e-01,  3.6411e-01,
          5.9241e-01,  2.3249e-01,  1.6589e-01,  2.0184e-01,  4.4471e-01,
         -3.2321e-01, -6.6179e-02, -3.1388e-02,  5.2834e-02, -2.5688e-01,
          7.9123e-02,  3.1327e-02, -1.7528e-01, -6.6283e-01, -2.2888e-01,
         -9.0170e-01,  2.6309e-02]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
307000 特征值优化 tensor(0.6369, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.7473e+00, -5.9074e-01, -6.4566e-01, -1.0667e-02, -1.5297e+00,
         -5.5637e-01,  2.6863e-01, -1.3493e-01, -9.7067e-01, -3.9807e-02,
         -6.6454e-01, -5.0577e-01,  4.9715e-01, -4.2050e-01, -2.4187e-02,
          5.7108e-02, -2.4343e-01, -2.2582e-01,  1.8117e-01, -1.5580e-01,
          5.0295e-01,  1.6692e-01, -4.0855e-02,  8.7020e-02,  1.2171e-02,
         -5.6078e-02, -7.5853e-02,  3.0844e-01,  2.2525e-02,  1.9763e-01,
          5.3069e-02, -2.9476e-02,  4.4963e-02, -1.8473e-01,  1.1779e-02,
          1.5456e-01, -3.0648e-01, -1.2848e-01, -8.5163e-02, -1.1212e-02,
         -1.0430e-01,  1.1423e-01,  1.4343e-01, -2.3987e-01, -2.6746e-01,
         -5.4024e-01, -2.8322e-01,  3.3295e-01,  1.5659e-01,  1.4738e-01,
         -6.0102e-01,  5.3498e-03,  3.7031e-01,  2.0587e-01,  3.1971e-01,
          5.9756e-01,  2.2354e-01,  1.6462e-01,  2.3273e-01,  4.2015e-01,
         -4.1315e-01, -1.0364e-01,  3.5276e-02, -5.1634e-04, -2.4494e-01,
          8.1146e-02,  1.7489e-02, -1.4643e-01, -6.1482e-01, -1.8205e-01,
         -9.2278e-01,  2.9582e-02]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
308000 特征值优化 tensor(0.6187, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.6888, -0.7798, -0.6622, -0.0393, -1.5599, -0.5107,  0.2864, -0.1525,
         -1.0810, -0.2797, -0.6970, -0.3762,  0.5127, -0.3809, -0.0998,  0.0154,
         -0.3062, -0.0989,  0.1132, -0.1449,  0.5155,  0.1687, -0.0456, -0.0114,
         -0.0203, -0.0401, -0.1484,  0.2980,  0.0227,  0.1981,  0.0643, -0.0580,
          0.0302, -0.1856,  0.0289,  0.1585, -0.2967, -0.1183, -0.0654,  0.0321,
         -0.1079,  0.0940,  0.1030, -0.2951, -0.2436, -0.4877, -0.3070,  0.3350,
          0.1543,  0.1470, -0.5884,  0.0036,  0.3581,  0.1960,  0.3752,  0.5771,
          0.1924,  0.1726,  0.2953,  0.4017, -0.4058, -0.0739, -0.0141,  0.0253,
         -0.2428,  0.0537,  0.0364, -0.1853, -0.6197, -0.2264, -0.9053,  0.0402]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
309000 特征值优化 tensor(19.8528, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.9316e-01,  1.5132e+00,  1.7777e+00,  2.6044e-01, -2.5486e+00,
          4.7198e-01,  7.6863e-02,  9.5733e-02,  1.6140e+00, -1.3796e-02,
          3.4163e-01, -1.1619e+00, -4.8964e-01,  7.8271e-01, -5.3068e-02,
          3.6217e-01,  5.6818e-01,  4.3561e-01, -1.2137e+00, -1.0797e-01,
         -7.2132e-02, -9.0283e-01, -9.2852e-02,  1.2509e+00, -8.7135e-03,
          9.5111e-02, -3.3526e-01,  1.9105e-01, -9.8728e-01, -1.4135e+00,
          2.2896e+00,  9.5743e-01,  6.1666e-01,  3.2993e-01, -2.1310e-01,
          3.1876e+00,  3.9838e-01,  1.2086e-01, -4.6528e-03,  1.9482e+00,
          1.2068e-03, -3.8618e-01, -2.6441e-01,  8.0949e-01, -4.7288e-01,
         -1.0018e+00, -1.8481e+00,  2.6462e-01, -1.4418e+00,  2.0653e-01,
         -6.4876e-01,  2.9682e-01,  6.5997e-01, -1.6013e+00, -1.6036e+00,
          2.2806e+00,  5.4112e-01, -2.6977e-01,  3.2439e-01,  1.6504e+00,
         -1.3298e-01,  1.0085e+00,  5.5640e-01,  1.0106e+00, -9.3304e-01,
         -1.3971e+00,  7.6004e-02,  4.4933e-01, -2.3349e+00,  1.3526e-01,
         -1.8389e+00,  9.2174e-01]], device='cuda:0') tensor(0.2125, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
310000 正交保障 tensor(0.2046, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4734,  1.5391,  0.8623, -0.1586, -3.3245, -0.6269, -0.7311,  0.0531,
          0.4728,  0.2643,  0.2693, -2.2323, -0.0322,  0.1478, -0.1369, -0.0517,
         -0.0191, -0.0895, -0.4395,  0.0258,  0.0300, -0.2952,  0.0178,  0.2488,
          0.1300, -0.0731, -0.0769, -0.0468, -0.2308, -0.5592,  1.3656,  0.2332,
          0.0548, -0.0423,  0.0328,  2.1472,  0.0141, -0.0693, -0.0842,  0.8656,
          0.1247, -0.0594, -0.6418,  1.3528,  0.3258, -0.2102, -1.0009, -0.4899,
         -0.7280,  0.6209, -0.6624, -0.1689,  0.0228, -1.0528, -0.4859,  1.1388,
         -0.5057,  0.6906, -0.1878,  0.9649, -0.2861,  0.0948, -0.1282,  0.3003,
         -1.2139, -0.3211, -0.0729,  0.1546, -1.3568,  0.2808, -2.8488,  1.6030]],
       device='cuda:0') tensor(0.2046, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
311000 特征值优化 tensor(1.0329, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.8843,  0.4599,  0.3507,  0.2161, -3.6213, -1.4567, -1.5571,  0.2542,
         -0.0697,  0.0849, -0.5855, -2.8294, -0.0413,  0.3641, -0.4768, -0.1319,
         -0.1469,  0.2305, -0.2199,  0.1203,  0.0199, -0.0616,  0.0374,  0.0925,
          0.1320, -0.1466,  0.0472,  0.0919, -0.0953, -0.1879,  0.8316,  0.0322,
          0.0389, -0.0153,  0.0519,  1.5579,  0.0310, -0.0829, -0.0211,  0.3797,
          0.1046, -0.0278,  0.2855,  0.6453, -0.0222, -0.0729, -0.5557, -0.2874,
         -0.0846,  0.3994, -0.2964, -0.0330,  0.2004, -0.6718, -0.2957,  0.8668,
         -1.1835,  0.9071, -0.5626,  1.4717,  0.2272,  0.1382, -0.0898,  0.0887,
         -0.4690, -0.0916, -0.1008,  0.0893, -0.6158, -0.0409, -3.2375,  2.2712]],
       device='cuda:0') tensor(0.2050, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
312000 特征值优化 tensor(0.7796, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5079e+00,  8.9674e-02,  1.8769e-01,  2.7837e-01, -3.4210e+00,
         -1.6039e+00, -1.5713e+00,  1.5750e-01, -9.3240e-02, -4.8272e-01,
         -3.9331e-01, -3.0419e+00, -6.0145e-02,  2.8527e-01, -3.7261e-01,
         -7.2530e-02, -7.7299e-02,  3.4326e-01, -1.2265e-01,  1.6334e-01,
          5.3403e-02, -5.2270e-02,  5.5828e-02, -1.4448e-02,  5.5749e-02,
         -9.7127e-02,  7.0387e-02,  1.0252e-01, -8.8894e-02, -1.9657e-01,
          9.0766e-01,  2.2997e-03,  7.4853e-02, -2.3245e-02,  7.0815e-02,
          1.4256e+00, -5.1204e-05, -6.6959e-02, -9.7826e-02,  3.8496e-01,
          1.4693e-01,  3.7429e-02,  3.2136e-01,  1.4719e-01,  8.7843e-02,
         -4.9040e-01, -1.8686e-01, -2.1767e-01, -1.5221e-01,  3.7934e-01,
         -2.4707e-01, -2.7240e-02,  1.4103e-01, -6.0318e-01, -1.7203e-01,
          7.2492e-01, -1.1108e+00,  8.5293e-01, -6.4937e-01,  1.1479e+00,
          2.4117e-01,  1.6512e-01, -9.6319e-02,  3.0771e-02, -2.0260e-01,
         -5.5651e-02,  1.8107e-01,  1.7587e-01, -7.0497e-01, -7.2090e-02,
         -3.1699e+00,  2.0853e+00]], device='cuda:0') tensor(0.2076, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
313000 特征值优化 tensor(0.7483, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3357e+00, -8.1662e-02,  2.0413e-01,  2.5519e-01, -3.3003e+00,
         -1.7149e+00, -1.3790e+00,  1.3854e-04, -6.5499e-02, -6.1804e-01,
         -4.2255e-01, -3.1653e+00, -6.1800e-02,  3.4388e-01, -1.7897e-01,
          1.0547e-02, -1.1736e-01,  3.2788e-01, -2.1495e-01,  1.5036e-01,
          5.5845e-02, -5.6009e-02, -3.3110e-02, -2.2775e-02,  2.5007e-02,
         -9.5827e-02, -5.7949e-02,  3.8979e-02, -8.8382e-02, -2.0569e-01,
          8.9799e-01, -3.6245e-02,  8.4715e-02, -1.8027e-02,  4.2138e-02,
          1.3410e+00,  4.6195e-03,  5.6355e-03, -1.2317e-01,  3.8605e-01,
          1.4454e-01,  1.7029e-01,  2.2951e-01,  1.0986e-01,  1.1088e-01,
         -4.3335e-01, -1.6501e-01, -2.2229e-01, -1.4382e-01,  3.8382e-01,
         -2.4366e-01, -2.5181e-02,  1.1007e-01, -5.9237e-01, -5.0936e-02,
          7.9041e-01, -9.3504e-01,  8.0255e-01, -6.1025e-01,  1.0385e+00,
          1.6867e-01,  1.8890e-01, -7.7772e-02,  5.7898e-02, -1.5267e-01,
         -2.2254e-02,  1.6628e-01,  2.0860e-01, -7.2366e-01, -1.0397e-01,
         -3.0739e+00,  1.7941e+00]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
314000 特征值优化 tensor(0.7351, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2364, -0.1953,  0.2055,  0.2499, -3.1726, -1.7365, -1.3934, -0.0750,
         -0.0845, -0.6680, -0.4333, -3.2135, -0.0598,  0.3138, -0.1813, -0.0835,
         -0.1636,  0.3148, -0.1957,  0.1447,  0.0563, -0.0606, -0.0611, -0.0534,
          0.0064, -0.0741, -0.0364,  0.0876, -0.0890, -0.2086,  0.8707,  0.0171,
          0.0910, -0.0177,  0.0304,  1.2323,  0.0183,  0.0069, -0.1520,  0.3864,
          0.1391,  0.2833,  0.1931,  0.0956,  0.1035, -0.3732, -0.1692, -0.2228,
         -0.1367,  0.3843, -0.2382, -0.0217,  0.1031, -0.5631,  0.0475,  0.7649,
         -0.7476,  0.7105, -0.5747,  0.9387,  0.1713,  0.1957, -0.0630,  0.0271,
         -0.1010,  0.0045,  0.1748,  0.2272, -0.7158, -0.1083, -3.0262,  1.5273]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
315000 特征值优化 tensor(0.7036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2331, -0.2034,  0.2140,  0.2193, -3.1072, -1.8122, -1.5390, -0.3145,
          0.0296, -0.6653, -0.3089, -3.1803, -0.0634,  0.2333, -0.2766, -0.0106,
         -0.0418,  0.3835, -0.1134,  0.0937,  0.0553, -0.0570, -0.0179, -0.0158,
         -0.0646, -0.0999, -0.1067,  0.0461, -0.0903, -0.2059,  0.8507,  0.0574,
          0.0792, -0.0153,  0.0408,  1.1244,  0.0248,  0.0407, -0.1304,  0.3976,
          0.1301,  0.3222,  0.2298,  0.0758,  0.0725, -0.3696, -0.1696, -0.2345,
         -0.1438,  0.3868, -0.2021, -0.0373,  0.0569, -0.5162,  0.2743,  0.7493,
         -0.5461,  0.6331, -0.5570,  0.8307,  0.2047,  0.1252, -0.1890,  0.0414,
         -0.1241,  0.0176,  0.1201,  0.2111, -0.7426, -0.0568, -2.9793,  1.3626]],
       device='cuda:0') tensor(0.2034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
316000 特征值优化 tensor(0.6965, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2467e+00, -1.9102e-01,  2.2103e-01,  2.1637e-01, -2.9854e+00,
         -1.8669e+00, -1.6060e+00, -3.5574e-01,  7.9556e-02, -6.3301e-01,
         -2.8838e-01, -3.0957e+00, -6.5441e-02,  2.4159e-01, -2.9011e-01,
         -2.8487e-02, -3.8736e-02,  3.2920e-01, -1.6744e-01,  9.3829e-02,
          5.6806e-02, -5.6270e-02, -8.0957e-03, -1.8987e-02, -8.1170e-02,
         -1.0991e-01, -1.3461e-01,  7.7564e-02, -9.0524e-02, -2.0538e-01,
          8.1112e-01,  4.4624e-02,  8.4736e-02, -1.5374e-02,  4.6980e-02,
          1.0558e+00,  3.1132e-04,  4.8195e-02, -1.1507e-01,  4.1091e-01,
          1.3150e-01,  3.3095e-01,  2.3479e-01,  6.4556e-02,  7.9649e-02,
         -3.7294e-01, -1.6711e-01, -2.3767e-01, -1.4517e-01,  3.8880e-01,
         -1.9734e-01, -3.8841e-02,  9.5216e-02, -4.8765e-01,  3.1099e-01,
          7.1492e-01, -3.8833e-01,  5.6682e-01, -5.6320e-01,  7.6198e-01,
          1.6965e-01,  1.1894e-01, -1.7236e-01,  4.7831e-02, -1.7877e-01,
          1.2573e-02,  8.4327e-02,  1.8202e-01, -7.2801e-01, -5.7942e-02,
         -2.8477e+00,  1.2885e+00]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
317000 特征值优化 tensor(0.6959, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2688, -0.2078,  0.2008,  0.2070, -2.8598, -1.8354, -1.6519, -0.4091,
          0.0262, -0.7357, -0.2870, -3.0015, -0.0625,  0.3506, -0.2809, -0.0245,
         -0.0804,  0.2636, -0.2047,  0.0942,  0.0571, -0.0565,  0.0287, -0.0084,
         -0.1084, -0.0531, -0.2770,  0.0140, -0.0909, -0.2050,  0.7850,  0.0561,
          0.0808, -0.0128,  0.0574,  0.9744,  0.0266,  0.0725, -0.1056,  0.4024,
          0.1090,  0.3324,  0.2473,  0.0732,  0.0692, -0.3708, -0.1723, -0.2327,
         -0.1480,  0.3849, -0.1986, -0.0417,  0.0760, -0.4554,  0.3751,  0.6788,
         -0.2817,  0.5023, -0.5772,  0.6752,  0.1603,  0.1239, -0.1297,  0.0480,
         -0.1682,  0.0211,  0.1549,  0.1502, -0.7111, -0.0644, -2.5944,  1.1587]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
318000 特征值优化 tensor(0.6983, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2598e+00, -1.8455e-01,  2.0868e-01,  2.1061e-01, -2.7019e+00,
         -1.7633e+00, -1.6759e+00, -4.4891e-01, -2.8247e-02, -7.7326e-01,
         -2.5206e-01, -2.8041e+00, -6.6577e-02,  2.8212e-01, -2.9495e-01,
         -1.9128e-02, -7.5469e-02,  2.6126e-01, -1.9589e-01,  9.5369e-02,
          5.9806e-02, -5.6390e-02,  2.6600e-02,  3.1598e-02, -1.0889e-01,
         -9.4003e-02, -2.3015e-01,  2.2090e-02, -8.9492e-02, -2.0498e-01,
          7.3922e-01,  4.7207e-02,  8.9394e-02, -1.3778e-02,  6.4847e-02,
          9.0072e-01,  2.5250e-02,  7.0930e-02, -1.1806e-01,  3.9161e-01,
          1.1264e-01,  3.7110e-01,  2.3629e-01, -9.0406e-05,  1.3759e-01,
         -3.6885e-01, -1.7041e-01, -2.3490e-01, -1.4443e-01,  3.8533e-01,
         -1.9732e-01, -4.1752e-02,  8.7597e-02, -4.0730e-01,  3.8680e-01,
          6.5117e-01, -2.7319e-01,  4.8287e-01, -5.7940e-01,  6.0655e-01,
          1.3711e-01,  1.0073e-01, -1.1609e-01,  3.2297e-02, -1.5553e-01,
         -4.9376e-03,  1.6148e-01,  1.2323e-01, -6.9646e-01, -5.0235e-02,
         -2.2847e+00,  1.0470e+00]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
319000 特征值优化 tensor(0.6871, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3610e+00, -1.3223e-01,  2.3166e-01,  2.1247e-01, -2.5573e+00,
         -1.7509e+00, -1.6544e+00, -4.4531e-01,  2.9585e-02, -7.7735e-01,
         -2.7316e-01, -2.3652e+00, -6.2826e-02,  3.0402e-01, -3.5484e-01,
         -7.6643e-04, -3.5380e-02,  2.7261e-01, -1.7446e-01,  9.0577e-02,
          6.0091e-02, -5.5651e-02,  3.7435e-02,  5.5759e-02, -1.0587e-01,
         -1.2582e-01, -1.9830e-01,  3.2901e-02, -9.0401e-02, -2.0395e-01,
          7.0607e-01,  1.9237e-02,  9.7849e-02, -1.4272e-02,  6.5004e-02,
          8.2873e-01,  2.2920e-02,  6.2333e-02, -1.4669e-01,  3.2545e-01,
          1.1533e-01,  3.9578e-01,  2.8800e-01,  6.6535e-02,  7.2068e-02,
         -4.1457e-01, -1.6606e-01, -2.4191e-01, -1.4155e-01,  3.8694e-01,
         -2.0057e-01, -3.4721e-02,  1.0721e-01, -3.8971e-01,  3.5030e-01,
          6.5073e-01, -3.1080e-01,  4.9707e-01, -5.7847e-01,  5.0770e-01,
          1.2940e-01,  1.2383e-01, -1.4068e-01,  4.6466e-02, -1.5528e-01,
         -1.4570e-02,  1.4198e-01,  1.0939e-01, -6.8534e-01, -6.7158e-02,
         -1.8320e+00,  9.4435e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
320000 特征值优化 tensor(0.6759, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3569, -0.1139,  0.2380,  0.2246, -2.4046, -1.7694, -1.6756, -0.4621,
          0.1854, -0.7732, -0.2096, -1.9191, -0.0628,  0.2985, -0.2645, -0.0326,
         -0.1019,  0.2338, -0.2734,  0.0908,  0.0606, -0.0595,  0.0511,  0.0401,
         -0.1228, -0.1078, -0.2248, -0.0063, -0.0902, -0.2079,  0.6665,  0.0769,
          0.0580, -0.0199,  0.0565,  0.7287,  0.0283,  0.0748, -0.1398,  0.2608,
          0.1148,  0.3363,  0.2847,  0.0560,  0.0817, -0.4214, -0.1612, -0.2444,
         -0.1434,  0.3947, -0.2092, -0.0298,  0.0984, -0.3473,  0.3535,  0.6205,
         -0.3419,  0.5056, -0.5715,  0.3151,  0.1163,  0.1215, -0.1114,  0.0427,
         -0.2040, -0.0236,  0.0669,  0.0858, -0.6764, -0.0575, -1.2439,  0.8208]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
321000 特征值优化 tensor(0.6684, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3462, -0.1109,  0.2479,  0.2224, -2.2731, -1.8117, -1.6591, -0.4599,
          0.2489, -0.6564, -0.2109, -1.5562, -0.0623,  0.3205, -0.2465, -0.0115,
         -0.0673,  0.2337, -0.2490,  0.0909,  0.0609, -0.0586,  0.0808,  0.0387,
         -0.1370, -0.1281, -0.2049,  0.0153, -0.0908, -0.2067,  0.6352,  0.0742,
          0.0616, -0.0318,  0.0571,  0.6807,  0.0348,  0.0760, -0.1371,  0.2292,
          0.1126,  0.2407,  0.2799,  0.0630,  0.0795, -0.4259, -0.1584, -0.2483,
         -0.1425,  0.3948, -0.2098, -0.0272,  0.0873, -0.3139,  0.3411,  0.6140,
         -0.4549,  0.5488, -0.6028,  0.1859,  0.1138,  0.1277, -0.1105,  0.0441,
         -0.2330, -0.0292,  0.0357,  0.0892, -0.6749, -0.0561, -0.8533,  0.7395]],
       device='cuda:0') tensor(0.2078, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
322000 特征值优化 tensor(0.6663, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3391e+00, -1.2918e-01,  2.4775e-01,  2.1339e-01, -2.1519e+00,
         -1.8025e+00, -1.6991e+00, -5.0113e-01,  2.9495e-01, -5.9956e-01,
         -1.9378e-01, -1.6123e+00, -6.2651e-02,  2.9400e-01, -2.5336e-01,
         -4.9700e-02, -1.0676e-01,  2.3671e-01, -2.8136e-01,  8.8973e-02,
          6.0186e-02, -5.9647e-02,  4.1142e-02, -4.4746e-03, -1.3297e-01,
         -1.3477e-01, -2.2834e-01, -9.8303e-03, -9.0389e-02, -2.0752e-01,
          6.0628e-01,  7.7271e-02,  5.8215e-02, -3.1386e-02,  3.8506e-02,
          6.3637e-01,  3.5468e-02,  7.3470e-02, -1.4058e-01,  2.2600e-01,
          1.1240e-01,  2.4368e-01,  2.7389e-01,  3.3553e-02,  1.0782e-01,
         -4.2005e-01, -1.5725e-01, -2.4966e-01, -1.4390e-01,  3.9489e-01,
         -2.0578e-01, -2.9345e-02,  9.7690e-02, -2.9082e-01,  3.3722e-01,
          6.0580e-01, -4.7153e-01,  5.5253e-01, -5.7726e-01,  1.9076e-01,
          1.2148e-01,  1.2688e-01, -9.8945e-02,  3.9734e-02, -2.3075e-01,
         -1.4034e-03,  7.8377e-03,  1.3437e-01, -6.8178e-01, -4.9602e-02,
         -6.6870e-01,  6.1160e-01]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
323000 特征值优化 tensor(0.6772, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3460e+00, -1.0850e-01,  2.5019e-01,  2.0284e-01, -2.0722e+00,
         -1.8215e+00, -1.6592e+00, -4.7737e-01,  3.3129e-01, -5.3464e-01,
         -2.3939e-01, -1.6721e+00, -6.3917e-02,  2.4649e-01, -2.7186e-01,
         -4.4388e-02, -9.3747e-02,  2.5632e-01, -2.2467e-01,  9.0646e-02,
          6.0054e-02, -5.8039e-02, -2.6773e-03,  4.8391e-02, -1.7067e-01,
         -1.6179e-01, -1.4280e-01, -2.4340e-03, -9.0948e-02, -2.0614e-01,
          5.8266e-01,  4.6698e-02,  8.6917e-02, -2.9225e-02,  1.3772e-02,
          6.2549e-01,  3.9495e-02,  7.5124e-02, -1.4091e-01,  2.2643e-01,
          1.1586e-01,  2.4396e-01,  2.7611e-01,  6.3190e-02,  7.7536e-02,
         -4.2375e-01, -1.6400e-01, -2.5017e-01, -1.3972e-01,  3.8848e-01,
         -2.0046e-01, -3.1117e-02,  8.0352e-02, -2.5285e-01,  3.5552e-01,
          6.0414e-01, -4.6073e-01,  5.3765e-01, -5.8016e-01,  1.8256e-01,
          1.3187e-01,  1.3121e-01, -1.0460e-01,  4.4395e-02, -2.5299e-01,
          1.3621e-03, -6.6957e-02,  1.5731e-01, -6.9942e-01, -4.4268e-02,
         -6.1848e-01,  5.8675e-01]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
324000 特征值优化 tensor(0.6680, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3933, -0.1061,  0.2318,  0.1913, -2.0170, -1.8237, -1.6004, -0.4705,
          0.3395, -0.4229, -0.2617, -1.6918, -0.0684,  0.2749, -0.3127, -0.0182,
         -0.0782,  0.2921, -0.1805,  0.0903,  0.0546, -0.0596, -0.0120,  0.1202,
         -0.1764, -0.1625, -0.0950, -0.0186, -0.0913, -0.2079,  0.5715,  0.0316,
          0.0887, -0.0316, -0.0101,  0.6245,  0.0425,  0.0844, -0.1304,  0.2437,
          0.1123,  0.2243,  0.2952,  0.0645,  0.0653, -0.4299, -0.1674, -0.2481,
         -0.1505,  0.3909, -0.1973, -0.0374,  0.0770, -0.2425,  0.3914,  0.5672,
         -0.4646,  0.5458, -0.6007,  0.1777,  0.1022,  0.1464, -0.0924,  0.0647,
         -0.3062, -0.0137, -0.1858,  0.1732, -0.6703, -0.0622, -0.5518,  0.5900]],
       device='cuda:0') tensor(0.2035, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
325000 特征值优化 tensor(0.6630, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3885e+00, -1.0936e-01,  2.4808e-01,  2.1587e-01, -1.9823e+00,
         -1.8158e+00, -1.5818e+00, -4.3667e-01,  3.7453e-01, -4.7727e-01,
         -2.7008e-01, -1.6974e+00, -6.6170e-02,  2.9324e-01, -3.2328e-01,
          3.1527e-02, -3.9290e-02,  2.9898e-01, -1.4981e-01,  8.9252e-02,
          5.6098e-02, -6.0735e-02,  4.7217e-02,  2.0717e-01, -1.9523e-01,
         -1.2464e-01, -6.6774e-02,  5.2693e-02, -9.0947e-02, -2.0814e-01,
          5.5756e-01,  2.7642e-02,  9.0828e-02, -2.9569e-02,  3.3118e-04,
          6.2766e-01,  3.2413e-02,  8.6564e-02, -1.2867e-01,  2.4624e-01,
          1.2130e-01,  2.2314e-01,  2.9504e-01,  6.6555e-02,  6.6166e-02,
         -4.3306e-01, -1.6252e-01, -2.5091e-01, -1.4645e-01,  3.9494e-01,
         -2.0848e-01, -3.1070e-02,  9.7063e-02, -2.3578e-01,  3.7855e-01,
          5.6517e-01, -4.5337e-01,  5.4230e-01, -6.0704e-01,  1.8581e-01,
          1.1539e-01,  1.3343e-01, -1.1218e-01,  7.7979e-02, -3.2174e-01,
         -3.6687e-03, -1.3468e-01,  1.6284e-01, -7.0619e-01, -4.1542e-02,
         -5.6637e-01,  5.8711e-01]], device='cuda:0') tensor(0.2057, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
326000 特征值优化 tensor(0.6625, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3837e+00, -1.2433e-01,  2.4680e-01,  2.2568e-01, -1.9487e+00,
         -1.8148e+00, -1.5663e+00, -4.6310e-01,  3.8293e-01, -4.0993e-01,
         -3.0683e-01, -1.7078e+00, -6.8257e-02,  2.7164e-01, -2.7861e-01,
          4.9325e-02, -2.0480e-02,  3.0566e-01, -1.6751e-01,  8.9700e-02,
          5.3763e-02, -6.3199e-02,  1.0331e-01,  1.1551e-01, -2.2559e-01,
         -5.6207e-02, -5.5022e-02,  2.7225e-02, -9.0790e-02, -2.1060e-01,
          5.5905e-01,  6.8481e-03,  1.0428e-01, -3.1788e-02, -4.6588e-03,
          6.3806e-01,  5.3623e-02,  9.1908e-02, -1.1147e-01,  2.5981e-01,
          1.0115e-01,  2.0149e-01,  2.8901e-01,  6.4911e-02,  6.4303e-02,
         -4.2681e-01, -1.6659e-01, -2.5659e-01, -1.5152e-01,  3.9631e-01,
         -2.1919e-01, -3.2035e-02,  9.2685e-02, -2.4540e-01,  4.6061e-01,
          4.8194e-01, -4.4613e-01,  5.4267e-01, -5.9504e-01,  2.3125e-01,
          1.6236e-01,  1.2914e-01, -8.6622e-02,  7.6025e-02, -3.4760e-01,
          1.0097e-03, -1.8492e-01,  1.6782e-01, -7.2445e-01, -4.3899e-02,
         -5.7419e-01,  6.0375e-01]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
327000 特征值优化 tensor(0.6647, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3831e+00, -1.0476e-01,  2.3855e-01,  2.5073e-01, -1.9299e+00,
         -1.8063e+00, -1.6156e+00, -5.4155e-01,  3.5516e-01, -3.5803e-01,
         -2.5234e-01, -1.6877e+00, -6.3442e-02,  3.2984e-01, -2.2164e-01,
         -1.3571e-02, -7.7854e-02,  2.4036e-01, -2.5426e-01,  8.9680e-02,
          6.0308e-02, -5.7756e-02, -5.0647e-04,  5.1518e-02, -2.3073e-01,
         -2.7687e-02, -1.4727e-01, -5.5361e-02, -8.9779e-02, -2.0613e-01,
          5.5214e-01,  8.3379e-02,  5.6274e-02, -3.2172e-02, -7.2969e-03,
          6.3307e-01,  4.3459e-02,  6.9162e-02, -1.0397e-01,  2.6406e-01,
          1.1281e-01,  1.9344e-01,  2.9663e-01,  6.7268e-02,  6.8317e-02,
         -4.2715e-01, -1.6316e-01, -2.4275e-01, -1.3916e-01,  3.9143e-01,
         -2.2351e-01, -2.7492e-02,  9.8534e-02, -2.3739e-01,  4.8060e-01,
          4.7384e-01, -4.5899e-01,  5.4980e-01, -6.0780e-01,  2.1878e-01,
          1.0948e-01,  1.4722e-01, -8.2251e-02,  4.3157e-02, -3.5281e-01,
         -2.0520e-02, -2.2798e-01,  1.6675e-01, -6.9006e-01, -5.0156e-02,
         -5.5256e-01,  6.0930e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
328000 特征值优化 tensor(0.6648, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3707, -0.0883,  0.2646,  0.2646, -1.9025, -1.8068, -1.6352, -0.5949,
          0.3796, -0.3520, -0.2544, -1.6940, -0.0622,  0.2811, -0.2354, -0.0103,
         -0.0588,  0.2414, -0.2809,  0.0871,  0.0591, -0.0568,  0.0086, -0.0032,
         -0.2359, -0.0192, -0.1469, -0.0656, -0.0900, -0.2046,  0.5431,  0.0863,
          0.0464, -0.0320, -0.0050,  0.6331,  0.0579,  0.0714, -0.1030,  0.2629,
          0.0930,  0.1940,  0.2927,  0.0685,  0.0796, -0.4408, -0.1545, -0.2529,
         -0.1365,  0.3935, -0.2289, -0.0252,  0.1368, -0.2459,  0.4872,  0.4763,
         -0.4498,  0.5461, -0.6037,  0.2192,  0.0772,  0.1589, -0.0927,  0.0394,
         -0.3623, -0.0157, -0.2256,  0.1650, -0.6997, -0.0457, -0.5559,  0.6090]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
329000 特征值优化 tensor(0.6703, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3731, -0.0874,  0.2486,  0.2535, -1.9146, -1.7933, -1.5698, -0.5210,
          0.3924, -0.3223, -0.2937, -1.7242, -0.0618,  0.3174, -0.2319,  0.0321,
         -0.0121,  0.2551, -0.2115,  0.0909,  0.0602, -0.0574,  0.0674,  0.0824,
         -0.2289, -0.0298, -0.0996, -0.0145, -0.0895, -0.2062,  0.5436,  0.0649,
          0.0816, -0.0309, -0.0071,  0.6335,  0.0411,  0.0646, -0.0973,  0.2654,
          0.1102,  0.1898,  0.2935,  0.0723,  0.0652, -0.4316, -0.1678, -0.2473,
         -0.1418,  0.3955, -0.2191, -0.0307,  0.0876, -0.2185,  0.4737,  0.4980,
         -0.4600,  0.5499, -0.5913,  0.2364,  0.0869,  0.1623, -0.1067,  0.0509,
         -0.3611, -0.0052, -0.2471,  0.1672, -0.7508, -0.0352, -0.5423,  0.5952]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
330000 特征值优化 tensor(0.6659, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3773e+00, -8.9195e-02,  2.7232e-01,  2.6960e-01, -1.8899e+00,
         -1.8078e+00, -1.5997e+00, -5.6741e-01,  3.8442e-01, -3.4523e-01,
         -2.8561e-01, -1.7210e+00, -6.1968e-02,  3.0166e-01, -2.4724e-01,
         -2.2992e-03, -4.7407e-02,  2.4710e-01, -2.5482e-01,  8.7671e-02,
          5.9460e-02, -5.6756e-02,  7.3057e-03,  1.7419e-02, -2.3222e-01,
         -2.1509e-02, -1.4657e-01, -4.9373e-02, -8.9738e-02, -2.0507e-01,
          5.4157e-01,  8.9261e-02,  5.2956e-02, -3.1471e-02, -6.7864e-03,
          6.3527e-01,  5.4005e-02,  7.0967e-02, -9.9057e-02,  2.6316e-01,
          9.6185e-02,  1.9168e-01,  2.9698e-01,  6.3319e-02,  8.2330e-02,
         -4.3975e-01, -1.5754e-01, -2.5670e-01, -1.3656e-01,  3.9256e-01,
         -2.3062e-01, -2.5334e-02,  9.5901e-02, -2.2498e-01,  4.7294e-01,
          4.9663e-01, -4.3609e-01,  5.3850e-01, -5.8220e-01,  2.4557e-01,
          9.4311e-02,  1.5625e-01, -9.0328e-02,  4.2268e-02, -3.5730e-01,
          3.1028e-04, -2.2496e-01,  1.7187e-01, -7.1346e-01, -4.7037e-02,
         -5.6091e-01,  6.0265e-01]], device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
331000 特征值优化 tensor(9.9735, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2910,  0.2064, -1.3339,  0.1353,  1.6199, -0.3286,  2.5381, -0.6086,
         -0.3859, -1.0729,  1.2036, -0.9458,  1.3252, -0.0822, -0.5885,  0.5732,
         -0.6825,  0.6969, -1.7399, -0.6182,  0.0576, -0.0978,  0.3005,  0.3288,
          0.2483, -0.4088, -0.2114, -0.1365, -0.8102, -0.3363,  0.1017, -0.4802,
         -0.6207, -0.0808,  1.0139,  0.8731,  0.2341,  0.0625, -0.2824,  0.0837,
         -0.5605, -0.6861, -1.0466,  0.8470, -0.5719, -0.3916, -0.0076,  0.7654,
          0.3867,  0.5616, -0.9613,  0.6477, -1.3928, -0.1370, -0.2698,  0.1306,
         -0.0194, -0.3439, -0.2526, -1.2606,  0.7069,  0.0795,  0.0327, -1.1766,
         -0.9597,  1.4620,  1.0279, -0.9689, -0.3003, -0.8200, -1.9273,  0.1567]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
332000 特征值优化 tensor(1.4602, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0692, -0.1606, -1.6585,  0.6639,  0.4767, -1.0042,  1.3507, -0.7640,
         -1.1354, -0.4885,  0.3015, -1.6708,  0.6413,  0.1089,  0.0028, -0.0227,
         -0.2361,  0.0740, -0.6104, -0.0129,  0.1702, -0.0677, -0.1551,  0.0924,
          0.0433, -0.0337, -0.1397,  0.1010, -0.2286, -0.1150,  0.0260, -0.1165,
         -0.0608, -0.1286,  0.4662,  0.3631,  0.0368,  0.0152, -0.0779,  0.1425,
         -0.0260, -0.0381, -0.7881,  0.5493, -0.7943, -0.3611, -0.1315,  0.4144,
          0.0518,  0.5339, -0.4890,  0.1575, -0.6029,  0.0893, -0.0304,  0.0267,
         -0.2418,  0.1529,  0.0892, -0.9561, -0.2333,  0.3376,  0.4323, -0.3690,
         -1.3104,  0.8735,  1.2663, -0.9067, -0.5557, -0.1131, -0.9676,  0.5830]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
333000 特征值优化 tensor(0.8303, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1731, -0.3042, -1.7259,  0.6038,  0.0477, -1.2726,  0.8941, -0.3627,
         -1.7079, -0.3488, -0.1359, -1.8779,  0.5407,  0.0394,  0.0825, -0.0175,
         -0.1814,  0.0212, -0.2583,  0.0209,  0.1882, -0.0546, -0.0055,  0.0770,
          0.1781,  0.1677, -0.1842,  0.1999, -0.1560, -0.1208, -0.0178, -0.1508,
         -0.0903, -0.1354,  0.3949,  0.3499, -0.0316, -0.0363,  0.0655,  0.1471,
         -0.0035, -0.2353, -0.4885,  0.3806, -0.6363, -0.2840, -0.2010,  0.6392,
         -0.1123,  0.5162, -0.2753,  0.0896, -0.3607, -0.0264, -0.1193,  0.0751,
         -0.1114,  0.0636,  0.0408, -0.8697, -0.1342,  0.2144, -0.0618, -0.2713,
         -1.0794,  0.6532,  0.9812, -0.7110, -0.4978, -0.0977, -0.4696,  0.4262]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
334000 特征值优化 tensor(0.7260, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0647, -0.2618, -1.7480,  0.5788,  0.1851, -1.2761,  0.8011, -0.2805,
         -2.1111, -0.1078, -0.4044, -1.5680,  0.5192,  0.0955,  0.1432, -0.0580,
         -0.1735, -0.0420, -0.1674, -0.0137,  0.2065, -0.0615, -0.1533,  0.1062,
          0.2045,  0.2056, -0.2711,  0.2005, -0.1168, -0.1180, -0.0195, -0.0315,
         -0.0949, -0.1268,  0.3337,  0.3076, -0.1339, -0.1215,  0.1379,  0.0184,
          0.0936, -0.3118, -0.5126,  0.3111, -0.4533, -0.1800, -0.2576,  0.7131,
         -0.1517,  0.4790, -0.2441,  0.0665, -0.4983,  0.0077, -0.0105,  0.0438,
         -0.2251,  0.1088, -0.0801, -0.7204, -0.0028,  0.0128, -0.1222, -0.2433,
         -0.7866,  0.4412,  0.6665, -0.5007, -0.3949,  0.0060, -0.0433,  0.2814]],
       device='cuda:0') tensor(0.2118, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
335000 特征值优化 tensor(0.6809, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9454, -0.1801, -1.7233,  0.5277,  0.3014, -1.2814,  0.7452, -0.2343,
         -2.5006, -0.0434, -0.6209, -1.0733,  0.4996,  0.1897,  0.0171, -0.2014,
         -0.0605, -0.0978, -0.1302, -0.0152,  0.1888, -0.0571, -0.1559,  0.0193,
          0.2823,  0.2664, -0.2114,  0.0637, -0.1208, -0.1168, -0.0177,  0.0168,
         -0.0937, -0.1147,  0.3277,  0.2752, -0.1704, -0.1734,  0.1269, -0.0326,
          0.1348, -0.2633, -0.5707,  0.3647, -0.4496, -0.1729, -0.2464,  0.6915,
         -0.1643,  0.5037, -0.1995,  0.0571, -0.5258, -0.0047, -0.1341,  0.0814,
         -0.3736,  0.1575, -0.0277, -0.7082, -0.0417, -0.0348, -0.0959, -0.1598,
         -0.4552,  0.3109,  0.4544, -0.3706, -0.2333,  0.0340,  0.0446,  0.2344]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
336000 特征值优化 tensor(0.6656, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9444, -0.1210, -1.8003,  0.5638,  0.2891, -1.1594,  0.8194, -0.3294,
         -2.7821, -0.1431, -0.6802, -0.8235,  0.4899,  0.2322, -0.0481, -0.1960,
         -0.0541, -0.0780, -0.0495, -0.0060,  0.1761, -0.0596, -0.1572,  0.0698,
          0.3071,  0.3100, -0.2269,  0.1087, -0.1255, -0.1198, -0.0172,  0.0373,
         -0.1101, -0.1258,  0.2587,  0.2121, -0.1419, -0.2152,  0.0945, -0.0418,
          0.1125, -0.2399, -0.5623,  0.3688, -0.4346, -0.1692, -0.2373,  0.7251,
         -0.1763,  0.5087, -0.2304,  0.0548, -0.5095, -0.0091, -0.1909,  0.0626,
         -0.3257,  0.1248, -0.0949, -0.5711, -0.1240, -0.0157,  0.0559, -0.1262,
         -0.1580,  0.1437,  0.3232, -0.2827, -0.1579,  0.0255,  0.0997,  0.1868]],
       device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
337000 特征值优化 tensor(0.6565, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.4828e-01, -1.2352e-01, -1.8698e+00,  6.4314e-01,  2.2654e-01,
         -1.1905e+00,  9.0246e-01, -5.0488e-01, -3.2339e+00, -1.8411e-01,
         -7.1366e-01, -9.7448e-01,  4.9663e-01,  2.2175e-01, -3.7641e-02,
         -4.5465e-02,  8.6532e-04,  1.4275e-03,  2.0030e-02, -9.9187e-03,
          1.8300e-01, -6.0353e-02, -2.1930e-01,  2.7763e-02,  4.5976e-01,
          3.5017e-01, -2.3057e-01,  1.8197e-01, -1.2131e-01, -1.1477e-01,
         -1.8009e-02,  4.7206e-02, -1.1920e-01, -1.1491e-01,  1.9168e-01,
          1.6461e-01, -1.3563e-01, -2.2119e-01, -1.9817e-02, -1.3923e-01,
          1.0797e-01, -2.5445e-01, -5.7173e-01,  3.5757e-01, -4.4250e-01,
         -1.8639e-01, -2.4115e-01,  7.7009e-01, -1.6956e-01,  5.0900e-01,
         -2.5691e-01,  4.4702e-02, -5.7253e-01,  3.7919e-02, -1.9309e-01,
          4.3441e-02, -2.6361e-01,  7.8642e-02, -1.7810e-01, -5.8887e-01,
         -1.4269e-01,  2.5731e-03,  1.6323e-01, -1.0593e-01, -1.9558e-02,
         -3.6742e-02,  2.2491e-01, -2.5685e-01, -6.3912e-02, -3.7577e-02,
          1.7373e-01,  1.2828e-01]], device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
338000 特征值优化 tensor(0.6530, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9586, -0.0778, -1.9771,  0.7164,  0.2501, -1.1675,  0.9654, -0.5709,
         -3.6159, -0.2832, -0.7411, -1.0765,  0.4985,  0.2166, -0.0340, -0.0414,
         -0.0446, -0.0158, -0.0048,  0.0175,  0.1673, -0.0575, -0.1173,  0.0658,
          0.4901,  0.4898, -0.2424,  0.1722, -0.1216, -0.1172, -0.0180,  0.0565,
         -0.1145, -0.1115,  0.1471,  0.1280, -0.1398, -0.1992, -0.1112, -0.2029,
          0.1203, -0.2547, -0.5503,  0.3458, -0.4512, -0.1900, -0.2194,  0.8202,
         -0.1736,  0.5040, -0.3176,  0.0648, -0.5722,  0.0317, -0.1561,  0.0473,
         -0.2099,  0.0393, -0.0844, -0.5688, -0.1434,  0.0196,  0.1484, -0.1094,
          0.1518, -0.1796,  0.1910, -0.2332, -0.0880, -0.0351,  0.2310,  0.0643]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
339000 特征值优化 tensor(0.6508, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.6809e-01, -1.2302e-01, -2.1163e+00,  8.7240e-01,  2.5476e-01,
         -1.1770e+00,  9.2955e-01, -5.1507e-01, -3.8145e+00, -3.2593e-01,
         -7.2984e-01, -9.9610e-01,  5.0231e-01,  2.1833e-01, -4.5570e-02,
         -7.2246e-02, -4.6247e-02, -2.0752e-02, -5.1238e-03,  2.8645e-02,
          1.7900e-01, -5.7871e-02, -1.2619e-01,  7.3201e-02,  5.4948e-01,
          5.0522e-01, -2.4209e-01,  2.1527e-01, -1.2318e-01, -1.1730e-01,
         -1.7446e-02,  6.3882e-02, -1.1674e-01, -1.0979e-01,  1.4471e-01,
          1.0774e-01, -1.4267e-01, -2.0821e-01, -1.4086e-01, -2.0726e-01,
          1.1733e-01, -2.4648e-01, -5.5407e-01,  3.4077e-01, -4.5429e-01,
         -1.8398e-01, -2.3452e-01,  8.9188e-01, -1.7306e-01,  5.0394e-01,
         -3.7981e-01,  5.5129e-02, -5.4467e-01,  1.6556e-02, -1.6049e-01,
          6.3386e-02, -1.3838e-01,  1.0863e-03, -7.9825e-02, -5.4398e-01,
         -1.5166e-01,  1.0731e-02,  1.1465e-01, -9.6551e-02,  1.2405e-01,
         -1.7075e-01,  2.0801e-01, -2.3226e-01, -9.9176e-02, -1.7775e-02,
          2.2744e-01,  6.0468e-02]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
340000 特征值优化 tensor(0.6502, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.7101e-01, -1.3776e-01, -2.1742e+00,  9.4345e-01,  2.5402e-01,
         -1.1945e+00,  9.3170e-01, -5.1495e-01, -3.8934e+00, -3.3287e-01,
         -7.3291e-01, -1.0137e+00,  5.0296e-01,  2.1844e-01, -4.7657e-02,
         -7.7934e-02, -4.6138e-02, -2.1701e-02, -3.4783e-03,  3.0529e-02,
          1.8286e-01, -5.8274e-02, -1.0866e-01,  6.2976e-02,  5.8367e-01,
          5.2371e-01, -2.4596e-01,  2.2049e-01, -1.2353e-01, -1.1749e-01,
         -1.7579e-02,  6.0368e-02, -1.1737e-01, -1.0854e-01,  1.4315e-01,
          1.0511e-01, -1.4320e-01, -2.0724e-01, -1.5052e-01, -2.0743e-01,
          1.1715e-01, -2.4693e-01, -5.5594e-01,  3.4015e-01, -4.5630e-01,
         -1.8315e-01, -2.3890e-01,  9.2162e-01, -1.7309e-01,  5.0396e-01,
         -4.0968e-01,  5.1255e-02, -5.4187e-01,  1.5498e-02, -1.6102e-01,
          6.3711e-02, -1.2456e-01, -3.7209e-03, -7.4691e-02, -5.4214e-01,
         -1.4914e-01,  1.0205e-02,  1.1553e-01, -1.0043e-01,  1.3607e-01,
         -1.8069e-01,  1.9886e-01, -2.3990e-01, -1.0395e-01, -1.5718e-02,
          2.4325e-01,  5.8061e-02]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
341000 特征值优化 tensor(11.3185, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1790, -0.5260,  0.0346,  0.7490,  0.1249, -0.0471, -0.6978, -0.9265,
          0.0110, -0.3864, -0.5247, -1.7374,  0.9081,  0.5755, -0.2154, -1.2255,
          0.3135, -1.0143,  1.0922,  0.0877,  0.1319,  1.1289,  0.0341, -0.0162,
          0.5810,  0.2292, -0.1633,  0.4980,  0.8122, -0.1407, -0.1354,  0.6127,
         -0.0022,  0.0742, -0.3544, -0.2285, -1.5380, -0.5469, -0.3096,  0.7292,
         -0.1932, -1.1070, -1.0642, -0.2706, -0.1332,  0.4578,  0.3113,  1.8328,
         -0.0952,  0.2130, -0.1580, -0.0279, -0.5636, -0.0345, -0.6362,  0.5277,
          0.9541, -0.2675,  0.7477, -0.1279, -1.2133,  0.0575,  0.1752, -1.3948,
         -1.6405,  0.4177,  0.1111,  0.7742,  0.8676,  0.9010,  0.1738, -0.4516]],
       device='cuda:0') tensor(0.2507, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
342000 特征值优化 tensor(1.1758, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8336,  0.1111, -1.0327,  0.4301, -0.6657, -0.9081, -1.4750, -0.8089,
         -0.7682,  0.0600, -1.1268, -2.1617,  0.3342, -0.0190,  0.0165, -0.2561,
          0.1969, -0.3137,  0.2643, -0.0352, -0.0658,  0.2788,  0.0513, -0.0202,
          0.1003, -0.1364, -0.0622, -0.0106,  0.0745, -0.0611, -0.1202,  0.1184,
          0.0504, -0.0179, -0.0716, -0.0932, -0.8824, -0.3001, -0.2037,  0.3098,
         -0.1465, -0.4840, -0.5821, -0.2005, -0.0924,  0.2919,  0.0902,  0.8010,
         -0.1937, -0.0529, -0.0621, -0.0370, -0.4104,  0.1140, -0.7092, -0.0941,
          0.2001, -0.0648,  0.6577, -0.3669, -1.5140, -0.0696,  0.5389, -0.7152,
         -1.6275,  0.4313,  0.3326,  0.2378,  0.2929,  0.4147,  0.2018, -0.0819]],
       device='cuda:0') tensor(0.2074, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
343000 特征值优化 tensor(0.8676, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0058e+00,  7.5193e-04, -1.2645e+00,  4.9510e-01, -9.7762e-01,
         -8.3084e-01, -1.4058e+00, -1.0417e+00, -8.6970e-01, -2.8368e-02,
         -9.2398e-01, -1.9601e+00,  3.0512e-01, -5.6329e-02, -5.8171e-02,
         -1.6413e-01,  2.3731e-01, -3.6174e-01,  1.5662e-01, -5.4137e-02,
         -5.3521e-02,  2.7658e-01,  2.3049e-01, -2.3912e-01,  2.2481e-02,
         -6.3737e-03, -2.9846e-01,  2.2431e-01,  2.3341e-03, -4.7581e-02,
         -1.3230e-01,  2.4341e-01,  5.5041e-02, -1.7289e-02, -1.9456e-01,
         -1.1266e-01, -8.3041e-01, -3.1815e-01, -2.1206e-01,  2.5640e-01,
         -1.5190e-01, -4.1712e-01, -4.3896e-01, -2.7212e-01, -2.8385e-02,
          2.8831e-01,  7.2660e-02,  6.2770e-01, -1.8392e-01,  4.3635e-02,
         -9.5840e-02, -2.7670e-02, -3.5388e-01,  1.1542e-01, -9.0303e-01,
          1.1269e-01, -6.0428e-02,  4.7045e-02,  5.5701e-01, -4.5845e-01,
         -1.2509e+00, -1.7297e-01,  3.6305e-01, -5.4293e-01, -1.6707e+00,
          4.9164e-01,  4.0632e-01,  2.3482e-01,  3.9811e-01,  3.0970e-01,
          3.3136e-01, -4.7394e-02]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
344000 特征值优化 tensor(0.7969, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0496,  0.0596, -1.3111,  0.4172, -1.0104, -0.8113, -1.3354, -0.9719,
         -0.6578, -0.1956, -0.8599, -1.7620,  0.2948, -0.0990,  0.0035, -0.1699,
          0.2513, -0.3576,  0.1345, -0.0532, -0.0478,  0.2778,  0.1799, -0.3982,
          0.0526,  0.0443, -0.3242,  0.1609, -0.0057, -0.0549, -0.1128,  0.1214,
          0.0241, -0.0168, -0.2456, -0.1106, -0.7960, -0.2808, -0.1629,  0.1967,
         -0.1456, -0.3397, -0.4640, -0.3245,  0.0377,  0.1822,  0.1355,  0.6369,
         -0.2222,  0.0539, -0.0541, -0.0327, -0.4061,  0.1341, -0.7848,  0.0601,
         -0.1760,  0.1009,  0.5608, -0.4476, -0.8695, -0.3422,  0.1980, -0.3937,
         -1.6604,  0.5152,  0.3945,  0.1848,  0.5938,  0.2123,  0.4318,  0.0166]],
       device='cuda:0') tensor(0.2030, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
345000 特征值优化 tensor(0.7194, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2231,  0.2412, -1.3729,  0.4912, -1.0621, -0.7881, -1.2610, -0.8524,
         -0.0412, -0.8093, -0.9282, -1.5202,  0.3327, -0.1317,  0.0507, -0.1202,
          0.1984, -0.4842,  0.0419,  0.0066, -0.0834,  0.2833,  0.1737, -0.1597,
          0.2000,  0.0942, -0.2629,  0.0855,  0.0059, -0.0581, -0.1158, -0.0171,
          0.0458, -0.0085, -0.2436, -0.0768, -0.7727, -0.2658, -0.0670,  0.0885,
         -0.1227, -0.2056, -0.5269, -0.2853, -0.0379,  0.0993,  0.2191,  0.6318,
         -0.2548,  0.0942, -0.0885, -0.0273, -0.2581,  0.0704, -0.6702,  0.0658,
         -0.2480,  0.1449,  0.6177, -0.2802, -0.5819, -0.4553,  0.0832, -0.3383,
         -1.4513,  0.5383,  0.2515,  0.0904,  0.5862,  0.2536,  0.5490,  0.1167]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
346000 特征值优化 tensor(0.6731, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3341,  0.3860, -1.4197,  0.5182, -1.1099, -0.7827, -1.2451, -0.8135,
         -0.2124, -1.1839, -0.9261, -1.7428,  0.3740, -0.1276,  0.0529, -0.1308,
          0.1849, -0.4867, -0.0100,  0.0127, -0.1368,  0.2848,  0.0993, -0.2189,
          0.3066,  0.0861, -0.3213,  0.1904,  0.0278, -0.0570, -0.1137, -0.0092,
          0.0626, -0.0123, -0.2265, -0.0351, -0.7603, -0.2497, -0.0907,  0.1052,
         -0.1213, -0.1834, -0.5633, -0.2205, -0.1159,  0.1454,  0.2471,  0.6265,
         -0.2436,  0.1203, -0.0717, -0.0493, -0.2021,  0.0567, -0.5918,  0.0455,
         -0.2154,  0.1224,  0.6760, -0.1532, -0.5259, -0.4750,  0.0271, -0.2742,
         -1.3429,  0.5564,  0.2084,  0.1681,  0.6741,  0.2078,  0.5791,  0.1484]],
       device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
347000 特征值优化 tensor(0.6581, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3823,  0.4515, -1.4622,  0.5671, -1.1293, -0.7732, -1.2787, -0.7893,
         -0.2688, -1.3300, -0.9310, -1.9426,  0.3880, -0.1271,  0.0555, -0.1158,
          0.1941, -0.5036,  0.0172,  0.0135, -0.1517,  0.2833,  0.0748, -0.1838,
          0.3305,  0.1432, -0.3629,  0.2207,  0.0448, -0.0512, -0.1169,  0.0027,
          0.0696, -0.0119, -0.2021, -0.0354, -0.7511, -0.2547, -0.0919,  0.1116,
         -0.1312, -0.1779, -0.5619, -0.1925, -0.1789,  0.1459,  0.2598,  0.6144,
         -0.1917,  0.1236, -0.0783, -0.0631, -0.1847,  0.0483, -0.5890,  0.0254,
         -0.1780,  0.1030,  0.6665, -0.1341, -0.4747, -0.5022, -0.0154, -0.2366,
         -1.3310,  0.5780,  0.2411,  0.1880,  0.7088,  0.1941,  0.6622,  0.1561]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
348000 特征值优化 tensor(0.6645, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3810,  0.4283, -1.4527,  0.5623, -1.1028, -0.7988, -1.3117, -0.8865,
         -0.2596, -1.4460, -0.9516, -2.0672,  0.3902, -0.1192, -0.0566, -0.0932,
          0.1818, -0.4575,  0.0925, -0.0106, -0.1543,  0.2824,  0.1090, -0.0635,
          0.2888,  0.2490, -0.4052,  0.1437,  0.0134, -0.0492, -0.1138,  0.0321,
          0.0654, -0.0148, -0.1803, -0.0380, -0.7596, -0.2340, -0.1084,  0.1215,
         -0.1310, -0.1581, -0.5624, -0.1848, -0.1834,  0.1559,  0.2584,  0.6108,
         -0.1919,  0.1222, -0.0503, -0.0732, -0.2019,  0.0509, -0.5762,  0.0271,
         -0.1439,  0.0922,  0.6687, -0.0979, -0.4898, -0.5056,  0.0086, -0.2887,
         -1.3308,  0.6236,  0.2502,  0.1952,  0.7228,  0.1934,  0.6838,  0.1322]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
349000 特征值优化 tensor(0.6788, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3918,  0.4235, -1.4506,  0.5448, -1.0887, -0.8081, -1.3458, -0.9063,
         -0.2671, -1.5132, -0.9666, -2.1413,  0.3901, -0.0665, -0.0185, -0.0938,
          0.1778, -0.4930,  0.0738,  0.0153, -0.1545,  0.2812,  0.0908, -0.0605,
          0.3001,  0.2747, -0.3978,  0.1427,  0.0214, -0.0534, -0.1201,  0.0229,
          0.0807, -0.0121, -0.1806, -0.0366, -0.7786, -0.2620, -0.1148,  0.1246,
         -0.1167, -0.1539, -0.5580, -0.1831, -0.1839,  0.1552,  0.2596,  0.6016,
         -0.1906,  0.1225, -0.0631, -0.0690, -0.1831,  0.0342, -0.5988,  0.0204,
         -0.1537,  0.0972,  0.6749, -0.0868, -0.4972, -0.5055,  0.0165, -0.2611,
         -1.3208,  0.6390,  0.2604,  0.2017,  0.7004,  0.1742,  0.7056,  0.1311]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
350000 特征值优化 tensor(0.6666, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3942,  0.4396, -1.4192,  0.5331, -1.0912, -0.7970, -1.3742, -0.8926,
         -0.2645, -1.5593, -0.9821, -2.2234,  0.3916, -0.0509, -0.0291, -0.0773,
          0.1472, -0.4748,  0.0797, -0.0080, -0.1562,  0.2822,  0.1188, -0.0342,
          0.3071,  0.2735, -0.4157,  0.1121,  0.0169, -0.0482, -0.1123,  0.0506,
          0.0664, -0.0164, -0.1761, -0.0408, -0.7966, -0.2470, -0.1152,  0.1258,
         -0.1229, -0.1486, -0.5581, -0.1819, -0.1817,  0.1498,  0.2606,  0.5936,
         -0.1963,  0.1253, -0.0266, -0.0746, -0.1965,  0.0419, -0.5827,  0.0272,
         -0.1475,  0.0989,  0.6701, -0.0865, -0.5126, -0.5107,  0.0096, -0.2912,
         -1.3218,  0.6402,  0.2903,  0.1919,  0.7210,  0.1802,  0.7470,  0.1217]],
       device='cuda:0') tensor(0.2057, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
351000 特征值优化 tensor(0.6644, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3928,  0.4442, -1.4111,  0.5257, -1.1025, -0.7949, -1.3813, -0.8948,
         -0.2890, -1.6102, -0.9632, -2.3104,  0.3919, -0.0966, -0.0780, -0.0980,
          0.1340, -0.4624,  0.0682, -0.0077, -0.1563,  0.2821,  0.1195, -0.0235,
          0.3026,  0.2960, -0.4383,  0.1180,  0.0113, -0.0473, -0.1146,  0.0508,
          0.0660, -0.0156, -0.1787, -0.0382, -0.7906, -0.2473, -0.1172,  0.1250,
         -0.1262, -0.1485, -0.5585, -0.1827, -0.1825,  0.1472,  0.2610,  0.5915,
         -0.1926,  0.1229, -0.0082, -0.0838, -0.1912,  0.0391, -0.5836,  0.0218,
         -0.1511,  0.0994,  0.6706, -0.0855, -0.5096, -0.5103,  0.0057, -0.2936,
         -1.3098,  0.6383,  0.3087,  0.1908,  0.7127,  0.1833,  0.7924,  0.1203]],
       device='cuda:0') tensor(0.2084, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
352000 特征值优化 tensor(0.6658, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3894,  0.4488, -1.4182,  0.5280, -1.1125, -0.7837, -1.4190, -0.8749,
         -0.3156, -1.6555, -0.9702, -2.3977,  0.3915, -0.0958, -0.0669, -0.0967,
          0.1336, -0.4688,  0.0589, -0.0071, -0.1562,  0.2815,  0.0927, -0.0061,
          0.3311,  0.2662, -0.4430,  0.1371,  0.0219, -0.0493, -0.1129,  0.0491,
          0.0618, -0.0157, -0.1763, -0.0375, -0.7920, -0.2507, -0.1085,  0.1194,
         -0.1288, -0.1544, -0.5604, -0.1829, -0.1827,  0.1442,  0.2628,  0.5926,
         -0.2028,  0.1299, -0.0326, -0.0719, -0.1815,  0.0409, -0.5836,  0.0268,
         -0.1576,  0.1001,  0.6643, -0.0933, -0.4905, -0.5152, -0.0055, -0.2986,
         -1.2954,  0.6317,  0.3391,  0.1945,  0.7138,  0.1830,  0.8463,  0.1248]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
353000 特征值优化 tensor(19.4349, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2827,  1.3794, -0.1064, -0.1622, -1.2854, -0.5074, -1.0345,  0.0786,
         -0.4878,  1.0512, -0.6426,  0.5893,  0.2092,  0.0488, -0.8119, -1.6642,
         -1.3888, -0.2713,  0.2714, -1.1019,  0.2641,  0.5227,  1.8647, -0.6541,
         -1.4725, -0.3264, -0.2526,  1.3527, -1.5085, -1.3064, -0.0280, -0.1747,
          0.3171, -0.4364, -1.5858, -0.8316, -0.4659,  0.1555,  1.1834,  0.6857,
         -0.4428, -1.6824, -1.0626,  1.5419, -0.3361, -0.2675,  0.4824,  0.5115,
         -0.1411, -1.0928,  0.0666, -0.0522,  1.0520,  0.1874,  0.1286, -0.1791,
          1.0090,  1.0168,  1.2844,  1.8854,  0.4628, -0.6297, -0.3454, -0.1215,
          0.3796, -1.9913, -1.3970,  2.3859,  1.6139, -0.4572,  0.3418,  1.9807]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
354000 特征值优化 tensor(4.1957, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3293,  1.0726, -0.7024,  0.2184, -1.3163, -1.2622, -1.1533,  0.2101,
         -1.4880,  1.8519, -1.1887, -0.3376,  0.1225,  0.1441, -0.1436, -0.5245,
         -0.5316, -0.1346,  0.0271, -0.5809,  0.0407,  0.1684,  0.7827,  0.1021,
         -0.4788, -0.0664, -0.1823,  0.3132, -0.4142, -0.5820, -0.0171, -0.0148,
          0.0025, -0.0313, -0.6261,  0.0997, -0.1024,  0.0144,  0.3685,  0.2265,
         -0.0155, -0.6700, -1.2192,  1.2155,  0.0816, -0.6011,  0.1136, -0.1434,
          0.4266, -0.4995,  0.2026,  0.1639,  0.4132, -0.0686, -0.0175, -0.1991,
          0.2340,  0.7192,  0.4510,  0.8563, -0.0173, -0.0624, -0.1194,  0.0334,
         -0.5150, -0.8508, -1.4377,  1.3852,  0.7024, -0.2559, -0.6175,  0.9490]],
       device='cuda:0') tensor(0.2070, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
355000 特征值优化 tensor(0.9760, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1091,  1.2247, -0.3795, -0.1192, -0.8692, -0.9798, -1.4365,  0.5339,
         -1.7866,  1.7595, -1.3473, -0.7706,  0.1454,  0.0512, -0.0031, -0.1479,
         -0.4354, -0.2658,  0.0669, -0.2707,  0.0773,  0.0710,  0.2080, -0.0623,
         -0.1346, -0.1043, -0.1583, -0.0274, -0.1194, -0.3287, -0.0178, -0.0219,
         -0.0052, -0.0293, -0.2863,  0.2301, -0.0743, -0.0109,  0.2405,  0.1885,
         -0.0135, -0.2537, -0.6614,  0.7867, -0.1942, -0.4058, -0.0802, -0.1745,
          0.3750, -0.3224,  0.3661,  0.0456,  0.1612, -0.0550,  0.0348, -0.2786,
          0.3907,  0.5093,  0.0184,  0.5857,  0.1658, -0.0501, -0.2933, -0.0165,
         -0.8064, -0.3885, -1.0251,  0.8929,  0.6791, -0.0833, -0.9170,  0.6188]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
356000 特征值优化 tensor(0.8954, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1888,  1.4291, -0.2540, -0.1624, -0.8369, -0.6791, -1.5010,  0.5929,
         -1.7141,  1.6223, -1.4168, -0.7491,  0.1432,  0.0095,  0.0036, -0.1549,
         -0.5398, -0.3184,  0.0691, -0.2196,  0.0749,  0.0655,  0.1104,  0.0156,
         -0.1336,  0.0311,  0.0035, -0.1085, -0.0956, -0.3235, -0.0176,  0.0224,
         -0.0054, -0.0333, -0.2570,  0.1273, -0.0542, -0.0101,  0.3470,  0.1680,
         -0.0265, -0.2609, -0.6279,  0.7864, -0.2156, -0.3818, -0.1466, -0.2076,
          0.3727, -0.3222,  0.4036,  0.0125,  0.1399, -0.0516,  0.0868, -0.2721,
          0.4373,  0.3696,  0.0316,  0.5402,  0.1393, -0.0601, -0.3990,  0.0037,
         -0.7759, -0.3553, -0.8435,  0.7309,  0.7106, -0.0692, -0.8633,  0.5876]],
       device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
357000 特征值优化 tensor(0.8374, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2467,  1.4158, -0.1622, -0.2333, -0.8891, -0.6858, -1.6983,  0.6496,
         -1.6316,  1.1623, -1.3758, -0.7965,  0.1430,  0.0291, -0.0084, -0.1685,
         -0.6351, -0.2214,  0.0316, -0.1743,  0.0753,  0.0504,  0.1309, -0.0376,
         -0.1492,  0.0528,  0.0774, -0.1551, -0.0843, -0.3101, -0.0176, -0.0293,
         -0.0134, -0.0327, -0.1906,  0.1463, -0.0447, -0.0082,  0.2583,  0.2179,
         -0.0531, -0.2740, -0.5285,  0.6869, -0.1987, -0.4049, -0.1323, -0.2633,
          0.4086, -0.3075,  0.4257, -0.0110,  0.1515, -0.0450,  0.0105, -0.2470,
          0.4184,  0.4000,  0.0838,  0.5592,  0.2080, -0.0783, -0.4404,  0.0183,
         -0.7345, -0.3653, -0.3736,  0.6025,  0.8847, -0.1547, -0.7494,  0.5343]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
358000 特征值优化 tensor(0.8236, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3107e+00,  1.3412e+00, -1.0056e-01, -3.0046e-01, -8.7896e-01,
         -6.3433e-01, -1.7642e+00,  7.5523e-01, -1.5511e+00,  8.6074e-01,
         -1.3889e+00, -8.2890e-01,  1.4290e-01,  1.0619e-01,  2.3384e-02,
         -1.4697e-01, -6.6639e-01, -1.1419e-01,  9.8920e-04, -1.7473e-01,
          7.5009e-02,  4.0076e-02,  1.2663e-01, -5.0598e-02, -1.4306e-01,
          6.6109e-02,  7.6838e-02, -1.5877e-01, -7.5338e-02, -2.9978e-01,
         -1.7571e-02,  3.0491e-03,  4.2617e-02, -3.6875e-02, -1.8973e-01,
          1.6452e-01, -8.4052e-02, -2.2586e-02,  1.8169e-01,  2.8100e-01,
         -1.1225e-02, -3.1131e-01, -4.9540e-01,  6.7560e-01, -1.9967e-01,
         -3.7092e-01, -1.3283e-01, -2.7881e-01,  4.2916e-01, -3.1031e-01,
          4.5121e-01, -2.9207e-02,  1.6634e-01, -5.4895e-02, -1.6222e-03,
         -2.7965e-01,  3.6705e-01,  4.1528e-01,  1.6289e-01,  5.7845e-01,
          2.7520e-01, -1.7338e-02, -3.5350e-01, -2.0687e-02, -6.4637e-01,
         -3.5184e-01, -8.4358e-02,  5.0993e-01,  8.2660e-01, -2.0907e-01,
         -7.0261e-01,  4.6580e-01]], device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
359000 特征值优化 tensor(0.7814, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2450,  1.2066, -0.0685, -0.3364, -0.9007, -0.6555, -1.7923,  0.7946,
         -1.4895,  0.9135, -1.3793, -0.8481,  0.1530,  0.1178,  0.0151, -0.1013,
         -0.6243, -0.1250, -0.0032, -0.2268,  0.0818,  0.0281,  0.0970, -0.0908,
         -0.1702,  0.0600,  0.0707, -0.1482, -0.0898, -0.2909, -0.0179, -0.0315,
          0.0257, -0.0323, -0.1503,  0.1323, -0.0875, -0.0188,  0.1164,  0.2971,
         -0.0157, -0.3108, -0.5880,  0.6427, -0.1410, -0.3923, -0.1066, -0.3091,
          0.6093, -0.4494,  0.4376, -0.0359,  0.1521, -0.0426, -0.0481, -0.2687,
          0.4407,  0.3765,  0.0556,  0.4344,  0.3209, -0.0447, -0.2922, -0.0303,
         -0.6118, -0.3797,  0.0994,  0.4363,  0.7785, -0.1966, -0.4929,  0.3646]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
360000 特征值优化 tensor(0.7646, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2571,  1.2018, -0.0653, -0.3452, -0.8868, -0.6657, -1.7940,  1.0207,
         -1.4289,  1.0997, -1.3240, -0.8472,  0.1553,  0.0452,  0.0317, -0.0903,
         -0.6065, -0.0678,  0.0593, -0.2727,  0.0828,  0.0285,  0.1129, -0.1006,
         -0.1871,  0.0710,  0.0574, -0.1154, -0.0956, -0.2910, -0.0176, -0.0485,
          0.0142, -0.0311, -0.1435,  0.1340, -0.0882, -0.0420,  0.0263,  0.2771,
         -0.0309, -0.2784, -0.6431,  0.6934, -0.1332, -0.4865, -0.0576, -0.3153,
          0.6028, -0.4421,  0.4307, -0.0290,  0.1368, -0.0380, -0.0761, -0.2449,
          0.4056,  0.3946,  0.1755,  0.3448,  0.3389, -0.0598, -0.2649,  0.0019,
         -0.6095, -0.3897,  0.1393,  0.4306,  0.7675, -0.1772, -0.3476,  0.3295]],
       device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
361000 特征值优化 tensor(0.7637, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2842,  1.2370, -0.0618, -0.3484, -0.8879, -0.6726, -1.8019,  1.0950,
         -1.3806,  1.1412, -1.3304, -0.8515,  0.1553,  0.0435,  0.0297, -0.0826,
         -0.6145, -0.1141,  0.0678, -0.2814,  0.0802,  0.0274,  0.1088, -0.1004,
         -0.1899,  0.0689,  0.0517, -0.1098, -0.1037, -0.2902, -0.0176, -0.0454,
          0.0144, -0.0324, -0.1402,  0.1401, -0.0837, -0.0279, -0.0185,  0.2864,
         -0.0405, -0.2729, -0.6433,  0.7117, -0.1294, -0.5060, -0.0568, -0.3234,
          0.6075, -0.4389,  0.4226, -0.0265,  0.1372, -0.0380, -0.0802, -0.2467,
          0.3918,  0.3989,  0.1729,  0.3470,  0.3514, -0.0424, -0.3062,  0.0311,
         -0.6077, -0.3902,  0.1388,  0.4220,  0.7772, -0.2053, -0.3321,  0.3362]],
       device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
362000 特征值优化 tensor(0.7637, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2812,  1.2336, -0.0627, -0.3478, -0.8804, -0.6715, -1.8063,  1.1061,
         -1.3731,  1.1369, -1.3346, -0.8482,  0.1548,  0.0556,  0.0370, -0.0815,
         -0.6075, -0.1153,  0.0703, -0.2848,  0.0804,  0.0274,  0.1081, -0.1011,
         -0.1904,  0.0693,  0.0517, -0.1099, -0.1038, -0.2901, -0.0176, -0.0476,
          0.0169, -0.0317, -0.1405,  0.1407, -0.0826, -0.0259, -0.0170,  0.2844,
         -0.0419, -0.2719, -0.6496,  0.7178, -0.1290, -0.5080, -0.0562, -0.3237,
          0.6073, -0.4386,  0.4223, -0.0263,  0.1296, -0.0360, -0.0792, -0.2451,
          0.3915,  0.3991,  0.1720,  0.3473,  0.3539, -0.0409, -0.3148,  0.0371,
         -0.6100, -0.3882,  0.1372,  0.4202,  0.7812, -0.2097, -0.3298,  0.3368]],
       device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
363000 特征值优化 tensor(17.5684, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0278, -0.1016, -1.3822,  1.3363,  0.2461,  0.1373, -0.8023, -1.2852,
         -2.2419, -0.7309, -0.4936, -0.9176,  0.1183, -0.4972,  1.5558,  0.1792,
         -0.1542,  1.1481,  0.3387, -0.0307,  0.0627, -0.2745,  1.5273, -0.7270,
          1.0313, -0.1378,  1.6464, -1.7341,  0.9014,  0.7528, -0.3224, -0.2384,
          0.7147, -0.7885, -1.8814, -0.0943, -1.5795,  0.8592, -0.0282,  1.6499,
         -1.0449,  0.2475,  2.3298, -1.5532, -1.0358,  2.0503,  1.2046,  1.8497,
         -2.5653, -1.9306, -1.2792, -0.0757,  0.7288,  0.8539,  0.4208, -0.1084,
          0.6324,  0.0667, -0.6484, -0.4453, -2.0292, -0.1601,  0.7368,  0.6085,
         -1.2266, -0.8327,  0.2195,  1.0018,  0.4209, -0.7980, -0.5585, -0.5735]],
       device='cuda:0') tensor(4.9544, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
364000 特征值优化 tensor(3.3342, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0771e+00, -8.7612e-01, -2.4655e+00,  1.9212e-01, -5.0313e-01,
         -7.7739e-01, -1.5293e+00, -4.2079e-01, -3.0417e+00,  1.4365e-02,
         -1.1994e+00, -1.6280e+00,  9.7916e-02,  9.4210e-04,  3.5635e-01,
          2.3807e-02, -4.3137e-02,  1.8579e-01, -1.4831e-02,  2.2083e-02,
         -1.9047e-02,  3.1653e-01,  5.4778e-01, -3.9966e-02,  1.5860e-01,
         -1.1964e-02,  6.4049e-01, -7.5903e-01,  1.9369e-01,  3.1473e-01,
          1.2184e-01, -1.1733e-02,  1.1440e-02, -7.5071e-02, -9.5282e-01,
          2.4456e-01, -8.1368e-01,  4.2289e-01, -1.1301e-01,  9.5430e-01,
         -2.6839e-01,  8.5787e-02,  1.2265e+00, -5.1935e-01, -9.4005e-03,
          9.5861e-01,  3.3629e-01,  6.5935e-01, -1.4936e+00, -8.5848e-01,
         -8.2903e-01, -8.5988e-02, -5.4989e-02,  2.5453e-01,  1.5644e-01,
         -4.8816e-02, -3.5892e-01,  9.0806e-01, -8.5720e-01,  4.1253e-02,
         -2.1486e+00,  2.8783e-01,  8.9991e-01,  5.3651e-02, -2.0548e+00,
          1.0689e-01, -4.2818e-01,  4.4658e-01, -1.7753e-01,  1.3393e-01,
         -7.2166e-01, -4.5203e-02]], device='cuda:0') tensor(0.2064, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
365000 特征值优化 tensor(1.1161, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.8241e+00, -6.2124e-01, -2.6278e+00, -5.4918e-01, -1.5572e-01,
         -7.4485e-01, -1.0224e+00, -3.7360e-01, -3.1060e+00, -2.4149e-01,
         -7.8621e-01, -1.1761e+00,  7.2414e-02,  3.6222e-02,  1.3537e-02,
         -6.7238e-02, -5.2966e-02, -3.4215e-02,  6.8206e-02,  6.3698e-04,
          2.0470e-02,  4.6989e-01,  4.4841e-01,  1.0271e-01, -1.0629e-01,
         -1.4256e-01,  2.3312e-01, -1.4791e-01,  4.1128e-02,  3.9559e-01,
          1.0381e-01,  8.1020e-02,  2.2680e-02, -4.0656e-02, -7.0143e-01,
          1.2741e-01, -3.3618e-01,  1.1256e-01, -3.4949e-01,  7.9891e-01,
         -2.1914e-01,  9.1438e-02,  8.5070e-01, -3.0001e-01,  2.0623e-01,
          6.3418e-01,  9.1558e-02,  1.4109e-01, -1.0231e+00, -4.4536e-01,
         -3.9837e-01, -2.6840e-01, -2.6033e-01,  2.2176e-01,  3.5559e-01,
         -3.0266e-01, -5.1130e-01,  9.4216e-01, -1.1634e+00, -5.4624e-02,
         -1.3354e+00,  8.8262e-02,  2.5202e-01,  1.3883e-01, -2.2229e+00,
          2.6618e-01, -3.2467e-01,  3.7376e-01,  8.0553e-02,  2.8038e-01,
         -3.9894e-01, -1.3632e-01]], device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
366000 特征值优化 tensor(0.9502, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4816, -0.3059, -2.5404, -0.4042, -0.1118, -0.5150, -0.4171, -0.6322,
         -3.0769, -0.3263, -0.7124, -0.7250,  0.0810, -0.1276,  0.0172, -0.0632,
          0.0104, -0.0701,  0.0971, -0.0044,  0.0155,  0.4657,  0.3632,  0.1501,
         -0.1117, -0.2528,  0.2244,  0.0251,  0.0393,  0.4025,  0.0987,  0.1215,
          0.0189, -0.0373, -0.6315,  0.1878, -0.1089,  0.0631, -0.0393,  0.6746,
         -0.2299, -0.0098,  0.5543, -0.3243,  0.3227,  0.5141,  0.0695,  0.1221,
         -0.9773, -0.4199, -0.4270, -0.2405, -0.4603,  0.2995,  0.4325, -0.3472,
         -0.5296,  0.8739, -1.2384, -0.1404, -1.1153,  0.2963,  0.3239,  0.1112,
         -2.3081,  0.1624, -0.5635,  0.4185,  0.0623,  0.2447, -0.1562,  0.0130]],
       device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
367000 特征值优化 tensor(0.9017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1909,  0.0223, -2.5058, -0.3056, -0.0792, -0.4091, -0.2152, -0.7666,
         -3.0680, -0.2733, -0.8184, -0.5084,  0.0909, -0.0389, -0.1485, -0.0346,
         -0.1806, -0.0614, -0.0997, -0.0430,  0.0239,  0.4416,  0.4274,  0.0932,
         -0.1121, -0.3083,  0.2348,  0.0327,  0.0509,  0.3773,  0.0888,  0.1443,
          0.0307, -0.0300, -0.5550,  0.2390, -0.0453,  0.0671,  0.0464,  0.6171,
         -0.2615, -0.0546,  0.3925, -0.3521,  0.3672,  0.3225,  0.0904,  0.1373,
         -0.9343, -0.4074, -0.4278, -0.2226, -0.5631,  0.3431,  0.4317, -0.4073,
         -0.4484,  0.8096, -1.2061, -0.1797, -0.9848,  0.3171,  0.4440,  0.0474,
         -2.3675,  0.1797, -0.6266,  0.4613,  0.0458,  0.1987, -0.1921,  0.1036]],
       device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
368000 特征值优化 tensor(0.8724, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1138e+00,  1.2050e-02, -2.4339e+00, -1.4395e-01, -1.6848e-01,
         -4.2319e-01, -1.9391e-01, -8.2864e-01, -2.9877e+00, -1.5808e-01,
         -9.3697e-01, -3.5095e-01,  9.4633e-02, -5.0431e-02, -9.5540e-02,
         -7.4175e-02, -5.2142e-02, -2.9224e-03, -9.4380e-02, -3.4836e-02,
          2.8087e-02,  4.1199e-01,  4.5419e-01,  5.5666e-02, -1.6290e-01,
         -3.1814e-01,  2.1123e-01, -1.5441e-02,  4.6978e-02,  3.4600e-01,
          6.8143e-02,  1.4393e-01,  4.3328e-02, -2.1449e-02, -4.2832e-01,
          2.4104e-01, -2.5590e-02,  4.7657e-02,  5.8333e-02,  5.6383e-01,
         -2.7896e-01, -6.5903e-02,  3.5513e-01, -3.4298e-01,  3.6266e-01,
          3.4927e-01,  8.6079e-02,  1.4227e-01, -8.8677e-01, -3.7901e-01,
         -4.8173e-01, -1.7982e-01, -6.8338e-01,  3.9696e-01,  4.3428e-01,
         -4.6088e-01, -1.2667e-01,  6.6414e-01, -1.0371e+00, -1.0711e-01,
         -8.6245e-01,  2.5979e-01,  4.7964e-01,  3.2492e-03, -2.4248e+00,
          1.9114e-01, -6.3713e-01,  4.8080e-01,  9.9538e-02,  1.7966e-01,
         -1.9123e-01,  1.7324e-01]], device='cuda:0') tensor(0.2037, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
369000 特征值优化 tensor(0.8318, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1117,  0.0215, -2.4422,  0.0061, -0.1533, -0.4576, -0.0367, -0.9276,
         -2.8093,  0.3242, -0.9330, -0.2234,  0.1057,  0.0319, -0.1304, -0.1316,
         -0.0613,  0.0513, -0.0812, -0.0505,  0.0380,  0.3886,  0.5159, -0.0564,
         -0.2672, -0.3111,  0.1623, -0.0423,  0.0446,  0.3308,  0.0550,  0.1407,
          0.0446, -0.0323, -0.2131,  0.1873, -0.0124,  0.0425, -0.2901,  0.5226,
         -0.2763, -0.1064,  0.3374, -0.3252,  0.3434,  0.3045,  0.1007,  0.1471,
         -0.8907, -0.3511, -0.5042, -0.1434, -0.6947,  0.4039,  0.4211, -0.4540,
          0.2478,  0.4596, -0.8141, -0.2131, -0.8568,  0.2567,  0.4925, -0.0197,
         -2.3198,  0.1282, -0.4850,  0.5472,  0.0910,  0.1751, -0.2197,  0.2035]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
370000 特征值优化 tensor(0.8104, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1317, -0.0147, -2.5228,  0.0900, -0.2540, -0.5199, -0.1495, -0.8686,
         -2.4492,  0.7052, -0.9799, -0.0587,  0.1075, -0.0635, -0.0574, -0.1954,
          0.0394, -0.0316,  0.0739, -0.0570,  0.0437,  0.3841,  0.5705, -0.1559,
         -0.1955, -0.2326,  0.1013, -0.0044,  0.0547,  0.2931,  0.0546,  0.1126,
          0.0117, -0.0372, -0.0984,  0.1361, -0.0277,  0.0612, -0.4631,  0.4609,
         -0.2627, -0.1370,  0.3431, -0.3157,  0.3305,  0.2842,  0.1084,  0.1557,
         -0.8910, -0.3607, -0.5128, -0.1318, -0.8214,  0.4859,  0.3801, -0.4525,
          0.4122,  0.3818, -0.5364, -0.2097, -0.6522,  0.1748,  0.3750,  0.0282,
         -1.7535, -0.1380, -0.3083,  0.5125,  0.0925,  0.1853, -0.1416,  0.2270]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
371000 特征值优化 tensor(0.7708, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1135e+00, -2.7777e-02, -2.6085e+00,  1.1873e-01, -2.2726e-01,
         -5.2522e-01, -7.7701e-02, -9.8445e-01, -2.0195e+00,  4.9622e-01,
         -9.8950e-01, -6.7111e-02,  1.0910e-01, -3.9505e-02, -5.3678e-02,
         -2.2078e-01,  5.9388e-02, -7.2661e-05,  7.9975e-02, -5.4357e-02,
          3.5227e-02,  4.0346e-01,  5.7190e-01, -1.5865e-01, -1.5232e-01,
         -1.5802e-01,  1.7726e-02, -1.7341e-02,  3.5333e-02,  2.9182e-01,
          4.9782e-02,  1.0456e-01, -8.5632e-03, -3.3810e-02,  1.6688e-02,
          7.4029e-02, -5.1986e-02,  9.2030e-02, -3.5845e-01,  4.1127e-01,
         -2.4190e-01, -1.0275e-01,  3.2857e-01, -3.0441e-01,  3.2872e-01,
          3.0385e-01,  1.0511e-01,  1.5772e-01, -8.7763e-01, -4.1971e-01,
         -5.4104e-01, -1.1870e-01, -8.5768e-01,  4.9969e-01,  4.6004e-01,
         -4.2462e-01,  3.9660e-01,  3.9021e-01, -3.0338e-01, -1.9472e-01,
         -7.1514e-01,  2.0712e-01,  4.2339e-01,  7.2240e-03, -1.0223e+00,
         -3.8596e-01, -3.9614e-03,  2.8321e-01,  9.2950e-02,  1.7161e-01,
          9.5757e-02,  1.4478e-01]], device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
372000 特征值优化 tensor(0.7451, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1281, -0.0335, -2.6250,  0.1098, -0.2448, -0.5606,  0.0186, -0.9928,
         -1.5545,  0.3490, -0.9467, -0.1847,  0.1084,  0.0030, -0.0922, -0.2217,
          0.0482,  0.1046,  0.0582, -0.0539,  0.0398,  0.4070,  0.5954, -0.1407,
         -0.1642, -0.1500, -0.0277, -0.0034,  0.0360,  0.2949,  0.0673,  0.1195,
          0.0119, -0.0328,  0.0219,  0.0929, -0.0749,  0.0927, -0.2614,  0.4049,
         -0.2381, -0.0729,  0.3273, -0.3099,  0.3358,  0.3049,  0.1011,  0.1598,
         -0.8748, -0.4290, -0.5398, -0.1238, -0.8618,  0.4757,  0.4422, -0.4828,
          0.5091,  0.3416, -0.3000, -0.1710, -0.8004,  0.2466,  0.4494,  0.0080,
         -0.8063, -0.3178, -0.0639,  0.2309,  0.1204,  0.1576, -0.0192,  0.1876]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
373000 特征值优化 tensor(0.7432, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1504e+00, -6.5155e-02, -2.6492e+00,  1.1038e-01, -2.1313e-01,
         -6.1897e-01,  1.8563e-02, -9.7092e-01, -1.1873e+00,  1.6720e-01,
         -1.0196e+00, -1.7714e-01,  1.0772e-01,  6.2659e-03, -1.0070e-01,
         -2.2146e-01,  1.5846e-02,  4.2035e-02,  3.3122e-02, -5.1442e-02,
          4.0096e-02,  4.1383e-01,  5.9552e-01, -1.5699e-01, -1.7224e-01,
         -1.4369e-01, -6.1481e-02, -9.3379e-04,  4.1005e-02,  2.9331e-01,
          6.2461e-02,  1.0727e-01,  2.6578e-02, -3.7482e-02,  2.7769e-02,
          9.4358e-02, -6.9004e-02,  8.3654e-02, -1.8354e-01,  3.8257e-01,
         -2.4594e-01, -5.4429e-02,  3.3801e-01, -2.4141e-01,  2.6423e-01,
          3.3012e-01,  9.8005e-02,  1.5187e-01, -8.7039e-01, -4.3504e-01,
         -5.2504e-01, -1.3089e-01, -9.0846e-01,  4.9679e-01,  4.3483e-01,
         -4.9201e-01,  5.2736e-01,  3.3758e-01, -3.9667e-01, -1.4374e-01,
         -7.1099e-01,  1.9634e-01,  4.3335e-01,  2.4871e-02, -7.8651e-01,
         -2.2285e-01, -3.5830e-02,  1.8633e-01,  9.8863e-02,  1.8598e-01,
         -1.2968e-02,  1.7517e-01]], device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
374000 特征值优化 tensor(0.7742, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1796e+00, -6.6613e-02, -2.6442e+00,  1.0392e-01, -1.9362e-01,
         -6.5184e-01, -2.5551e-03, -9.6809e-01, -8.7986e-01,  6.1804e-02,
         -1.0230e+00, -1.3627e-01,  1.0584e-01, -1.4942e-02, -1.0774e-01,
         -2.0696e-01,  1.6054e-02,  3.4768e-02,  2.5749e-02, -4.5191e-02,
          4.0087e-02,  4.1306e-01,  5.7819e-01, -1.7690e-01, -1.6519e-01,
         -1.4513e-01, -1.0149e-01,  6.2967e-03,  4.0955e-02,  2.9258e-01,
          6.2184e-02,  1.1927e-01,  1.6208e-02, -3.8125e-02,  4.2169e-02,
          9.2934e-02, -6.2840e-02,  7.6714e-02, -9.6781e-02,  3.5065e-01,
         -2.5214e-01, -4.9617e-02,  3.6207e-01, -2.3344e-01,  2.5354e-01,
          3.5323e-01,  8.6690e-02,  1.5152e-01, -8.7288e-01, -4.3644e-01,
         -5.2899e-01, -1.2690e-01, -8.6670e-01,  4.8880e-01,  4.4580e-01,
         -4.9712e-01,  5.5588e-01,  3.3628e-01, -4.1558e-01, -1.3094e-01,
         -7.7622e-01,  2.3235e-01,  4.5783e-01,  2.0129e-02, -7.4403e-01,
         -1.5317e-01, -4.9133e-02,  1.5979e-01,  1.1465e-01,  1.8530e-01,
         -4.4228e-02,  2.0283e-01]], device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
375000 特征值优化 tensor(0.7436, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1736e+00, -7.2550e-02, -2.6496e+00,  1.0850e-01, -2.0918e-01,
         -7.1000e-01,  3.1020e-02, -1.0122e+00, -8.7884e-01,  1.2328e-02,
         -1.0701e+00, -1.2637e-01,  1.0830e-01, -4.7398e-03, -8.5387e-02,
         -2.2444e-01,  2.0003e-02,  3.0023e-02,  1.4138e-02, -4.9586e-02,
          3.9649e-02,  4.1206e-01,  5.8424e-01, -1.7129e-01, -1.5272e-01,
         -1.2445e-01, -1.0018e-01,  2.0178e-03,  4.1476e-02,  2.9081e-01,
          6.3330e-02,  1.0528e-01,  3.0403e-02, -3.6738e-02,  2.7410e-02,
          9.4743e-02, -6.6760e-02,  8.4694e-02, -1.0006e-01,  3.5158e-01,
         -2.4776e-01, -4.5687e-02,  3.5229e-01, -2.3811e-01,  2.6133e-01,
          3.3795e-01,  9.5016e-02,  1.5196e-01, -8.6906e-01, -4.3678e-01,
         -5.2622e-01, -1.3141e-01, -9.0220e-01,  4.9038e-01,  4.4263e-01,
         -4.9508e-01,  5.6864e-01,  3.4146e-01, -3.4490e-01, -1.6750e-01,
         -7.0219e-01,  2.0333e-01,  4.5250e-01,  1.7796e-02, -8.0579e-01,
         -1.2318e-01, -1.4997e-02,  1.5298e-01,  1.0779e-01,  1.8068e-01,
         -9.2175e-03,  1.7790e-01]], device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
376000 特征值优化 tensor(0.7412, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1744, -0.0618, -2.6585,  0.0989, -0.1859, -0.7218,  0.0305, -0.9533,
         -0.8300,  0.0686, -1.0433, -0.1157,  0.1079,  0.0040, -0.1095, -0.2308,
          0.0243,  0.0556,  0.0149, -0.0484,  0.0398,  0.4137,  0.5914, -0.1750,
         -0.1579, -0.1538, -0.0713,  0.0076,  0.0417,  0.2933,  0.0629,  0.1275,
          0.0276, -0.0353,  0.0209,  0.0975, -0.0570,  0.0690, -0.0785,  0.3399,
         -0.2564, -0.0496,  0.3512, -0.2370,  0.2594,  0.3377,  0.0925,  0.1526,
         -0.8711, -0.4404, -0.5241, -0.1344, -0.8917,  0.4807,  0.4177, -0.5297,
          0.5968,  0.3324, -0.4331, -0.1226, -0.7430,  0.2116,  0.4417,  0.0243,
         -0.7590, -0.1471, -0.0709,  0.1617,  0.1090,  0.1891, -0.0354,  0.2112]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
377000 特征值优化 tensor(0.7412, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1733, -0.0618, -2.6571,  0.1013, -0.1862, -0.7362,  0.0361, -0.9569,
         -0.8348,  0.0673, -1.0499, -0.1240,  0.1078, -0.0048, -0.1219, -0.2248,
          0.0153,  0.0576,  0.0177, -0.0484,  0.0400,  0.4145,  0.5964, -0.1754,
         -0.1598, -0.1527, -0.0643,  0.0050,  0.0414,  0.2940,  0.0631,  0.1221,
          0.0299, -0.0363,  0.0253,  0.0961, -0.0587,  0.0712, -0.0833,  0.3417,
         -0.2548, -0.0468,  0.3506, -0.2368,  0.2591,  0.3378,  0.0922,  0.1526,
         -0.8724, -0.4383, -0.5234, -0.1336, -0.8797,  0.4751,  0.4129, -0.5273,
          0.6030,  0.3316, -0.4418, -0.1170, -0.7376,  0.2085,  0.4428,  0.0226,
         -0.7549, -0.1506, -0.0658,  0.1592,  0.1103,  0.1880, -0.0367,  0.2096]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
378000 特征值优化 tensor(10.7488, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.9585e+00,  1.3552e+00,  5.7173e-01, -3.9344e-01, -9.8705e-02,
          9.3531e-02, -6.3154e-01,  1.1856e-01, -1.6903e+00, -6.3649e-01,
         -4.2002e-01, -2.9770e+00,  7.2802e-01,  3.5151e-01, -3.2021e-01,
          1.1307e-01, -5.9724e-01, -1.0505e+00,  3.2092e-02, -1.7877e-01,
         -1.2674e+00, -1.6781e-01,  1.1709e+00,  3.8327e-01, -5.5612e-02,
         -7.8805e-01,  1.1947e+00,  7.5903e-01, -1.1132e-03, -3.3858e-01,
         -2.5234e-02, -5.2740e-02,  4.6908e-01,  1.8904e-02, -8.3953e-02,
         -7.8333e-02,  1.8126e+00,  4.3866e-01, -2.1238e-01,  2.3676e-02,
         -4.1255e-01, -2.3271e-02, -5.2464e-02, -8.8664e-01,  5.5858e-01,
          4.6435e-01,  8.1552e-01, -8.5908e-01, -4.3687e-01, -8.2910e-01,
          9.6305e-01, -1.4416e+00,  1.0397e+00,  1.6950e+00,  5.9004e-01,
         -3.6167e-01, -5.2569e-01,  1.7253e-01,  8.8665e-02, -7.1505e-02,
         -6.1082e-01, -3.1800e-01, -5.9000e-01, -8.2286e-02, -1.2085e+00,
          1.0137e+00,  1.3502e+00, -6.2978e-01, -1.1418e+00,  4.9418e-01,
          1.7010e-01,  5.4880e-01]], device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
379000 特征值优化 tensor(1.9373, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9315,  0.8913, -0.2297, -0.9446, -0.9037, -0.5447, -1.7170, -0.5036,
         -1.9432, -0.2913, -0.8448, -3.0250,  0.2231, -0.0106,  0.0066, -0.0724,
         -0.1609, -0.0981,  0.0186,  0.0067, -0.4637, -0.0400,  0.3272,  0.0906,
          0.1792, -0.1648,  0.4636,  0.1240, -0.0109, -0.1070, -0.0246, -0.1053,
          0.2901, -0.0110,  0.0180, -0.0317,  0.9738,  0.1428, -0.1058, -0.0438,
         -0.2600,  0.0373, -0.5135, -0.7859,  0.4902, -0.0281,  0.2106, -0.4618,
          0.1135, -0.3667,  0.3840, -0.6429,  0.2348,  0.7840,  0.3630,  0.0215,
         -0.3012,  0.1294,  0.2049, -0.1762, -0.9172, -0.3462, -0.4908,  0.0377,
         -1.1299,  0.7537,  1.3210, -0.6161, -0.5772,  0.4574,  0.3399,  0.3010]],
       device='cuda:0') tensor(0.2083, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
380000 特征值优化 tensor(0.7871, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5804,  0.4402, -0.7086, -0.3884, -0.7034, -0.8309, -2.0507, -0.7392,
         -2.0920,  0.0230, -0.7634, -2.7101,  0.1004, -0.0594, -0.0159,  0.1230,
         -0.1864, -0.0904,  0.1615, -0.0493, -0.2833,  0.0244,  0.0933,  0.0105,
          0.0404, -0.0674,  0.4478,  0.1294, -0.1238, -0.0349, -0.0263, -0.0829,
          0.0444, -0.0177,  0.0419, -0.0220,  0.7060,  0.1195, -0.0940, -0.0446,
         -0.2008,  0.0632, -0.4979, -0.4209,  0.4707,  0.1181,  0.0738, -0.1996,
          0.2718, -0.5070,  0.1027, -0.3440,  0.3643,  0.4776,  0.4011,  0.0358,
         -0.1643,  0.0986,  0.2280, -0.1451, -0.6626, -0.0886, -0.6154,  0.0075,
         -0.9700,  0.6920,  1.0078, -0.4905, -0.0102,  0.1424,  0.2407,  0.2122]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
381000 特征值优化 tensor(0.6808, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.4561,  0.4842, -0.8233, -0.2872, -0.5225, -0.8304, -2.0617, -0.6802,
         -2.1192,  0.2157, -0.7148, -2.5893,  0.1038, -0.0726, -0.1191,  0.1770,
         -0.1413, -0.1551,  0.0902, -0.0033, -0.2698, -0.0033,  0.0123, -0.0353,
          0.0474,  0.0421,  0.4703,  0.0921, -0.1775, -0.0560, -0.0237, -0.0477,
         -0.0792, -0.0185, -0.0238, -0.0699,  0.6590,  0.0836, -0.1073, -0.0039,
         -0.2103,  0.0540, -0.4145, -0.3556,  0.3405,  0.0047,  0.0945, -0.2041,
          0.3872, -0.6974, -0.1735, -0.2542,  0.4992,  0.3573,  0.1976, -0.1110,
         -0.1228,  0.0757,  0.2634, -0.1305, -0.4566, -0.1089, -0.2633, -0.1815,
         -0.9126,  0.6579,  0.8150, -0.3440,  0.0991,  0.0658,  0.0841,  0.2395]],
       device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
382000 特征值优化 tensor(0.6957, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.5952e-01,  4.3775e-01, -9.1009e-01, -3.1890e-01, -5.1537e-01,
         -8.3250e-01, -2.0353e+00, -4.9858e-01, -2.1493e+00,  2.8162e-01,
         -6.5742e-01, -2.4431e+00,  1.0067e-01, -1.2024e-01, -1.2224e-01,
          8.2537e-02, -1.6379e-01, -4.2846e-02,  1.8329e-01, -7.2837e-03,
         -2.6540e-01, -2.2099e-02, -1.0634e-03, -3.0902e-02,  3.3626e-02,
          1.4689e-01,  4.6543e-01,  9.9347e-02, -1.7973e-01, -7.4021e-02,
         -2.5869e-02, -5.5401e-02, -7.7730e-02, -2.1578e-02, -4.7637e-02,
         -8.3542e-02,  6.3001e-01,  5.8527e-02, -1.0452e-01, -1.6135e-02,
         -2.2618e-01,  5.5859e-02, -4.1554e-01, -3.4791e-01,  3.4786e-01,
          5.1360e-03,  9.9966e-02, -1.9970e-01,  3.8136e-01, -7.3026e-01,
         -2.3267e-01, -2.4954e-01,  5.1459e-01,  3.4391e-01,  2.1746e-01,
         -1.2464e-01, -1.2536e-01,  7.0782e-02,  3.1802e-01, -2.6510e-01,
         -3.6854e-01, -1.1127e-01, -2.9687e-01, -1.3635e-01, -7.1664e-01,
          5.5052e-01,  6.6420e-01, -2.8510e-01,  6.1664e-02,  8.7806e-02,
          9.6905e-02,  2.2599e-01]], device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
383000 特征值优化 tensor(0.6601, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.4027,  0.4750, -0.9512, -0.3626, -0.6050, -0.7970, -1.9946, -0.6306,
         -2.3067,  0.3816, -0.5990, -2.3160,  0.1042,  0.0444, -0.0062,  0.3644,
         -0.0364, -0.1931,  0.0828,  0.0088, -0.2724, -0.0362,  0.0363,  0.0069,
          0.0295,  0.1192,  0.4769,  0.0874, -0.1794, -0.0878, -0.0262, -0.0399,
         -0.0854, -0.0178, -0.0700, -0.1050,  0.5983,  0.0513, -0.0905, -0.0231,
         -0.2071,  0.0455, -0.3836, -0.3552,  0.3297,  0.0124,  0.0991, -0.2057,
          0.3808, -0.7578, -0.2217, -0.2743,  0.6066,  0.3116,  0.2154, -0.1016,
         -0.1678,  0.0913,  0.3453, -0.1499, -0.3732, -0.1120, -0.2000, -0.2134,
         -0.5200,  0.4549,  0.5277, -0.2295,  0.0244,  0.1083,  0.0832,  0.2063]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
384000 特征值优化 tensor(0.6691, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3971,  0.4537, -0.9617, -0.3728, -0.5715, -0.8212, -1.8725, -0.5133,
         -2.3454,  0.3825, -0.5936, -2.2219,  0.1023,  0.0242, -0.0426,  0.1915,
         -0.1358, -0.1485,  0.1529,  0.0108, -0.2677, -0.0382, -0.0111,  0.0082,
          0.0094,  0.2398,  0.3961,  0.1067, -0.1805, -0.0906, -0.0231, -0.0598,
         -0.0808, -0.0178, -0.1102, -0.1293,  0.5816,  0.0090, -0.0811, -0.0262,
         -0.2192,  0.0394, -0.3819, -0.3596,  0.3337,  0.0076,  0.0908, -0.2065,
          0.3819, -0.7613, -0.2175, -0.2798,  0.5815,  0.3181,  0.2266, -0.1033,
         -0.1922,  0.1098,  0.3035, -0.1900, -0.3800, -0.1161, -0.2121, -0.1632,
         -0.4026,  0.3985,  0.4974, -0.1999,  0.0491,  0.1353,  0.0807,  0.2064]],
       device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
385000 特征值优化 tensor(0.6284, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.8548e-01,  3.4776e-01, -1.0493e+00, -4.6040e-01, -6.0024e-01,
         -8.1825e-01, -1.7433e+00, -4.7253e-01, -2.2635e+00,  3.3258e-01,
         -5.5998e-01, -2.2043e+00,  7.0633e-02, -3.1732e-02,  6.3490e-04,
          2.0056e-01, -1.4008e-01, -1.4548e-01,  1.5605e-01,  8.1447e-03,
         -2.3866e-01, -4.8151e-02, -3.5666e-02, -5.7509e-03,  7.5755e-02,
          1.8403e-01,  4.0185e-01,  1.1521e-01, -2.1487e-01, -9.8880e-02,
         -2.8877e-02, -8.3951e-02, -8.8331e-02, -1.9063e-02, -1.0110e-01,
         -1.1108e-01,  5.3667e-01, -1.7930e-02, -8.9289e-02, -2.4991e-02,
         -2.1017e-01,  5.5236e-02, -3.5844e-01, -3.4811e-01,  3.7217e-01,
         -1.4749e-02,  7.5968e-02, -3.0585e-01,  4.7517e-01, -8.1604e-01,
         -3.2140e-01, -2.4789e-01,  5.6636e-01,  3.1601e-01,  2.3422e-01,
         -1.1466e-01, -1.3592e-01,  8.3197e-02,  2.4158e-01, -1.1895e-01,
         -3.2680e-01, -1.2702e-01, -2.8317e-01, -1.2006e-01, -2.2304e-01,
          3.1065e-01,  3.3177e-01, -1.1495e-01,  5.6983e-02,  1.5632e-01,
          1.1120e-01,  1.5959e-01]], device='cuda:0') tensor(0.2135, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
386000 特征值优化 tensor(0.6193, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.4944,  0.3634, -1.2580, -0.6609, -0.5447, -0.8215, -1.6983, -0.5612,
         -2.2241,  0.4101, -0.5534, -2.2247,  0.0755,  0.1372,  0.1721,  0.2023,
         -0.0512, -0.1335,  0.1908,  0.0153, -0.2378, -0.0967, -0.0556, -0.1099,
          0.0467,  0.1763,  0.4123,  0.1719, -0.2138, -0.1463, -0.0264, -0.0158,
         -0.1024, -0.0179, -0.0931, -0.1140,  0.5129, -0.0170, -0.0730, -0.0167,
         -0.1992,  0.0370, -0.3660, -0.3546,  0.3766, -0.0154,  0.0767, -0.2964,
          0.4540, -0.9030, -0.3524, -0.2839,  0.5373,  0.3249,  0.2686, -0.0975,
         -0.1704,  0.0992,  0.3058, -0.1468, -0.3303, -0.1255, -0.1947, -0.1787,
         -0.0603,  0.2031,  0.1999, -0.0479,  0.0460,  0.1678,  0.1827,  0.1207]],
       device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
387000 特征值优化 tensor(0.6039, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.9568e-01,  3.5935e-01, -1.4793e+00, -9.0827e-01, -5.4487e-01,
         -8.0379e-01, -1.7512e+00, -7.1545e-01, -2.2965e+00,  4.2503e-01,
         -5.0511e-01, -2.2249e+00,  7.1990e-02,  1.5778e-01,  1.7131e-01,
          9.9635e-02, -1.7942e-01, -1.3378e-01,  1.4966e-01,  1.5704e-02,
         -2.4003e-01, -1.5882e-01, -8.7841e-02, -1.3263e-01, -5.0083e-03,
          2.5392e-02,  3.8946e-01,  2.7515e-01, -2.1801e-01, -2.0883e-01,
         -2.4167e-02, -2.2456e-03, -1.0148e-01, -1.8709e-02, -1.1502e-01,
         -1.3485e-01,  4.6741e-01, -1.6045e-02, -8.8468e-02, -2.1022e-03,
         -1.5853e-01,  3.7594e-02, -3.6630e-01, -3.4674e-01,  3.6665e-01,
         -1.3060e-02,  7.6911e-02, -3.0777e-01,  4.9111e-01, -1.0535e+00,
         -3.5204e-01, -3.4328e-01,  5.2000e-01,  3.3209e-01,  1.5005e-01,
         -2.4240e-01, -2.9524e-01,  1.5889e-01,  3.5901e-01, -2.1761e-01,
         -3.3642e-01, -1.3747e-01, -1.6832e-01, -2.1539e-01, -1.4239e-02,
          1.5327e-01,  2.0887e-01, -1.6142e-02,  8.2976e-02,  1.8531e-01,
          2.3606e-01,  1.0097e-01]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
388000 特征值优化 tensor(0.6026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.7307e-01,  3.3576e-01, -1.6794e+00, -1.1077e+00, -5.4824e-01,
         -7.9280e-01, -1.7157e+00, -7.1006e-01, -2.3900e+00,  4.7048e-01,
         -4.7620e-01, -2.2276e+00,  7.2638e-02,  2.3020e-01,  5.6674e-02,
          1.7955e-01, -8.2134e-02, -1.0282e-01,  1.0316e-01,  1.0672e-02,
         -2.4080e-01, -2.0603e-01, -1.0475e-01, -1.3684e-01, -2.1974e-02,
          8.4805e-02,  3.8623e-01,  2.9705e-01, -2.1940e-01, -2.5627e-01,
         -2.1867e-02, -4.0323e-03, -1.0320e-01, -1.8294e-02, -1.2003e-01,
         -1.3983e-01,  4.5646e-01, -1.3447e-02, -9.5284e-02,  1.7132e-02,
         -1.5375e-01,  1.6441e-02, -3.5087e-01, -3.5301e-01,  3.6322e-01,
         -6.6581e-03,  8.0012e-02, -3.0723e-01,  4.7240e-01, -1.1362e+00,
         -3.5898e-01, -3.8939e-01,  5.0992e-01,  3.4123e-01,  1.5334e-01,
         -2.3983e-01, -3.2426e-01,  1.6992e-01,  3.5413e-01, -2.3396e-01,
         -3.5592e-01, -1.2852e-01, -1.7812e-01, -2.2442e-01,  1.0864e-03,
          1.2752e-01,  2.2423e-01, -7.2553e-03,  8.3862e-02,  1.7950e-01,
          2.3237e-01,  8.6944e-02]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
389000 特征值优化 tensor(0.5963, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.0735e-01,  3.1027e-01, -1.8330e+00, -1.2615e+00, -5.7044e-01,
         -7.8775e-01, -1.7581e+00, -6.5615e-01, -2.4369e+00,  4.5200e-01,
         -4.7076e-01, -2.2257e+00,  7.1963e-02,  1.0878e-01,  1.5282e-01,
          1.4140e-01, -1.4260e-01, -6.2245e-03,  1.9743e-01,  1.3724e-02,
         -2.4202e-01, -2.4422e-01, -9.8013e-02, -1.3474e-01, -3.1467e-03,
          1.6112e-01,  3.9210e-01,  3.5712e-01, -2.1941e-01, -2.9476e-01,
         -2.8276e-02, -9.1111e-03, -1.0189e-01, -1.7572e-02, -9.0605e-02,
         -1.3492e-01,  4.7739e-01, -1.5167e-02, -9.6943e-02,  2.4662e-02,
         -1.6261e-01,  1.3734e-05, -3.6820e-01, -3.4718e-01,  3.6618e-01,
          5.7001e-03,  8.4863e-02, -3.0421e-01,  4.4279e-01, -1.1849e+00,
         -3.6273e-01, -4.2701e-01,  5.1126e-01,  3.3788e-01,  1.3568e-01,
         -2.4564e-01, -3.1608e-01,  1.6384e-01,  2.9851e-01, -3.0569e-01,
         -3.1425e-01, -1.3961e-01, -2.1529e-01, -2.0303e-01,  3.6990e-03,
          9.7264e-02,  2.6785e-01,  8.7769e-03,  5.3608e-02,  1.7890e-01,
          2.7119e-01,  6.9519e-02]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
390000 特征值优化 tensor(0.5991, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.4886,  0.3179, -1.9488, -1.3716, -0.5428, -0.8008, -1.7239, -0.7145,
         -2.4426,  0.5097, -0.5083, -2.2636,  0.0724,  0.1994,  0.0453,  0.2163,
         -0.0612, -0.1273,  0.1192,  0.0089, -0.2406, -0.2711, -0.0905, -0.1161,
         -0.0128,  0.0588,  0.4087,  0.3657, -0.2201, -0.3216, -0.0214, -0.0090,
         -0.1006, -0.0183, -0.1209, -0.1395,  0.4629, -0.0090, -0.1161,  0.0285,
         -0.1600,  0.0118, -0.3625, -0.3475,  0.3649,  0.0069,  0.0774, -0.3068,
          0.4213, -1.2185, -0.3782, -0.4461,  0.5082,  0.3406,  0.1339, -0.2504,
         -0.3195,  0.1700,  0.3697, -0.2407, -0.3547, -0.1115, -0.1770, -0.2194,
          0.0057,  0.0991,  0.2250,  0.0045,  0.0933,  0.1712,  0.2358,  0.0794]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
391000 特征值优化 tensor(0.5930, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5007,  0.2855, -2.0344, -1.4536, -0.5480, -0.7889, -1.7778, -0.6702,
         -2.4760,  0.4837, -0.4535, -2.2378,  0.0710,  0.0912,  0.1533,  0.1137,
         -0.1997, -0.0727,  0.2308,  0.0132, -0.2421, -0.2938, -0.0760, -0.1043,
          0.0056,  0.1505,  0.4152,  0.3962, -0.2179, -0.3452, -0.0234, -0.0140,
         -0.0970, -0.0182, -0.1068, -0.1290,  0.4551, -0.0270, -0.1116,  0.0343,
         -0.1549, -0.0034, -0.3634, -0.3454,  0.3616,  0.0181,  0.0836, -0.3031,
          0.4074, -1.2488, -0.3749, -0.4718,  0.4970,  0.3476,  0.1447, -0.2464,
         -0.3227,  0.1683,  0.2991, -0.3235, -0.3482, -0.1228, -0.1848, -0.2068,
          0.0099,  0.0916,  0.2573,  0.0189,  0.1027,  0.1774,  0.2594,  0.0623]],
       device='cuda:0') tensor(0.2036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
392000 特征值优化 tensor(0.5980, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5049,  0.3082, -2.1133, -1.5338, -0.5601, -0.7897, -1.7676, -0.6966,
         -2.5074,  0.4941, -0.4446, -2.2614,  0.0720,  0.1144,  0.1774,  0.0982,
         -0.0837, -0.0274,  0.2103,  0.0135, -0.2424, -0.3140, -0.0985, -0.1203,
         -0.0122,  0.0914,  0.4052,  0.4249, -0.2185, -0.3648, -0.0278, -0.0071,
         -0.1016, -0.0176, -0.0936, -0.1283,  0.4530, -0.0156, -0.1159,  0.0329,
         -0.1488, -0.0028, -0.3675, -0.3465,  0.3623,  0.0087,  0.0829, -0.3043,
          0.3912, -1.2717, -0.3792, -0.4896,  0.5010,  0.3419,  0.1452, -0.2452,
         -0.3086,  0.1609,  0.2975, -0.3044, -0.3172, -0.1360, -0.1990, -0.2139,
          0.0047,  0.0833,  0.2617,  0.0202,  0.0705,  0.1853,  0.2814,  0.0595]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
393000 特征值优化 tensor(0.5928, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.8501e-01,  3.6912e-01, -2.1682e+00, -1.6082e+00, -5.6501e-01,
         -8.0653e-01, -1.7590e+00, -7.2932e-01, -2.4881e+00,  5.1896e-01,
         -4.5703e-01, -2.2736e+00,  7.2073e-02,  2.3617e-01,  6.7991e-02,
          1.7776e-01, -4.3808e-02, -1.3614e-01,  1.2776e-01,  1.3141e-02,
         -2.4094e-01, -3.2727e-01, -8.8034e-02, -1.2098e-01,  4.5247e-03,
         -1.1851e-02,  4.3918e-01,  3.9906e-01, -2.1906e-01, -3.7948e-01,
         -2.2037e-02, -1.3224e-02, -9.7558e-02, -1.8602e-02, -1.1436e-01,
         -1.3648e-01,  4.4640e-01, -6.7286e-03, -1.4096e-01,  2.8896e-02,
         -1.4742e-01,  2.4117e-02, -3.5667e-01, -3.4829e-01,  3.6098e-01,
         -2.1420e-02,  8.0257e-02, -3.1154e-01,  3.8331e-01, -1.2938e+00,
         -3.7854e-01, -5.0358e-01,  5.1651e-01,  3.3990e-01,  1.5066e-01,
         -2.3941e-01, -2.9986e-01,  1.6154e-01,  3.9047e-01, -2.2880e-01,
         -3.3173e-01, -1.1528e-01, -1.8362e-01, -2.2905e-01, -1.4217e-03,
          9.0536e-02,  2.1366e-01,  5.7235e-03,  7.8473e-02,  1.7498e-01,
          2.3915e-01,  8.1201e-02]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
394000 特征值优化 tensor(0.5959, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.1696e-01,  3.0351e-01, -2.2267e+00, -1.6657e+00, -5.4924e-01,
         -7.8873e-01, -1.8144e+00, -6.9476e-01, -2.4708e+00,  4.6135e-01,
         -4.4105e-01, -2.2388e+00,  7.2111e-02,  1.3239e-01,  1.5438e-01,
          8.4527e-02, -1.1217e-01, -1.9758e-03,  2.2950e-01,  1.5236e-02,
         -2.4139e-01, -3.4225e-01, -1.1226e-01, -1.4620e-01,  2.7049e-03,
          1.4801e-01,  4.1166e-01,  4.2045e-01, -2.1927e-01, -3.9330e-01,
         -2.6722e-02, -3.9994e-03, -1.0387e-01, -1.7985e-02, -9.2519e-02,
         -1.3024e-01,  4.6389e-01, -1.2093e-02, -1.0823e-01,  3.1359e-02,
         -1.5146e-01, -4.2356e-03, -3.7341e-01, -3.4610e-01,  3.6589e-01,
          1.1418e-02,  8.2643e-02, -3.1110e-01,  3.7527e-01, -1.3144e+00,
         -3.8058e-01, -5.1678e-01,  4.9832e-01,  3.4388e-01,  1.4527e-01,
         -2.4365e-01, -3.1546e-01,  1.6424e-01,  3.0240e-01, -3.0162e-01,
         -2.8770e-01, -1.4268e-01, -2.0397e-01, -2.1495e-01,  2.5978e-02,
          7.0299e-02,  2.7426e-01,  2.5154e-02,  4.9551e-02,  1.8387e-01,
          2.6404e-01,  6.7724e-02]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
395000 特征值优化 tensor(8.8415, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.3358, -0.2547, -1.2455, -0.3541,  1.4052, -1.0032, -1.1120, -0.0056,
          0.7244,  0.9089, -0.6457, -0.1676,  0.4993, -0.0940, -0.0869,  0.1264,
          0.2087, -0.8082, -0.0183,  0.4522,  0.4719, -0.0756,  0.3766, -0.0646,
          0.0104,  0.5701, -0.2077,  0.1164,  0.5066, -0.1984,  0.0766, -1.9471,
         -0.1971, -0.3930,  0.0978, -0.3607, -0.0442,  0.9615,  0.0726, -0.1999,
         -0.0235, -0.9269,  0.0616,  0.9124, -0.5757, -1.2628, -0.3367,  1.3495,
          0.7132, -0.2076,  0.2228,  0.2482,  0.6419,  0.3576, -0.0919, -0.4835,
         -1.0273,  0.4833, -0.2079, -0.3633, -2.0513,  1.0931,  0.5929, -0.2749,
         -1.0201,  0.1203, -0.6756,  0.3219,  0.5650, -0.7900, -1.2229, -0.8337]],
       device='cuda:0') tensor(0.2053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
396000 特征值优化 tensor(0.9281, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.2633e-01,  1.0553e-01, -1.8326e+00, -1.6088e-01,  1.8396e-01,
         -1.8377e+00, -1.9856e+00, -4.5339e-02, -5.8963e-02,  4.7270e-01,
         -1.2778e+00, -8.7512e-01,  1.5616e-01,  9.1416e-04, -1.0244e-02,
          2.2265e-02, -1.4445e-02, -4.0603e-02,  1.2543e-02,  7.3358e-02,
          1.6200e-01, -7.8567e-02,  1.2870e-01,  2.0421e-01, -1.3173e-01,
          8.8708e-02, -1.3411e-01, -1.1714e-01,  9.3303e-02, -8.6968e-02,
          1.1834e-01, -9.9828e-01, -9.9626e-02,  5.4990e-02,  8.6049e-02,
         -6.5499e-02, -7.5426e-02,  2.7203e-01,  2.3484e-02, -3.0239e-02,
         -2.7410e-02, -1.8631e-01, -3.9890e-01,  5.4105e-01, -2.2284e-02,
         -6.2550e-01, -7.1057e-02,  7.6897e-01,  3.6209e-01, -1.7323e-01,
          2.5226e-01,  4.0977e-02, -5.2420e-01,  4.5324e-01, -1.0940e+00,
          8.6500e-02, -1.6206e-01, -1.4382e-01, -4.6015e-02, -4.8559e-01,
         -2.7981e+00,  1.9094e+00,  1.3741e-01, -1.1640e-01, -1.2632e+00,
          3.7331e-01, -2.8621e-01,  2.0807e-01,  1.1090e-01, -1.5593e-01,
         -6.3951e-01, -1.8340e-01]], device='cuda:0') tensor(0.2238, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
397000 特征值优化 tensor(0.7063, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2077, -0.0401, -1.7996, -0.0563, -0.0662, -1.7860, -2.1812,  0.0703,
         -0.0949,  0.2729, -0.9882, -0.9128,  0.1919,  0.0067,  0.0459,  0.0307,
         -0.0659,  0.0177,  0.1132,  0.0994,  0.1897, -0.0818,  0.1662,  0.2228,
         -0.1176,  0.0548, -0.1182, -0.1925,  0.0891, -0.0822,  0.1110, -0.8698,
         -0.1009,  0.0488,  0.1188, -0.0953,  0.0162,  0.2895,  0.0536, -0.0665,
         -0.1305, -0.2591, -0.2923,  0.3916, -0.0342, -0.5743, -0.1451,  0.7487,
          0.3633, -0.1453,  0.2490,  0.0488, -0.5870,  0.4670, -1.1277,  0.2306,
         -0.1551, -0.1498,  0.0706, -0.4809, -2.8439,  1.7216, -0.0316, -0.0495,
         -1.2562,  0.3523, -0.3092,  0.1766,  0.3210, -0.1498, -0.7142, -0.2033]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
398000 特征值优化 tensor(0.6599, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1231, -0.1400, -1.7430,  0.0646, -0.0954, -1.8322, -2.3661,  0.0778,
         -0.1261,  0.1228, -0.7630, -0.9035,  0.2039,  0.0904,  0.1234,  0.0643,
         -0.1361, -0.0140,  0.1189,  0.1065,  0.2014, -0.0861,  0.1204,  0.3062,
         -0.0681,  0.1085, -0.0563, -0.3109,  0.0325, -0.0755,  0.1425, -0.8054,
         -0.0919,  0.0490,  0.0939, -0.0803,  0.0435,  0.2841,  0.0639, -0.0626,
         -0.1675, -0.3055, -0.2663,  0.3822, -0.0794, -0.4941, -0.1902,  0.7220,
          0.3212, -0.0985,  0.3214, -0.0206, -0.5195,  0.4264, -1.0433,  0.2559,
         -0.1048, -0.1674,  0.0724, -0.4576, -2.7990,  1.6400, -0.0213, -0.0091,
         -1.2230,  0.2902, -0.2551,  0.1189,  0.3283, -0.1317, -0.7073, -0.2061]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
399000 特征值优化 tensor(0.6403, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0350, -0.1529, -1.6989,  0.0910, -0.0833, -1.7976, -2.5702, -0.1324,
         -0.0778,  0.0283, -0.7295, -0.9233,  0.2080,  0.0384,  0.2223,  0.1636,
         -0.2150, -0.0583,  0.0453,  0.0973,  0.2063, -0.0868,  0.1990,  0.1410,
         -0.0996,  0.0851, -0.3263, -0.0918,  0.0480, -0.0746,  0.1442, -0.7328,
         -0.0733,  0.0495,  0.0846, -0.0838,  0.0664,  0.2700,  0.0565, -0.0776,
         -0.1864, -0.3033, -0.2184,  0.3621, -0.0866, -0.4967, -0.1945,  0.6913,
          0.3416, -0.1102,  0.2708, -0.0041, -0.4145,  0.3679, -0.9514,  0.2596,
         -0.0900, -0.1849,  0.0912, -0.4509, -2.7181,  1.6143,  0.0437,  0.0318,
         -1.2505,  0.3059, -0.2347,  0.1408,  0.3673, -0.1206, -0.8126, -0.1840]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
400000 特征值优化 tensor(0.6397, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0369, -0.1765, -1.6316,  0.1216, -0.0605, -1.7798, -2.7501, -0.1795,
         -0.0898,  0.0161, -0.6128, -0.9034,  0.2034,  0.0273,  0.1725,  0.2182,
         -0.1718, -0.1550, -0.0670,  0.0934,  0.2016, -0.0870,  0.0548,  0.2665,
         -0.0587,  0.1065, -0.1763, -0.2147,  0.0272, -0.0727,  0.1443, -0.6645,
         -0.0572,  0.0506,  0.0614, -0.0706,  0.0914,  0.2405,  0.0656, -0.0703,
         -0.2091, -0.3512, -0.1752,  0.3594, -0.0748, -0.4889, -0.1832,  0.6553,
          0.3412, -0.1093,  0.2666, -0.0135, -0.3343,  0.3172, -0.8416,  0.2749,
         -0.0770, -0.1945,  0.1054, -0.4452, -2.6427,  1.5562,  0.0357,  0.0967,
         -1.2222,  0.2894, -0.2520,  0.1346,  0.3725, -0.0848, -0.8931, -0.2247]],
       device='cuda:0') tensor(0.2038, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
401000 特征值优化 tensor(0.6429, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.9874e-02, -1.8938e-01, -1.5489e+00,  1.6709e-01, -5.8837e-02,
         -1.8081e+00, -2.9274e+00, -1.9784e-01, -1.3870e-01, -1.0691e-01,
         -5.1173e-01, -8.8500e-01,  2.0784e-01,  2.1353e-02,  2.4298e-01,
          2.9123e-01, -1.7062e-01, -7.8423e-02, -1.0616e-02,  9.2656e-02,
          2.0563e-01, -8.9189e-02,  1.2421e-01,  2.0024e-01,  6.0675e-03,
         -5.4631e-02, -1.5687e-01, -2.2411e-01,  6.8315e-02, -7.2538e-02,
          1.4504e-01, -5.9593e-01, -5.1676e-02,  4.9812e-02,  6.4852e-02,
         -7.3911e-02,  1.0023e-01,  2.2085e-01,  6.7328e-02, -6.7860e-02,
         -2.1249e-01, -3.6153e-01, -1.6983e-01,  3.5378e-01, -7.9220e-02,
         -4.8977e-01, -1.8739e-01,  6.1551e-01,  3.5472e-01, -1.1414e-01,
          2.1347e-01,  1.0447e-03, -2.6336e-01,  2.8234e-01, -7.3773e-01,
          2.8568e-01, -6.9417e-02, -1.9291e-01,  1.1744e-01, -4.4467e-01,
         -2.5541e+00,  1.5384e+00,  3.9178e-02,  1.1302e-01, -1.1867e+00,
          2.7146e-01, -2.0919e-01,  1.1725e-01,  3.7619e-01, -7.9673e-02,
         -9.0442e-01, -2.2035e-01]], device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
402000 特征值优化 tensor(0.6320, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.8665e-02, -1.8956e-01, -1.5978e+00,  1.1808e-01, -6.4651e-02,
         -1.8038e+00, -3.1677e+00, -1.3507e-01, -9.6988e-02, -2.8731e-01,
         -4.0933e-01, -1.0398e+00,  2.0861e-01,  6.3367e-03,  1.8167e-01,
          3.3654e-01, -1.0968e-01, -1.0588e-01, -4.3826e-02,  9.4016e-02,
          2.0687e-01, -8.5208e-02,  8.9662e-02,  1.9191e-01,  7.5456e-02,
         -2.2196e-03, -2.2258e-01, -1.9651e-01,  5.7210e-02, -7.6158e-02,
          1.4362e-01, -5.0947e-01, -4.3386e-02,  5.4425e-02,  7.4877e-02,
         -9.4948e-02,  1.1141e-01,  1.9978e-01,  7.7826e-02, -4.7921e-03,
         -2.1239e-01, -3.9181e-01, -1.7002e-01,  3.5890e-01, -7.9238e-02,
         -4.8667e-01, -1.8644e-01,  6.3110e-01,  3.4493e-01, -1.1338e-01,
          2.3590e-01,  9.2355e-03, -1.6058e-01,  2.2943e-01, -6.1607e-01,
          2.8664e-01, -1.2185e-01, -1.6275e-01,  1.9606e-01, -3.5692e-01,
         -2.4466e+00,  1.5176e+00, -7.7654e-03,  1.5693e-01, -1.0510e+00,
          1.7308e-01, -1.1145e-01,  6.2887e-02,  3.5974e-01, -5.3618e-02,
         -8.4518e-01, -2.5099e-01]], device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
403000 特征值优化 tensor(0.6389, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7046e-01, -2.9109e-01, -1.5724e+00,  1.3640e-01, -6.9415e-02,
         -1.8148e+00, -3.5169e+00, -1.7569e-02, -1.6794e-02, -3.8744e-01,
         -3.7161e-01, -1.0621e+00,  2.3206e-01, -1.8363e-02,  1.7600e-01,
          4.8876e-01, -4.6767e-02, -5.8099e-02, -2.2241e-02,  9.1739e-02,
          2.2970e-01, -8.4943e-02,  1.1747e-01,  1.8532e-01,  1.3544e-01,
          4.1233e-03, -1.7829e-01, -2.0119e-01,  3.7531e-02, -7.5783e-02,
          1.4420e-01, -3.1584e-01, -3.5818e-02,  6.4256e-02,  8.1297e-02,
         -9.9608e-02,  1.0339e-01,  1.8601e-01,  4.9833e-02,  6.7589e-03,
         -2.1699e-01, -3.5304e-01, -1.6170e-01,  3.4015e-01, -1.1427e-01,
         -4.8648e-01, -2.0993e-01,  6.2046e-01,  3.4714e-01, -1.1871e-01,
          2.3779e-01, -2.7561e-05, -1.5411e-02,  1.5496e-01, -3.9953e-01,
          2.8751e-01, -1.9434e-01, -1.2811e-01,  1.3140e-01, -4.1083e-01,
         -2.3420e+00,  1.4903e+00, -6.4533e-02,  1.9813e-01, -1.0143e+00,
          1.7129e-01, -8.0958e-02, -1.9699e-02,  3.9476e-01, -5.7714e-02,
         -7.9641e-01, -2.8799e-01]], device='cuda:0') tensor(0.2032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
404000 特征值优化 tensor(0.5991, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2283, -0.3565, -1.5750,  0.1121, -0.0578, -1.7857, -3.8416,  0.0863,
         -0.0232, -0.4034, -0.3642, -0.9800,  0.2608, -0.0348,  0.1555,  0.5630,
         -0.0119, -0.0167, -0.0640,  0.0918,  0.2573, -0.0877,  0.0354,  0.2362,
          0.0951, -0.1164, -0.1957, -0.2030,  0.0405, -0.0801,  0.1458, -0.1869,
         -0.0238,  0.0660,  0.0745, -0.0917,  0.0366,  0.1709,  0.0353,  0.0055,
         -0.2159, -0.3162, -0.1801,  0.3385, -0.1465, -0.5003, -0.2275,  0.6089,
          0.3511, -0.1218,  0.2472, -0.0042,  0.0294,  0.1320,  0.0892,  0.2852,
         -0.2779, -0.0811,  0.1571, -0.3570, -2.3349,  1.3783, -0.0355,  0.2773,
         -0.8752,  0.1265, -0.0346, -0.0731,  0.4502, -0.0440, -0.7969, -0.2999]],
       device='cuda:0') tensor(0.2032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
405000 特征值优化 tensor(0.5856, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2730, -0.4048, -1.6190,  0.1322, -0.0604, -1.7682, -4.1089, -0.0225,
          0.0157, -0.4709, -0.3128, -1.2061,  0.2674, -0.0311,  0.1510,  0.5496,
         -0.0981, -0.0784,  0.0619,  0.0908,  0.2627, -0.0905,  0.2400,  0.2526,
          0.2197,  0.0081, -0.2376, -0.2514,  0.0231, -0.0772,  0.1463, -0.2252,
         -0.0224,  0.0725,  0.0556, -0.0863,  0.0540,  0.1726,  0.0424,  0.0079,
         -0.1995, -0.3714, -0.1817,  0.3291, -0.1588, -0.5042, -0.2382,  0.6281,
          0.3732, -0.1452,  0.2367, -0.0183,  0.0072,  0.1414,  0.2093,  0.2856,
         -0.3055, -0.0611,  0.1900, -0.3486, -2.2762,  1.4828, -0.0052,  0.2084,
         -0.8334,  0.0809,  0.0506, -0.0848,  0.4395, -0.0436, -0.7416, -0.3560]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
406000 特征值优化 tensor(6.6942, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5222, -0.7795, -1.9296,  1.7706,  1.7774,  0.2290, -2.5536, -1.4198,
          1.1054,  0.8768, -1.8483, -1.5334, -0.0272, -0.4286, -1.0761,  0.9833,
          0.5610, -1.3068, -0.3161,  0.4833,  0.1815,  0.5474, -1.1842,  0.0844,
         -0.4016, -0.1253, -0.6366,  0.0401,  0.1580, -0.4292,  0.1025,  0.0132,
          0.0065, -0.1411,  0.0140,  0.0914, -0.6281, -1.0810,  0.0890, -0.0774,
          0.1433, -0.4805,  0.1688, -1.0337,  0.1288,  0.3834, -0.7634, -0.1377,
         -0.1801, -0.1831, -0.1086,  0.4558,  0.6345, -0.8811,  0.3642, -0.7715,
          0.6173, -0.3815, -0.2644,  0.0807, -3.0218,  1.5426, -0.6366,  0.0474,
         -0.2802, -0.8963, -0.8766,  0.2219, -0.5713, -0.2441, -0.4589, -0.5366]],
       device='cuda:0') tensor(0.2131, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
407000 特征值优化 tensor(0.9135, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.8832e+00, -9.0198e-01, -1.9342e+00,  1.7789e+00,  8.7352e-01,
         -1.8274e-01, -2.8287e+00, -8.4085e-01,  2.1290e-01,  3.9443e-01,
         -2.1720e+00, -1.2513e+00, -1.1178e-01, -5.6682e-02, -3.0550e-01,
          3.3644e-01, -1.5021e-02, -4.1979e-01, -1.2578e-01,  1.0218e-01,
          7.9354e-02,  4.9211e-01, -1.7698e-01, -9.5818e-02, -5.9265e-02,
          1.2577e-01, -3.6337e-02,  5.6295e-02,  2.9018e-02, -3.3653e-01,
          4.0982e-02, -4.3302e-02,  4.0476e-02, -1.7259e-01, -4.1888e-02,
          2.8092e-02, -5.1599e-01, -7.8525e-01,  3.1576e-02, -3.7461e-02,
         -2.2718e-01, -7.5743e-02,  3.4206e-01, -6.4140e-01,  5.0792e-01,
         -1.2697e-02, -3.0564e-01,  5.7337e-02, -1.6449e-03, -1.2367e-01,
         -1.4960e-01,  3.0358e-01, -1.5555e-01, -9.3834e-02, -6.4974e-01,
         -3.7367e-01,  2.1505e-01,  5.1312e-02, -2.5129e-01, -2.6889e-02,
         -3.1690e+00,  1.3710e+00, -7.5032e-01, -2.1018e-01, -4.2111e-01,
         -1.2217e-01, -1.9620e-01,  8.3093e-02, -6.7217e-01, -3.7861e-01,
         -1.3738e-02, -1.2296e-01]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
408000 特征值优化 tensor(0.7620, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9625, -0.8239, -1.8405,  1.6502,  0.6957, -0.1982, -2.8600, -0.6561,
          0.0206,  0.1632, -1.7967, -1.1080, -0.1060, -0.0117, -0.3130,  0.3460,
         -0.0085, -0.2968, -0.2457,  0.1214,  0.0722,  0.4484, -0.0763, -0.0508,
         -0.1065,  0.1019,  0.0358,  0.0210,  0.0190, -0.2970,  0.0640, -0.0222,
          0.1316, -0.1879, -0.0279,  0.0417, -0.3236, -0.7798,  0.0731, -0.0624,
         -0.4964, -0.0763,  0.2881, -0.6193,  0.5460, -0.2238, -0.1953,  0.0711,
          0.1343, -0.1839, -0.2129,  0.2909, -0.2277, -0.0388, -0.9379, -0.1714,
          0.2686,  0.0657, -0.2391, -0.0481, -3.1901,  1.2221, -0.5972, -0.3908,
         -0.4132, -0.1235, -0.0210,  0.0262, -0.3723, -0.3348, -0.0837, -0.0978]],
       device='cuda:0') tensor(0.2123, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
409000 特征值优化 tensor(0.6751, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9137e+00, -7.6647e-01, -1.7242e+00,  1.5770e+00,  5.7959e-01,
         -2.7437e-01, -3.0099e+00, -1.0034e+00, -1.1468e-01,  1.1587e-01,
         -1.3816e+00, -1.0373e+00, -1.0021e-01, -2.2900e-02, -2.9075e-01,
          3.3507e-01, -4.2897e-02, -3.2720e-01, -2.2330e-01,  1.2983e-01,
          8.2688e-02,  4.1737e-01, -8.6878e-02, -8.1245e-02, -1.1619e-01,
          1.1160e-01,  6.2668e-03, -1.1161e-03,  1.1619e-02, -2.7046e-01,
          7.5991e-02,  1.9303e-01,  1.4854e-01, -1.7914e-01, -1.7518e-02,
          3.0387e-03, -2.0756e-01, -6.6456e-01,  8.6984e-02, -2.0864e-02,
         -5.9602e-01, -9.8412e-02,  2.5335e-01, -5.4962e-01,  5.2574e-01,
         -2.8637e-01, -1.6190e-01,  3.9557e-02,  2.9316e-01, -2.7551e-01,
         -2.4808e-01,  2.7127e-01, -4.9790e-01,  8.7436e-02, -1.0685e+00,
         -3.3638e-01,  2.8468e-01,  5.9520e-02, -3.0659e-01,  9.3386e-02,
         -3.0990e+00,  1.1179e+00, -5.9777e-01, -4.9853e-01, -4.1987e-01,
         -1.2421e-01,  9.2758e-02, -2.9599e-03, -6.7733e-02, -3.5813e-01,
         -1.0683e-01, -6.9337e-02]], device='cuda:0') tensor(0.2045, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
410000 特征值优化 tensor(0.6316, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.8729, -0.7133, -1.6378,  1.4965,  0.5659, -0.2132, -3.0969, -1.1047,
         -0.2193, -0.0350, -1.1558, -1.0817, -0.0898,  0.0059, -0.2515,  0.3626,
         -0.0826, -0.3074, -0.1793,  0.1346,  0.0960,  0.3930, -0.0800, -0.1162,
         -0.0686,  0.1904, -0.0049, -0.0624,  0.0036, -0.2497,  0.0706,  0.3155,
          0.1248, -0.1596, -0.0337, -0.0556, -0.1686, -0.6030,  0.0911, -0.0211,
         -0.5918, -0.1058,  0.2563, -0.5203,  0.5256, -0.2855, -0.1553,  0.0466,
          0.2771, -0.2114, -0.2650,  0.2531, -0.7256,  0.1954, -1.1412, -0.3956,
          0.2524,  0.0503, -0.3668,  0.1416, -2.8871,  1.0636, -0.5718, -0.5105,
         -0.3842, -0.1275,  0.1242,  0.0249, -0.0162, -0.3877, -0.0957, -0.0683]],
       device='cuda:0') tensor(0.2030, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
411000 特征值优化 tensor(0.6254, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.8380, -0.6707, -1.5810,  1.4867,  0.5528, -0.2165, -3.1738, -1.0128,
         -0.2475, -0.0639, -1.0490, -1.0677, -0.0818,  0.0189, -0.2410,  0.3865,
         -0.0901, -0.2975, -0.1868,  0.1278,  0.1041,  0.3832, -0.0795, -0.1176,
         -0.0603,  0.1921, -0.0246, -0.0630,  0.0056, -0.2392,  0.0720,  0.3543,
          0.1158, -0.1575, -0.0349, -0.0763, -0.1454, -0.5966,  0.0926, -0.0156,
         -0.5721, -0.1092,  0.2566, -0.5025,  0.5225, -0.3008, -0.1398,  0.0278,
          0.2938, -0.2085, -0.2810,  0.2438, -0.8081,  0.2362, -1.1670, -0.3910,
          0.2321,  0.0743, -0.3868,  0.1291, -2.5760,  0.9522, -0.5918, -0.4754,
         -0.3676, -0.1272,  0.1518,  0.0377, -0.0209, -0.3813, -0.0822, -0.0873]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
412000 特征值优化 tensor(0.6571, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7932, -0.6217, -1.5636,  1.4998,  0.5673, -0.2804, -3.2991, -0.9588,
         -0.2019, -0.1099, -0.9221, -1.0425, -0.0678,  0.0252, -0.2324,  0.4148,
         -0.0705, -0.2230, -0.1918,  0.1314,  0.1113,  0.3827, -0.1617, -0.0440,
         -0.1180,  0.1014, -0.0254,  0.0588,  0.0121, -0.2390,  0.0700,  0.3598,
          0.1116, -0.1495, -0.0237, -0.0155, -0.1237, -0.5856,  0.0861, -0.0282,
         -0.5615, -0.1024,  0.2520, -0.4735,  0.5112, -0.3050, -0.1264,  0.0184,
          0.3005, -0.2083, -0.2902,  0.2455, -0.8645,  0.2621, -1.1435, -0.3860,
          0.2807,  0.0738, -0.3502,  0.1826, -2.1080,  0.7896, -0.5534, -0.4644,
         -0.3878, -0.1370,  0.1502, -0.0506, -0.0509, -0.3800, -0.0950, -0.0645]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
413000 特征值优化 tensor(0.6118, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7712e+00, -6.0622e-01, -1.5550e+00,  1.5803e+00,  5.6006e-01,
         -2.2032e-01, -3.3833e+00, -8.7352e-01, -2.4244e-01, -1.3921e-01,
         -8.4069e-01, -1.1862e+00, -6.7952e-02,  2.2857e-03, -2.3497e-01,
          4.3413e-01, -9.4581e-02, -2.3473e-01, -1.6242e-01,  1.3705e-01,
          1.1757e-01,  3.9189e-01, -1.3470e-01, -5.4802e-02, -1.4387e-01,
          7.4716e-02,  1.5406e-02,  8.3273e-02,  6.2762e-03, -2.4773e-01,
          7.1170e-02,  3.5860e-01,  1.0439e-01, -1.6224e-01, -4.6863e-02,
         -2.0098e-02, -7.1815e-02, -5.6249e-01,  1.0168e-01, -3.5666e-02,
         -5.4600e-01, -1.1167e-01,  2.4069e-01, -4.5635e-01,  5.2391e-01,
         -3.0475e-01, -1.2205e-01, -1.1675e-02,  2.4588e-01, -1.6883e-01,
         -3.2166e-01,  2.5735e-01, -9.2230e-01,  2.9152e-01, -1.0938e+00,
         -3.6120e-01,  2.0853e-01,  7.7934e-02, -3.6864e-01,  1.8103e-01,
         -1.5626e+00,  5.0135e-01, -5.3283e-01, -4.4349e-01, -3.3301e-01,
         -1.5484e-01,  1.5891e-01, -5.0945e-02, -5.0610e-02, -3.7126e-01,
         -2.9495e-02, -5.5129e-02]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
414000 特征值优化 tensor(0.6039, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7514, -0.5789, -1.6104,  1.6286,  0.6076, -0.1992, -3.2860, -0.7245,
         -0.2696, -0.1294, -0.8423, -1.1690, -0.0644,  0.0069, -0.2563,  0.4150,
         -0.0900, -0.2363, -0.1611,  0.1391,  0.1222,  0.4026, -0.1090, -0.0654,
         -0.1443,  0.0788,  0.0117,  0.0782,  0.0067, -0.2592,  0.0728,  0.2954,
          0.1162, -0.1613, -0.0534, -0.0180, -0.0035, -0.5516,  0.0943, -0.0414,
         -0.5385, -0.1065,  0.2393, -0.4728,  0.5525, -0.3025, -0.1177, -0.0075,
          0.1920, -0.1404, -0.3189,  0.2697, -0.9389,  0.2977, -1.0127, -0.3165,
          0.2082,  0.0784, -0.3796,  0.1572, -1.0329,  0.2450, -0.4504, -0.4450,
         -0.3056, -0.1663,  0.1869, -0.0437, -0.0483, -0.3719, -0.0624, -0.0411]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
415000 特征值优化 tensor(0.6006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7526e+00, -5.8083e-01, -1.6612e+00,  1.6799e+00,  6.1092e-01,
         -2.0042e-01, -3.0449e+00, -6.3938e-01, -2.7234e-01, -1.7346e-01,
         -8.7122e-01, -1.1645e+00, -6.4489e-02, -9.2936e-03, -2.6899e-01,
          3.9469e-01, -7.1070e-02, -2.3777e-01, -1.6495e-01,  1.3918e-01,
          1.2242e-01,  4.1541e-01, -1.1161e-01, -6.1007e-02, -1.5579e-01,
          6.3046e-02,  9.7851e-04,  8.5094e-02,  8.7479e-03, -2.7283e-01,
          6.9957e-02,  2.5325e-01,  1.2434e-01, -1.6128e-01, -4.6959e-02,
         -2.1435e-02, -1.1518e-02, -5.4508e-01,  9.4888e-02, -4.7355e-02,
         -5.2925e-01, -1.0962e-01,  2.3961e-01, -4.7274e-01,  5.5209e-01,
         -3.0105e-01, -1.1792e-01, -8.0860e-03,  1.6328e-01, -1.3730e-01,
         -3.1877e-01,  2.8195e-01, -9.3904e-01,  2.9660e-01, -9.5879e-01,
         -2.9451e-01,  2.4670e-01,  6.0900e-02, -3.4111e-01,  2.0274e-01,
         -7.6937e-01,  1.1957e-01, -4.1504e-01, -4.3572e-01, -3.3583e-01,
         -1.6585e-01,  1.8844e-01, -5.7395e-02, -3.4299e-02, -3.6917e-01,
         -6.3735e-02, -3.0982e-02]], device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
416000 特征值优化 tensor(0.6023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7551e+00, -5.8370e-01, -1.6726e+00,  1.6680e+00,  6.1216e-01,
         -2.1874e-01, -2.8687e+00, -5.8150e-01, -2.7856e-01, -1.6107e-01,
         -8.8199e-01, -1.1369e+00, -6.4638e-02, -5.9148e-03, -2.7405e-01,
          3.7809e-01, -6.0270e-02, -2.4038e-01, -1.7314e-01,  1.3983e-01,
          1.2198e-01,  4.1787e-01, -1.2387e-01, -7.2114e-02, -1.4486e-01,
          7.1663e-02, -7.6329e-03,  6.4911e-02,  1.4019e-02, -2.7293e-01,
          6.9427e-02,  2.4141e-01,  1.2590e-01, -1.5754e-01, -4.1747e-02,
         -2.8666e-02, -2.0356e-02, -5.4288e-01,  8.3018e-02, -4.4090e-02,
         -5.2039e-01, -1.0246e-01,  2.3962e-01, -4.7278e-01,  5.5117e-01,
         -3.0089e-01, -1.1796e-01, -1.7908e-03,  1.5585e-01, -1.3215e-01,
         -3.0683e-01,  2.7870e-01, -9.4596e-01,  2.9889e-01, -9.3328e-01,
         -2.8025e-01,  2.3172e-01,  7.8844e-02, -3.5565e-01,  1.8423e-01,
         -7.1006e-01,  9.3713e-02, -4.1037e-01, -4.2261e-01, -3.1438e-01,
         -1.6899e-01,  1.8413e-01, -2.1465e-02, -2.0623e-02, -3.6592e-01,
         -7.6577e-02, -4.8169e-02]], device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
417000 特征值优化 tensor(0.6196, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7536e+00, -5.8962e-01, -1.6887e+00,  1.6746e+00,  6.0571e-01,
         -2.5435e-01, -2.7299e+00, -5.2178e-01, -2.9326e-01, -1.3434e-01,
         -9.1911e-01, -1.1404e+00, -6.3988e-02,  2.7113e-02, -2.6858e-01,
          3.6593e-01, -5.0744e-02, -2.3813e-01, -1.8051e-01,  1.4090e-01,
          1.2221e-01,  4.2078e-01, -3.9363e-02, -1.2421e-01, -1.0247e-01,
          1.1436e-01,  1.7937e-02,  5.6828e-02,  1.2821e-02, -2.7624e-01,
          6.6103e-02,  2.3712e-01,  1.2756e-01, -1.5610e-01, -1.7532e-02,
         -4.4744e-02, -8.1482e-03, -5.2756e-01,  7.5013e-02, -4.8971e-02,
         -5.1848e-01, -9.2164e-02,  2.3731e-01, -4.7193e-01,  5.5309e-01,
         -2.9936e-01, -1.2002e-01,  2.6421e-03,  1.5348e-01, -1.3814e-01,
         -3.0396e-01,  2.8164e-01, -9.4741e-01,  2.9450e-01, -9.0269e-01,
         -2.8377e-01,  2.1225e-01,  1.1217e-01, -3.7413e-01,  1.8925e-01,
         -7.0674e-01,  1.0180e-01, -4.3059e-01, -4.2271e-01, -2.9505e-01,
         -1.5505e-01,  1.4637e-01,  1.7703e-02,  7.1887e-03, -3.5957e-01,
         -5.6619e-02, -9.2659e-02]], device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
418000 特征值优化 tensor(0.5996, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7548, -0.5820, -1.6968,  1.6803,  0.6284, -0.1814, -2.6512, -0.4750,
         -0.3005, -0.2670, -0.9628, -1.0567, -0.0617,  0.0395, -0.2701,  0.3430,
         -0.0583, -0.2397, -0.2245,  0.1381,  0.1255,  0.4198, -0.1252, -0.0634,
         -0.1501,  0.0602, -0.0056,  0.0489,  0.0125, -0.2757,  0.0679,  0.2278,
          0.1265, -0.1540, -0.0358, -0.0218, -0.0097, -0.5276,  0.0971, -0.0466,
         -0.5187, -0.1097,  0.2442, -0.4737,  0.5486, -0.2973, -0.1204,  0.0063,
          0.1537, -0.1425, -0.3044,  0.2833, -0.9526,  0.2994, -0.9111, -0.2810,
          0.2523,  0.0651, -0.3305,  0.2223, -0.6811,  0.0885, -0.4342, -0.4121,
         -0.3576, -0.1769,  0.2122, -0.0575,  0.0220, -0.3661, -0.0975, -0.0125]],
       device='cuda:0') tensor(0.2054, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
419000 特征值优化 tensor(0.5889, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7306, -0.5701, -1.6787,  1.6808,  0.5771, -0.2371, -2.5346, -0.4577,
         -0.3074, -0.2121, -1.0053, -1.0480, -0.0571,  0.0267, -0.2762,  0.3404,
         -0.0324, -0.2371, -0.2523,  0.1345,  0.1248,  0.4170, -0.0220, -0.1625,
         -0.0724,  0.1389,  0.0987,  0.0302,  0.0121, -0.2725,  0.0709,  0.2642,
          0.1149, -0.1556, -0.0410, -0.0932, -0.0118, -0.5138,  0.0631, -0.0679,
         -0.5164, -0.0795,  0.2402, -0.4635,  0.5484, -0.3102, -0.1147,  0.0190,
          0.1467, -0.1502, -0.3055,  0.2781, -0.9429,  0.3004, -0.8670, -0.2654,
          0.2127,  0.1039, -0.3188,  0.1947, -0.5005,  0.0199, -0.3453, -0.4527,
         -0.3623, -0.1420,  0.2239, -0.0355,  0.0745, -0.3731, -0.1813,  0.0111]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
420000 特征值优化 tensor(0.5828, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7308, -0.5619, -1.7361,  1.7304,  0.6113, -0.1408, -2.4925, -0.3729,
         -0.3899, -0.2676, -0.9159, -1.0126, -0.0584,  0.0584, -0.2614,  0.3373,
         -0.0492, -0.2294, -0.2480,  0.1276,  0.1238,  0.4293, -0.1735, -0.0083,
         -0.1371,  0.1034,  0.0400,  0.0035,  0.0140, -0.2848,  0.0689,  0.2680,
          0.1118, -0.1527, -0.0776, -0.0306,  0.0387, -0.4867,  0.0755, -0.0495,
         -0.5038, -0.0929,  0.2432, -0.4677,  0.5416, -0.3217, -0.1139,  0.0184,
          0.1258, -0.1515, -0.3026,  0.2888, -0.9576,  0.3039, -0.8528, -0.2621,
          0.1736,  0.1014, -0.3020,  0.2119, -0.4527,  0.0439, -0.3369, -0.4156,
         -0.3472, -0.1735,  0.2387, -0.0931,  0.0472, -0.3598, -0.2036,  0.0524]],
       device='cuda:0') tensor(0.2037, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
421000 特征值优化 tensor(3.1510, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6206, -0.7484,  0.2824,  0.0575, -0.9329, -2.0616, -1.6928, -1.2343,
         -0.9081,  0.5042,  0.0778, -0.0663,  0.0562, -0.1739, -1.3718, -0.0156,
         -0.1090,  0.0051, -0.0794,  0.4226,  0.0750, -0.0144, -0.0837, -0.4133,
          0.1010, -0.0587, -0.0709, -0.1140, -0.0425, -0.2335,  0.0123,  0.0044,
          0.0024,  0.0999,  0.2062, -0.1001,  0.0206, -0.4148, -0.4735,  0.0047,
          0.2505,  0.0537, -2.1511,  1.5503,  1.6627, -1.6152,  0.8530, -1.0065,
          0.1674,  0.3333, -0.3216,  0.0466,  0.2934, -0.0122,  0.0749, -0.3231,
          0.1852, -0.3580,  0.4293,  0.1058,  1.3619,  0.4651,  0.8552,  0.1966,
         -1.6146,  0.8256, -0.8421,  0.8568, -1.3101,  0.2341, -0.2768, -0.2231]],
       device='cuda:0') tensor(0.2083, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
422000 特征值优化 tensor(1.0263, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 6.7619e-02, -5.6622e-01, -3.5312e-01,  3.2722e-01, -1.4193e+00,
         -2.5106e+00, -1.7515e+00, -4.6191e-01, -1.0389e+00,  5.5613e-01,
         -5.2287e-02, -4.2498e-01,  5.6527e-02,  8.9596e-02, -5.7107e-01,
         -8.7493e-02,  3.6843e-02, -3.7428e-02,  3.0657e-03,  9.9757e-02,
          7.0858e-02,  3.6536e-02,  6.7918e-02, -2.4515e-02,  8.1027e-02,
         -9.6606e-02, -1.5833e-01, -1.6907e-01,  9.0650e-03, -1.3135e-01,
         -3.1428e-02, -2.4596e-03,  4.3490e-03,  8.3617e-02,  1.1923e-01,
         -1.6156e-02,  3.2493e-02, -2.1097e-01, -2.7610e-01, -9.4683e-02,
          1.1182e-01, -1.0845e-02, -2.2194e+00,  1.3486e+00,  1.4712e+00,
         -2.2741e+00,  1.1730e+00, -3.7384e-01, -4.6366e-02,  1.6752e-01,
         -2.9884e-01, -6.1150e-02,  6.6650e-01, -6.6746e-02,  1.8847e-01,
         -4.9848e-01,  3.6138e-01, -1.8679e-01,  6.0654e-01,  6.1211e-02,
          1.1904e+00,  1.9407e-01,  5.8495e-01, -3.6689e-02, -1.6928e+00,
          6.0807e-01, -6.6823e-01,  6.7134e-01, -7.3386e-01,  6.6281e-02,
         -2.8286e-01, -5.7072e-02]], device='cuda:0') tensor(0.2029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
423000 特征值优化 tensor(0.9578, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0342, -0.5264, -0.3569,  0.3105, -1.4675, -2.5711, -1.5756, -0.1481,
         -0.9987,  0.4435,  0.0166, -0.3645,  0.0499,  0.0989, -0.4314, -0.0511,
         -0.0439, -0.0662,  0.0085,  0.0795,  0.0722,  0.0341,  0.0086, -0.0443,
          0.1515, -0.1004, -0.1481, -0.1203,  0.0110, -0.1358, -0.0310,  0.0146,
         -0.0247,  0.0780,  0.1628,  0.0149,  0.0279, -0.2191, -0.2201, -0.1077,
          0.1336, -0.0584, -2.1614,  1.3144,  1.4603, -2.2571,  1.1538, -0.4141,
         -0.0248,  0.1638, -0.3197, -0.0503,  0.6688, -0.0608,  0.1923, -0.5039,
          0.4148, -0.2095,  0.5523, -0.0264,  1.0672,  0.2074,  0.4256, -0.0511,
         -1.6816,  0.4568, -0.4023,  0.5685, -0.6918,  0.0032, -0.1525, -0.0211]],
       device='cuda:0') tensor(0.2033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
424000 特征值优化 tensor(0.8819, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0063, -0.5104, -0.4279,  0.3796, -1.5585, -2.6529, -1.4173, -0.0742,
         -1.2346,  0.3759,  0.0511, -0.2194,  0.0507,  0.0952, -0.2995,  0.3025,
         -0.1407, -0.0355,  0.1409,  0.0830,  0.0656,  0.0319, -0.0668, -0.0552,
          0.1398, -0.1668, -0.0526, -0.0864,  0.0069, -0.1373,  0.0158,  0.0281,
          0.0284,  0.0623,  0.1970,  0.0336, -0.0117, -0.2225, -0.0789, -0.0047,
          0.1929, -0.2097, -2.0587,  1.2514,  1.4332, -2.2241,  1.1255, -0.3867,
         -0.0367,  0.1677, -0.3468, -0.0535,  0.5433, -0.0080, -0.0396, -0.4747,
          0.3970, -0.1810,  0.6217, -0.0610,  0.9373,  0.2095,  0.3456, -0.0872,
         -1.6965,  0.2823, -0.2128,  0.4139, -0.6839, -0.0128,  0.1903, -0.0380]],
       device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
425000 特征值优化 tensor(0.8347, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.9637e-02, -5.4760e-01, -3.7333e-01,  4.0085e-01, -1.6013e+00,
         -2.7167e+00, -1.4403e+00,  3.0432e-02, -1.3637e+00,  1.3962e-01,
          3.0222e-01, -2.1082e-01,  5.0692e-02, -3.6136e-02, -1.6074e-01,
          3.2990e-01, -5.7946e-02, -3.4495e-02,  1.3878e-01,  7.4559e-02,
          6.0947e-02,  3.5414e-02, -3.8294e-02, -6.4999e-02,  1.1649e-01,
         -1.8403e-01, -5.4528e-03,  4.7772e-04,  9.2061e-03, -1.3431e-01,
          1.2819e-02,  8.6437e-02,  5.2199e-02,  6.1773e-02,  1.7466e-01,
          3.4866e-02, -6.9087e-02, -2.1279e-01, -4.9458e-02,  1.0659e-01,
          2.8282e-01, -2.6395e-01, -1.9331e+00,  1.1579e+00,  1.4027e+00,
         -2.0962e+00,  1.0598e+00, -4.2440e-01, -3.2918e-02,  1.7616e-01,
         -3.4685e-01, -4.8093e-02,  5.3898e-01,  3.0471e-03, -7.0616e-02,
         -5.0334e-01,  4.3239e-01, -1.7659e-01,  7.9988e-01, -2.6527e-01,
          6.1016e-01,  1.4805e-01,  2.4494e-01, -1.2630e-02, -1.6354e+00,
          2.1631e-01, -1.1136e-01,  3.0356e-01, -5.7770e-01,  1.7267e-02,
          2.3474e-01, -6.3476e-02]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
426000 特征值优化 tensor(0.7804, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0120e-02, -5.5825e-01, -3.5350e-01,  4.2362e-01, -1.6683e+00,
         -2.7180e+00, -1.4381e+00,  4.6208e-01, -1.4770e+00, -2.0060e-01,
          4.8662e-01, -3.3310e-02,  5.4822e-02, -1.3885e-01, -2.6274e-02,
          2.5841e-01, -9.7380e-02,  5.3625e-03,  1.3044e-01,  1.0363e-01,
          5.8909e-02,  3.2818e-02,  5.1633e-02,  8.8518e-02,  1.2982e-01,
         -1.1255e-01,  6.0068e-02,  1.3834e-01,  1.0378e-02, -1.3671e-01,
          1.0565e-02,  9.3430e-02,  4.0004e-02,  5.6963e-02,  1.5956e-01,
         -2.1926e-02,  4.1249e-05, -2.5814e-01, -1.0120e-02,  1.4457e-01,
          2.0554e-01, -2.3832e-01, -1.8139e+00,  1.0070e+00,  1.4248e+00,
         -1.9645e+00,  9.8971e-01, -4.5454e-01, -4.8558e-02,  1.8993e-01,
         -3.5853e-01, -4.9346e-02,  5.7289e-01, -4.5747e-03,  7.8007e-02,
         -5.1150e-01,  4.0116e-01, -1.6743e-01,  8.7917e-01, -2.6976e-01,
          4.1309e-01,  1.3027e-01,  8.7635e-02,  2.3980e-02, -1.5165e+00,
          2.4304e-01, -1.3067e-02,  2.0547e-01, -4.8387e-01,  4.7715e-02,
          1.6560e-01, -1.0758e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
427000 特征值优化 tensor(0.7528, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.0096e-02, -5.6796e-01, -4.1105e-01,  3.6055e-01, -1.6555e+00,
         -2.7318e+00, -1.5431e+00,  6.4168e-01, -1.5947e+00, -1.8984e-01,
          5.8843e-01, -1.1859e-02,  4.3769e-02, -5.7346e-02,  4.2076e-02,
          1.7987e-01, -3.1374e-01,  4.5457e-02,  1.1151e-01,  7.1306e-03,
          6.7916e-02,  3.2832e-02,  4.8722e-02,  2.2863e-02, -8.3708e-02,
         -1.4853e-03,  1.8793e-01,  1.3790e-01,  9.4023e-03, -1.3640e-01,
          9.1436e-03,  9.6984e-02,  5.5101e-02,  5.6973e-02,  1.2276e-01,
         -1.6003e-02,  5.1206e-02, -2.6581e-01, -5.6504e-03,  9.3139e-02,
          1.5972e-01, -2.0846e-01, -1.6815e+00,  8.5600e-01,  1.4417e+00,
         -1.8391e+00,  9.3294e-01, -4.2785e-01, -3.7350e-02,  1.8375e-01,
         -3.2245e-01, -4.6624e-02,  5.4269e-01,  7.1077e-03,  6.0153e-02,
         -5.2754e-01,  4.3856e-01, -1.8472e-01,  8.5264e-01, -2.6750e-01,
          4.1992e-01,  7.7465e-02, -2.5123e-02,  3.4698e-02, -1.4008e+00,
          9.2915e-02,  4.8707e-02,  1.9241e-01, -5.0621e-01,  9.4604e-02,
          2.3038e-01, -8.8774e-02]], device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
428000 特征值优化 tensor(0.7475, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0490, -0.5878, -0.4479,  0.4311, -1.6327, -2.8616, -1.5732,  0.7052,
         -1.4714, -0.1947,  0.6004, -0.0580,  0.0451, -0.0038, -0.0141,  0.1955,
         -0.2880,  0.0286,  0.1176,  0.0373,  0.0615,  0.0354,  0.0491, -0.0109,
         -0.0268,  0.0154,  0.1306,  0.1807,  0.0075, -0.1366,  0.0078,  0.1050,
          0.0374,  0.0569,  0.0285, -0.0443,  0.0858, -0.2686,  0.0055,  0.1023,
          0.1291, -0.2151, -1.4767,  0.6149,  1.4732, -1.6285,  0.8248, -0.4080,
         -0.0364,  0.1823, -0.3539, -0.0430,  0.5058,  0.0231,  0.0961, -0.5198,
          0.5429, -0.2046,  0.7669, -0.2854,  0.3922,  0.0623, -0.0633,  0.0300,
         -1.0850, -0.0699,  0.1041,  0.1562, -0.4508,  0.0906,  0.2521, -0.0896]],
       device='cuda:0') tensor(0.2073, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
429000 特征值优化 tensor(0.7331, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.1728e-02, -5.7370e-01, -3.8833e-01,  3.7867e-01, -1.6278e+00,
         -2.9421e+00, -1.6417e+00,  7.9445e-01, -1.4378e+00, -1.9602e-01,
          6.1132e-01, -6.8037e-02,  4.5210e-02, -2.6417e-02, -1.9952e-02,
          1.7001e-01, -3.3319e-01,  6.0333e-02,  1.0184e-01, -1.1745e-02,
          6.4366e-02,  3.4913e-02, -3.5243e-02,  5.7355e-02, -1.2167e-01,
         -3.2090e-02,  6.6283e-02,  2.4647e-01,  9.5406e-03, -1.3751e-01,
          2.8380e-03,  1.0299e-01,  4.2183e-02,  4.9367e-02, -1.9238e-02,
         -3.7508e-02,  1.1748e-01, -2.7245e-01,  4.4294e-02,  8.5286e-02,
          1.0911e-01, -2.1286e-01, -1.3058e+00,  4.4925e-01,  1.4578e+00,
         -1.4511e+00,  7.4072e-01, -4.4822e-01, -2.9904e-02,  1.7735e-01,
         -3.2400e-01, -4.3331e-02,  5.0749e-01,  2.6475e-02,  1.1868e-01,
         -5.1031e-01,  5.7432e-01, -2.1947e-01,  7.7417e-01, -2.7330e-01,
          3.7296e-01,  3.8784e-02, -1.1355e-01,  3.4710e-02, -8.9431e-01,
         -1.4798e-01,  9.7158e-02,  1.4812e-01, -4.2878e-01,  1.0286e-01,
          2.7093e-01, -8.0809e-02]], device='cuda:0') tensor(0.2061, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
430000 特征值优化 tensor(0.7263, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0658, -0.5670, -0.4437,  0.3735, -1.6870, -3.0291, -1.7086,  0.8842,
         -1.2504, -0.2103,  0.6043, -0.0954,  0.0527, -0.0990, -0.0402,  0.3034,
         -0.2437,  0.0225,  0.1897,  0.0216,  0.0714,  0.0319, -0.1828, -0.1136,
         -0.0171,  0.0075,  0.1333,  0.1596,  0.0082, -0.1397,  0.0051,  0.1023,
          0.0575,  0.0471, -0.0104,  0.0369,  0.1233, -0.2762,  0.0155,  0.0944,
          0.1128, -0.2187, -1.1775,  0.4038,  1.3999, -1.3254,  0.6867, -0.4163,
         -0.0363,  0.1634, -0.3048, -0.0567,  0.5302,  0.0207,  0.1118, -0.5082,
          0.6241, -0.2299,  0.6671, -0.2707,  0.3638,  0.0308, -0.1279,  0.0303,
         -0.7615, -0.1693,  0.1351,  0.1228, -0.4211,  0.1129,  0.2754, -0.0841]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
431000 特征值优化 tensor(0.7164, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.3694e-02, -5.8740e-01, -4.1156e-01,  3.8985e-01, -1.6180e+00,
         -3.0530e+00, -1.7732e+00,  9.2151e-01, -1.4479e+00, -1.8691e-01,
          5.7515e-01, -3.6409e-02,  5.1828e-02, -2.0539e-02, -3.9312e-02,
          2.4560e-01, -3.1164e-01,  4.0511e-02,  1.1302e-01,  4.1494e-02,
          7.3045e-02,  3.2653e-02,  1.4511e-01,  4.5288e-02, -3.6103e-02,
          2.0569e-03,  1.3830e-01,  1.4069e-01,  8.9469e-03, -1.3928e-01,
          4.1914e-04,  1.0384e-01,  5.3642e-02,  4.7920e-02, -1.6842e-02,
          1.4808e-02,  1.5036e-01, -2.8919e-01, -4.1974e-03,  9.3389e-02,
          1.1937e-01, -2.1939e-01, -9.8125e-01,  3.7730e-01,  1.2385e+00,
         -1.1272e+00,  5.8753e-01, -4.3653e-01, -4.7734e-02,  1.8067e-01,
         -3.1521e-01, -5.2042e-02,  5.0265e-01,  2.7131e-02,  1.0721e-01,
         -4.8646e-01,  6.2708e-01, -2.2542e-01,  7.0135e-01, -2.5813e-01,
          3.3847e-01,  5.8884e-03, -1.1828e-01,  4.5002e-02, -7.3794e-01,
         -2.4108e-01,  1.0997e-01,  1.6136e-01, -3.9859e-01,  9.5490e-02,
          2.5135e-01, -7.7691e-02]], device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
432000 特征值优化 tensor(0.7130, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.7229e-02, -6.1788e-01, -4.6755e-01,  4.2221e-01, -1.6515e+00,
         -3.0821e+00, -1.7810e+00,  9.5798e-01, -1.5308e+00, -2.4871e-01,
          6.0079e-01,  1.5355e-02,  5.5715e-02,  1.1475e-02, -3.6455e-02,
          2.3856e-01, -3.3014e-01,  5.5353e-02,  1.0082e-01,  4.4045e-02,
          7.2085e-02,  3.1241e-02, -1.6519e-02, -5.0199e-04, -3.0205e-02,
          2.0252e-02,  1.0667e-01,  1.7288e-01,  1.1445e-02, -1.4027e-01,
         -2.3529e-03,  1.1328e-01,  7.0231e-02,  5.0117e-02, -2.4663e-02,
          9.6086e-03,  1.5176e-01, -2.8414e-01, -2.0917e-02,  6.7742e-02,
          1.0769e-01, -1.9565e-01, -9.6151e-01,  3.4414e-01,  1.2507e+00,
         -1.0921e+00,  5.6925e-01, -4.1255e-01, -4.7123e-02,  1.7434e-01,
         -3.2387e-01, -5.6962e-02,  4.8500e-01,  4.4976e-02,  1.3591e-01,
         -4.7268e-01,  6.2774e-01, -2.2326e-01,  7.0178e-01, -2.9989e-01,
          3.2088e-01,  1.4720e-02, -1.3568e-01,  3.3022e-02, -7.0015e-01,
         -2.5418e-01,  1.8254e-01,  1.0747e-01, -4.0622e-01,  1.1906e-01,
          2.8192e-01, -7.1683e-02]], device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
433000 特征值优化 tensor(0.7152, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0276, -0.5679, -0.4719,  0.4021, -1.6857, -3.0301, -2.0059,  1.1320,
         -1.4247, -0.3811,  0.5420,  0.1596,  0.0541, -0.0485, -0.0164,  0.1688,
         -0.2549,  0.0519,  0.0753,  0.0516,  0.0677,  0.0269, -0.0505,  0.0058,
         -0.0179,  0.0071,  0.1456,  0.1406,  0.0090, -0.1342, -0.0035,  0.1104,
          0.0694,  0.0533, -0.0336, -0.0241,  0.1879, -0.3064,  0.0279, -0.0085,
          0.1323, -0.1733, -0.7963,  0.2676,  1.1468, -0.9295,  0.4795, -0.4184,
         -0.0553,  0.1708, -0.2958, -0.0546,  0.5049,  0.0387,  0.1198, -0.4504,
          0.5927, -0.2259,  0.6426, -0.2823,  0.3336, -0.0480, -0.1570,  0.0593,
         -0.6568, -0.2113,  0.2340,  0.0575, -0.3992,  0.1192,  0.2432, -0.0440]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
434000 特征值优化 tensor(0.6945, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.0634e-03, -5.3477e-01, -4.9089e-01,  4.2644e-01, -1.7203e+00,
         -2.9874e+00, -2.1330e+00,  1.2203e+00, -1.3043e+00, -3.0003e-01,
          5.1098e-01,  1.0905e-01,  5.6310e-02, -3.3138e-03, -8.9428e-02,
          1.8223e-01, -1.7157e-01,  5.4061e-02,  7.5836e-02,  2.0286e-02,
          7.0537e-02,  1.9158e-02, -3.7714e-03, -8.8845e-02, -1.5071e-02,
          1.2026e-02,  1.4697e-01,  1.5059e-01,  9.0994e-04, -1.3186e-01,
         -8.3939e-03,  1.1017e-01,  6.7178e-02,  5.5274e-02, -3.9453e-02,
          7.2690e-03,  2.1633e-01, -3.2152e-01,  2.5000e-02, -5.3291e-02,
          1.3882e-01, -1.6937e-01, -4.9391e-01,  1.5765e-01,  9.4074e-01,
         -6.3079e-01,  3.2192e-01, -4.2939e-01, -6.2339e-02,  1.6632e-01,
         -3.0581e-01, -4.8089e-02,  5.1738e-01,  3.1463e-02,  1.3132e-01,
         -4.3137e-01,  5.4922e-01, -2.1974e-01,  6.3116e-01, -3.0394e-01,
          3.2630e-01, -7.4312e-02, -1.7464e-01,  7.5384e-02, -6.9131e-01,
         -2.1114e-01,  2.1259e-01,  8.6438e-02, -3.8286e-01,  1.1031e-01,
          2.6945e-01, -4.9331e-02]], device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
435000 特征值优化 tensor(0.6872, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.6805e-02, -5.1655e-01, -4.8962e-01,  4.2419e-01, -1.7310e+00,
         -3.0151e+00, -2.2642e+00,  1.2979e+00, -1.2867e+00, -3.1467e-01,
          4.5450e-01,  1.2724e-01,  5.5416e-02,  1.4178e-02, -1.0348e-01,
          2.2509e-01, -1.6732e-01,  9.1623e-02,  7.7291e-02, -1.1579e-02,
          7.0629e-02,  2.0147e-02,  2.3567e-02, -4.0468e-02, -7.3599e-03,
          2.0433e-02,  1.3488e-01,  1.5244e-01, -4.5045e-03, -1.3455e-01,
         -8.4407e-03,  1.0852e-01,  6.6085e-02,  5.5262e-02, -3.6391e-02,
         -3.5240e-04,  2.4870e-01, -3.4196e-01,  3.1720e-02, -6.6402e-02,
          1.4816e-01, -1.6756e-01, -4.9935e-01,  1.4449e-01,  9.4813e-01,
         -6.3840e-01,  3.2559e-01, -4.3464e-01, -6.3534e-02,  1.6319e-01,
         -3.0526e-01, -4.7355e-02,  5.2583e-01,  3.1844e-02,  1.4028e-01,
         -4.1821e-01,  5.5189e-01, -2.1406e-01,  6.3001e-01, -2.8410e-01,
          3.0250e-01, -9.2205e-02, -1.7756e-01,  1.0114e-01, -6.9109e-01,
         -1.9245e-01,  2.2225e-01,  7.5721e-02, -3.5622e-01,  8.7800e-02,
          2.7048e-01, -5.9217e-02]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
436000 特征值优化 tensor(0.6856, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0329, -0.5285, -0.4778,  0.4068, -1.7475, -3.0052, -2.3106,  1.3444,
         -1.2972, -0.3156,  0.4599,  0.1271,  0.0581, -0.0125, -0.0713,  0.2789,
         -0.1020,  0.1268, -0.0154,  0.0558,  0.0673,  0.0212, -0.0573, -0.0344,
         -0.0514, -0.0060,  0.1462,  0.1660, -0.0142, -0.1310, -0.0108,  0.0998,
          0.0714,  0.0565, -0.0569, -0.0512,  0.2657, -0.3427,  0.0296, -0.0657,
          0.1469, -0.1686, -0.5043,  0.1433,  0.9571, -0.6293,  0.3179, -0.4385,
         -0.0574,  0.1700, -0.2953, -0.0444,  0.5311,  0.0248,  0.1399, -0.4092,
          0.5228, -0.2047,  0.6277, -0.2840,  0.2751, -0.1079, -0.1871,  0.0969,
         -0.6465, -0.1970,  0.2164,  0.0716, -0.3437,  0.0951,  0.2716, -0.0570]],
       device='cuda:0') tensor(0.2033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
437000 特征值优化 tensor(0.6886, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0157, -0.5131, -0.4980,  0.4101, -1.7187, -2.9876, -2.3174,  1.3931,
         -1.3624, -0.3241,  0.4914,  0.1405,  0.0555,  0.0375, -0.1255,  0.2460,
         -0.0826,  0.0669,  0.0551,  0.0176,  0.0698,  0.0197, -0.0479, -0.1013,
         -0.0278,  0.0351,  0.1258,  0.1760, -0.0068, -0.1322, -0.0092,  0.1002,
          0.0702,  0.0592, -0.0552, -0.0163,  0.2670, -0.3255,  0.0160, -0.0618,
          0.1354, -0.1692, -0.4998,  0.1405,  0.9509, -0.6356,  0.3231, -0.4285,
         -0.0620,  0.1674, -0.2996, -0.0469,  0.5375,  0.0249,  0.1504, -0.3998,
          0.5146, -0.2105,  0.6231, -0.2894,  0.2244, -0.1162, -0.2209,  0.0867,
         -0.6264, -0.2060,  0.2003,  0.0784, -0.3077,  0.1206,  0.2587, -0.0534]],
       device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
438000 特征值优化 tensor(0.6921, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.9887e-02, -5.2290e-01, -4.9664e-01,  4.0968e-01, -1.7278e+00,
         -2.9923e+00, -2.2937e+00,  1.3852e+00, -1.3666e+00, -2.9806e-01,
          4.8502e-01,  1.1436e-01,  5.8057e-02,  1.5715e-03, -1.0231e-01,
          2.5604e-01, -9.7561e-02,  7.6553e-02,  3.6624e-02,  2.6723e-02,
          6.6806e-02,  1.9469e-02, -5.4506e-02, -8.4721e-02, -5.2076e-02,
          3.2315e-02,  1.3969e-01,  1.5592e-01, -3.3491e-03, -1.3182e-01,
         -8.9136e-03,  9.9493e-02,  7.2336e-02,  6.0019e-02, -5.9438e-02,
         -4.3084e-02,  2.7776e-01, -3.2331e-01, -2.8451e-04, -6.1868e-02,
          1.2479e-01, -1.6848e-01, -4.9532e-01,  1.4055e-01,  9.5607e-01,
         -6.3343e-01,  3.2103e-01, -4.2972e-01, -6.0238e-02,  1.6932e-01,
         -3.0178e-01, -4.4888e-02,  5.3852e-01,  2.3316e-02,  1.5087e-01,
         -4.0054e-01,  5.2746e-01, -2.2031e-01,  6.2833e-01, -3.0612e-01,
          2.2563e-01, -1.2901e-01, -2.2956e-01,  7.9270e-02, -6.4502e-01,
         -2.2348e-01,  2.1336e-01,  7.2853e-02, -3.0546e-01,  1.3150e-01,
          2.5630e-01, -4.5965e-02]], device='cuda:0') tensor(0.2079, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
439000 特征值优化 tensor(0.6853, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0277, -0.5254, -0.4932,  0.4241, -1.7742, -3.0706, -2.3253,  1.3876,
         -1.2436, -0.3107,  0.4605,  0.1399,  0.0563, -0.0330, -0.0850,  0.2313,
         -0.1390,  0.1126,  0.0220,  0.0374,  0.0690,  0.0180, -0.0038,  0.0427,
         -0.0309, -0.0120,  0.1626,  0.1296, -0.0059, -0.1344, -0.0193,  0.1007,
          0.0720,  0.0603, -0.0360, -0.0067,  0.2956, -0.3282,  0.0287, -0.0737,
          0.1167, -0.1675, -0.5020,  0.1377,  0.9562, -0.6277,  0.3187, -0.4325,
         -0.0649,  0.1655, -0.3044, -0.0512,  0.5317,  0.0221,  0.1557, -0.3986,
          0.5863, -0.2303,  0.6188, -0.2928,  0.2308, -0.1383, -0.2389,  0.0789,
         -0.6767, -0.1720,  0.2332,  0.0724, -0.2788,  0.1243,  0.2564, -0.0570]],
       device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
440000 特征值优化 tensor(0.6857, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.6914e-02, -5.1928e-01, -5.1031e-01,  4.3630e-01, -1.7275e+00,
         -3.0938e+00, -2.3608e+00,  1.4047e+00, -1.2702e+00, -3.0305e-01,
          4.6722e-01,  1.5059e-01,  5.5337e-02,  1.1668e-02, -1.1783e-01,
          2.2123e-01, -1.4177e-01,  6.9811e-02,  6.5056e-02,  2.1787e-03,
          6.9942e-02,  1.7397e-02, -1.1845e-02, -3.2947e-02,  1.1747e-02,
          3.0694e-02,  1.1346e-01,  1.7878e-01,  5.8151e-03, -1.3503e-01,
         -8.5215e-03,  1.0175e-01,  6.7119e-02,  5.8411e-02, -3.8198e-02,
          5.2081e-03,  2.8480e-01, -3.2983e-01,  2.2318e-02, -6.2470e-02,
          1.3042e-01, -1.6659e-01, -4.9603e-01,  1.3724e-01,  9.5137e-01,
         -6.3416e-01,  3.2336e-01, -4.2367e-01, -6.5353e-02,  1.6395e-01,
         -3.1088e-01, -5.2105e-02,  5.3862e-01,  2.3153e-02,  1.5358e-01,
         -3.8908e-01,  5.7742e-01, -2.1318e-01,  6.1251e-01, -2.9928e-01,
          2.1340e-01, -1.2586e-01, -2.2548e-01,  8.9819e-02, -6.8116e-01,
         -1.8097e-01,  2.4093e-01,  7.7579e-02, -2.8501e-01,  1.1582e-01,
          2.6890e-01, -6.0582e-02]], device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
441000 特征值优化 tensor(0.6814, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.0357e-02, -5.2534e-01, -5.1542e-01,  4.3269e-01, -1.7927e+00,
         -3.0839e+00, -2.3716e+00,  1.4223e+00, -1.3451e+00, -3.4514e-01,
          4.9024e-01,  1.6926e-01,  5.5861e-02, -2.4815e-02, -3.2289e-02,
          2.6006e-01, -8.3237e-02,  1.5195e-01, -3.0014e-02,  3.6941e-02,
          6.9620e-02,  1.7819e-02,  1.3265e-02, -1.1420e-01,  2.9637e-03,
          1.5216e-02,  1.7714e-01,  1.2993e-01, -6.3877e-03, -1.3739e-01,
         -2.1295e-02,  9.8127e-02,  7.8636e-02,  6.1182e-02, -4.2895e-02,
         -5.2807e-02,  2.8459e-01, -3.2616e-01,  1.8312e-02, -4.2552e-02,
          1.3135e-01, -1.6846e-01, -5.0701e-01,  1.4246e-01,  9.5387e-01,
         -6.2733e-01,  3.2020e-01, -4.2635e-01, -6.9390e-02,  1.6030e-01,
         -3.0832e-01, -5.0861e-02,  5.3164e-01,  2.0631e-02,  1.4026e-01,
         -4.0189e-01,  5.8660e-01, -2.2562e-01,  6.0664e-01, -3.0547e-01,
          2.6402e-01, -1.5999e-01, -2.3295e-01,  8.6967e-02, -6.6786e-01,
         -1.9982e-01,  2.4679e-01,  5.7069e-02, -3.0473e-01,  1.3668e-01,
          2.5822e-01, -5.1815e-02]], device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
442000 特征值优化 tensor(0.6929, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9191e-02, -5.2235e-01, -5.0319e-01,  4.0025e-01, -1.7377e+00,
         -3.0830e+00, -2.3406e+00,  1.3930e+00, -1.1492e+00, -2.8188e-01,
          4.4542e-01,  1.2521e-01,  5.8005e-02,  6.9227e-03, -9.4893e-02,
          1.7248e-01, -1.1059e-01,  5.4356e-02,  8.3293e-02, -1.0207e-02,
          6.7920e-02,  1.6018e-02, -3.6500e-02, -6.1262e-02,  1.4409e-02,
          1.7035e-02,  1.6117e-01,  1.4775e-01, -1.7883e-03, -1.3626e-01,
         -1.5174e-02,  9.7790e-02,  7.0136e-02,  5.8828e-02, -4.4169e-02,
         -6.1345e-03,  3.0018e-01, -3.3749e-01,  5.7326e-02, -7.1120e-02,
          1.2025e-01, -1.6148e-01, -5.0300e-01,  1.4623e-01,  9.5346e-01,
         -6.3580e-01,  3.1912e-01, -4.2933e-01, -6.6987e-02,  1.5984e-01,
         -2.9761e-01, -5.3325e-02,  5.3360e-01,  1.8321e-02,  1.4996e-01,
         -3.9863e-01,  5.8039e-01, -2.2209e-01,  5.7769e-01, -3.2206e-01,
          2.2616e-01, -1.3540e-01, -2.2964e-01,  8.3406e-02, -6.5658e-01,
         -1.5601e-01,  2.4767e-01,  8.0174e-02, -2.8849e-01,  1.1663e-01,
          2.4862e-01, -5.3861e-02]], device='cuda:0') tensor(0.2061, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
443000 特征值优化 tensor(0.6953, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.8256e-02, -5.2471e-01, -5.0705e-01,  3.8609e-01, -1.7455e+00,
         -3.0767e+00, -2.3422e+00,  1.4128e+00, -1.1450e+00, -2.7481e-01,
          4.6657e-01,  1.1761e-01,  5.8920e-02, -1.9522e-02, -8.3788e-02,
          1.4981e-01, -1.4119e-01,  4.0984e-02,  1.0291e-01, -2.6409e-02,
          6.7712e-02,  1.5338e-02, -6.0007e-02, -5.1634e-02,  2.0476e-02,
          2.2342e-02,  1.6715e-01,  1.4102e-01,  3.1135e-03, -1.3784e-01,
         -2.0254e-02,  9.6685e-02,  6.9989e-02,  5.9747e-02, -4.7029e-02,
          1.8535e-03,  2.9141e-01, -3.2694e-01,  6.0039e-02, -7.9498e-02,
          1.2340e-01, -1.6250e-01, -4.9886e-01,  1.3506e-01,  9.6141e-01,
         -6.2503e-01,  3.1375e-01, -4.2797e-01, -7.1717e-02,  1.5866e-01,
         -2.8884e-01, -5.5626e-02,  5.3964e-01,  1.2305e-02,  1.4470e-01,
         -3.9079e-01,  5.8587e-01, -2.2581e-01,  5.7426e-01, -3.1571e-01,
          2.1426e-01, -1.4064e-01, -2.3798e-01,  8.2951e-02, -6.5838e-01,
         -1.5004e-01,  2.5059e-01,  8.0393e-02, -2.7828e-01,  1.3017e-01,
          2.4739e-01, -5.5508e-02]], device='cuda:0') tensor(0.2063, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
444000 特征值优化 tensor(0.6836, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.9272e-02, -5.2820e-01, -5.0414e-01,  3.9736e-01, -1.7618e+00,
         -3.0905e+00, -2.3484e+00,  1.4252e+00, -1.1428e+00, -2.7987e-01,
          4.5637e-01,  1.4192e-01,  5.6455e-02, -1.5269e-02, -1.0621e-01,
          1.7699e-01, -1.4146e-01,  3.7133e-02,  1.4311e-01, -6.2122e-02,
          6.9168e-02,  1.3813e-02, -6.3623e-02, -6.4390e-02,  2.1764e-02,
          2.6378e-02,  1.5480e-01,  1.3297e-01, -5.0199e-05, -1.3888e-01,
         -1.4711e-02,  9.5993e-02,  6.7959e-02,  5.6961e-02, -4.2255e-02,
          1.2775e-02,  2.8890e-01, -3.2617e-01,  5.4456e-02, -9.7521e-02,
          1.2514e-01, -1.6042e-01, -4.9793e-01,  1.2270e-01,  9.6533e-01,
         -6.1561e-01,  3.1270e-01, -4.3325e-01, -7.0281e-02,  1.5878e-01,
         -2.9842e-01, -5.6390e-02,  5.4927e-01,  1.5794e-02,  1.5499e-01,
         -3.8985e-01,  5.5803e-01, -2.0252e-01,  5.7047e-01, -3.0795e-01,
          2.1145e-01, -1.4020e-01, -2.4251e-01,  8.7204e-02, -6.5527e-01,
         -1.3430e-01,  2.4272e-01,  8.4030e-02, -2.7031e-01,  1.2570e-01,
          2.7231e-01, -7.7020e-02]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
445000 特征值优化 tensor(0.6835, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.7171e-02, -5.3338e-01, -5.0412e-01,  4.0304e-01, -1.7749e+00,
         -3.0878e+00, -2.3506e+00,  1.4178e+00, -1.1447e+00, -2.7451e-01,
          4.5909e-01,  1.3843e-01,  5.5734e-02,  7.5581e-03, -7.2812e-02,
          1.8650e-01, -1.7153e-01,  4.3466e-02,  1.3168e-01, -4.5860e-02,
          6.9282e-02,  1.4939e-02, -1.4096e-02, -5.6115e-02,  2.1994e-02,
          2.2881e-02,  1.6138e-01,  1.2984e-01, -3.5336e-03, -1.3902e-01,
         -1.4289e-02,  9.7330e-02,  6.9899e-02,  5.9073e-02, -4.0679e-02,
          1.1195e-04,  2.9488e-01, -3.2309e-01,  5.4567e-02, -9.2420e-02,
          1.1751e-01, -1.6058e-01, -5.0393e-01,  1.2671e-01,  9.6570e-01,
         -6.1696e-01,  3.1329e-01, -4.3537e-01, -6.9078e-02,  1.5899e-01,
         -3.0094e-01, -5.4171e-02,  5.3887e-01,  2.0301e-02,  1.5801e-01,
         -3.9128e-01,  5.7415e-01, -2.1674e-01,  5.7180e-01, -3.0848e-01,
          2.2252e-01, -1.4889e-01, -2.5195e-01,  8.3677e-02, -6.5472e-01,
         -1.3399e-01,  2.2696e-01,  8.8770e-02, -2.6416e-01,  1.3023e-01,
          2.6010e-01, -6.7747e-02]], device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
446000 特征值优化 tensor(0.6893, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.1324e-02, -5.3265e-01, -5.0482e-01,  4.1166e-01, -1.7495e+00,
         -3.0907e+00, -2.3426e+00,  1.4063e+00, -1.1520e+00, -2.7467e-01,
          4.5365e-01,  1.2696e-01,  5.7641e-02, -5.1303e-02, -4.9445e-02,
          1.5880e-01, -1.5701e-01,  7.1838e-02,  7.2827e-02, -1.2544e-02,
          6.8079e-02,  1.4469e-02, -3.0695e-02, -6.1513e-03,  2.4939e-02,
          2.1556e-02,  1.7225e-01,  1.2167e-01, -3.0694e-03, -1.3757e-01,
         -1.4010e-02,  1.0170e-01,  7.0276e-02,  6.0130e-02, -4.5701e-02,
         -2.0160e-02,  3.0023e-01, -3.2720e-01,  5.0175e-02, -8.6408e-02,
          1.1506e-01, -1.6177e-01, -4.9927e-01,  1.2674e-01,  9.6462e-01,
         -6.2176e-01,  3.1345e-01, -4.3371e-01, -6.9378e-02,  1.6168e-01,
         -3.0480e-01, -5.3857e-02,  5.2930e-01,  2.7899e-02,  1.5853e-01,
         -3.9241e-01,  5.7875e-01, -2.2211e-01,  5.7824e-01, -3.1592e-01,
          2.1126e-01, -1.4074e-01, -2.4713e-01,  8.3145e-02, -6.5436e-01,
         -1.4624e-01,  2.3458e-01,  8.4041e-02, -2.6829e-01,  1.2426e-01,
          2.5307e-01, -6.2275e-02]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
447000 特征值优化 tensor(0.6816, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.4167e-02, -5.2999e-01, -4.9576e-01,  4.1100e-01, -1.7761e+00,
         -2.9897e+00, -2.4467e+00,  1.4627e+00, -1.1777e+00, -2.3608e-01,
          4.5699e-01,  1.2129e-01,  5.5854e-02, -4.7743e-02, -4.3175e-02,
          2.3613e-01, -1.2804e-01,  1.1097e-01,  4.4452e-02,  5.0160e-04,
          7.0347e-02,  1.5789e-02, -4.7221e-02, -7.7114e-03,  2.9254e-02,
          2.4547e-02,  1.4227e-01,  1.6122e-01,  1.0525e-02, -1.3675e-01,
         -2.1012e-02,  7.8485e-02,  5.7084e-02,  5.8096e-02, -6.8960e-02,
         -3.8364e-02,  3.2451e-01, -3.3745e-01,  4.1316e-02, -7.4661e-02,
          1.2006e-01, -1.5948e-01, -5.0454e-01,  1.3479e-01,  9.5982e-01,
         -6.2685e-01,  3.1782e-01, -4.5399e-01, -6.2724e-02,  1.7560e-01,
         -3.2500e-01, -4.0837e-02,  5.6516e-01, -5.3927e-03,  1.5839e-01,
         -3.9046e-01,  4.9469e-01, -2.0542e-01,  5.9809e-01, -3.1749e-01,
          2.5859e-01, -2.0140e-01, -2.8110e-01,  1.1215e-01, -7.0497e-01,
         -1.4268e-01,  2.3304e-01,  9.2000e-02, -2.5937e-01,  1.2065e-01,
          2.6178e-01, -6.1065e-02]], device='cuda:0') tensor(0.2065, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
448000 特征值优化 tensor(0.6867, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0308, -0.5251, -0.4916,  0.3991, -1.7519, -2.9117, -2.5006,  1.5104,
         -1.2004, -0.2217,  0.4462,  0.1122,  0.0564, -0.0171, -0.0947,  0.2054,
         -0.0677,  0.0661,  0.0457, -0.0043,  0.0701,  0.0163, -0.0359, -0.0376,
          0.0216,  0.0179,  0.1616,  0.1375,  0.0106, -0.1364, -0.0218,  0.0789,
          0.0599,  0.0544, -0.0662, -0.0203,  0.3435, -0.3358,  0.0481, -0.0823,
          0.1169, -0.1599, -0.4999,  0.1331,  0.9606, -0.6283,  0.3187, -0.4553,
         -0.0577,  0.1705, -0.3183, -0.0412,  0.5573,  0.0043,  0.1462, -0.3826,
          0.4650, -0.2016,  0.6001, -0.3241,  0.2436, -0.2319, -0.2983,  0.1133,
         -0.7153, -0.1441,  0.2381,  0.0978, -0.2412,  0.1296,  0.2594, -0.0631]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
449000 特征值优化 tensor(0.6772, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0416, -0.5399, -0.4854,  0.4013, -1.7581, -2.9254, -2.4820,  1.5338,
         -1.1911, -0.2358,  0.4525,  0.1311,  0.0559,  0.0667, -0.1471,  0.2048,
         -0.1211,  0.0462,  0.1019, -0.0257,  0.0692,  0.0155, -0.0429, -0.0647,
          0.0319,  0.0330,  0.1432,  0.1467,  0.0106, -0.1371, -0.0165,  0.0732,
          0.0565,  0.0549, -0.0661, -0.0030,  0.3328, -0.3167,  0.0439, -0.0999,
          0.1171, -0.1546, -0.5033,  0.1261,  0.9662, -0.6158,  0.3126, -0.4588,
         -0.0647,  0.1759, -0.3214, -0.0423,  0.5805, -0.0090,  0.1510, -0.3652,
          0.4473, -0.1883,  0.5902, -0.3217,  0.1986, -0.2338, -0.3035,  0.1049,
         -0.6947, -0.1332,  0.2472,  0.0938, -0.2093,  0.1535,  0.2646, -0.0799]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
450000 特征值优化 tensor(0.6864, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0253, -0.5319, -0.4930,  0.4187, -1.7579, -2.9219, -2.4807,  1.5497,
         -1.2017, -0.2246,  0.4457,  0.1310,  0.0570, -0.0088, -0.0706,  0.2076,
         -0.1044,  0.0508,  0.0446, -0.0100,  0.0705,  0.0159, -0.0805, -0.0384,
          0.0143,  0.0135,  0.1669,  0.1376,  0.0108, -0.1369, -0.0190,  0.0760,
          0.0597,  0.0564, -0.0707, -0.0419,  0.3381, -0.3145,  0.0516, -0.0784,
          0.1137, -0.1605, -0.4946,  0.1261,  0.9614, -0.6207,  0.3161, -0.4530,
         -0.0566,  0.1690, -0.3282, -0.0411,  0.5725, -0.0073,  0.1529, -0.3674,
          0.4578, -0.1990,  0.6021, -0.3264,  0.2000, -0.2467, -0.3156,  0.1037,
         -0.6852, -0.1531,  0.2478,  0.0893, -0.2043,  0.1620,  0.2417, -0.0538]],
       device='cuda:0') tensor(0.2074, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
451000 特征值优化 tensor(0.6802, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0339, -0.5317, -0.4921,  0.4116, -1.7897, -2.9207, -2.4672,  1.5346,
         -1.1878, -0.2117,  0.4225,  0.1367,  0.0569, -0.0147, -0.0706,  0.2352,
         -0.0890,  0.1127,  0.0092,  0.0119,  0.0691,  0.0148, -0.0711, -0.0070,
          0.0324,  0.0160,  0.1547,  0.1594,  0.0108, -0.1376, -0.0252,  0.0740,
          0.0596,  0.0549, -0.0676, -0.0380,  0.3535, -0.3126,  0.0558, -0.0764,
          0.1026, -0.1579, -0.5006,  0.1278,  0.9625, -0.6222,  0.3170, -0.4560,
         -0.0627,  0.1737, -0.3263, -0.0418,  0.5696, -0.0101,  0.1555, -0.3688,
          0.4576, -0.1964,  0.6011, -0.3221,  0.1853, -0.2567, -0.3285,  0.0962,
         -0.6964, -0.1433,  0.2435,  0.0949, -0.1781,  0.1623,  0.2553, -0.0607]],
       device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
452000 特征值优化 tensor(0.6838, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.9143e-02, -5.2551e-01, -4.9129e-01,  4.0075e-01, -1.7833e+00,
         -2.9155e+00, -2.4718e+00,  1.5462e+00, -1.2041e+00, -2.1719e-01,
          4.2599e-01,  1.2756e-01,  5.6299e-02, -3.2582e-03, -9.9028e-02,
          2.2200e-01, -6.9054e-02,  7.4443e-02,  2.1729e-02,  1.5091e-02,
          7.0084e-02,  1.5991e-02, -4.1403e-02, -4.1232e-04,  2.7765e-02,
          2.4190e-02,  1.5634e-01,  1.4300e-01,  1.0923e-02, -1.3698e-01,
         -2.3741e-02,  7.6626e-02,  5.9563e-02,  5.4321e-02, -6.7064e-02,
         -3.0563e-02,  3.5933e-01, -3.1696e-01,  4.9012e-02, -8.5581e-02,
          9.9873e-02, -1.5652e-01, -4.9645e-01,  1.2521e-01,  9.6255e-01,
         -6.2516e-01,  3.1770e-01, -4.5585e-01, -6.1865e-02,  1.7485e-01,
         -3.1929e-01, -4.1561e-02,  5.6722e-01, -5.7122e-03,  1.5588e-01,
         -3.6961e-01,  4.6159e-01, -1.9921e-01,  5.9830e-01, -3.3000e-01,
          1.8054e-01, -2.5912e-01, -3.4100e-01,  1.0012e-01, -6.9945e-01,
         -1.4424e-01,  2.5162e-01,  9.4042e-02, -1.7820e-01,  1.5973e-01,
          2.4937e-01, -6.2371e-02]], device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
453000 特征值优化 tensor(0.6788, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0313, -0.5339, -0.4807,  0.4053, -1.7648, -2.9273, -2.4662,  1.5391,
         -1.1991, -0.2217,  0.3971,  0.1426,  0.0568,  0.0250, -0.1416,  0.1905,
         -0.1360,  0.0396,  0.1079, -0.0208,  0.0687,  0.0158, -0.0438, -0.0522,
          0.0335,  0.0312,  0.1412,  0.1474,  0.0108, -0.1366, -0.0230,  0.0745,
          0.0562,  0.0557, -0.0657, -0.0029,  0.3593, -0.3112,  0.0368, -0.1052,
          0.0976, -0.1525, -0.4969,  0.1217,  0.9646, -0.6163,  0.3140, -0.4603,
         -0.0658,  0.1776, -0.3227, -0.0415,  0.5769, -0.0089,  0.1556, -0.3626,
          0.4497, -0.1894,  0.5957, -0.3258,  0.1559, -0.2561, -0.3372,  0.0946,
         -0.6914, -0.1321,  0.2593,  0.0930, -0.1548,  0.1614,  0.2594, -0.0796]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
454000 特征值优化 tensor(0.7207, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0451, -0.5248, -0.4996,  0.4342, -1.7888, -2.9397, -2.4589,  1.5650,
         -1.2260, -0.2174,  0.4325,  0.1388,  0.0574, -0.0051, -0.0326,  0.2860,
         -0.0553,  0.1239, -0.0125,  0.0094,  0.0691,  0.0163, -0.0969, -0.0075,
          0.0393,  0.0240,  0.1719,  0.1396,  0.0106, -0.1397, -0.0251,  0.0715,
          0.0630,  0.0571, -0.0728, -0.0785,  0.3463, -0.2967,  0.0454, -0.0719,
          0.1037, -0.1577, -0.5047,  0.1242,  0.9661, -0.6207,  0.3145, -0.4552,
         -0.0618,  0.1670, -0.3335, -0.0396,  0.5714, -0.0116,  0.1490, -0.3617,
          0.4599, -0.1990,  0.6055, -0.3271,  0.1682, -0.2713, -0.3367,  0.0952,
         -0.6784, -0.1535,  0.2580,  0.0866, -0.1636,  0.1843,  0.2488, -0.0587]],
       device='cuda:0') tensor(0.2037, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
455000 特征值优化 tensor(0.6841, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0309, -0.5195, -0.5008,  0.3971, -1.7783, -2.9119, -2.4591,  1.5548,
         -1.2120, -0.1924,  0.4106,  0.1298,  0.0571,  0.0046, -0.0905,  0.2103,
         -0.0620,  0.0620,  0.0226,  0.0260,  0.0697,  0.0132, -0.0987, -0.0580,
          0.0278,  0.0107,  0.1706,  0.1504,  0.0104, -0.1387, -0.0252,  0.0759,
          0.0585,  0.0552, -0.0669, -0.0266,  0.3793, -0.3043,  0.0423, -0.0730,
          0.0860, -0.1540, -0.5008,  0.1273,  0.9627, -0.6261,  0.3168, -0.4542,
         -0.0578,  0.1656, -0.3206, -0.0433,  0.5704, -0.0084,  0.1602, -0.3541,
          0.4583, -0.2002,  0.5970, -0.3342,  0.1212, -0.2784, -0.3648,  0.0874,
         -0.6926, -0.1416,  0.2524,  0.1001, -0.1344,  0.1766,  0.2462, -0.0631]],
       device='cuda:0') tensor(0.2050, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
456000 特征值优化 tensor(0.6814, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0320, -0.5330, -0.4953,  0.4050, -1.7586, -2.9134, -2.4417,  1.5272,
         -1.1956, -0.2037,  0.3692,  0.1446,  0.0564,  0.0121, -0.1214,  0.1942,
         -0.1299,  0.0299,  0.0722,  0.0156,  0.0695,  0.0152, -0.0521, -0.0446,
          0.0345,  0.0308,  0.1836,  0.1189,  0.0105, -0.1371, -0.0176,  0.0740,
          0.0568,  0.0551, -0.0685, -0.0216,  0.3855, -0.2894,  0.0432, -0.1016,
          0.0760, -0.1552, -0.4998,  0.1277,  0.9616, -0.6212,  0.3154, -0.4539,
         -0.0607,  0.1716, -0.3224, -0.0418,  0.5767, -0.0068,  0.1595, -0.3475,
          0.4488, -0.1943,  0.5877, -0.3338,  0.0809, -0.2875, -0.3655,  0.0748,
         -0.6818, -0.1387,  0.2554,  0.0932, -0.0904,  0.1896,  0.2403, -0.0659]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
457000 特征值优化 tensor(0.6861, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0201, -0.5149, -0.4976,  0.4299, -1.7593, -2.9284, -2.4363,  1.5409,
         -1.2115, -0.2148,  0.3881,  0.1428,  0.0568, -0.0212, -0.0851,  0.2393,
         -0.1217,  0.0610,  0.0277,  0.0194,  0.0684,  0.0160, -0.0649,  0.0062,
          0.0213,  0.0120,  0.1686,  0.1337,  0.0098, -0.1354, -0.0159,  0.0746,
          0.0611,  0.0584, -0.0698, -0.0442,  0.3898, -0.2772,  0.0381, -0.0858,
          0.0681, -0.1567, -0.4923,  0.1125,  0.9675, -0.6198,  0.3153, -0.4500,
         -0.0599,  0.1749, -0.3331, -0.0385,  0.5773, -0.0064,  0.1548, -0.3422,
          0.4642, -0.2018,  0.6067, -0.3478,  0.0674, -0.3113, -0.3744,  0.0724,
         -0.6750, -0.1508,  0.2613,  0.0880, -0.0805,  0.2225,  0.2196, -0.0558]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
458000 特征值优化 tensor(0.6793, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0266, -0.5133, -0.5023,  0.4160, -1.7998, -2.9413, -2.4074,  1.4956,
         -1.2081, -0.1892,  0.3632,  0.1496,  0.0584, -0.0261, -0.0472,  0.3056,
         -0.0571,  0.0997, -0.0094,  0.0386,  0.0677,  0.0151, -0.1123,  0.0054,
          0.0311,  0.0106,  0.1698,  0.1517,  0.0100, -0.1375, -0.0247,  0.0807,
          0.0613,  0.0589, -0.0696, -0.0712,  0.4033, -0.2806,  0.0369, -0.0650,
          0.0547, -0.1565, -0.4946,  0.1089,  0.9699, -0.6152,  0.3122, -0.4526,
         -0.0591,  0.1718, -0.3273, -0.0411,  0.5654, -0.0069,  0.1793, -0.3453,
          0.4614, -0.2014,  0.5959, -0.3442,  0.0516, -0.3101, -0.3968,  0.0644,
         -0.6815, -0.1497,  0.2600,  0.0945, -0.0438,  0.2121,  0.2417, -0.0550]],
       device='cuda:0') tensor(0.2045, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
459000 特征值优化 tensor(0.6824, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0220, -0.5176, -0.5051,  0.4079, -1.7897, -2.9193, -2.3935,  1.4733,
         -1.1974, -0.1844,  0.3403,  0.1508,  0.0580, -0.0247, -0.0855,  0.2789,
         -0.0911,  0.0867,  0.0065,  0.0485,  0.0676,  0.0144, -0.1082, -0.0227,
          0.0323,  0.0106,  0.1692,  0.1564,  0.0096, -0.1380, -0.0243,  0.0778,
          0.0576,  0.0577, -0.0691, -0.0483,  0.4184, -0.2763,  0.0389, -0.0680,
          0.0453, -0.1546, -0.4908,  0.1083,  0.9694, -0.6139,  0.3121, -0.4522,
         -0.0568,  0.1672, -0.3253, -0.0425,  0.5749, -0.0109,  0.1813, -0.3405,
          0.4573, -0.2024,  0.5933, -0.3445,  0.0094, -0.3116, -0.4001,  0.0550,
         -0.6813, -0.1416,  0.2596,  0.0971, -0.0200,  0.2143,  0.2314, -0.0547]],
       device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
460000 特征值优化 tensor(0.6919, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0213, -0.5122, -0.4979,  0.3944, -1.7519, -2.9232, -2.3971,  1.4841,
         -1.1926, -0.1812,  0.3342,  0.1300,  0.0586,  0.0316, -0.1246,  0.2359,
         -0.1129,  0.0430,  0.0587,  0.0196,  0.0663,  0.0131, -0.0744, -0.0624,
          0.0256,  0.0175,  0.1702,  0.1407,  0.0105, -0.1386, -0.0251,  0.0736,
          0.0587,  0.0561, -0.0725, -0.0160,  0.4123, -0.2600,  0.0439, -0.0908,
          0.0517, -0.1526, -0.4914,  0.1159,  0.9696, -0.6165,  0.3101, -0.4525,
         -0.0591,  0.1653, -0.3183, -0.0438,  0.5789, -0.0123,  0.1514, -0.3283,
          0.4642, -0.2030,  0.5783, -0.3426, -0.0056, -0.3303, -0.3810,  0.0531,
         -0.6785, -0.1305,  0.2777,  0.0936, -0.0119,  0.2330,  0.2328, -0.0638]],
       device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
461000 特征值优化 tensor(0.6809, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0249, -0.5277, -0.4986,  0.3999, -1.7576, -2.9326, -2.3833,  1.4703,
         -1.2137, -0.2012,  0.3270,  0.1604,  0.0577,  0.0173, -0.1290,  0.2609,
         -0.1141,  0.0432,  0.0564,  0.0227,  0.0680,  0.0145, -0.0871, -0.0335,
          0.0256,  0.0116,  0.1700,  0.1309,  0.0105, -0.1382, -0.0175,  0.0709,
          0.0594,  0.0583, -0.0689, -0.0293,  0.4106, -0.2508,  0.0323, -0.0934,
          0.0488, -0.1532, -0.4904,  0.1077,  0.9682, -0.6129,  0.3130, -0.4556,
         -0.0600,  0.1694, -0.3207, -0.0429,  0.5782, -0.0069,  0.1611, -0.3268,
          0.4592, -0.2005,  0.5876, -0.3434, -0.0148, -0.3304, -0.3868,  0.0476,
         -0.6689, -0.1318,  0.2771,  0.0903,  0.0058,  0.2379,  0.2275, -0.0707]],
       device='cuda:0') tensor(0.2046, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
462000 特征值优化 tensor(0.6764, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.8671e-02, -5.2132e-01, -5.1082e-01,  4.1687e-01, -1.7791e+00,
         -2.9411e+00, -2.3736e+00,  1.4606e+00, -1.2413e+00, -1.8751e-01,
          3.2521e-01,  1.6171e-01,  5.8337e-02, -5.1421e-02, -4.8985e-02,
          3.1533e-01, -9.8349e-02,  9.7815e-02, -6.6882e-03,  6.0128e-02,
          6.8095e-02,  1.5461e-02, -1.4336e-01,  3.6745e-02,  3.9370e-02,
          2.1292e-02,  1.5822e-01,  1.5351e-01,  1.0336e-02, -1.4060e-01,
         -2.8427e-02,  7.5488e-02,  6.0358e-02,  5.8513e-02, -6.8629e-02,
         -7.8282e-02,  4.1445e-01, -2.5822e-01,  4.2536e-02, -7.5781e-02,
          4.5323e-02, -1.5568e-01, -4.9573e-01,  1.1027e-01,  9.6972e-01,
         -6.1285e-01,  3.1128e-01, -4.5320e-01, -6.0058e-02,  1.6672e-01,
         -3.2682e-01, -4.1126e-02,  5.7399e-01, -6.7280e-03,  1.7224e-01,
         -3.3586e-01,  4.6145e-01, -2.0035e-01,  5.9987e-01, -3.4136e-01,
          2.0731e-03, -3.2563e-01, -3.9400e-01,  4.8638e-02, -6.6575e-01,
         -1.5586e-01,  2.7262e-01,  8.9796e-02, -3.3569e-03,  2.3125e-01,
          2.2955e-01, -5.8085e-02]], device='cuda:0') tensor(0.2054, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
463000 特征值优化 tensor(0.6819, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0248, -0.5128, -0.5006,  0.4035, -1.7896, -2.9378, -2.3607,  1.4388,
         -1.2002, -0.1691,  0.3115,  0.1639,  0.0583, -0.0219, -0.0902,  0.2888,
         -0.0772,  0.0786,  0.0054,  0.0656,  0.0675,  0.0141, -0.1102, -0.0171,
          0.0351,  0.0111,  0.1635,  0.1605,  0.0104, -0.1385, -0.0236,  0.0778,
          0.0596,  0.0592, -0.0680, -0.0535,  0.4278, -0.2567,  0.0395, -0.0726,
          0.0362, -0.1537, -0.4931,  0.1092,  0.9693, -0.6161,  0.3121, -0.4542,
         -0.0569,  0.1674, -0.3224, -0.0428,  0.5749, -0.0094,  0.1796, -0.3326,
          0.4674, -0.2064,  0.5867, -0.3489, -0.0250, -0.3309, -0.4062,  0.0435,
         -0.6740, -0.1365,  0.2717,  0.0979,  0.0136,  0.2331,  0.2245, -0.0579]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
464000 特征值优化 tensor(0.6878, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0155, -0.5078, -0.5019,  0.4042, -1.7480, -2.9149, -2.3506,  1.4212,
         -1.1988, -0.1743,  0.3008,  0.1490,  0.0566,  0.0300, -0.1064,  0.2635,
         -0.0511,  0.0434,  0.0321,  0.0327,  0.0687,  0.0145, -0.0748, -0.0604,
          0.0329,  0.0159,  0.1624,  0.1510,  0.0097, -0.1395, -0.0188,  0.0734,
          0.0574,  0.0555, -0.0654, -0.0188,  0.4295, -0.2450,  0.0393, -0.0857,
          0.0331, -0.1520, -0.4886,  0.1118,  0.9644, -0.6191,  0.3143, -0.4530,
         -0.0567,  0.1655, -0.3221, -0.0432,  0.5867, -0.0117,  0.1563, -0.3177,
          0.4622, -0.2028,  0.5842, -0.3587, -0.0694, -0.3328, -0.3980,  0.0347,
         -0.6709, -0.1270,  0.2814,  0.0967,  0.0306,  0.2454,  0.2154, -0.0650]],
       device='cuda:0') tensor(0.2096, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
465000 特征值优化 tensor(0.6827, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0316, -0.5251, -0.5089,  0.4109, -1.7630, -2.9299, -2.3407,  1.3707,
         -1.2475, -0.1830,  0.2290,  0.1827,  0.0580, -0.0123, -0.1098,  0.2769,
         -0.1138,  0.0429,  0.0441,  0.0391,  0.0677,  0.0138, -0.1164, -0.0529,
          0.0278,  0.0064,  0.1833,  0.1337,  0.0103, -0.1389, -0.0230,  0.0667,
          0.0620,  0.0597, -0.0703, -0.0497,  0.4432, -0.2189,  0.0257, -0.0862,
          0.0327, -0.1583, -0.4938,  0.1076,  0.9694, -0.6092,  0.3101, -0.4501,
         -0.0607,  0.1690, -0.3271, -0.0428,  0.5848, -0.0127,  0.1539, -0.3058,
          0.4589, -0.2012,  0.5870, -0.3465, -0.1139, -0.3664, -0.3801,  0.0188,
         -0.6559, -0.1472,  0.2802,  0.0902,  0.0937,  0.2609,  0.2111, -0.0549]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
466000 特征值优化 tensor(0.6854, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0280, -0.5188, -0.5101,  0.4184, -1.7653, -2.9294, -2.3195,  1.3337,
         -1.2605, -0.1820,  0.2104,  0.1808,  0.0585, -0.0230, -0.0905,  0.2745,
         -0.1110,  0.0430,  0.0334,  0.0503,  0.0684,  0.0142, -0.1192, -0.0411,
          0.0274,  0.0066,  0.1779,  0.1400,  0.0099, -0.1375, -0.0215,  0.0692,
          0.0592,  0.0603, -0.0716, -0.0511,  0.4514, -0.2125,  0.0252, -0.0842,
          0.0264, -0.1580, -0.4952,  0.1136,  0.9675, -0.6149,  0.3122, -0.4469,
         -0.0598,  0.1689, -0.3308, -0.0416,  0.5839, -0.0133,  0.1555, -0.2996,
          0.4612, -0.2037,  0.5970, -0.3577, -0.1374, -0.3727, -0.3818,  0.0112,
         -0.6548, -0.1497,  0.2780,  0.0913,  0.1128,  0.2647,  0.2016, -0.0536]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
467000 特征值优化 tensor(0.6808, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0290, -0.5164, -0.5135,  0.4148, -1.7880, -2.9323, -2.3182,  1.3263,
         -1.2320, -0.1511,  0.2034,  0.1890,  0.0585, -0.0338, -0.0828,  0.3036,
         -0.0903,  0.0862, -0.0079,  0.0678,  0.0674,  0.0137, -0.1231, -0.0192,
          0.0383,  0.0101,  0.1681,  0.1575,  0.0104, -0.1391, -0.0239,  0.0738,
          0.0577,  0.0595, -0.0712, -0.0660,  0.4589, -0.2263,  0.0315, -0.0704,
          0.0222, -0.1574, -0.4966,  0.1126,  0.9693, -0.6158,  0.3115, -0.4482,
         -0.0579,  0.1665, -0.3293, -0.0428,  0.5825, -0.0148,  0.1731, -0.3037,
          0.4578, -0.2024,  0.5912, -0.3579, -0.1296, -0.3605, -0.3979,  0.0120,
         -0.6699, -0.1450,  0.2792,  0.0982,  0.1087,  0.2501,  0.2138, -0.0504]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
468000 特征值优化 tensor(0.6854, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0174, -0.5007, -0.5119,  0.4025, -1.7607, -2.9055, -2.3216,  1.3500,
         -1.2318, -0.1502,  0.2241,  0.1756,  0.0587,  0.0212, -0.1030,  0.2710,
         -0.0408,  0.0473,  0.0078,  0.0564,  0.0675,  0.0129, -0.1268, -0.0629,
          0.0363,  0.0081,  0.1673,  0.1527,  0.0089, -0.1399, -0.0221,  0.0704,
          0.0592,  0.0568, -0.0702, -0.0305,  0.4550, -0.2187,  0.0348, -0.0783,
          0.0248, -0.1529, -0.4910,  0.1095,  0.9671, -0.6156,  0.3137, -0.4487,
         -0.0579,  0.1639, -0.3234, -0.0438,  0.5877, -0.0139,  0.1429, -0.3035,
          0.4489, -0.2006,  0.5901, -0.3601, -0.1461, -0.3710, -0.3948,  0.0159,
         -0.6577, -0.1346,  0.2883,  0.0981,  0.1039,  0.2651,  0.2125, -0.0638]],
       device='cuda:0') tensor(0.2038, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
469000 特征值优化 tensor(0.6797, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0260, -0.5200, -0.5074,  0.3939, -1.7586, -2.9234, -2.3328,  1.3479,
         -1.2352, -0.1529,  0.2229,  0.1863,  0.0577,  0.0435, -0.1267,  0.2778,
         -0.1172,  0.0447,  0.0240,  0.0222,  0.0677,  0.0124, -0.1109, -0.0811,
          0.0357,  0.0068,  0.1902,  0.1276,  0.0103, -0.1406, -0.0178,  0.0623,
          0.0609,  0.0591, -0.0741, -0.0321,  0.4426, -0.2061,  0.0182, -0.0938,
          0.0342, -0.1544, -0.4926,  0.1088,  0.9686, -0.6143,  0.3126, -0.4532,
         -0.0582,  0.1645, -0.3207, -0.0444,  0.5906, -0.0141,  0.1434, -0.3005,
          0.4427, -0.1928,  0.5865, -0.3488, -0.1508, -0.3784, -0.3689,  0.0097,
         -0.6575, -0.1274,  0.2900,  0.0972,  0.1222,  0.2742,  0.2196, -0.0728]],
       device='cuda:0') tensor(0.2052, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
470000 特征值优化 tensor(0.6825, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0208, -0.5163, -0.5087,  0.4126, -1.7820, -2.9265, -2.3318,  1.3476,
         -1.2214, -0.1399,  0.2122,  0.2037,  0.0577, -0.0300, -0.0941,  0.2953,
         -0.0880,  0.0706, -0.0049,  0.0535,  0.0676,  0.0143, -0.1067, -0.0321,
          0.0388,  0.0071,  0.1670,  0.1592,  0.0104, -0.1390, -0.0243,  0.0726,
          0.0574,  0.0584, -0.0693, -0.0474,  0.4587, -0.2306,  0.0371, -0.0747,
          0.0256, -0.1557, -0.4964,  0.1168,  0.9667, -0.6155,  0.3121, -0.4498,
         -0.0576,  0.1665, -0.3269, -0.0422,  0.5820, -0.0140,  0.1625, -0.3040,
          0.4608, -0.2045,  0.5820, -0.3579, -0.1280, -0.3614, -0.3967,  0.0165,
         -0.6637, -0.1334,  0.2796,  0.1010,  0.1035,  0.2479,  0.2052, -0.0536]],
       device='cuda:0') tensor(0.2053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
471000 特征值优化 tensor(5.5122, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7860,  0.6981, -1.3344,  0.6208,  0.4300, -0.2759, -0.6692, -1.4541,
         -1.8153,  0.3283,  0.0986, -0.2360,  0.5008,  1.0197,  0.4542,  0.0640,
          0.0749, -0.2200, -0.7517, -0.0501, -0.5175,  0.1271,  0.9103, -0.2768,
          0.2286,  0.6441, -0.9015,  0.8839, -0.0292,  0.1831, -0.4229, -0.0141,
          0.0217,  0.1457,  0.1112, -0.2021, -0.0778,  1.1467, -0.6277,  0.3436,
          0.9511, -0.8305, -0.1169, -0.3011,  0.3049,  0.8651, -0.2959,  0.1437,
          0.9288, -0.7641, -0.1618, -0.1645, -0.5157,  0.4247, -0.7005, -0.3258,
         -0.6669,  0.2726,  0.1242, -0.2204, -1.6251, -0.8560, -0.4867, -1.0879,
         -0.0338, -0.1678,  0.4230,  0.5889, -0.8230, -0.5987, -1.0975, -0.0573]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
472000 特征值优化 tensor(0.8467, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9419e+00,  3.0480e-01, -1.5643e+00,  6.9821e-01, -2.1870e-01,
         -8.5007e-01, -1.2749e+00, -2.1093e+00, -2.1122e+00,  2.3352e-01,
         -5.7958e-01, -7.2358e-01,  3.1885e-01,  1.7053e-01, -8.6729e-02,
         -2.1464e-01, -2.2575e-01,  6.5913e-02, -1.4453e-01, -1.3651e-01,
         -3.2540e-01,  1.5353e-01,  2.0914e-01, -6.7641e-02,  2.4475e-01,
          1.1892e-01, -3.3692e-01,  2.3876e-01,  5.5107e-02,  1.5681e-01,
         -2.6304e-01,  4.6807e-02,  1.0809e-01,  1.5740e-01,  1.1198e-03,
         -1.5866e-01,  3.0251e-01,  6.2398e-01, -2.8288e-01,  2.1741e-01,
          5.7425e-01, -4.2859e-01,  5.7136e-02, -3.1216e-01,  4.3674e-01,
          8.0058e-01, -2.2165e-01,  3.6190e-01,  5.0971e-01, -4.4629e-01,
         -2.9378e-01, -6.3047e-02, -1.4199e-01,  1.3964e-01, -5.2871e-01,
         -5.6433e-01, -3.1888e-01,  1.7086e-01,  1.5944e-01,  6.6314e-03,
         -8.1973e-01, -3.4464e-01, -9.3051e-03, -5.3697e-01,  1.4729e-01,
         -2.3355e-01,  3.4375e-01,  3.5617e-01, -6.7709e-01, -2.4663e-01,
         -2.5536e-01, -7.6116e-02]], device='cuda:0') tensor(0.2093, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
473000 特征值优化 tensor(0.7633, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7252,  0.0105, -1.2596,  0.4507, -0.2645, -0.7911, -1.3354, -2.0082,
         -1.6238, -0.0417, -0.5977, -0.6798,  0.2309,  0.0963, -0.0807, -0.2335,
         -0.2899,  0.1230, -0.0828, -0.1795, -0.2422,  0.1627,  0.0752, -0.0245,
          0.0895,  0.1448, -0.2650,  0.0686,  0.0751,  0.1573, -0.2679,  0.0656,
          0.0876,  0.1557,  0.0025, -0.1190,  0.2578,  0.5743, -0.1860,  0.0971,
          0.5496, -0.3475,  0.1540, -0.3200,  0.4737,  0.6285, -0.1932,  0.2019,
          0.5330, -0.4471, -0.1841, -0.0491, -0.1799,  0.1478, -0.4300, -0.6302,
         -0.4222,  0.2123,  0.1037, -0.0582, -0.7491, -0.3554, -0.1249, -0.4850,
          0.1538, -0.0507,  0.5143,  0.2167, -0.5429, -0.2467, -0.1372, -0.1194]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
474000 特征值优化 tensor(0.7202, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6326, -0.1409, -1.2278,  0.4561, -0.3189, -0.8271, -1.3758, -2.1430,
         -1.3735, -0.2703, -0.5806, -0.5170,  0.1980,  0.1224, -0.0476, -0.2006,
         -0.3758,  0.1602, -0.0757, -0.1191, -0.2172,  0.1603,  0.0090,  0.1282,
          0.0747,  0.0937, -0.2503,  0.1010,  0.0749,  0.1574, -0.2757,  0.0700,
          0.0635,  0.1557,  0.0415, -0.0879,  0.2262,  0.5165, -0.0905,  0.0341,
          0.5449, -0.3385,  0.3068, -0.3243,  0.3621,  0.5422, -0.1780,  0.1915,
          0.5925, -0.5011, -0.1700, -0.0635, -0.2726,  0.1868, -0.2120, -0.5666,
         -0.4272,  0.2239,  0.1327, -0.0281, -0.6153, -0.3914, -0.1755, -0.4785,
          0.1942,  0.0203,  0.4845,  0.1425, -0.5285, -0.2402, -0.1520, -0.1014]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
475000 特征值优化 tensor(0.7063, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5828, -0.2057, -1.2433,  0.4518, -0.3097, -0.8438, -1.3625, -2.3000,
         -1.3760, -0.3922, -0.5914, -0.4267,  0.2024,  0.1512,  0.0240, -0.0310,
         -0.4016,  0.2451, -0.0118, -0.1203, -0.2219,  0.1596, -0.0171,  0.0531,
          0.0456,  0.0911, -0.2440,  0.0691,  0.0739,  0.1574, -0.2742, -0.0079,
          0.0168,  0.1541,  0.0488, -0.0948,  0.2590,  0.4660, -0.0768,  0.0056,
          0.4685, -0.3188,  0.2987, -0.3625,  0.3643,  0.5343, -0.1554,  0.1979,
          0.5966, -0.5014, -0.1693, -0.0620, -0.3409,  0.2233, -0.2001, -0.4993,
         -0.4115,  0.2179,  0.1046, -0.1021, -0.6243, -0.4158, -0.2012, -0.4903,
          0.2400,  0.0385,  0.4968,  0.1157, -0.4856, -0.2387, -0.1855, -0.0751]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
476000 特征值优化 tensor(0.6769, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4448, -0.4163, -1.2964,  0.4569, -0.3171, -0.8512, -1.3578, -2.3607,
         -1.3772, -0.3261, -0.6186, -0.3104,  0.1654,  0.1329, -0.0596,  0.0566,
         -0.4265,  0.2723,  0.0903, -0.0896, -0.1806,  0.1650,  0.0093,  0.0271,
         -0.0309,  0.0625, -0.2390,  0.0624,  0.0723,  0.1601, -0.2750,  0.0269,
          0.0412,  0.1559,  0.0182, -0.1202,  0.3028,  0.4554, -0.1010,  0.0226,
          0.4369, -0.2934,  0.3383, -0.4224,  0.4862,  0.5587, -0.2113,  0.2208,
          0.5335, -0.4690, -0.1640, -0.0707, -0.3701,  0.2293, -0.1742, -0.3382,
         -0.4418,  0.2329,  0.1158, -0.0656, -0.6598, -0.4166, -0.2285, -0.4945,
          0.1885,  0.0120,  0.5027,  0.1386, -0.4297, -0.2589, -0.2051, -0.0246]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
477000 特征值优化 tensor(0.6722, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4861, -0.3986, -1.3124,  0.4765, -0.3077, -0.8471, -1.3617, -2.4186,
         -1.3723, -0.4144, -0.6322, -0.2754,  0.1617,  0.1293,  0.0683, -0.0204,
         -0.3790,  0.3126,  0.0920, -0.1085, -0.1793,  0.1649,  0.0234,  0.0564,
          0.0503,  0.1065, -0.2227, -0.0239,  0.0695,  0.1600, -0.2763, -0.0095,
         -0.0107,  0.1557,  0.0308, -0.1267,  0.3155,  0.4521, -0.0784,  0.0170,
          0.4278, -0.3035,  0.3585, -0.4296,  0.4893,  0.5314, -0.1947,  0.2314,
          0.5317, -0.4706, -0.1717, -0.0730, -0.3796,  0.2289, -0.1693, -0.3414,
         -0.4407,  0.2299,  0.1214, -0.0947, -0.6261, -0.4423, -0.2076, -0.5041,
          0.2065,  0.0224,  0.5172,  0.1150, -0.4545, -0.2431, -0.2343, -0.0049]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
478000 特征值优化 tensor(0.6703, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4599e+00, -4.1249e-01, -1.2953e+00,  4.5042e-01, -3.3358e-01,
         -8.4196e-01, -1.3726e+00, -2.4671e+00, -1.3733e+00, -3.4038e-01,
         -6.4359e-01, -2.4990e-01,  1.6400e-01,  1.5758e-01, -2.8502e-02,
          4.5562e-02, -5.0032e-01,  1.5577e-01,  2.0086e-01, -9.2937e-02,
         -1.7637e-01,  1.6420e-01,  3.5230e-03,  4.1828e-02, -2.9968e-02,
          5.5699e-02, -2.4846e-01,  4.7138e-02,  7.1509e-02,  1.6109e-01,
         -2.7691e-01, -1.1229e-02, -1.8064e-02,  1.5620e-01,  2.1686e-02,
         -1.2098e-01,  3.4069e-01,  4.3603e-01, -1.0349e-01,  1.8741e-02,
          4.0693e-01, -2.7306e-01,  3.4084e-01, -4.2664e-01,  4.8160e-01,
          5.5291e-01, -2.0804e-01,  2.2047e-01,  5.3405e-01, -4.6992e-01,
         -1.5702e-01, -7.4166e-02, -3.4028e-01,  2.1407e-01, -1.6428e-01,
         -3.2023e-01, -4.4275e-01,  2.3134e-01,  1.2834e-01, -8.3240e-02,
         -6.6301e-01, -4.0393e-01, -2.0690e-01, -5.3067e-01,  1.7940e-01,
          1.4731e-02,  4.9323e-01,  1.3665e-01, -4.4690e-01, -2.6924e-01,
         -2.0337e-01, -1.8609e-03]], device='cuda:0') tensor(0.2049, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
479000 特征值优化 tensor(0.6874, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4453, -0.4211, -1.2911,  0.4604, -0.3518, -0.8434, -1.4362, -2.4750,
         -1.3810, -0.4172, -0.6617, -0.2101,  0.1641,  0.1383,  0.0193,  0.0149,
         -0.3904,  0.2930,  0.0863, -0.1167, -0.1812,  0.1635, -0.0059,  0.0535,
          0.0273,  0.0826, -0.1806, -0.0237,  0.0764,  0.1591, -0.2733,  0.0027,
          0.0074,  0.1547,  0.0203, -0.1289,  0.3397,  0.4560, -0.0859,  0.0180,
          0.4281, -0.2773,  0.3767, -0.4672,  0.4981,  0.5022, -0.1792,  0.2245,
          0.5300, -0.4633, -0.1717, -0.0670, -0.3293,  0.2215, -0.1410, -0.3655,
         -0.4400,  0.2288,  0.1275, -0.1042, -0.6182, -0.4454, -0.2336, -0.5191,
          0.2047,  0.0057,  0.5065,  0.1100, -0.5491, -0.2217, -0.2152,  0.0174]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
480000 特征值优化 tensor(0.6600, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4746e+00, -3.9774e-01, -1.2978e+00,  4.7518e-01, -4.5764e-01,
         -8.4771e-01, -1.4471e+00, -2.5653e+00, -1.3532e+00, -5.9127e-01,
         -6.6958e-01, -5.3688e-02,  1.5830e-01,  1.5332e-01,  3.6218e-02,
          2.0139e-03, -3.2231e-01,  3.3961e-01,  1.0667e-01, -1.4087e-01,
         -1.7857e-01,  1.6351e-01,  1.7303e-02,  4.7372e-02,  6.6491e-02,
          1.1423e-01, -1.7952e-01, -7.5846e-02,  6.8645e-02,  1.6101e-01,
         -2.9817e-01, -4.5061e-02, -6.0028e-02,  1.5742e-01,  6.2255e-02,
         -7.7055e-02,  3.6494e-01,  4.6087e-01, -3.6294e-02, -1.9556e-02,
          4.2255e-01, -2.7133e-01,  3.8472e-01, -5.1429e-01,  5.3929e-01,
          4.4901e-01, -1.5235e-01,  2.2329e-01,  5.4004e-01, -4.7636e-01,
         -1.6868e-01, -7.3773e-02, -3.6473e-01,  2.1264e-01, -2.2308e-01,
         -4.3637e-01, -4.5624e-01,  2.3935e-01,  8.9045e-02, -2.8752e-04,
         -6.5905e-01, -4.5678e-01, -2.0517e-01, -5.3004e-01,  2.4506e-01,
          3.9469e-02,  5.0494e-01,  4.9448e-02, -4.9074e-01, -2.5089e-01,
         -2.0927e-01,  2.0014e-02]], device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
481000 特征值优化 tensor(0.6425, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4554, -0.3851, -1.3492,  0.4236, -0.5195, -0.8617, -1.3960, -2.6341,
         -1.2608, -0.5185, -0.7804, -0.2264,  0.1573,  0.1472,  0.0387,  0.1570,
         -0.2965,  0.2202,  0.1448, -0.1606, -0.1774,  0.1667, -0.0932,  0.0421,
          0.0164,  0.1797, -0.3634, -0.1201,  0.0638,  0.1662, -0.3137,  0.0137,
          0.0271,  0.1582,  0.0710, -0.0948,  0.4877,  0.4271, -0.0776, -0.0503,
          0.2997, -0.2291,  0.3493, -0.4898,  0.5569,  0.4461, -0.1557,  0.2463,
          0.5290, -0.4878, -0.1412, -0.0867, -0.3294,  0.1761, -0.2084, -0.4530,
         -0.4371,  0.2318,  0.0886, -0.0044, -0.6169, -0.4234, -0.1995, -0.5576,
          0.2657,  0.0842,  0.5029,  0.0930, -0.5324, -0.2704, -0.1927, -0.0077]],
       device='cuda:0') tensor(0.2034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
482000 特征值优化 tensor(0.6266, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5083, -0.4094, -1.3859,  0.4681, -0.6178, -0.8514, -1.3567, -2.5218,
         -1.3820, -0.6469, -0.9373, -0.1524,  0.1581,  0.1590,  0.0571,  0.1793,
         -0.3990,  0.1990,  0.1252, -0.1692, -0.1799,  0.1683, -0.1451,  0.0210,
          0.0604,  0.1401, -0.3361, -0.1196,  0.0620,  0.1662, -0.3402,  0.0144,
          0.0404,  0.1592,  0.0850, -0.0953,  0.6583,  0.4852, -0.0573, -0.0532,
          0.1680, -0.2413,  0.3898, -0.4998,  0.5509,  0.4171, -0.1323,  0.2672,
          0.5234, -0.4961, -0.1648, -0.0828, -0.3234,  0.1435, -0.2051, -0.5446,
         -0.4456,  0.2340,  0.0874,  0.0309, -0.6942, -0.3569, -0.1735, -0.5108,
          0.2850,  0.0836,  0.5216,  0.0756, -0.5136, -0.3562, -0.1979,  0.0147]],
       device='cuda:0') tensor(0.2055, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
483000 特征值优化 tensor(0.6273, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5077e+00, -4.2002e-01, -1.3833e+00,  4.6990e-01, -6.5821e-01,
         -8.6801e-01, -1.3670e+00, -2.5127e+00, -1.3830e+00, -6.3978e-01,
         -9.6361e-01, -1.5084e-01,  1.5937e-01,  1.7823e-01,  5.9318e-03,
          1.8561e-01, -3.9647e-01,  2.2522e-01,  1.3159e-01, -1.6807e-01,
         -1.7923e-01,  1.6840e-01, -1.4587e-01,  1.4600e-02,  7.3725e-02,
          1.3914e-01, -3.3902e-01, -1.2029e-01,  6.3461e-02,  1.6544e-01,
         -3.5080e-01, -5.8199e-03,  1.9246e-02,  1.5864e-01,  9.0411e-02,
         -8.8978e-02,  6.7314e-01,  4.8591e-01, -6.2683e-02, -5.0576e-02,
          1.6068e-01, -2.3160e-01,  3.9029e-01, -5.0046e-01,  5.4875e-01,
          4.2709e-01, -1.3746e-01,  2.6602e-01,  5.2525e-01, -4.9315e-01,
         -1.6623e-01, -8.3260e-02, -3.4967e-01,  1.4557e-01, -2.2761e-01,
         -5.4907e-01, -4.3945e-01,  2.3419e-01,  9.9785e-02,  2.2548e-04,
         -7.3731e-01, -3.6578e-01, -1.8981e-01, -5.0280e-01,  2.8149e-01,
          8.8385e-02,  5.1921e-01,  8.3593e-02, -4.3702e-01, -3.6823e-01,
         -1.7794e-01,  8.5634e-03]], device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
484000 特征值优化 tensor(0.6343, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4811, -0.4184, -1.3676,  0.4620, -0.6592, -0.8616, -1.3735, -2.4868,
         -1.3462, -0.6077, -0.9965, -0.1730,  0.1588,  0.1589,  0.0488,  0.1932,
         -0.3404,  0.2291,  0.1260, -0.1681, -0.1791,  0.1679, -0.1484,  0.0107,
          0.0658,  0.1105, -0.3384, -0.0687,  0.0644,  0.1647, -0.3509,  0.0027,
          0.0168,  0.1582,  0.0811, -0.0993,  0.6825,  0.4941, -0.0653, -0.0487,
          0.1625, -0.2356,  0.3746, -0.4978,  0.5532,  0.4234, -0.1349,  0.2575,
          0.5263, -0.4901, -0.1646, -0.0813, -0.3412,  0.1429, -0.2161, -0.5537,
         -0.4411,  0.2340,  0.0911,  0.0172, -0.6744, -0.4106, -0.2038, -0.5104,
          0.2741,  0.0803,  0.5115,  0.0875, -0.5151, -0.3315, -0.1913,  0.0127]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
485000 特征值优化 tensor(0.6286, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4961, -0.3896, -1.3666,  0.4417, -0.6583, -0.8688, -1.3696, -2.5252,
         -1.3342, -0.6212, -1.0074, -0.1982,  0.1593,  0.1243,  0.1060,  0.2945,
         -0.2469,  0.3027,  0.0705, -0.1743, -0.1786,  0.1689, -0.1255,  0.0201,
         -0.0464,  0.1117, -0.4101,  0.0286,  0.0628,  0.1662, -0.3508,  0.0265,
          0.0441,  0.1588,  0.0758, -0.1129,  0.6864,  0.4870, -0.0671, -0.0526,
          0.1624, -0.2341,  0.3850, -0.5049,  0.5480,  0.4016, -0.1291,  0.2578,
          0.5233, -0.4958, -0.1512, -0.0871, -0.3250,  0.1335, -0.2204, -0.5562,
         -0.4389,  0.2341,  0.0906,  0.0260, -0.6864, -0.4306, -0.1948, -0.5176,
          0.2911,  0.0782,  0.5135,  0.0879, -0.5229, -0.3051, -0.1992,  0.0094]],
       device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
486000 特征值优化 tensor(0.6321, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4757, -0.3988, -1.3616,  0.4454, -0.5793, -0.8651, -1.3914, -2.5043,
         -1.3112, -0.6046, -1.0446, -0.1859,  0.1587,  0.1354,  0.0525,  0.2691,
         -0.2627,  0.2865,  0.0786, -0.1727, -0.1798,  0.1679, -0.1196,  0.0217,
         -0.0365,  0.0928, -0.4048,  0.0243,  0.0626,  0.1665, -0.3391,  0.0277,
          0.0478,  0.1584,  0.0687, -0.1180,  0.6938,  0.4978, -0.0661, -0.0503,
          0.1664, -0.2341,  0.3746, -0.5004,  0.5492,  0.4074, -0.1306,  0.2546,
          0.5227, -0.4931, -0.1559, -0.0815, -0.3388,  0.1459, -0.2064, -0.5456,
         -0.4433,  0.2357,  0.0883,  0.0296, -0.6549, -0.4460, -0.2258, -0.5134,
          0.2871,  0.0681,  0.5079,  0.0882, -0.5443, -0.3045, -0.2035,  0.0176]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
487000 特征值优化 tensor(0.6339, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4668e+00, -4.0761e-01, -1.3455e+00,  4.4940e-01, -6.4685e-01,
         -8.6579e-01, -1.3978e+00, -2.5345e+00, -1.3770e+00, -6.4842e-01,
         -1.0346e+00, -1.9225e-01,  1.5856e-01,  1.3243e-01,  8.6110e-02,
          2.5687e-01, -2.9750e-01,  2.6689e-01,  1.1235e-01, -1.7234e-01,
         -1.7855e-01,  1.6831e-01, -1.0747e-01, -1.7042e-02, -1.3974e-02,
          1.0958e-01, -3.8250e-01, -5.6269e-04,  6.3005e-02,  1.6495e-01,
         -3.4836e-01,  1.0850e-02,  3.1297e-02,  1.5822e-01,  7.9870e-02,
         -1.0175e-01,  6.8908e-01,  4.9168e-01, -6.2775e-02, -5.0463e-02,
          1.6786e-01, -2.3772e-01,  3.6938e-01, -5.0129e-01,  5.4878e-01,
          4.1272e-01, -1.3117e-01,  2.4767e-01,  5.2610e-01, -4.9139e-01,
         -1.5900e-01, -8.2533e-02, -3.3612e-01,  1.4260e-01, -2.2320e-01,
         -5.4842e-01, -4.3929e-01,  2.3366e-01,  8.5495e-02,  3.2493e-02,
         -6.9835e-01, -4.2064e-01, -1.8581e-01, -5.2917e-01,  2.9906e-01,
          7.5518e-02,  5.2411e-01,  8.3687e-02, -4.7399e-01, -3.3437e-01,
         -1.8684e-01,  1.4398e-02]], device='cuda:0') tensor(0.2049, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
488000 特征值优化 tensor(0.6377, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4977, -0.3999, -1.3530,  0.4696, -0.6202, -0.8623, -1.4109, -2.5244,
         -1.3689, -0.6309, -1.0189, -0.1877,  0.1589,  0.1214,  0.0907,  0.2125,
         -0.3485,  0.2527,  0.0739, -0.1697, -0.1789,  0.1662, -0.1452,  0.0105,
          0.0671,  0.1204, -0.3335, -0.0702,  0.0684,  0.1631, -0.3423,  0.0069,
          0.0222,  0.1583,  0.0778, -0.1027,  0.6839,  0.5021, -0.0618, -0.0456,
          0.1723, -0.2394,  0.3846, -0.4995,  0.5499,  0.4137, -0.1333,  0.2480,
          0.5317, -0.4848, -0.1653, -0.0799, -0.3397,  0.1497, -0.2080, -0.5469,
         -0.4399,  0.2329,  0.0909,  0.0143, -0.6617, -0.4074, -0.1980, -0.5161,
          0.2845,  0.0716,  0.5250,  0.0894, -0.5178, -0.3461, -0.1839,  0.0182]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
489000 特征值优化 tensor(0.6330, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4798, -0.3859, -1.3525,  0.4392, -0.6711, -0.8647, -1.3997, -2.5236,
         -1.3772, -0.6431, -1.0465, -0.1584,  0.1583,  0.1583,  0.0186,  0.2661,
         -0.2627,  0.2909,  0.0801, -0.1755, -0.1793,  0.1687, -0.1297,  0.0333,
         -0.0177,  0.1124, -0.3763, -0.0073,  0.0636,  0.1652, -0.3619,  0.0197,
          0.0402,  0.1582,  0.0764, -0.1043,  0.6963,  0.4968, -0.0589, -0.0387,
          0.1625, -0.2419,  0.3761, -0.5017,  0.5500,  0.3957, -0.1269,  0.2510,
          0.5234, -0.4922, -0.1533, -0.0831, -0.3500,  0.1285, -0.2302, -0.5547,
         -0.4389,  0.2336,  0.0864,  0.0348, -0.6716, -0.4398, -0.2007, -0.5187,
          0.2708,  0.0701,  0.5167,  0.0904, -0.4934, -0.3219, -0.1792,  0.0211]],
       device='cuda:0') tensor(0.2038, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
490000 特征值优化 tensor(0.6356, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5044e+00, -3.8616e-01, -1.3431e+00,  4.6067e-01, -6.8620e-01,
         -8.6810e-01, -1.4153e+00, -2.5478e+00, -1.4136e+00, -7.0127e-01,
         -1.0061e+00, -1.2422e-01,  1.5940e-01,  1.0700e-01,  1.0289e-01,
          2.1095e-01, -3.8633e-01,  2.3474e-01,  7.8276e-02, -1.6956e-01,
         -1.7855e-01,  1.6565e-01, -1.1928e-01, -6.5151e-03,  6.8993e-02,
          1.4475e-01, -3.1075e-01, -1.3617e-01,  6.8548e-02,  1.6372e-01,
         -3.6272e-01,  1.2236e-03,  3.0896e-02,  1.5806e-01,  8.6220e-02,
         -9.4184e-02,  6.8533e-01,  4.9647e-01, -4.8203e-02, -4.5046e-02,
          1.7264e-01, -2.4473e-01,  3.8827e-01, -5.0092e-01,  5.4839e-01,
          4.0919e-01, -1.3621e-01,  2.4401e-01,  5.3350e-01, -4.8394e-01,
         -1.6154e-01, -8.0779e-02, -3.5759e-01,  1.3428e-01, -2.4200e-01,
         -5.5781e-01, -4.3648e-01,  2.3266e-01,  8.5970e-02,  3.7268e-02,
         -7.3953e-01, -3.8376e-01, -1.9054e-01, -5.2512e-01,  2.8143e-01,
          7.4235e-02,  5.3579e-01,  6.4252e-02, -4.3661e-01, -3.7457e-01,
         -1.8885e-01,  2.6509e-02]], device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
491000 特征值优化 tensor(0.6323, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4799, -0.3925, -1.3585,  0.4411, -0.6610, -0.8678, -1.4129, -2.5177,
         -1.3855, -0.6142, -1.0463, -0.1611,  0.1583,  0.1499,  0.0222,  0.2863,
         -0.2627,  0.2839,  0.0723, -0.1760, -0.1799,  0.1692, -0.1264,  0.0259,
         -0.0224,  0.1164, -0.3906,  0.0075,  0.0633,  0.1653, -0.3597,  0.0239,
          0.0436,  0.1579,  0.0836, -0.1016,  0.6983,  0.5025, -0.0631, -0.0397,
          0.1681, -0.2334,  0.3753, -0.5002,  0.5504,  0.3985, -0.1272,  0.2546,
          0.5232, -0.4930, -0.1546, -0.0834, -0.3449,  0.1281, -0.2272, -0.5552,
         -0.4324,  0.2308,  0.0913,  0.0121, -0.6712, -0.4377, -0.2085, -0.5233,
          0.2499,  0.0913,  0.5105,  0.1036, -0.5128, -0.3256, -0.1638,  0.0119]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
492000 特征值优化 tensor(0.6336, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5141, -0.4023, -1.3755,  0.4645, -0.6679, -0.8665, -1.4276, -2.5439,
         -1.3513, -0.6670, -1.0141, -0.1576,  0.1587,  0.1064,  0.1081,  0.2233,
         -0.3875,  0.2429,  0.0836, -0.1698, -0.1790,  0.1682, -0.1176, -0.0123,
          0.0632,  0.1480, -0.3204, -0.1300,  0.0636,  0.1655, -0.3574, -0.0039,
          0.0275,  0.1586,  0.0805, -0.0994,  0.6882,  0.5004, -0.0538, -0.0542,
          0.1714, -0.2412,  0.3920, -0.5001,  0.5503,  0.4155, -0.1345,  0.2622,
          0.5252, -0.4921, -0.1656, -0.0825, -0.3571,  0.1389, -0.2336, -0.5513,
         -0.4374,  0.2327,  0.0856,  0.0283, -0.7258, -0.3848, -0.1971, -0.5184,
          0.2869,  0.0813,  0.5382,  0.0629, -0.4414, -0.3762, -0.2068,  0.0200]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
493000 特征值优化 tensor(0.6299, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4958, -0.3977, -1.3676,  0.4463, -0.6735, -0.8643, -1.4208, -2.5447,
         -1.3608, -0.6171, -1.0841, -0.1424,  0.1591,  0.1496,  0.0226,  0.2861,
         -0.2240,  0.3154,  0.0911, -0.1712, -0.1790,  0.1694, -0.1210,  0.0293,
         -0.0278,  0.1143, -0.3934,  0.0138,  0.0626,  0.1660, -0.3619,  0.0160,
          0.0392,  0.1585,  0.0799, -0.0984,  0.6885,  0.4677, -0.0643, -0.0419,
          0.1194, -0.2266,  0.3840, -0.5015,  0.5484,  0.4109, -0.1335,  0.2598,
          0.5222, -0.4957, -0.1567, -0.0854, -0.3495,  0.1303, -0.2562, -0.5899,
         -0.4372,  0.2324,  0.0973, -0.0115, -0.6559, -0.4573, -0.2215, -0.5130,
          0.2513,  0.0932,  0.5170,  0.0949, -0.5305, -0.3276, -0.1660,  0.0141]],
       device='cuda:0') tensor(0.2037, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
494000 特征值优化 tensor(0.6337, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4763e+00, -3.9332e-01, -1.3504e+00,  4.3825e-01, -6.5501e-01,
         -8.6528e-01, -1.4362e+00, -2.5808e+00, -1.4050e+00, -6.5269e-01,
         -1.0781e+00, -1.2816e-01,  1.5958e-01,  1.6385e-01,  1.8492e-02,
          2.5924e-01, -2.7090e-01,  3.0978e-01,  8.1714e-02, -1.6950e-01,
         -1.7924e-01,  1.6832e-01, -1.2165e-01,  2.9338e-02, -1.9761e-02,
          1.1560e-01, -3.8275e-01, -2.3980e-03,  6.3563e-02,  1.6488e-01,
         -3.5604e-01,  1.8709e-02,  3.4492e-02,  1.5838e-01,  8.1793e-02,
         -9.8602e-02,  6.7416e-01,  4.5853e-01, -5.9182e-02, -4.2698e-02,
          1.2149e-01, -2.2972e-01,  3.7506e-01, -4.9968e-01,  5.4798e-01,
          4.1250e-01, -1.3680e-01,  2.5008e-01,  5.2495e-01, -4.9179e-01,
         -1.5389e-01, -8.2577e-02, -3.4466e-01,  1.3290e-01, -2.5079e-01,
         -5.7778e-01, -4.3622e-01,  2.3232e-01,  9.1995e-02,  7.4729e-03,
         -7.0192e-01, -4.2743e-01, -1.8493e-01, -5.3809e-01,  2.6768e-01,
          8.6136e-02,  5.2123e-01,  8.8407e-02, -4.8200e-01, -3.4678e-01,
         -1.6884e-01,  1.9575e-02]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
495000 特征值优化 tensor(0.6341, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5176, -0.4012, -1.3714,  0.4625, -0.6458, -0.8659, -1.4485, -2.6099,
         -1.3665, -0.6885, -1.0481, -0.1270,  0.1598,  0.1008,  0.1024,  0.2114,
         -0.3798,  0.2558,  0.0976, -0.1688, -0.1783,  0.1680, -0.1168, -0.0140,
          0.0633,  0.1480, -0.3122, -0.1328,  0.0654,  0.1651, -0.3518,  0.0047,
          0.0133,  0.1579,  0.0742, -0.1079,  0.6772,  0.4794, -0.0498, -0.0480,
          0.1473, -0.2401,  0.3954, -0.5011,  0.5477,  0.4172, -0.1369,  0.2596,
          0.5277, -0.4887, -0.1618, -0.0842, -0.3631,  0.1478, -0.2421, -0.5610,
         -0.4375,  0.2323,  0.0856,  0.0314, -0.7180, -0.3973, -0.1665, -0.5415,
          0.2898,  0.0679,  0.5478,  0.0580, -0.4477, -0.3878, -0.2126,  0.0378]],
       device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
496000 特征值优化 tensor(0.6436, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4757, -0.4079, -1.3591,  0.4478, -0.6274, -0.8621, -1.5007, -2.5805,
         -1.3663, -0.6412, -1.1307, -0.1282,  0.1589,  0.1167,  0.1018,  0.2069,
         -0.3147,  0.2807,  0.1016, -0.1667, -0.1798,  0.1665, -0.1201, -0.0116,
          0.0409,  0.1361, -0.3466, -0.0239,  0.0671,  0.1648, -0.3474, -0.0063,
          0.0246,  0.1576,  0.0749, -0.1074,  0.6952,  0.4832, -0.0567, -0.0401,
          0.1266, -0.2327,  0.3717, -0.4972,  0.5529,  0.4192, -0.1352,  0.2515,
          0.5313, -0.4853, -0.1546, -0.0847, -0.3382,  0.1410, -0.2353, -0.5688,
         -0.4380,  0.2322,  0.0881,  0.0283, -0.6703, -0.4350, -0.1962, -0.5382,
          0.2568,  0.0723,  0.5170,  0.0808, -0.4977, -0.3724, -0.1828,  0.0301]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
497000 特征值优化 tensor(0.6331, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4692, -0.4010, -1.3530,  0.4400, -0.6408, -0.8643, -1.5024, -2.6239,
         -1.3900, -0.6473, -1.1411, -0.1322,  0.1595,  0.1630,  0.0147,  0.2593,
         -0.2757,  0.3088,  0.0888, -0.1710, -0.1795,  0.1692, -0.1246,  0.0374,
         -0.0284,  0.1183, -0.3892, -0.0094,  0.0637,  0.1650, -0.3521,  0.0199,
          0.0272,  0.1582,  0.0811, -0.0965,  0.6941,  0.4728, -0.0598, -0.0424,
          0.1279, -0.2295,  0.3718, -0.4992,  0.5490,  0.4116, -0.1336,  0.2518,
          0.5237, -0.4919, -0.1547, -0.0826, -0.3450,  0.1385, -0.2506, -0.5758,
         -0.4375,  0.2328,  0.0914,  0.0068, -0.6966, -0.4507, -0.1978, -0.5484,
          0.2610,  0.0873,  0.5222,  0.0865, -0.4813, -0.3598, -0.1697,  0.0174]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
498000 特征值优化 tensor(0.6668, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5012, -0.4230, -1.3598,  0.4457, -0.6342, -0.8645, -1.5445, -2.6255,
         -1.3587, -0.6667, -1.1187, -0.1391,  0.1602,  0.1335,  0.0733,  0.2158,
         -0.3607,  0.2757,  0.1225, -0.1708, -0.1802,  0.1680, -0.1056, -0.0110,
          0.0537,  0.1465, -0.3409, -0.1074,  0.0656,  0.1672, -0.3526, -0.0054,
          0.0199,  0.1568,  0.0865, -0.0938,  0.6889,  0.4853, -0.0569, -0.0497,
          0.1618, -0.2329,  0.3854, -0.5036,  0.5478,  0.4223, -0.1326,  0.2591,
          0.5226, -0.4910, -0.1680, -0.0831, -0.3493,  0.1420, -0.2588, -0.5710,
         -0.4378,  0.2302,  0.0916,  0.0235, -0.7460, -0.3906, -0.1567, -0.5700,
          0.2847,  0.0676,  0.5362,  0.0684, -0.4429, -0.3903, -0.2006,  0.0360]],
       device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
499000 特征值优化 tensor(0.6325, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5202e+00, -4.0273e-01, -1.3731e+00,  4.6961e-01, -6.5700e-01,
         -8.6923e-01, -1.5245e+00, -2.6647e+00, -1.3600e+00, -6.8065e-01,
         -1.0909e+00, -1.1853e-01,  1.5976e-01,  9.9745e-02,  1.0067e-01,
          2.1836e-01, -3.8602e-01,  2.5726e-01,  9.6395e-02, -1.6877e-01,
         -1.7819e-01,  1.6748e-01, -1.1608e-01, -1.5127e-02,  6.4677e-02,
          1.4547e-01, -3.1624e-01, -1.3758e-01,  6.5668e-02,  1.6454e-01,
         -3.5523e-01, -1.1888e-03,  1.7795e-02,  1.5814e-01,  7.3378e-02,
         -1.1224e-01,  6.9919e-01,  4.9784e-01, -5.1059e-02, -4.6682e-02,
          1.6134e-01, -2.4131e-01,  3.9675e-01, -5.0069e-01,  5.4720e-01,
          4.1874e-01, -1.3690e-01,  2.5988e-01,  5.2792e-01, -4.8946e-01,
         -1.6532e-01, -8.2820e-02, -3.6309e-01,  1.4425e-01, -2.5304e-01,
         -5.6993e-01, -4.3396e-01,  2.3107e-01,  8.8081e-02,  3.0694e-02,
         -7.3755e-01, -4.0579e-01, -1.7163e-01, -5.5093e-01,  2.7706e-01,
          6.5611e-02,  5.3822e-01,  6.6622e-02, -4.3346e-01, -4.0836e-01,
         -2.1174e-01,  4.4525e-02]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
500000 特征值优化 tensor(0.6352, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5094, -0.4014, -1.3651,  0.4630, -0.6274, -0.8691, -1.5473, -2.6461,
         -1.3514, -0.6619, -1.1209, -0.1328,  0.1594,  0.1054,  0.1083,  0.2161,
         -0.3565,  0.2702,  0.0903, -0.1690, -0.1789,  0.1672, -0.1289, -0.0162,
          0.0540,  0.1287, -0.3206, -0.0893,  0.0662,  0.1642, -0.3469,  0.0101,
          0.0189,  0.1579,  0.0781, -0.1082,  0.7100,  0.5045, -0.0550, -0.0482,
          0.1590, -0.2376,  0.3903, -0.5001,  0.5494,  0.4170, -0.1358,  0.2555,
          0.5292, -0.4872, -0.1628, -0.0831, -0.3519,  0.1486, -0.2377, -0.5685,
         -0.4323,  0.2314,  0.0822,  0.0356, -0.6973, -0.4299, -0.1797, -0.5512,
          0.2708,  0.0736,  0.5310,  0.0708, -0.4628, -0.3972, -0.2043,  0.0370]],
       device='cuda:0') tensor(0.2058, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
501000 特征值优化 tensor(0.6479, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4706, -0.3978, -1.3505,  0.4453, -0.6217, -0.8638, -1.5837, -2.6166,
         -1.3206, -0.6072, -1.1810, -0.1469,  0.1583,  0.1202,  0.0964,  0.2266,
         -0.2992,  0.2815,  0.1062, -0.1666, -0.1803,  0.1652, -0.1222, -0.0120,
          0.0355,  0.1374, -0.3510, -0.0097,  0.0690,  0.1631, -0.3446,  0.0041,
          0.0316,  0.1575,  0.0658, -0.1070,  0.7129,  0.4996, -0.0620, -0.0414,
          0.1378, -0.2281,  0.3672, -0.4965,  0.5541,  0.4151, -0.1354,  0.2483,
          0.5325, -0.4804, -0.1534, -0.0812, -0.3277,  0.1407, -0.2363, -0.5711,
         -0.4367,  0.2330,  0.0807,  0.0253, -0.6453, -0.4616, -0.2100, -0.5499,
          0.2433,  0.0714,  0.5064,  0.0872, -0.5171, -0.3733, -0.1785,  0.0252]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
502000 特征值优化 tensor(0.6318, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4684, -0.4017, -1.3545,  0.4389, -0.6304, -0.8646, -1.5699, -2.6527,
         -1.3621, -0.6273, -1.1880, -0.1469,  0.1597,  0.1591,  0.0300,  0.2724,
         -0.2590,  0.3235,  0.0909, -0.1706, -0.1797,  0.1693, -0.1277,  0.0319,
         -0.0299,  0.1088, -0.3913,  0.0058,  0.0638,  0.1655, -0.3502,  0.0194,
          0.0261,  0.1580,  0.0793, -0.1017,  0.7158,  0.4810, -0.0646, -0.0461,
          0.1244, -0.2263,  0.3716, -0.4984,  0.5488,  0.4131, -0.1341,  0.2530,
          0.5233, -0.4928, -0.1533, -0.0833, -0.3447,  0.1398, -0.2592, -0.5880,
         -0.4351,  0.2320,  0.0911,  0.0064, -0.6795, -0.4811, -0.2143, -0.5479,
          0.2525,  0.0949,  0.5151,  0.0937, -0.4993, -0.3588, -0.1675,  0.0147]],
       device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
503000 特征值优化 tensor(0.6339, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4668, -0.4013, -1.3531,  0.4398, -0.6340, -0.8646, -1.5755, -2.6714,
         -1.3819, -0.6519, -1.1696, -0.1396,  0.1592,  0.1611,  0.0289,  0.2551,
         -0.2803,  0.3117,  0.0855, -0.1707, -0.1804,  0.1689, -0.1269,  0.0331,
         -0.0241,  0.1116, -0.3878, -0.0070,  0.0635,  0.1655, -0.3516,  0.0164,
          0.0229,  0.1581,  0.0812, -0.0970,  0.7130,  0.4852, -0.0609, -0.0442,
          0.1367, -0.2289,  0.3694, -0.4987,  0.5505,  0.4101, -0.1331,  0.2521,
          0.5244, -0.4921, -0.1544, -0.0821, -0.3472,  0.1391, -0.2584, -0.5827,
         -0.4370,  0.2328,  0.0916,  0.0096, -0.6952, -0.4686, -0.1951, -0.5623,
          0.2598,  0.0868,  0.5227,  0.0867, -0.4839, -0.3672, -0.1673,  0.0183]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
504000 特征值优化 tensor(0.6565, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4867e+00, -4.2435e-01, -1.3390e+00,  4.4796e-01, -6.3448e-01,
         -8.6320e-01, -1.6049e+00, -2.6814e+00, -1.3797e+00, -6.8266e-01,
         -1.1324e+00, -1.3076e-01,  1.5952e-01,  1.4504e-01,  5.8387e-02,
          2.1828e-01, -3.4549e-01,  2.7125e-01,  1.2635e-01, -1.7337e-01,
         -1.7969e-01,  1.6733e-01, -1.0172e-01, -5.3359e-03,  4.5184e-02,
          1.3460e-01, -3.4109e-01, -8.6906e-02,  6.6789e-02,  1.6627e-01,
         -3.5238e-01, -5.9585e-04,  1.7990e-02,  1.5637e-01,  7.7589e-02,
         -9.7387e-02,  7.0093e-01,  5.0042e-01, -5.3358e-02, -4.4295e-02,
          1.7647e-01, -2.3663e-01,  3.8278e-01, -5.0123e-01,  5.4910e-01,
          4.2290e-01, -1.3382e-01,  2.4719e-01,  5.2711e-01, -4.8807e-01,
         -1.6906e-01, -8.0080e-02, -3.4437e-01,  1.3690e-01, -2.5059e-01,
         -5.7657e-01, -4.4057e-01,  2.3280e-01,  9.2004e-02,  2.6908e-02,
         -7.0131e-01, -4.2905e-01, -1.7052e-01, -5.7817e-01,  2.7978e-01,
          6.6673e-02,  5.4055e-01,  6.7844e-02, -4.5687e-01, -3.9241e-01,
         -1.8915e-01,  3.0192e-02]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
505000 特征值优化 tensor(0.6340, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5148, -0.3987, -1.3626,  0.4677, -0.6401, -0.8681, -1.5874, -2.7053,
         -1.3500, -0.6855, -1.1180, -0.1342,  0.1598,  0.1012,  0.1062,  0.2138,
         -0.3750,  0.2547,  0.0923, -0.1687, -0.1786,  0.1671, -0.1166, -0.0149,
          0.0631,  0.1349, -0.3156, -0.1237,  0.0670,  0.1643, -0.3509,  0.0040,
          0.0238,  0.1581,  0.0722, -0.1106,  0.7162,  0.5120, -0.0500, -0.0461,
          0.1741, -0.2408,  0.3940, -0.5006,  0.5481,  0.4158, -0.1367,  0.2538,
          0.5293, -0.4877, -0.1646, -0.0824, -0.3583,  0.1463, -0.2487, -0.5668,
         -0.4355,  0.2317,  0.0871,  0.0311, -0.7187, -0.4327, -0.1687, -0.5703,
          0.2757,  0.0639,  0.5418,  0.0634, -0.4507, -0.4082, -0.2050,  0.0425]],
       device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
506000 特征值优化 tensor(0.6366, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5002, -0.4020, -1.3487,  0.4650, -0.6378, -0.8659, -1.6178, -2.6908,
         -1.3399, -0.6711, -1.1613, -0.1429,  0.1597,  0.1079,  0.1097,  0.2141,
         -0.3609,  0.2748,  0.0959, -0.1695, -0.1786,  0.1661, -0.1177, -0.0106,
          0.0521,  0.1155, -0.3159, -0.0758,  0.0679,  0.1634, -0.3491,  0.0042,
          0.0139,  0.1579,  0.0712, -0.1180,  0.7255,  0.5108, -0.0554, -0.0466,
          0.1594, -0.2365,  0.3864, -0.5013,  0.5481,  0.4157, -0.1356,  0.2478,
          0.5322, -0.4849, -0.1649, -0.0810, -0.3533,  0.1470, -0.2463, -0.5771,
         -0.4327,  0.2306,  0.0828,  0.0350, -0.6951, -0.4487, -0.1794, -0.5631,
          0.2743,  0.0656,  0.5380,  0.0725, -0.4601, -0.4054, -0.2063,  0.0433]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
507000 特征值优化 tensor(0.6376, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4991, -0.3994, -1.3588,  0.4552, -0.6252, -0.8689, -1.6291, -2.6977,
         -1.3490, -0.6660, -1.1794, -0.1378,  0.1596,  0.1092,  0.1024,  0.2158,
         -0.3561,  0.2834,  0.0907, -0.1690, -0.1785,  0.1670, -0.1298, -0.0161,
          0.0516,  0.1222, -0.3229, -0.0749,  0.0672,  0.1643, -0.3466,  0.0043,
          0.0231,  0.1579,  0.0776, -0.1098,  0.7276,  0.5094, -0.0539, -0.0447,
          0.1562, -0.2375,  0.3854, -0.4996,  0.5495,  0.4154, -0.1350,  0.2527,
          0.5306, -0.4858, -0.1594, -0.0827, -0.3498,  0.1470, -0.2466, -0.5819,
         -0.4311,  0.2301,  0.0824,  0.0382, -0.6889, -0.4599, -0.1850, -0.5657,
          0.2583,  0.0716,  0.5296,  0.0740, -0.4811, -0.3945, -0.1928,  0.0394]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
508000 特征值优化 tensor(0.6324, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4716e+00, -4.0321e-01, -1.3573e+00,  4.3991e-01, -6.3646e-01,
         -8.6542e-01, -1.6431e+00, -2.7144e+00, -1.3683e+00, -6.4677e-01,
         -1.2140e+00, -1.4515e-01,  1.5943e-01,  1.5159e-01,  2.7966e-02,
          2.7025e-01, -2.6365e-01,  3.2265e-01,  9.1565e-02, -1.7069e-01,
         -1.7937e-01,  1.6965e-01, -1.2279e-01,  3.1519e-02, -2.7157e-02,
          1.1245e-01, -3.8634e-01, -2.0679e-03,  6.2959e-02,  1.6547e-01,
         -3.5167e-01,  1.1304e-02,  4.0815e-02,  1.5836e-01,  8.0246e-02,
         -9.9217e-02,  7.3415e-01,  4.9703e-01, -6.1408e-02, -4.3940e-02,
          1.3966e-01, -2.2951e-01,  3.7286e-01, -4.9957e-01,  5.4865e-01,
          4.1272e-01, -1.3325e-01,  2.5419e-01,  5.2353e-01, -4.9301e-01,
         -1.5370e-01, -8.3533e-02, -3.4406e-01,  1.3674e-01, -2.6227e-01,
         -5.8631e-01, -4.3685e-01,  2.3241e-01,  9.1540e-02,  1.1393e-02,
         -6.9215e-01, -4.9270e-01, -2.1123e-01, -5.6392e-01,  2.5051e-01,
          8.9301e-02,  5.1955e-01,  9.0217e-02, -4.9796e-01, -3.7200e-01,
         -1.6190e-01,  1.6431e-02]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
509000 特征值优化 tensor(0.6421, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4708, -0.4097, -1.3312,  0.4519, -0.6311, -0.8599, -1.6633, -2.7329,
         -1.3913, -0.6912, -1.1836, -0.1364,  0.1595,  0.1646,  0.0270,  0.2317,
         -0.3332,  0.2840,  0.1139, -0.1679, -0.1789,  0.1661, -0.1124,  0.0094,
          0.0053,  0.1092, -0.3565, -0.0466,  0.0685,  0.1637, -0.3489,  0.0095,
          0.0190,  0.1576,  0.0794, -0.0939,  0.7183,  0.5037, -0.0538, -0.0454,
          0.1709, -0.2354,  0.3723, -0.4992,  0.5481,  0.4232, -0.1382,  0.2388,
          0.5322, -0.4855, -0.1562, -0.0806, -0.3421,  0.1404, -0.2603, -0.5812,
         -0.4433,  0.2340,  0.0905,  0.0268, -0.7106, -0.4577, -0.1775, -0.5881,
          0.2797,  0.0726,  0.5375,  0.0712, -0.4461, -0.3989, -0.1766,  0.0258]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
510000 特征值优化 tensor(0.6336, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5151e+00, -3.9891e-01, -1.3601e+00,  4.6646e-01, -6.7298e-01,
         -8.6519e-01, -1.6599e+00, -2.7626e+00, -1.3578e+00, -6.9719e-01,
         -1.1526e+00, -1.3142e-01,  1.5965e-01,  9.9856e-02,  1.0717e-01,
          2.0804e-01, -3.9595e-01,  2.5486e-01,  1.0354e-01, -1.6855e-01,
         -1.7853e-01,  1.6698e-01, -1.1322e-01, -1.2232e-02,  6.3251e-02,
          1.3827e-01, -3.1100e-01, -1.2060e-01,  6.5881e-02,  1.6454e-01,
         -3.5975e-01,  1.2813e-03,  1.5516e-02,  1.5788e-01,  7.1695e-02,
         -1.1168e-01,  7.3175e-01,  5.2057e-01, -4.9525e-02, -4.4279e-02,
          1.7593e-01, -2.4156e-01,  3.9383e-01, -5.0068e-01,  5.4821e-01,
          4.1638e-01, -1.3745e-01,  2.5314e-01,  5.3026e-01, -4.8636e-01,
         -1.6481e-01, -8.2517e-02, -3.6498e-01,  1.3999e-01, -2.6905e-01,
         -5.7849e-01, -4.3685e-01,  2.3168e-01,  8.5014e-02,  3.3402e-02,
         -7.4424e-01, -4.3731e-01, -1.6948e-01, -5.7970e-01,  2.7560e-01,
          6.2784e-02,  5.4634e-01,  6.3264e-02, -4.2676e-01, -4.3166e-01,
         -2.0331e-01,  4.4618e-02]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
511000 特征值优化 tensor(0.6357, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5049, -0.3999, -1.3619,  0.4580, -0.6395, -0.8672, -1.6825, -2.7458,
         -1.3365, -0.6722, -1.1947, -0.1354,  0.1593,  0.1075,  0.1057,  0.2178,
         -0.3696,  0.2777,  0.0926, -0.1692, -0.1784,  0.1669, -0.1276, -0.0152,
          0.0551,  0.1224, -0.3166, -0.0899,  0.0668,  0.1644, -0.3514,  0.0073,
          0.0197,  0.1581,  0.0764, -0.1090,  0.7407,  0.5214, -0.0539, -0.0457,
          0.1694, -0.2382,  0.3889, -0.4999,  0.5478,  0.4167, -0.1368,  0.2534,
          0.5295, -0.4857, -0.1607, -0.0826, -0.3564,  0.1450, -0.2545, -0.5836,
         -0.4335,  0.2312,  0.0809,  0.0372, -0.6985, -0.4680, -0.1791, -0.5778,
          0.2589,  0.0716,  0.5338,  0.0708, -0.4662, -0.4100, -0.1984,  0.0382]],
       device='cuda:0') tensor(0.2038, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
512000 特征值优化 tensor(0.6314, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4718, -0.4146, -1.3659,  0.4452, -0.6333, -0.8648, -1.6965, -2.7334,
         -1.3563, -0.6292, -1.2604, -0.1453,  0.1596,  0.1578,  0.0298,  0.2972,
         -0.2573,  0.3305,  0.0968, -0.1706, -0.1801,  0.1702, -0.1244,  0.0367,
         -0.0368,  0.1128, -0.3993,  0.0116,  0.0631,  0.1657, -0.3517,  0.0354,
          0.0425,  0.1583,  0.0791, -0.1008,  0.7565,  0.5130, -0.0631, -0.0410,
          0.1383, -0.2268,  0.3729, -0.4981,  0.5500,  0.4174, -0.1335,  0.2586,
          0.5221, -0.4931, -0.1574, -0.0847, -0.3399,  0.1349, -0.2600, -0.5844,
         -0.4358,  0.2321,  0.0909,  0.0079, -0.6682, -0.5205, -0.2171, -0.5678,
          0.2375,  0.0928,  0.5139,  0.0961, -0.5181, -0.3680, -0.1582,  0.0147]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
513000 特征值优化 tensor(0.6329, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4684, -0.4038, -1.3538,  0.4383, -0.6266, -0.8646, -1.7079, -2.7594,
         -1.3534, -0.6362, -1.2461, -0.1520,  0.1597,  0.1549,  0.0270,  0.2610,
         -0.2811,  0.3225,  0.0964, -0.1707, -0.1799,  0.1687, -0.1263,  0.0306,
         -0.0274,  0.1050, -0.3919,  0.0033,  0.0637,  0.1649, -0.3492,  0.0182,
          0.0350,  0.1581,  0.0796, -0.0990,  0.7481,  0.5070, -0.0627, -0.0440,
          0.1440, -0.2269,  0.3712, -0.4986,  0.5489,  0.4134, -0.1346,  0.2520,
          0.5233, -0.4920, -0.1541, -0.0833, -0.3447,  0.1400, -0.2656, -0.5874,
         -0.4358,  0.2324,  0.0912,  0.0078, -0.6881, -0.5080, -0.2082, -0.5761,
          0.2450,  0.0907,  0.5183,  0.0909, -0.4953, -0.3803, -0.1605,  0.0153]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
514000 特征值优化 tensor(0.6388, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4627, -0.4026, -1.3258,  0.4529, -0.6396, -0.8607, -1.7198, -2.7682,
         -1.3692, -0.6742, -1.2222, -0.1436,  0.1591,  0.1617,  0.0129,  0.2411,
         -0.3275,  0.2962,  0.1036, -0.1689, -0.1792,  0.1662, -0.1242,  0.0228,
         -0.0078,  0.0909, -0.3692, -0.0081,  0.0690,  0.1623, -0.3530,  0.0097,
          0.0247,  0.1580,  0.0798, -0.0949,  0.7421,  0.5123, -0.0571, -0.0463,
          0.1648, -0.2337,  0.3680, -0.4981,  0.5488,  0.4150, -0.1376,  0.2348,
          0.5317, -0.4834, -0.1571, -0.0779, -0.3449,  0.1361, -0.2656, -0.5811,
         -0.4418,  0.2342,  0.0914,  0.0166, -0.7148, -0.4829, -0.1833, -0.5935,
          0.2668,  0.0770,  0.5318,  0.0751, -0.4572, -0.3966, -0.1743,  0.0236]],
       device='cuda:0') tensor(0.2044, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
515000 特征值优化 tensor(0.6331, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5184, -0.4052, -1.3793,  0.4644, -0.6369, -0.8669, -1.7273, -2.7898,
         -1.3303, -0.6888, -1.1887, -0.1551,  0.1598,  0.1032,  0.0997,  0.2298,
         -0.3994,  0.2692,  0.0942, -0.1688, -0.1780,  0.1690, -0.1158, -0.0151,
          0.0645,  0.1397, -0.3229, -0.1325,  0.0635,  0.1654, -0.3494, -0.0038,
          0.0159,  0.1583,  0.0754, -0.1083,  0.7473,  0.5291, -0.0519, -0.0495,
          0.1789, -0.2398,  0.3962, -0.5008,  0.5473,  0.4202, -0.1368,  0.2652,
          0.5256, -0.4931, -0.1643, -0.0847, -0.3571,  0.1471, -0.2613, -0.5757,
         -0.4362,  0.2325,  0.0859,  0.0302, -0.7293, -0.4563, -0.1760, -0.5830,
          0.2711,  0.0705,  0.5472,  0.0626, -0.4401, -0.4295, -0.2004,  0.0370]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
516000 特征值优化 tensor(0.6350, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5072e+00, -4.0672e-01, -1.3681e+00,  4.6277e-01, -6.4193e-01,
         -8.6872e-01, -1.7389e+00, -2.7860e+00, -1.3202e+00, -6.7888e-01,
         -1.2059e+00, -1.4738e-01,  1.5953e-01,  1.0826e-01,  1.0073e-01,
          2.2282e-01, -3.8074e-01,  2.7955e-01,  9.3154e-02, -1.6925e-01,
         -1.7856e-01,  1.6741e-01, -1.2202e-01, -1.4652e-02,  5.7757e-02,
          1.2428e-01, -3.1793e-01, -1.0327e-01,  6.5750e-02,  1.6495e-01,
         -3.5086e-01,  7.8077e-04,  1.5780e-02,  1.5808e-01,  7.4539e-02,
         -1.1036e-01,  7.5068e-01,  5.2843e-01, -5.2989e-02, -4.5816e-02,
          1.7507e-01, -2.3865e-01,  3.8967e-01, -5.0093e-01,  5.4810e-01,
          4.1914e-01, -1.3625e-01,  2.5735e-01,  5.2861e-01, -4.8725e-01,
         -1.6264e-01, -8.3641e-02, -3.5475e-01,  1.4561e-01, -2.6365e-01,
         -5.8045e-01, -4.3352e-01,  2.3141e-01,  8.3433e-02,  3.4744e-02,
         -7.0545e-01, -4.7379e-01, -1.8206e-01, -5.8435e-01,  2.5410e-01,
          6.9731e-02,  5.3813e-01,  6.9548e-02, -4.5601e-01, -4.1965e-01,
         -1.9510e-01,  3.9298e-02]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
517000 特征值优化 tensor(0.6302, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4871, -0.3927, -1.3655,  0.4419, -0.6330, -0.8662, -1.7538, -2.7632,
         -1.3537, -0.6439, -1.2742, -0.1559,  0.1588,  0.1518,  0.0311,  0.3275,
         -0.2483,  0.3307,  0.0919, -0.1738, -0.1795,  0.1701, -0.1250,  0.0370,
         -0.0357,  0.1107, -0.3989,  0.0045,  0.0627,  0.1666, -0.3528,  0.0318,
          0.0441,  0.1581,  0.0796, -0.1026,  0.7693,  0.5194, -0.0628, -0.0412,
          0.1433, -0.2276,  0.3806, -0.5004,  0.5488,  0.4024, -0.1290,  0.2586,
          0.5217, -0.4942, -0.1538, -0.0848, -0.3454,  0.1361, -0.2627, -0.5895,
         -0.4341,  0.2317,  0.0912,  0.0085, -0.6598, -0.5350, -0.2178, -0.5730,
          0.2337,  0.0925,  0.5170,  0.0986, -0.5239, -0.3767, -0.1503,  0.0183]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
518000 特征值优化 tensor(0.6331, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4649e+00, -4.0395e-01, -1.3539e+00,  4.3882e-01, -6.3056e-01,
         -8.6420e-01, -1.7574e+00, -2.7876e+00, -1.3557e+00, -6.5720e-01,
         -1.2571e+00, -1.5669e-01,  1.5934e-01,  1.6397e-01,  2.5924e-02,
          2.6993e-01, -2.8330e-01,  3.2268e-01,  9.0896e-02, -1.7027e-01,
         -1.7997e-01,  1.6935e-01, -1.2585e-01,  3.3331e-02, -2.9128e-02,
          1.0749e-01, -3.9032e-01, -9.9485e-04,  6.3757e-02,  1.6489e-01,
         -3.5127e-01,  2.3331e-02,  2.2913e-02,  1.5791e-01,  7.9064e-02,
         -9.9194e-02,  7.5944e-01,  5.1402e-01, -6.0603e-02, -4.2021e-02,
          1.4824e-01, -2.2874e-01,  3.6986e-01, -4.9736e-01,  5.4986e-01,
          4.1260e-01, -1.3456e-01,  2.5274e-01,  5.2402e-01, -4.9219e-01,
         -1.5434e-01, -8.3027e-02, -3.4698e-01,  1.3876e-01, -2.7060e-01,
         -5.8920e-01, -4.3603e-01,  2.3289e-01,  9.1078e-02,  1.2201e-02,
         -6.8510e-01, -5.2123e-01, -2.0319e-01, -5.8741e-01,  2.4064e-01,
          8.6954e-02,  5.2293e-01,  9.0279e-02, -4.9537e-01, -3.8538e-01,
         -1.5236e-01,  1.7923e-02]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
519000 特征值优化 tensor(0.6377, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4635, -0.3989, -1.3302,  0.4499, -0.6242, -0.8627, -1.7721, -2.7980,
         -1.3501, -0.6830, -1.2375, -0.1565,  0.1595,  0.1579,  0.0250,  0.2451,
         -0.3283,  0.2982,  0.1004, -0.1688, -0.1784,  0.1669, -0.1258,  0.0298,
         -0.0128,  0.0911, -0.3684, -0.0204,  0.0683,  0.1630, -0.3490,  0.0088,
          0.0173,  0.1579,  0.0801, -0.0993,  0.7533,  0.5170, -0.0575, -0.0460,
          0.1673, -0.2346,  0.3685, -0.4999,  0.5481,  0.4163, -0.1369,  0.2366,
          0.5315, -0.4845, -0.1550, -0.0801, -0.3438,  0.1393, -0.2681, -0.5848,
         -0.4390,  0.2329,  0.0928,  0.0143, -0.7143, -0.4950, -0.1814, -0.6016,
          0.2568,  0.0769,  0.5348,  0.0780, -0.4599, -0.4009, -0.1686,  0.0274]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
520000 特征值优化 tensor(0.6320, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5183e+00, -4.0824e-01, -1.3778e+00,  4.6741e-01, -6.4051e-01,
         -8.6841e-01, -1.7752e+00, -2.8171e+00, -1.3215e+00, -6.9843e-01,
         -1.1937e+00, -1.6434e-01,  1.5961e-01,  9.8305e-02,  1.0696e-01,
          2.2149e-01, -4.0068e-01,  2.6140e-01,  1.0021e-01, -1.6898e-01,
         -1.7847e-01,  1.6835e-01, -1.1632e-01, -1.4410e-02,  6.4813e-02,
          1.3733e-01, -3.2527e-01, -1.2850e-01,  6.3962e-02,  1.6565e-01,
         -3.5101e-01,  2.3735e-03,  2.2393e-02,  1.5839e-01,  7.4270e-02,
         -1.0942e-01,  7.6251e-01,  5.3917e-01, -5.1149e-02, -4.7309e-02,
          1.8752e-01, -2.4113e-01,  3.9562e-01, -5.0021e-01,  5.4744e-01,
          4.1977e-01, -1.3606e-01,  2.6334e-01,  5.2590e-01, -4.9171e-01,
         -1.6458e-01, -8.4208e-02, -3.6300e-01,  1.4789e-01, -2.6999e-01,
         -5.7903e-01, -4.3500e-01,  2.3158e-01,  8.5329e-02,  3.0115e-02,
         -7.4777e-01, -4.6333e-01, -1.7683e-01, -5.9185e-01,  2.6147e-01,
          6.9706e-02,  5.4994e-01,  6.4582e-02, -4.2204e-01, -4.4120e-01,
         -1.9124e-01,  3.9685e-02]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
521000 特征值优化 tensor(11.0268, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1147,  1.4439, -1.8000, -0.5695, -0.9550, -1.3481, -1.3806, -0.2666,
         -0.2383, -0.5198,  0.4508, -0.9411,  0.1057,  0.7100,  1.1931, -0.3264,
         -0.0627,  0.3433,  0.8249, -0.7544,  0.1865,  0.8005, -0.3010, -0.0252,
          0.0123, -0.6240,  0.1564,  0.2152,  0.1106,  1.0041, -0.6912, -0.0713,
          0.4165, -0.0144, -0.2024,  0.8507,  0.3306, -0.9233, -1.1437,  1.1423,
          1.1008, -0.3871, -1.0231,  1.0590,  0.0069, -0.4281,  0.1631,  0.9136,
         -0.5545,  0.6121,  0.3265, -1.4428, -0.3372, -0.5462, -0.4003,  0.2972,
         -0.9528,  0.7338,  0.4289,  0.0618,  1.0883, -1.5042, -0.3316,  0.3460,
         -0.8043, -0.6371, -0.2010, -0.6117, -0.7348,  0.6541,  0.1810, -0.2364]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
522000 特征值优化 tensor(0.9072, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5041,  1.1343, -2.1983, -1.1648, -1.3447, -1.4020, -2.0292,  0.3674,
         -0.9628,  0.1796, -0.1311, -1.2970,  0.0663, -0.0474,  0.4305, -0.0562,
          0.0039, -0.2036,  0.0779, -0.0462,  0.0035,  0.4374, -0.2948, -0.1147,
         -0.0937, -0.0254, -0.0190,  0.0506,  0.0285,  0.4907, -0.2819, -0.0722,
          0.0211, -0.0157,  0.1996,  0.2425,  0.1986, -0.3826, -0.5391,  0.4195,
          0.4348, -0.1171, -0.4263,  0.7738, -0.4590, -0.3806,  0.0736,  0.4420,
         -0.6291,  0.3130, -0.1954, -0.5485,  0.7118, -0.0344, -0.3266,  0.0093,
         -0.3674,  0.4751,  0.3296, -0.1358,  0.3872, -0.5242,  0.1749,  0.1728,
         -0.8015, -0.2779,  0.3811, -0.0063, -0.9548,  0.0677, -0.1790, -0.1940]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
523000 特征值优化 tensor(0.7611, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.7334e-01,  1.1233e+00, -1.9882e+00, -1.3006e+00, -1.6265e+00,
         -1.5605e+00, -1.8456e+00,  2.8012e-01, -9.2108e-01,  1.1248e-01,
         -1.6538e-01, -1.1891e+00,  6.7124e-02, -9.5053e-02,  4.3427e-01,
         -3.8699e-02, -2.6604e-02, -2.2946e-01,  1.1010e-01, -9.0814e-03,
          2.5850e-04,  4.4375e-01, -2.7398e-01, -2.1248e-01,  7.4398e-02,
         -9.5457e-02, -9.5451e-02, -1.7115e-02,  8.1716e-02,  4.7291e-01,
         -2.7669e-01, -7.5664e-02,  1.0595e-02, -1.5574e-02,  7.7303e-02,
          2.0665e-01,  1.8269e-01, -3.4576e-01, -4.5582e-01,  4.0187e-01,
          3.5685e-01, -1.0906e-01, -3.9660e-01,  7.4016e-01, -4.8889e-01,
         -3.7937e-01,  7.8211e-02,  3.1445e-01, -5.0847e-01,  2.1904e-01,
         -3.6360e-01, -3.9378e-01,  9.0543e-01, -6.5557e-02, -3.1010e-01,
          1.0561e-01,  1.2785e-02,  3.0082e-01,  3.0129e-01, -5.6640e-02,
          2.6372e-01, -4.1549e-01,  6.4018e-02,  1.7283e-01, -6.7491e-01,
         -3.3799e-01,  1.8541e-01,  2.1885e-02, -7.9934e-01,  7.4924e-02,
         -1.5845e-01, -1.2600e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
524000 特征值优化 tensor(0.7165, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4845,  1.1147, -1.9177, -1.2480, -1.7595, -1.7243, -1.5486,  0.1361,
         -0.8937,  0.1235, -0.1652, -0.9128,  0.0645, -0.0783,  0.4940, -0.0667,
          0.0145, -0.1988,  0.1059, -0.0163, -0.0038,  0.4333, -0.2993, -0.1138,
          0.0850, -0.1337, -0.0365,  0.0673,  0.0742,  0.4611, -0.2776, -0.0733,
         -0.0078, -0.0121, -0.0043,  0.1968,  0.1258, -0.3099, -0.3469,  0.3648,
          0.3417, -0.1309, -0.3957,  0.7448, -0.5066, -0.3936,  0.0818,  0.2750,
         -0.4116,  0.1781, -0.4205, -0.3674,  0.9741, -0.0757, -0.2812,  0.1559,
          0.1005,  0.2834,  0.2893, -0.0479,  0.2313, -0.3286,  0.0375,  0.1455,
         -0.6356, -0.3638, -0.0104,  0.0108, -0.8025,  0.0945, -0.1443, -0.0497]],
       device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
525000 特征值优化 tensor(0.6988, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4981,  1.1014, -1.8962, -1.2067, -1.8727, -1.7208, -1.2924,  0.0061,
         -0.8110, -0.0135, -0.2019, -0.8974,  0.0654, -0.0605,  0.5382,  0.0513,
         -0.1031, -0.1990,  0.0756, -0.0113, -0.0041,  0.4217, -0.3313, -0.2153,
          0.1615, -0.0884, -0.0778, -0.0596,  0.0631,  0.4504, -0.2759, -0.0827,
          0.0544, -0.0149, -0.0260,  0.1829,  0.0864, -0.2841, -0.3240,  0.3317,
          0.3558, -0.1161, -0.3896,  0.7480, -0.5083, -0.3892,  0.0850,  0.2817,
         -0.3955,  0.1892, -0.4358, -0.3502,  1.0356, -0.0772, -0.2810,  0.1337,
          0.1129,  0.2808,  0.2748, -0.0265,  0.1937, -0.2489,  0.0494,  0.1197,
         -0.6437, -0.3287, -0.0024, -0.0033, -0.7921,  0.0603, -0.1032, -0.0511]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
526000 特征值优化 tensor(0.6912, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.8316e-01,  1.0580e+00, -1.8317e+00, -1.1792e+00, -1.8524e+00,
         -1.8072e+00, -1.1733e+00, -6.9896e-02, -7.0915e-01, -3.2208e-02,
         -4.2346e-01, -8.2352e-01,  6.1563e-02, -1.9974e-02,  5.4010e-01,
         -3.3121e-02, -1.6592e-02, -2.2781e-01,  1.1438e-01, -1.2962e-02,
         -8.2766e-03,  4.0969e-01, -2.4023e-01, -2.2443e-01,  1.2442e-01,
         -8.8436e-02, -4.3606e-02,  5.4561e-02,  5.1164e-02,  4.3847e-01,
         -2.6363e-01, -8.1110e-02,  6.1195e-02, -1.9381e-02, -2.3533e-02,
          1.8036e-01,  6.1192e-02, -2.7571e-01, -2.9400e-01,  3.2109e-01,
          3.7726e-01, -1.1500e-01, -4.0120e-01,  7.4578e-01, -5.2153e-01,
         -3.7749e-01,  8.0911e-02,  2.6122e-01, -3.7089e-01,  2.1579e-01,
         -4.2774e-01, -3.4696e-01,  1.0445e+00, -6.5942e-02, -2.8116e-01,
          1.2515e-01,  1.9520e-01,  2.2153e-01,  2.7331e-01, -2.8614e-02,
          1.5565e-01, -2.1526e-01,  5.9453e-02,  1.0504e-01, -6.6925e-01,
         -2.8569e-01, -2.9930e-02, -6.0491e-04, -6.9755e-01,  1.0865e-02,
         -1.4729e-01, -3.6570e-02]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
527000 特征值优化 tensor(0.6775, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4757,  1.0663, -1.7473, -1.1150, -1.8215, -1.8067, -0.9785, -0.1977,
         -0.6688, -0.0572, -0.6430, -0.8565,  0.0641, -0.0729,  0.5203,  0.0223,
         -0.0987, -0.2280,  0.1325, -0.0140, -0.0065,  0.3906, -0.3351, -0.1958,
          0.1461, -0.0240,  0.0042, -0.0706,  0.0542,  0.4194, -0.2748, -0.0824,
          0.0625, -0.0151, -0.0178,  0.1768,  0.0178, -0.2370, -0.2829,  0.3081,
          0.4387, -0.1070, -0.3966,  0.7451, -0.5182, -0.3763,  0.0854,  0.2448,
         -0.3580,  0.2628, -0.4067, -0.3414,  1.0013, -0.0753, -0.2621,  0.1850,
          0.2301,  0.2054,  0.2622, -0.0281,  0.0330, -0.2357,  0.1048,  0.1576,
         -0.6869, -0.2633, -0.0582,  0.0054, -0.5541, -0.0023, -0.1401, -0.0274]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
528000 特征值优化 tensor(0.6732, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.7649e-01,  1.0680e+00, -1.6617e+00, -1.0247e+00, -1.7619e+00,
         -1.8107e+00, -8.4097e-01, -2.8758e-01, -5.4198e-01, -1.6292e-01,
         -7.3111e-01, -8.6986e-01,  6.4070e-02, -1.0248e-01,  5.2920e-01,
         -1.8453e-02, -1.3646e-01, -2.3477e-01,  1.2144e-01, -1.7931e-02,
         -7.0298e-03,  3.6803e-01, -3.3320e-01, -1.8342e-01,  1.6327e-01,
          3.7240e-04,  1.3721e-02, -7.1364e-02,  5.4119e-02,  3.9656e-01,
         -2.7366e-01, -8.5177e-02,  6.4904e-02, -1.7418e-02, -4.4514e-02,
          1.5672e-01, -2.1442e-02, -2.0188e-01, -2.6818e-01,  2.9283e-01,
          4.5158e-01, -8.4915e-02, -3.9915e-01,  7.4915e-01, -5.2087e-01,
         -3.8562e-01,  8.9930e-02,  2.4859e-01, -3.4720e-01,  2.9498e-01,
         -4.0487e-01, -3.2009e-01,  9.6780e-01, -7.3505e-02, -2.5638e-01,
          2.1888e-01,  1.9319e-01,  2.2549e-01,  2.6475e-01, -1.3882e-02,
         -3.3169e-02, -2.0672e-01,  1.1129e-01,  1.4900e-01, -6.7378e-01,
         -2.1129e-01, -5.8103e-02,  3.2615e-03, -4.4994e-01, -2.1296e-02,
         -7.4976e-02, -7.2082e-02]], device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
529000 特征值优化 tensor(0.6653, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4874,  1.0536, -1.6255, -0.9939, -1.8140, -1.8270, -0.5490, -0.3696,
         -0.3841, -0.2000, -0.9483, -0.8057,  0.0619, -0.0567,  0.5092,  0.1256,
         -0.1960, -0.1494,  0.2262, -0.0173, -0.0100,  0.3607, -0.2560, -0.1467,
          0.1387, -0.0103,  0.0122,  0.0767,  0.0530,  0.3858, -0.2685, -0.0823,
          0.0582, -0.0214, -0.0511,  0.1534, -0.0825, -0.1356, -0.2081,  0.2749,
          0.4902, -0.0859, -0.4007,  0.7242, -0.5035, -0.3906,  0.0903,  0.2479,
         -0.3351,  0.2993, -0.4099, -0.3106,  1.0340, -0.0881, -0.2119,  0.2703,
          0.1776,  0.2333,  0.2539, -0.0063, -0.1936, -0.1350,  0.0824,  0.1343,
         -0.6588, -0.1717, -0.0769, -0.0167, -0.3121, -0.0744, -0.0829, -0.0544]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
530000 特征值优化 tensor(0.6605, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4657,  1.0716, -1.6159, -0.9713, -1.8001, -1.7993, -0.5055, -0.4920,
         -0.3762, -0.1961, -0.9579, -0.8512,  0.0663,  0.0391,  0.5306, -0.0515,
         -0.1534, -0.1763,  0.0928, -0.0161, -0.0059,  0.3513, -0.3414, -0.1754,
          0.1171, -0.0247,  0.0238, -0.0779,  0.0539,  0.3763, -0.2809, -0.0903,
          0.0596, -0.0218, -0.0565,  0.1382, -0.0757, -0.1262, -0.1934,  0.2606,
          0.4731, -0.0677, -0.4029,  0.7029, -0.4723, -0.3914,  0.0949,  0.2609,
         -0.3288,  0.3083, -0.4024, -0.3011,  0.9617, -0.0799, -0.2382,  0.2393,
          0.0986,  0.2806,  0.2622,  0.0145, -0.1392, -0.1613,  0.0873,  0.0841,
         -0.6246, -0.1599, -0.1037, -0.0264, -0.3326, -0.0575, -0.0146, -0.0839]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
531000 特征值优化 tensor(16.5054, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.2069e-01, -6.5453e-01,  7.9059e-01, -1.3273e+00, -2.0681e-02,
         -8.7182e-01,  9.0699e-02,  2.5388e-01,  1.2389e+00, -1.2049e+00,
         -1.4437e+00, -6.5647e-01,  4.2156e-01, -6.1271e-01, -4.3392e-01,
          6.0640e-01,  4.3903e-01, -4.7650e-02,  2.1449e+00, -1.1337e+00,
          2.7796e-01, -6.9800e-01,  6.3548e-01,  6.1934e-01,  3.2235e-01,
         -1.5500e+00,  2.9190e-01,  6.9688e-01, -4.3030e-01,  2.2566e+00,
         -1.4893e-02,  5.4297e-01, -4.1448e-02, -1.5207e-02,  1.8912e-01,
          1.4888e-01, -9.3581e-03, -6.3035e-03, -3.8600e-01, -2.6852e-01,
         -1.0218e-01, -2.6328e-01, -1.4313e+00,  2.9034e-01, -3.4625e-01,
          5.6057e-02, -5.9052e-01,  3.7828e-01,  2.2388e+00, -5.4902e-01,
         -9.8519e-02,  1.1896e+00, -6.7413e-01,  7.6200e-01,  9.5851e-02,
          1.8805e-01,  4.2897e-02,  6.6374e-03,  5.5950e-01, -1.6556e+00,
          8.8373e-01, -6.3222e-01,  9.0979e-04, -4.2265e-02, -5.7605e-02,
         -1.1759e+00, -2.0605e+00, -1.3091e+00,  2.5854e-02,  2.6813e-02,
         -3.3655e-01,  1.8930e+00]], device='cuda:0') tensor(0.2053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
532000 特征值优化 tensor(3.9057, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2835, -0.1245, -0.2405, -0.5723, -0.0826, -0.9369, -0.7345, -0.0239,
          0.2242, -0.3403, -2.4961, -1.5592,  0.1516, -0.1023,  0.0033,  0.0241,
          0.0185,  0.0113,  1.1609, -0.3578, -0.0025, -0.0986, -0.0082,  0.0218,
          0.1607, -0.4480, -0.1416,  0.1070, -0.0080,  1.2521, -0.0247,  0.0698,
         -0.0054, -0.0181, -0.0074, -0.0103, -0.0035, -0.0084, -0.0663, -0.0556,
         -0.1040, -0.0836, -0.5497,  0.5430,  0.0249,  0.1514, -0.2183, -0.6347,
          1.1677, -1.5430,  0.1805,  0.0645,  0.0696,  0.4032,  0.2182,  0.0217,
          0.0178,  0.0332, -0.0501, -1.0042,  0.1119, -0.0416, -0.0220, -0.0098,
         -0.3161, -0.1785, -1.1287, -0.3470,  0.4857,  0.0340, -1.2100,  1.0539]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
533000 特征值优化 tensor(0.6743, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3508e+00, -1.5331e-01, -9.7432e-01, -3.6252e-01, -5.6727e-01,
         -8.1550e-01, -6.4472e-01, -1.4981e-01,  1.3502e-01, -2.9711e-01,
         -2.9971e+00, -1.7411e+00,  1.5289e-01, -1.5157e-02,  2.9021e-01,
         -5.0472e-02,  4.2040e-02,  1.0699e-01,  6.6945e-01, -1.1253e-01,
          1.4136e-04,  9.0188e-02, -3.1112e-02,  1.3258e-01,  5.8751e-02,
         -1.2952e-01,  1.2279e-01, -2.5604e-02, -2.7976e-02,  7.1978e-01,
         -2.1638e-02,  1.4207e-02, -2.5104e-02, -1.2681e-02, -1.0761e-01,
         -6.7700e-02, -8.7404e-03, -1.6589e-03, -1.1478e-01, -1.3957e-03,
         -1.0195e-01,  1.1554e-01, -1.0649e-01,  3.1956e-01, -2.8065e-01,
          6.4780e-02, -1.5668e-01, -7.8997e-01,  8.4176e-01, -1.3895e+00,
         -9.9102e-02, -2.8686e-02,  6.7951e-01,  2.4869e-01,  2.9429e-01,
          4.8897e-02, -5.6675e-02,  5.3054e-02,  2.9063e-03, -4.6625e-01,
          4.6527e-02, -4.2310e-02, -9.9152e-02,  9.3646e-02, -8.7841e-02,
         -2.0898e-02, -8.8399e-01, -5.9236e-02,  8.3575e-01, -2.1216e-02,
         -1.3991e+00,  8.4842e-01]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
534000 特征值优化 tensor(0.5988, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4117e+00, -1.4250e-01, -1.0208e+00, -2.9887e-01, -5.7416e-01,
         -7.2445e-01, -6.8387e-01, -9.3068e-02,  4.0972e-01, -3.3357e-01,
         -2.8218e+00, -1.7910e+00,  1.5238e-01,  9.1353e-02,  2.9176e-01,
          6.3448e-02,  7.0757e-02,  1.7446e-01,  5.7488e-01, -1.1196e-01,
         -1.9069e-03,  8.3330e-02, -1.4159e-01,  1.4689e-01,  9.7650e-02,
         -1.0309e-01,  1.0965e-01, -5.3872e-02, -5.2091e-02,  7.1342e-01,
         -1.6292e-02, -1.6827e-02,  1.2541e-02, -1.5717e-04, -1.1612e-01,
          5.8827e-02, -2.1499e-02,  2.2174e-02, -1.1237e-01, -1.1385e-02,
         -9.7243e-02,  1.1434e-01, -1.1636e-01,  3.2620e-01, -2.6285e-01,
         -6.9003e-02, -7.8244e-02, -6.7892e-01,  6.8918e-01, -1.3074e+00,
         -1.4750e-01,  3.0683e-03,  6.7603e-01,  2.5368e-01,  2.6728e-01,
          1.4948e-01, -1.3666e-01,  1.0474e-01,  2.3123e-02, -3.1257e-01,
          4.3078e-02, -5.4562e-02, -4.4914e-02,  9.9935e-02, -1.5591e-01,
          1.3649e-03, -8.7125e-01, -1.6359e-02,  7.5899e-01, -8.0339e-03,
         -1.3921e+00,  8.2799e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
535000 特征值优化 tensor(0.5838, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4173e+00, -1.4389e-01, -1.0580e+00, -2.5601e-01, -5.6631e-01,
         -7.2444e-01, -7.2986e-01, -6.2542e-02,  5.7842e-01, -2.9467e-01,
         -2.5762e+00, -1.9238e+00,  1.5067e-01,  1.3477e-01,  3.1605e-01,
         -2.3270e-02, -9.0400e-02,  1.1502e-01,  5.4032e-01, -1.0532e-01,
          4.6076e-04,  6.6046e-02, -4.9426e-02,  1.6647e-01,  5.6222e-02,
         -5.9838e-02,  2.6821e-01,  5.0713e-03, -4.5551e-02,  7.2085e-01,
         -1.6554e-02, -6.7798e-04,  4.4394e-02, -1.5551e-03, -1.0590e-01,
          6.1110e-02, -3.4107e-02,  3.1793e-02, -1.3674e-01, -2.8813e-02,
         -8.1723e-02,  1.4345e-01, -1.1318e-01,  3.2050e-01, -2.5775e-01,
         -8.4928e-02, -6.8236e-02, -6.6644e-01,  6.2382e-01, -1.2557e+00,
         -1.3786e-01,  2.7637e-02,  6.7231e-01,  2.5394e-01,  2.3267e-01,
          1.6559e-01, -1.5719e-01,  1.1668e-01,  1.3998e-02, -3.2452e-01,
          9.7536e-02, -9.4249e-02,  1.1176e-02,  8.4378e-02, -1.9601e-01,
          3.0493e-02, -8.8323e-01,  2.5181e-02,  5.9425e-01,  4.0797e-02,
         -1.3685e+00,  8.1046e-01]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
536000 特征值优化 tensor(0.5802, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4143e+00, -1.5969e-01, -1.0813e+00, -1.4930e-01, -5.5474e-01,
         -7.2560e-01, -7.1048e-01, -3.9926e-02,  6.6884e-01, -3.4742e-01,
         -2.3679e+00, -2.0066e+00,  1.5448e-01,  1.3550e-01,  3.2866e-01,
         -2.8435e-02, -7.5127e-02,  9.4857e-02,  5.1412e-01, -1.0621e-01,
         -1.9267e-03,  3.5720e-02, -8.8034e-02,  1.7532e-01,  6.1862e-02,
         -6.6085e-02,  2.5382e-01, -1.3794e-02, -2.7733e-02,  7.2301e-01,
         -1.9275e-02, -1.0712e-02,  4.1064e-02, -1.9230e-03, -7.8045e-02,
          1.2669e-02, -2.7667e-02,  2.2633e-02, -1.2785e-01, -3.0333e-02,
         -8.9379e-02,  1.4009e-01, -1.1472e-01,  3.2330e-01, -2.5284e-01,
         -9.0581e-02, -6.7451e-02, -6.4485e-01,  6.0549e-01, -1.2664e+00,
         -1.2935e-01,  5.3977e-02,  6.6911e-01,  2.5703e-01,  2.5245e-01,
          1.3581e-01, -1.5300e-01,  1.1420e-01,  8.4627e-03, -2.9957e-01,
          4.8490e-02, -6.1370e-02, -8.1636e-02,  1.2111e-01, -2.1790e-01,
          4.1250e-02, -8.5672e-01,  3.9648e-02,  4.9178e-01,  2.9007e-02,
         -1.3658e+00,  8.1794e-01]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
537000 特征值优化 tensor(0.5777, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4261e+00, -1.5687e-01, -1.1289e+00, -1.2554e-01, -5.8273e-01,
         -7.0758e-01, -6.6309e-01,  2.7360e-03,  7.1542e-01, -3.6428e-01,
         -2.1187e+00, -2.0653e+00,  1.5459e-01,  1.2191e-01,  3.7346e-01,
         -4.7960e-02, -8.3023e-02,  1.1281e-01,  4.2956e-01, -1.0795e-01,
         -1.7102e-03,  2.9941e-02, -7.8443e-02,  1.8687e-01,  5.9434e-02,
         -7.1983e-02,  2.6309e-01, -1.0495e-02, -2.5289e-02,  7.3361e-01,
         -1.6952e-02, -6.6322e-03,  2.9454e-02, -1.3792e-03, -6.9970e-02,
         -6.0640e-03, -2.5456e-02,  1.6821e-02, -1.2846e-01, -3.0537e-02,
         -9.1234e-02,  1.4091e-01, -1.0611e-01,  3.1953e-01, -2.5890e-01,
         -9.2170e-02, -6.4160e-02, -6.4395e-01,  6.0885e-01, -1.2885e+00,
         -1.3089e-01,  5.8464e-02,  6.7021e-01,  2.5820e-01,  2.6648e-01,
          1.1227e-01, -1.5695e-01,  1.1268e-01,  1.2147e-02, -2.9683e-01,
          1.6823e-02, -4.7983e-02, -1.2697e-01,  1.2259e-01, -2.3603e-01,
          4.9332e-02, -8.4647e-01,  4.5305e-02,  3.7878e-01,  1.5865e-02,
         -1.3582e+00,  8.1904e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
538000 特征值优化 tensor(0.5793, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4255e+00, -1.5876e-01, -1.1514e+00, -8.0898e-02, -5.6100e-01,
         -7.0858e-01, -6.7237e-01,  1.3502e-02,  7.1507e-01, -3.8906e-01,
         -2.1120e+00, -2.0598e+00,  1.5479e-01,  1.2502e-01,  3.6886e-01,
         -5.2323e-02, -5.8466e-02,  1.0747e-01,  4.3738e-01, -1.0913e-01,
         -2.2633e-03,  1.7502e-02, -1.0298e-01,  1.7898e-01,  6.9656e-02,
         -7.2337e-02,  2.5113e-01, -2.9638e-02, -2.3554e-02,  7.4003e-01,
         -1.9439e-02, -4.3422e-03,  2.1840e-02, -1.9581e-03, -6.9718e-02,
         -5.3332e-03, -2.7097e-02,  1.8000e-02, -1.1554e-01, -2.1225e-02,
         -9.0756e-02,  1.2640e-01, -1.0764e-01,  3.2153e-01, -2.5967e-01,
         -8.5958e-02, -6.7713e-02, -6.4437e-01,  6.1116e-01, -1.3049e+00,
         -1.2982e-01,  7.4363e-02,  6.6546e-01,  2.6118e-01,  2.6246e-01,
          1.1420e-01, -1.6476e-01,  1.1690e-01,  4.6214e-03, -3.0021e-01,
          1.5004e-02, -4.5117e-02, -1.3422e-01,  1.2608e-01, -2.3347e-01,
          4.7189e-02, -8.3747e-01,  3.9495e-02,  3.7722e-01,  1.1828e-02,
         -1.3636e+00,  8.1928e-01]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
539000 特征值优化 tensor(0.5761, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4457e+00, -1.6963e-01, -1.2483e+00, -1.8497e-01, -5.6256e-01,
         -7.1206e-01, -6.3558e-01,  5.0967e-02,  7.4391e-01, -2.8139e-01,
         -2.1189e+00, -2.0798e+00,  1.5589e-01,  1.4791e-01,  3.5722e-01,
         -6.1115e-02, -8.5680e-02,  1.3136e-01,  4.4497e-01, -1.0681e-01,
         -1.2987e-03,  4.7410e-02, -1.0150e-01,  1.7777e-01,  6.6797e-02,
         -5.6331e-02,  3.1347e-01,  5.0388e-03, -2.6728e-02,  7.6173e-01,
         -1.8603e-02, -1.0799e-03,  1.6679e-02, -1.2175e-03, -8.1432e-02,
         -1.4722e-02, -2.4525e-02,  1.5888e-02, -1.3256e-01, -3.6393e-02,
         -9.3613e-02,  1.4309e-01, -9.9001e-02,  3.1638e-01, -2.5933e-01,
         -9.0681e-02, -6.1404e-02, -6.3414e-01,  6.0026e-01, -1.3406e+00,
         -1.3147e-01,  4.3323e-02,  6.6614e-01,  2.6031e-01,  2.6453e-01,
          1.1155e-01, -1.4793e-01,  1.0810e-01,  1.3252e-02, -2.8842e-01,
         -1.6202e-02, -3.1174e-02, -1.6059e-01,  1.3397e-01, -2.5090e-01,
          7.5320e-02, -8.8396e-01,  6.0441e-02,  3.9989e-01,  1.0997e-03,
         -1.3328e+00,  7.7821e-01]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
540000 特征值优化 tensor(0.5787, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4229e+00, -1.6914e-01, -1.2859e+00, -1.6833e-01, -5.6505e-01,
         -6.9726e-01, -6.6665e-01,  4.0101e-02,  7.5018e-01, -3.3937e-01,
         -2.1237e+00, -2.0976e+00,  1.5690e-01,  7.8120e-02,  3.8215e-01,
         -5.1482e-02, -6.1776e-02,  1.7405e-01,  4.2223e-01, -1.0680e-01,
         -5.0054e-03,  4.8269e-02, -1.0441e-01,  1.8079e-01,  5.8639e-02,
         -7.9885e-02,  2.3750e-01,  8.3520e-03, -1.8643e-02,  7.6439e-01,
         -2.1494e-02,  7.9831e-03, -5.5033e-04, -1.1881e-03, -7.9042e-02,
         -7.0349e-03, -2.9619e-02,  2.1070e-02, -1.2794e-01, -3.3202e-02,
         -8.9310e-02,  1.4010e-01, -1.0686e-01,  3.2411e-01, -2.5729e-01,
         -9.0526e-02, -6.5109e-02, -6.3012e-01,  5.9872e-01, -1.3588e+00,
         -1.3744e-01,  4.6144e-02,  6.7816e-01,  2.5981e-01,  2.5550e-01,
          1.1792e-01, -1.5797e-01,  1.1063e-01,  1.2970e-02, -2.8898e-01,
          2.2498e-03, -4.2651e-02, -1.4810e-01,  1.3436e-01, -2.4426e-01,
          6.0428e-02, -8.4128e-01,  4.6072e-02,  3.7479e-01,  1.7837e-02,
         -1.3179e+00,  7.9088e-01]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
541000 特征值优化 tensor(12.0688, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.7924, -1.3011,  2.1594, -0.3311, -0.0831,  0.2643, -0.7614, -0.6371,
         -0.0817, -0.0063, -0.9841,  0.2017, -0.2192, -0.2041, -1.2946,  0.8058,
         -1.0928,  0.1906,  0.2455, -0.5196,  0.4073,  1.1064,  0.1846,  1.2331,
         -0.0374,  0.0150,  0.6640, -1.0669,  1.1519,  0.0818, -1.5455,  0.2452,
          0.3608, -0.0180, -0.0125, -0.0216,  1.2162,  0.2620,  1.1132,  0.2659,
         -0.0708, -0.4078, -0.8705,  0.6109,  0.5293,  0.9815, -0.4973, -0.4893,
         -0.3584, -0.9690, -0.2586,  0.2665,  1.1919, -0.9590,  0.8252,  0.0387,
          0.3845, -0.4630, -0.4752,  0.6229, -1.1246, -0.2699,  0.4352,  0.1933,
         -0.0565,  0.5794, -0.0909, -0.0987,  0.8124,  0.1199, -1.5371, -0.0048]],
       device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
542000 特征值优化 tensor(1.4193, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.0879e-01, -8.1995e-01,  1.1558e+00, -1.2142e-01, -1.0589e+00,
         -7.2673e-01, -1.6061e+00, -3.7091e-01, -8.5577e-01,  3.1250e-01,
         -1.2482e+00, -7.6698e-01, -1.5455e-01,  3.9745e-02, -3.2399e-01,
          1.6644e-02, -3.9426e-02,  1.0903e-01,  2.7141e-03, -1.9576e-01,
          1.0165e-01,  2.6316e-01,  8.4624e-02,  2.8371e-01,  4.2255e-02,
         -2.1645e-02,  6.1494e-03, -2.1476e-01,  2.5471e-01,  3.3110e-02,
         -6.4327e-01, -1.1032e-03, -3.9515e-04,  3.0229e-02, -1.9305e-02,
          5.1048e-02,  3.4241e-01,  4.9406e-02,  4.2195e-01,  8.3793e-03,
         -1.7202e-01, -1.0205e-01, -7.6829e-01,  5.2123e-01,  4.6881e-01,
          1.1172e+00, -4.4334e-01, -1.0859e+00,  5.8787e-01, -3.1772e-02,
          3.6392e-04, -3.4271e-02,  2.2360e-01, -4.9795e-01,  5.4223e-01,
          1.0830e-01,  2.1605e-01, -2.3269e-02, -4.4591e-01,  3.2847e-01,
         -2.2638e-01, -6.1814e-02, -7.5716e-03, -5.4055e-02, -1.7059e-01,
          1.6886e-01, -1.9387e-01, -7.3067e-02,  4.9040e-01,  1.8266e-01,
         -3.8180e-01,  2.1581e-01]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
543000 特征值优化 tensor(0.7655, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.4310e-01, -9.3817e-01,  6.3101e-01, -1.4348e-01, -1.2048e+00,
         -1.0850e+00, -1.6528e+00, -5.4722e-01, -1.2211e+00,  3.9182e-01,
         -1.2150e+00, -1.4312e+00, -2.0491e-01, -1.9360e-02, -1.5118e-01,
         -3.3075e-04, -5.3510e-02,  1.7826e-01,  6.1843e-02, -3.9675e-01,
          1.6777e-01,  2.7230e-01,  9.7811e-02,  1.4715e-01, -3.9405e-02,
          1.4467e-01, -3.9461e-02, -1.5227e-01,  1.2339e-01,  3.3410e-02,
         -5.0082e-01,  1.4419e-02,  7.2371e-02, -1.0635e-02, -7.9742e-02,
          1.0817e-02,  2.5007e-01,  5.2442e-02,  3.2755e-01,  8.7283e-03,
         -1.1153e-01, -9.3305e-02, -6.8230e-01,  4.0387e-01,  3.0281e-01,
          9.0552e-01, -1.7603e-01, -8.8997e-01,  4.8526e-01, -1.1586e-01,
         -4.2968e-02, -9.5820e-03,  2.4999e-01, -2.9770e-01,  6.6422e-01,
          2.1968e-01,  2.1231e-01, -6.1004e-04, -5.0812e-01,  1.9046e-01,
         -1.7193e-01, -1.0534e-01, -2.0780e-01, -1.9102e-02,  2.1995e-01,
          7.5515e-02, -2.1123e-01, -4.2303e-02,  7.0910e-01,  1.3764e-01,
          4.0272e-02,  4.0849e-02]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
544000 特征值优化 tensor(0.7102, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.6314e-01, -1.0912e+00,  4.9288e-01, -2.5274e-01, -1.2120e+00,
         -1.1206e+00, -1.5540e+00, -6.5915e-01, -1.3200e+00,  6.9356e-01,
         -1.1611e+00, -1.5531e+00, -1.9505e-01, -3.9704e-02, -2.1229e-01,
          7.8409e-03, -1.1411e-01,  2.6361e-01,  2.4048e-02, -3.8953e-01,
          1.7165e-01,  2.8631e-01,  5.1850e-02,  7.5314e-02, -1.3921e-03,
          1.1834e-01, -3.5175e-03, -1.0563e-01,  9.1721e-02,  3.9997e-02,
         -4.7785e-01,  5.4467e-02,  7.2304e-02, -1.2762e-02, -8.7818e-02,
         -2.0850e-02,  2.2019e-01,  5.2242e-02,  3.3255e-01, -2.0241e-02,
         -1.2723e-01, -9.2170e-02, -5.0782e-01,  5.7241e-01,  5.0970e-02,
          6.1340e-01,  1.6345e-02, -7.7832e-01,  4.3029e-01, -1.8171e-01,
         -9.9363e-02,  2.4693e-02,  1.9536e-01, -2.4951e-01,  5.5394e-01,
          1.2104e-01,  2.0049e-01,  7.5351e-03, -5.0782e-01,  2.0664e-01,
         -1.4569e-01, -8.4164e-02, -1.8176e-01, -7.3289e-03,  2.8320e-01,
          4.4715e-02, -3.0819e-01,  4.9904e-02,  6.8550e-01,  1.3614e-01,
          5.2131e-02,  4.7178e-02]], device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
545000 特征值优化 tensor(0.6794, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7945, -1.3437,  0.3722, -0.2843, -1.1693, -1.1162, -1.5083, -0.6509,
         -1.3472,  0.9704, -1.1087, -1.6437, -0.1547, -0.1345, -0.2248, -0.0678,
         -0.1816,  0.1729, -0.0372, -0.3504,  0.1249,  0.2999,  0.0647,  0.0357,
          0.1679,  0.0487, -0.0053, -0.2512,  0.0970,  0.0535, -0.4690,  0.0635,
          0.0777, -0.0065, -0.0840, -0.0448,  0.1660,  0.0745,  0.3232,  0.0222,
         -0.0942, -0.0876, -0.4354,  0.5797,  0.0820,  0.4325,  0.0751, -0.7370,
          0.3708, -0.1864, -0.1420,  0.0267,  0.1429, -0.2014,  0.5446,  0.0910,
          0.1557,  0.0355, -0.4744,  0.1464, -0.1470, -0.0726, -0.1818, -0.0018,
          0.2883,  0.0292, -0.3738,  0.1442,  0.6857,  0.1465,  0.1050,  0.0252]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
546000 特征值优化 tensor(0.6697, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7831, -1.3605,  0.3043, -0.2606, -1.1736, -1.1860, -1.4543, -0.7130,
         -1.3361,  1.1113, -1.1505, -1.6779, -0.1524, -0.2651, -0.1494,  0.0230,
         -0.1027,  0.0317,  0.1124, -0.3485,  0.1198,  0.3061, -0.0812,  0.0948,
          0.1826,  0.0554, -0.0654, -0.3044,  0.1043,  0.0604, -0.4678,  0.0717,
          0.0745, -0.0108, -0.0846, -0.0494,  0.1623,  0.0787,  0.3000,  0.0509,
         -0.0941, -0.0616, -0.4367,  0.5734,  0.0936,  0.4197,  0.0760, -0.7069,
          0.3537, -0.2071, -0.1426,  0.0037,  0.1530, -0.2048,  0.5395,  0.0901,
          0.1756,  0.0463, -0.4965,  0.0353, -0.1762, -0.0369, -0.1525, -0.0243,
          0.2627, -0.0020, -0.3451,  0.1697,  0.7166,  0.1224,  0.1643,  0.0410]],
       device='cuda:0') tensor(0.2042, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
547000 特征值优化 tensor(0.6730, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8532, -1.3076,  0.2491, -0.3709, -1.1847, -1.1150, -1.3945, -0.4783,
         -1.3481,  1.0135, -1.0153, -1.7042, -0.1557, -0.1748, -0.2044,  0.0394,
         -0.0168,  0.1009, -0.0330, -0.3407,  0.1285,  0.3165,  0.0531,  0.0028,
          0.2765, -0.0375,  0.0363, -0.2956,  0.0791,  0.0693, -0.4806,  0.0377,
          0.0807, -0.0087, -0.0816, -0.0508,  0.1174,  0.0925,  0.3130,  0.0662,
         -0.0758, -0.0746, -0.4037,  0.5650,  0.0755,  0.4046,  0.0977, -0.6630,
          0.3128, -0.2464, -0.0973, -0.0251,  0.1408, -0.2166,  0.5420,  0.0976,
          0.1322,  0.0517, -0.5042,  0.0892, -0.2117, -0.0089, -0.2926,  0.0691,
          0.2526, -0.0058, -0.3823,  0.1574,  0.6396,  0.1841,  0.1658,  0.0561]],
       device='cuda:0') tensor(0.2029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
548000 特征值优化 tensor(0.6681, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8132, -1.2888,  0.2428, -0.3542, -1.2638, -1.1091, -1.3719, -0.4859,
         -1.3199,  1.0766, -1.0816, -1.6714, -0.1573, -0.1948, -0.1867, -0.0035,
         -0.0347, -0.1480, -0.0768, -0.3419,  0.1326,  0.3163, -0.0349,  0.0287,
          0.2342,  0.0206, -0.0642, -0.2936,  0.0881,  0.0690, -0.4989,  0.0566,
          0.0768, -0.0041, -0.0822, -0.0535,  0.1154,  0.0927,  0.3020,  0.0457,
         -0.0757, -0.0625, -0.4275,  0.5668,  0.0721,  0.4047,  0.0986, -0.6577,
          0.3154, -0.2488, -0.0916, -0.0325,  0.1423, -0.2347,  0.5538,  0.0994,
          0.1168,  0.0627, -0.4945,  0.0599, -0.2318,  0.0070, -0.2800,  0.0420,
          0.2680, -0.0033, -0.3577,  0.1761,  0.6839,  0.1605,  0.1523,  0.0435]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
549000 特征值优化 tensor(0.6677, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8227, -1.2450,  0.2433, -0.3378, -1.2930, -1.1133, -1.3127, -0.5109,
         -1.3648,  1.0602, -1.1609, -1.7109, -0.1528, -0.1477, -0.1842,  0.0695,
          0.0573, -0.1228, -0.0933, -0.3297,  0.1295,  0.3186,  0.0228,  0.0295,
          0.2271, -0.0346,  0.0095, -0.3425,  0.0842,  0.0741, -0.5114,  0.0036,
          0.1028, -0.0085, -0.0804, -0.0498,  0.1453,  0.0539,  0.3128,  0.0637,
         -0.1086, -0.0725, -0.4043,  0.5439,  0.0880,  0.3509,  0.1105, -0.6599,
          0.3087, -0.2467, -0.1108, -0.0370,  0.1483, -0.2574,  0.5726,  0.1220,
          0.1367,  0.0560, -0.4988,  0.0927, -0.2488,  0.0279, -0.2837,  0.0093,
          0.2631, -0.0104, -0.3938,  0.1620,  0.7019,  0.1362,  0.1650,  0.0618]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
550000 特征值优化 tensor(0.6727, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7659, -1.2199,  0.2611, -0.3254, -1.2856, -1.1040, -1.3052, -0.5335,
         -1.3454,  1.0461, -1.1810, -1.6851, -0.1521, -0.1761, -0.1787,  0.0557,
          0.0295, -0.1659, -0.0915, -0.3253,  0.1252,  0.3099, -0.0091,  0.0143,
          0.2253, -0.0207,  0.0195, -0.3366,  0.0809,  0.0626, -0.5098,  0.0115,
          0.1003, -0.0044, -0.0801, -0.0512,  0.1435,  0.0647,  0.3110,  0.0590,
         -0.1033, -0.0734, -0.4249,  0.5390,  0.0837,  0.3335,  0.1094, -0.6529,
          0.3120, -0.2342, -0.1041, -0.0215,  0.1495, -0.2547,  0.5809,  0.1239,
          0.1186,  0.0607, -0.4969,  0.0957, -0.2973,  0.0556, -0.2825,  0.0128,
          0.2640, -0.0033, -0.3959,  0.1667,  0.7078,  0.1284,  0.1544,  0.0534]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
551000 特征值优化 tensor(0.7025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.2677e-01, -1.1972e+00,  2.6034e-01, -3.1140e-01, -1.2943e+00,
         -1.0972e+00, -1.2985e+00, -5.4524e-01, -1.3371e+00,  1.0672e+00,
         -1.2098e+00, -1.6693e+00, -1.5300e-01, -1.3210e-01, -1.7817e-01,
         -4.1335e-03, -2.2208e-02, -1.1799e-01, -1.4612e-01, -3.3203e-01,
          1.2767e-01,  3.0749e-01, -8.6786e-02,  4.5757e-02,  1.9057e-01,
         -7.8942e-03, -4.6350e-02, -3.5922e-01,  7.8611e-02,  6.1987e-02,
         -5.0892e-01,  5.5296e-02,  8.0902e-02, -4.4846e-03, -8.2148e-02,
         -5.3460e-02,  1.3712e-01,  7.3043e-02,  3.0642e-01,  4.8312e-02,
         -9.4687e-02, -7.0145e-02, -4.5493e-01,  5.4438e-01,  9.1636e-02,
          3.2667e-01,  1.0877e-01, -6.5532e-01,  3.0968e-01, -2.2860e-01,
         -1.1501e-01, -1.7173e-02,  1.6504e-01, -2.6296e-01,  5.7464e-01,
          1.1664e-01,  1.1353e-01,  5.9560e-02, -5.0052e-01,  6.1376e-02,
         -3.0692e-01,  6.4759e-02, -2.7353e-01, -2.2011e-03,  2.6880e-01,
          3.3868e-04, -3.6600e-01,  1.6600e-01,  7.2921e-01,  1.2144e-01,
          1.5670e-01,  4.0854e-02]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
552000 特征值优化 tensor(0.6843, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.3801e-01, -1.1633e+00,  2.4202e-01, -3.1536e-01, -1.3222e+00,
         -1.1291e+00, -1.2698e+00, -5.0090e-01, -1.3330e+00,  1.0232e+00,
         -1.1935e+00, -1.6656e+00, -1.5356e-01, -1.7408e-01, -1.9160e-01,
          2.8193e-02,  6.2611e-02, -1.4145e-01, -8.9305e-02, -3.2980e-01,
          1.2549e-01,  3.0930e-01,  4.2915e-02,  1.7597e-02,  2.1259e-01,
         -6.1106e-03, -8.3367e-04, -3.3044e-01,  7.9725e-02,  6.4083e-02,
         -5.1328e-01,  2.0292e-02,  1.0052e-01, -6.9614e-03, -8.1527e-02,
         -5.1997e-02,  1.5476e-01,  5.6808e-02,  3.0977e-01,  5.1930e-02,
         -1.1835e-01, -7.5127e-02, -4.4349e-01,  5.4232e-01,  8.7703e-02,
          3.0729e-01,  1.0822e-01, -6.4450e-01,  3.1835e-01, -2.4514e-01,
         -1.0823e-01, -1.8027e-02,  1.4381e-01, -2.5056e-01,  5.8249e-01,
          1.3214e-01,  1.3828e-01,  4.3656e-02, -4.8813e-01,  8.0883e-02,
         -2.5757e-01,  3.7762e-02, -2.7060e-01,  5.6476e-03,  2.6593e-01,
          4.8593e-03, -3.7019e-01,  1.5985e-01,  6.7982e-01,  1.3451e-01,
          1.4405e-01,  4.8702e-02]], device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
553000 特征值优化 tensor(0.6728, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7474, -1.1723,  0.2327, -0.3254, -1.3300, -1.1088, -1.2793, -0.5300,
         -1.3409,  1.0243, -1.1985, -1.6695, -0.1522, -0.1999, -0.1826,  0.0523,
          0.0292, -0.1740, -0.0780, -0.3276,  0.1285,  0.3161,  0.0149, -0.0123,
          0.2301, -0.0442,  0.0517, -0.3447,  0.0812,  0.0690, -0.5161,  0.0173,
          0.1005, -0.0042, -0.0799, -0.0516,  0.1418,  0.0640,  0.3130,  0.0608,
         -0.1028, -0.0775, -0.4405,  0.5432,  0.0873,  0.3103,  0.1153, -0.6526,
          0.3114, -0.2443, -0.1120, -0.0296,  0.1492, -0.2581,  0.5802,  0.1233,
          0.1235,  0.0531, -0.4951,  0.1031, -0.2608,  0.0434, -0.2721,  0.0031,
          0.2600, -0.0035, -0.3894,  0.1606,  0.7118,  0.1272,  0.1462,  0.0588]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
554000 特征值优化 tensor(0.6714, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7420, -1.1897,  0.2602, -0.3108, -1.3024, -1.0978, -1.2133, -0.5269,
         -1.3377,  1.0766, -1.2933, -1.6546, -0.1508, -0.1487, -0.1766,  0.0111,
          0.0117, -0.1218, -0.1452, -0.3245,  0.1289,  0.3142, -0.0413,  0.0479,
          0.1708,  0.0109, -0.0260, -0.3673,  0.0837,  0.0671, -0.5121,  0.0390,
          0.0865, -0.0066, -0.0835, -0.0498,  0.1637,  0.0694,  0.3086,  0.0238,
         -0.1247, -0.0709, -0.4400,  0.5321,  0.0991,  0.3109,  0.1189, -0.6393,
          0.3108, -0.2386, -0.0787, -0.0335,  0.1766, -0.2708,  0.5949,  0.1133,
          0.1280,  0.0504, -0.4866,  0.0956, -0.3517,  0.1051, -0.2601, -0.0081,
          0.2945,  0.0146, -0.3585,  0.1674,  0.7204,  0.0975,  0.1093,  0.0356]],
       device='cuda:0') tensor(0.2049, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
555000 特征值优化 tensor(0.6829, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7659, -1.1601,  0.2463, -0.3113, -1.2358, -1.1284, -1.1823, -0.5043,
         -1.3493,  1.0306, -1.2927, -1.6831, -0.1513, -0.1711, -0.1852,  0.0092,
          0.0691, -0.1621, -0.0897, -0.3180,  0.1272,  0.3115,  0.0351,  0.0162,
          0.1962, -0.0088,  0.0037, -0.3387,  0.0812,  0.0671, -0.4926,  0.0062,
          0.1047, -0.0082, -0.0819, -0.0480,  0.1780,  0.0629,  0.3139,  0.0324,
         -0.1394, -0.0810, -0.4181,  0.5218,  0.0932,  0.2926,  0.1235, -0.6381,
          0.3180, -0.2438, -0.0875, -0.0240,  0.1410, -0.2276,  0.6053,  0.1343,
          0.1511,  0.0335, -0.4744,  0.1182, -0.3588,  0.1142, -0.2653,  0.0074,
          0.2982,  0.0165, -0.3725,  0.1521,  0.6969,  0.1009,  0.1198,  0.0412]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
556000 特征值优化 tensor(0.6819, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7591, -1.1977,  0.2691, -0.3056, -1.1513, -1.0991, -1.1809, -0.5326,
         -1.3292,  1.0697, -1.3034, -1.6577, -0.1504, -0.1614, -0.1192,  0.0370,
          0.0139, -0.1544, -0.0983, -0.3214,  0.1241,  0.3097, -0.0593,  0.0110,
          0.1814, -0.0326, -0.0075, -0.3444,  0.0749,  0.0624, -0.4709,  0.0210,
          0.0991, -0.0072, -0.0795, -0.0521,  0.1744,  0.0652,  0.3101,  0.0301,
         -0.1351, -0.0738, -0.4256,  0.5247,  0.0957,  0.3032,  0.1203, -0.6383,
          0.3116, -0.2379, -0.0946, -0.0196,  0.1628, -0.2175,  0.6001,  0.1203,
          0.1342,  0.0444, -0.4797,  0.1223, -0.4197,  0.1420, -0.2631,  0.0067,
          0.2877,  0.0166, -0.3865,  0.1680,  0.7140,  0.0981,  0.0992,  0.0379]],
       device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
557000 特征值优化 tensor(0.6749, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.7096e-01, -1.1738e+00,  2.5606e-01, -3.0618e-01, -1.1388e+00,
         -1.1031e+00, -1.1810e+00, -5.0335e-01, -1.3262e+00,  1.0542e+00,
         -1.3139e+00, -1.6610e+00, -1.5101e-01, -1.3473e-01, -1.7416e-01,
          2.0285e-02,  3.3744e-02, -1.5270e-01, -1.1733e-01, -3.1902e-01,
          1.3097e-01,  3.1283e-01, -2.3378e-02, -1.5088e-02,  1.7930e-01,
          1.2550e-02,  1.5744e-03, -3.4589e-01,  7.9743e-02,  6.6171e-02,
         -4.7172e-01,  1.6504e-02,  9.4493e-02, -7.2489e-03, -8.2914e-02,
         -5.1412e-02,  1.8296e-01,  6.1016e-02,  3.0971e-01,  2.1115e-02,
         -1.4548e-01, -7.2745e-02, -4.2277e-01,  5.2405e-01,  9.9227e-02,
          2.9216e-01,  1.3354e-01, -6.3604e-01,  3.1238e-01, -2.3925e-01,
         -8.6503e-02, -2.6500e-02,  1.2606e-01, -2.0381e-01,  6.0252e-01,
          1.3081e-01,  1.3334e-01,  4.4651e-02, -4.8097e-01,  1.0636e-01,
         -4.1459e-01,  1.4528e-01, -2.7650e-01,  2.3597e-02,  2.9348e-01,
          2.0574e-02, -3.6215e-01,  1.6287e-01,  7.2984e-01,  8.6261e-02,
          1.0909e-01,  3.1187e-02]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
558000 特征值优化 tensor(0.6825, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.6033e-01, -1.1930e+00,  2.5822e-01, -3.1922e-01, -1.0954e+00,
         -1.1094e+00, -1.1872e+00, -5.1620e-01, -1.3188e+00,  1.0809e+00,
         -1.3082e+00, -1.6698e+00, -1.4943e-01, -1.4865e-01, -1.2038e-01,
          3.2569e-02,  8.4357e-03, -1.5581e-01, -9.8257e-02, -3.2013e-01,
          1.2493e-01,  3.1333e-01, -5.9162e-02,  1.2710e-03,  1.8102e-01,
         -5.1218e-02, -2.1915e-02, -3.5161e-01,  7.7318e-02,  6.8375e-02,
         -4.5719e-01,  2.4341e-02,  9.3689e-02, -5.7689e-03, -7.8857e-02,
         -5.1708e-02,  1.7926e-01,  6.0865e-02,  3.0795e-01,  2.7844e-02,
         -1.4018e-01, -7.2086e-02, -4.2708e-01,  5.2216e-01,  9.9441e-02,
          2.9408e-01,  1.2777e-01, -6.3551e-01,  3.1245e-01, -2.4913e-01,
         -8.2107e-02, -2.6611e-02,  1.4252e-01, -1.9256e-01,  5.9990e-01,
          1.2151e-01,  1.4437e-01,  3.8643e-02, -4.7599e-01,  1.2635e-01,
         -4.3611e-01,  1.4867e-01, -2.6677e-01,  1.4720e-02,  2.8347e-01,
          1.7606e-02, -3.8206e-01,  1.7090e-01,  7.2822e-01,  9.1559e-02,
          9.7064e-02,  4.0082e-02]], device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
559000 特征值优化 tensor(0.6747, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7861, -1.1711,  0.2637, -0.2968, -1.1143, -1.1187, -1.1901, -0.5008,
         -1.3241,  1.0463, -1.3059, -1.6883, -0.1513, -0.1400, -0.1771,  0.0198,
          0.0424, -0.1610, -0.1087, -0.3197,  0.1329,  0.3132, -0.0028, -0.0270,
          0.1812,  0.0196,  0.0041, -0.3458,  0.0914,  0.0688, -0.4646,  0.0156,
          0.0957, -0.0078, -0.0818, -0.0507,  0.1842,  0.0601,  0.3117,  0.0193,
         -0.1458, -0.0755, -0.4155,  0.5249,  0.0976,  0.2970,  0.1318, -0.6374,
          0.3096, -0.2462, -0.0730, -0.0361,  0.1242, -0.1957,  0.6041,  0.1276,
          0.1438,  0.0386, -0.4792,  0.1174, -0.4092,  0.1397, -0.2761,  0.0248,
          0.2930,  0.0236, -0.3659,  0.1584,  0.7248,  0.0885,  0.1129,  0.0311]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
560000 特征值优化 tensor(0.6703, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7657, -1.1782,  0.2628, -0.3236, -1.0851, -1.1188, -1.1901, -0.4968,
         -1.3360,  1.0332, -1.3083, -1.7035, -0.1499, -0.1689, -0.1689,  0.0541,
          0.0586, -0.1730, -0.0828, -0.3181,  0.1295,  0.3164,  0.0223,  0.0047,
          0.1806, -0.0448,  0.0248, -0.3542,  0.0784,  0.0706, -0.4601, -0.0109,
          0.1062, -0.0083, -0.0822, -0.0465,  0.1887,  0.0594,  0.3194,  0.0244,
         -0.1500, -0.0811, -0.4212,  0.5237,  0.0994,  0.2933,  0.1299, -0.6450,
          0.3084, -0.2339, -0.0990, -0.0169,  0.1193, -0.1912,  0.5946,  0.1254,
          0.1502,  0.0421, -0.4788,  0.1427, -0.4028,  0.1416, -0.2774,  0.0341,
          0.2874,  0.0198, -0.3900,  0.1555,  0.7309,  0.0837,  0.1154,  0.0402]],
       device='cuda:0') tensor(0.2035, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
561000 特征值优化 tensor(0.6705, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7586, -1.1940,  0.2604, -0.3096, -1.0873, -1.0958, -1.1851, -0.5228,
         -1.3079,  1.0680, -1.3127, -1.6746, -0.1495, -0.1191, -0.1669,  0.0200,
         -0.0097, -0.1470, -0.1242, -0.3192,  0.1294,  0.3141, -0.0569,  0.0156,
          0.1573,  0.0018, -0.0208, -0.3637,  0.0783,  0.0670, -0.4603,  0.0424,
          0.0803, -0.0078, -0.0827, -0.0508,  0.1870,  0.0618,  0.3091,  0.0141,
         -0.1474, -0.0690, -0.4266,  0.5212,  0.1063,  0.2984,  0.1299, -0.6374,
          0.3125, -0.2376, -0.0883, -0.0256,  0.1364, -0.1999,  0.6129,  0.1167,
          0.1317,  0.0496, -0.4838,  0.1051, -0.4408,  0.1605, -0.2712,  0.0297,
          0.2873,  0.0235, -0.3589,  0.1668,  0.7403,  0.0779,  0.1091,  0.0301]],
       device='cuda:0') tensor(0.2042, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
562000 特征值优化 tensor(0.6677, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7553, -1.1735,  0.2706, -0.2997, -1.0820, -1.1333, -1.1993, -0.4861,
         -1.3315,  1.0161, -1.3037, -1.7130, -0.1496, -0.1919, -0.1787,  0.0443,
          0.0885, -0.1656, -0.0781, -0.3191,  0.1298,  0.3126,  0.0612,  0.0337,
          0.1922,  0.0038,  0.0266, -0.3525,  0.0827,  0.0653, -0.4582, -0.0167,
          0.1088, -0.0091, -0.0822, -0.0444,  0.1941,  0.0578,  0.3239,  0.0261,
         -0.1546, -0.0854, -0.4283,  0.5218,  0.1045,  0.2902,  0.1291, -0.6401,
          0.3112, -0.2333, -0.0787, -0.0318,  0.1221, -0.1893,  0.6334,  0.1197,
          0.1644,  0.0392, -0.4804,  0.1454, -0.3876,  0.1348, -0.2813,  0.0450,
          0.2773,  0.0178, -0.3900,  0.1485,  0.7240,  0.0859,  0.1270,  0.0458]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
563000 特征值优化 tensor(0.6678, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7736, -1.2024,  0.2683, -0.2990, -1.1092, -1.1027, -1.1905, -0.5126,
         -1.3069,  1.0451, -1.2994, -1.6801, -0.1494, -0.1143, -0.1621,  0.0281,
         -0.0034, -0.1382, -0.1280, -0.3189,  0.1298,  0.3140, -0.0620, -0.0059,
          0.1592,  0.0173, -0.0424, -0.3726,  0.0787,  0.0678, -0.4669,  0.0425,
          0.0812, -0.0081, -0.0838, -0.0528,  0.1858,  0.0598,  0.3115,  0.0129,
         -0.1470, -0.0721, -0.4188,  0.5215,  0.1054,  0.3040,  0.1301, -0.6408,
          0.3113, -0.2316, -0.0931, -0.0224,  0.1352, -0.2066,  0.6380,  0.1115,
          0.1371,  0.0467, -0.4876,  0.1151, -0.4388,  0.1565, -0.2729,  0.0303,
          0.2859,  0.0280, -0.3539,  0.1594,  0.7348,  0.0830,  0.1033,  0.0257]],
       device='cuda:0') tensor(0.2044, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
564000 特征值优化 tensor(0.6625, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6536, -1.1557,  0.1649, -0.3901, -1.1224, -1.1120, -1.1863, -0.5168,
         -1.3247,  1.0209, -1.3049, -1.7147, -0.1428, -0.1965, -0.1614, -0.0131,
          0.0998, -0.1810, -0.0354, -0.2893,  0.1205,  0.3405,  0.0208,  0.0237,
          0.2008, -0.0213,  0.0592, -0.3518,  0.0811,  0.0955, -0.4635,  0.0018,
          0.1070, -0.0081, -0.0815, -0.0418,  0.1777,  0.0584,  0.3163,  0.0327,
         -0.1447, -0.0819, -0.4029,  0.4481,  0.1267,  0.2876,  0.1075, -0.6396,
          0.3077, -0.2890, -0.0968, -0.0523,  0.1373, -0.1992,  0.6287,  0.1157,
          0.1477,  0.0375, -0.5055,  0.2196, -0.3747,  0.1244, -0.2578,  0.0225,
          0.2775,  0.0150, -0.3805,  0.1604,  0.7227,  0.0903,  0.0885,  0.0490]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
565000 特征值优化 tensor(0.6526, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6462, -1.1562,  0.1119, -0.4218, -1.1010, -1.1478, -1.1711, -0.5555,
         -1.3349,  1.1787, -1.3296, -1.7558, -0.1381, -0.1062, -0.1525, -0.0081,
          0.0527, -0.1297, -0.1138, -0.2677,  0.1227,  0.3568, -0.0334,  0.0713,
          0.0790,  0.0209, -0.0319, -0.3801,  0.0903,  0.1128, -0.4646,  0.0495,
          0.0742, -0.0109, -0.0832, -0.0350,  0.1730,  0.0645,  0.2885,  0.0075,
         -0.1401, -0.0550, -0.4152,  0.3834,  0.2018,  0.2016,  0.1622, -0.6397,
          0.2898, -0.3136, -0.0817, -0.0848,  0.1606, -0.2195,  0.6188,  0.1062,
          0.1735,  0.0268, -0.5260,  0.2782, -0.4108,  0.1444, -0.2526,  0.0156,
          0.3382,  0.0377, -0.3717,  0.1821,  0.7486,  0.0791,  0.0561,  0.0231]],
       device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
566000 特征值优化 tensor(0.6543, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.8210e-01, -1.1456e+00,  5.3135e-02, -4.3998e-01, -1.1008e+00,
         -1.1326e+00, -1.2100e+00, -5.4641e-01, -1.3794e+00,  1.0944e+00,
         -1.3223e+00, -1.7750e+00, -1.3640e-01, -1.8336e-01, -1.8411e-01,
         -8.7504e-02,  1.0045e-01, -1.8097e-01, -3.8266e-02, -2.6184e-01,
          1.2032e-01,  3.6665e-01,  3.8121e-02, -5.1789e-03,  2.0340e-01,
          3.5237e-02,  6.2667e-02, -3.8825e-01,  9.3248e-02,  1.3166e-01,
         -4.5930e-01, -2.5218e-02,  1.1564e-01, -1.0466e-02, -8.6980e-02,
         -3.3886e-02,  1.7320e-01,  6.2613e-02,  3.2357e-01,  7.8928e-04,
         -1.4191e-01, -8.9748e-02, -3.9200e-01,  3.8178e-01,  1.9937e-01,
          1.9096e-01,  1.6498e-01, -6.2268e-01,  2.8121e-01, -3.4329e-01,
         -6.1019e-02, -9.7658e-02,  1.4035e-01, -1.9794e-01,  5.9794e-01,
          1.1720e-01,  1.6333e-01,  2.6136e-02, -4.9877e-01,  3.6169e-01,
         -2.8650e-01,  8.7446e-02, -2.4345e-01,  1.5389e-02,  3.1600e-01,
          3.6189e-02, -4.0925e-01,  1.5718e-01,  7.2415e-01,  8.8757e-02,
          9.5352e-02,  3.5134e-02]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
567000 特征值优化 tensor(0.6646, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6871, -1.1511,  0.0604, -0.4594, -1.0763, -1.1274, -1.1762, -0.5641,
         -1.3064,  1.1852, -1.3258, -1.7565, -0.1383, -0.1306, -0.1622, -0.0544,
          0.0513, -0.1635, -0.0961, -0.2541,  0.1193,  0.3595, -0.0228,  0.0204,
          0.1410, -0.0138,  0.0261, -0.3669,  0.0933,  0.1242, -0.4531,  0.0294,
          0.0922, -0.0093, -0.0830, -0.0321,  0.1701,  0.0604,  0.2789,  0.0020,
         -0.1387, -0.0500, -0.3831,  0.3755,  0.1881,  0.2007,  0.1630, -0.6146,
          0.2786, -0.3399, -0.0531, -0.0891,  0.1325, -0.1849,  0.6104,  0.1126,
          0.1666,  0.0242, -0.4892,  0.3020, -0.3585,  0.1139, -0.2234,  0.0029,
          0.3320,  0.0477, -0.3827,  0.1995,  0.7316,  0.0937,  0.0407,  0.0185]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
568000 特征值优化 tensor(0.6506, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.7608e-01, -1.1457e+00, -1.2982e-02, -5.0466e-01, -1.0491e+00,
         -1.1313e+00, -1.1798e+00, -4.8594e-01, -1.3680e+00,  1.1316e+00,
         -1.3220e+00, -1.7836e+00, -1.4021e-01, -1.6566e-01, -1.8410e-01,
         -7.6735e-02,  1.2363e-01, -1.5225e-01, -6.6686e-02, -2.4130e-01,
          1.2138e-01,  3.8676e-01,  5.6472e-02, -2.9804e-02,  1.4743e-01,
          4.7549e-02,  4.8967e-02, -4.1046e-01,  9.5450e-02,  1.5145e-01,
         -4.4677e-01, -1.6355e-02,  1.1038e-01, -1.2308e-02, -8.5569e-02,
         -3.0118e-02,  1.8191e-01,  5.3939e-02,  3.2558e-01,  3.9906e-04,
         -1.5260e-01, -8.4259e-02, -3.3847e-01,  3.3947e-01,  1.7264e-01,
          2.4252e-01,  1.3837e-01, -6.3300e-01,  2.8169e-01, -3.8091e-01,
         -7.6256e-02, -1.1532e-01,  1.2696e-01, -1.8013e-01,  6.1235e-01,
          1.0352e-01,  1.7210e-01,  2.1821e-02, -4.9248e-01,  3.4491e-01,
         -3.4810e-01,  1.1653e-01, -2.6599e-01,  3.9426e-02,  2.9810e-01,
          2.6161e-02, -4.0018e-01,  1.6491e-01,  7.4181e-01,  8.4823e-02,
          9.6898e-02,  3.5716e-02]], device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
569000 特征值优化 tensor(0.6576, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6917, -1.1447, -0.1129, -0.6351, -1.0537, -1.1296, -1.1639, -0.4997,
         -1.3099,  1.1805, -1.3323, -1.7790, -0.1396, -0.1439, -0.1674, -0.0802,
          0.0490, -0.1709, -0.0845, -0.2403,  0.1205,  0.4088, -0.0148,  0.0245,
          0.1755,  0.0048, -0.0061, -0.3796,  0.0936,  0.1765, -0.4477,  0.0217,
          0.0956, -0.0101, -0.0819, -0.0319,  0.1766,  0.0547,  0.2911, -0.0058,
         -0.1469, -0.0530, -0.3309,  0.3427,  0.1671,  0.2413,  0.1395, -0.6200,
          0.2585, -0.4118, -0.0598, -0.1395,  0.1275, -0.1803,  0.6111,  0.1039,
          0.1770,  0.0189, -0.4915,  0.3112, -0.3974,  0.1338, -0.2508,  0.0216,
          0.3174,  0.0500, -0.3953,  0.1930,  0.7529,  0.0878,  0.0517,  0.0110]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
570000 特征值优化 tensor(0.6818, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.9302e-01, -1.1687e+00, -1.8559e-01, -7.0176e-01, -1.0280e+00,
         -1.1404e+00, -1.1782e+00, -3.9598e-01, -1.2864e+00,  1.1591e+00,
         -1.3123e+00, -1.7624e+00, -1.4261e-01, -1.0806e-01, -1.8708e-01,
         -5.0629e-02,  5.6759e-02, -1.5943e-01, -1.0595e-01, -2.4661e-01,
          1.1985e-01,  4.2320e-01, -3.4956e-02,  1.0543e-01,  1.2946e-01,
          3.1925e-02, -5.1863e-02, -4.2635e-01,  9.6730e-02,  1.8995e-01,
         -4.4334e-01,  6.6428e-02,  7.3920e-02, -1.1171e-02, -8.0998e-02,
         -3.8089e-02,  1.7491e-01,  5.3330e-02,  2.9111e-01, -1.4470e-02,
         -1.4441e-01, -5.1363e-02, -3.3505e-01,  3.4873e-01,  1.6730e-01,
          2.6445e-01,  1.2907e-01, -6.1313e-01,  2.5223e-01, -4.3327e-01,
         -5.8420e-02, -1.5274e-01,  1.5661e-01, -1.9221e-01,  6.2373e-01,
          8.0517e-02,  1.8510e-01,  1.7849e-02, -5.0470e-01,  2.7806e-01,
         -3.5506e-01,  1.0777e-01, -2.6754e-01,  1.6077e-04,  3.2976e-01,
          4.8589e-02, -3.5396e-01,  1.7723e-01,  7.6376e-01,  8.2865e-02,
          2.9449e-02,  1.2567e-02]], device='cuda:0') tensor(0.2033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
571000 特征值优化 tensor(0.6517, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6810, -1.1715, -0.1836, -0.7189, -1.0138, -1.1200, -1.1913, -0.4038,
         -1.3163,  1.1296, -1.3178, -1.7578, -0.1418, -0.1726, -0.1514, -0.0868,
          0.0547, -0.1832, -0.0945, -0.2486,  0.1191,  0.4242,  0.0303,  0.0547,
          0.1434, -0.0079, -0.0105, -0.4001,  0.0969,  0.1929, -0.4404,  0.0276,
          0.0917, -0.0090, -0.0847, -0.0348,  0.1789,  0.0489,  0.3043, -0.0103,
         -0.1511, -0.0676, -0.3402,  0.3523,  0.1613,  0.2657,  0.1269, -0.6151,
          0.2502, -0.4361, -0.0477, -0.1599,  0.1323, -0.1781,  0.6177,  0.0995,
          0.1727,  0.0250, -0.4877,  0.3273, -0.3214,  0.0938, -0.2752,  0.0232,
          0.3007,  0.0495, -0.3927,  0.1820,  0.7465,  0.0944,  0.0567,  0.0191]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
572000 特征值优化 tensor(0.6515, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6821, -1.1646, -0.1720, -0.7176, -0.9943, -1.1226, -1.1817, -0.4136,
         -1.3056,  1.1427, -1.3330, -1.7766, -0.1418, -0.1780, -0.1562, -0.0964,
          0.0527, -0.1854, -0.0860, -0.2470,  0.1198,  0.4206,  0.0363,  0.0565,
          0.1432, -0.0126, -0.0021, -0.3937,  0.0959,  0.1920, -0.4341,  0.0239,
          0.0944, -0.0080, -0.0842, -0.0280,  0.1806,  0.0513,  0.3005, -0.0111,
         -0.1528, -0.0623, -0.3389,  0.3522,  0.1599,  0.2620,  0.1291, -0.6154,
          0.2539, -0.4308, -0.0448, -0.1555,  0.1354, -0.1714,  0.6173,  0.1041,
          0.1736,  0.0220, -0.4881,  0.3348, -0.3265,  0.1000, -0.2821,  0.0303,
          0.3083,  0.0496, -0.3961,  0.1863,  0.7427,  0.0936,  0.0453,  0.0218]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
573000 特征值优化 tensor(0.6481, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.8098e-01, -1.1726e+00, -1.6638e-01, -6.7825e-01, -9.5609e-01,
         -1.1227e+00, -1.1482e+00, -4.3190e-01, -1.2547e+00,  1.2220e+00,
         -1.3387e+00, -1.7886e+00, -1.4319e-01, -7.3672e-02, -1.5280e-01,
         -4.3017e-02,  5.0261e-02, -1.4735e-01, -9.8680e-02, -2.5202e-01,
          1.2069e-01,  4.1982e-01, -1.2597e-04,  9.8199e-02,  1.2452e-01,
          4.4118e-03, -1.7561e-02, -4.0038e-01,  9.5413e-02,  1.8813e-01,
         -4.2675e-01,  6.7851e-02,  6.8270e-02, -9.6809e-03, -7.9140e-02,
         -4.4492e-02,  1.7434e-01,  6.1346e-02,  2.7603e-01, -1.7147e-02,
         -1.4528e-01, -3.6750e-02, -3.4295e-01,  3.5306e-01,  1.6382e-01,
          2.7508e-01,  1.2149e-01, -6.1972e-01,  2.5849e-01, -4.2589e-01,
         -6.9499e-02, -1.4992e-01,  1.4663e-01, -1.7354e-01,  6.1557e-01,
          9.5006e-02,  1.6714e-01,  2.6323e-02, -5.0985e-01,  2.6950e-01,
         -3.6846e-01,  1.2113e-01, -2.8938e-01,  1.1480e-02,  3.4192e-01,
          5.5118e-02, -3.6044e-01,  1.9747e-01,  7.5283e-01,  8.0951e-02,
          2.0367e-02,  3.9458e-03]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
574000 特征值优化 tensor(0.6642, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.9402e-01, -1.1746e+00, -1.3767e-01, -7.0247e-01, -9.5959e-01,
         -1.1208e+00, -1.1846e+00, -4.1230e-01, -1.3345e+00,  1.1195e+00,
         -1.3384e+00, -1.8162e+00, -1.4215e-01, -1.6549e-01, -1.5266e-01,
         -9.3937e-02,  6.2259e-02, -1.7677e-01, -1.0097e-01, -2.4364e-01,
          1.1900e-01,  4.1120e-01,  3.9719e-02,  4.7270e-02,  1.4228e-01,
         -7.2261e-04, -2.3135e-02, -3.8939e-01,  9.6779e-02,  1.8308e-01,
         -4.2544e-01,  1.1784e-02,  1.0687e-01, -1.1283e-02, -8.5914e-02,
         -3.3287e-02,  1.8143e-01,  5.2800e-02,  3.1139e-01, -6.5044e-03,
         -1.5517e-01, -6.9017e-02, -3.3735e-01,  3.4995e-01,  1.6179e-01,
          2.6865e-01,  1.2619e-01, -6.2177e-01,  2.6702e-01, -4.1979e-01,
         -4.7883e-02, -1.5155e-01,  1.2625e-01, -1.5479e-01,  6.0654e-01,
          1.1882e-01,  1.7486e-01,  1.9049e-02, -4.7804e-01,  3.3890e-01,
         -3.2595e-01,  1.0714e-01, -2.9234e-01,  3.7267e-02,  3.0007e-01,
          4.4082e-02, -3.9914e-01,  1.6514e-01,  7.2272e-01,  9.9936e-02,
          9.1194e-02,  1.6421e-02]], device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
575000 特征值优化 tensor(0.6521, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6945, -1.1765, -0.1557, -0.6886, -0.9261, -1.1268, -1.1507, -0.4169,
         -1.2857,  1.1743, -1.3351, -1.8353, -0.1422, -0.1063, -0.1753, -0.0610,
          0.0521, -0.1610, -0.1182, -0.2481,  0.1196,  0.4158,  0.0066,  0.0865,
          0.1433,  0.0114, -0.0124, -0.3932,  0.0967,  0.1842, -0.4160,  0.0546,
          0.0797, -0.0111, -0.0791, -0.0408,  0.1809,  0.0557,  0.2930, -0.0132,
         -0.1519, -0.0522, -0.3331,  0.3518,  0.1624,  0.2704,  0.1280, -0.6170,
          0.2600, -0.4224, -0.0526, -0.1495,  0.1300, -0.1503,  0.6099,  0.1042,
          0.1740,  0.0210, -0.5001,  0.2851, -0.3560,  0.1162, -0.2986,  0.0329,
          0.3303,  0.0449, -0.3763,  0.1820,  0.7360,  0.0888,  0.0673,  0.0099]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
576000 特征值优化 tensor(0.6573, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6966, -1.1613, -0.1413, -0.6726, -0.9075, -1.1210, -1.1396, -0.4452,
         -1.2733,  1.2026, -1.3577, -1.8091, -0.1422, -0.1172, -0.1440, -0.0755,
          0.0351, -0.1837, -0.0968, -0.2469,  0.1189,  0.4136,  0.0267,  0.0737,
          0.1334,  0.0130, -0.0114, -0.3835,  0.0933,  0.1805, -0.4142,  0.0445,
          0.0865, -0.0086, -0.0821, -0.0356,  0.1796,  0.0575,  0.2849, -0.0033,
         -0.1513, -0.0468, -0.3329,  0.3543,  0.1566,  0.2629,  0.1297, -0.6180,
          0.2595, -0.4238, -0.0536, -0.1366,  0.1141, -0.1412,  0.6129,  0.1113,
          0.1607,  0.0271, -0.4883,  0.3075, -0.3861,  0.1310, -0.2930,  0.0350,
          0.3051,  0.0482, -0.3943,  0.2020,  0.7400,  0.0922,  0.0674,  0.0070]],
       device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
577000 特征值优化 tensor(0.6507, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6966, -1.1836, -0.1494, -0.6663, -0.9144, -1.1253, -1.1384, -0.4254,
         -1.2665,  1.1684, -1.3457, -1.8195, -0.1417, -0.0796, -0.1468, -0.0425,
          0.0480, -0.1584, -0.1035, -0.2478,  0.1190,  0.4159,  0.0116,  0.0880,
          0.1381,  0.0123, -0.0084, -0.3953,  0.0960,  0.1862, -0.4177,  0.0624,
          0.0736, -0.0110, -0.0792, -0.0434,  0.1821,  0.0582,  0.2924, -0.0162,
         -0.1520, -0.0502, -0.3318,  0.3513,  0.1625,  0.2715,  0.1273, -0.6213,
          0.2604, -0.4227, -0.0674, -0.1509,  0.1272, -0.1549,  0.6117,  0.1057,
          0.1702,  0.0229, -0.5018,  0.2851, -0.3697,  0.1248, -0.2997,  0.0354,
          0.3199,  0.0474, -0.3695,  0.1832,  0.7399,  0.0858,  0.0578,  0.0066]],
       device='cuda:0') tensor(0.2059, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
578000 特征值优化 tensor(0.6651, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.0205e-01, -1.1617e+00, -1.4058e-01, -6.6790e-01, -9.0645e-01,
         -1.1222e+00, -1.1182e+00, -4.4638e-01, -1.2441e+00,  1.2221e+00,
         -1.3708e+00, -1.8122e+00, -1.4157e-01, -8.0304e-02, -1.4206e-01,
         -6.0041e-02,  3.6960e-02, -1.6791e-01, -1.0213e-01, -2.4087e-01,
          1.1843e-01,  4.1067e-01,  2.3315e-03,  9.2299e-02,  1.1147e-01,
          9.9463e-03, -2.0748e-02, -3.7659e-01,  9.3966e-02,  1.8264e-01,
         -4.1177e-01,  6.8966e-02,  8.1869e-02, -1.0368e-02, -8.4142e-02,
         -3.0914e-02,  1.8176e-01,  5.9056e-02,  2.7552e-01, -4.1011e-03,
         -1.5214e-01, -3.9802e-02, -3.3018e-01,  3.4744e-01,  1.6209e-01,
          2.5951e-01,  1.2938e-01, -6.1754e-01,  2.6153e-01, -4.1936e-01,
         -6.1974e-02, -1.4509e-01,  1.1815e-01, -1.3697e-01,  6.0605e-01,
          1.1753e-01,  1.6280e-01,  2.3244e-02, -4.9146e-01,  2.8029e-01,
         -3.9137e-01,  1.3865e-01, -2.8536e-01,  3.0729e-02,  3.1189e-01,
          5.4115e-02, -3.8894e-01,  2.0160e-01,  7.4122e-01,  8.9697e-02,
          6.3325e-02, -5.4233e-04]], device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
579000 特征值优化 tensor(0.6515, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6974, -1.1805, -0.1538, -0.6886, -0.9272, -1.1270, -1.1472, -0.4167,
         -1.2635,  1.1511, -1.3370, -1.8304, -0.1417, -0.1033, -0.1726, -0.0582,
          0.0531, -0.1649, -0.1170, -0.2469,  0.1195,  0.4157,  0.0115,  0.0838,
          0.1434,  0.0124, -0.0080, -0.3900,  0.0964,  0.1847, -0.4173,  0.0515,
          0.0810, -0.0112, -0.0795, -0.0451,  0.1799,  0.0581,  0.2971, -0.0166,
         -0.1502, -0.0559, -0.3314,  0.3517,  0.1627,  0.2692,  0.1286, -0.6183,
          0.2598, -0.4224, -0.0517, -0.1459,  0.1310, -0.1528,  0.6103,  0.1066,
          0.1731,  0.0215, -0.5016,  0.2908, -0.3556,  0.1171, -0.3044,  0.0316,
          0.3100,  0.0478, -0.3688,  0.1776,  0.7316,  0.0890,  0.0677,  0.0097]],
       device='cuda:0') tensor(0.2048, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
580000 特征值优化 tensor(0.6489, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.8102e-01, -1.1923e+00, -1.6888e-01, -6.6853e-01, -9.5647e-01,
         -1.1218e+00, -1.1689e+00, -4.1840e-01, -1.2965e+00,  1.1092e+00,
         -1.3376e+00, -1.8192e+00, -1.4110e-01, -1.7602e-01, -1.3163e-01,
         -1.0838e-01,  6.7181e-02, -1.8313e-01, -7.7613e-02, -2.4803e-01,
          1.1936e-01,  4.1899e-01,  4.3566e-02,  4.3427e-02,  1.4769e-01,
          1.3744e-02, -1.4986e-02, -4.3163e-01,  9.4448e-02,  1.8284e-01,
         -4.2318e-01,  7.8300e-04,  1.0295e-01, -8.9128e-03, -8.5072e-02,
         -2.9191e-02,  1.8776e-01,  5.4546e-02,  3.2116e-01, -1.7708e-02,
         -1.5877e-01, -7.9404e-02, -3.3991e-01,  3.4765e-01,  1.6810e-01,
          2.7402e-01,  1.2736e-01, -6.1387e-01,  2.5589e-01, -4.2873e-01,
         -6.5573e-02, -1.4886e-01,  1.3693e-01, -1.6144e-01,  6.1204e-01,
          1.2439e-01,  1.8189e-01,  1.9651e-02, -4.8375e-01,  3.5204e-01,
         -3.0810e-01,  9.7186e-02, -3.0864e-01,  5.6203e-02,  2.7170e-01,
          4.6525e-02, -4.0573e-01,  1.6861e-01,  7.2115e-01,  9.5163e-02,
          8.8007e-02,  2.8713e-02]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
581000 特征值优化 tensor(0.6477, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6911, -1.1752, -0.1526, -0.7121, -0.9395, -1.1273, -1.1379, -0.4100,
         -1.2297,  1.1867, -1.3533, -1.8218, -0.1430, -0.0846, -0.1857, -0.0485,
          0.0460, -0.1696, -0.1053, -0.2513,  0.1201,  0.4166, -0.0289,  0.1258,
          0.1111,  0.0073, -0.0181, -0.3860,  0.0971,  0.1860, -0.4222,  0.0753,
          0.0638, -0.0108, -0.0800, -0.0443,  0.1777,  0.0617,  0.2877, -0.0224,
         -0.1478, -0.0478, -0.3369,  0.3513,  0.1639,  0.2748,  0.1235, -0.6208,
          0.2606, -0.4251, -0.0399, -0.1513,  0.1556, -0.1720,  0.6122,  0.1058,
          0.1741,  0.0212, -0.5059,  0.2827, -0.3682,  0.1255, -0.3117,  0.0254,
          0.3067,  0.0584, -0.3671,  0.1870,  0.7390,  0.0852,  0.0530,  0.0023]],
       device='cuda:0') tensor(0.2041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
582000 特征值优化 tensor(0.6493, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.8736e-01, -1.1788e+00, -1.3464e-01, -6.7235e-01, -9.2052e-01,
         -1.1257e+00, -1.1515e+00, -4.3673e-01, -1.2788e+00,  1.1268e+00,
         -1.3550e+00, -1.8478e+00, -1.4176e-01, -1.7788e-01, -1.4204e-01,
         -1.0094e-01,  6.6850e-02, -1.8635e-01, -6.9925e-02, -2.4730e-01,
          1.2024e-01,  4.1277e-01,  4.3721e-02,  4.3385e-02,  1.3431e-01,
          1.5145e-02, -1.4119e-02, -4.1261e-01,  9.5604e-02,  1.7920e-01,
         -4.1721e-01,  1.8252e-03,  1.0290e-01, -9.9070e-03, -8.5493e-02,
         -3.2925e-02,  1.8778e-01,  6.3719e-02,  3.1532e-01, -1.4933e-02,
         -1.5553e-01, -7.5389e-02, -3.3612e-01,  3.5059e-01,  1.6327e-01,
          2.6863e-01,  1.2995e-01, -6.1969e-01,  2.6494e-01, -4.2551e-01,
         -4.2996e-02, -1.4111e-01,  1.2760e-01, -1.5267e-01,  6.1157e-01,
          1.2561e-01,  1.6804e-01,  2.4925e-02, -4.8685e-01,  3.5387e-01,
         -3.4448e-01,  1.2171e-01, -3.1942e-01,  5.5686e-02,  2.7620e-01,
          4.6191e-02, -4.0684e-01,  1.7303e-01,  7.2311e-01,  8.7371e-02,
          1.0306e-01,  2.1107e-02]], device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
583000 特征值优化 tensor(0.6500, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.9477e-01, -1.1793e+00, -1.4240e-01, -6.7068e-01, -9.1894e-01,
         -1.1235e+00, -1.1262e+00, -4.2465e-01, -1.2217e+00,  1.1764e+00,
         -1.3630e+00, -1.8532e+00, -1.4275e-01, -6.6907e-02, -1.4524e-01,
         -3.0439e-02,  4.0386e-02, -1.5733e-01, -1.0066e-01, -2.5037e-01,
          1.2003e-01,  4.1509e-01,  7.1564e-03,  9.0586e-02,  1.1875e-01,
          1.0509e-02, -7.8891e-03, -3.9269e-01,  9.5775e-02,  1.8555e-01,
         -4.2023e-01,  7.4734e-02,  6.5408e-02, -1.0421e-02, -7.8546e-02,
         -4.4090e-02,  1.8134e-01,  6.1972e-02,  2.8741e-01, -2.1547e-02,
         -1.5143e-01, -4.6107e-02, -3.3472e-01,  3.5145e-01,  1.6201e-01,
          2.7584e-01,  1.2430e-01, -6.2392e-01,  2.6010e-01, -4.2088e-01,
         -6.4794e-02, -1.4823e-01,  1.3108e-01, -1.6122e-01,  6.1004e-01,
          1.1330e-01,  1.6815e-01,  2.3811e-02, -4.9983e-01,  2.8793e-01,
         -3.6204e-01,  1.2361e-01, -3.1195e-01,  3.7516e-02,  3.1248e-01,
          5.4049e-02, -3.7349e-01,  1.8684e-01,  7.3782e-01,  8.5251e-02,
          6.2140e-02,  2.3046e-04]], device='cuda:0') tensor(0.2044, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
584000 特征值优化 tensor(0.6504, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6956, -1.1713, -0.1478, -0.6567, -0.9203, -1.1189, -1.1461, -0.4397,
         -1.2619,  1.1379, -1.3624, -1.8539, -0.1413, -0.1672, -0.1475, -0.0960,
          0.0621, -0.1844, -0.0797, -0.2457,  0.1200,  0.4155,  0.0395,  0.0440,
          0.1251,  0.0109, -0.0119, -0.4158,  0.0948,  0.1807, -0.4160,  0.0091,
          0.1005, -0.0085, -0.0841, -0.0319,  0.1859,  0.0653,  0.3091, -0.0187,
         -0.1548, -0.0692, -0.3319,  0.3499,  0.1638,  0.2632,  0.1310, -0.6190,
          0.2609, -0.4263, -0.0631, -0.1439,  0.1256, -0.1504,  0.6093,  0.1254,
          0.1709,  0.0250, -0.4820,  0.3481, -0.3328,  0.1177, -0.3177,  0.0522,
          0.2772,  0.0530, -0.4117,  0.1801,  0.7242,  0.0876,  0.0913,  0.0160]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
585000 特征值优化 tensor(0.6507, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.9742e-01, -1.1761e+00, -1.5186e-01, -6.9538e-01, -9.3153e-01,
         -1.1295e+00, -1.1313e+00, -4.1598e-01, -1.2193e+00,  1.1569e+00,
         -1.3550e+00, -1.8693e+00, -1.4168e-01, -1.0508e-01, -1.7721e-01,
         -5.0528e-02,  4.5376e-02, -1.6452e-01, -1.1841e-01, -2.4727e-01,
          1.1965e-01,  4.1534e-01, -6.1701e-04,  9.4038e-02,  1.2679e-01,
          1.2501e-02, -9.2131e-03, -3.8980e-01,  9.6903e-02,  1.8355e-01,
         -4.1982e-01,  6.3465e-02,  7.2665e-02, -1.1755e-02, -7.7874e-02,
         -4.5125e-02,  1.7980e-01,  6.1901e-02,  2.9015e-01, -2.3582e-02,
         -1.5005e-01, -4.7796e-02, -3.3153e-01,  3.5053e-01,  1.6136e-01,
          2.6850e-01,  1.2898e-01, -6.1799e-01,  2.6100e-01, -4.2330e-01,
         -4.4727e-02, -1.4598e-01,  1.3527e-01, -1.5836e-01,  6.0862e-01,
          1.1469e-01,  1.7479e-01,  1.9201e-02, -4.9713e-01,  2.9280e-01,
         -3.5039e-01,  1.1803e-01, -3.1527e-01,  3.4630e-02,  3.0893e-01,
          5.5435e-02, -3.6922e-01,  1.8173e-01,  7.3002e-01,  8.8547e-02,
          6.8628e-02,  1.1945e-03]], device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
586000 特征值优化 tensor(0.6496, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6943, -1.1669, -0.1594, -0.6696, -0.8991, -1.1227, -1.1053, -0.4583,
         -1.1889,  1.2171, -1.3745, -1.8708, -0.1428, -0.0680, -0.1471, -0.0354,
          0.0325, -0.1606, -0.0966, -0.2496,  0.1203,  0.4173, -0.0111,  0.0972,
          0.1040,  0.0117, -0.0232, -0.4018,  0.0954,  0.1860, -0.4151,  0.0808,
          0.0607, -0.0106, -0.0785, -0.0441,  0.1795,  0.0689,  0.2757, -0.0240,
         -0.1488, -0.0353, -0.3346,  0.3493,  0.1648,  0.2686,  0.1260, -0.6192,
          0.2583, -0.4227, -0.0714, -0.1473,  0.1326, -0.1565,  0.6084,  0.1164,
          0.1665,  0.0261, -0.5058,  0.2803, -0.3788,  0.1363, -0.3109,  0.0376,
          0.3167,  0.0630, -0.3712,  0.1989,  0.7354,  0.0815,  0.0523, -0.0078]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
587000 特征值优化 tensor(0.6499, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6984, -1.1698, -0.1381, -0.6576, -0.8858, -1.1175, -1.1360, -0.4537,
         -1.2504,  1.1461, -1.3686, -1.8789, -0.1413, -0.1680, -0.1572, -0.0958,
          0.0666, -0.1767, -0.0760, -0.2457,  0.1202,  0.4127,  0.0397,  0.0445,
          0.1219,  0.0074, -0.0057, -0.4064,  0.0949,  0.1787, -0.4103,  0.0080,
          0.0993, -0.0088, -0.0855, -0.0322,  0.1866,  0.0687,  0.3098, -0.0246,
         -0.1545, -0.0707, -0.3303,  0.3494,  0.1631,  0.2612,  0.1316, -0.6183,
          0.2644, -0.4246, -0.0537, -0.1404,  0.1268, -0.1471,  0.6043,  0.1278,
          0.1688,  0.0260, -0.4809,  0.3556, -0.3466,  0.1272, -0.3239,  0.0583,
          0.2775,  0.0557, -0.4141,  0.1766,  0.7186,  0.0861,  0.1037,  0.0131]],
       device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
588000 特征值优化 tensor(0.6584, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7072, -1.1536, -0.1858, -0.7196, -0.9336, -1.1314, -1.1177, -0.4111,
         -1.2091,  1.1536, -1.3619, -1.8570, -0.1394, -0.1202, -0.1620, -0.0712,
          0.0349, -0.1788, -0.1029, -0.2366,  0.1198,  0.4233,  0.0095,  0.0681,
          0.1324,  0.0096, -0.0358, -0.3922,  0.0958,  0.1942, -0.4180,  0.0444,
          0.0874, -0.0111, -0.0829, -0.0371,  0.1804,  0.0627,  0.2916, -0.0132,
         -0.1503, -0.0559, -0.3212,  0.3391,  0.1687,  0.2419,  0.1427, -0.6141,
          0.2480, -0.4336, -0.0545, -0.1555,  0.1198, -0.1453,  0.6081,  0.1208,
          0.1773,  0.0202, -0.4898,  0.3171, -0.3505,  0.1178, -0.3134,  0.0333,
          0.2700,  0.0609, -0.3923,  0.1895,  0.7245,  0.0937,  0.0911,  0.0045]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
589000 特征值优化 tensor(0.6467, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.0970e-01, -1.1597e+00, -1.9363e-01, -7.2363e-01, -9.5133e-01,
         -1.1496e+00, -1.1302e+00, -4.0893e-01, -1.1872e+00,  1.1401e+00,
         -1.3588e+00, -1.8556e+00, -1.3915e-01, -1.0875e-01, -1.7324e-01,
         -5.2782e-02,  3.9501e-02, -1.7195e-01, -1.0005e-01, -2.3876e-01,
          1.2147e-01,  4.2626e-01, -4.7435e-02,  1.1701e-01,  1.0477e-01,
          3.9100e-02, -5.5209e-02, -4.3841e-01,  9.3450e-02,  1.9024e-01,
         -4.2722e-01,  7.2347e-02,  6.5448e-02, -1.2160e-02, -7.8483e-02,
         -3.9578e-02,  1.7360e-01,  6.8327e-02,  2.8605e-01, -2.6441e-02,
         -1.4442e-01, -4.6500e-02, -3.1997e-01,  3.4151e-01,  1.6892e-01,
          2.4319e-01,  1.4172e-01, -6.1354e-01,  2.5051e-01, -4.3552e-01,
         -5.3935e-02, -1.5234e-01,  1.4398e-01, -1.7442e-01,  6.1430e-01,
          1.1409e-01,  1.9478e-01,  1.3860e-02, -4.9690e-01,  2.9585e-01,
         -3.5625e-01,  1.2371e-01, -3.2784e-01,  2.2525e-02,  3.0498e-01,
          6.6866e-02, -3.6190e-01,  1.7643e-01,  7.3624e-01,  8.1254e-02,
          4.4185e-02,  6.3919e-04]], device='cuda:0') tensor(0.2055, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
590000 特征值优化 tensor(0.6510, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.9751e-01, -1.1633e+00, -1.8061e-01, -7.2011e-01, -9.8605e-01,
         -1.1306e+00, -1.1449e+00, -3.9222e-01, -1.1994e+00,  1.1094e+00,
         -1.3442e+00, -1.8680e+00, -1.4019e-01, -9.3672e-02, -1.7766e-01,
         -5.7494e-02,  5.2110e-02, -1.6495e-01, -1.0482e-01, -2.4147e-01,
          1.2079e-01,  4.2309e-01,  1.0401e-02,  6.9482e-02,  1.3419e-01,
          1.0716e-02, -2.6651e-02, -4.0409e-01,  9.5809e-02,  1.9306e-01,
         -4.3357e-01,  4.8180e-02,  8.1759e-02, -1.1812e-02, -7.7773e-02,
         -4.7993e-02,  1.7522e-01,  6.3970e-02,  2.9678e-01, -2.8867e-02,
         -1.4667e-01, -5.5004e-02, -3.2828e-01,  3.4302e-01,  1.6935e-01,
          2.5180e-01,  1.3756e-01, -6.1789e-01,  2.5464e-01, -4.3251e-01,
         -5.2377e-02, -1.5414e-01,  1.2888e-01, -1.6964e-01,  6.1987e-01,
          1.2201e-01,  1.7575e-01,  1.8816e-02, -4.8980e-01,  3.0848e-01,
         -3.2806e-01,  1.0875e-01, -3.3206e-01,  2.7099e-02,  2.8753e-01,
          6.0202e-02, -3.7265e-01,  1.7167e-01,  7.2046e-01,  9.0362e-02,
          7.6474e-02, -1.6882e-03]], device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
591000 特征值优化 tensor(20.0281, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.4893,  1.5569,  0.9087,  0.6558,  0.8416, -1.4434, -2.7349, -1.0313,
         -0.2108, -1.3939, -0.0666, -1.1163,  0.2372,  0.2830,  0.2430,  1.4790,
         -0.6535, -1.9162, -0.3560,  0.4148, -0.9586, -0.7579,  0.2508, -1.4868,
          0.5680,  0.7774,  1.9074,  0.1692, -1.4437, -0.6713,  0.1857, -1.8137,
          0.9280,  0.0302,  0.5323, -1.6688,  1.4982, -1.1650, -0.6246, -1.5650,
          0.2185,  0.4156,  0.8738,  1.1743, -1.3004,  0.2211,  2.5837, -0.0077,
         -0.9027,  1.9829,  0.5881, -0.1472,  0.6184, -0.0770,  0.5261, -0.5099,
          0.1598,  0.1947, -0.4218,  0.6409, -0.1576, -0.4244, -0.5227, -0.1943,
         -0.0958,  0.2098, -0.6959,  1.2960,  0.8777, -0.6433,  0.1988,  0.8927]],
       device='cuda:0') tensor(0.2129, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
592000 特征值优化 tensor(4.2818, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3355,  2.2151,  0.1492,  0.1338, -0.1120, -2.2048, -3.5623, -0.5235,
         -1.0835, -1.3493, -0.8886, -2.0223,  0.3522, -0.0283,  0.1472,  0.4245,
          0.2831, -0.6879,  0.1222, -0.0089, -0.3953, -0.1788, -0.0137, -0.4843,
          0.1068,  0.0064,  0.7536, -0.1293, -0.3545, -0.1588,  0.0660, -0.8749,
          0.2372,  0.0798,  0.3595, -0.6665,  0.8281, -0.4876, -0.2505, -0.7141,
         -0.0828, -0.1252, -0.1936,  0.5466, -1.0988, -0.8707,  1.4030, -0.4262,
         -1.1143,  1.3738,  0.1189,  0.0476, -0.3552,  0.7356,  0.0619, -0.1056,
         -0.5981,  0.6102,  0.1476,  0.2060, -0.9487,  0.2595, -0.0153,  0.4189,
         -0.8288,  0.0447, -1.0056,  0.5183,  0.1345, -0.2133, -0.6730,  0.4727]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
593000 特征值优化 tensor(0.9804, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1440,  2.1418, -0.2172, -0.3874, -0.6323, -2.1800, -3.7309, -0.1097,
         -1.4653, -1.0121, -1.1745, -2.3354,  0.1765,  0.0862,  0.0979,  0.2867,
          0.3806, -0.1671,  0.1183, -0.0165, -0.1737, -0.1462, -0.1073, -0.0225,
         -0.0038, -0.1290,  0.2007, -0.0089, -0.1182, -0.1262,  0.0670, -0.6207,
          0.1766,  0.0775,  0.1576, -0.3379,  0.6958, -0.2032, -0.2170, -0.4788,
          0.0163, -0.1610, -0.4325,  0.0730, -0.3990, -0.4563,  0.6729, -0.2072,
         -0.4710,  0.5613,  0.3628, -0.0097, -0.5574,  0.5421,  0.3333, -0.0324,
          0.0138,  0.2240,  0.6272,  1.0450, -0.9784,  0.4705,  0.1555,  0.2961,
         -0.6286,  0.2237, -0.8418,  0.3578,  0.1484, -0.0292, -0.6237,  0.4429]],
       device='cuda:0') tensor(0.2079, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
594000 特征值优化 tensor(0.8041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.8582e-02,  1.7232e+00, -1.2845e-01, -3.9473e-01, -8.4856e-01,
         -2.1872e+00, -3.7035e+00, -3.8133e-01, -1.4086e+00, -9.8286e-01,
         -1.0778e+00, -2.2370e+00,  1.3501e-01,  4.0666e-02,  2.4668e-02,
          2.3359e-01,  3.5922e-01, -5.1134e-02,  1.5390e-02, -1.0893e-01,
         -1.3160e-01, -1.5411e-01, -2.8015e-01,  3.3901e-02, -1.6324e-01,
         -7.3838e-02,  4.2456e-02, -1.5983e-01, -1.0702e-01, -1.2579e-01,
          5.0695e-02, -5.2826e-01,  8.6992e-02,  8.2100e-02,  6.0983e-02,
         -2.7173e-01,  7.1943e-01, -1.6306e-01, -2.0534e-01, -4.5762e-01,
         -4.0420e-03, -1.1022e-01, -3.5670e-01,  1.7668e-01, -4.0951e-01,
         -2.3774e-01,  5.0260e-01, -2.5918e-01, -3.8108e-01,  5.0238e-01,
          3.3841e-01,  2.7480e-03, -2.5685e-01,  3.8735e-01,  2.7940e-01,
         -5.6424e-02,  1.4171e-01,  1.4247e-01,  5.2213e-01,  9.8373e-01,
         -9.6193e-01,  3.7907e-01,  3.2706e-01,  1.1220e-01, -4.6159e-01,
          1.9397e-01, -4.9327e-01,  2.2035e-01,  1.9024e-01,  3.8556e-03,
         -4.9041e-01,  3.3877e-01]], device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
595000 特征值优化 tensor(0.7478, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.4799e-01,  1.5093e+00, -1.1999e-01, -3.7018e-01, -9.1556e-01,
         -2.2273e+00, -3.5245e+00, -3.5631e-01, -1.2434e+00, -8.2355e-01,
         -1.0619e+00, -2.0964e+00,  1.2028e-01, -6.1913e-03, -3.6571e-02,
          3.0363e-01,  2.1164e-01, -1.2498e-02, -3.1353e-02, -1.3341e-01,
         -1.0765e-01, -1.4801e-01, -5.0867e-02, -1.6232e-03, -2.1077e-01,
         -1.3434e-01,  1.9849e-02, -1.9826e-01, -1.0616e-01, -1.2200e-01,
          5.3502e-02, -4.2989e-01,  7.4915e-02,  9.3550e-02,  4.9542e-02,
         -2.8448e-01,  7.3050e-01, -1.6037e-01, -1.2822e-01, -4.1553e-01,
          6.2830e-03, -9.9938e-02, -4.2317e-01,  1.8420e-01, -3.5928e-01,
         -8.2649e-02,  4.1273e-01, -2.6994e-01, -3.7426e-01,  5.1242e-01,
          3.2580e-01,  1.0145e-02, -9.7003e-02,  2.9381e-01,  2.1572e-01,
         -5.2442e-02,  1.5034e-01,  1.6508e-01,  3.5563e-01,  8.6929e-01,
         -8.2657e-01,  2.2807e-01,  3.0988e-01,  9.0030e-02, -2.8549e-01,
          1.4163e-01, -1.6612e-01,  1.0857e-01,  1.3938e-01,  2.7136e-03,
         -6.2055e-02,  1.7787e-01]], device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
596000 特征值优化 tensor(0.6227, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.2116e-02,  1.3835e+00, -1.1152e-01, -2.8029e-01, -9.5232e-01,
         -2.0764e+00, -3.3135e+00, -3.4406e-01, -1.0072e+00, -5.9104e-01,
         -9.3556e-01, -1.6861e+00,  1.0569e-01,  3.7948e-02, -3.1906e-02,
          1.9811e-01,  3.0162e-01,  3.5708e-02,  7.5174e-03, -3.0135e-02,
         -1.3709e-01, -1.4895e-01, -1.3323e-01,  8.2585e-02, -1.0098e-01,
         -1.1691e-01,  8.7653e-02, -1.4944e-01, -1.1622e-01, -1.1558e-01,
          6.6504e-02, -3.7484e-01,  2.1864e-02,  9.4936e-02,  1.1260e-02,
         -1.6700e-01,  7.4582e-01, -1.4041e-01,  6.6647e-02, -3.1332e-01,
          1.1356e-02, -3.3537e-02, -4.4730e-01, -7.0204e-02, -1.1992e-01,
          2.8282e-01,  2.1470e-01, -3.0297e-01, -3.8029e-01,  5.5776e-01,
          2.4495e-01,  2.4080e-02, -2.9291e-02,  2.3433e-01,  1.6383e-01,
         -6.5943e-02,  1.6062e-01,  1.1676e-01, -3.0184e-02,  6.2227e-01,
         -7.0432e-01,  5.9948e-02,  2.4486e-01,  6.5118e-02,  1.2294e-01,
          2.0895e-01,  4.1386e-01, -2.8486e-02,  2.9902e-02,  5.1663e-02,
          3.7489e-01, -3.8466e-04]], device='cuda:0') tensor(0.2064, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
597000 特征值优化 tensor(0.6101, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.1314e-02,  1.3793e+00, -1.3904e-02, -3.6861e-01, -9.3884e-01,
         -2.0817e+00, -3.1700e+00, -3.4098e-01, -9.0060e-01, -3.7612e-01,
         -1.0063e+00, -1.3259e+00,  9.8738e-02,  9.6049e-03, -2.0359e-02,
          1.4761e-01,  1.1986e-01,  7.7394e-03, -2.1144e-02, -1.0997e-03,
         -1.3355e-01, -1.4468e-01, -6.3972e-02,  3.1214e-02, -2.1889e-01,
         -1.5258e-01,  8.0658e-03, -1.2519e-01, -1.1734e-01, -1.1931e-01,
          5.6931e-02, -3.4357e-01,  3.8935e-02,  9.4348e-02, -2.0831e-02,
         -1.3767e-01,  7.1258e-01, -1.4087e-01,  1.0365e-01, -2.8856e-01,
          1.3263e-02, -2.6000e-02, -4.3337e-01, -9.0611e-02, -9.0489e-02,
          2.9595e-01,  2.1355e-01, -3.5482e-01, -3.8734e-01,  5.5592e-01,
          3.0379e-01,  2.0763e-02, -5.9642e-02,  2.6501e-01,  1.0313e-01,
         -2.6185e-02,  2.1169e-01,  8.8811e-02, -1.3067e-01,  5.6310e-01,
         -4.3171e-01, -4.4858e-02,  1.7939e-01,  9.7999e-02,  7.2106e-02,
          2.2506e-01,  3.7086e-01, -1.6128e-02,  3.8998e-02,  4.3584e-02,
          3.0608e-01,  1.4208e-02]], device='cuda:0') tensor(0.2045, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
598000 特征值优化 tensor(0.5921, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 8.5945e-02,  1.3695e+00, -5.1056e-02, -3.7623e-01, -8.9946e-01,
         -2.1000e+00, -2.8043e+00, -3.0837e-01, -9.2810e-01, -3.3673e-01,
         -1.0752e+00, -1.2142e+00,  9.3656e-02,  6.8318e-03, -3.8749e-02,
          1.2198e-01,  1.1782e-01,  7.4658e-03,  1.3901e-02,  1.7260e-02,
         -1.2420e-01, -1.4343e-01, -1.1438e-01,  1.0715e-01, -2.1294e-01,
         -1.4501e-01,  5.5802e-03, -1.2871e-01, -1.1180e-01, -1.2185e-01,
          6.0836e-02, -2.8195e-01,  3.5895e-02,  9.2825e-02, -1.7228e-02,
         -1.5481e-01,  6.4246e-01, -1.4553e-01,  1.2273e-01, -2.8379e-01,
         -4.6304e-04, -5.0150e-02, -4.5105e-01, -8.6601e-02, -8.6723e-02,
          3.2230e-01,  1.9192e-01, -3.2944e-01, -3.7563e-01,  5.3020e-01,
          2.9549e-01,  2.7617e-02, -1.1205e-01,  2.7369e-01,  1.0165e-01,
         -1.2267e-03,  2.0066e-01,  9.3999e-02, -1.4101e-01,  5.7256e-01,
         -1.2785e-01, -1.3740e-01,  2.1042e-01,  1.0136e-01,  8.0244e-02,
          2.2857e-01,  3.4612e-01, -1.0274e-02,  9.3435e-02,  4.1053e-02,
          2.2392e-01,  2.7060e-02]], device='cuda:0') tensor(0.2046, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
599000 特征值优化 tensor(0.5949, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1257,  1.3834, -0.0771, -0.3297, -0.8827, -2.0908, -2.7457, -0.3030,
         -0.9466, -0.3260, -1.1618, -1.1927,  0.0876, -0.0117, -0.0489,  0.1244,
          0.1174,  0.0147, -0.0160,  0.0069, -0.1181, -0.1408, -0.1214,  0.1225,
         -0.2095, -0.1616,  0.0209, -0.1333, -0.1067, -0.1215,  0.0552, -0.2674,
          0.0371,  0.0944, -0.0240, -0.1524,  0.6410, -0.1497,  0.1279, -0.2804,
          0.0116, -0.0528, -0.4850, -0.0709, -0.0708,  0.3107,  0.1808, -0.3049,
         -0.3793,  0.5220,  0.2799,  0.0286, -0.0834,  0.2584,  0.0530, -0.0548,
          0.1933,  0.0983, -0.1487,  0.5678, -0.1444, -0.1377,  0.2144,  0.1095,
          0.0866,  0.2227,  0.3465, -0.0122,  0.1043,  0.0278,  0.2323,  0.0328]],
       device='cuda:0') tensor(0.2035, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
600000 特征值优化 tensor(0.5801, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1066e-01,  1.4266e+00, -7.6001e-02, -3.4744e-01, -9.0797e-01,
         -2.0963e+00, -2.5087e+00, -3.2997e-01, -9.3975e-01, -3.3378e-01,
         -1.1267e+00, -1.2110e+00,  9.1363e-02,  8.7650e-02, -2.3321e-02,
          9.9695e-02,  1.6960e-01, -1.0634e-02,  6.2939e-03, -3.2392e-02,
         -1.1849e-01, -1.4316e-01, -1.3009e-01,  1.4113e-01, -2.1443e-01,
         -1.4972e-01,  6.9593e-03, -1.2680e-01, -1.1229e-01, -1.2298e-01,
          6.0870e-02, -2.3833e-01,  3.5498e-02,  9.5029e-02, -2.0392e-02,
         -1.5462e-01,  5.8177e-01, -1.4065e-01,  1.2469e-01, -2.8213e-01,
          2.0664e-04, -5.4224e-02, -4.6321e-01, -8.2345e-02, -8.2465e-02,
          3.2081e-01,  1.6639e-01, -3.2015e-01, -3.9976e-01,  5.4902e-01,
          2.8609e-01,  2.6613e-02, -9.7036e-02,  2.6028e-01,  8.5746e-02,
          3.7220e-02,  1.9346e-01,  9.9884e-02, -1.4217e-01,  5.7361e-01,
         -8.9750e-03, -1.4562e-01,  2.1522e-01,  1.0160e-01,  9.3910e-02,
          2.2421e-01,  3.4543e-01, -9.7453e-03,  1.0538e-01,  3.8053e-02,
          2.2425e-01,  2.4264e-02]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
601000 特征值优化 tensor(0.5787, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1055,  1.4215, -0.0657, -0.3486, -0.9051, -2.1095, -2.4770, -0.3168,
         -0.9524, -0.3279, -1.1885, -1.1976,  0.0924, -0.0427, -0.0525,  0.1857,
          0.0853,  0.0156,  0.0295,  0.0497, -0.1221, -0.1423, -0.1104,  0.1038,
         -0.2148, -0.1577,  0.0234, -0.1344, -0.1123, -0.1224,  0.0545, -0.2434,
          0.0287,  0.0919, -0.0245, -0.1594,  0.5729, -0.1543,  0.1333, -0.2795,
          0.0195, -0.0595, -0.4601, -0.0828, -0.0828,  0.3110,  0.1779, -0.3243,
         -0.3988,  0.5509,  0.2892,  0.0264, -0.0769,  0.2621,  0.0346, -0.0627,
          0.2002,  0.0934, -0.1536,  0.5749, -0.0451, -0.1275,  0.2465,  0.0933,
          0.0897,  0.2231,  0.3528, -0.0142,  0.1155,  0.0200,  0.2138,  0.0380]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
602000 特征值优化 tensor(0.5770, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0490e-01,  1.4125e+00, -7.4709e-02, -3.3644e-01, -9.0799e-01,
         -2.0981e+00, -2.4582e+00, -3.1636e-01, -9.5381e-01, -3.2986e-01,
         -1.1428e+00, -1.2024e+00,  9.1109e-02,  1.0173e-01, -1.2647e-02,
          1.0194e-01,  1.7690e-01, -1.5700e-01, -9.3715e-02, -5.2147e-02,
         -1.1703e-01, -1.4297e-01, -1.4884e-01,  1.5424e-01, -2.1327e-01,
         -1.4842e-01,  9.9399e-03, -1.2427e-01, -1.1257e-01, -1.2203e-01,
          6.0107e-02, -2.4030e-01,  3.6656e-02,  9.4686e-02, -1.9123e-02,
         -1.5472e-01,  5.7496e-01, -1.4120e-01,  1.2529e-01, -2.8191e-01,
          1.3154e-03, -5.4496e-02, -4.5924e-01, -8.1683e-02, -8.1784e-02,
          3.3251e-01,  1.5981e-01, -3.2093e-01, -4.0005e-01,  5.4854e-01,
          2.8060e-01,  2.8316e-02, -8.5979e-02,  2.5556e-01,  9.4941e-02,
          3.2516e-02,  1.9028e-01,  1.0138e-01, -1.4477e-01,  5.7486e-01,
         -3.2761e-02, -1.2543e-01,  2.1820e-01,  1.0651e-01,  9.9682e-02,
          2.2220e-01,  3.4288e-01, -9.5068e-03,  1.0765e-01,  3.3705e-02,
          2.2274e-01,  2.7061e-02]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
603000 特征值优化 tensor(0.5804, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1013,  1.4146, -0.0783, -0.3390, -0.8947, -2.0979, -2.4365, -0.3333,
         -0.9539, -0.3331, -1.1379, -1.2064,  0.0922,  0.0624, -0.0333,  0.1130,
          0.1511, -0.0716, -0.0581, -0.0164, -0.1217, -0.1438, -0.1400,  0.1522,
         -0.2109, -0.1481,  0.0119, -0.1268, -0.1121, -0.1229,  0.0621, -0.2429,
          0.0316,  0.0945, -0.0195, -0.1547,  0.5638, -0.1402,  0.1260, -0.2820,
          0.0040, -0.0557, -0.4617, -0.0849, -0.0850,  0.3101,  0.1842, -0.3197,
         -0.4001,  0.5471,  0.2791,  0.0283, -0.0899,  0.2501,  0.0973,  0.0332,
          0.1992,  0.0969, -0.1437,  0.5735, -0.0440, -0.1103,  0.2240,  0.0967,
          0.0981,  0.2227,  0.3450, -0.0117,  0.1094,  0.0329,  0.2185,  0.0275]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
604000 特征值优化 tensor(0.5782, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0999,  1.4223, -0.0692, -0.3527, -0.9278, -2.1129, -2.4491, -0.3296,
         -0.9684, -0.3263, -1.1565, -1.1791,  0.0924, -0.0409, -0.0470,  0.2062,
          0.0751, -0.0649, -0.0259,  0.0665, -0.1220, -0.1419, -0.1107,  0.1034,
         -0.2172, -0.1579,  0.0241, -0.1375, -0.1125, -0.1221,  0.0573, -0.2521,
          0.0295,  0.0907, -0.0230, -0.1582,  0.5635, -0.1497,  0.1389, -0.2783,
          0.0142, -0.0649, -0.4567, -0.0831, -0.0831,  0.3114,  0.1764, -0.3231,
         -0.3988,  0.5510,  0.2908,  0.0264, -0.0687,  0.2589,  0.0352, -0.0599,
          0.2021,  0.0917, -0.1592,  0.5732, -0.0704, -0.1026,  0.2318,  0.0960,
          0.0951,  0.2185,  0.3494, -0.0117,  0.1077,  0.0259,  0.2097,  0.0398]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
605000 特征值优化 tensor(0.5967, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 7.8956e-02,  1.3731e+00, -7.9027e-02, -3.4421e-01, -8.6454e-01,
         -2.0938e+00, -2.4333e+00, -3.2691e-01, -9.4866e-01, -3.3217e-01,
         -1.1327e+00, -1.1987e+00,  9.2403e-02,  5.9507e-02, -4.1488e-03,
          1.1157e-01,  1.5609e-01, -9.2941e-02, -6.7279e-02, -1.9849e-02,
         -1.2156e-01, -1.4122e-01, -1.2439e-01,  1.1880e-01, -2.1103e-01,
         -1.5404e-01,  2.1241e-02, -1.3196e-01, -1.0466e-01, -1.2460e-01,
          5.7453e-02, -2.5115e-01,  3.7078e-02,  9.3010e-02, -1.9495e-02,
         -1.5681e-01,  5.6922e-01, -1.3422e-01,  1.3006e-01, -2.8111e-01,
          7.7550e-03, -5.9464e-02, -4.8271e-01, -7.0113e-02, -7.0059e-02,
          2.9723e-01,  1.9452e-01, -3.1191e-01, -4.0068e-01,  5.4679e-01,
          2.7361e-01,  3.1368e-02, -1.0318e-01,  2.6030e-01,  5.4376e-02,
          1.1973e-04,  1.8970e-01,  9.9068e-02, -1.4583e-01,  5.7108e-01,
         -5.0964e-02, -1.0700e-01,  2.0238e-01,  1.1508e-01,  8.9359e-02,
          2.2239e-01,  3.4154e-01, -1.1150e-02,  8.5892e-02,  2.6650e-02,
          2.1874e-01,  3.3541e-02]], device='cuda:0') tensor(0.2038, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
606000 特征值优化 tensor(0.5782, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1055,  1.4051, -0.0655, -0.3483, -0.9247, -2.1175, -2.4522, -0.3659,
         -0.9623, -0.3255, -1.1445, -1.1818,  0.0916, -0.0442, -0.0808,  0.1976,
          0.0867, -0.0646, -0.0294,  0.0845, -0.1179, -0.1418, -0.1111,  0.1000,
         -0.2165, -0.1577,  0.0246, -0.1371, -0.1124, -0.1219,  0.0544, -0.2596,
          0.0311,  0.0898, -0.0223, -0.1542,  0.5580, -0.1470,  0.1350, -0.2781,
          0.0175, -0.0603, -0.4577, -0.0806, -0.0805,  0.3378,  0.1543, -0.3237,
         -0.3987,  0.5526,  0.2914,  0.0263, -0.0823,  0.2706,  0.0213, -0.0567,
          0.2085,  0.0874, -0.1557,  0.5702, -0.0762, -0.0966,  0.2346,  0.0859,
          0.0938,  0.2207,  0.3492, -0.0114,  0.1018,  0.0281,  0.2189,  0.0365]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
607000 特征值优化 tensor(0.5775, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0979,  1.4155, -0.0750, -0.3451, -0.9437, -2.0962, -2.4194, -0.3727,
         -0.9580, -0.3322, -1.1046, -1.1875,  0.0913,  0.1018,  0.0770,  0.1309,
          0.1464, -0.0881, -0.1181, -0.0435, -0.1165, -0.1418, -0.1542,  0.1645,
         -0.2168, -0.1472,  0.0067, -0.1267, -0.1123, -0.1219,  0.0624, -0.2534,
          0.0380,  0.0951, -0.0200, -0.1537,  0.5605, -0.1319,  0.1281, -0.2809,
         -0.0038, -0.0554, -0.4549, -0.0811, -0.0812,  0.3356,  0.1536, -0.3193,
         -0.3988,  0.5513,  0.2891,  0.0264, -0.0808,  0.2572,  0.0947,  0.0356,
          0.1916,  0.1006, -0.1490,  0.5721, -0.0634, -0.0990,  0.2162,  0.0934,
          0.0970,  0.2213,  0.3463, -0.0088,  0.1031,  0.0433,  0.2219,  0.0286]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
608000 特征值优化 tensor(0.5813, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1051,  1.4196, -0.0749, -0.3470, -0.9216, -2.1071, -2.4484, -0.3797,
         -0.9604, -0.3259, -1.1158, -1.1979,  0.0925, -0.0050, -0.0602,  0.1744,
          0.0917, -0.0446, -0.0301,  0.0370, -0.1264, -0.1428, -0.1110,  0.1011,
         -0.2147, -0.1552,  0.0259, -0.1391, -0.1131, -0.1231,  0.0546, -0.2569,
          0.0390,  0.0927, -0.0208, -0.1546,  0.5578, -0.1324,  0.1334, -0.2795,
          0.0090, -0.0612, -0.4632, -0.0845, -0.0845,  0.2942,  0.1982, -0.3216,
         -0.3972,  0.5481,  0.2818,  0.0285, -0.0836,  0.2710,  0.0189, -0.0538,
          0.2004,  0.0938, -0.1515,  0.5742, -0.0636, -0.0918,  0.2189,  0.0867,
          0.0966,  0.2215,  0.3456, -0.0109,  0.0875,  0.0333,  0.2188,  0.0306]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
609000 特征值优化 tensor(0.5857, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0866,  1.3683, -0.0711, -0.3411, -0.8989, -2.1009, -2.4135, -0.3555,
         -0.9531, -0.3318, -1.1198, -1.2043,  0.0943,  0.0355, -0.0325,  0.1470,
          0.1100, -0.0510, -0.0451,  0.0281, -0.1255, -0.1438, -0.1363,  0.1486,
         -0.2093, -0.1487,  0.0128, -0.1276, -0.1122, -0.1221,  0.0643, -0.2498,
          0.0402,  0.0936, -0.0195, -0.1559,  0.5619, -0.1278,  0.1271, -0.2818,
         -0.0073, -0.0568, -0.4612, -0.0856, -0.0857,  0.3116,  0.2009, -0.3234,
         -0.3976,  0.5448,  0.2806,  0.0286, -0.0985,  0.2530,  0.0745,  0.0114,
          0.2061,  0.0918, -0.1427,  0.5718, -0.0629, -0.0950,  0.2109,  0.0984,
          0.0975,  0.2229,  0.3439, -0.0114,  0.1100,  0.0430,  0.2164,  0.0311]],
       device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
610000 特征值优化 tensor(0.5810, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1045,  1.4233, -0.0675, -0.3515, -0.9224, -2.1136, -2.4150, -0.3814,
         -0.9573, -0.3253, -1.1476, -1.1968,  0.0924, -0.0309, -0.0614,  0.1619,
          0.1060, -0.0299, -0.0207,  0.0538, -0.1241, -0.1427, -0.1102,  0.0993,
         -0.2148, -0.1567,  0.0241, -0.1381, -0.1124, -0.1229,  0.0547, -0.2584,
          0.0364,  0.0914, -0.0204, -0.1547,  0.5546, -0.1356,  0.1329, -0.2792,
          0.0120, -0.0605, -0.4611, -0.0835, -0.0834,  0.3012,  0.1877, -0.3238,
         -0.3990,  0.5506,  0.2889,  0.0270, -0.0812,  0.2694,  0.0255, -0.0580,
          0.2047,  0.0900, -0.1523,  0.5731, -0.0862, -0.0857,  0.2249,  0.0868,
          0.0951,  0.2224,  0.3469, -0.0110,  0.1035,  0.0302,  0.2187,  0.0320]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
611000 特征值优化 tensor(0.5811, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0968,  1.3861, -0.0717, -0.3431, -0.9166, -2.0965, -2.3987, -0.3593,
         -0.9520, -0.3327, -1.1365, -1.2052,  0.0939,  0.0497, -0.0072,  0.1505,
          0.1198, -0.0580, -0.0745,  0.0084, -0.1241, -0.1432, -0.1387,  0.1582,
         -0.2144, -0.1499,  0.0074, -0.1250, -0.1124, -0.1227,  0.0619, -0.2514,
          0.0424,  0.0942, -0.0210, -0.1532,  0.5633, -0.1275,  0.1257, -0.2827,
         -0.0060, -0.0546, -0.4614, -0.0864, -0.0865,  0.3151,  0.1918, -0.3224,
         -0.3995,  0.5486,  0.2829,  0.0278, -0.0923,  0.2601,  0.0888,  0.0258,
          0.2015,  0.0957, -0.1437,  0.5730, -0.0708, -0.0993,  0.2055,  0.1012,
          0.0956,  0.2224,  0.3464, -0.0122,  0.1128,  0.0428,  0.2223,  0.0271]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
612000 特征值优化 tensor(0.5815, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0948,  1.3887, -0.0676, -0.3545, -0.9097, -2.1106, -2.3911, -0.3473,
         -0.9846, -0.3302, -1.1803, -1.1647,  0.0940, -0.0237, -0.0903,  0.1652,
          0.0738, -0.0745, -0.0424,  0.0349, -0.1264, -0.1427, -0.1098,  0.0993,
         -0.2171, -0.1584,  0.0245, -0.1350, -0.1122, -0.1231,  0.0544, -0.2517,
          0.0406,  0.0906, -0.0221, -0.1595,  0.5598, -0.1317,  0.1417, -0.2782,
          0.0093, -0.0701, -0.4593, -0.0860, -0.0859,  0.3158,  0.1951, -0.3239,
         -0.3992,  0.5496,  0.2903,  0.0261, -0.0723,  0.2609,  0.0351, -0.0551,
          0.1995,  0.0919, -0.1644,  0.5724, -0.0852, -0.0884,  0.2080,  0.1044,
          0.0966,  0.2139,  0.3425, -0.0104,  0.1066,  0.0286,  0.2081,  0.0434]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
613000 特征值优化 tensor(0.5824, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.5852e-02,  1.4045e+00, -7.9035e-02, -3.3535e-01, -8.9332e-01,
         -2.1012e+00, -2.3854e+00, -3.8192e-01, -9.7050e-01, -3.3137e-01,
         -1.1234e+00, -1.1908e+00,  9.2924e-02,  5.6519e-02, -2.2147e-02,
          1.1593e-01,  1.4428e-01, -6.5376e-02, -6.0509e-02,  1.3787e-03,
         -1.2230e-01, -1.4353e-01, -1.4223e-01,  1.5708e-01, -2.0942e-01,
         -1.4671e-01,  1.2171e-02, -1.2798e-01, -1.1222e-01, -1.2218e-01,
          6.2666e-02, -2.5361e-01,  4.4353e-02,  9.3428e-02, -2.0465e-02,
         -1.5517e-01,  5.5976e-01, -1.1997e-01,  1.2994e-01, -2.8116e-01,
         -9.2658e-03, -5.9258e-02, -4.5903e-01, -8.5129e-02, -8.5201e-02,
          3.1475e-01,  1.8194e-01, -3.1932e-01, -3.9990e-01,  5.4690e-01,
          2.7846e-01,  2.8915e-02, -1.0424e-01,  2.5807e-01,  9.6398e-02,
          3.4451e-02,  2.0010e-01,  9.5558e-02, -1.4955e-01,  5.7154e-01,
         -8.0585e-02, -8.7973e-02,  2.0382e-01,  9.5195e-02,  1.0118e-01,
          2.1784e-01,  3.4278e-01, -1.0768e-02,  1.1091e-01,  4.6155e-02,
          2.1666e-01,  3.2351e-02]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
614000 特征值优化 tensor(0.5832, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0057e-01,  1.3817e+00, -7.4158e-02, -3.5312e-01, -9.1350e-01,
         -2.1031e+00, -2.3906e+00, -3.8820e-01, -9.5136e-01, -3.3240e-01,
         -1.1492e+00, -1.1986e+00,  9.1380e-02,  9.5101e-04, -3.7150e-02,
          1.4866e-01,  1.2044e-01, -6.2046e-02, -3.1866e-02,  1.7284e-02,
         -1.2546e-01, -1.4326e-01, -1.1248e-01,  1.1002e-01, -2.2184e-01,
         -1.5722e-01,  1.8308e-02, -1.3850e-01, -1.1231e-01, -1.2350e-01,
          5.4415e-02, -2.5902e-01,  4.3541e-02,  9.2753e-02, -2.1911e-02,
         -1.5781e-01,  5.5728e-01, -1.2255e-01,  1.3234e-01, -2.7997e-01,
          2.4685e-03, -6.2212e-02, -4.6052e-01, -8.4518e-02, -8.4434e-02,
          3.0916e-01,  2.0013e-01, -3.2067e-01, -3.9745e-01,  5.4461e-01,
          2.8318e-01,  2.8412e-02, -9.2579e-02,  2.7499e-01,  2.5681e-02,
         -5.3241e-02,  1.9663e-01,  9.5809e-02, -1.5048e-01,  5.7326e-01,
         -8.2299e-02, -8.5528e-02,  2.0556e-01,  9.3634e-02,  9.3161e-02,
          2.2161e-01,  3.4593e-01, -1.0682e-02,  1.0549e-01,  3.7051e-02,
          2.1588e-01,  3.2552e-02]], device='cuda:0') tensor(0.2064, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
615000 特征值优化 tensor(0.5840, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0904,  1.3859, -0.0742, -0.3417, -0.8975, -2.0979, -2.3745, -0.3759,
         -0.9513, -0.3328, -1.1421, -1.2082,  0.0930,  0.0404, -0.0373,  0.1365,
          0.1215, -0.0542, -0.0435,  0.0134, -0.1249, -0.1442, -0.1393,  0.1522,
         -0.2110, -0.1506,  0.0128, -0.1274, -0.1123, -0.1227,  0.0627, -0.2522,
          0.0434,  0.0937, -0.0202, -0.1545,  0.5621, -0.1192,  0.1251, -0.2829,
         -0.0098, -0.0570, -0.4592, -0.0867, -0.0868,  0.3105,  0.1985, -0.3223,
         -0.4004,  0.5461,  0.2805,  0.0287, -0.1054,  0.2577,  0.0798,  0.0181,
          0.2027,  0.0945, -0.1415,  0.5717, -0.0803, -0.0935,  0.2080,  0.0947,
          0.0982,  0.2225,  0.3445, -0.0115,  0.1220,  0.0450,  0.2193,  0.0286]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
616000 特征值优化 tensor(0.5799, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1003,  1.4230, -0.0698, -0.3498, -0.9084, -2.1100, -2.3930, -0.3798,
         -0.9595, -0.3263, -1.1830, -1.1953,  0.0930, -0.0480, -0.0601,  0.1762,
          0.0840, -0.0486, -0.0191,  0.0422, -0.1250, -0.1427, -0.1084,  0.1009,
         -0.2152, -0.1558,  0.0246, -0.1377, -0.1124, -0.1230,  0.0545, -0.2571,
          0.0417,  0.0919, -0.0206, -0.1554,  0.5631, -0.1261,  0.1334, -0.2794,
          0.0056, -0.0612, -0.4600, -0.0843, -0.0842,  0.2977,  0.1925, -0.3225,
         -0.3993,  0.5501,  0.2877,  0.0266, -0.0824,  0.2671,  0.0444, -0.0551,
          0.2022,  0.0924, -0.1524,  0.5734, -0.1022, -0.0867,  0.2152,  0.0940,
          0.0969,  0.2214,  0.3444, -0.0103,  0.1178,  0.0323,  0.2179,  0.0318]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
617000 特征值优化 tensor(0.5807, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0967,  1.4109, -0.0748, -0.3367, -0.8929, -2.0953, -2.3738, -0.3929,
         -0.9525, -0.3318, -1.1392, -1.2056,  0.0918,  0.0613, -0.0292,  0.1085,
          0.1538, -0.0692, -0.0608, -0.0128, -0.1211, -0.1434, -0.1363,  0.1534,
         -0.2114, -0.1488,  0.0107, -0.1260, -0.1123, -0.1225,  0.0623, -0.2514,
          0.0492,  0.0946, -0.0202, -0.1546,  0.5639, -0.1121,  0.1250, -0.2821,
         -0.0126, -0.0539, -0.4567, -0.0842, -0.0843,  0.3174,  0.1782, -0.3205,
         -0.3993,  0.5483,  0.2805,  0.0278, -0.0935,  0.2536,  0.1062,  0.0337,
          0.1966,  0.0986, -0.1435,  0.5730, -0.0889, -0.0885,  0.1926,  0.0999,
          0.0969,  0.2226,  0.3449, -0.0111,  0.1133,  0.0483,  0.2229,  0.0276]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
618000 特征值优化 tensor(0.5794, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0964,  1.4111, -0.0671, -0.3532, -0.9271, -2.1129, -2.3795, -0.4033,
         -0.9706, -0.3274, -1.1753, -1.1813,  0.0919, -0.0347, -0.0392,  0.1703,
          0.1214, -0.0677, -0.0220,  0.0567, -0.1231, -0.1425, -0.1113,  0.1016,
         -0.2162, -0.1579,  0.0250, -0.1366, -0.1126, -0.1227,  0.0552, -0.2576,
          0.0426,  0.0910, -0.0223, -0.1575,  0.5611, -0.1240,  0.1375, -0.2787,
          0.0044, -0.0643, -0.4566, -0.0837, -0.0836,  0.3118,  0.1818, -0.3239,
         -0.3995,  0.5504,  0.2899,  0.0268, -0.0796,  0.2687,  0.0165, -0.0576,
          0.2035,  0.0909, -0.1590,  0.5728, -0.1058, -0.0878,  0.2183,  0.0875,
          0.0940,  0.2187,  0.3485, -0.0120,  0.1201,  0.0355,  0.2120,  0.0393]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
619000 特征值优化 tensor(0.5779, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1012,  1.4126, -0.0732, -0.3385, -0.9220, -2.0985, -2.3770, -0.4070,
         -0.9782, -0.3315, -1.1435, -1.1849,  0.0912,  0.0912, -0.0068,  0.1141,
          0.1547, -0.1272, -0.1060, -0.0385, -0.1184, -0.1426, -0.1567,  0.1674,
         -0.2128, -0.1467,  0.0094, -0.1239, -0.1124, -0.1228,  0.0605, -0.2499,
          0.0493,  0.0949, -0.0206, -0.1539,  0.5686, -0.1090,  0.1301, -0.2808,
         -0.0132, -0.0591, -0.4581, -0.0824, -0.0825,  0.3276,  0.1656, -0.3214,
         -0.3993,  0.5500,  0.2814,  0.0271, -0.0900,  0.2587,  0.0919,  0.0405,
          0.1994,  0.0970, -0.1537,  0.5718, -0.0843, -0.1012,  0.2006,  0.0957,
          0.1008,  0.2164,  0.3436, -0.0108,  0.1184,  0.0493,  0.2206,  0.0318]],
       device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
620000 特征值优化 tensor(0.6006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 8.5360e-02,  1.3787e+00, -6.8284e-02, -3.4578e-01, -9.0586e-01,
         -2.1115e+00, -2.3982e+00, -4.3261e-01, -9.6285e-01, -3.2759e-01,
         -1.1578e+00, -1.1847e+00,  9.2106e-02, -1.4347e-02, -3.5206e-02,
          1.8907e-01,  8.8717e-02, -3.6724e-02, -8.9712e-03,  4.6271e-02,
         -1.2420e-01, -1.4329e-01, -1.1169e-01,  1.0662e-01, -2.0571e-01,
         -1.4193e-01,  1.5334e-02, -1.2713e-01, -1.0172e-01, -1.2432e-01,
          5.8518e-02, -2.6040e-01,  3.7308e-02,  8.9719e-02, -1.7040e-02,
         -1.5286e-01,  5.6867e-01, -1.1401e-01,  1.2953e-01, -2.8184e-01,
         -1.2565e-03, -5.6782e-02, -4.8693e-01, -6.3485e-02, -6.3525e-02,
          2.9717e-01,  1.9796e-01, -3.1541e-01, -4.0351e-01,  5.4506e-01,
          2.8306e-01,  2.5870e-02, -8.5057e-02,  2.6013e-01,  5.2959e-02,
         -2.2962e-02,  2.0572e-01,  8.6943e-02, -1.4873e-01,  5.6860e-01,
         -9.6066e-02, -9.5088e-02,  2.2187e-01,  8.5190e-02,  9.6599e-02,
          2.2019e-01,  3.4378e-01, -1.0947e-02,  1.2003e-01,  3.5823e-02,
          2.1977e-01,  3.5828e-02]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
621000 特征值优化 tensor(0.5831, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 8.6367e-02,  1.3779e+00, -7.0820e-02, -3.5204e-01, -8.7993e-01,
         -2.1019e+00, -2.3787e+00, -3.9000e-01, -9.6345e-01, -3.3347e-01,
         -1.1966e+00, -1.1784e+00,  9.3215e-02, -1.4215e-02, -2.1476e-02,
          1.5629e-01,  1.1729e-01, -5.9611e-02, -2.9068e-02,  1.1618e-02,
         -1.2646e-01, -1.4317e-01, -1.1905e-01,  1.1237e-01, -2.1382e-01,
         -1.5789e-01,  1.7220e-02, -1.2602e-01, -1.1239e-01, -1.2314e-01,
          5.1919e-02, -2.5425e-01,  5.0119e-02,  9.2153e-02, -2.1947e-02,
         -1.6078e-01,  5.6952e-01, -1.1330e-01,  1.3678e-01, -2.7969e-01,
         -1.3950e-04, -6.6515e-02, -4.5728e-01, -8.6505e-02, -8.6419e-02,
          3.0945e-01,  2.0133e-01, -3.2202e-01, -3.9760e-01,  5.4585e-01,
          2.8501e-01,  2.8091e-02, -9.6370e-02,  2.7420e-01,  4.6693e-02,
         -5.1202e-02,  1.9256e-01,  9.7559e-02, -1.5575e-01,  5.7500e-01,
         -9.3560e-02, -9.8164e-02,  1.9957e-01,  9.8737e-02,  9.3714e-02,
          2.1904e-01,  3.4383e-01, -9.5511e-03,  1.2007e-01,  3.6595e-02,
          2.0622e-01,  3.9215e-02]], device='cuda:0') tensor(0.2032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
622000 特征值优化 tensor(0.5810, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0982,  1.4053, -0.0721, -0.3359, -0.9106, -2.0990, -2.3647, -0.4098,
         -0.9650, -0.3287, -1.1671, -1.1952,  0.0933,  0.0575,  0.0207,  0.1367,
          0.1340, -0.0483, -0.0735, -0.0072, -0.1228, -0.1427, -0.1411,  0.1620,
         -0.2124, -0.1500,  0.0083, -0.1236, -0.1124, -0.1221,  0.0623, -0.2481,
          0.0482,  0.0949, -0.0204, -0.1528,  0.5686, -0.1093,  0.1272, -0.2812,
         -0.0128, -0.0560, -0.4594, -0.0841, -0.0842,  0.3116,  0.1830, -0.3220,
         -0.3994,  0.5501,  0.2801,  0.0286, -0.0875,  0.2540,  0.0949,  0.0331,
          0.1989,  0.0973, -0.1474,  0.5734, -0.0950, -0.1001,  0.2068,  0.0913,
          0.1022,  0.2205,  0.3449, -0.0108,  0.1303,  0.0476,  0.2232,  0.0279]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
623000 特征值优化 tensor(0.5837, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0935,  1.3793, -0.0723, -0.3513, -0.9040, -2.1007, -2.3741, -0.4225,
         -0.9617, -0.3297, -1.1590, -1.1894,  0.0936,  0.0183, -0.0536,  0.1342,
          0.1059, -0.0637, -0.0416,  0.0060, -0.1268, -0.1426, -0.1106,  0.1031,
         -0.2153, -0.1573,  0.0239, -0.1351, -0.1127, -0.1230,  0.0535, -0.2571,
          0.0540,  0.0930, -0.0214, -0.1575,  0.5629, -0.1049,  0.1339, -0.2793,
         -0.0043, -0.0627, -0.4609, -0.0856, -0.0855,  0.3065,  0.2031, -0.3215,
         -0.3960,  0.5451,  0.2785,  0.0313, -0.0928,  0.2732,  0.0388, -0.0468,
          0.1937,  0.0968, -0.1542,  0.5744, -0.0899, -0.0879,  0.1954,  0.0926,
          0.0945,  0.2202,  0.3460, -0.0109,  0.1043,  0.0434,  0.2128,  0.0336]],
       device='cuda:0') tensor(0.2037, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
624000 特征值优化 tensor(0.5814, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1017,  1.4138, -0.0759, -0.3384, -0.9090, -2.0969, -2.3656, -0.4230,
         -0.9506, -0.3302, -1.1737, -1.2103,  0.0928,  0.0555, -0.0228,  0.1256,
          0.1289, -0.0505, -0.0358, -0.0066, -0.1234, -0.1440, -0.1382,  0.1523,
         -0.2115, -0.1494,  0.0121, -0.1264, -0.1120, -0.1225,  0.0613, -0.2528,
          0.0489,  0.0942, -0.0195, -0.1546,  0.5697, -0.1072,  0.1243, -0.2828,
         -0.0109, -0.0537, -0.4610, -0.0846, -0.0847,  0.3092,  0.1862, -0.3207,
         -0.3999,  0.5472,  0.2801,  0.0289, -0.1058,  0.2663,  0.0865,  0.0293,
          0.1971,  0.0978, -0.1412,  0.5737, -0.0915, -0.1034,  0.2088,  0.0856,
          0.0988,  0.2235,  0.3438, -0.0102,  0.1333,  0.0468,  0.2219,  0.0260]],
       device='cuda:0') tensor(0.2093, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
625000 特征值优化 tensor(0.5808, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.0832e-02,  1.3969e+00, -6.9663e-02, -3.5180e-01, -9.1822e-01,
         -2.1103e+00, -2.3696e+00, -4.0807e-01, -9.7614e-01, -3.3023e-01,
         -1.2083e+00, -1.1743e+00,  9.3389e-02, -4.5055e-02, -4.8541e-02,
          1.9399e-01,  8.8647e-02, -6.8849e-02, -1.7727e-02,  4.5859e-02,
         -1.2282e-01, -1.4250e-01, -1.1333e-01,  1.0594e-01, -2.1783e-01,
         -1.5877e-01,  2.4182e-02, -1.3553e-01, -1.1256e-01, -1.2277e-01,
          5.4384e-02, -2.5300e-01,  4.8499e-02,  9.1323e-02, -2.3535e-02,
         -1.5984e-01,  5.6920e-01, -1.1276e-01,  1.3829e-01, -2.7888e-01,
          4.8698e-04, -6.7337e-02, -4.5782e-01, -8.5409e-02, -8.5326e-02,
          3.0760e-01,  1.8777e-01, -3.2271e-01, -3.9948e-01,  5.4986e-01,
          2.8977e-01,  2.6171e-02, -7.4672e-02,  2.6504e-01,  4.3434e-02,
         -5.3918e-02,  2.0054e-01,  9.2392e-02, -1.6099e-01,  5.7331e-01,
         -1.0774e-01, -9.5651e-02,  2.0903e-01,  9.2834e-02,  9.5356e-02,
          2.1601e-01,  3.4700e-01, -1.0704e-02,  1.2736e-01,  3.6150e-02,
          2.0895e-01,  4.2465e-02]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
626000 特征值优化 tensor(0.5790, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1002,  1.4139, -0.0772, -0.3395, -0.9050, -2.0969, -2.3438, -0.4228,
         -0.9506, -0.3329, -1.1599, -1.2116,  0.0906,  0.0742, -0.0203,  0.1118,
          0.1555, -0.1017, -0.0769, -0.0182, -0.1177, -0.1437, -0.1383,  0.1511,
         -0.2105, -0.1481,  0.0110, -0.1261, -0.1122, -0.1232,  0.0616, -0.2528,
          0.0554,  0.0948, -0.0193, -0.1547,  0.5674, -0.0979,  0.1239, -0.2826,
         -0.0174, -0.0541, -0.4596, -0.0831, -0.0832,  0.3275,  0.1675, -0.3202,
         -0.4000,  0.5469,  0.2795,  0.0275, -0.0926,  0.2577,  0.0960,  0.0359,
          0.1964,  0.0987, -0.1408,  0.5743, -0.1046, -0.0900,  0.1885,  0.0959,
          0.0987,  0.2236,  0.3445, -0.0116,  0.1234,  0.0534,  0.2208,  0.0258]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
627000 特征值优化 tensor(0.5814, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.8359e-02,  1.3817e+00, -6.7688e-02, -3.5192e-01, -9.1116e-01,
         -2.1118e+00, -2.3499e+00, -4.2008e-01, -9.7030e-01, -3.2678e-01,
         -1.2013e+00, -1.1843e+00,  9.3408e-02, -1.0377e-02, -1.0307e-01,
          1.6352e-01,  7.8087e-02, -8.8435e-02, -3.2939e-02,  3.8487e-02,
         -1.2573e-01, -1.4277e-01, -1.1057e-01,  1.0365e-01, -2.1609e-01,
         -1.5672e-01,  2.4487e-02, -1.3735e-01, -1.1254e-01, -1.2287e-01,
          5.4312e-02, -2.5468e-01,  5.0397e-02,  9.1146e-02, -2.1092e-02,
         -1.5622e-01,  5.6443e-01, -1.0930e-01,  1.3525e-01, -2.7978e-01,
         -5.3543e-04, -6.4147e-02, -4.5999e-01, -8.5095e-02, -8.5021e-02,
          3.2130e-01,  1.9210e-01, -3.2373e-01, -3.9900e-01,  5.5005e-01,
          2.8945e-01,  2.6228e-02, -8.2496e-02,  2.6669e-01,  1.8124e-02,
         -5.6846e-02,  2.0480e-01,  9.0727e-02, -1.5486e-01,  5.7205e-01,
         -1.1024e-01, -8.9240e-02,  2.0416e-01,  9.0550e-02,  9.6674e-02,
          2.1853e-01,  3.4386e-01, -1.0076e-02,  1.2453e-01,  3.8685e-02,
          2.1488e-01,  3.6251e-02]], device='cuda:0') tensor(0.2039, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
628000 特征值优化 tensor(0.5783, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0355e-01,  1.4124e+00, -5.9302e-02, -3.3888e-01, -9.4799e-01,
         -2.1137e+00, -2.3602e+00, -4.5079e-01, -9.6099e-01, -3.2949e-01,
         -1.1807e+00, -1.1833e+00,  9.1916e-02, -4.7062e-02, -4.2715e-02,
          2.1606e-01,  6.5126e-02, -7.6507e-02, -2.5186e-02,  1.0575e-01,
         -1.2225e-01, -1.4212e-01, -1.1684e-01,  1.0843e-01, -2.1528e-01,
         -1.6779e-01,  1.2711e-02, -1.3173e-01, -1.1272e-01, -1.2246e-01,
          5.5290e-02, -2.5838e-01,  4.6018e-02,  9.1233e-02, -2.2124e-02,
         -1.5308e-01,  5.6250e-01, -1.1093e-01,  1.3606e-01, -2.7838e-01,
          5.9535e-04, -6.1908e-02, -4.5871e-01, -8.2378e-02, -8.2275e-02,
          3.1488e-01,  1.7783e-01, -3.2878e-01, -3.9919e-01,  5.5198e-01,
          2.7722e-01,  2.9843e-02, -6.5264e-02,  2.6522e-01,  4.2647e-02,
         -5.3918e-02,  2.0858e-01,  8.8722e-02, -1.5632e-01,  5.7143e-01,
         -1.1389e-01, -8.7947e-02,  2.1931e-01,  7.8041e-02,  9.3133e-02,
          2.2174e-01,  3.5381e-01, -1.2718e-02,  1.2387e-01,  3.8533e-02,
          2.1444e-01,  3.3459e-02]], device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
629000 特征值优化 tensor(0.6447, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.0018e-02,  1.4028e+00, -6.8779e-02, -3.4165e-01, -9.3381e-01,
         -2.0964e+00, -2.3417e+00, -4.3759e-01, -9.6008e-01, -3.2884e-01,
         -1.1691e+00, -1.1937e+00,  9.0962e-02,  9.6227e-02,  2.2682e-03,
          1.3277e-01,  1.4477e-01, -1.4645e-01, -1.1206e-01, -4.9007e-02,
         -1.1727e-01, -1.4160e-01, -1.5529e-01,  1.5641e-01, -2.1521e-01,
         -1.4742e-01,  9.2711e-03, -1.2329e-01, -1.1099e-01, -1.2168e-01,
          6.0431e-02, -2.5055e-01,  5.6340e-02,  9.4651e-02, -2.2801e-02,
         -1.5405e-01,  5.7366e-01, -9.5990e-02,  1.2825e-01, -2.8056e-01,
         -1.6210e-02, -5.5948e-02, -4.5334e-01, -7.8671e-02, -7.8708e-02,
          3.3783e-01,  1.5542e-01, -3.2310e-01, -3.9929e-01,  5.5124e-01,
          2.8514e-01,  2.6050e-02, -7.6470e-02,  2.5723e-01,  8.9790e-02,
          3.8500e-02,  1.9257e-01,  9.9969e-02, -1.5007e-01,  5.7152e-01,
         -1.0385e-01, -1.0150e-01,  1.8957e-01,  9.5172e-02,  9.9047e-02,
          2.2166e-01,  3.4643e-01, -1.0029e-02,  1.2663e-01,  5.4993e-02,
          2.2216e-01,  2.9014e-02]], device='cuda:0') tensor(0.2057, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
630000 特征值优化 tensor(0.5787, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1024,  1.4176, -0.0671, -0.3504, -0.9306, -2.1140, -2.3753, -0.4474,
         -0.9604, -0.3257, -1.1942, -1.1893,  0.0926, -0.0366, -0.0596,  0.1835,
          0.0681, -0.0621, -0.0339,  0.0795, -0.1224, -0.1420, -0.1077,  0.1016,
         -0.2185, -0.1571,  0.0234, -0.1383, -0.1123, -0.1222,  0.0556, -0.2567,
          0.0525,  0.0913, -0.0208, -0.1549,  0.5720, -0.1004,  0.1333, -0.2792,
         -0.0043, -0.0611, -0.4590, -0.0837, -0.0836,  0.3108,  0.1797, -0.3239,
         -0.3991,  0.5511,  0.2903,  0.0264, -0.0725,  0.2649,  0.0405, -0.0539,
          0.2064,  0.0895, -0.1538,  0.5718, -0.1099, -0.0966,  0.2034,  0.0853,
          0.0949,  0.2219,  0.3474, -0.0109,  0.1254,  0.0418,  0.2167,  0.0347]],
       device='cuda:0') tensor(0.2040, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
631000 特征值优化 tensor(0.5842, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0898,  1.3811, -0.0730, -0.3479, -0.9031, -2.0934, -2.3528, -0.4242,
         -0.9565, -0.3364, -1.1742, -1.2079,  0.0918,  0.0370, -0.0333,  0.1264,
          0.1365, -0.0796, -0.0540,  0.0213, -0.1241, -0.1439, -0.1425,  0.1661,
         -0.2188, -0.1454,  0.0057, -0.1276, -0.1122, -0.1240,  0.0627, -0.2482,
          0.0595,  0.0947, -0.0212, -0.1539,  0.5776, -0.0838,  0.1253, -0.2833,
         -0.0242, -0.0562, -0.4562, -0.0870, -0.0871,  0.3211,  0.1947, -0.3227,
         -0.3996,  0.5463,  0.2816,  0.0266, -0.0956,  0.2522,  0.0912,  0.0291,
          0.2022,  0.0951, -0.1427,  0.5722, -0.0957, -0.1025,  0.1831,  0.0975,
          0.0967,  0.2217,  0.3459, -0.0135,  0.1293,  0.0572,  0.2192,  0.0276]],
       device='cuda:0') tensor(0.2053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
632000 特征值优化 tensor(0.5816, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0935,  1.3868, -0.0653, -0.3497, -0.9094, -2.1114, -2.3609, -0.4429,
         -0.9767, -0.3274, -1.2205, -1.1795,  0.0934, -0.0220, -0.0643,  0.1523,
          0.1144, -0.0763, -0.0223,  0.0397, -0.1260, -0.1427, -0.1121,  0.1031,
         -0.2128, -0.1563,  0.0249, -0.1345, -0.1126, -0.1229,  0.0543, -0.2549,
          0.0539,  0.0909, -0.0201, -0.1576,  0.5745, -0.1005,  0.1361, -0.2789,
         -0.0042, -0.0647, -0.4578, -0.0859, -0.0858,  0.3177,  0.1931, -0.3251,
         -0.3988,  0.5493,  0.2886,  0.0262, -0.0866,  0.2699,  0.0259, -0.0564,
          0.2020,  0.0913, -0.1565,  0.5715, -0.1152, -0.1012,  0.2058,  0.0841,
          0.0987,  0.2171,  0.3419, -0.0098,  0.1372,  0.0406,  0.2139,  0.0379]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
633000 特征值优化 tensor(0.5843, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0927,  1.3968, -0.0744, -0.3448, -0.9147, -2.0942, -2.3676, -0.4665,
         -0.9494, -0.3322, -1.1769, -1.2089,  0.0939,  0.0511,  0.0026,  0.1389,
          0.1143, -0.0573, -0.0445,  0.0215, -0.1254, -0.1442, -0.1255,  0.1324,
         -0.2085, -0.1489,  0.0148, -0.1292, -0.1121, -0.1228,  0.0619, -0.2518,
          0.0563,  0.0946, -0.0180, -0.1536,  0.5772, -0.0856,  0.1234, -0.2832,
         -0.0175, -0.0541, -0.4586, -0.0886, -0.0886,  0.3084,  0.1973, -0.3216,
         -0.4000,  0.5458,  0.2816,  0.0291, -0.0991,  0.2624,  0.0822,  0.0306,
          0.2001,  0.0962, -0.1380,  0.5727, -0.0886, -0.1122,  0.2015,  0.0777,
          0.0998,  0.2242,  0.3425, -0.0111,  0.1371,  0.0524,  0.2195,  0.0253]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
634000 特征值优化 tensor(0.5788, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0918,  1.4199, -0.0725, -0.3424, -0.8939, -2.0973, -2.3594, -0.4602,
         -0.9564, -0.3315, -1.1651, -1.2045,  0.0901,  0.0787, -0.0394,  0.1053,
          0.1618, -0.0886, -0.0535, -0.0263, -0.1145, -0.1432, -0.1395,  0.1558,
         -0.2117, -0.1477,  0.0097, -0.1249, -0.1124, -0.1232,  0.0606, -0.2490,
          0.0645,  0.0949, -0.0185, -0.1519,  0.5786, -0.0774,  0.1242, -0.2823,
         -0.0244, -0.0535, -0.4538, -0.0830, -0.0831,  0.3389,  0.1493, -0.3217,
         -0.3992,  0.5492,  0.2831,  0.0268, -0.0936,  0.2551,  0.0983,  0.0409,
          0.1972,  0.0979, -0.1417,  0.5736, -0.0978, -0.1008,  0.1649,  0.0976,
          0.1014,  0.2220,  0.3429, -0.0104,  0.1172,  0.0613,  0.2249,  0.0236]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
635000 特征值优化 tensor(0.5786, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0979,  1.4115, -0.0655, -0.3526, -0.9101, -2.1156, -2.3516, -0.4538,
         -0.9603, -0.3261, -1.2338, -1.1867,  0.0923, -0.0282, -0.0308,  0.1634,
          0.1302, -0.0479,  0.0082,  0.0807, -0.1204, -0.1420, -0.1074,  0.1015,
         -0.2180, -0.1571,  0.0237, -0.1372, -0.1122, -0.1221,  0.0549, -0.2554,
          0.0549,  0.0905, -0.0211, -0.1545,  0.5748, -0.0975,  0.1339, -0.2787,
         -0.0045, -0.0599, -0.4547, -0.0827, -0.0826,  0.3240,  0.1669, -0.3248,
         -0.3992,  0.5513,  0.2914,  0.0260, -0.0839,  0.2693,  0.0331, -0.0541,
          0.2070,  0.0887, -0.1530,  0.5713, -0.1292, -0.0976,  0.2049,  0.0815,
          0.0947,  0.2218,  0.3482, -0.0112,  0.1458,  0.0412,  0.2171,  0.0357]],
       device='cuda:0') tensor(0.2053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
636000 特征值优化 tensor(0.5808, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0996,  1.4165, -0.0752, -0.3376, -0.8885, -2.0970, -2.3448, -0.4496,
         -0.9519, -0.3304, -1.2071, -1.2093,  0.0909,  0.0971, -0.0026,  0.0970,
          0.1603, -0.0598, -0.0225, -0.0128, -0.1201, -0.1438, -0.1388,  0.1496,
         -0.2101, -0.1481,  0.0124, -0.1260, -0.1123, -0.1226,  0.0612, -0.2437,
          0.0613,  0.0946, -0.0189, -0.1542,  0.5825, -0.0810,  0.1241, -0.2825,
         -0.0206, -0.0535, -0.4589, -0.0831, -0.0831,  0.3187,  0.1744, -0.3212,
         -0.4003,  0.5470,  0.2796,  0.0283, -0.0974,  0.2556,  0.0922,  0.0406,
          0.1954,  0.0987, -0.1402,  0.5754, -0.0969, -0.1175,  0.1907,  0.0887,
          0.1008,  0.2227,  0.3424, -0.0103,  0.1441,  0.0546,  0.2218,  0.0251]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
637000 特征值优化 tensor(0.5819, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0965,  1.3938, -0.0706, -0.3527, -0.8980, -2.1071, -2.3837, -0.4211,
         -0.9550, -0.3300, -1.2530, -1.1998,  0.0939,  0.0041, -0.0442,  0.1716,
          0.0696, -0.0885, -0.0294,  0.0396, -0.1277, -0.1431, -0.1086,  0.1035,
         -0.2198, -0.1554,  0.0219, -0.1389, -0.1123, -0.1234,  0.0541, -0.2386,
          0.0603,  0.0918, -0.0204, -0.1552,  0.5958, -0.0843,  0.1312, -0.2807,
         -0.0108, -0.0608, -0.4615, -0.0863, -0.0862,  0.3069,  0.2029, -0.3228,
         -0.3993,  0.5479,  0.2876,  0.0260, -0.0733,  0.2588,  0.0437, -0.0544,
          0.2011,  0.0934, -0.1487,  0.5732, -0.0929, -0.1359,  0.1997,  0.0935,
          0.0962,  0.2222,  0.3447, -0.0110,  0.1467,  0.0441,  0.2180,  0.0307]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
638000 特征值优化 tensor(0.5808, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0889,  1.3792, -0.0691, -0.3522, -0.8601, -2.1105, -2.3671, -0.4668,
         -0.9627, -0.3291, -1.2835, -1.1906,  0.0937, -0.0253, -0.0204,  0.1839,
          0.0966,  0.0144,  0.0384,  0.0514, -0.1252, -0.1429, -0.1100,  0.1062,
         -0.2186, -0.1570,  0.0224, -0.1380, -0.1125, -0.1232,  0.0491, -0.2528,
          0.0484,  0.0914, -0.0216, -0.1558,  0.5919, -0.1164,  0.1334, -0.2796,
         -0.0038, -0.0625, -0.4581, -0.0865, -0.0864,  0.3137,  0.1947, -0.3237,
         -0.3988,  0.5489,  0.2891,  0.0261, -0.1247,  0.2902,  0.0547, -0.0559,
          0.2052,  0.0898, -0.1514,  0.5716, -0.1103, -0.1322,  0.2457,  0.0575,
          0.0974,  0.2201,  0.3456, -0.0111,  0.1910,  0.0250,  0.2149,  0.0336]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
639000 特征值优化 tensor(0.5914, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1101,  1.3825, -0.0839, -0.3441, -0.8772, -2.0987, -2.3623, -0.4446,
         -0.9515, -0.3312, -1.2355, -1.1956,  0.0934,  0.0500,  0.0025,  0.1258,
          0.1338, -0.0316,  0.0153, -0.0135, -0.1226, -0.1426, -0.1145,  0.1150,
         -0.2145, -0.1560,  0.0222, -0.1354, -0.1075, -0.1231,  0.0556, -0.2401,
          0.0573,  0.0919, -0.0191, -0.1573,  0.5915, -0.0840,  0.1288, -0.2812,
         -0.0096, -0.0567, -0.4891, -0.0769, -0.0768,  0.2928,  0.1953, -0.3130,
         -0.4027,  0.5485,  0.2730,  0.0331, -0.0826,  0.2582,  0.0463, -0.0107,
          0.1915,  0.0981, -0.1488,  0.5734, -0.0868, -0.1353,  0.2059,  0.0899,
          0.0882,  0.2220,  0.3426, -0.0103,  0.1360,  0.0436,  0.2194,  0.0345]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
640000 特征值优化 tensor(0.5814, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0961,  1.3868, -0.0698, -0.3519, -0.9066, -2.1103, -2.3789, -0.4495,
         -0.9557, -0.3288, -1.2596, -1.1951,  0.0924,  0.0174,  0.0156,  0.1447,
          0.1234,  0.0204,  0.0813,  0.0373, -0.1254, -0.1426, -0.1112,  0.1081,
         -0.2202, -0.1574,  0.0215, -0.1384, -0.1119, -0.1228,  0.0543, -0.2460,
          0.0562,  0.0913, -0.0213, -0.1567,  0.5930, -0.0905,  0.1323, -0.2798,
         -0.0067, -0.0606, -0.4582, -0.0846, -0.0845,  0.3139,  0.1947, -0.3232,
         -0.3989,  0.5497,  0.2890,  0.0261, -0.0805,  0.2663,  0.0456, -0.0572,
          0.2030,  0.0914, -0.1508,  0.5733, -0.0988, -0.1349,  0.2125,  0.0798,
          0.0940,  0.2226,  0.3479, -0.0123,  0.1566,  0.0401,  0.2133,  0.0337]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
641000 特征值优化 tensor(0.5812, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.8792e-02,  1.3869e+00, -6.5755e-02, -3.5032e-01, -8.7762e-01,
         -2.1121e+00, -2.3669e+00, -4.2032e-01, -9.5646e-01, -3.2712e-01,
         -1.3120e+00, -1.1939e+00,  9.2679e-02,  3.5785e-02, -3.4883e-02,
          1.1682e-01,  1.0868e-01, -2.8886e-02,  9.5628e-04,  8.0026e-02,
         -1.2436e-01, -1.4236e-01, -1.0812e-01,  1.0460e-01, -2.1773e-01,
         -1.5699e-01,  2.3715e-02, -1.3765e-01, -1.1244e-01, -1.2257e-01,
          5.4078e-02, -2.3938e-01,  4.9766e-02,  9.1025e-02, -2.1490e-02,
         -1.5482e-01,  5.9583e-01, -1.0357e-01,  1.3199e-01, -2.7993e-01,
         -3.6378e-03, -5.9166e-02, -4.5785e-01, -8.3822e-02, -8.3729e-02,
          3.1990e-01,  1.8768e-01, -3.2374e-01, -3.9867e-01,  5.5115e-01,
          2.9018e-01,  2.6669e-02, -8.8889e-02,  2.6185e-01,  4.2006e-02,
         -5.9835e-02,  2.0614e-01,  8.9566e-02, -1.5079e-01,  5.7262e-01,
         -1.1132e-01, -1.4285e-01,  2.2600e-01,  7.7732e-02,  9.3619e-02,
          2.2247e-01,  3.4814e-01, -1.1592e-02,  1.8598e-01,  3.3728e-02,
          2.1640e-01,  3.2115e-02]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
642000 特征值优化 tensor(7.6509, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.9345e-01,  1.6653e+00, -1.7389e+00, -6.8461e-01, -8.6962e-02,
         -2.8557e-01,  5.1864e-01,  8.7148e-01, -1.7602e+00,  1.8483e-01,
         -1.4859e+00, -1.3070e+00,  6.9541e-01,  3.8706e-02, -5.3664e-01,
         -5.2752e-01,  1.4054e-01,  3.2738e-01, -4.0084e-02, -2.0220e-02,
         -9.7952e-01, -1.0975e-02, -1.2368e-01, -5.2751e-01,  1.1392e+00,
         -2.8011e-01,  7.4834e-02, -5.8898e-02,  6.9348e-03, -5.1237e-03,
         -2.0998e-02,  1.7220e-02, -2.4699e-04,  1.6403e+00, -3.2205e-01,
         -1.4881e-01, -1.0639e+00,  4.3075e-01, -1.2222e+00, -3.9282e-02,
         -3.1482e-01,  6.2102e-01, -9.3987e-01, -2.3441e-01, -2.1806e-01,
         -2.4562e-01,  1.1352e+00,  5.3998e-01, -6.5480e-01,  2.2046e-01,
          7.0910e-01,  3.6859e-03, -6.8640e-01,  1.8801e-01, -1.4698e-01,
          1.1354e-01,  2.3302e-01,  9.3678e-01, -5.0067e-01,  8.2199e-01,
         -1.3899e+00, -1.9376e-01,  3.5315e-01,  5.4470e-01, -1.8455e+00,
          2.3088e-01,  9.3661e-01,  8.8834e-01, -2.6877e-01, -2.7541e-01,
         -9.3760e-01,  4.5781e-01]], device='cuda:0') tensor(0.2670, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
643000 特征值优化 tensor(1.1205, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5947,  1.5457, -2.0023, -0.1512, -0.8344, -1.6009, -0.1927,  0.9841,
         -2.2843,  0.7711, -2.1682, -1.5426,  0.4460,  0.0413, -0.0683, -0.1642,
          0.0572,  0.1364, -0.1043, -0.0335, -0.4687, -0.0300, -0.1160, -0.0604,
          0.4662, -0.1869, -0.0760, -0.0354, -0.0412, -0.0129, -0.0233, -0.0163,
         -0.1001,  0.8977, -0.4040, -0.0708, -0.5644,  0.2194, -0.8154,  0.1864,
         -0.1827,  0.0434, -0.3415, -0.3709,  0.1340, -0.0299,  0.6129,  0.7556,
         -0.6302,  0.2237,  0.4628, -0.0056, -0.1542,  0.1056, -0.5259,  0.1511,
         -0.8147, -0.1897, -0.9641,  0.4669, -0.7489, -0.1259, -0.0429,  0.2750,
         -1.6911,  0.1728,  0.5016,  0.3983,  0.5178, -0.1697, -0.3618,  0.1406]],
       device='cuda:0') tensor(0.2049, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
644000 特征值优化 tensor(0.7972, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7243,  1.2771, -1.7990, -0.0388, -0.8222, -1.8437, -0.2850,  0.9553,
         -2.4009,  0.7605, -2.2037, -1.5647,  0.4277,  0.0274, -0.0965, -0.0347,
          0.0759,  0.2521, -0.2010, -0.1137, -0.4587, -0.0197, -0.0846, -0.1110,
          0.3576, -0.2817, -0.0714, -0.0646, -0.0343, -0.0028, -0.0175, -0.0620,
         -0.0997,  0.7518, -0.4149,  0.0145, -0.4368,  0.2627, -0.6639,  0.1115,
         -0.1922, -0.0041, -0.2803, -0.3854,  0.1627,  0.3306,  0.4236,  0.6111,
         -0.5661,  0.1698,  0.3631,  0.0119, -0.0502,  0.0394, -0.6167,  0.1484,
         -0.6957, -0.0719, -0.9441,  0.5840, -0.7475, -0.0929, -0.3203,  0.1957,
         -1.5660,  0.1342,  0.5546,  0.3852,  0.4440, -0.0529, -0.1064,  0.1400]],
       device='cuda:0') tensor(0.2104, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
645000 特征值优化 tensor(0.8012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.9331e-01,  1.1863e+00, -1.8066e+00, -4.8213e-02, -8.2704e-01,
         -1.8045e+00, -2.6267e-01,  9.7268e-01, -2.3434e+00,  7.3593e-01,
         -2.1901e+00, -1.4436e+00,  4.1316e-01,  2.4740e-02, -8.1336e-02,
         -3.2736e-02,  7.5589e-02,  2.5881e-01, -1.7433e-01, -1.0877e-01,
         -4.5116e-01, -1.9804e-02, -1.1175e-01, -1.0877e-01,  3.8415e-01,
         -3.0100e-01, -5.5951e-02, -6.2574e-02, -4.0764e-02, -2.3028e-03,
         -2.0302e-02, -6.8031e-02, -9.2655e-02,  7.1720e-01, -3.6709e-01,
          1.8088e-02, -4.3996e-01,  2.5219e-01, -5.9566e-01,  9.3772e-02,
         -1.7194e-01, -2.6354e-02, -2.9379e-01, -3.2928e-01,  1.3264e-01,
          3.9341e-01,  3.8698e-01,  6.1844e-01, -5.6823e-01,  1.6738e-01,
          3.5851e-01,  1.5032e-02, -4.6648e-02,  4.4115e-02, -5.8702e-01,
          1.9438e-01, -6.1535e-01, -7.6336e-02, -8.5104e-01,  5.1990e-01,
         -7.5768e-01, -8.0091e-02, -3.4487e-01,  1.9569e-01, -1.4045e+00,
          6.4521e-02,  5.3370e-01,  3.8807e-01,  4.3952e-01, -5.0706e-02,
         -1.1729e-01,  1.7341e-01]], device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
646000 特征值优化 tensor(0.7667, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.6383,  1.1144, -1.8314, -0.0340, -0.8396, -1.6868, -0.1998,  0.8067,
         -2.2372,  0.6972, -1.9396, -1.3345,  0.3890,  0.0245, -0.0729,  0.0033,
          0.1157,  0.3125, -0.1794, -0.1111, -0.4279, -0.0133, -0.1614, -0.1102,
          0.4015, -0.3456,  0.0519, -0.0650, -0.0458,  0.0049, -0.0175, -0.0851,
         -0.0720,  0.6733, -0.2943,  0.0058, -0.4071,  0.1984, -0.5117,  0.0530,
         -0.1250, -0.0543, -0.2774, -0.4105,  0.2429,  0.3220,  0.3966,  0.6073,
         -0.5836,  0.1967,  0.3656,  0.0107, -0.0195,  0.0290, -0.5288,  0.3049,
         -0.5254, -0.0775, -0.5193,  0.5486, -0.7072, -0.0618, -0.3882,  0.1472,
         -1.2281, -0.1056,  0.5705,  0.2971,  0.3632,  0.0403,  0.0338,  0.2349]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
647000 特征值优化 tensor(0.7304, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.7277e-01,  1.0219e+00, -1.8805e+00, -1.1830e-01, -8.4403e-01,
         -1.5305e+00, -8.1820e-02,  8.3083e-01, -2.0385e+00,  3.7415e-01,
         -1.8250e+00, -1.2333e+00,  3.7338e-01,  4.1846e-02, -8.1965e-02,
         -8.4655e-03,  1.1357e-01,  2.8628e-01, -1.4244e-01, -1.0930e-01,
         -4.1550e-01, -8.2808e-03, -2.3622e-01, -1.0569e-01,  3.8197e-01,
         -3.6771e-01,  8.5786e-02, -3.8991e-02, -8.3177e-02,  1.8325e-03,
         -1.9306e-02, -7.0272e-02, -7.9102e-02,  6.1218e-01, -2.2976e-01,
          1.6192e-02, -3.8065e-01,  1.5231e-01, -4.7154e-01, -2.9508e-02,
         -8.4181e-02,  1.3400e-02, -2.8324e-01, -4.1400e-01,  2.7520e-01,
          3.3678e-01,  3.7082e-01,  5.8429e-01, -5.4400e-01,  2.1515e-01,
          4.1207e-01, -4.2108e-03, -7.4162e-02,  6.1778e-02, -5.9830e-01,
          2.9172e-01, -2.9751e-01, -1.3925e-01, -5.4312e-01,  3.7155e-01,
         -6.4856e-01, -1.5300e-02, -4.6450e-01,  1.2396e-01, -9.0539e-01,
         -2.0161e-01,  6.2351e-01,  1.9893e-01,  3.8538e-01,  3.0311e-02,
         -4.9271e-02,  2.9442e-01]], device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
648000 特征值优化 tensor(0.7239, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.5946e-01,  8.8966e-01, -1.9393e+00, -1.3382e-01, -7.8718e-01,
         -1.3152e+00,  1.2317e-01,  6.9954e-01, -1.8488e+00,  1.6838e-01,
         -1.6511e+00, -1.2052e+00,  3.4043e-01,  7.3336e-02, -7.9552e-02,
         -4.5437e-02,  7.9477e-02,  2.6613e-01, -1.3358e-01, -1.1061e-01,
         -3.7995e-01, -1.8955e-02, -2.6203e-01, -9.5037e-02,  3.2692e-01,
         -4.0525e-01,  6.1472e-02, -4.9120e-02, -9.6710e-02,  9.5743e-05,
         -1.0709e-02, -6.2545e-02, -7.3826e-02,  5.4706e-01, -1.5939e-01,
         -3.6387e-03, -3.1670e-01,  8.5172e-02, -4.4217e-01, -8.5612e-02,
         -3.3344e-02,  4.1112e-02, -2.7763e-01, -3.8758e-01,  3.0814e-01,
          3.3680e-01,  3.4813e-01,  5.8669e-01, -4.9622e-01,  1.5418e-01,
          3.6190e-01,  1.9994e-02, -8.7957e-02,  6.6698e-02, -6.5182e-01,
         -1.5668e-02, -1.9372e-01, -1.1734e-01, -4.7568e-01,  3.4213e-01,
         -6.1951e-01,  3.4698e-02, -5.5190e-01,  7.7163e-02, -6.9453e-01,
         -2.6722e-01,  6.5660e-01,  1.2763e-01,  3.5583e-01,  9.3612e-02,
         -5.5403e-02,  3.1356e-01]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
649000 特征值优化 tensor(0.7055, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.6220e-01,  7.9243e-01, -1.9532e+00, -9.7061e-02, -8.2475e-01,
         -1.2018e+00,  2.1655e-01,  6.5080e-01, -1.6647e+00,  1.2521e-01,
         -1.6485e+00, -1.2128e+00,  3.2857e-01,  2.7362e-02, -3.7803e-02,
         -5.0460e-02,  6.4446e-02,  2.6382e-01, -1.5764e-01, -8.4548e-02,
         -3.6639e-01, -1.3196e-02, -3.4642e-01, -7.9663e-02,  3.0316e-01,
         -4.4672e-01,  9.0192e-02, -6.2140e-02, -9.6775e-02,  1.3086e-03,
         -2.7336e-02, -7.5984e-02, -4.3371e-02,  5.2621e-01, -1.6245e-01,
         -1.7761e-02, -2.8654e-01,  2.4445e-02, -3.9519e-01, -9.6830e-02,
         -2.1836e-02,  4.3935e-02, -2.7949e-01, -3.9176e-01,  3.0901e-01,
          4.1524e-01,  3.0677e-01,  5.9289e-01, -5.1229e-01,  1.6910e-01,
          3.4581e-01,  2.8194e-02, -2.5818e-01,  1.6354e-01, -6.0590e-01,
         -1.2380e-02, -2.2546e-01, -8.0857e-02, -4.1031e-01,  3.0558e-01,
         -4.5463e-01,  6.0073e-02, -5.2381e-01,  6.4377e-02, -6.8627e-01,
         -2.2418e-01,  6.8900e-01,  9.3317e-02,  3.8918e-01,  3.6261e-02,
         -8.5351e-02,  3.3414e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
650000 特征值优化 tensor(0.7025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.4329e-01,  8.1453e-01, -1.9436e+00, -9.4853e-02, -8.5323e-01,
         -1.0515e+00,  1.5979e-01,  5.9231e-01, -1.5772e+00,  1.0101e-01,
         -1.6530e+00, -1.1899e+00,  3.3408e-01,  4.4892e-02, -7.7155e-02,
         -5.3806e-02,  5.5653e-02,  2.5447e-01, -1.0190e-01, -7.4723e-02,
         -3.5958e-01, -1.2436e-02, -2.9003e-01, -7.0946e-02,  3.2290e-01,
         -4.9053e-01,  1.0637e-01, -7.4784e-02, -9.9015e-02,  1.6873e-03,
         -2.0156e-02, -5.2298e-02, -4.1970e-02,  4.7672e-01, -1.6897e-01,
         -3.0706e-04, -2.8485e-01,  2.6586e-02, -3.6834e-01, -9.5032e-02,
         -2.4663e-02,  4.4087e-02, -2.9275e-01, -3.2066e-01,  2.3806e-01,
          5.6067e-01,  2.5339e-01,  5.8632e-01, -5.1881e-01,  1.7676e-01,
          3.3777e-01,  3.1474e-02, -2.4126e-01,  1.4753e-01, -6.2462e-01,
         -1.8311e-02, -2.3114e-01, -2.1427e-02, -4.3175e-01,  3.2445e-01,
         -4.2055e-01,  3.1758e-02, -5.2070e-01,  6.8910e-02, -6.6235e-01,
         -2.0125e-01,  6.4980e-01,  1.2291e-01,  3.7077e-01,  5.8388e-02,
         -6.3399e-02,  3.1124e-01]], device='cuda:0') tensor(0.2028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
651000 特征值优化 tensor(0.7025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.4573e-01,  8.1645e-01, -1.9403e+00, -8.8611e-02, -8.4629e-01,
         -1.0401e+00,  1.6864e-01,  6.0908e-01, -1.6064e+00,  1.2288e-01,
         -1.6588e+00, -1.1953e+00,  3.3517e-01,  4.4381e-02, -7.5805e-02,
         -5.2281e-02,  5.7135e-02,  2.5820e-01, -1.0116e-01, -7.3707e-02,
         -3.5959e-01, -1.2682e-02, -2.9420e-01, -6.1311e-02,  3.0915e-01,
         -5.0074e-01,  1.0440e-01, -7.3799e-02, -9.9382e-02,  2.0734e-03,
         -2.0302e-02, -5.1104e-02, -3.8359e-02,  4.7344e-01, -1.6815e-01,
          4.3041e-04, -2.8151e-01,  2.9308e-02, -3.7490e-01, -9.1910e-02,
         -2.5788e-02,  4.1705e-02, -2.9546e-01, -3.0765e-01,  2.2962e-01,
          5.7802e-01,  2.4684e-01,  5.8534e-01, -5.1924e-01,  1.7784e-01,
          3.3315e-01,  3.2342e-02, -2.5603e-01,  1.5375e-01, -6.2475e-01,
         -8.5311e-03, -2.3015e-01, -1.9787e-02, -4.3465e-01,  3.2501e-01,
         -4.1818e-01,  3.4095e-02, -5.2308e-01,  7.2958e-02, -6.7288e-01,
         -2.0812e-01,  6.4739e-01,  1.2627e-01,  3.8199e-01,  5.2254e-02,
         -5.9942e-02,  3.1294e-01]], device='cuda:0') tensor(0.2028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
652000 特征值优化 tensor(10.4125, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.8310e-01,  2.0520e-01, -1.7520e+00, -7.3994e-01, -2.2056e-01,
          1.0770e-01, -1.7524e+00,  5.9410e-01,  8.6035e-02, -1.6781e-01,
          1.2426e-01,  4.5575e-01, -3.3766e-02,  8.4467e-02,  3.9215e-01,
          2.3992e-01, -5.9830e-01, -1.6268e-01, -1.1962e-01, -1.4066e+00,
          8.1747e-01, -3.6063e-01,  1.6082e-01,  2.6927e-01, -1.0778e-01,
         -1.3802e-01,  1.1641e-01, -4.0690e-02,  2.3451e-01, -5.1431e-01,
         -1.2721e+00,  9.6672e-03, -2.4559e-04,  2.1159e-02,  7.3975e-01,
         -2.6122e-01, -1.7156e-02, -3.5758e-02,  1.2302e+00,  3.9537e-01,
         -2.4217e-01,  1.2226e+00,  1.7485e+00,  7.1000e-02, -8.8565e-01,
         -1.3255e-01,  5.1874e-02, -1.6187e+00,  1.6112e+00, -6.8326e-01,
         -1.4343e+00,  3.0719e-01,  5.3202e-01, -1.0072e+00, -4.9328e-02,
         -1.6011e-01,  2.0610e-01, -4.6281e-01, -2.3941e-02, -9.2361e-01,
          4.6436e-01,  4.0882e-02, -1.9423e-01,  2.3502e-02, -1.4586e+00,
         -1.9135e-01, -9.5927e-01, -2.3871e-01, -2.6438e-01,  3.5457e-01,
         -1.0033e+00, -2.8377e-01]], device='cuda:0') tensor(0.2052, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
653000 特征值优化 tensor(1.5723, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.6467e-01, -4.3255e-01, -2.4274e+00, -3.5116e-01, -9.9570e-01,
         -4.1328e-01, -1.6945e+00,  3.4175e-01, -5.1083e-01, -7.0445e-01,
         -4.7500e-01, -3.2430e-01,  3.7546e-02, -1.2075e-01,  8.2528e-02,
          7.1123e-02, -7.4937e-02, -1.3344e-01,  1.7204e-03, -3.6639e-01,
          2.0087e-01, -2.2177e-02, -5.1966e-02,  9.1008e-02, -1.3756e-01,
          1.4193e-02, -5.1433e-02,  1.5180e-02,  5.4827e-01, -2.5043e-01,
         -6.0497e-01,  2.7073e-02, -9.3814e-04,  1.5411e-02,  3.1476e-01,
         -1.0634e-01, -8.3493e-02, -3.4721e-02,  5.6920e-01,  1.8937e-01,
         -2.2802e-01,  5.1028e-01,  8.2718e-01, -6.9288e-02, -1.1317e-01,
          2.0009e-01, -7.9991e-02, -1.2332e+00,  1.4062e+00,  4.2708e-02,
         -1.3581e+00,  6.0654e-01, -2.4939e-01, -3.8781e-01,  6.5480e-02,
         -3.5170e-01, -2.0429e-01,  8.0180e-02,  1.0691e-01, -3.3811e-01,
          4.6218e-01,  3.4125e-02,  2.2430e-01,  3.0916e-02, -1.6063e+00,
          2.8129e-01, -4.3801e-01, -8.9631e-03, -7.4428e-02,  1.3205e-01,
         -1.0625e+00,  7.1849e-02]], device='cuda:0') tensor(0.2055, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
654000 特征值优化 tensor(0.7538, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.8052e-01, -5.9686e-01, -2.3765e+00, -1.3000e-01, -7.4402e-01,
         -4.4638e-01, -1.5940e+00,  2.6674e-01, -4.2165e-01, -5.9226e-01,
         -6.2146e-01, -2.7870e-01,  3.0250e-02,  1.9569e-02,  2.1044e-01,
          1.8629e-01,  1.5854e-02, -5.5263e-02,  7.6897e-02, -1.3396e-01,
          2.2303e-01, -5.8350e-02, -7.8762e-02,  1.5863e-01, -2.5591e-01,
          2.6198e-02, -9.8742e-02,  7.3880e-03,  6.0456e-01, -2.9150e-01,
         -5.6933e-01, -3.3149e-02, -3.4009e-02,  9.7227e-03,  2.5251e-01,
         -8.2512e-02, -1.2668e-01, -2.5152e-02,  5.0133e-01,  1.6572e-01,
         -1.6115e-01,  4.8382e-01,  4.5966e-01,  3.0168e-01, -1.4102e-01,
          1.3692e-01,  2.7877e-02, -1.2869e+00,  1.4136e+00, -4.5133e-02,
         -1.3376e+00,  4.9502e-01, -4.0193e-01, -2.9379e-01,  5.1057e-01,
         -6.0585e-02, -2.4132e-01,  9.5119e-02, -6.3609e-04, -5.4155e-01,
          6.1581e-01,  3.9066e-02,  3.2915e-01,  3.3051e-02, -1.1644e+00,
          1.2928e-01, -1.3884e-01, -1.2136e-01, -6.9139e-02,  1.0986e-01,
         -8.1347e-01, -4.7274e-02]], device='cuda:0') tensor(0.2106, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
655000 特征值优化 tensor(0.6731, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.7816e-01, -7.2111e-01, -2.4740e+00,  1.4424e-01, -4.8954e-01,
         -5.6739e-01, -1.8063e+00,  1.6543e-01, -2.7177e-01, -5.0908e-01,
         -6.4379e-01, -2.2005e-01,  2.4670e-02,  1.1400e-01,  2.1048e-01,
          2.0052e-01, -6.7107e-02, -2.7201e-02,  9.2095e-02, -1.2535e-01,
          2.1237e-01, -3.5715e-02, -7.8496e-02,  1.4991e-01, -2.3912e-01,
         -7.7529e-03, -1.4779e-01,  8.5679e-02,  7.4761e-01, -2.6328e-01,
         -5.0472e-01, -1.5842e-02, -3.2953e-02, -2.2448e-03,  2.2716e-01,
          2.4779e-02, -1.0863e-01, -2.5971e-02,  4.3555e-01,  1.6879e-01,
         -1.8961e-01,  5.0398e-01,  4.0673e-01,  3.1764e-01, -1.6813e-01,
          1.0352e-01,  3.9414e-02, -9.9568e-01,  1.5671e+00, -3.0933e-01,
         -7.2413e-01,  1.5431e-01, -4.3422e-01, -2.1874e-01,  5.1350e-01,
         -1.8914e-01, -3.2017e-01,  1.4165e-01,  1.9147e-01, -5.0362e-01,
          7.0339e-01, -3.6361e-02,  3.0842e-01,  4.0188e-02, -8.2781e-01,
         -1.7336e-02,  2.4025e-02, -1.5026e-01, -1.0699e-01,  1.7065e-01,
         -7.3228e-01, -2.5435e-02]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
656000 特征值优化 tensor(0.6496, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9016, -0.7108, -2.4895,  0.4781, -0.2892, -0.5817, -1.7639,  0.1653,
         -0.2207, -0.4843, -0.5873, -0.1861,  0.0255,  0.1116,  0.2245,  0.1934,
         -0.0546, -0.0255,  0.1076, -0.1323,  0.2116,  0.0124, -0.0898,  0.1517,
         -0.2425, -0.0412, -0.1498,  0.1151,  0.7157, -0.2259, -0.4464, -0.0327,
         -0.0506, -0.0041,  0.2223,  0.0308, -0.0802, -0.0151,  0.4335,  0.1564,
         -0.1975,  0.4910,  0.4137,  0.3206, -0.1749,  0.1016,  0.0363, -0.8287,
          1.4425, -0.1917, -0.3144, -0.0493, -0.4386, -0.1626,  0.4975, -0.2341,
         -0.3025,  0.1343,  0.2113, -0.4908,  0.6813, -0.0218,  0.3065,  0.0495,
         -0.8331, -0.0036,  0.0201, -0.1434, -0.1023,  0.1653, -0.7347, -0.0185]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
657000 特征值优化 tensor(0.6417, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9140, -0.7209, -2.3277,  0.6810,  0.0122, -0.6064, -1.7984,  0.2016,
         -0.2117, -0.4919, -0.5645, -0.1951,  0.0257,  0.0548,  0.2172,  0.2378,
         -0.0241, -0.0903,  0.0326, -0.1345,  0.2116,  0.0619, -0.1272,  0.1616,
         -0.2405, -0.0188, -0.1604,  0.1245,  0.6431, -0.1795, -0.3699, -0.0302,
         -0.0152, -0.0070,  0.2227,  0.0346, -0.0676, -0.0134,  0.4330,  0.1548,
         -0.2088,  0.4885,  0.4208,  0.3214, -0.1809,  0.1099,  0.0341, -0.7340,
          1.3277, -0.0951, -0.0629, -0.1452, -0.3917, -0.1091,  0.4785, -0.2202,
         -0.2900,  0.1298,  0.2103, -0.4848,  0.6444, -0.0111,  0.3113,  0.0264,
         -0.8466,  0.0035,  0.0279, -0.1456, -0.1183,  0.1829, -0.7252, -0.0218]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
658000 特征值优化 tensor(0.6363, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9171, -0.7016, -2.2277,  0.5753,  0.1799, -0.6278, -1.8845,  0.1772,
         -0.1507, -0.3991, -0.6406, -0.1231,  0.0255,  0.1133,  0.1942,  0.1692,
         -0.1103, -0.0705,  0.0746, -0.1346,  0.2118,  0.0653, -0.0783,  0.1236,
         -0.2668, -0.0771, -0.1585,  0.1013,  0.5798, -0.1829, -0.3360, -0.0411,
         -0.0682, -0.0169,  0.1926,  0.0670, -0.0939, -0.0247,  0.4088,  0.1235,
         -0.1851,  0.4687,  0.4223,  0.3211, -0.1811,  0.1009,  0.0338, -0.6769,
          1.2034, -0.0974,  0.0036, -0.1478, -0.4792, -0.0383,  0.4603, -0.2242,
         -0.2894,  0.1112,  0.2931, -0.4380,  0.7416, -0.0071,  0.3435,  0.0460,
         -0.7655, -0.0231, -0.0445, -0.0850, -0.0798,  0.1473, -0.7185, -0.0050]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
659000 特征值优化 tensor(0.6318, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9123, -0.7211, -2.0423,  0.3578,  0.1546, -0.6470, -1.9260,  0.2004,
         -0.0747, -0.3734, -0.5381, -0.0943,  0.0255,  0.0417,  0.1895,  0.2217,
         -0.0501, -0.0863,  0.0327, -0.1347,  0.2118,  0.0685, -0.0763,  0.1136,
         -0.2888, -0.0446, -0.1271,  0.1046,  0.5086, -0.1799, -0.3346, -0.0109,
         -0.0102, -0.0189,  0.1528,  0.1092, -0.0614, -0.0100,  0.3953,  0.1091,
         -0.2155,  0.4544,  0.4196,  0.3213, -0.1815,  0.1113,  0.0337, -0.6291,
          1.0491, -0.1033,  0.1056, -0.1407, -0.3491, -0.0928,  0.4575, -0.2402,
         -0.3112,  0.1301,  0.3237, -0.3862,  0.6851, -0.0148,  0.3249,  0.0138,
         -0.7689,  0.0064, -0.0661, -0.0547, -0.1598,  0.2145, -0.6577, -0.0265]],
       device='cuda:0') tensor(0.2061, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
660000 特征值优化 tensor(0.6315, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9122, -0.7183, -1.9710,  0.2787,  0.1506, -0.6464, -1.9426,  0.2038,
         -0.0700, -0.3765, -0.5184, -0.0975,  0.0253,  0.0377,  0.1911,  0.2250,
         -0.0491, -0.0889,  0.0340, -0.1342,  0.2119,  0.0656, -0.0730,  0.1104,
         -0.2831, -0.0340, -0.1299,  0.1073,  0.4905, -0.1768, -0.3357, -0.0095,
         -0.0101, -0.0187,  0.1518,  0.1122, -0.0608, -0.0086,  0.3950,  0.1099,
         -0.2166,  0.4550,  0.4203,  0.3209, -0.1806,  0.1093,  0.0341, -0.6212,
          1.0078, -0.1000,  0.1188, -0.1319, -0.3477, -0.0946,  0.4592, -0.2388,
         -0.3072,  0.1278,  0.3220, -0.3870,  0.6880, -0.0189,  0.3235,  0.0132,
         -0.7749,  0.0099, -0.0625, -0.0568, -0.1639,  0.2195, -0.6575, -0.0272]],
       device='cuda:0') tensor(0.2061, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
661000 特征值优化 tensor(0.6315, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9119, -0.7187, -1.9709,  0.2782,  0.1468, -0.6462, -1.9529,  0.2059,
         -0.0695, -0.3772, -0.5074, -0.0974,  0.0256,  0.0348,  0.1926,  0.2256,
         -0.0495, -0.0904,  0.0338, -0.1341,  0.2114,  0.0655, -0.0731,  0.1113,
         -0.2830, -0.0341, -0.1286,  0.1076,  0.4899, -0.1769, -0.3368, -0.0095,
         -0.0098, -0.0190,  0.1521,  0.1124, -0.0609, -0.0076,  0.3950,  0.1100,
         -0.2164,  0.4551,  0.4197,  0.3208, -0.1798,  0.1092,  0.0338, -0.6202,
          1.0070, -0.0994,  0.1197, -0.1316, -0.3471, -0.0951,  0.4605, -0.2358,
         -0.3063,  0.1268,  0.3211, -0.3874,  0.6894, -0.0216,  0.3218,  0.0136,
         -0.7761,  0.0111, -0.0627, -0.0571, -0.1650,  0.2226, -0.6580, -0.0275]],
       device='cuda:0') tensor(0.2061, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
662000 特征值优化 tensor(4.8662, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5573,  0.0407, -3.4359,  1.0114,  1.9218, -0.3456, -0.9457, -0.7656,
         -1.8062,  0.5475, -0.9317, -0.7243, -0.0873,  0.2187,  0.4472,  0.2764,
         -0.0038,  0.1226, -0.0746,  0.0072, -0.1202, -0.0518, -0.0101, -0.0145,
          0.0145, -0.8114,  0.8271, -0.0087,  0.0146,  1.1761,  0.6087,  0.3516,
         -0.4607,  0.2030, -0.4287,  0.1020,  0.0629, -0.0837,  0.5695, -1.3034,
         -0.3450,  0.7569, -0.3636, -0.0251,  0.7512,  0.2494,  0.0853,  0.0326,
          1.4575, -2.3739, -0.9202,  0.2856, -1.2868,  0.1196,  0.3269,  0.7350,
         -1.0185,  0.9052,  0.3721, -0.1179, -0.5599,  0.1104, -0.1874,  0.1749,
          0.3599, -0.4122,  0.5422,  0.5668, -0.4913, -0.3096, -1.4892, -0.3159]],
       device='cuda:0') tensor(0.2051, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
663000 特征值优化 tensor(0.8365, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.7712e-01,  1.7482e-01, -3.7953e+00,  1.1054e+00,  9.6408e-01,
         -1.2898e+00, -1.3228e+00, -5.1363e-01, -2.3631e+00,  1.1889e+00,
         -1.1234e+00, -1.3883e+00, -1.0383e-01, -6.8801e-02,  1.0602e-01,
         -2.1772e-02,  4.8560e-02,  2.2300e-01, -1.2819e-02, -2.6615e-03,
         -7.3388e-02, -1.2237e-01,  7.3046e-03,  1.1223e-01, -2.3598e-01,
         -3.1120e-01,  2.9079e-01,  7.4078e-02,  5.3678e-02,  9.9719e-01,
          2.2994e-01,  1.5397e-01, -1.7828e-01,  5.1338e-02, -1.0691e-01,
         -5.6783e-02,  5.1558e-02, -6.9568e-02,  5.1411e-01, -7.8035e-01,
         -7.4340e-03,  4.7270e-01, -7.1467e-02, -1.6521e-01,  4.3568e-01,
          2.5054e-01, -2.7232e-02,  7.9339e-02,  8.3088e-01, -2.0389e+00,
         -4.4158e-01,  1.6627e-01, -1.0293e+00,  2.7313e-01,  6.7076e-02,
          4.9129e-01,  1.5909e-01,  2.6010e-01,  8.5325e-02, -8.1514e-02,
          8.3922e-02, -5.5342e-02,  3.2061e-01,  1.8465e-01,  2.1871e-01,
         -5.0843e-01,  7.3347e-01,  2.7916e-01, -2.5547e-01, -1.3996e-01,
         -9.4648e-01, -1.3538e-01]], device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
664000 特征值优化 tensor(0.6764, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.4976e-01,  2.9510e-01, -3.7332e+00,  1.1659e+00,  6.9118e-01,
         -1.3108e+00, -1.2363e+00, -6.1526e-01, -2.4467e+00,  1.2099e+00,
         -1.2630e+00, -1.3910e+00, -1.0473e-01, -1.1467e-01,  1.3979e-01,
         -3.0702e-02, -9.8526e-03,  2.5173e-01,  3.7544e-02, -3.8813e-02,
         -6.6342e-02, -1.5060e-01,  7.4127e-02,  1.1057e-01, -3.7597e-01,
         -4.3492e-01,  1.1715e-01,  1.9819e-01,  4.9213e-02,  9.6239e-01,
          2.4002e-01,  1.0302e-01, -1.3862e-01,  4.9678e-02,  2.0379e-03,
         -8.9768e-02,  2.2618e-02, -6.7821e-02,  5.0841e-01, -7.2369e-01,
          2.4197e-02,  3.4853e-01, -5.2057e-03, -1.9595e-01,  4.2010e-01,
          1.9109e-01, -2.5777e-02,  1.2124e-01,  7.0052e-01, -1.8500e+00,
         -4.2398e-01,  1.7839e-01, -6.2424e-01,  9.3160e-02,  2.1825e-01,
          4.0648e-01,  1.5123e-01,  2.7324e-01,  4.1757e-02, -1.1233e-01,
          1.0723e-01, -1.3774e-02,  2.5927e-01,  1.8562e-01,  3.5533e-01,
         -3.7808e-01,  6.4046e-01,  2.2419e-01, -4.2126e-01, -1.0055e-01,
         -6.7218e-01, -3.3627e-01]], device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
665000 特征值优化 tensor(0.6729, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.2570e-01,  3.0097e-01, -3.6195e+00,  1.3697e+00,  5.7192e-01,
         -1.3324e+00, -1.1578e+00, -7.4167e-01, -2.4413e+00,  1.4225e+00,
         -1.3592e+00, -1.2867e+00, -1.0973e-01, -1.4526e-01,  1.6922e-01,
         -8.6964e-02, -4.4128e-03,  2.0034e-01, -3.4726e-02, -1.3981e-02,
         -7.2902e-02, -1.5925e-01,  1.2994e-01,  7.9967e-02, -3.7547e-01,
         -4.7636e-01,  1.5247e-01,  2.4900e-01,  4.1606e-02,  8.9645e-01,
          2.4551e-01,  8.7159e-02, -1.0379e-01,  4.6458e-02,  3.1622e-02,
         -8.0397e-02,  7.0009e-04, -4.4316e-02,  5.0892e-01, -6.7120e-01,
          5.1806e-02,  2.9105e-01, -1.8383e-02, -1.7206e-01,  4.1012e-01,
          2.0315e-01, -2.9943e-02,  2.0351e-01,  6.5957e-01, -1.6950e+00,
         -5.0742e-01,  1.8741e-01, -5.0633e-01,  3.5689e-02,  2.5192e-01,
          3.1736e-01,  1.9467e-01,  2.5645e-01,  4.1069e-02,  1.9468e-01,
          8.6882e-02,  3.8586e-02,  2.2174e-01,  1.7044e-01,  4.3429e-01,
         -3.3128e-01,  4.3610e-01,  2.3920e-01, -4.6689e-01, -1.1018e-01,
         -6.0456e-01, -3.6235e-01]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
666000 特征值优化 tensor(0.6357, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4147,  0.2946, -3.3939,  1.5886,  0.5560, -1.3616, -1.1873, -0.7247,
         -2.3483,  1.6267, -1.3527, -1.1701, -0.1076, -0.1638,  0.1573, -0.0824,
          0.0331,  0.1989, -0.0672,  0.0306, -0.0694, -0.1952,  0.0941,  0.0708,
         -0.3603, -0.5029,  0.0934,  0.3090,  0.0368,  0.8211,  0.2495,  0.0900,
         -0.0975,  0.0498,  0.0337, -0.0991,  0.0037, -0.0615,  0.5295, -0.6389,
          0.0422,  0.2288, -0.0055, -0.1543,  0.3767,  0.2361, -0.0367,  0.2430,
          0.6513, -1.5404, -0.5455,  0.2224, -0.5107,  0.0446,  0.2740,  0.3427,
          0.1965,  0.2573,  0.1249,  0.0744,  0.1138,  0.0096,  0.1977,  0.1964,
          0.3802, -0.3035,  0.3636,  0.2014, -0.5260, -0.0633, -0.6513, -0.3021]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
667000 特征值优化 tensor(0.6357, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4250,  0.3067, -3.1147,  1.6888,  0.5459, -1.3771, -1.1714, -0.7298,
         -2.2270,  1.7574, -1.4332, -1.0663, -0.1057, -0.1119,  0.1914, -0.0939,
          0.0389,  0.1541,  0.0110,  0.0096, -0.0703, -0.2104,  0.0935,  0.0694,
         -0.3005, -0.4652, -0.0177,  0.4153,  0.0198,  0.7375,  0.2510,  0.0692,
         -0.0607,  0.0521,  0.0068, -0.0806, -0.0093, -0.0349,  0.5443, -0.6009,
          0.0532,  0.1834, -0.0266, -0.1365,  0.3787,  0.2110, -0.0308,  0.2757,
          0.6421, -1.3743, -0.5728,  0.2399, -0.4754,  0.0224,  0.2394,  0.2781,
          0.2074,  0.2521,  0.1321,  0.0242,  0.1293,  0.0224,  0.1647,  0.1989,
          0.3243, -0.2765,  0.2839,  0.2041, -0.5518, -0.0531, -0.5801, -0.3069]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
668000 特征值优化 tensor(0.6235, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.3532e-01,  3.1266e-01, -2.9296e+00,  1.6894e+00,  5.5267e-01,
         -1.3945e+00, -1.1524e+00, -7.7474e-01, -2.1053e+00,  1.6947e+00,
         -1.4319e+00, -1.0379e+00, -1.0619e-01, -1.2762e-01,  1.7684e-01,
         -8.2457e-02,  4.1938e-02,  1.5979e-01, -2.3006e-02,  4.8149e-04,
         -7.1861e-02, -2.0461e-01,  4.7256e-02,  5.2963e-02, -3.4078e-01,
         -4.2275e-01, -3.0715e-02,  4.6384e-01,  2.0861e-02,  6.8505e-01,
          2.4890e-01,  8.8243e-02, -6.6581e-02,  5.2363e-02,  2.0685e-02,
         -7.9708e-02, -7.2065e-03, -4.3254e-02,  5.3615e-01, -5.6737e-01,
          5.1408e-02,  1.4114e-01, -2.5515e-02, -1.2709e-01,  3.6584e-01,
          2.1184e-01, -3.2216e-02,  2.8655e-01,  5.9824e-01, -1.2247e+00,
         -5.8442e-01,  2.3379e-01, -4.9516e-01,  3.4474e-02,  2.4451e-01,
          2.6262e-01,  2.1293e-01,  2.5155e-01,  1.5077e-01, -1.7767e-02,
          9.3237e-02,  3.3184e-02,  1.5091e-01,  2.0898e-01,  2.8030e-01,
         -2.3592e-01,  2.6141e-01,  1.9943e-01, -5.4371e-01, -5.4284e-02,
         -5.0506e-01, -3.1690e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
669000 特征值优化 tensor(0.6217, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4554,  0.3226, -2.7152,  1.6757,  0.5483, -1.4010, -1.1434, -0.8230,
         -2.0378,  1.6139, -1.4644, -0.9759, -0.1042, -0.0998,  0.1971, -0.0925,
         -0.0125,  0.1793,  0.0237, -0.0277, -0.0725, -0.1973,  0.0943, -0.0614,
         -0.2994, -0.4165, -0.0856,  0.4831,  0.0227,  0.6321,  0.2493,  0.0938,
         -0.0889,  0.0522,  0.0164, -0.0751, -0.0102, -0.0416,  0.5102, -0.5480,
          0.0544,  0.1276, -0.0192, -0.1281,  0.3603,  0.2009, -0.0259,  0.2825,
          0.6024, -1.1190, -0.5959,  0.2288, -0.4834,  0.0298,  0.2600,  0.2523,
          0.2071,  0.2562,  0.1445, -0.1142,  0.0717,  0.0507,  0.1525,  0.1936,
          0.3076, -0.2205,  0.2675,  0.1850, -0.5198, -0.0645, -0.5121, -0.3053]],
       device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
670000 特征值优化 tensor(0.6255, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4483,  0.3346, -2.5482,  1.5773,  0.5626, -1.4082, -1.1639, -0.7757,
         -1.9434,  1.5283, -1.4822, -0.9395, -0.1015, -0.0467,  0.2006, -0.0375,
          0.0233,  0.1990, -0.0197, -0.0077, -0.0740, -0.1800,  0.0588,  0.0158,
         -0.3223, -0.3791, -0.0776,  0.4888,  0.0328,  0.5931,  0.2493,  0.0923,
         -0.0678,  0.0492,  0.0251, -0.0761, -0.0093, -0.0401,  0.4839, -0.5348,
          0.0519,  0.1078, -0.0240, -0.1262,  0.3549,  0.2131, -0.0282,  0.2696,
          0.6101, -1.0387, -0.5828,  0.2097, -0.5064,  0.0378,  0.2464,  0.2476,
          0.2281,  0.2536,  0.1508, -0.0213,  0.0654,  0.0560,  0.1128,  0.2262,
          0.3014, -0.1992,  0.2427,  0.1603, -0.5106, -0.0619, -0.4889, -0.2874]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
671000 特征值优化 tensor(0.6201, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.5934e-01,  3.5206e-01, -2.2797e+00,  1.4414e+00,  5.4492e-01,
         -1.4074e+00, -1.1733e+00, -8.4396e-01, -1.8092e+00,  1.4685e+00,
         -1.4691e+00, -8.7462e-01, -1.0165e-01, -3.7540e-02,  2.1249e-01,
         -8.8699e-02,  1.9649e-03,  2.0014e-01,  3.6455e-02, -5.7454e-02,
         -7.4094e-02, -1.7682e-01,  4.7948e-02,  6.0552e-02, -2.2088e-01,
         -3.7878e-01, -2.5841e-02,  4.2598e-01,  3.6583e-02,  5.5936e-01,
          2.5061e-01,  9.5717e-02, -1.0214e-01,  4.5631e-02, -6.1384e-03,
         -7.3323e-02, -6.1419e-03, -5.7830e-02,  4.6228e-01, -4.9806e-01,
          4.7798e-02,  9.4562e-02, -1.7963e-02, -1.2238e-01,  3.5613e-01,
          2.0103e-01, -2.3914e-02,  1.8188e-01,  6.3552e-01, -9.8351e-01,
         -5.3192e-01,  2.1234e-01, -4.9281e-01,  3.1084e-02,  2.5958e-01,
          2.4689e-01,  2.0311e-01,  2.6338e-01,  1.2163e-01, -9.1813e-02,
          9.6915e-02,  4.5884e-02,  1.2669e-01,  1.9678e-01,  2.8784e-01,
         -1.6349e-01,  2.8302e-01,  1.3964e-01, -5.6164e-01, -4.0566e-02,
         -5.0354e-01, -2.8270e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
672000 特征值优化 tensor(0.6139, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.6104e-01,  3.3474e-01, -2.0254e+00,  1.3159e+00,  5.5519e-01,
         -1.4112e+00, -1.1711e+00, -8.2769e-01, -1.6971e+00,  1.3394e+00,
         -1.5101e+00, -8.2260e-01, -9.9734e-02, -3.5150e-02,  2.1367e-01,
         -4.4158e-02,  3.3635e-03,  2.2283e-01, -3.3089e-02, -1.6576e-02,
         -7.3935e-02, -1.6499e-01,  4.3155e-02,  4.7649e-02, -2.3682e-01,
         -3.0475e-01,  1.4312e-02,  4.0919e-01,  4.6601e-02,  5.1205e-01,
          2.4955e-01,  6.6301e-02, -3.5569e-02,  4.8723e-02,  4.6974e-04,
         -8.3903e-02, -9.8320e-03, -3.7013e-02,  4.3548e-01, -4.9653e-01,
          5.1589e-02,  9.3032e-02, -2.7942e-03, -1.4989e-01,  3.6055e-01,
          1.9053e-01, -1.5042e-02,  1.3433e-01,  6.5953e-01, -8.9618e-01,
         -4.9649e-01,  2.0373e-01, -4.7210e-01,  2.1032e-02,  2.7574e-01,
          2.2261e-01,  2.1370e-01,  2.6296e-01,  1.5160e-01, -1.1105e-02,
          9.9261e-02,  4.7660e-02,  1.0150e-01,  2.2224e-01,  2.7399e-01,
         -1.3556e-01,  3.1856e-01,  1.1476e-01, -5.2495e-01, -5.3554e-02,
         -5.3192e-01, -2.5924e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
673000 特征值优化 tensor(0.6151, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4648,  0.3319, -1.8647,  1.1884,  0.5442, -1.4239, -1.1615, -0.8400,
         -1.6203,  1.2918, -1.5105, -0.7632, -0.1021, -0.0403,  0.2107, -0.0504,
         -0.0379,  0.2260,  0.0586, -0.0291, -0.0742, -0.1386,  0.0714,  0.0408,
         -0.1561, -0.3217,  0.0394,  0.3558,  0.0469,  0.4773,  0.2508,  0.0588,
         -0.0520,  0.0456, -0.0126, -0.0767, -0.0137, -0.0301,  0.4168, -0.4674,
          0.0559,  0.0743,  0.0027, -0.1568,  0.3702,  0.1796, -0.0105,  0.1173,
          0.6641, -0.8298, -0.4883,  0.1801, -0.4691,  0.0183,  0.2771,  0.2314,
          0.2036,  0.2655,  0.1279, -0.0692,  0.0858,  0.0525,  0.1001,  0.2125,
          0.2767, -0.1093,  0.3077,  0.0935, -0.5272, -0.0500, -0.5271, -0.2518]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
674000 特征值优化 tensor(0.6136, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.5322e-01,  3.3282e-01, -1.8061e+00,  1.1312e+00,  5.4315e-01,
         -1.4150e+00, -1.1744e+00, -7.6743e-01, -1.5910e+00,  1.2440e+00,
         -1.5302e+00, -7.3328e-01, -1.0123e-01, -5.7899e-02,  2.2647e-01,
          3.6637e-02, -2.6457e-02,  2.8494e-01,  1.0750e-02, -1.9050e-02,
         -7.1872e-02, -1.2629e-01,  7.6494e-02,  2.6616e-02, -2.1782e-01,
         -2.8200e-01,  4.6183e-02,  3.7996e-01,  4.7964e-02,  4.6446e-01,
          2.5082e-01,  3.1413e-02,  3.3748e-03,  4.9113e-02, -2.1446e-02,
         -7.8948e-02, -1.1457e-02, -1.9253e-02,  3.9343e-01, -4.7564e-01,
          5.4042e-02,  8.2202e-02,  7.1453e-05, -1.5342e-01,  3.6993e-01,
          1.8845e-01, -1.3759e-02,  1.1137e-01,  6.6322e-01, -7.9974e-01,
         -4.8227e-01,  1.6643e-01, -4.3937e-01,  3.5999e-03,  2.6405e-01,
          2.0601e-01,  1.9540e-01,  2.7155e-01,  1.5847e-01, -1.5987e-02,
          1.1888e-01,  4.3289e-02,  7.2826e-02,  2.3587e-01,  2.9770e-01,
         -1.0457e-01,  3.2151e-01,  7.3360e-02, -5.3467e-01, -5.0120e-02,
         -5.6155e-01, -2.3176e-01]], device='cuda:0') tensor(0.2052, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
675000 特征值优化 tensor(0.5814, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4710,  0.3305, -1.7316,  1.0964,  0.4692, -1.4113, -1.1938, -0.8631,
         -1.4392,  1.1364, -1.5490, -0.6705, -0.0969,  0.0168,  0.2327,  0.0286,
         -0.0357,  0.2994, -0.0332, -0.0141, -0.0730, -0.1229,  0.0371,  0.0235,
         -0.2004, -0.2757,  0.0908,  0.3272,  0.0515,  0.4506,  0.2497,  0.0614,
         -0.0660,  0.0498,  0.0377, -0.1002, -0.0168, -0.0107,  0.3714, -0.4471,
          0.0592,  0.0662, -0.0069, -0.1549,  0.3674,  0.1965, -0.0171,  0.0930,
          0.6827, -0.7834, -0.4698,  0.1623, -0.4518,  0.0277,  0.0517, -0.0316,
          0.2417,  0.2482,  0.4053, -0.1105,  0.1555,  0.0339,  0.0685,  0.2227,
          0.2920, -0.0767,  0.3151,  0.0903, -0.7192,  0.0434, -0.5570, -0.2392]],
       device='cuda:0') tensor(0.2097, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
676000 特征值优化 tensor(0.5718, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.5020e-01,  3.4384e-01, -1.6659e+00,  1.0365e+00,  4.7398e-01,
         -1.4207e+00, -1.2366e+00, -9.7564e-01, -1.1986e+00,  9.9757e-01,
         -1.6438e+00, -5.4113e-01, -9.8500e-02,  4.1417e-03,  2.3365e-01,
         -4.6271e-02, -1.5076e-02,  2.4964e-01, -9.4525e-02, -2.2050e-02,
         -7.1671e-02, -1.0980e-01,  8.3283e-02, -5.4677e-04, -1.8161e-01,
         -2.6299e-01,  1.1547e-01,  3.0261e-01,  5.2073e-02,  4.3484e-01,
          2.4961e-01,  5.0780e-02, -5.3712e-02,  4.9448e-02, -1.1826e-02,
         -5.8526e-02, -1.4522e-02,  2.4013e-02,  3.1484e-01, -3.9562e-01,
          5.5323e-02,  2.7207e-02, -1.1773e-03, -1.6176e-01,  3.8033e-01,
          1.8387e-01, -1.2339e-02,  8.8412e-02,  6.8173e-01, -7.5129e-01,
         -4.6802e-01,  1.4897e-01, -4.3936e-01,  1.9560e-02,  3.1565e-02,
         -2.0407e-01,  2.3561e-01,  2.5360e-01,  3.8565e-01, -9.9335e-02,
          1.6668e-01,  4.0705e-02,  4.7518e-02,  2.4940e-01,  2.8218e-01,
         -1.3547e-02,  3.3748e-01,  3.1453e-02, -8.2804e-01,  1.2235e-01,
         -5.6099e-01, -2.0536e-01]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
677000 特征值优化 tensor(0.5756, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.7298e-01,  3.5700e-01, -1.6185e+00,  1.0274e+00,  4.5628e-01,
         -1.4215e+00, -1.1562e+00, -1.1185e+00, -1.0384e+00,  8.8810e-01,
         -1.5510e+00, -4.5446e-01, -9.6859e-02, -1.4243e-02,  2.2828e-01,
         -1.0115e-01,  4.9709e-02,  1.5852e-01, -9.1338e-02,  3.4702e-02,
         -7.0579e-02, -1.0546e-01,  9.1709e-02, -1.0019e-02, -1.1097e-01,
         -2.6454e-01,  1.1030e-01,  2.8555e-01,  5.1444e-02,  4.2117e-01,
          2.5156e-01,  6.2352e-02, -7.4625e-02,  4.9594e-02,  1.8787e-02,
         -8.6946e-02, -9.0270e-03,  2.2892e-02,  2.8553e-01, -3.5345e-01,
          5.0201e-02, -4.1540e-03, -6.8600e-04, -1.4481e-01,  3.5312e-01,
          2.0020e-01, -3.0250e-02,  8.6544e-02,  6.8767e-01, -7.2887e-01,
         -4.7527e-01,  1.4813e-01, -4.5444e-01,  2.6795e-02,  6.8153e-02,
          7.4799e-02,  2.3237e-01,  2.5577e-01,  3.9769e-01, -1.0071e-01,
          1.0388e-01,  4.0714e-02,  6.4680e-02,  1.7203e-01,  2.5563e-01,
          3.9730e-02,  3.2447e-01,  2.9228e-02, -7.4468e-01,  6.8288e-02,
         -5.2298e-01, -2.0691e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
678000 特征值优化 tensor(0.5731, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4925,  0.3386, -1.5875,  1.0105,  0.4674, -1.4290, -1.1597, -1.2054,
         -0.9193,  0.7948, -1.6355, -0.4182, -0.0961,  0.0170,  0.1976, -0.1187,
          0.0921,  0.1123, -0.0848,  0.0671, -0.0676, -0.1004,  0.0978, -0.0192,
         -0.0995, -0.2486,  0.1213,  0.2682,  0.0509,  0.4144,  0.2500,  0.0634,
         -0.0772,  0.0512,  0.0221, -0.0905, -0.0021,  0.0477,  0.2605, -0.3311,
          0.0503, -0.0162,  0.0043, -0.1898,  0.3961,  0.1971, -0.0320,  0.0837,
          0.6901, -0.7135, -0.4793,  0.1450, -0.4476,  0.0247,  0.1918,  0.1465,
          0.2358,  0.2522,  0.3913, -0.0968,  0.0268,  0.0558,  0.0414,  0.1903,
          0.2422,  0.0771,  0.3393,  0.0148, -0.6762,  0.0652, -0.5189, -0.2019]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
679000 特征值优化 tensor(0.5701, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.8748e-01,  3.2328e-01, -1.5755e+00,  9.9320e-01,  4.5913e-01,
         -1.4314e+00, -1.1567e+00, -1.2677e+00, -8.9170e-01,  6.7951e-01,
         -1.6860e+00, -3.1009e-01, -9.5338e-02,  1.1846e-01,  2.0973e-01,
         -5.3378e-02,  7.2219e-02,  9.4515e-02, -2.0412e-01,  1.9542e-02,
         -6.8307e-02, -9.7263e-02,  9.8073e-02, -1.3095e-02, -1.0571e-01,
         -2.3125e-01,  1.3961e-01,  2.5693e-01,  5.1506e-02,  4.1074e-01,
          2.5243e-01,  5.5390e-02, -5.4789e-02,  5.2234e-02,  1.4851e-02,
         -8.4346e-02,  1.0886e-03,  4.6270e-02,  2.2898e-01, -3.2805e-01,
          5.3040e-02, -2.3540e-02,  6.0871e-03, -1.8092e-01,  3.8705e-01,
          1.9949e-01, -2.8357e-02,  8.3871e-02,  6.8645e-01, -7.0400e-01,
         -4.7601e-01,  1.4060e-01, -4.4468e-01,  1.9927e-02, -2.1994e-02,
         -6.4436e-02,  2.2679e-01,  2.5628e-01,  3.9259e-01, -9.7144e-02,
         -9.3686e-03,  6.3038e-02,  3.5215e-02,  1.8214e-01,  2.9164e-01,
          6.6430e-02,  3.3246e-01, -2.3021e-02, -6.3162e-01,  5.5006e-02,
         -5.5771e-01, -1.5327e-01]], device='cuda:0') tensor(0.2062, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
680000 特征值优化 tensor(0.5708, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4834,  0.3082, -1.5590,  0.9803,  0.4602, -1.4330, -1.1281, -1.4102,
         -0.8098,  0.6603, -1.7029, -0.3283, -0.0922,  0.0879,  0.2193, -0.0949,
          0.1448,  0.0688,  0.0292,  0.0336, -0.0750, -0.0963,  0.1054, -0.0115,
         -0.0986, -0.2531,  0.1532,  0.2373,  0.0517,  0.4094,  0.2504,  0.0614,
         -0.0600,  0.0523,  0.0131, -0.0801,  0.0177,  0.0621,  0.2210, -0.3076,
          0.0325, -0.0328, -0.0051, -0.1984,  0.4079,  0.1813, -0.0167,  0.0792,
          0.6895, -0.7020, -0.4737,  0.1392, -0.4438,  0.0244,  0.0619,  0.0469,
          0.2260,  0.2564,  0.3862, -0.1071, -0.0948,  0.0639,  0.0561,  0.1719,
          0.2719,  0.0968,  0.3502, -0.0196, -0.5520,  0.0605, -0.5375, -0.1703]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
681000 特征值优化 tensor(0.5646, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4793,  0.3218, -1.5639,  0.9803,  0.4628, -1.4297, -1.1631, -1.4025,
         -0.7985,  0.6375, -1.8064, -0.3025, -0.0939,  0.1378,  0.1684, -0.0384,
          0.0827,  0.0514, -0.1210,  0.0154, -0.0672, -0.0959,  0.1125, -0.0181,
         -0.0870, -0.2447,  0.1505,  0.2396,  0.0512,  0.4091,  0.2507,  0.0633,
         -0.0621,  0.0505,  0.0118, -0.0866,  0.0195,  0.0660,  0.2163, -0.3095,
          0.0520, -0.0324,  0.0019, -0.1623,  0.3724,  0.1862, -0.0145,  0.0803,
          0.6937, -0.7057, -0.4755,  0.1395, -0.4335,  0.0156,  0.0749,  0.1882,
          0.2247,  0.2588,  0.3900, -0.1107, -0.0467,  0.0460,  0.0430,  0.1637,
          0.2629,  0.0982,  0.3498, -0.0287, -0.6024,  0.0744, -0.5468, -0.1596]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
682000 特征值优化 tensor(0.5686, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4904,  0.3116, -1.5345,  0.9517,  0.4588, -1.4360, -1.1451, -1.5082,
         -0.7537,  0.6051, -1.8810, -0.2729, -0.0931,  0.1504,  0.1767, -0.0860,
          0.1316,  0.0560, -0.0341,  0.0247, -0.0735, -0.0876,  0.1135, -0.0182,
         -0.0779, -0.2254,  0.1579,  0.2349,  0.0514,  0.4008,  0.2511,  0.0657,
         -0.0643,  0.0525,  0.0124, -0.0884,  0.0245,  0.0702,  0.2036, -0.2995,
          0.0584, -0.0413, -0.0039, -0.2034,  0.4083,  0.1845, -0.0174,  0.0776,
          0.6883, -0.6805, -0.4729,  0.1298, -0.4313,  0.0148,  0.0225,  0.1378,
          0.2235,  0.2582,  0.3867, -0.1042, -0.1124,  0.0630,  0.0304,  0.1784,
          0.2656,  0.1084,  0.3391, -0.0378, -0.6174,  0.0894, -0.5408, -0.1507]],
       device='cuda:0') tensor(0.2056, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
683000 特征值优化 tensor(0.5711, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.8612e-01,  3.0527e-01, -1.5323e+00,  9.4797e-01,  4.5974e-01,
         -1.4413e+00, -1.1774e+00, -1.5075e+00, -7.0699e-01,  5.6337e-01,
         -1.9375e+00, -2.3804e-01, -9.4080e-02,  1.3390e-01,  1.6937e-01,
         -5.8432e-02,  9.4446e-02,  3.7525e-02, -1.1663e-01,  2.6355e-02,
         -6.9362e-02, -8.8687e-02,  1.1413e-01, -1.7550e-02, -7.2926e-02,
         -2.1895e-01,  1.6519e-01,  2.2808e-01,  5.1209e-02,  4.0201e-01,
          2.5145e-01,  5.1422e-02, -5.0509e-02,  5.3526e-02,  1.1479e-02,
         -8.9250e-02,  2.6371e-02,  7.2703e-02,  1.9309e-01, -2.8850e-01,
          4.8685e-02, -5.1044e-02, -4.8531e-04, -1.9774e-01,  4.0318e-01,
          1.8608e-01, -1.2907e-02,  7.3950e-02,  6.9223e-01, -6.8761e-01,
         -4.6923e-01,  1.3100e-01, -4.2787e-01,  1.1904e-02,  2.8833e-02,
          8.3086e-02,  2.2107e-01,  2.5785e-01,  3.8649e-01, -1.0227e-01,
         -1.0591e-01,  6.7292e-02,  3.1406e-02,  1.9186e-01,  2.6190e-01,
          1.1998e-01,  3.4176e-01, -4.8575e-02, -5.7900e-01,  1.0112e-01,
         -5.4081e-01, -1.4115e-01]], device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
684000 特征值优化 tensor(0.5835, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4931,  0.3079, -1.5389,  0.9553,  0.4268, -1.4447, -1.1906, -1.5400,
         -0.6774,  0.5701, -2.0097, -0.2339, -0.0990,  0.1057,  0.1758, -0.0545,
          0.0701,  0.0599, -0.0846,  0.0258, -0.0756, -0.0919,  0.1125, -0.0248,
         -0.0752, -0.2034,  0.1691,  0.2278,  0.0521,  0.4047,  0.2546,  0.0446,
         -0.0376,  0.0510,  0.0074, -0.0939,  0.0327,  0.0788,  0.1906, -0.2866,
          0.0560, -0.0498, -0.0023, -0.1912,  0.3992,  0.1915, -0.0166,  0.0746,
          0.6903, -0.6895, -0.4702,  0.1331, -0.4287,  0.0169,  0.0482,  0.1192,
          0.2186,  0.2663,  0.3850, -0.1017, -0.1263,  0.0667,  0.0197,  0.1936,
          0.2521,  0.1277,  0.3446, -0.0541, -0.5790,  0.1064, -0.5528, -0.1356]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
685000 特征值优化 tensor(0.5715, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.8877e-01,  3.2996e-01, -1.5390e+00,  9.5715e-01,  4.5467e-01,
         -1.4489e+00, -1.2199e+00, -1.4857e+00, -7.1827e-01,  5.1824e-01,
         -2.0598e+00, -1.9423e-01, -9.2349e-02,  5.0514e-02,  2.6696e-01,
         -1.0307e-01,  6.0070e-02,  8.3013e-02, -1.4581e-01,  1.1742e-03,
         -6.9434e-02, -9.0643e-02,  1.2068e-01, -2.9894e-02, -8.0706e-02,
         -2.0444e-01,  1.7637e-01,  2.1649e-01,  5.1799e-02,  4.0442e-01,
          2.4990e-01, -1.1038e-03,  2.6063e-02,  5.0277e-02,  7.9794e-03,
         -8.8102e-02,  2.2400e-02,  8.3724e-02,  1.8375e-01, -2.9495e-01,
          8.7208e-02, -5.0216e-02,  2.9699e-04, -1.9195e-01,  3.9519e-01,
          1.8774e-01, -1.5824e-02,  7.5928e-02,  6.8623e-01, -6.8778e-01,
         -4.6927e-01,  1.3325e-01, -4.0187e-01,  4.6992e-03, -5.9465e-02,
         -2.3219e-01,  2.1763e-01,  2.6951e-01,  3.8696e-01, -9.8717e-02,
         -6.5623e-02,  6.7227e-02,  2.1434e-02,  1.9138e-01,  2.9106e-01,
          1.0722e-01,  3.3955e-01, -6.3600e-02, -6.0506e-01,  6.8305e-02,
         -5.6066e-01, -1.2307e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
686000 特征值优化 tensor(0.5701, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.9866e-01,  3.2406e-01, -1.5364e+00,  9.5413e-01,  4.5107e-01,
         -1.4779e+00, -1.1937e+00, -1.5390e+00, -6.5561e-01,  4.9656e-01,
         -2.0159e+00, -1.7602e-01, -9.4871e-02,  9.2207e-02,  2.5001e-01,
         -7.1435e-02,  1.0216e-01, -3.2519e-02, -1.8549e-01, -3.4925e-04,
         -6.9664e-02, -9.0168e-02,  1.3907e-01, -3.5852e-02, -6.8514e-02,
         -1.9653e-01,  1.8715e-01,  2.0139e-01,  5.1537e-02,  4.0333e-01,
          2.5099e-01,  1.2200e-02,  1.0770e-02,  4.9913e-02, -1.9294e-04,
         -8.4397e-02,  3.2777e-02,  8.2061e-02,  1.7506e-01, -2.8468e-01,
          7.2812e-02, -5.6830e-02,  3.7884e-03, -1.9757e-01,  4.0006e-01,
          1.9337e-01, -2.4026e-02,  7.5675e-02,  6.8994e-01, -6.8852e-01,
         -4.7017e-01,  1.3260e-01, -4.1043e-01,  6.2254e-03, -1.2238e-01,
         -1.7841e-01,  2.2088e-01,  2.7482e-01,  3.8474e-01, -9.9570e-02,
         -1.0922e-01,  5.8722e-02,  2.6116e-02,  1.7654e-01,  2.7721e-01,
          1.2214e-01,  3.4882e-01, -7.3507e-02, -5.6596e-01,  6.7419e-02,
         -5.5916e-01, -1.1986e-01]], device='cuda:0') tensor(0.2050, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
687000 特征值优化 tensor(0.5688, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.8803e-01,  3.3111e-01, -1.5221e+00,  9.3430e-01,  4.9445e-01,
         -1.5545e+00, -1.2294e+00, -1.4976e+00, -6.2873e-01,  4.9772e-01,
         -2.1306e+00, -1.3311e-01, -9.4139e-02,  1.0353e-01,  1.4900e-01,
         -3.3067e-02,  1.5387e-01,  7.8343e-02, -6.7771e-02,  4.5888e-02,
         -7.1613e-02, -8.0950e-02,  1.8405e-01, -6.7408e-02, -7.2221e-02,
         -2.1342e-01,  1.9612e-01,  1.9111e-01,  5.1947e-02,  3.9447e-01,
          2.5200e-01,  6.0011e-02, -6.2142e-02,  5.3356e-02,  1.6976e-02,
         -9.9677e-02,  1.6620e-02,  8.1297e-02,  1.6990e-01, -2.7012e-01,
          1.2670e-01, -7.0673e-02, -1.7880e-03, -1.5725e-01,  3.6286e-01,
          1.9105e-01, -2.4709e-02,  8.1745e-02,  6.9037e-01, -6.6498e-01,
         -4.7386e-01,  1.1998e-01, -4.6293e-01,  2.0951e-02,  4.9556e-02,
          4.0662e-02,  2.7516e-01,  2.5910e-01,  3.8808e-01, -1.0541e-01,
         -4.7401e-02,  6.8852e-02,  2.1315e-02,  1.7376e-01,  2.6197e-01,
          1.3768e-01,  3.3193e-01, -7.4757e-02, -6.2437e-01,  1.8738e-02,
         -5.7204e-01, -1.0120e-01]], device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
688000 特征值优化 tensor(0.5735, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5054,  0.3257, -1.5264,  0.9332,  0.4523, -1.5580, -1.2401, -1.5295,
         -0.6183,  0.4980, -2.1483, -0.1343, -0.0937,  0.0954,  0.2121, -0.0575,
          0.0767,  0.0510, -0.1170,  0.0128, -0.0711, -0.0813,  0.2064, -0.0578,
         -0.0512, -0.1834,  0.1452,  0.2524,  0.0521,  0.3948,  0.2513,  0.0785,
         -0.0887,  0.0535,  0.0095, -0.0946,  0.0110,  0.0777,  0.1721, -0.2726,
          0.1520, -0.0728,  0.0059, -0.1664,  0.3644,  0.1858, -0.0192,  0.0861,
          0.6869, -0.6634, -0.4728,  0.1200, -0.4672,  0.0353,  0.0351,  0.0030,
          0.2668,  0.2637,  0.3902, -0.1023, -0.0218,  0.0702,  0.0552,  0.1713,
          0.2561,  0.1320,  0.3343, -0.0799, -0.6535, -0.0129, -0.5600, -0.1013]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
689000 特征值优化 tensor(0.5731, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5130,  0.3197, -1.5304,  0.9368,  0.4582, -1.5625, -1.2695, -1.5619,
         -0.5848,  0.5281, -2.3150, -0.1062, -0.0930,  0.0821,  0.1962, -0.0905,
          0.0981,  0.0544, -0.0885,  0.0152, -0.0720, -0.0812,  0.2559, -0.0549,
         -0.0447, -0.1707,  0.1480,  0.2465,  0.0517,  0.3952,  0.2498,  0.0884,
         -0.1027,  0.0544, -0.0199, -0.0741,  0.0116,  0.0846,  0.1699, -0.2643,
          0.1970, -0.0823,  0.0065, -0.1693,  0.3655,  0.1838, -0.0168,  0.0860,
          0.6901, -0.6653, -0.4737,  0.1205, -0.4792,  0.0427,  0.0512,  0.0238,
          0.2560,  0.2696,  0.3895, -0.0966, -0.0092,  0.0742,  0.0396,  0.1744,
          0.2470,  0.1394,  0.3372, -0.0959, -0.7034, -0.0386, -0.5684, -0.0896]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
690000 特征值优化 tensor(0.5447, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.0685e-01,  3.2860e-01, -1.5824e+00,  9.2490e-01,  4.4074e-01,
         -1.8545e+00, -1.4078e+00, -1.3766e+00, -5.9921e-01,  5.0790e-01,
         -2.6271e+00, -2.6289e-02, -9.4402e-02,  1.1085e-01,  1.9001e-01,
         -9.1096e-02,  5.9702e-02,  7.1780e-02, -3.5303e-02, -2.1545e-02,
         -6.8198e-02, -7.6283e-02,  4.1521e-01, -2.0202e-01, -9.7564e-02,
         -2.2165e-01,  1.1080e-01,  2.7976e-01,  5.4529e-02,  4.0351e-01,
          2.4851e-01,  9.1340e-02, -7.8106e-02,  4.9599e-02, -2.6529e-02,
         -7.4148e-02, -6.8983e-03,  6.0104e-02,  1.5251e-01, -2.4553e-01,
          3.7319e-01, -1.0499e-01,  6.8356e-03, -1.4684e-01,  3.5207e-01,
          2.2165e-01, -4.1682e-02,  9.9404e-02,  6.8918e-01, -6.9004e-01,
         -4.7067e-01,  1.1270e-01, -4.4797e-01,  3.2501e-02,  2.4905e-02,
         -1.3104e-02,  3.6952e-01,  2.9469e-01,  3.9196e-01, -1.4980e-01,
          7.8228e-02,  1.0338e-01,  2.5116e-04,  1.7525e-01,  3.1060e-01,
          1.3269e-01,  2.9285e-01, -1.0549e-01, -7.6203e-01, -2.8522e-01,
         -5.5266e-01, -7.1626e-02]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
691000 特征值优化 tensor(0.5417, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4925,  0.3205, -1.6052,  0.9501,  0.4457, -2.1099, -1.4760, -1.3682,
         -0.5884,  0.4734, -2.8300, -0.0263, -0.0953,  0.1109,  0.2116, -0.1442,
          0.0560,  0.0769, -0.0835, -0.0160, -0.0695, -0.0854,  0.4602, -0.2316,
         -0.1044, -0.1999,  0.1144,  0.2686,  0.0540,  0.4076,  0.2471,  0.0912,
         -0.0591,  0.0510, -0.0300, -0.0716, -0.0109,  0.0599,  0.1468, -0.2495,
          0.4602, -0.1017, -0.0030, -0.1507,  0.3611,  0.2020, -0.0283,  0.0987,
          0.6970, -0.7082, -0.4746,  0.1262, -0.4341,  0.0258, -0.0163, -0.1171,
          0.5173,  0.2843,  0.3982, -0.1433,  0.1074,  0.0951, -0.0123,  0.1507,
          0.2952,  0.1373,  0.3013, -0.1136, -0.7545, -0.3901, -0.5657, -0.0671]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
692000 特征值优化 tensor(0.5369, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4767,  0.3192, -1.6370,  0.9838,  0.4418, -2.1861, -1.5159, -1.4516,
         -0.5643,  0.4728, -2.9875, -0.0575, -0.0946,  0.2184,  0.0920, -0.0484,
          0.0900,  0.0131,  0.0435,  0.0277, -0.0643, -0.0927,  0.4757, -0.2520,
         -0.1100, -0.1997,  0.1215,  0.2630,  0.0537,  0.4139,  0.2474,  0.1068,
         -0.1093,  0.0512, -0.0329, -0.0677, -0.0199,  0.0524,  0.1452, -0.2445,
          0.5161, -0.0991, -0.0031, -0.1852,  0.3981,  0.2057, -0.0308,  0.1050,
          0.6959, -0.7212, -0.4779,  0.1330, -0.4282,  0.0219,  0.0248,  0.0326,
          0.5541,  0.2848,  0.4090, -0.1494,  0.1081,  0.0860,  0.0450,  0.1057,
          0.2927,  0.1489,  0.3111, -0.1075, -0.7916, -0.4044, -0.5570, -0.0827]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
693000 特征值优化 tensor(0.5363, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.8898e-01,  3.1058e-01, -1.6525e+00,  1.0036e+00,  4.5266e-01,
         -2.2255e+00, -1.5123e+00, -1.5048e+00, -5.4548e-01,  4.8116e-01,
         -3.1005e+00, -5.7490e-02, -9.6545e-02,  2.2567e-01,  9.3591e-02,
         -5.6142e-02,  6.8491e-02, -2.4144e-03,  5.0802e-02,  2.5315e-02,
         -6.8622e-02, -9.7127e-02,  4.7848e-01, -2.5699e-01, -1.1037e-01,
         -1.9949e-01,  1.1882e-01,  2.6423e-01,  5.2928e-02,  4.1772e-01,
          2.4644e-01,  1.0779e-01, -1.1543e-01,  5.1203e-02, -3.4669e-02,
         -6.5339e-02, -2.0817e-02,  5.6329e-02,  1.4602e-01, -2.4188e-01,
          5.4325e-01, -1.0147e-01, -7.3075e-03, -2.0299e-01,  4.0962e-01,
          2.0901e-01, -3.4172e-02,  1.0416e-01,  7.0278e-01, -7.3631e-01,
         -4.7776e-01,  1.3745e-01, -4.3280e-01,  2.1693e-02, -8.4821e-04,
          3.4084e-02,  5.7933e-01,  2.8152e-01,  3.9997e-01, -1.4590e-01,
          1.2569e-01,  6.7858e-02,  7.6866e-02,  8.1926e-02,  2.7907e-01,
          1.5323e-01,  3.1057e-01, -1.0830e-01, -8.0900e-01, -4.1376e-01,
         -5.5528e-01, -8.2569e-02]], device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
694000 特征值优化 tensor(0.5357, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.9964e-01,  3.1889e-01, -1.6657e+00,  1.0172e+00,  4.2477e-01,
         -2.2556e+00, -1.4942e+00, -1.5505e+00, -5.4786e-01,  4.8197e-01,
         -3.2261e+00, -5.4239e-02, -9.6473e-02,  2.1758e-01,  7.2847e-02,
         -5.8481e-02,  7.5685e-02,  1.9631e-02,  1.1305e-01,  2.2987e-02,
         -6.9055e-02, -1.0001e-01,  4.8698e-01, -2.5632e-01, -1.1050e-01,
         -1.9807e-01,  1.1948e-01,  2.6116e-01,  5.2659e-02,  4.2150e-01,
          2.4739e-01,  1.0932e-01, -1.1823e-01,  5.1243e-02, -3.3612e-02,
         -6.6623e-02, -1.3091e-02,  7.5647e-02,  1.4708e-01, -2.4277e-01,
          5.6346e-01, -1.0118e-01, -6.3793e-04, -1.9721e-01,  4.0230e-01,
          2.2529e-01, -4.5955e-02,  1.0389e-01,  7.0339e-01, -7.4492e-01,
         -4.7903e-01,  1.4044e-01, -4.2228e-01,  2.1148e-02,  5.1789e-02,
          8.5855e-02,  5.9546e-01,  2.8036e-01,  4.0217e-01, -1.4945e-01,
          1.0017e-01,  7.6056e-02,  3.8979e-02,  9.4168e-02,  2.7802e-01,
          1.5241e-01,  3.1100e-01, -1.0858e-01, -8.5090e-01, -4.1462e-01,
         -5.5781e-01, -8.1159e-02]], device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
695000 特征值优化 tensor(0.5380, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.9029e-01,  3.3259e-01, -1.6900e+00,  1.0242e+00,  4.3606e-01,
         -2.2924e+00, -1.4785e+00, -1.5947e+00, -5.4144e-01,  4.8420e-01,
         -3.3912e+00, -5.3427e-02, -9.2175e-02,  1.2659e-01,  1.8265e-01,
         -1.4063e-01,  3.2784e-02,  5.3766e-02, -1.3112e-02, -5.0923e-02,
         -6.4887e-02, -1.0272e-01,  4.9770e-01, -2.5637e-01, -1.0871e-01,
         -1.9788e-01,  1.2103e-01,  2.5668e-01,  5.2466e-02,  4.2672e-01,
          2.4638e-01,  1.0746e-01, -8.4885e-02,  5.1128e-02, -3.0832e-02,
         -6.8342e-02,  4.9230e-03,  1.0559e-01,  1.4357e-01, -2.4343e-01,
          5.6710e-01, -9.7020e-02,  6.8201e-04, -1.9024e-01,  4.0222e-01,
          1.9682e-01, -2.6095e-02,  1.0604e-01,  7.0168e-01, -7.5482e-01,
         -4.7615e-01,  1.4189e-01, -4.6236e-01,  4.2476e-02, -7.4279e-02,
         -1.3482e-01,  6.1508e-01,  2.8093e-01,  3.9885e-01, -1.4819e-01,
          1.1102e-01,  8.3743e-02,  5.8744e-03,  1.2709e-01,  2.8637e-01,
          1.5079e-01,  3.0664e-01, -1.0947e-01, -7.8612e-01, -4.6587e-01,
         -5.6581e-01, -7.7161e-02]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
696000 特征值优化 tensor(0.5436, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.0249e-01,  3.3056e-01, -1.6917e+00,  1.0300e+00,  4.3904e-01,
         -2.3097e+00, -1.4831e+00, -1.6378e+00, -5.3819e-01,  4.8793e-01,
         -3.5146e+00, -5.0202e-02, -9.6317e-02,  1.6956e-01,  9.3774e-02,
         -9.3414e-02,  8.0885e-02,  4.3998e-02,  4.5288e-02,  3.0435e-02,
         -7.0490e-02, -1.0379e-01,  4.9947e-01, -2.5792e-01, -1.1148e-01,
         -1.9740e-01,  1.2252e-01,  2.5650e-01,  5.2275e-02,  4.2736e-01,
          2.4716e-01,  1.0531e-01, -1.1154e-01,  5.1104e-02, -2.7178e-02,
         -7.0159e-02, -8.0693e-03,  8.5401e-02,  1.4695e-01, -2.3994e-01,
          6.1603e-01, -9.8691e-02,  1.8714e-03, -1.6666e-01,  3.7100e-01,
          1.9855e-01, -3.0796e-02,  1.0700e-01,  7.0074e-01, -7.5627e-01,
         -4.7808e-01,  1.4445e-01, -4.2573e-01,  2.1510e-02, -2.2316e-02,
         -7.6696e-02,  6.2559e-01,  2.7964e-01,  3.9821e-01, -1.4477e-01,
          6.9532e-02,  9.2604e-02,  3.2669e-02,  9.7111e-02,  2.7881e-01,
          1.5481e-01,  3.1252e-01, -1.0608e-01, -8.4365e-01, -4.6442e-01,
         -5.6120e-01, -7.8730e-02]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
697000 特征值优化 tensor(0.5377, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.8971e-01,  3.2635e-01, -1.6936e+00,  1.0298e+00,  4.2880e-01,
         -2.3206e+00, -1.4655e+00, -1.6772e+00, -5.3040e-01,  4.9444e-01,
         -3.6212e+00, -5.0822e-02, -9.2385e-02,  1.6804e-01,  1.1558e-01,
         -4.9683e-02,  8.6425e-02,  6.0314e-02,  9.9420e-02,  3.2735e-02,
         -6.6028e-02, -1.0387e-01,  5.0063e-01, -2.5783e-01, -1.0922e-01,
         -1.9570e-01,  1.1990e-01,  2.5794e-01,  5.2085e-02,  4.2768e-01,
          2.4639e-01,  1.2049e-01, -1.3445e-01,  5.1155e-02, -3.3155e-02,
         -6.5510e-02, -4.6386e-03,  1.0227e-01,  1.4770e-01, -2.3824e-01,
          6.4722e-01, -1.0020e-01, -1.2610e-03, -1.9464e-01,  4.0720e-01,
          1.9079e-01, -2.1982e-02,  1.0475e-01,  7.0346e-01, -7.5895e-01,
         -4.7719e-01,  1.4327e-01, -4.2826e-01,  2.6222e-02,  2.9076e-02,
          1.2553e-01,  6.2991e-01,  2.7901e-01,  3.9770e-01, -1.4520e-01,
          8.2252e-02,  6.8091e-02,  4.1394e-02,  7.3648e-02,  2.7363e-01,
          1.5692e-01,  3.1372e-01, -1.0660e-01, -8.7044e-01, -4.8101e-01,
         -5.6177e-01, -7.9426e-02]], device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
698000 特征值优化 tensor(0.5409, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.1557e-01,  3.4471e-01, -1.6937e+00,  1.0268e+00,  4.5979e-01,
         -2.3186e+00, -1.4990e+00, -1.6753e+00, -5.2803e-01,  4.9030e-01,
         -3.7842e+00, -5.8889e-02, -9.5329e-02,  1.1237e-01,  1.5012e-01,
         -4.8843e-02,  1.8243e-01, -2.0576e-02,  1.0729e-02, -4.3092e-02,
         -6.7729e-02, -1.0291e-01,  4.9833e-01, -2.6002e-01, -1.0978e-01,
         -1.9973e-01,  1.2282e-01,  2.5709e-01,  5.2297e-02,  4.2811e-01,
          2.4655e-01,  1.0102e-01, -7.4359e-02,  5.1360e-02, -2.5601e-02,
         -7.1427e-02,  1.2577e-03,  1.1167e-01,  1.4355e-01, -2.4111e-01,
          6.6162e-01, -9.5605e-02,  9.4906e-03, -1.4087e-01,  3.4930e-01,
          2.1826e-01, -4.4316e-02,  1.0647e-01,  7.0109e-01, -7.5625e-01,
         -4.7575e-01,  1.4299e-01, -4.4158e-01,  2.5428e-02, -1.0752e-01,
         -1.6013e-02,  6.3067e-01,  2.7924e-01,  3.9806e-01, -1.4753e-01,
          8.7148e-02,  9.2502e-02, -1.9627e-02,  1.3444e-01,  2.7899e-01,
          1.5475e-01,  3.0845e-01, -1.0750e-01, -8.3562e-01, -5.1523e-01,
         -5.6316e-01, -7.8805e-02]], device='cuda:0') tensor(0.2044, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
699000 特征值优化 tensor(0.5417, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.9920e-01,  3.2684e-01, -1.6916e+00,  1.0306e+00,  4.4376e-01,
         -2.3203e+00, -1.5452e+00, -1.6812e+00, -5.3268e-01,  4.9060e-01,
         -3.8810e+00, -5.4194e-02, -9.5863e-02,  1.7639e-01,  9.0941e-02,
         -1.2353e-01,  6.3097e-02,  1.5481e-02,  4.3873e-02,  1.1410e-02,
         -7.0014e-02, -1.0379e-01,  5.0136e-01, -2.5816e-01, -1.0927e-01,
         -1.9504e-01,  1.2095e-01,  2.5767e-01,  5.2254e-02,  4.2755e-01,
          2.4774e-01,  1.0484e-01, -1.1758e-01,  5.1373e-02, -3.3431e-02,
         -6.5189e-02, -7.8927e-03,  9.4465e-02,  1.4634e-01, -2.3963e-01,
          7.0942e-01, -9.9301e-02,  8.5445e-04, -1.5082e-01,  3.6080e-01,
          2.0007e-01, -2.9683e-02,  1.0584e-01,  7.0188e-01, -7.5715e-01,
         -4.7797e-01,  1.4394e-01, -4.2363e-01,  1.7911e-02, -4.1446e-02,
          2.4905e-03,  6.2856e-01,  2.8052e-01,  3.9755e-01, -1.4671e-01,
          7.6895e-02,  1.0163e-01, -3.5367e-03,  1.1362e-01,  2.7830e-01,
          1.5588e-01,  3.1379e-01, -1.0698e-01, -9.3490e-01, -5.1011e-01,
         -5.6268e-01, -7.9725e-02]], device='cuda:0') tensor(0.2033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
700000 特征值优化 tensor(0.5367, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.9651e-01,  3.3385e-01, -1.6900e+00,  1.0284e+00,  4.1684e-01,
         -2.3153e+00, -1.5117e+00, -1.7147e+00, -5.2967e-01,  4.9345e-01,
         -3.9861e+00, -7.0172e-02, -9.4514e-02,  1.0630e-01,  1.7556e-01,
         -4.7089e-02,  1.4811e-01,  2.3317e-03,  2.7301e-02, -2.0963e-02,
         -6.7603e-02, -1.0347e-01,  4.9751e-01, -2.5867e-01, -1.0747e-01,
         -2.0153e-01,  1.2401e-01,  2.6033e-01,  5.2340e-02,  4.2667e-01,
          2.4633e-01,  1.0950e-01, -9.3133e-02,  5.1396e-02, -2.3229e-02,
         -7.3966e-02,  1.3601e-02,  1.3812e-01,  1.4572e-01, -2.3926e-01,
          7.1788e-01, -9.7570e-02,  3.1733e-03, -1.7931e-01,  3.8959e-01,
          2.1106e-01, -3.5739e-02,  1.0618e-01,  7.0107e-01, -7.5429e-01,
         -4.7721e-01,  1.4345e-01, -4.4575e-01,  3.9300e-02, -5.3162e-02,
         -8.9473e-02,  6.2756e-01,  2.7994e-01,  3.9888e-01, -1.4811e-01,
          1.1481e-01,  8.6811e-02, -2.9274e-02,  1.2703e-01,  2.7467e-01,
          1.5724e-01,  3.0992e-01, -1.0377e-01, -9.2390e-01, -5.6063e-01,
         -5.4757e-01, -8.5367e-02]], device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
701000 特征值优化 tensor(0.5429, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.0786e-01,  3.1849e-01, -1.6798e+00,  1.0409e+00,  4.5762e-01,
         -2.3193e+00, -1.5270e+00, -1.7314e+00, -5.2651e-01,  5.0042e-01,
         -4.0620e+00, -9.2714e-02, -9.5624e-02,  1.6327e-01,  1.0906e-01,
         -1.2107e-01,  6.6376e-02,  1.1515e-02,  5.1010e-02,  8.0030e-03,
         -6.8686e-02, -1.0469e-01,  4.9715e-01, -2.6175e-01, -1.0734e-01,
         -1.9969e-01,  1.2783e-01,  2.6076e-01,  5.2120e-02,  4.2704e-01,
          2.4862e-01,  1.0273e-01, -1.1731e-01,  5.0923e-02, -2.7486e-02,
         -7.2957e-02, -6.5799e-05,  1.1933e-01,  1.4671e-01, -2.3993e-01,
          7.7469e-01, -1.0078e-01,  3.8743e-03, -1.7443e-01,  3.8221e-01,
          1.8905e-01, -2.4022e-02,  1.0431e-01,  7.0124e-01, -7.5559e-01,
         -4.8361e-01,  1.4596e-01, -4.4163e-01,  2.2096e-02, -4.5084e-02,
         -5.3270e-02,  6.2242e-01,  2.8453e-01,  4.0223e-01, -1.4503e-01,
          9.4849e-02,  8.0124e-02,  6.2025e-03,  7.9065e-02,  2.6503e-01,
          1.5954e-01,  3.0275e-01, -1.0405e-01, -9.5567e-01, -5.9333e-01,
         -5.2539e-01, -9.0818e-02]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
702000 特征值优化 tensor(0.5362, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.7837e-01,  3.0315e-01, -1.6582e+00,  1.0551e+00,  4.9272e-01,
         -2.3287e+00, -1.5520e+00, -1.7609e+00, -5.5814e-01,  4.5727e-01,
         -4.1667e+00, -1.1269e-01, -9.4661e-02,  1.7339e-01,  1.1735e-01,
         -1.3794e-01,  2.8485e-02,  6.8269e-02, -3.3070e-03,  4.3923e-02,
         -6.8218e-02, -1.0612e-01,  4.9410e-01, -2.6651e-01, -1.0396e-01,
         -2.0814e-01,  1.3553e-01,  2.7195e-01,  5.1679e-02,  4.2152e-01,
          2.4758e-01,  1.2540e-01, -1.5703e-01,  5.1321e-02, -2.9179e-02,
         -6.7016e-02, -3.2482e-03,  1.2337e-01,  1.4902e-01, -2.4111e-01,
          8.1662e-01, -1.0027e-01, -8.8013e-03, -1.6597e-01,  3.7787e-01,
          2.1650e-01, -3.1338e-02,  9.7960e-02,  7.1209e-01, -7.5424e-01,
         -4.9283e-01,  1.4988e-01, -4.8916e-01,  3.6231e-02, -3.6825e-02,
          7.1237e-02,  6.3731e-01,  2.7666e-01,  3.9776e-01, -1.4407e-01,
          1.0434e-01,  6.8056e-02,  2.6136e-02,  5.1811e-02,  2.8761e-01,
          1.4799e-01,  3.2890e-01, -1.1021e-01, -9.4294e-01, -6.4051e-01,
         -5.3486e-01, -6.6662e-02]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
703000 特征值优化 tensor(0.5386, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.9917e-01,  2.9695e-01, -1.6529e+00,  1.0346e+00,  5.0164e-01,
         -2.3307e+00, -1.5612e+00, -1.8127e+00, -5.8999e-01,  4.4588e-01,
         -4.2846e+00, -9.7164e-02, -9.3379e-02,  1.0422e-01,  1.6360e-01,
         -6.8102e-02,  1.4411e-01, -1.0683e-02,  9.8192e-03, -1.1990e-02,
         -6.7222e-02, -1.0281e-01,  4.9689e-01, -2.6527e-01, -1.0717e-01,
         -2.0950e-01,  1.4070e-01,  2.6269e-01,  5.2388e-02,  4.1957e-01,
          2.4637e-01,  1.4926e-01, -1.4814e-01,  5.1000e-02, -1.6809e-02,
         -7.8435e-02,  4.9083e-05,  1.3391e-01,  1.4738e-01, -2.4696e-01,
          8.3527e-01, -9.7571e-02,  1.8109e-03, -1.9538e-01,  4.0438e-01,
          2.1708e-01, -2.9314e-02,  9.9099e-02,  7.0612e-01, -7.4218e-01,
         -4.8332e-01,  1.4385e-01, -5.4792e-01,  6.8787e-02, -2.7326e-02,
          7.6005e-03,  6.4351e-01,  2.7568e-01,  4.0040e-01, -1.4404e-01,
          7.8690e-02,  8.2776e-02, -3.6552e-02,  9.1826e-02,  2.9857e-01,
          1.4061e-01,  3.2690e-01, -1.1078e-01, -9.4412e-01, -6.5148e-01,
         -5.3963e-01, -6.6588e-02]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
704000 特征值优化 tensor(0.5378, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.0682e-01,  3.0953e-01, -1.6527e+00,  1.0315e+00,  5.0501e-01,
         -2.3280e+00, -1.6173e+00, -1.8770e+00, -6.0527e-01,  4.1291e-01,
         -4.4344e+00, -8.1548e-02, -9.6231e-02,  1.7061e-01,  8.3134e-02,
         -1.1448e-01,  1.0084e-01, -4.0892e-02,  3.8357e-02, -1.4042e-02,
         -6.8651e-02, -1.0209e-01,  4.9289e-01, -2.7020e-01, -1.1088e-01,
         -2.0572e-01,  1.4386e-01,  2.6327e-01,  5.1650e-02,  4.1950e-01,
          2.4577e-01,  1.6442e-01, -2.1170e-01,  5.0946e-02, -2.3197e-02,
         -7.1611e-02, -6.0997e-03,  1.2116e-01,  1.4597e-01, -2.4702e-01,
          8.6126e-01, -9.7490e-02,  9.3264e-04, -2.0303e-01,  4.0854e-01,
          1.9240e-01, -2.6083e-02,  9.8985e-02,  7.0794e-01, -7.4548e-01,
         -4.8588e-01,  1.4358e-01, -5.6710e-01,  7.6749e-02, -7.7612e-03,
         -4.5257e-02,  6.4444e-01,  2.7419e-01,  3.9942e-01, -1.5415e-01,
          1.6463e-02,  1.3240e-01, -7.4304e-02,  1.3353e-01,  3.1767e-01,
          1.3574e-01,  3.3410e-01, -1.1291e-01, -1.0796e+00, -5.8903e-01,
         -5.5433e-01, -5.6580e-02]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
705000 特征值优化 tensor(0.5347, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.0430e-01,  3.0637e-01, -1.6521e+00,  1.0401e+00,  5.0681e-01,
         -2.3183e+00, -1.5934e+00, -1.9446e+00, -6.0782e-01,  4.1396e-01,
         -4.5317e+00, -7.7897e-02, -9.7202e-02,  2.1103e-01,  5.7060e-02,
         -1.3575e-01,  6.2833e-02,  4.4163e-02, -4.1389e-02,  9.4514e-03,
         -6.9368e-02, -1.0334e-01,  4.8816e-01, -2.7340e-01, -1.1434e-01,
         -2.0662e-01,  1.4471e-01,  2.6295e-01,  5.2289e-02,  4.1981e-01,
          2.4582e-01,  1.6754e-01, -2.3027e-01,  5.0873e-02, -2.1719e-02,
         -7.3912e-02, -5.0336e-03,  1.3410e-01,  1.4682e-01, -2.4792e-01,
          8.8537e-01, -9.8981e-02, -7.0779e-04, -2.0862e-01,  4.1231e-01,
          2.1436e-01, -3.8218e-02,  9.6501e-02,  7.0993e-01, -7.4713e-01,
         -4.8622e-01,  1.4456e-01, -5.5941e-01,  7.2024e-02,  1.2576e-02,
          7.4018e-02,  6.4008e-01,  2.7315e-01,  4.0099e-01, -1.4836e-01,
          1.5968e-02,  1.0978e-01, -4.6623e-02,  9.9993e-02,  3.1180e-01,
          1.3334e-01,  3.3186e-01, -1.1468e-01, -1.1009e+00, -5.8797e-01,
         -5.5148e-01, -5.2798e-02]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
706000 特征值优化 tensor(0.5373, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5136,  0.2833, -1.6597,  1.0433,  0.4908, -2.3115, -1.6231, -2.0089,
         -0.6226,  0.4136, -4.6843, -0.0732, -0.0939,  0.1068,  0.1634, -0.0803,
          0.1498, -0.0099, -0.0331, -0.0060, -0.0676, -0.1048,  0.4894, -0.2721,
         -0.1139, -0.2076,  0.1453,  0.2606,  0.0531,  0.4212,  0.2456,  0.1680,
         -0.1812,  0.0515, -0.0173, -0.0783,  0.0050,  0.1497,  0.1477, -0.2507,
          0.8827, -0.0964,  0.0067, -0.2025,  0.4082,  0.2151, -0.0272,  0.0990,
          0.7089, -0.7491, -0.4838,  0.1462, -0.5558,  0.0767,  0.0055,  0.0221,
          0.6375,  0.2737,  0.4060, -0.1527,  0.0364,  0.1179, -0.0952,  0.1472,
          0.3112,  0.1334,  0.3333, -0.1125, -1.1051, -0.5848, -0.5517, -0.0562]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
707000 特征值优化 tensor(0.5381, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.0927e-01,  3.0006e-01, -1.6648e+00,  1.0422e+00,  4.9933e-01,
         -2.3137e+00, -1.6493e+00, -2.0616e+00, -6.1294e-01,  4.1065e-01,
         -4.8166e+00, -7.7357e-02, -9.4202e-02,  1.6026e-01,  1.0689e-01,
         -1.1199e-01,  1.0136e-01, -3.3505e-02,  9.5874e-03, -4.5179e-03,
         -6.9991e-02, -1.0475e-01,  4.9230e-01, -2.6942e-01, -1.1131e-01,
         -2.0732e-01,  1.4532e-01,  2.6339e-01,  5.1888e-02,  4.2216e-01,
          2.4535e-01,  1.6370e-01, -2.2114e-01,  5.1089e-02, -1.9868e-02,
         -7.4916e-02, -1.1587e-03,  1.3960e-01,  1.4682e-01, -2.4776e-01,
          9.1168e-01, -9.8115e-02,  6.3229e-04, -2.0256e-01,  4.0588e-01,
          2.0457e-01, -2.5010e-02,  1.0131e-01,  7.0597e-01, -7.5028e-01,
         -4.8724e-01,  1.4702e-01, -5.6036e-01,  7.6704e-02, -2.4194e-02,
         -1.4928e-02,  6.3802e-01,  2.7363e-01,  3.9986e-01, -1.4624e-01,
          6.8458e-03,  1.4027e-01, -8.4904e-02,  1.5462e-01,  3.1649e-01,
          1.3431e-01,  3.3401e-01, -1.1227e-01, -1.1532e+00, -5.6875e-01,
         -5.5111e-01, -5.4702e-02]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
708000 特征值优化 tensor(0.5376, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5081,  0.2928, -1.6614,  1.0453,  0.4952, -2.3158, -1.6524, -2.1275,
         -0.6213,  0.4090, -4.9442, -0.0747, -0.0929,  0.1272,  0.1527, -0.0803,
          0.1332, -0.0108, -0.0252, -0.0061, -0.0669, -0.1053,  0.4921, -0.2715,
         -0.1119, -0.2061,  0.1447,  0.2619,  0.0530,  0.4222,  0.2453,  0.1746,
         -0.2028,  0.0512, -0.0217, -0.0727,  0.0055,  0.1554,  0.1479, -0.2496,
          0.9217, -0.0967,  0.0056, -0.1989,  0.4078,  0.2012, -0.0191,  0.0991,
          0.7110, -0.7520, -0.4837,  0.1464, -0.5664,  0.0818, -0.0051,  0.0398,
          0.6393,  0.2744,  0.4033, -0.1533,  0.0271,  0.1273, -0.1038,  0.1659,
          0.3167,  0.1332,  0.3393, -0.1131, -1.1651, -0.5647, -0.5571, -0.0547]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
709000 特征值优化 tensor(0.5385, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.1404e-01,  3.2560e-01, -1.6670e+00,  1.0420e+00,  4.9893e-01,
         -2.3228e+00, -1.6806e+00, -2.1669e+00, -6.1256e-01,  4.0887e-01,
         -5.0750e+00, -7.2978e-02, -9.5956e-02,  1.4301e-01,  1.1294e-01,
         -1.0629e-01,  1.0809e-01, -3.2179e-02,  1.7895e-02, -1.7364e-03,
         -6.8986e-02, -1.0459e-01,  4.9352e-01, -2.6863e-01, -1.1038e-01,
         -2.0745e-01,  1.4397e-01,  2.6338e-01,  5.2007e-02,  4.2280e-01,
          2.4651e-01,  1.6679e-01, -2.3588e-01,  5.0939e-02, -2.0790e-02,
         -7.3867e-02,  1.3387e-03,  1.4913e-01,  1.4655e-01, -2.4839e-01,
          9.5287e-01, -9.8682e-02,  5.5714e-03, -2.0447e-01,  4.0942e-01,
          1.8996e-01, -2.7855e-02,  1.0183e-01,  7.0737e-01, -7.5268e-01,
         -4.8595e-01,  1.4770e-01, -5.5765e-01,  7.3869e-02, -1.3827e-02,
         -1.3596e-02,  6.4272e-01,  2.7327e-01,  4.0112e-01, -1.4419e-01,
          6.5325e-04,  1.4707e-01, -9.4940e-02,  1.6840e-01,  3.1281e-01,
          1.3371e-01,  3.3444e-01, -1.1499e-01, -1.2179e+00, -5.5614e-01,
         -5.5348e-01, -5.1543e-02]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
710000 特征值优化 tensor(0.5355, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.0679e-01,  2.8718e-01, -1.6668e+00,  1.0488e+00,  5.1526e-01,
         -2.3191e+00, -1.6833e+00, -2.2343e+00, -6.1772e-01,  4.0952e-01,
         -5.2248e+00, -7.5348e-02, -9.3522e-02,  1.1434e-01,  1.6400e-01,
         -5.8482e-02,  1.5033e-01, -3.3780e-02,  9.6732e-03, -7.4280e-03,
         -6.6069e-02, -1.0648e-01,  4.9471e-01, -2.6754e-01, -1.1052e-01,
         -2.0769e-01,  1.4356e-01,  2.6467e-01,  5.3567e-02,  4.2327e-01,
          2.4526e-01,  1.7862e-01, -2.1593e-01,  5.1509e-02, -2.2062e-02,
         -7.3143e-02,  1.2858e-02,  1.6921e-01,  1.4779e-01, -2.4923e-01,
          9.5439e-01, -9.7905e-02,  4.7406e-03, -2.0049e-01,  4.0951e-01,
          2.0514e-01, -2.1758e-02,  9.8642e-02,  7.1010e-01, -7.5305e-01,
         -4.8267e-01,  1.4700e-01, -5.8008e-01,  8.2722e-02, -2.5581e-02,
          2.2514e-02,  6.4076e-01,  2.7332e-01,  4.0432e-01, -1.5324e-01,
          2.1578e-02,  1.4389e-01, -1.1791e-01,  1.9223e-01,  3.1131e-01,
          1.3382e-01,  3.3898e-01, -1.1455e-01, -1.2252e+00, -5.4721e-01,
         -5.5557e-01, -5.2370e-02]], device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
711000 特征值优化 tensor(0.5348, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.0206e-01,  3.0597e-01, -1.6596e+00,  1.0520e+00,  5.0728e-01,
         -2.3183e+00, -1.7077e+00, -2.2944e+00, -6.1801e-01,  4.0319e-01,
         -5.3384e+00, -7.6046e-02, -9.6178e-02,  1.8286e-01,  7.6258e-02,
         -1.3210e-01,  7.8781e-02,  2.2532e-02, -3.8207e-02,  1.3851e-02,
         -6.8888e-02, -1.0666e-01,  4.9065e-01, -2.7139e-01, -1.1264e-01,
         -2.0840e-01,  1.4500e-01,  2.6600e-01,  5.1859e-02,  4.2181e-01,
          2.4634e-01,  1.8237e-01, -2.6705e-01,  5.0861e-02, -2.3224e-02,
         -7.0109e-02,  5.0044e-03,  1.6224e-01,  1.4807e-01, -2.4820e-01,
          9.9404e-01, -9.9022e-02, -1.3643e-03, -2.0940e-01,  4.1415e-01,
          2.0489e-01, -3.0936e-02,  9.7839e-02,  7.1092e-01, -7.5418e-01,
         -4.9015e-01,  1.4954e-01, -5.8021e-01,  8.2266e-02, -4.3676e-03,
         -4.0882e-03,  6.4224e-01,  2.7198e-01,  4.0129e-01, -1.4804e-01,
         -1.3449e-02,  1.5388e-01, -9.7214e-02,  1.7345e-01,  3.1598e-01,
          1.3052e-01,  3.3902e-01, -1.1722e-01, -1.2675e+00, -5.4747e-01,
         -5.5721e-01, -4.5289e-02]], device='cuda:0') tensor(0.2049, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
712000 正交保障 tensor(0.2036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.2665e+00,  2.9060e-02, -1.4055e+00,  7.2057e-01,  4.6536e-01,
         -1.3892e-01, -7.2060e-02,  6.3168e-01, -5.8533e-01,  9.0620e-01,
          7.1954e-02, -1.8344e-01,  4.4454e-01,  1.2636e-01,  7.3822e-02,
          2.0486e-01, -1.3048e-01,  1.6560e+00, -9.3199e-01, -3.6233e-02,
          8.2768e-01,  2.1648e-02,  1.1070e-02, -3.3972e-02, -1.5173e-01,
         -8.2078e-01, -9.3958e-02,  5.4045e-02, -3.6763e-03, -1.1876e+00,
         -1.1055e-01,  3.4285e-01, -4.6798e-01,  5.7892e-02,  1.9931e-02,
         -8.5757e-02,  5.2628e-01, -1.1417e-02, -4.8922e-04, -1.5693e-01,
         -6.0820e-01, -2.1241e-01, -1.8743e-01,  1.9643e-01, -7.7251e-01,
         -2.8565e-01, -5.0289e-01, -1.0036e+00,  1.3087e-01, -1.1583e+00,
         -1.1728e-01, -3.8543e-02, -7.2849e-01, -3.7161e-01,  3.4863e-02,
         -5.1861e-01, -3.9480e-01,  2.3534e-01,  2.4617e-02, -6.3017e-01,
         -3.8652e-01,  2.3500e-01, -1.3226e+00,  1.3931e+00, -2.0525e-02,
         -3.3369e-02, -5.1259e-01,  3.5363e-01, -1.2938e+00,  5.4581e-01,
         -1.2051e+00,  9.3666e-01]], device='cuda:0') tensor(0.2036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
713000 特征值优化 tensor(0.8995, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.4201,  0.4610, -1.8075,  0.7204,  0.1307, -0.8335, -0.5644, -0.1193,
         -1.2153,  1.0356, -0.4862, -0.6496,  0.1892, -0.0140, -0.1547,  0.0466,
          0.0584,  0.7057, -0.1206,  0.0347,  0.3150,  0.0204,  0.0212,  0.0480,
         -0.0829, -0.4688, -0.1042,  0.1188,  0.0181, -0.7353, -0.0560,  0.1242,
         -0.2485,  0.0623, -0.0064, -0.0106,  0.2845,  0.0025, -0.0394, -0.1404,
         -0.2328, -0.0660,  0.4952, -0.0946, -0.1544, -0.2337, -0.1583, -0.3361,
          0.5961, -1.2989, -0.1640, -0.0217, -0.2671, -0.0669, -0.1163, -0.5588,
         -0.0029,  0.1987, -0.0860, -0.4625, -0.8072,  0.4936, -1.1173,  0.9775,
          0.3705, -0.0181, -0.1661,  0.0598, -1.5374,  0.8787, -0.3016,  0.3074]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
714000 特征值优化 tensor(0.7262, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.8567,  0.7937, -1.7445,  0.7135,  0.0339, -0.8823, -0.5225, -0.6907,
         -1.3018,  0.7630, -0.6024, -0.8400,  0.1297, -0.1162,  0.0305,  0.1266,
          0.1501,  0.4748, -0.1021,  0.0254,  0.2468,  0.0256,  0.0400,  0.0437,
         -0.1243, -0.4246, -0.4047,  0.0661,  0.0109, -0.6842, -0.0325,  0.1273,
         -0.2272,  0.0630,  0.0441, -0.0229,  0.3191,  0.1105, -0.1097, -0.1235,
         -0.2754,  0.0025,  0.3290,  0.0679, -0.0852, -0.2746, -0.0654, -0.2860,
          0.5986, -1.2830, -0.1755, -0.0336, -0.3138, -0.0758, -0.1047, -0.5663,
         -0.0138,  0.2097, -0.0751, -0.4619, -0.9008,  0.4516, -1.0564,  0.8392,
          0.4820,  0.0971,  0.1379, -0.0416, -1.4221,  0.8568, -0.1866,  0.1009]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
715000 特征值优化 tensor(0.6154, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5835,  0.6487, -1.6821,  0.5312,  0.1217, -0.8357, -0.5141, -1.4900,
         -1.3548,  0.5038, -0.7147, -0.8622,  0.1184, -0.0460,  0.0191, -0.0654,
         -0.0861,  0.3885, -0.0031, -0.0403,  0.2201, -0.0235, -0.0870, -0.0113,
         -0.1475, -0.3480, -0.3274, -0.0118,  0.0331, -0.6756, -0.0160,  0.0830,
         -0.1296,  0.0645, -0.0316, -0.0536,  0.2472,  0.1882, -0.1461, -0.0942,
         -0.1685,  0.0547,  0.2095,  0.1118, -0.0816, -0.1528, -0.0608, -0.3110,
          0.6140, -1.2712, -0.1502, -0.0809, -0.3779, -0.0521, -0.0207, -0.3194,
         -0.0109,  0.1954, -0.0930, -0.4645, -0.9651,  0.7098, -1.1317,  0.7231,
          0.5151,  0.1630,  0.1972, -0.0671, -1.4366,  0.6515, -0.2755,  0.0747]],
       device='cuda:0') tensor(0.2038, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
716000 特征值优化 tensor(0.5803, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6755,  0.7725, -1.6183,  0.4326,  0.1108, -0.8631, -0.6173, -1.8169,
         -1.3416,  0.4527, -0.7672, -0.8569,  0.1175,  0.0751, -0.0274, -0.0739,
         -0.1693,  0.4140, -0.0458, -0.0185,  0.2140, -0.0432, -0.0037,  0.0993,
         -0.0821, -0.3643, -0.3480, -0.0120,  0.0304, -0.6503, -0.0173,  0.0788,
         -0.0485,  0.0619, -0.0241,  0.0045,  0.1685,  0.1089, -0.1281, -0.1016,
         -0.1186,  0.0418,  0.2460,  0.1124, -0.0806, -0.2194, -0.0476, -0.2972,
          0.6243, -1.2204, -0.1114, -0.1063, -0.3586, -0.0557,  0.1189, -0.1450,
          0.0512,  0.1666, -0.0800, -0.3988, -0.9241,  0.8094, -1.1841,  0.6403,
          0.5519,  0.1591,  0.2325, -0.0725, -1.5488,  0.5197, -0.4101,  0.1258]],
       device='cuda:0') tensor(0.2101, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
717000 特征值优化 tensor(0.6391, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7155e+00,  8.1126e-01, -1.5508e+00,  3.2265e-01,  1.2874e-01,
         -8.8113e-01, -7.4563e-01, -1.8682e+00, -1.3645e+00,  4.6573e-01,
         -8.2478e-01, -8.0500e-01,  1.1635e-01,  3.6279e-03,  1.2681e-01,
         -6.2246e-02, -1.8934e-01,  4.3112e-01, -7.4693e-02, -2.0682e-02,
          2.1612e-01, -7.2593e-02, -8.5167e-02, -5.6019e-02, -7.5596e-02,
         -3.6689e-01, -3.2529e-01, -1.0984e-03,  1.0741e-02, -6.3630e-01,
         -1.7091e-02, -2.2154e-02, -6.2337e-02,  5.8650e-02, -6.6153e-02,
         -3.0331e-02,  1.6384e-01,  9.8260e-02, -1.2889e-01, -1.0267e-01,
         -1.4142e-01,  4.6715e-02,  2.6955e-01,  1.0977e-01, -8.7657e-02,
         -2.4144e-01, -4.0736e-02, -2.9806e-01,  6.2700e-01, -1.1862e+00,
         -1.1697e-01, -1.3178e-01, -3.5207e-01, -6.1257e-02,  2.0614e-01,
         -6.1487e-02,  1.3311e-02,  1.8697e-01, -8.1142e-02, -4.1438e-01,
         -8.7356e-01,  8.0440e-01, -1.1664e+00,  6.2090e-01,  5.6529e-01,
          1.3854e-01,  2.0267e-01, -4.5128e-02, -1.5743e+00,  5.0541e-01,
         -3.9704e-01,  1.3536e-01]], device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
718000 特征值优化 tensor(0.5768, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7285e+00,  8.1505e-01, -1.5038e+00,  1.7152e-01,  1.2039e-01,
         -8.5805e-01, -8.2048e-01, -1.9225e+00, -1.3751e+00,  4.7199e-01,
         -8.7610e-01, -8.3408e-01,  1.1657e-01,  9.3898e-02,  2.6835e-02,
         -6.7899e-02, -2.0827e-01,  4.4835e-01, -9.3602e-02, -1.5143e-02,
          2.1420e-01, -1.0862e-01,  8.8718e-03,  5.7613e-02, -7.9230e-02,
         -3.5587e-01, -3.4673e-01, -1.9551e-02,  8.7002e-03, -6.2304e-01,
         -1.7113e-02,  2.9787e-02, -1.7905e-03,  6.0885e-02, -3.4885e-02,
          1.4616e-02,  1.6808e-01,  9.1406e-02, -1.2144e-01, -1.0879e-01,
         -1.6099e-01,  3.5616e-02,  2.7217e-01,  1.1284e-01, -8.3310e-02,
         -2.4259e-01, -4.5181e-02, -2.9987e-01,  6.2336e-01, -1.1563e+00,
         -1.1227e-01, -1.6721e-01, -3.5489e-01, -5.6390e-02,  2.1658e-01,
         -5.0076e-02,  3.8681e-02,  1.6945e-01, -8.4399e-02, -4.0236e-01,
         -8.3473e-01,  7.8566e-01, -1.1518e+00,  6.1623e-01,  5.7537e-01,
          1.3048e-01,  2.0246e-01, -4.2568e-02, -1.5565e+00,  4.9222e-01,
         -4.0835e-01,  1.4182e-01]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
719000 特征值优化 tensor(0.5794, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7342,  0.8307, -1.4435,  0.1859,  0.1023, -0.8715, -0.8342, -1.9515,
         -1.3891,  0.4777, -0.8901, -0.8117,  0.1164,  0.0512,  0.0828, -0.0935,
         -0.2166,  0.4548, -0.1006, -0.0393,  0.2147, -0.0980,  0.0207, -0.0360,
         -0.0623, -0.3705, -0.3299,  0.0111, -0.0117, -0.5916, -0.0142, -0.0316,
         -0.0247,  0.0580, -0.0530, -0.0189,  0.1539,  0.0961, -0.1297, -0.1064,
         -0.1551,  0.0498,  0.2757,  0.1106, -0.0795, -0.2390, -0.0526, -0.2803,
          0.6251, -1.1274, -0.0834, -0.1854, -0.3491, -0.0630,  0.2141, -0.0465,
          0.0169,  0.1808, -0.0867, -0.4123, -0.8076,  0.8066, -1.1192,  0.5986,
          0.5866,  0.1281,  0.1891, -0.0415, -1.5443,  0.4792, -0.4056,  0.1332]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
720000 特征值优化 tensor(0.5793, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7255e+00,  8.2508e-01, -1.3746e+00,  2.2328e-01,  1.0658e-01,
         -8.7027e-01, -8.5394e-01, -1.9493e+00, -1.3914e+00,  5.1045e-01,
         -8.7596e-01, -8.1393e-01,  1.1608e-01,  4.8369e-02,  8.3423e-02,
         -9.3423e-02, -2.1732e-01,  4.4004e-01, -9.4585e-02, -3.9655e-02,
          2.1449e-01, -8.4779e-02,  3.9710e-02, -5.0563e-02, -7.9571e-02,
         -3.5957e-01, -3.3378e-01, -7.0052e-03,  1.6628e-03, -5.7083e-01,
         -1.4928e-02, -3.0568e-02, -1.7088e-02,  5.8654e-02, -5.3255e-02,
         -2.3858e-02,  1.5124e-01,  9.7614e-02, -1.2693e-01, -1.0630e-01,
         -1.5351e-01,  4.6864e-02,  2.6970e-01,  1.1219e-01, -7.8198e-02,
         -2.3696e-01, -5.3404e-02, -2.6992e-01,  6.2105e-01, -1.0846e+00,
         -8.4488e-02, -1.6741e-01, -3.3371e-01, -7.2033e-02,  2.1479e-01,
         -5.8998e-02,  2.8461e-02,  1.7489e-01, -7.9864e-02, -4.0811e-01,
         -7.6929e-01,  7.9920e-01, -1.0836e+00,  5.7979e-01,  5.7738e-01,
          1.3337e-01,  1.8823e-01, -4.4574e-02, -1.5322e+00,  4.6974e-01,
         -4.0652e-01,  1.3772e-01]], device='cuda:0') tensor(0.2038, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
721000 特征值优化 tensor(0.5778, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7104e+00,  8.0788e-01, -1.3602e+00,  2.4667e-01,  1.2198e-01,
         -8.7070e-01, -8.6477e-01, -1.9422e+00, -1.4002e+00,  5.2134e-01,
         -8.5749e-01, -8.2492e-01,  1.1485e-01,  4.3023e-02,  1.0234e-01,
         -8.1741e-02, -2.0751e-01,  4.3938e-01, -8.7732e-02, -3.8829e-02,
          2.1502e-01, -8.0411e-02,  2.1476e-03, -5.8822e-02, -7.2658e-02,
         -3.6960e-01, -3.3783e-01, -3.4851e-03,  1.2756e-03, -5.6846e-01,
         -1.6946e-02, -3.6937e-02, -3.5615e-02,  5.8907e-02, -5.1307e-02,
         -2.0663e-02,  1.5239e-01,  1.0024e-01, -1.2869e-01, -1.0458e-01,
         -1.4959e-01,  4.6294e-02,  2.6110e-01,  1.1052e-01, -8.2729e-02,
         -2.3056e-01, -4.7537e-02, -2.7177e-01,  6.2001e-01, -1.0782e+00,
         -8.6803e-02, -1.6141e-01, -3.4534e-01, -6.4565e-02,  2.2041e-01,
         -5.3557e-02,  3.0196e-02,  1.7388e-01, -7.7563e-02, -4.0824e-01,
         -7.2479e-01,  7.7768e-01, -1.0515e+00,  5.6766e-01,  5.7450e-01,
          1.3673e-01,  1.8506e-01, -4.8532e-02, -1.4927e+00,  4.5425e-01,
         -3.9793e-01,  1.3738e-01]], device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
722000 特征值优化 tensor(0.5786, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6962,  0.7958, -1.3538,  0.2641,  0.1185, -0.8697, -0.9033, -1.9571,
         -1.3908,  0.4894, -0.8704, -0.8181,  0.1148,  0.0461,  0.0813, -0.0851,
         -0.2084,  0.4431, -0.0865, -0.0412,  0.2155, -0.0777,  0.0143, -0.0376,
         -0.0684, -0.3823, -0.3251, -0.0056,  0.0046, -0.5656, -0.0156, -0.0275,
         -0.0296,  0.0587, -0.0468, -0.0156,  0.1530,  0.0996, -0.1315, -0.1033,
         -0.1520,  0.0505,  0.2513,  0.1148, -0.0797, -0.2223, -0.0504, -0.2623,
          0.6126, -1.0740, -0.0961, -0.1571, -0.3530, -0.0621,  0.2175, -0.0474,
          0.0224,  0.1775, -0.0879, -0.4111, -0.6807,  0.7643, -1.0164,  0.5526,
          0.5919,  0.1302,  0.1824, -0.0436, -1.4571,  0.4344, -0.4084,  0.1338]],
       device='cuda:0') tensor(0.2054, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
723000 特征值优化 tensor(0.5823, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6993,  0.7903, -1.3566,  0.2708,  0.1157, -0.8749, -0.9058, -1.9483,
         -1.3980,  0.5024, -0.8695, -0.8238,  0.1163,  0.0623,  0.0367, -0.0984,
         -0.2235,  0.4522, -0.0856, -0.0305,  0.2141, -0.0762,  0.0159, -0.0088,
         -0.0470, -0.3716, -0.3308,  0.0125,  0.0129, -0.5690, -0.0161, -0.0190,
         -0.0235,  0.0566, -0.0501, -0.0083,  0.1572,  0.1010, -0.1322, -0.1046,
         -0.1546,  0.0491,  0.2561,  0.1106, -0.0834, -0.2235, -0.0468, -0.2679,
          0.6138, -1.0794, -0.0980, -0.1558, -0.3501, -0.0623,  0.2306, -0.0389,
          0.0250,  0.1756, -0.0823, -0.4122, -0.6513,  0.7502, -0.9800,  0.5359,
          0.5790,  0.1333,  0.1796, -0.0452, -1.4142,  0.4127, -0.4008,  0.1386]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
724000 特征值优化 tensor(0.5776, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7191e+00,  8.0828e-01, -1.3666e+00,  2.5420e-01,  1.0916e-01,
         -8.7328e-01, -9.0046e-01, -1.9485e+00, -1.4035e+00,  5.0479e-01,
         -8.7130e-01, -8.3712e-01,  1.1434e-01,  1.2231e-01,  6.6664e-03,
         -1.1246e-01, -2.4983e-01,  4.5471e-01, -7.0746e-02,  2.9985e-04,
          2.1636e-01, -7.8711e-02,  4.1682e-02,  5.1110e-02, -8.9614e-02,
         -3.4418e-01, -3.4038e-01, -9.4748e-03,  2.4433e-02, -5.7756e-01,
         -1.2765e-02,  6.9143e-03,  2.2342e-02,  5.7950e-02, -2.9178e-02,
          2.8081e-02,  1.5902e-01,  9.8481e-02, -1.2217e-01, -1.1040e-01,
         -1.5946e-01,  3.7170e-02,  2.6987e-01,  1.1345e-01, -7.7450e-02,
         -2.1549e-01, -6.2380e-02, -2.8062e-01,  6.1498e-01, -1.0897e+00,
         -9.2790e-02, -1.5421e-01, -3.6815e-01, -5.4602e-02,  2.3321e-01,
         -1.8974e-02,  5.6941e-02,  1.5749e-01, -8.1560e-02, -4.0337e-01,
         -6.2297e-01,  7.2295e-01, -9.5352e-01,  5.2078e-01,  5.8313e-01,
          1.2498e-01,  1.8872e-01, -3.8540e-02, -1.3604e+00,  3.8682e-01,
         -4.1675e-01,  1.5086e-01]], device='cuda:0') tensor(0.2047, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
725000 特征值优化 tensor(0.5904, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6855,  0.7793, -1.3702,  0.2464,  0.1170, -0.8743, -0.8978, -1.9445,
         -1.3792,  0.5048, -0.8566, -0.8200,  0.1160,  0.0506,  0.0814, -0.1106,
         -0.2166,  0.4424, -0.0999, -0.0175,  0.2167, -0.0798, -0.0153, -0.0221,
         -0.0502, -0.3618, -0.3322,  0.0065,  0.0212, -0.5718, -0.0165, -0.0107,
         -0.0039,  0.0536, -0.0425,  0.0083,  0.1578,  0.0995, -0.1243, -0.1083,
         -0.1604,  0.0390,  0.2487,  0.1153, -0.0817, -0.2150, -0.0499, -0.2675,
          0.6161, -1.0861, -0.0988, -0.1578, -0.3390, -0.0634,  0.2354, -0.0449,
          0.0102,  0.1746, -0.0861, -0.4111, -0.6006,  0.7132, -0.9072,  0.4963,
          0.5751,  0.1289,  0.1840, -0.0415, -1.3280,  0.3711, -0.4012,  0.1424]],
       device='cuda:0') tensor(0.2033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
726000 特征值优化 tensor(0.5814, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6794,  0.7711, -1.3657,  0.2535,  0.1023, -0.8616, -0.9260, -1.9523,
         -1.3989,  0.5205, -0.8677, -0.8225,  0.1165,  0.0562,  0.0651, -0.0870,
         -0.2261,  0.4424, -0.0905, -0.0303,  0.2144, -0.0808,  0.0259, -0.0275,
         -0.0705, -0.3569, -0.3393,  0.0029,  0.0077, -0.5700, -0.0167, -0.0227,
         -0.0325,  0.0569, -0.0494, -0.0160,  0.1625,  0.1030, -0.1267, -0.1059,
         -0.1622,  0.0444,  0.2445,  0.1120, -0.0808, -0.2155, -0.0468, -0.2769,
          0.6241, -1.0790, -0.0902, -0.1629, -0.3255, -0.0772,  0.2346, -0.0493,
          0.0181,  0.1796, -0.0801, -0.4092, -0.5643,  0.7009, -0.8684,  0.4821,
          0.5800,  0.1314,  0.1816, -0.0427, -1.2855,  0.3537, -0.3935,  0.1375]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
727000 特征值优化 tensor(0.5748, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6843,  0.7770, -1.3434,  0.2513,  0.1219, -0.8694, -0.9243, -1.9694,
         -1.3854,  0.4987, -0.8734, -0.8479,  0.1135,  0.1241,  0.0098, -0.0941,
         -0.2413,  0.4536, -0.0681,  0.0030,  0.2167, -0.0760,  0.0578,  0.0545,
         -0.1070, -0.3300, -0.3435, -0.0161,  0.0125, -0.5692, -0.0124,  0.0184,
          0.0047,  0.0592, -0.0191,  0.0389,  0.1681,  0.0983, -0.1217, -0.1098,
         -0.1717,  0.0361,  0.2515,  0.1161, -0.0762, -0.1983, -0.0654, -0.2753,
          0.6166, -1.0786, -0.0834, -0.1526, -0.3781, -0.0470,  0.2204, -0.0302,
          0.0559,  0.1600, -0.0834, -0.4052, -0.5404,  0.6620, -0.8457,  0.4701,
          0.5762,  0.1327,  0.1916, -0.0451, -1.2296,  0.3326, -0.4144,  0.1434]],
       device='cuda:0') tensor(0.2051, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
728000 特征值优化 tensor(0.5827, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6802e+00,  7.7221e-01, -1.3641e+00,  2.5245e-01,  9.8226e-02,
         -8.5042e-01, -9.3449e-01, -1.9609e+00, -1.3780e+00,  4.8348e-01,
         -8.7843e-01, -8.3947e-01,  1.1537e-01,  8.5735e-02,  4.1040e-02,
         -1.1438e-01, -2.3643e-01,  4.4727e-01, -7.3327e-02, -1.0027e-02,
          2.1605e-01, -8.0973e-02,  6.8942e-05,  2.6005e-02, -7.6807e-02,
         -3.5358e-01, -3.3137e-01, -1.0979e-02,  2.4627e-02, -5.7409e-01,
         -1.2753e-02, -1.5093e-03,  8.5613e-03,  6.0932e-02, -3.2914e-02,
          2.0609e-02,  1.6288e-01,  1.0208e-01, -1.2307e-01, -1.0985e-01,
         -1.6251e-01,  3.8815e-02,  2.4980e-01,  1.1104e-01, -7.4273e-02,
         -2.0102e-01, -6.0878e-02, -2.7339e-01,  6.1602e-01, -1.0824e+00,
         -9.8581e-02, -1.5520e-01, -3.4489e-01, -6.5594e-02,  2.3372e-01,
         -3.4416e-02,  3.1578e-02,  1.7328e-01, -9.2153e-02, -4.0249e-01,
         -5.1239e-01,  6.6895e-01, -7.9829e-01,  4.4939e-01,  5.9190e-01,
          1.2688e-01,  1.8514e-01, -3.8222e-02, -1.1920e+00,  3.1149e-01,
         -4.1694e-01,  1.4109e-01]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
729000 特征值优化 tensor(0.6051, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6963e+00,  7.8794e-01, -1.3667e+00,  2.6276e-01,  1.1542e-01,
         -8.7795e-01, -9.3314e-01, -1.9427e+00, -1.3914e+00,  5.2382e-01,
         -8.5693e-01, -8.3723e-01,  1.1637e-01,  4.9826e-02,  1.1987e-01,
         -8.4829e-02, -2.1772e-01,  4.3682e-01, -9.8974e-02, -2.3826e-02,
          2.1571e-01, -7.6763e-02, -8.4051e-03, -6.0706e-02, -6.9918e-02,
         -3.5039e-01, -3.4310e-01, -1.1576e-03,  1.1392e-02, -5.7302e-01,
         -1.4608e-02, -2.7768e-02, -2.0326e-02,  5.6056e-02, -4.9340e-02,
         -7.1002e-03,  1.6447e-01,  1.0260e-01, -1.2879e-01, -1.0469e-01,
         -1.6178e-01,  4.1563e-02,  2.5643e-01,  1.1320e-01, -7.9462e-02,
         -2.2923e-01, -4.1759e-02, -2.8234e-01,  6.2697e-01, -1.0837e+00,
         -9.3250e-02, -1.6132e-01, -3.3277e-01, -7.0507e-02,  2.1501e-01,
         -6.0946e-02,  2.3928e-02,  1.7547e-01, -8.2021e-02, -4.0934e-01,
         -4.9002e-01,  6.5047e-01, -7.5407e-01,  4.1967e-01,  5.7810e-01,
          1.3373e-01,  1.8365e-01, -4.7028e-02, -1.1633e+00,  3.0518e-01,
         -3.8609e-01,  1.3745e-01]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
730000 特征值优化 tensor(0.5780, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7032e+00,  8.0072e-01, -1.3703e+00,  2.5392e-01,  1.1319e-01,
         -8.7556e-01, -9.1349e-01, -1.9454e+00, -1.3920e+00,  5.1494e-01,
         -8.5367e-01, -8.3153e-01,  1.1469e-01,  4.7429e-02,  7.7363e-02,
         -8.9877e-02, -2.1854e-01,  4.4109e-01, -8.3534e-02, -3.9300e-02,
          2.1532e-01, -7.9444e-02, -8.4621e-03, -3.1878e-02, -6.1291e-02,
         -3.8310e-01, -3.3204e-01, -4.0352e-04,  1.2357e-02, -5.7186e-01,
         -1.5366e-02, -2.1404e-02, -3.5882e-02,  5.7983e-02, -5.3685e-02,
         -1.6476e-02,  1.6154e-01,  1.0555e-01, -1.3225e-01, -1.0179e-01,
         -1.5550e-01,  4.9425e-02,  2.5745e-01,  1.1213e-01, -8.3298e-02,
         -2.2665e-01, -4.8336e-02, -2.6805e-01,  6.1313e-01, -1.0871e+00,
         -9.3988e-02, -1.5976e-01, -3.5452e-01, -6.0063e-02,  2.3315e-01,
         -3.5850e-02,  2.9596e-02,  1.7388e-01, -8.1811e-02, -4.0910e-01,
         -4.5341e-01,  6.4289e-01, -7.3152e-01,  4.1512e-01,  5.8098e-01,
          1.3605e-01,  1.7420e-01, -4.8800e-02, -1.1103e+00,  2.6753e-01,
         -4.0577e-01,  1.3891e-01]], device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
731000 特征值优化 tensor(0.6083, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7237e+00,  8.0063e-01, -1.3762e+00,  2.3506e-01,  1.3309e-01,
         -8.9026e-01, -9.1776e-01, -1.9290e+00, -1.3919e+00,  4.9676e-01,
         -8.6336e-01, -8.3660e-01,  1.1844e-01,  1.2979e-01, -1.0330e-02,
         -1.2026e-01, -2.4034e-01,  4.6784e-01, -6.6127e-02, -5.8646e-03,
          2.1497e-01, -7.8865e-02,  5.4634e-02,  6.6572e-02, -7.6939e-02,
         -3.3824e-01, -3.3816e-01, -8.7606e-04,  1.5729e-02, -5.7344e-01,
         -1.1563e-02,  8.8917e-03, -6.4149e-04,  5.1483e-02, -5.1989e-02,
          1.9770e-02,  1.6446e-01,  1.0435e-01, -1.2234e-01, -1.0811e-01,
         -1.5774e-01,  3.8550e-02,  2.7169e-01,  1.1462e-01, -8.1073e-02,
         -2.3174e-01, -5.1175e-02, -2.7654e-01,  6.1935e-01, -1.0908e+00,
         -9.1868e-02, -1.6227e-01, -3.7462e-01, -5.2698e-02,  2.4184e-01,
         -2.0852e-02,  4.7039e-02,  1.6287e-01, -8.8051e-02, -4.0271e-01,
         -4.4286e-01,  6.2053e-01, -6.9544e-01,  3.9156e-01,  5.9002e-01,
          1.2216e-01,  1.8063e-01, -3.5474e-02, -1.0657e+00,  2.6060e-01,
         -4.2276e-01,  1.4896e-01]], device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
732000 特征值优化 tensor(0.5775, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7327,  0.8262, -1.3809,  0.2180,  0.1081, -0.8643, -0.9062, -1.9193,
         -1.3904,  0.5082, -0.8443, -0.8363,  0.1155,  0.1063,  0.0255, -0.1187,
         -0.2435,  0.4567, -0.0719,  0.0038,  0.2155, -0.0874,  0.0282,  0.0468,
         -0.0845, -0.3507, -0.3406, -0.0128,  0.0209, -0.5803, -0.0124,  0.0119,
          0.0055,  0.0592, -0.0354,  0.0230,  0.1686,  0.1052, -0.1213, -0.1100,
         -0.1656,  0.0364,  0.2773,  0.1127, -0.0793, -0.2281, -0.0598, -0.2780,
          0.6164, -1.0965, -0.0904, -0.1618, -0.3655, -0.0549,  0.2415, -0.0204,
          0.0525,  0.1615, -0.0849, -0.4028, -0.3952,  0.5935, -0.6745,  0.3838,
          0.5834,  0.1255,  0.1803, -0.0374, -1.0278,  0.2269, -0.4260,  0.1521]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
733000 特征值优化 tensor(0.5986, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7151e+00,  8.1475e-01, -1.3900e+00,  2.1123e-01,  1.3345e-01,
         -8.8848e-01, -9.1060e-01, -1.9023e+00, -1.3717e+00,  4.9251e-01,
         -8.3654e-01, -8.1034e-01,  1.1792e-01,  5.4939e-02,  1.0237e-01,
         -1.1478e-01, -2.1137e-01,  4.4226e-01, -1.0333e-01, -1.5505e-02,
          2.1423e-01, -8.7347e-02, -1.5884e-02, -3.9809e-02, -6.1189e-02,
         -3.6485e-01, -3.2027e-01, -1.0415e-02,  1.4582e-02, -5.7487e-01,
         -1.7457e-02, -1.0785e-02, -6.7802e-03,  5.4727e-02, -5.8212e-02,
         -3.0432e-04,  1.7057e-01,  1.0515e-01, -1.2609e-01, -1.0836e-01,
         -1.6296e-01,  4.0924e-02,  2.7655e-01,  1.1273e-01, -8.7914e-02,
         -2.4393e-01, -4.4207e-02, -2.7105e-01,  6.1868e-01, -1.0957e+00,
         -9.2167e-02, -1.7115e-01, -3.5017e-01, -6.2269e-02,  2.4822e-01,
         -3.3587e-02,  2.0084e-02,  1.7277e-01, -9.4211e-02, -4.0609e-01,
         -3.8375e-01,  5.9318e-01, -6.2029e-01,  3.5244e-01,  5.8852e-01,
          1.2620e-01,  1.6901e-01, -3.3318e-02, -1.0105e+00,  2.1932e-01,
         -4.1466e-01,  1.4110e-01]], device='cuda:0') tensor(0.2028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
734000 特征值优化 tensor(0.5817, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7283e+00,  8.1813e-01, -1.3874e+00,  2.1407e-01,  1.1937e-01,
         -8.7866e-01, -9.0392e-01, -1.9035e+00, -1.3986e+00,  5.1480e-01,
         -8.2502e-01, -8.1579e-01,  1.1578e-01,  6.8015e-02,  2.8305e-02,
         -1.1469e-01, -2.3352e-01,  4.4438e-01, -6.7972e-02, -3.3720e-02,
          2.1441e-01, -8.8099e-02,  1.7161e-02, -1.2847e-03, -5.6878e-02,
         -3.7216e-01, -3.3219e-01,  1.9207e-03,  1.1505e-02, -5.7576e-01,
         -1.4858e-02, -1.6512e-02, -2.2269e-02,  5.3997e-02, -6.1842e-02,
         -1.1462e-02,  1.6564e-01,  1.1153e-01, -1.3035e-01, -1.0661e-01,
         -1.5176e-01,  4.6234e-02,  2.6987e-01,  1.0960e-01, -8.2317e-02,
         -2.3585e-01, -4.8047e-02, -2.6759e-01,  6.1663e-01, -1.0930e+00,
         -9.6741e-02, -1.6571e-01, -3.5269e-01, -6.1567e-02,  2.3982e-01,
         -3.3564e-02,  3.2779e-02,  1.6845e-01, -8.5142e-02, -4.1182e-01,
         -3.3585e-01,  5.7886e-01, -5.9904e-01,  3.5014e-01,  5.7833e-01,
          1.2793e-01,  1.6257e-01, -3.7340e-02, -9.5504e-01,  1.9154e-01,
         -4.1038e-01,  1.4847e-01]], device='cuda:0') tensor(0.2045, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
735000 特征值优化 tensor(0.5765, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7199,  0.8126, -1.3749,  0.2037,  0.1144, -0.8699, -0.8960, -1.8969,
         -1.3986,  0.5241, -0.8203, -0.8343,  0.1142,  0.1251,  0.0054, -0.1180,
         -0.2465,  0.4576, -0.0471,  0.0043,  0.2159, -0.0909,  0.0409,  0.0650,
         -0.0870, -0.3473, -0.3470, -0.0118,  0.0191, -0.5772, -0.0121,  0.0175,
          0.0088,  0.0591, -0.0382,  0.0278,  0.1679,  0.1076, -0.1194, -0.1112,
         -0.1620,  0.0340,  0.2710,  0.1147, -0.0793, -0.2187, -0.0619, -0.2747,
          0.6182, -1.0943, -0.0884, -0.1665, -0.3753, -0.0502,  0.2443, -0.0148,
          0.0595,  0.1583, -0.0824, -0.4078, -0.3001,  0.5483, -0.5736,  0.3375,
          0.5797,  0.1245,  0.1748, -0.0338, -0.9087,  0.1699, -0.4260,  0.1569]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
736000 特征值优化 tensor(0.5866, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7265e+00,  8.2384e-01, -1.3790e+00,  1.9317e-01,  1.0670e-01,
         -8.6420e-01, -8.9675e-01, -1.8871e+00, -1.3775e+00,  4.9992e-01,
         -8.0899e-01, -8.3478e-01,  1.1747e-01,  5.8010e-02,  6.9779e-02,
         -1.2060e-01, -2.2963e-01,  4.3907e-01, -8.5247e-02, -1.1522e-02,
          2.1452e-01, -9.2317e-02, -8.8641e-03, -5.0081e-03, -5.5861e-02,
         -3.6346e-01, -3.2810e-01, -8.4240e-04,  1.9592e-02, -5.7493e-01,
         -1.4991e-02, -7.2536e-03, -5.8519e-03,  5.6785e-02, -4.5385e-02,
          1.3178e-02,  1.6530e-01,  1.0914e-01, -1.2233e-01, -1.0828e-01,
         -1.6125e-01,  3.7423e-02,  2.7074e-01,  1.1390e-01, -7.9206e-02,
         -2.3295e-01, -5.4497e-02, -2.6792e-01,  6.1563e-01, -1.0938e+00,
         -9.4564e-02, -1.7099e-01, -3.3888e-01, -6.6573e-02,  2.5198e-01,
         -2.8775e-02,  2.4361e-02,  1.7289e-01, -9.4365e-02, -4.0118e-01,
         -2.8108e-01,  5.4007e-01, -5.2824e-01,  3.0930e-01,  5.9200e-01,
          1.2231e-01,  1.7248e-01, -3.2620e-02, -8.8381e-01,  1.5415e-01,
         -4.1951e-01,  1.4890e-01]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
737000 特征值优化 tensor(0.5777, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7169e+00,  8.0645e-01, -1.3802e+00,  1.9768e-01,  1.1672e-01,
         -8.7931e-01, -8.9334e-01, -1.8758e+00, -1.3973e+00,  5.3493e-01,
         -7.9596e-01, -8.1404e-01,  1.1638e-01,  6.1868e-02,  6.8217e-02,
         -9.8440e-02, -2.2256e-01,  4.4139e-01, -6.7632e-02, -3.6826e-02,
          2.1676e-01, -9.2278e-02,  1.2874e-03, -1.8082e-02, -6.6710e-02,
         -3.7283e-01, -3.2960e-01, -2.4842e-03,  9.8679e-03, -5.7597e-01,
         -1.5076e-02, -2.3312e-02, -2.7297e-02,  5.6662e-02, -6.2953e-02,
         -2.0175e-02,  1.7203e-01,  1.1211e-01, -1.2989e-01, -1.0714e-01,
         -1.6243e-01,  4.5253e-02,  2.6312e-01,  1.1033e-01, -8.3297e-02,
         -2.3093e-01, -4.9966e-02, -2.7079e-01,  6.1297e-01, -1.0951e+00,
         -9.1928e-02, -1.7194e-01, -3.5731e-01, -5.8506e-02,  2.4122e-01,
         -3.5455e-02,  2.4183e-02,  1.7617e-01, -8.2605e-02, -4.1626e-01,
         -2.4438e-01,  5.2059e-01, -4.8593e-01,  2.9734e-01,  5.7705e-01,
          1.2754e-01,  1.5718e-01, -3.9168e-02, -8.1850e-01,  1.3063e-01,
         -4.1182e-01,  1.4577e-01]], device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
738000 特征值优化 tensor(0.5739, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7367,  0.8144, -1.3685,  0.1884,  0.1185, -0.8756, -0.8810, -1.8778,
         -1.4045,  0.5250, -0.7956, -0.8362,  0.1148,  0.1362,  0.0054, -0.1143,
         -0.2522,  0.4536, -0.0417,  0.0079,  0.2186, -0.0919,  0.0564,  0.0721,
         -0.0912, -0.3375, -0.3531, -0.0099,  0.0150, -0.5744, -0.0118,  0.0198,
          0.0059,  0.0588, -0.0363,  0.0239,  0.1698,  0.1114, -0.1207, -0.1109,
         -0.1595,  0.0350,  0.2748,  0.1121, -0.0823, -0.2253, -0.0625, -0.2741,
          0.6155, -1.0935, -0.0844, -0.1725, -0.3780, -0.0484,  0.2467, -0.0161,
          0.0660,  0.1543, -0.0817, -0.4067, -0.2096,  0.4976, -0.4535,  0.2799,
          0.5827,  0.1221,  0.1723, -0.0330, -0.7613,  0.1015, -0.4254,  0.1587]],
       device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
739000 特征值优化 tensor(0.5815, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7047e+00,  7.8512e-01, -1.3668e+00,  1.6974e-01,  9.7760e-02,
         -8.4841e-01, -8.9588e-01, -1.8649e+00, -1.3767e+00,  5.2104e-01,
         -7.9803e-01, -8.3665e-01,  1.1569e-01,  7.4659e-02,  6.1234e-02,
         -1.1425e-01, -2.2804e-01,  4.4035e-01, -6.2516e-02, -5.2135e-03,
          2.1856e-01, -9.8953e-02,  7.0563e-03,  1.3662e-02, -6.8533e-02,
         -3.5986e-01, -3.3442e-01, -8.6803e-03,  2.0420e-02, -5.7337e-01,
         -1.2049e-02, -3.6166e-05, -8.1409e-03,  6.0696e-02, -3.6843e-02,
          1.5431e-02,  1.6963e-01,  1.1401e-01, -1.2081e-01, -1.1119e-01,
         -1.6003e-01,  3.5519e-02,  2.5543e-01,  1.0940e-01, -7.5608e-02,
         -2.1619e-01, -5.9311e-02, -2.7163e-01,  6.1520e-01, -1.0885e+00,
         -9.3985e-02, -1.7747e-01, -3.4526e-01, -6.6808e-02,  2.5088e-01,
         -2.6959e-02,  3.4655e-02,  1.7149e-01, -8.6513e-02, -4.0157e-01,
         -1.7681e-01,  4.8849e-01, -4.0979e-01,  2.5907e-01,  5.8335e-01,
          1.2330e-01,  1.7146e-01, -3.6739e-02, -7.3216e-01,  8.4931e-02,
         -4.1884e-01,  1.4921e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
740000 特征值优化 tensor(0.5748, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7151,  0.8159, -1.3672,  0.1713,  0.1223, -0.8846, -0.8977, -1.8727,
         -1.3943,  0.5101, -0.7972, -0.8047,  0.1147,  0.0446,  0.0798, -0.1037,
         -0.2098,  0.4375, -0.0668, -0.0371,  0.2151, -0.1013, -0.0119, -0.0293,
         -0.0608, -0.3817, -0.3288, -0.0026,  0.0150, -0.5706, -0.0152, -0.0253,
         -0.0306,  0.0575, -0.0643, -0.0195,  0.1761,  0.1120, -0.1311, -0.1048,
         -0.1715,  0.0491,  0.2606,  0.1149, -0.0826, -0.2358, -0.0504, -0.2679,
          0.6142, -1.0860, -0.0919, -0.1813, -0.3625, -0.0569,  0.2430, -0.0341,
          0.0269,  0.1767, -0.0877, -0.4173, -0.1595,  0.4670, -0.3772,  0.2411,
          0.5885,  0.1256,  0.1501, -0.0307, -0.6832,  0.0654, -0.4110,  0.1346]],
       device='cuda:0') tensor(0.2057, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
741000 特征值优化 tensor(0.5952, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7217,  0.7895, -1.3668,  0.1699,  0.1510, -0.8973, -0.9063, -1.8479,
         -1.3964,  0.5168, -0.8034, -0.8266,  0.1195,  0.1092,  0.0148, -0.1251,
         -0.2328,  0.4605, -0.0637, -0.0166,  0.2167, -0.0975,  0.0359,  0.0468,
         -0.0523, -0.3315, -0.3385,  0.0095,  0.0144, -0.5697, -0.0157,  0.0021,
         -0.0170,  0.0493, -0.0577,  0.0034,  0.1769,  0.1159, -0.1223, -0.1099,
         -0.1675,  0.0368,  0.2723,  0.1079, -0.0883, -0.2272, -0.0487, -0.2705,
          0.6207, -1.0846, -0.0904, -0.1827, -0.3602, -0.0601,  0.2585, -0.0316,
          0.0374,  0.1583, -0.0936, -0.4081, -0.1439,  0.4682, -0.3259,  0.2168,
          0.5851,  0.1249,  0.1647, -0.0307, -0.6537,  0.0601, -0.4210,  0.1508]],
       device='cuda:0') tensor(0.2055, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
742000 特征值优化 tensor(0.5866, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7181,  0.8129, -1.3656,  0.1547,  0.1122, -0.8643, -0.8804, -1.8659,
         -1.3845,  0.4909, -0.7876, -0.8358,  0.1179,  0.0512,  0.0776, -0.1227,
         -0.2254,  0.4301, -0.0784, -0.0128,  0.2163, -0.1005, -0.0096, -0.0126,
         -0.0590, -0.3683, -0.3232, -0.0118,  0.0230, -0.5721, -0.0163, -0.0063,
         -0.0037,  0.0584, -0.0438,  0.0124,  0.1772,  0.1160, -0.1258, -0.1072,
         -0.1713,  0.0392,  0.2607,  0.1136, -0.0791, -0.2330, -0.0567, -0.2672,
          0.6150, -1.0863, -0.0941, -0.1796, -0.3396, -0.0645,  0.2658, -0.0275,
          0.0231,  0.1745, -0.0982, -0.4022, -0.1199,  0.4461, -0.2992,  0.2079,
          0.6042,  0.1228,  0.1646, -0.0327, -0.6077,  0.0313, -0.4238,  0.1477]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
743000 特征值优化 tensor(0.5722, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7202,  0.8259, -1.3716,  0.1736,  0.1274, -0.8986, -0.8931, -1.8614,
         -1.3979,  0.5008, -0.7882, -0.8047,  0.1147,  0.0363,  0.1162, -0.1010,
         -0.2065,  0.4320, -0.0682, -0.0387,  0.2155, -0.1007, -0.0320, -0.0463,
         -0.0631, -0.3840, -0.3280, -0.0058,  0.0150, -0.5716, -0.0164, -0.0341,
         -0.0380,  0.0570, -0.0705, -0.0330,  0.1821,  0.1142, -0.1322, -0.1031,
         -0.1764,  0.0505,  0.2633,  0.1155, -0.0848, -0.2367, -0.0531, -0.2675,
          0.6150, -1.0882, -0.0923, -0.1813, -0.3664, -0.0537,  0.2439, -0.0349,
          0.0335,  0.1763, -0.0881, -0.4181, -0.0875,  0.4181, -0.2785,  0.1968,
          0.5927,  0.1268,  0.1514, -0.0308, -0.5620,  0.0122, -0.4146,  0.1330]],
       device='cuda:0') tensor(0.2055, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
744000 特征值优化 tensor(0.5787, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7138e+00,  8.0449e-01, -1.3692e+00,  1.6983e-01,  1.1867e-01,
         -8.7584e-01, -9.0716e-01, -1.8565e+00, -1.4001e+00,  5.2759e-01,
         -7.9064e-01, -8.1555e-01,  1.1543e-01,  5.3320e-02,  4.7150e-02,
         -1.1585e-01, -2.0968e-01,  4.4263e-01, -6.0433e-02, -3.4996e-02,
          2.1701e-01, -1.0054e-01,  5.8061e-03, -8.3233e-03, -5.5107e-02,
         -3.7072e-01, -3.3255e-01,  5.7128e-03,  1.1709e-02, -5.7169e-01,
         -1.3989e-02, -1.5118e-02, -3.0556e-02,  5.6471e-02, -6.0614e-02,
         -1.3411e-02,  1.7758e-01,  1.1860e-01, -1.3027e-01, -1.0631e-01,
         -1.6556e-01,  4.7859e-02,  2.6098e-01,  1.0920e-01, -8.3053e-02,
         -2.2825e-01, -5.0681e-02, -2.6755e-01,  6.1253e-01, -1.0866e+00,
         -9.3988e-02, -1.8067e-01, -3.5480e-01, -6.2786e-02,  2.5119e-01,
         -3.4509e-02,  2.6082e-02,  1.7345e-01, -8.3081e-02, -4.1744e-01,
         -4.9462e-02,  4.1549e-01, -2.4095e-01,  1.8344e-01,  5.7920e-01,
          1.2742e-01,  1.5529e-01, -3.6344e-02, -5.3237e-01, -3.1106e-04,
         -4.1069e-01,  1.4539e-01]], device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
745000 特征值优化 tensor(0.5725, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7318,  0.8116, -1.3530,  0.1598,  0.1210, -0.8725, -0.8877, -1.8659,
         -1.4052,  0.5236, -0.7881, -0.8386,  0.1146,  0.1317,  0.0131, -0.1200,
         -0.2466,  0.4443, -0.0396,  0.0073,  0.2185, -0.0984,  0.0534,  0.0647,
         -0.0917, -0.3386, -0.3524, -0.0159,  0.0153, -0.5711, -0.0114,  0.0234,
          0.0031,  0.0593, -0.0336,  0.0220,  0.1794,  0.1195, -0.1206, -0.1111,
         -0.1660,  0.0349,  0.2718,  0.1122, -0.0819, -0.2245, -0.0618, -0.2758,
          0.6153, -1.0878, -0.0825, -0.1788, -0.3778, -0.0480,  0.2519, -0.0234,
          0.0671,  0.1545, -0.0834, -0.4075, -0.0325,  0.3995, -0.2118,  0.1733,
          0.5875,  0.1195,  0.1735, -0.0341, -0.4857, -0.0200, -0.4303,  0.1593]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
746000 特征值优化 tensor(0.5830, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6959e+00,  7.8379e-01, -1.3587e+00,  1.5076e-01,  1.0282e-01,
         -8.5502e-01, -8.9474e-01, -1.8639e+00, -1.3780e+00,  5.1590e-01,
         -7.8943e-01, -8.3666e-01,  1.1709e-01,  5.9455e-02,  7.2357e-02,
         -1.2199e-01, -2.2839e-01,  4.1746e-01, -5.9736e-02, -6.5971e-03,
          2.1696e-01, -1.0351e-01,  1.7376e-03, -2.4745e-03, -5.9658e-02,
         -3.6277e-01, -3.3149e-01, -6.8216e-03,  2.1565e-02, -5.7065e-01,
         -1.2078e-02, -1.9671e-03, -1.1389e-02,  5.9484e-02, -3.6903e-02,
          1.5632e-02,  1.7912e-01,  1.2068e-01, -1.2171e-01, -1.1023e-01,
         -1.6532e-01,  3.7739e-02,  2.5174e-01,  1.0973e-01, -7.7699e-02,
         -2.1926e-01, -5.4575e-02, -2.7129e-01,  6.1463e-01, -1.0835e+00,
         -9.4776e-02, -1.8259e-01, -3.3971e-01, -6.8366e-02,  2.6067e-01,
         -2.7364e-02,  2.7599e-02,  1.7297e-01, -8.9546e-02, -4.0271e-01,
         -1.7752e-02,  3.9362e-01, -1.7133e-01,  1.5247e-01,  5.8987e-01,
          1.2168e-01,  1.7038e-01, -3.4343e-02, -4.5916e-01, -2.8382e-02,
         -4.2041e-01,  1.4907e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
747000 特征值优化 tensor(0.5714, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7172,  0.8241, -1.3674,  0.1654,  0.1340, -0.8981, -0.8982, -1.8575,
         -1.3964,  0.5036, -0.7880, -0.8092,  0.1146,  0.0369,  0.1275, -0.1122,
         -0.2065,  0.4246, -0.0615, -0.0341,  0.2147, -0.1023, -0.0309, -0.0543,
         -0.0623, -0.3845, -0.3308, -0.0075,  0.0147, -0.5702, -0.0171, -0.0344,
         -0.0429,  0.0571, -0.0680, -0.0303,  0.1875,  0.1192, -0.1315, -0.1025,
         -0.1801,  0.0501,  0.2628,  0.1168, -0.0842, -0.2406, -0.0509, -0.2671,
          0.6152, -1.0868, -0.0913, -0.1826, -0.3697, -0.0514,  0.2556, -0.0336,
          0.0345,  0.1750, -0.0893, -0.4166,  0.0104,  0.3640, -0.1445,  0.1387,
          0.5950,  0.1275,  0.1532, -0.0334, -0.4108, -0.0533, -0.4161,  0.1327]],
       device='cuda:0') tensor(0.2054, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
748000 特征值优化 tensor(0.5757, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7127e+00,  8.0315e-01, -1.3663e+00,  1.6710e-01,  1.2124e-01,
         -8.7679e-01, -8.9096e-01, -1.8520e+00, -1.3967e+00,  5.2481e-01,
         -7.8418e-01, -8.1442e-01,  1.1516e-01,  3.8273e-02,  7.7190e-02,
         -1.2047e-01, -2.0867e-01,  4.3088e-01, -5.3002e-02, -3.1498e-02,
          2.1622e-01, -1.0217e-01, -1.6055e-02, -3.0938e-02, -6.2631e-02,
         -3.7492e-01, -3.2979e-01, -9.1496e-04,  9.0046e-03, -5.7063e-01,
         -1.3934e-02, -1.9334e-02, -4.3618e-02,  5.6918e-02, -6.2875e-02,
         -1.6216e-02,  1.8313e-01,  1.2119e-01, -1.2994e-01, -1.0490e-01,
         -1.7121e-01,  4.7107e-02,  2.6091e-01,  1.1068e-01, -8.2374e-02,
         -2.2487e-01, -5.4724e-02, -2.6814e-01,  6.1337e-01, -1.0859e+00,
         -9.3263e-02, -1.8176e-01, -3.5988e-01, -6.0454e-02,  2.5701e-01,
         -3.4998e-02,  1.7650e-02,  1.7853e-01, -8.3615e-02, -4.1898e-01,
          3.9977e-02,  3.5925e-01, -1.0647e-01,  1.2015e-01,  5.8256e-01,
          1.2806e-01,  1.5409e-01, -3.4314e-02, -3.7735e-01, -6.8839e-02,
         -4.1614e-01,  1.4358e-01]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
749000 正交保障 tensor(0.2036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7480,  0.8068, -1.3445,  0.1632,  0.1302, -0.8728, -0.8753, -1.8522,
         -1.3962,  0.5154, -0.7847, -0.8379,  0.1179,  0.1356,  0.0065, -0.1210,
         -0.2427,  0.4462, -0.0329,  0.0107,  0.2213, -0.0981,  0.0613,  0.0698,
         -0.0979, -0.3354, -0.3503, -0.0201,  0.0160, -0.5699, -0.0134,  0.0316,
         -0.0032,  0.0592, -0.0297,  0.0238,  0.1903,  0.1234, -0.1211, -0.1101,
         -0.1748,  0.0362,  0.2751,  0.1072, -0.0831, -0.2279, -0.0636, -0.2778,
          0.6156, -1.0850, -0.0835, -0.1776, -0.3913, -0.0390,  0.2585, -0.0268,
          0.0710,  0.1527, -0.0851, -0.4032,  0.0625,  0.3320, -0.0704,  0.1134,
          0.5878,  0.1219,  0.1775, -0.0390, -0.3152, -0.0878, -0.4344,  0.1578]],
       device='cuda:0') tensor(0.2036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
750000 特征值优化 tensor(0.5751, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7212,  0.7930, -1.3565,  0.1585,  0.1164, -0.8627, -0.8812, -1.8542,
         -1.3928,  0.5190, -0.7848, -0.8320,  0.1168,  0.1062,  0.0396, -0.1218,
         -0.2369,  0.4323, -0.0411,  0.0042,  0.2196, -0.0998,  0.0314,  0.0364,
         -0.0793, -0.3526, -0.3401, -0.0168,  0.0207, -0.5729, -0.0120,  0.0202,
         -0.0122,  0.0599, -0.0398,  0.0219,  0.1923,  0.1268, -0.1201, -0.1111,
         -0.1762,  0.0334,  0.2621,  0.1099, -0.0782, -0.2241, -0.0605, -0.2772,
          0.6143, -1.0881, -0.0875, -0.1787, -0.3661, -0.0527,  0.2671, -0.0322,
          0.0439,  0.1665, -0.0861, -0.4069,  0.0800,  0.3224, -0.0258,  0.0948,
          0.5881,  0.1204,  0.1689, -0.0317, -0.2826, -0.0972, -0.4263,  0.1539]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
751000 特征值优化 tensor(0.5989, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7098e+00,  8.0580e-01, -1.3643e+00,  1.6267e-01,  1.3512e-01,
         -8.8491e-01, -8.9938e-01, -1.8347e+00, -1.3822e+00,  4.9584e-01,
         -8.0719e-01, -8.2352e-01,  1.2090e-01,  3.3072e-02,  1.1822e-01,
         -1.3789e-01, -2.0589e-01,  4.1796e-01, -8.1808e-02, -1.0266e-02,
          2.1662e-01, -9.8475e-02, -1.7547e-02, -4.5241e-02, -5.2779e-02,
         -3.6734e-01, -3.1840e-01, -8.9063e-03,  1.4898e-02, -5.6786e-01,
         -1.5386e-02,  6.7106e-04, -1.7841e-02,  5.5228e-02, -5.8254e-02,
          1.4244e-03,  1.9461e-01,  1.2433e-01, -1.2654e-01, -1.0730e-01,
         -1.8202e-01,  4.0001e-02,  2.7029e-01,  1.1071e-01, -8.5741e-02,
         -2.3963e-01, -4.9649e-02, -2.6862e-01,  6.1986e-01, -1.0814e+00,
         -9.2137e-02, -1.8239e-01, -3.4805e-01, -6.0204e-02,  2.7298e-01,
         -4.1209e-02,  2.6149e-02,  1.6948e-01, -9.9774e-02, -4.0692e-01,
          7.9867e-02,  3.2611e-01,  1.3078e-02,  6.2820e-02,  5.9611e-01,
          1.2404e-01,  1.6114e-01, -3.0793e-02, -2.7568e-01, -1.0535e-01,
         -4.1620e-01,  1.4217e-01]], device='cuda:0') tensor(0.2113, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
752000 特征值优化 tensor(0.5747, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7267,  0.8285, -1.3675,  0.1726,  0.1254, -0.8820, -0.9076, -1.8544,
         -1.3990,  0.5002, -0.8047, -0.8039,  0.1152,  0.0403,  0.0851, -0.1179,
         -0.2153,  0.4396, -0.0563, -0.0338,  0.2161, -0.1006, -0.0273, -0.0328,
         -0.0566, -0.3752, -0.3291,  0.0049,  0.0076, -0.5709, -0.0146, -0.0194,
         -0.0446,  0.0568, -0.0644, -0.0204,  0.1921,  0.1255, -0.1303, -0.1041,
         -0.1804,  0.0495,  0.2667,  0.1116, -0.0821, -0.2383, -0.0537, -0.2673,
          0.6131, -1.0863, -0.0931, -0.1811, -0.3613, -0.0592,  0.2673, -0.0327,
          0.0222,  0.1773, -0.0890, -0.4164,  0.1081,  0.3129,  0.0045,  0.0759,
          0.5964,  0.1243,  0.1543, -0.0289, -0.2409, -0.1233, -0.4130,  0.1353]],
       device='cuda:0') tensor(0.2074, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
753000 特征值优化 tensor(0.5941, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7461,  0.8095, -1.3616,  0.1755,  0.1504, -0.8969, -0.9241, -1.8447,
         -1.3933,  0.4991, -0.8189, -0.8227,  0.1197,  0.1164,  0.0145, -0.1374,
         -0.2396,  0.4655, -0.0597, -0.0159,  0.2181, -0.0954,  0.0354,  0.0435,
         -0.0560, -0.3282, -0.3355,  0.0056,  0.0147, -0.5686, -0.0149,  0.0174,
         -0.0211,  0.0513, -0.0542,  0.0045,  0.1956,  0.1263, -0.1240, -0.1096,
         -0.1772,  0.0387,  0.2812,  0.1052, -0.0840, -0.2359, -0.0527, -0.2720,
          0.6231, -1.0803, -0.0888, -0.1806, -0.3660, -0.0578,  0.2655, -0.0398,
          0.0321,  0.1630, -0.0969, -0.4023,  0.0971,  0.3174,  0.0266,  0.0638,
          0.5950,  0.1209,  0.1729, -0.0293, -0.2443, -0.1062, -0.4209,  0.1458]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
754000 特征值优化 tensor(0.5757, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7134e+00,  7.8552e-01, -1.3479e+00,  1.7555e-01,  1.0952e-01,
         -8.6647e-01, -9.0398e-01, -1.8609e+00, -1.3911e+00,  5.0263e-01,
         -7.9235e-01, -8.3218e-01,  1.1838e-01,  9.1835e-02,  5.4078e-02,
         -1.2561e-01, -2.3696e-01,  4.3005e-01, -3.8963e-02, -1.6698e-03,
          2.1774e-01, -9.7234e-02,  2.8381e-02,  2.4540e-02, -7.3365e-02,
         -3.6040e-01, -3.3389e-01, -2.0818e-02,  2.8170e-02, -5.7166e-01,
         -1.3972e-02,  1.4452e-02, -1.7642e-02,  5.8338e-02, -4.7787e-02,
          8.7878e-03,  2.0281e-01,  1.3000e-01, -1.2420e-01, -1.0862e-01,
         -1.8253e-01,  3.7972e-02,  2.5954e-01,  1.0704e-01, -8.3878e-02,
         -2.2507e-01, -5.2652e-02, -2.7748e-01,  6.1471e-01, -1.0846e+00,
         -9.1054e-02, -1.7370e-01, -3.5623e-01, -5.8970e-02,  3.1771e-01,
          2.8173e-02,  1.6435e-02,  1.7890e-01, -1.2455e-01, -3.8936e-01,
          1.1968e-01,  2.9024e-01,  5.1273e-02,  6.9747e-02,  5.8480e-01,
          1.2654e-01,  1.8217e-01, -3.9639e-02, -1.9127e-01, -1.2353e-01,
         -4.4986e-01,  1.6282e-01]], device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
755000 特征值优化 tensor(0.5763, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6779e+00,  7.7142e-01, -1.3307e+00,  2.0125e-01,  1.3231e-01,
         -8.8401e-01, -9.5417e-01, -1.8819e+00, -1.3928e+00,  4.8939e-01,
         -8.2517e-01, -8.3369e-01,  1.1624e-01,  3.6622e-02,  7.6133e-02,
         -1.1618e-01, -2.0888e-01,  4.4633e-01, -4.9337e-02, -3.2274e-02,
          2.1645e-01, -9.6191e-02, -2.7642e-02, -2.8066e-02, -5.5761e-02,
         -3.7326e-01, -3.2877e-01,  6.0699e-03,  1.8675e-03, -5.6379e-01,
         -1.3395e-02, -1.7919e-03, -4.5796e-02,  5.3638e-02, -5.3894e-02,
          1.6746e-03,  2.0488e-01,  1.2965e-01, -1.2875e-01, -1.0652e-01,
         -1.9263e-01,  4.4211e-02,  2.4260e-01,  1.0980e-01, -8.1262e-02,
         -2.1624e-01, -4.8626e-02, -2.8383e-01,  6.2422e-01, -1.0682e+00,
         -8.3760e-02, -1.8520e-01, -3.3165e-01, -7.7962e-02,  3.1524e-01,
          1.3249e-02,  4.7776e-03,  1.8061e-01, -1.2759e-01, -3.9486e-01,
          1.4721e-01,  2.8327e-01,  8.4302e-02,  5.4675e-02,  5.8946e-01,
          1.2300e-01,  1.7161e-01, -3.4889e-02, -1.7423e-01, -1.3154e-01,
         -4.2969e-01,  1.5302e-01]], device='cuda:0') tensor(0.2029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
756000 特征值优化 tensor(0.5716, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6625e+00,  7.6776e-01, -1.3347e+00,  2.1579e-01,  1.2079e-01,
         -8.9813e-01, -9.6686e-01, -1.8992e+00, -1.3929e+00,  4.7415e-01,
         -8.3231e-01, -8.1542e-01,  1.1507e-01,  7.3512e-03,  1.5310e-01,
         -1.0814e-01, -2.0879e-01,  4.2960e-01, -5.4299e-02, -2.7174e-02,
          2.1557e-01, -9.5185e-02, -5.3525e-02, -7.1377e-02, -6.4695e-02,
         -3.8260e-01, -3.2888e-01, -6.5083e-03, -2.9340e-03, -5.6837e-01,
         -1.5066e-02, -2.1298e-02, -6.8086e-02,  5.5645e-02, -5.7609e-02,
          1.6324e-04,  2.0556e-01,  1.2730e-01, -1.3165e-01, -1.0291e-01,
         -1.9490e-01,  4.7118e-02,  2.3510e-01,  1.1239e-01, -8.2923e-02,
         -2.1460e-01, -4.8775e-02, -2.9080e-01,  6.2795e-01, -1.0726e+00,
         -8.7625e-02, -1.7858e-01, -3.2927e-01, -7.4662e-02,  3.0483e-01,
          8.7673e-03,  1.6660e-02,  1.8097e-01, -1.3272e-01, -3.9598e-01,
          1.6457e-01,  2.7433e-01,  9.6964e-02,  4.8386e-02,  5.9306e-01,
          1.2884e-01,  1.6893e-01, -3.5368e-02, -1.5662e-01, -1.3990e-01,
         -4.4221e-01,  1.4732e-01]], device='cuda:0') tensor(0.2034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
757000 特征值优化 tensor(0.5702, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6615,  0.7633, -1.3440,  0.2066,  0.1193, -0.9038, -0.9773, -1.9128,
         -1.3837,  0.4657, -0.8422, -0.8099,  0.1155, -0.0053,  0.1777, -0.1112,
         -0.2050,  0.4215, -0.0625, -0.0150,  0.2159, -0.0969, -0.0517, -0.0859,
         -0.0704, -0.3838, -0.3285, -0.0142, -0.0061, -0.5707, -0.0155, -0.0234,
         -0.0727,  0.0552, -0.0563,  0.0047,  0.2056,  0.1266, -0.1325, -0.1018,
         -0.1951,  0.0477,  0.2342,  0.1133, -0.0822, -0.2121, -0.0481, -0.2909,
          0.6283, -1.0773, -0.0882, -0.1802, -0.3304, -0.0723,  0.3091,  0.0083,
          0.0280,  0.1750, -0.1349, -0.3936,  0.1662,  0.2755,  0.1082,  0.0443,
          0.5889,  0.1308,  0.1728, -0.0374, -0.1396, -0.1491, -0.4555,  0.1524]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
758000 特征值优化 tensor(0.5845, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6666,  0.7581, -1.3456,  0.1902,  0.0944, -0.8761, -0.9835, -1.9229,
         -1.3769,  0.4856, -0.8491, -0.8225,  0.1185,  0.0372,  0.1142, -0.1319,
         -0.2147,  0.4105, -0.0785, -0.0048,  0.2177, -0.0944,  0.0058, -0.0188,
         -0.0545, -0.3715, -0.3215, -0.0110,  0.0333, -0.5676, -0.0131,  0.0074,
         -0.0433,  0.0541, -0.0471,  0.0057,  0.2085,  0.1269, -0.1273, -0.1060,
         -0.1999,  0.0413,  0.2381,  0.1108, -0.0804, -0.2112, -0.0530, -0.2759,
          0.6243, -1.0846, -0.0888, -0.1777, -0.3358, -0.0708,  0.3227,  0.0159,
          0.0093,  0.1786, -0.1294, -0.3901,  0.1729,  0.2693,  0.1252,  0.0414,
          0.5876,  0.1255,  0.1851, -0.0405, -0.1403, -0.1468, -0.4515,  0.1583]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
759000 特征值优化 tensor(0.5684, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6952e+00,  7.5859e-01, -1.3121e+00,  1.9767e-01,  1.4278e-01,
         -8.7583e-01, -9.9099e-01, -1.9303e+00, -1.3976e+00,  4.7771e-01,
         -8.4461e-01, -8.1764e-01,  1.1899e-01,  1.2249e-01,  1.7422e-02,
         -1.1715e-01, -2.4219e-01,  4.4938e-01, -2.8346e-02,  2.2750e-03,
          2.1912e-01, -9.5058e-02,  4.4433e-02,  7.2356e-02, -7.6626e-02,
         -3.4162e-01, -3.4414e-01, -3.9121e-02,  7.0365e-02, -5.6355e-01,
         -1.6747e-02,  4.3261e-02, -1.3850e-02,  5.8555e-02, -5.8249e-02,
         -6.1944e-04,  2.2019e-01,  1.2528e-01, -1.2505e-01, -1.0854e-01,
         -1.9863e-01,  3.7731e-02,  2.4637e-01,  1.0603e-01, -8.5469e-02,
         -2.1208e-01, -5.4225e-02, -2.8050e-01,  6.2007e-01, -1.0668e+00,
         -9.2158e-02, -1.7293e-01, -4.1156e-01, -2.4244e-02,  3.1369e-01,
          2.3591e-02,  1.1980e-02,  1.8334e-01, -1.2566e-01, -3.9448e-01,
          1.7053e-01,  2.4966e-01,  1.1878e-01,  6.0722e-02,  5.8401e-01,
          1.2399e-01,  1.8189e-01, -3.1645e-02, -8.1411e-02, -1.4487e-01,
         -4.3779e-01,  1.5583e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
760000 特征值优化 tensor(0.5700, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6279e+00,  7.3264e-01, -1.3230e+00,  1.9592e-01,  1.2538e-01,
         -8.9306e-01, -1.0193e+00, -1.9622e+00, -1.3896e+00,  5.0642e-01,
         -8.6110e-01, -8.1829e-01,  1.1574e-01,  1.2933e-02,  1.4420e-01,
         -1.0562e-01, -2.0430e-01,  4.1679e-01, -5.2025e-02, -3.4025e-02,
          2.1588e-01, -9.9263e-02, -7.3542e-02, -6.8002e-02, -7.4685e-02,
         -3.6583e-01, -3.3417e-01, -1.2942e-02, -1.4958e-03, -5.6511e-01,
         -1.5635e-02, -1.8198e-02, -6.8368e-02,  5.6706e-02, -6.1126e-02,
         -1.0282e-02,  2.1121e-01,  1.2184e-01, -1.2744e-01, -1.0704e-01,
         -1.9840e-01,  4.2509e-02,  2.1821e-01,  1.1110e-01, -8.2853e-02,
         -1.9746e-01, -4.7828e-02, -2.9227e-01,  6.3004e-01, -1.0691e+00,
         -8.1473e-02, -1.8634e-01, -3.3622e-01, -7.0822e-02,  3.1097e-01,
          5.4758e-03,  1.3749e-02,  1.8361e-01, -1.2343e-01, -3.9750e-01,
          1.6227e-01,  2.7474e-01,  1.2808e-01,  4.5188e-02,  5.7141e-01,
          1.2953e-01,  1.7383e-01, -3.9711e-02, -1.0799e-01, -1.4435e-01,
         -4.3000e-01,  1.5244e-01]], device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
761000 特征值优化 tensor(0.5672, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6656,  0.7293, -1.2940,  0.1933,  0.1365, -0.8753, -1.0662, -1.9757,
         -1.3821,  0.5037, -0.8946, -0.8295,  0.1192,  0.1156,  0.0258, -0.1069,
         -0.2446,  0.4716, -0.0222, -0.0057,  0.2190, -0.1033,  0.0375,  0.0653,
         -0.0792, -0.3476, -0.3386, -0.0379,  0.0623, -0.5686, -0.0166,  0.0352,
         -0.0080,  0.0590, -0.0589, -0.0105,  0.2243,  0.1163, -0.1266, -0.1061,
         -0.2088,  0.0406,  0.2310,  0.1059, -0.0847, -0.1961, -0.0554, -0.2983,
          0.6313, -1.0623, -0.1047, -0.1686, -0.3876, -0.0373,  0.3129,  0.0162,
          0.0026,  0.1885, -0.1209, -0.3969,  0.1697,  0.2575,  0.1230,  0.0652,
          0.5694,  0.1323,  0.1819, -0.0429, -0.0562, -0.1575, -0.4282,  0.1509]],
       device='cuda:0') tensor(0.2047, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
762000 特征值优化 tensor(11.1062, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5521, -0.4770,  1.2281,  0.0503,  0.9071, -1.3043,  0.5980, -0.4900,
         -0.1511,  1.7244, -2.4645, -0.2855,  0.2763, -1.5139,  0.1332, -0.0070,
         -0.3660,  0.0965,  0.1128, -0.3490, -0.1275, -0.0713, -0.4362, -1.0807,
         -0.7537, -0.8158, -0.0450, -1.8594,  0.5143, -0.5700, -0.7212, -0.4395,
         -0.8642, -0.0036, -0.2354, -0.1578, -0.2462, -0.3752,  0.2793, -1.0166,
         -0.3696, -0.0605,  0.4731, -0.7649, -0.1439,  0.4072,  0.3381,  0.5487,
          1.1780, -0.4032,  0.0268, -1.7038, -0.4450, -0.7267,  0.2531,  0.3496,
         -0.2678, -0.2985, -0.2722, -0.4278, -0.6715,  0.5487,  1.3203, -1.5807,
          0.9693, -0.8985, -1.3048,  0.1344, -0.7862,  1.0476, -1.8080,  1.7136]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
763000 特征值优化 tensor(1.3976, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6012,  0.0045,  0.2686, -1.2803,  0.1109, -1.6508, -0.0619, -0.2420,
         -0.8432,  1.3680, -2.5494, -1.0797,  0.1743, -0.4010,  0.0141, -0.1301,
         -0.0396,  0.0130,  0.1530, -0.0492, -0.0253, -0.1372, -0.0841, -0.1752,
          0.1267, -0.1835, -0.2721, -0.7379, -0.0032, -0.1598, -0.1195, -0.2490,
         -0.4179,  0.1221, -0.0232,  0.0326,  0.0908, -0.0262,  0.1213, -0.3922,
         -0.1151,  0.1080,  0.1032, -0.2321,  0.2064,  0.2565,  0.1259, -0.3013,
          0.4601, -0.3558,  0.4817, -0.6280, -0.4867,  0.0104, -0.1502,  0.7761,
         -0.0552, -0.0308, -0.3699, -0.7473, -1.1791,  0.7621,  1.7397, -1.0645,
          0.1880, -0.1480, -0.8349,  0.3023, -1.0763,  1.4253, -2.3120,  1.1849]],
       device='cuda:0') tensor(0.2036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
764000 特征值优化 tensor(0.8529, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6241e+00, -1.1551e-01,  1.8839e-01, -6.8549e-01, -2.8908e-02,
         -1.6511e+00, -3.2913e-01, -2.0720e-01, -5.6983e-01,  1.3435e+00,
         -2.2704e+00, -1.3019e+00,  1.6853e-01, -1.4272e-01,  6.4557e-02,
         -5.0774e-02, -3.5296e-02,  8.1255e-02,  3.6502e-01, -8.4795e-02,
          4.0419e-03, -6.8064e-02, -4.7536e-03,  1.1182e-03,  1.1192e-02,
         -1.9260e-01, -2.0406e-01, -3.7345e-01, -1.1136e-01, -7.0986e-02,
         -8.5717e-02, -2.1517e-01, -3.7537e-01,  1.3309e-01,  5.3382e-04,
          2.2093e-02,  5.1324e-02, -8.1659e-02,  7.6423e-02, -3.5586e-01,
         -1.4470e-01, -6.7676e-02,  1.3472e-01, -2.5880e-01,  2.6490e-01,
          4.4733e-01,  2.6041e-02, -1.4446e-01,  2.7987e-01, -1.4248e-01,
          1.0589e-01, -3.9223e-01, -6.5284e-01,  9.7004e-03, -1.6316e-01,
          7.7647e-01, -8.4565e-03, -4.5183e-02, -4.1343e-01, -7.0367e-01,
         -1.1410e+00,  7.0753e-01,  1.7314e+00, -9.1672e-01,  2.1964e-01,
         -6.5382e-02, -6.0657e-01,  4.9661e-02, -9.7594e-01,  1.3100e+00,
         -2.2708e+00,  1.1004e+00]], device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
765000 特征值优化 tensor(0.7305, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6177e+00, -1.8811e-01,  1.9382e-01, -5.6963e-01, -1.1567e-01,
         -1.7040e+00, -3.4239e-01, -2.7747e-01, -1.3691e-01,  1.4394e+00,
         -1.8554e+00, -1.4734e+00,  1.6539e-01, -7.6016e-02,  8.8188e-02,
         -7.8214e-02,  3.4228e-02,  1.2476e-01,  3.1560e-01, -1.0401e-01,
          8.6912e-03, -5.6135e-02,  5.7588e-03, -2.7157e-02,  1.7979e-03,
         -1.0961e-01, -7.7618e-02, -2.1224e-01, -1.7100e-01, -5.4310e-02,
         -1.0367e-01, -2.4251e-01, -4.0276e-01,  1.5216e-01, -1.3820e-02,
          1.5297e-01,  4.9309e-02, -9.0941e-02,  6.8384e-02, -2.3468e-01,
         -1.3799e-01, -6.2362e-02,  1.7601e-01, -3.2867e-01,  3.0754e-01,
          4.4465e-01,  2.2665e-02, -1.6305e-01,  2.2397e-01, -5.5073e-02,
         -1.7508e-01, -2.4798e-01, -7.8131e-01,  5.6182e-02, -2.3400e-01,
          7.8515e-01,  2.2338e-02, -3.8743e-02, -3.1475e-01, -5.8164e-01,
         -9.8191e-01,  6.2736e-01,  1.5387e+00, -7.8978e-01,  2.3737e-01,
          1.4083e-01, -2.6587e-01, -8.9096e-02, -8.2832e-01,  1.1212e+00,
         -2.2992e+00,  8.6080e-01]], device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
766000 特征值优化 tensor(0.6807, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5859, -0.2363,  0.2730, -0.5007, -0.0886, -1.7881, -0.4286, -0.3628,
         -0.0065,  1.6289, -1.4628, -1.5926,  0.1667, -0.0415,  0.1600, -0.0411,
          0.1487,  0.1016,  0.2434, -0.0931,  0.0081, -0.0576, -0.0601, -0.0415,
         -0.1028,  0.0847,  0.0956, -0.0929, -0.1574, -0.0516, -0.1246, -0.2108,
         -0.3669,  0.1481, -0.0280,  0.2649,  0.0653, -0.0843,  0.0470, -0.1232,
         -0.1422,  0.0451,  0.1601, -0.3432,  0.3249,  0.4605,  0.0132, -0.1888,
          0.1497,  0.0345, -0.2826, -0.1763, -0.7623,  0.0718, -0.1872,  0.7393,
          0.0337, -0.0528, -0.2270, -0.6276, -0.7586,  0.4946,  1.2674, -0.6258,
          0.1198,  0.2822, -0.0734, -0.1050, -0.6232,  0.9072, -2.2496,  0.8044]],
       device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
767000 特征值优化 tensor(0.6767, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5799, -0.2741,  0.2759, -0.4644, -0.1147, -1.7466, -0.4640, -0.3898,
          0.0202,  1.6429, -1.1113, -1.7192,  0.1574, -0.0342,  0.0318, -0.0314,
          0.0236,  0.1270,  0.2152, -0.0766,  0.0161, -0.0562, -0.0332, -0.1438,
         -0.1880,  0.0884,  0.0620, -0.0504, -0.1535, -0.0512, -0.1233, -0.2310,
         -0.3801,  0.1533, -0.0271,  0.2353,  0.0620, -0.0956,  0.0226, -0.0757,
         -0.1213,  0.0977,  0.1580, -0.3338,  0.3132,  0.5047, -0.0031, -0.1903,
          0.1100,  0.0771, -0.3030, -0.1731, -0.9349,  0.1392, -0.2013,  0.7205,
          0.0590, -0.0791, -0.1912, -0.5590, -0.5870,  0.4031,  1.0152, -0.5099,
          0.0484,  0.3321,  0.0592, -0.1594, -0.4083,  0.7453, -2.1982,  0.7682]],
       device='cuda:0') tensor(0.2105, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
768000 特征值优化 tensor(0.6510, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5939e+00, -2.6931e-01,  2.7809e-01, -4.4886e-01, -1.0776e-01,
         -1.7325e+00, -4.6016e-01, -4.3131e-01, -1.2295e-02,  1.7220e+00,
         -1.0223e+00, -1.8727e+00,  1.5602e-01, -5.6464e-04,  4.3388e-02,
         -7.3835e-02, -2.0940e-03,  9.3076e-02,  1.5439e-01, -7.7788e-02,
          1.6350e-02, -5.7338e-02, -5.9681e-02, -7.5870e-02, -1.5729e-01,
          1.4743e-01,  8.3425e-02, -4.6499e-02, -1.5252e-01, -5.0386e-02,
         -1.0702e-01, -2.2153e-01, -3.9214e-01,  1.4964e-01, -4.0625e-02,
          1.3876e-01,  3.0337e-02, -1.0281e-01,  2.0708e-02, -7.5291e-02,
         -1.0928e-01,  1.5872e-01,  1.6656e-01, -3.4150e-01,  3.1584e-01,
          4.9936e-01, -4.6733e-03, -1.9294e-01,  1.0907e-01,  7.5216e-02,
         -3.1461e-01, -1.6761e-01, -1.0075e+00,  1.6185e-01, -2.1283e-01,
          7.1277e-01,  9.2575e-02, -8.9867e-02, -1.6635e-01, -5.4410e-01,
         -4.9569e-01,  3.7388e-01,  9.3891e-01, -4.4723e-01,  3.5304e-02,
          3.4416e-01,  1.1649e-01, -1.7373e-01, -3.2198e-01,  6.9002e-01,
         -2.1816e+00,  6.8808e-01]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
769000 特征值优化 tensor(0.6534, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5327e+00, -3.2820e-01,  2.0465e-01, -3.4550e-01, -1.6032e-01,
         -1.7373e+00, -5.0433e-01, -4.4244e-01, -5.5481e-02,  1.7936e+00,
         -9.8367e-01, -2.0062e+00,  1.5929e-01,  1.7045e-03,  5.8151e-02,
         -7.2763e-02,  2.3773e-02,  1.3252e-01,  1.6351e-01, -7.5256e-02,
          1.4008e-02, -5.7117e-02, -1.2220e-01, -3.6524e-02, -1.5570e-01,
          1.6465e-01,  1.1097e-01, -5.9761e-02, -1.5234e-01, -5.0443e-02,
         -1.1515e-01, -2.3562e-01, -3.9319e-01,  1.4922e-01, -5.0936e-02,
          1.0455e-01,  2.4488e-02, -9.8444e-02,  2.3885e-02, -8.9575e-02,
         -1.0383e-01,  1.9554e-01,  1.2945e-01, -3.3637e-01,  3.0840e-01,
          5.3937e-01, -3.0322e-03, -1.5417e-01,  1.0821e-01,  7.4587e-02,
         -3.6229e-01, -1.6974e-01, -1.0743e+00,  1.9404e-01, -2.2140e-01,
          7.1931e-01,  1.0497e-01, -9.8577e-02, -1.6323e-01, -5.5003e-01,
         -4.6126e-01,  3.4667e-01,  9.2334e-01, -4.4501e-01,  3.3051e-02,
          3.4011e-01,  1.2454e-01, -1.6017e-01, -2.7380e-01,  6.7392e-01,
         -2.1257e+00,  6.2180e-01]], device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
770000 特征值优化 tensor(0.6464, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5306e+00, -3.2118e-01,  2.0578e-01, -3.6092e-01, -1.6415e-01,
         -1.7386e+00, -4.9779e-01, -4.1717e-01, -9.8463e-02,  1.8471e+00,
         -9.9432e-01, -2.1340e+00,  1.5810e-01,  2.5024e-02,  1.3654e-02,
         -1.1047e-01,  4.9957e-03,  1.1734e-01,  1.5983e-01, -8.1569e-02,
          1.5350e-02, -5.6945e-02, -1.0302e-01, -5.4198e-02, -1.5136e-01,
          1.8887e-01,  1.1367e-01, -4.9240e-02, -1.5238e-01, -5.0810e-02,
         -1.1889e-01, -2.2993e-01, -4.0146e-01,  1.4808e-01, -5.5746e-02,
          8.5274e-02,  2.1934e-02, -9.9763e-02,  3.1543e-02, -1.0310e-01,
         -1.0207e-01,  2.0922e-01,  1.3450e-01, -3.3870e-01,  3.0876e-01,
          5.2925e-01, -2.1052e-03, -1.5683e-01,  1.0157e-01,  8.2798e-02,
         -3.5963e-01, -1.6667e-01, -1.0872e+00,  1.9060e-01, -2.1284e-01,
          7.1748e-01,  1.0880e-01, -1.0046e-01, -1.6054e-01, -5.4152e-01,
         -4.4198e-01,  3.3977e-01,  8.9033e-01, -4.2865e-01,  3.6493e-02,
          3.3363e-01,  1.2136e-01, -1.4012e-01, -2.6239e-01,  6.7070e-01,
         -2.0366e+00,  5.3432e-01]], device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
771000 特征值优化 tensor(0.6388, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5296, -0.3424,  0.2183, -0.3682, -0.1698, -1.7309, -0.5660, -0.4123,
         -0.1600,  1.8939, -0.9872, -2.4066,  0.1578, -0.0768,  0.0294, -0.1108,
          0.0981,  0.0433,  0.2304, -0.0643,  0.0144, -0.0561, -0.2084,  0.0403,
         -0.1903,  0.1857,  0.1029,  0.0223, -0.1536, -0.0510, -0.1623, -0.2391,
         -0.3837,  0.1507, -0.0707,  0.0410,  0.0542, -0.0981,  0.0342, -0.0948,
         -0.1147,  0.1221,  0.1298, -0.3328,  0.3045,  0.5644, -0.0161, -0.1599,
          0.0992,  0.0883, -0.3529, -0.1702, -1.1462,  0.2204, -0.1806,  0.7164,
          0.1165, -0.1031, -0.1602, -0.5576, -0.4062,  0.3091,  0.9096, -0.4474,
          0.0407,  0.3460,  0.1341, -0.1316, -0.2471,  0.6436, -1.8982,  0.3692]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
772000 特征值优化 tensor(0.6412, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5474e+00, -3.4585e-01,  1.9444e-01, -3.6065e-01, -2.9095e-01,
         -1.7615e+00, -5.2338e-01, -5.0170e-01, -1.8788e-01,  2.0331e+00,
         -9.0021e-01, -2.5581e+00,  1.5580e-01, -7.5079e-03,  4.8251e-02,
         -7.4378e-02, -2.4620e-03,  1.2185e-01,  1.4361e-01, -8.0987e-02,
          1.1510e-02, -5.6830e-02, -1.2303e-01, -5.3016e-02, -1.6333e-01,
          2.2929e-01,  1.5470e-01, -4.0419e-02, -1.5127e-01, -4.9864e-02,
         -1.5924e-01, -1.9850e-01, -3.6669e-01,  1.5293e-01, -7.8808e-02,
          1.9107e-02,  2.7548e-02, -9.8770e-02,  3.9147e-02, -1.0152e-01,
         -9.4983e-02,  1.4912e-01,  1.3390e-01, -3.4189e-01,  3.0314e-01,
          5.3374e-01, -4.8272e-03, -1.5012e-01,  9.6814e-02,  8.7390e-02,
         -3.6264e-01, -1.6374e-01, -1.0849e+00,  1.3884e-01, -1.8846e-01,
          6.9911e-01,  1.1800e-01, -1.0864e-01, -1.6572e-01, -6.0272e-01,
         -3.3435e-01,  2.7554e-01,  7.6678e-01, -3.6183e-01,  4.9536e-02,
          3.1862e-01,  6.4315e-02, -6.3730e-02, -1.3905e-01,  6.0539e-01,
         -1.7293e+00,  2.6481e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
773000 特征值优化 tensor(0.6303, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5819e+00, -3.7074e-01,  2.1068e-01, -3.5070e-01, -3.6732e-01,
         -1.7493e+00, -5.6908e-01, -5.3719e-01, -2.3174e-01,  2.0698e+00,
         -7.9659e-01, -2.7279e+00,  1.4736e-01, -8.2345e-04, -3.0026e-03,
         -8.8289e-02, -2.5188e-02,  1.1403e-01,  1.5224e-01, -8.9872e-02,
          2.4015e-03, -5.6566e-02, -1.1294e-01, -6.9870e-02, -1.6543e-01,
          2.2020e-01,  1.4541e-01, -1.1841e-02, -1.5180e-01, -5.0965e-02,
         -1.7665e-01, -1.9124e-01, -3.7704e-01,  1.5564e-01, -8.1670e-02,
          1.8039e-02,  2.2211e-02, -9.5235e-02,  4.1012e-02, -1.0753e-01,
         -7.6246e-02,  1.5233e-01,  1.3474e-01, -3.0464e-01,  2.4632e-01,
          5.1494e-01, -5.5457e-03, -1.5931e-01,  9.9071e-02,  8.6656e-02,
         -3.6842e-01, -1.6495e-01, -1.2207e+00,  1.9185e-01, -1.7557e-01,
          7.2525e-01,  1.2523e-01, -1.0849e-01, -1.7254e-01, -5.9320e-01,
         -2.5184e-01,  2.2359e-01,  6.4538e-01, -3.0876e-01,  7.8353e-02,
          3.0750e-01,  1.6301e-02, -2.2344e-02, -1.3457e-02,  5.6015e-01,
         -1.5761e+00,  1.2705e-01]], device='cuda:0') tensor(0.2088, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
774000 特征值优化 tensor(0.6244, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5891e+00, -3.9346e-01,  2.2813e-01, -3.3838e-01, -2.6917e-01,
         -1.7705e+00, -6.5394e-01, -5.2977e-01, -2.5718e-01,  2.1203e+00,
         -7.8979e-01, -2.8567e+00,  1.4446e-01, -9.4664e-02,  3.4851e-02,
         -1.4751e-02,  5.4344e-02,  5.9332e-02,  2.2447e-01, -7.8695e-02,
         -2.4760e-04, -5.4715e-02, -1.6569e-01, -2.7714e-02, -1.9534e-01,
          1.6407e-01,  9.1827e-02,  2.5851e-02, -1.5321e-01, -5.1691e-02,
         -1.9010e-01, -1.7342e-01, -3.7694e-01,  1.5600e-01, -8.1013e-02,
          1.7551e-02,  3.6352e-02, -9.6174e-02,  5.8724e-02, -1.3979e-01,
         -7.9623e-02,  1.7248e-01,  1.2858e-01, -3.1227e-01,  2.5086e-01,
          5.3932e-01, -1.8932e-02, -1.6694e-01,  1.1136e-01,  7.8285e-02,
         -3.6512e-01, -1.7032e-01, -1.3767e+00,  2.8954e-01, -1.2646e-01,
          6.8677e-01,  1.2200e-01, -1.1196e-01, -1.6906e-01, -5.3885e-01,
         -1.5256e-01,  1.6912e-01,  5.4412e-01, -2.5227e-01,  1.1396e-01,
          2.8635e-01, -5.3067e-02,  2.3782e-02,  8.6415e-02,  4.9623e-01,
         -1.4207e+00,  1.6650e-02]], device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
775000 特征值优化 tensor(0.6071, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6010, -0.4051,  0.2350, -0.3402, -0.0244, -1.7622, -0.6988, -0.5376,
         -0.3223,  2.1439, -0.7410, -2.9946,  0.1408, -0.0465,  0.0798, -0.0131,
          0.0427,  0.0831,  0.1466, -0.0950, -0.0036, -0.0543, -0.1810, -0.0159,
         -0.2028,  0.1739,  0.1096,  0.0147, -0.1534, -0.0519, -0.1203, -0.1402,
         -0.4026,  0.1566, -0.0807,  0.0180,  0.0137, -0.0572,  0.0651, -0.1767,
         -0.0642,  0.3118,  0.1142, -0.3457,  0.2909,  0.4698,  0.0125, -0.1702,
          0.1398,  0.0505, -0.3646, -0.1700, -1.6332,  0.4814,  0.1315,  0.5961,
          0.1201, -0.1113, -0.1972, -0.5532, -0.0808,  0.1034,  0.3199, -0.1707,
          0.1801,  0.2599, -0.1488,  0.0868,  0.2211,  0.4570, -1.1968, -0.1566]],
       device='cuda:0') tensor(0.2030, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
776000 特征值优化 tensor(0.6117, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6012e+00, -4.0825e-01,  2.3061e-01, -3.3615e-01, -3.3229e-02,
         -1.7614e+00, -7.3413e-01, -5.2980e-01, -3.9330e-01,  2.1386e+00,
         -7.4335e-01, -3.1432e+00,  1.4047e-01, -7.3413e-02,  6.8923e-02,
         -1.3479e-02,  3.9254e-02,  8.2555e-02,  1.8537e-01, -9.6112e-02,
         -3.2972e-03, -5.4850e-02, -1.5743e-01, -4.7916e-02, -2.0520e-01,
          2.0380e-01,  1.4842e-01, -1.0225e-02, -1.5157e-01, -5.1770e-02,
         -1.2165e-01, -1.2930e-01, -3.9523e-01,  1.5694e-01, -7.5385e-02,
          2.1110e-03,  7.0660e-03, -4.8824e-02,  6.2417e-02, -1.8130e-01,
         -5.8214e-02,  3.5413e-01,  1.1483e-01, -3.4694e-01,  2.9325e-01,
          4.6969e-01,  1.2027e-02, -1.6578e-01,  1.4497e-01,  4.1661e-02,
         -3.6725e-01, -1.7021e-01, -1.6368e+00,  4.8205e-01,  1.4923e-01,
          5.7524e-01,  1.3268e-01, -1.1586e-01, -2.1196e-01, -5.1931e-01,
         -6.1429e-02,  9.1296e-02,  3.0254e-01, -1.6263e-01,  2.5195e-01,
          2.4729e-01, -2.1875e-01,  1.1985e-01,  2.4940e-01,  4.5245e-01,
         -9.7367e-01, -3.1980e-01]], device='cuda:0') tensor(0.2044, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
777000 特征值优化 tensor(0.6268, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5948e+00, -3.8959e-01,  2.2659e-01, -3.3011e-01, -2.9438e-02,
         -1.7537e+00, -7.2492e-01, -5.0248e-01, -4.5881e-01,  2.0915e+00,
         -7.4939e-01, -3.2414e+00,  1.4106e-01, -1.3661e-02,  5.8714e-02,
         -1.6358e-02, -1.1333e-03,  1.0308e-01,  1.5648e-01, -9.7475e-02,
         -2.3581e-03, -5.4647e-02, -1.5894e-01, -1.6304e-02, -2.1262e-01,
          2.3908e-01,  1.8484e-01, -4.6055e-02, -1.5144e-01, -5.1372e-02,
         -1.2232e-01, -1.4066e-01, -4.0029e-01,  1.5642e-01, -9.0877e-02,
          6.8755e-03,  1.1029e-02, -4.5990e-02,  6.0130e-02, -1.8989e-01,
         -6.0118e-02,  3.6793e-01,  1.1045e-01, -3.4521e-01,  2.9689e-01,
          4.5954e-01,  1.7678e-02, -1.6022e-01,  1.4151e-01,  4.4725e-02,
         -3.6428e-01, -1.7345e-01, -1.6281e+00,  4.7862e-01,  1.4556e-01,
          5.7991e-01,  1.1523e-01, -1.1551e-01, -2.1708e-01, -5.0173e-01,
         -6.9608e-02,  9.6217e-02,  2.8123e-01, -1.6739e-01,  2.9131e-01,
          2.5556e-01, -2.4872e-01,  1.5390e-01,  2.3674e-01,  4.5439e-01,
         -8.7791e-01, -4.4685e-01]], device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
778000 特征值优化 tensor(0.6280, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6073, -0.3798,  0.2356, -0.3217, -0.0352, -1.7743, -0.7064, -0.5304,
         -0.4809,  2.1086, -0.7355, -3.3435,  0.1404, -0.0326,  0.0353,  0.0280,
         -0.0380,  0.1011,  0.1694, -0.0980, -0.0042, -0.0541, -0.0672, -0.1151,
         -0.1842,  0.2252,  0.1916, -0.0903, -0.1477, -0.0520, -0.1213, -0.1385,
         -0.3998,  0.1543, -0.0723,  0.0606,  0.0120, -0.0484,  0.0596, -0.1848,
         -0.0624,  0.3598,  0.1143, -0.3511,  0.2941,  0.4513,  0.0167, -0.1699,
          0.1500,  0.0408, -0.3702, -0.1723, -1.6249,  0.4772,  0.1292,  0.5907,
          0.1115, -0.1092, -0.2248, -0.4970, -0.0728,  0.1023,  0.2899, -0.1743,
          0.3255,  0.2377, -0.2780,  0.1812,  0.2208,  0.4545, -0.8502, -0.4891]],
       device='cuda:0') tensor(0.2032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
779000 特征值优化 tensor(0.6010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5991e+00, -4.0787e-01,  2.4189e-01, -3.4372e-01, -3.0966e-02,
         -1.7532e+00, -7.1889e-01, -5.4503e-01, -5.1004e-01,  2.1222e+00,
         -7.4020e-01, -3.3961e+00,  1.4059e-01, -4.7885e-02,  8.9383e-02,
         -1.2101e-03,  3.4871e-02,  8.5537e-02,  1.5962e-01, -9.5955e-02,
         -2.7971e-03, -5.4782e-02, -1.9042e-01,  5.1280e-03, -2.1779e-01,
          2.4698e-01,  1.8607e-01, -2.6632e-02, -1.5061e-01, -5.1500e-02,
         -1.2057e-01, -1.2852e-01, -4.0276e-01,  1.5732e-01, -7.2896e-02,
         -1.1538e-02,  9.1265e-03, -4.7408e-02,  6.3461e-02, -1.9723e-01,
         -6.0967e-02,  4.1643e-01,  1.1537e-01, -3.4749e-01,  2.9384e-01,
          4.6740e-01,  1.3252e-02, -1.7090e-01,  1.4282e-01,  4.3745e-02,
         -3.6441e-01, -1.6855e-01, -1.6423e+00,  4.8570e-01,  1.1989e-01,
          5.9299e-01,  1.4381e-01, -1.2104e-01, -2.2400e-01, -4.9341e-01,
         -6.0772e-02,  9.5733e-02,  2.9427e-01, -1.6601e-01,  3.4318e-01,
          2.3365e-01, -2.6029e-01,  1.6229e-01,  2.2838e-01,  4.5574e-01,
         -8.0283e-01, -5.2858e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
780000 特征值优化 tensor(0.6002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6067e+00, -3.9322e-01,  2.5120e-01, -3.4987e-01, -5.0878e-02,
         -1.7650e+00, -7.1354e-01, -5.1234e-01, -5.0835e-01,  2.1440e+00,
         -7.6320e-01, -3.4646e+00,  1.4008e-01,  2.8696e-03,  6.8788e-02,
          6.5246e-03, -5.4085e-02,  8.0156e-02,  1.3630e-01, -9.6952e-02,
         -3.1936e-03, -5.4570e-02, -6.9536e-02, -1.1844e-01, -1.5784e-01,
          2.6855e-01,  2.0939e-01, -1.0826e-01, -1.5018e-01, -5.0917e-02,
         -1.2689e-01, -1.4761e-01, -4.0779e-01,  1.5764e-01, -5.8626e-02,
          4.9251e-02,  9.5912e-03, -4.3712e-02,  6.9930e-02, -2.0275e-01,
         -5.5780e-02,  3.7278e-01,  1.1826e-01, -3.4762e-01,  2.9306e-01,
          4.5545e-01,  1.4392e-02, -1.7573e-01,  1.4690e-01,  4.0377e-02,
         -3.6215e-01, -1.6711e-01, -1.6387e+00,  4.7906e-01,  1.5317e-01,
          5.9182e-01,  1.3590e-01, -1.1217e-01, -2.2493e-01, -5.1216e-01,
         -8.0290e-02,  1.0037e-01,  2.7907e-01, -1.7549e-01,  3.4059e-01,
          2.1589e-01, -2.7517e-01,  1.9757e-01,  2.3454e-01,  4.6463e-01,
         -8.1776e-01, -5.4792e-01]], device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
781000 特征值优化 tensor(0.6050, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6020e+00, -4.0818e-01,  2.3646e-01, -3.3584e-01, -3.0686e-02,
         -1.7447e+00, -7.1441e-01, -5.6329e-01, -5.3624e-01,  2.1869e+00,
         -7.4422e-01, -3.5429e+00,  1.4093e-01, -6.1534e-02,  6.4800e-02,
          4.8647e-03,  2.4321e-02,  9.3126e-02,  1.6268e-01, -9.4945e-02,
         -2.6138e-03, -5.4982e-02, -1.3209e-01, -5.0563e-02, -2.0705e-01,
          2.4454e-01,  1.9472e-01, -5.1060e-02, -1.4907e-01, -5.1373e-02,
         -1.1994e-01, -1.2610e-01, -4.0487e-01,  1.5786e-01, -6.5845e-02,
          1.2200e-02,  9.9931e-03, -5.0431e-02,  6.3998e-02, -1.9824e-01,
         -6.3300e-02,  4.3200e-01,  1.1573e-01, -3.4634e-01,  2.9243e-01,
          4.6997e-01,  1.2921e-02, -1.6774e-01,  1.4182e-01,  4.3070e-02,
         -3.7198e-01, -1.6625e-01, -1.6262e+00,  4.7743e-01,  1.1734e-01,
          5.9084e-01,  1.2916e-01, -1.1487e-01, -2.1853e-01, -5.0705e-01,
         -7.1497e-02,  1.0621e-01,  3.1444e-01, -1.7098e-01,  3.5416e-01,
          2.2601e-01, -2.7162e-01,  1.8294e-01,  2.3219e-01,  4.5030e-01,
         -7.9964e-01, -5.6112e-01]], device='cuda:0') tensor(0.2087, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
782000 特征值优化 tensor(0.6738, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6128e+00, -3.8738e-01,  2.4826e-01, -3.4271e-01, -5.7679e-02,
         -1.7509e+00, -7.0744e-01, -5.7311e-01, -5.4672e-01,  2.1784e+00,
         -7.8052e-01, -3.6193e+00,  1.3912e-01,  5.4175e-03,  5.6059e-02,
          2.8368e-02, -7.8207e-02,  6.5988e-02,  1.4518e-01, -9.5557e-02,
         -3.1432e-03, -5.6370e-02, -2.4819e-02, -1.6519e-01, -1.5836e-01,
          2.7347e-01,  2.1945e-01, -1.1356e-01, -1.4176e-01, -4.9842e-02,
         -1.2637e-01, -1.5546e-01, -4.0892e-01,  1.6396e-01, -4.4926e-02,
          7.9401e-02,  1.2537e-02, -4.3744e-02,  7.3388e-02, -2.0694e-01,
         -6.0440e-02,  3.8813e-01,  1.1952e-01, -3.4753e-01,  2.9365e-01,
          4.5400e-01,  1.3495e-02, -1.6419e-01,  1.0279e-01,  7.2554e-02,
         -3.7061e-01, -1.6512e-01, -1.6267e+00,  4.7387e-01,  1.2847e-01,
          6.1280e-01,  1.3701e-01, -1.0795e-01, -2.2867e-01, -4.9946e-01,
         -7.9213e-02,  1.0689e-01,  2.7201e-01, -1.6179e-01,  3.7622e-01,
          1.9925e-01, -3.0351e-01,  2.2739e-01,  2.1784e-01,  4.6474e-01,
         -7.8472e-01, -6.1109e-01]], device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
783000 特征值优化 tensor(0.6073, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6145, -0.3988,  0.2444, -0.3395, -0.0477, -1.7485, -0.7233, -0.5755,
         -0.5783,  2.1944, -0.7727, -3.6845,  0.1408,  0.0149,  0.0591,  0.0091,
         -0.0508,  0.0965,  0.1409, -0.0964, -0.0041, -0.0556, -0.0943, -0.0951,
         -0.1889,  0.2587,  0.2059, -0.0815, -0.1460, -0.0506, -0.1248, -0.1524,
         -0.4009,  0.1648, -0.0629,  0.0464,  0.0135, -0.0492,  0.0745, -0.2190,
         -0.0638,  0.4193,  0.1212, -0.3492,  0.2929,  0.4603,  0.0149, -0.1725,
          0.0958,  0.0867, -0.3782, -0.1603, -1.6290,  0.4760,  0.1211,  0.6009,
          0.1297, -0.1072, -0.2255, -0.5118, -0.0703,  0.1027,  0.2864, -0.1597,
          0.3742,  0.2071, -0.2876,  0.2259,  0.2388,  0.4513, -0.7943, -0.6383]],
       device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
784000 特征值优化 tensor(0.5958, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6027e+00, -4.1396e-01,  2.5087e-01, -3.4237e-01, -3.6823e-02,
         -1.7470e+00, -7.1353e-01, -6.1524e-01, -6.1764e-01,  2.2357e+00,
         -7.5752e-01, -3.7700e+00,  1.4057e-01, -4.9796e-02,  8.9801e-02,
          4.1961e-04,  3.2333e-02,  8.8681e-02,  1.5739e-01, -9.5064e-02,
         -1.6602e-03, -5.5791e-02, -1.7207e-01, -1.9511e-02, -2.1323e-01,
          2.6551e-01,  2.1011e-01, -4.2695e-02, -1.3981e-01, -5.0610e-02,
         -1.2075e-01, -1.2666e-01, -4.0022e-01,  1.5952e-01, -6.2417e-02,
         -9.5353e-03,  1.1576e-02, -4.5682e-02,  7.3300e-02, -2.1927e-01,
         -6.3650e-02,  4.4694e-01,  1.1683e-01, -3.4689e-01,  2.9370e-01,
          4.6601e-01,  1.4236e-02, -1.6531e-01,  8.6745e-02,  8.3394e-02,
         -3.7271e-01, -1.6264e-01, -1.6347e+00,  4.8063e-01,  9.3013e-02,
          6.0173e-01,  1.4326e-01, -1.1384e-01, -2.1621e-01, -5.0285e-01,
         -6.3249e-02,  1.0819e-01,  3.0455e-01, -1.6756e-01,  3.8558e-01,
          2.1550e-01, -2.6215e-01,  1.9108e-01,  2.4119e-01,  4.3959e-01,
         -7.4024e-01, -6.5921e-01]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
785000 特征值优化 tensor(0.6352, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6100e+00, -3.8011e-01,  2.2779e-01, -3.2521e-01, -2.9222e-02,
         -1.7529e+00, -6.9396e-01, -5.7385e-01, -6.2802e-01,  2.2522e+00,
         -7.7110e-01, -3.8377e+00,  1.4000e-01, -3.5135e-02,  3.8449e-02,
          4.3463e-02, -5.7270e-02,  1.0208e-01,  1.6624e-01, -9.4263e-02,
         -3.7094e-03, -5.6067e-02, -3.4707e-02, -1.4342e-01, -1.9359e-01,
          2.5230e-01,  2.2444e-01, -9.7856e-02, -1.4743e-01, -5.0333e-02,
         -1.2128e-01, -1.5482e-01, -4.0079e-01,  1.6101e-01, -7.1417e-02,
          6.1356e-02,  1.7349e-02, -4.8381e-02,  7.8277e-02, -2.2602e-01,
         -6.8787e-02,  4.3020e-01,  1.1867e-01, -3.4834e-01,  2.9412e-01,
          4.5552e-01,  1.1661e-02, -1.6592e-01,  9.5715e-02,  9.3998e-02,
         -3.7838e-01, -1.6641e-01, -1.6193e+00,  4.7295e-01,  1.1685e-01,
          6.0481e-01,  1.1223e-01, -9.7253e-02, -2.2405e-01, -5.0746e-01,
         -6.9713e-02,  1.0831e-01,  2.7416e-01, -1.6419e-01,  3.7477e-01,
          2.1304e-01, -2.9366e-01,  2.4288e-01,  2.2140e-01,  4.4733e-01,
         -7.6175e-01, -6.8661e-01]], device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
786000 特征值优化 tensor(0.6073, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6108e+00, -3.9746e-01,  2.4324e-01, -3.4041e-01, -5.0682e-02,
         -1.7394e+00, -7.0872e-01, -5.6415e-01, -6.2551e-01,  2.2701e+00,
         -7.8886e-01, -3.8872e+00,  1.4037e-01,  1.9258e-02,  6.3989e-02,
          1.5260e-02, -5.6149e-02,  9.6449e-02,  1.4712e-01, -9.7092e-02,
         -3.1073e-03, -5.5786e-02, -8.4655e-02, -1.0166e-01, -1.9566e-01,
          2.6278e-01,  2.1486e-01, -7.3600e-02, -1.4686e-01, -5.0404e-02,
         -1.2496e-01, -1.6314e-01, -4.0256e-01,  1.6380e-01, -5.9056e-02,
          5.1141e-02,  1.2857e-02, -4.6041e-02,  8.4372e-02, -2.4059e-01,
         -6.3386e-02,  4.4723e-01,  1.2070e-01, -3.4765e-01,  2.9341e-01,
          4.5802e-01,  1.4934e-02, -1.7013e-01,  9.1219e-02,  8.9978e-02,
         -3.7548e-01, -1.6175e-01, -1.6269e+00,  4.7502e-01,  1.3350e-01,
          6.0102e-01,  1.2760e-01, -1.0474e-01, -2.2477e-01, -5.1980e-01,
         -8.3398e-02,  1.0778e-01,  2.7753e-01, -1.6391e-01,  3.8562e-01,
          1.9573e-01, -2.9358e-01,  2.5269e-01,  2.4022e-01,  4.5260e-01,
         -7.8747e-01, -7.0216e-01]], device='cuda:0') tensor(0.2046, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
787000 特征值优化 tensor(0.5944, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6032e+00, -4.1407e-01,  2.5165e-01, -3.4152e-01, -3.6773e-02,
         -1.7356e+00, -7.1027e-01, -5.8975e-01, -6.5991e-01,  2.3238e+00,
         -7.7138e-01, -3.9682e+00,  1.4074e-01, -5.6689e-02,  9.0035e-02,
          3.4316e-03,  3.4651e-02,  8.1686e-02,  1.6543e-01, -9.4606e-02,
         -2.0906e-03, -5.5472e-02, -1.6255e-01, -2.5320e-02, -2.1248e-01,
          2.7187e-01,  2.1803e-01, -4.1325e-02, -1.3987e-01, -5.0840e-02,
         -1.2039e-01, -1.3572e-01, -4.0082e-01,  1.6301e-01, -5.9290e-02,
         -6.9203e-03,  1.1226e-02, -4.5578e-02,  8.1880e-02, -2.3657e-01,
         -6.3540e-02,  4.7117e-01,  1.1750e-01, -3.4704e-01,  2.9314e-01,
          4.6544e-01,  1.4446e-02, -1.6651e-01,  8.5480e-02,  8.4487e-02,
         -3.7400e-01, -1.6145e-01, -1.6272e+00,  4.7761e-01,  9.7427e-02,
          6.0136e-01,  1.4575e-01, -1.1248e-01, -2.1216e-01, -5.0588e-01,
         -7.2451e-02,  1.1177e-01,  2.9659e-01, -1.7163e-01,  3.8855e-01,
          2.0672e-01, -2.5965e-01,  2.0844e-01,  2.4324e-01,  4.4159e-01,
         -7.3889e-01, -7.0836e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
788000 特征值优化 tensor(0.5932, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6159e+00, -3.8574e-01,  2.5065e-01, -3.4023e-01, -5.2497e-02,
         -1.7482e+00, -6.8451e-01, -5.6948e-01, -6.3757e-01,  2.3272e+00,
         -8.0423e-01, -4.0112e+00,  1.4056e-01,  3.3428e-03,  5.1793e-02,
          2.1970e-02, -7.8692e-02,  5.9653e-02,  1.4793e-01, -9.4887e-02,
         -3.1250e-03, -5.5402e-02, -1.7497e-02, -1.7524e-01, -1.5961e-01,
          2.9203e-01,  2.4581e-01, -1.1559e-01, -1.3736e-01, -5.0700e-02,
         -1.2671e-01, -1.6830e-01, -4.0681e-01,  1.6314e-01, -3.7468e-02,
          8.8427e-02,  1.2312e-02, -4.2969e-02,  9.0653e-02, -2.5049e-01,
         -6.1349e-02,  4.4327e-01,  1.2147e-01, -3.4811e-01,  2.9246e-01,
          4.5281e-01,  1.3683e-02, -1.6192e-01,  8.3917e-02,  8.3308e-02,
         -3.7109e-01, -1.6308e-01, -1.6203e+00,  4.7204e-01,  1.1608e-01,
          6.1508e-01,  1.4650e-01, -1.1331e-01, -2.2377e-01, -5.1282e-01,
         -9.2147e-02,  1.1409e-01,  2.6409e-01, -1.6614e-01,  3.9624e-01,
          1.7638e-01, -3.1012e-01,  2.7526e-01,  2.2869e-01,  4.6061e-01,
         -7.6282e-01, -7.3532e-01]], device='cuda:0') tensor(0.2052, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
789000 特征值优化 tensor(0.6080, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6146e+00, -3.9830e-01,  2.4418e-01, -3.3936e-01, -4.9142e-02,
         -1.7416e+00, -6.9904e-01, -5.6097e-01, -6.6400e-01,  2.3592e+00,
         -7.8922e-01, -4.0668e+00,  1.4058e-01,  1.4749e-02,  6.2220e-02,
          2.8160e-03, -3.9317e-02,  1.0033e-01,  1.3959e-01, -9.6386e-02,
         -3.2252e-03, -5.5885e-02, -9.2230e-02, -9.1291e-02, -1.9708e-01,
          2.6445e-01,  2.1812e-01, -6.9813e-02, -1.4656e-01, -5.0432e-02,
         -1.2423e-01, -1.6462e-01, -3.9756e-01,  1.6335e-01, -6.3185e-02,
          4.4638e-02,  1.1439e-02, -4.5577e-02,  8.9848e-02, -2.5252e-01,
         -6.3042e-02,  4.7924e-01,  1.2169e-01, -3.4825e-01,  2.9293e-01,
          4.6045e-01,  1.4616e-02, -1.7162e-01,  9.0976e-02,  9.0722e-02,
         -3.7813e-01, -1.6073e-01, -1.6253e+00,  4.7329e-01,  1.2974e-01,
          5.9724e-01,  1.2531e-01, -1.0405e-01, -2.1657e-01, -5.3136e-01,
         -8.7953e-02,  1.1082e-01,  2.7839e-01, -1.6767e-01,  3.8647e-01,
          1.9132e-01, -2.9285e-01,  2.6525e-01,  2.4890e-01,  4.4847e-01,
         -7.8728e-01, -7.3805e-01]], device='cuda:0') tensor(0.2051, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
790000 特征值优化 tensor(0.5980, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6018e+00, -4.1382e-01,  2.5050e-01, -3.4004e-01, -3.5531e-02,
         -1.7268e+00, -6.9527e-01, -5.8471e-01, -6.9084e-01,  2.3943e+00,
         -7.7775e-01, -4.1363e+00,  1.4101e-01, -5.7713e-02,  6.8364e-02,
          3.1717e-03,  2.5369e-02,  8.3638e-02,  1.7093e-01, -9.4696e-02,
         -1.5540e-03, -5.5413e-02, -1.3855e-01, -4.1287e-02, -2.1869e-01,
          2.6160e-01,  2.1510e-01, -4.0889e-02, -1.3897e-01, -5.0834e-02,
         -1.2015e-01, -1.4611e-01, -3.9779e-01,  1.6139e-01, -6.0487e-02,
          3.9483e-03,  1.1984e-02, -4.4786e-02,  8.7713e-02, -2.5148e-01,
         -6.4010e-02,  5.0383e-01,  1.1734e-01, -3.4563e-01,  2.9334e-01,
          4.6722e-01,  1.3716e-02, -1.6568e-01,  8.5092e-02,  8.5133e-02,
         -3.7445e-01, -1.6139e-01, -1.6254e+00,  4.7687e-01,  9.6749e-02,
          6.0144e-01,  1.3134e-01, -1.0762e-01, -2.0970e-01, -5.2720e-01,
         -7.7537e-02,  1.1330e-01,  2.9314e-01, -1.7407e-01,  3.8873e-01,
          1.9657e-01, -2.5893e-01,  2.3770e-01,  2.4523e-01,  4.4149e-01,
         -7.6225e-01, -7.5289e-01]], device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
791000 特征值优化 tensor(0.5995, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6217e+00, -3.9367e-01,  2.4991e-01, -3.4001e-01, -6.5566e-02,
         -1.7390e+00, -6.8948e-01, -5.4342e-01, -6.7706e-01,  2.4026e+00,
         -8.1801e-01, -4.1687e+00,  1.4053e-01,  3.6099e-02,  7.1987e-02,
          1.8635e-02, -7.7014e-02,  8.0965e-02,  1.2855e-01, -9.5036e-02,
         -4.0424e-03, -5.5372e-02, -4.1896e-02, -1.4272e-01, -1.8458e-01,
          2.8161e-01,  2.3974e-01, -9.5970e-02, -1.3862e-01, -5.0785e-02,
         -1.2890e-01, -1.7492e-01, -4.0517e-01,  1.6271e-01, -4.8792e-02,
          7.4850e-02,  1.2116e-02, -4.4032e-02,  9.5042e-02, -2.6064e-01,
         -6.1892e-02,  4.8273e-01,  1.2424e-01, -3.4788e-01,  2.9153e-01,
          4.6101e-01,  1.2172e-02, -1.6821e-01,  8.7959e-02,  8.7842e-02,
         -3.7229e-01, -1.6360e-01, -1.6194e+00,  4.6879e-01,  1.3850e-01,
          6.0782e-01,  1.3537e-01, -1.1207e-01, -2.1847e-01, -5.2521e-01,
         -9.9007e-02,  1.1333e-01,  2.6461e-01, -1.6932e-01,  3.9528e-01,
          1.7710e-01, -3.0822e-01,  2.9154e-01,  2.4193e-01,  4.5959e-01,
         -7.7441e-01, -7.7372e-01]], device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
792000 特征值优化 tensor(0.6122, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6079e+00, -4.0138e-01,  2.3832e-01, -3.3498e-01, -4.1766e-02,
         -1.7355e+00, -6.9846e-01, -5.5653e-01, -7.0500e-01,  2.4285e+00,
         -7.9852e-01, -4.2263e+00,  1.4041e-01,  6.3577e-03,  5.8555e-02,
         -2.3105e-03, -2.8031e-02,  1.0759e-01,  1.4743e-01, -9.7885e-02,
         -2.9617e-03, -5.6308e-02, -1.0439e-01, -7.3216e-02, -2.0588e-01,
          2.5935e-01,  2.1814e-01, -5.4775e-02, -1.4585e-01, -4.9848e-02,
         -1.2181e-01, -1.6706e-01, -3.9524e-01,  1.6176e-01, -6.8787e-02,
          3.6308e-02,  1.3704e-02, -4.7397e-02,  9.4576e-02, -2.6449e-01,
         -6.6585e-02,  5.1220e-01,  1.2003e-01, -3.4762e-01,  2.9389e-01,
          4.5756e-01,  1.6740e-02, -1.6881e-01,  8.9986e-02,  8.9892e-02,
         -3.7929e-01, -1.5994e-01, -1.6229e+00,  4.7541e-01,  1.1800e-01,
          5.9736e-01,  1.1797e-01, -1.0102e-01, -2.1328e-01, -5.4990e-01,
         -8.6604e-02,  1.1166e-01,  2.7975e-01, -1.6761e-01,  3.8790e-01,
          1.8987e-01, -2.8736e-01,  2.7502e-01,  2.5408e-01,  4.4356e-01,
         -7.8727e-01, -7.7582e-01]], device='cuda:0') tensor(0.2068, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
793000 特征值优化 tensor(0.6063, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6018e+00, -4.1373e-01,  2.3608e-01, -3.2393e-01, -3.5683e-02,
         -1.7202e+00, -6.7012e-01, -5.8138e-01, -7.2501e-01,  2.4620e+00,
         -7.9021e-01, -4.2858e+00,  1.3989e-01, -4.6199e-02,  3.6188e-02,
          7.4733e-03,  9.6091e-03,  1.0498e-01,  1.5616e-01, -9.5205e-02,
         -2.1744e-03, -5.6336e-02, -9.5874e-02, -8.1261e-02, -2.1383e-01,
          2.5294e-01,  2.2570e-01, -6.2207e-02, -1.3927e-01, -5.0036e-02,
         -1.2015e-01, -1.5187e-01, -3.9669e-01,  1.6157e-01, -5.7969e-02,
          2.0646e-02,  1.3400e-02, -4.6774e-02,  9.3150e-02, -2.6004e-01,
         -6.5434e-02,  5.1850e-01,  1.1595e-01, -3.4622e-01,  2.9311e-01,
          4.6744e-01,  1.3060e-02, -1.5991e-01,  8.6105e-02,  8.6176e-02,
         -3.8121e-01, -1.6225e-01, -1.6173e+00,  4.7406e-01,  1.0353e-01,
          6.0049e-01,  1.2828e-01, -1.0729e-01, -2.1182e-01, -5.4619e-01,
         -9.3582e-02,  1.1327e-01,  2.9174e-01, -1.7245e-01,  3.9343e-01,
          1.9136e-01, -2.6701e-01,  2.6128e-01,  2.4808e-01,  4.4441e-01,
         -7.5403e-01, -7.9411e-01]], device='cuda:0') tensor(0.2046, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
794000 特征值优化 tensor(0.6053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6128e+00, -3.9846e-01,  2.4755e-01, -3.3932e-01, -5.1623e-02,
         -1.7326e+00, -6.7968e-01, -5.4792e-01, -7.1356e-01,  2.4618e+00,
         -8.1087e-01, -4.3100e+00,  1.4012e-01,  1.1330e-02,  4.3719e-02,
          5.8702e-03, -5.9544e-02,  8.6196e-02,  1.4087e-01, -9.6104e-02,
         -3.3999e-03, -5.5531e-02, -6.1044e-02, -1.2102e-01, -1.9467e-01,
          2.7453e-01,  2.3618e-01, -8.0537e-02, -1.4711e-01, -5.0608e-02,
         -1.2464e-01, -1.7800e-01, -4.0051e-01,  1.6225e-01, -5.6993e-02,
          6.5055e-02,  1.2957e-02, -4.2998e-02,  9.9316e-02, -2.6807e-01,
         -6.3267e-02,  4.9808e-01,  1.2176e-01, -3.4799e-01,  2.9357e-01,
          4.6204e-01,  1.2598e-02, -1.7265e-01,  9.0784e-02,  9.0675e-02,
         -3.7577e-01, -1.6209e-01, -1.6210e+00,  4.7350e-01,  1.3284e-01,
          6.0317e-01,  1.2392e-01, -1.0515e-01, -2.1211e-01, -5.3450e-01,
         -1.0409e-01,  1.1805e-01,  2.6848e-01, -1.7495e-01,  3.9826e-01,
          1.7224e-01, -3.0437e-01,  3.0788e-01,  2.4597e-01,  4.5091e-01,
         -7.7522e-01, -8.1510e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
795000 特征值优化 tensor(0.6285, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5985e+00, -3.9508e-01,  2.3622e-01, -3.2467e-01, -3.5543e-02,
         -1.7643e+00, -6.8426e-01, -5.6773e-01, -7.5603e-01,  2.4834e+00,
         -7.9211e-01, -4.3730e+00,  1.3899e-01, -2.7481e-02,  6.9466e-02,
         -2.2046e-02,  1.4416e-02,  1.0420e-01,  1.6784e-01, -9.9701e-02,
         -3.5168e-03, -5.5610e-02, -1.5139e-01, -3.9667e-02, -2.0882e-01,
          2.6095e-01,  2.4114e-01, -4.0934e-02, -1.5761e-01, -5.1289e-02,
         -1.2148e-01, -1.6053e-01, -3.9253e-01,  1.6140e-01, -7.1974e-02,
          2.2720e-02,  1.3820e-02, -3.7650e-02,  1.0175e-01, -2.7608e-01,
         -6.3740e-02,  5.3298e-01,  1.1327e-01, -3.4831e-01,  2.9269e-01,
          4.6642e-01,  1.1392e-02, -1.7498e-01,  9.7819e-02,  9.7745e-02,
         -3.8213e-01, -1.6467e-01, -1.6175e+00,  4.7549e-01,  1.0421e-01,
          5.9982e-01,  1.1705e-01, -9.1365e-02, -2.0466e-01, -5.2361e-01,
         -8.1530e-02,  1.1126e-01,  2.8152e-01, -1.8801e-01,  3.9200e-01,
          1.9028e-01, -2.8322e-01,  2.6868e-01,  2.5194e-01,  4.3314e-01,
         -7.3136e-01, -8.0983e-01]], device='cuda:0') tensor(0.2052, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
796000 特征值优化 tensor(0.6253, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6117e+00, -3.9033e-01,  2.3130e-01, -3.2572e-01, -3.0627e-02,
         -1.7186e+00, -6.6958e-01, -5.5632e-01, -7.5577e-01,  2.5007e+00,
         -8.0007e-01, -4.3899e+00,  1.3959e-01, -4.4309e-02,  3.2382e-02,
          3.2330e-02, -3.9165e-02,  1.1022e-01,  1.7204e-01, -9.4876e-02,
         -3.7599e-03, -5.6217e-02, -4.0998e-02, -1.2717e-01, -2.0622e-01,
          2.5211e-01,  2.4154e-01, -8.1712e-02, -1.4392e-01, -5.0400e-02,
         -1.2008e-01, -1.6900e-01, -3.9382e-01,  1.6030e-01, -7.1070e-02,
          5.1650e-02,  1.6368e-02, -4.5175e-02,  9.5703e-02, -2.7054e-01,
         -7.0203e-02,  5.2782e-01,  1.1720e-01, -3.4482e-01,  2.9524e-01,
          4.6317e-01,  1.1028e-02, -1.6608e-01,  9.1666e-02,  9.1712e-02,
         -3.8069e-01, -1.6379e-01, -1.6125e+00,  4.6945e-01,  1.1429e-01,
          6.0091e-01,  1.0685e-01, -1.0359e-01, -2.0544e-01, -5.4936e-01,
         -9.5325e-02,  1.1749e-01,  2.6987e-01, -1.7758e-01,  3.9070e-01,
          1.9414e-01, -3.0166e-01,  3.0794e-01,  2.3784e-01,  4.4171e-01,
         -7.3737e-01, -8.4578e-01]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
797000 特征值优化 tensor(0.6027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6067e+00, -4.0400e-01,  2.4642e-01, -3.4203e-01, -4.7405e-02,
         -1.7328e+00, -6.7344e-01, -5.6633e-01, -7.2841e-01,  2.5333e+00,
         -8.1506e-01, -4.4272e+00,  1.4029e-01,  9.0446e-04,  6.1383e-02,
         -4.1454e-03, -6.4265e-02,  9.1615e-02,  1.3557e-01, -9.6432e-02,
         -3.3371e-03, -5.5731e-02, -6.3119e-02, -1.2264e-01, -1.8943e-01,
          2.7493e-01,  2.3856e-01, -8.6514e-02, -1.4634e-01, -5.0543e-02,
         -1.2340e-01, -1.7410e-01, -3.9613e-01,  1.6060e-01, -5.2327e-02,
          6.2170e-02,  1.3307e-02, -4.0990e-02,  1.0693e-01, -2.8258e-01,
         -6.3853e-02,  5.2690e-01,  1.1844e-01, -3.4861e-01,  2.9380e-01,
          4.6242e-01,  1.4090e-02, -1.7234e-01,  9.1212e-02,  9.1118e-02,
         -3.7694e-01, -1.6082e-01, -1.6244e+00,  4.7479e-01,  1.1923e-01,
          6.0236e-01,  1.2464e-01, -1.0961e-01, -2.0610e-01, -5.4683e-01,
         -1.0103e-01,  1.1821e-01,  2.7064e-01, -1.7756e-01,  3.8268e-01,
          1.6814e-01, -2.8885e-01,  3.1388e-01,  2.5596e-01,  4.4256e-01,
         -7.9358e-01, -8.2824e-01]], device='cuda:0') tensor(0.2052, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
798000 特征值优化 tensor(0.5961, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6051e+00, -4.1333e-01,  2.5119e-01, -3.4035e-01, -3.7641e-02,
         -1.7311e+00, -6.7839e-01, -5.6702e-01, -7.6783e-01,  2.5681e+00,
         -8.0767e-01, -4.4841e+00,  1.4038e-01, -7.9414e-02,  8.7036e-02,
          5.2991e-03,  2.6347e-02,  6.7077e-02,  1.8406e-01, -9.4953e-02,
         -1.8481e-03, -5.5367e-02, -1.4458e-01, -3.7185e-02, -2.1978e-01,
          2.6344e-01,  2.2774e-01, -4.7294e-02, -1.3948e-01, -5.0902e-02,
         -1.2253e-01, -1.4709e-01, -3.9986e-01,  1.6088e-01, -6.2644e-02,
          2.0942e-04,  1.4122e-02, -4.5937e-02,  9.9045e-02, -2.7533e-01,
         -6.6813e-02,  5.6178e-01,  1.1848e-01, -3.4511e-01,  2.9193e-01,
          4.6568e-01,  1.3903e-02, -1.6728e-01,  8.5289e-02,  8.5369e-02,
         -3.7553e-01, -1.6093e-01, -1.6246e+00,  4.7670e-01,  9.1354e-02,
          6.0507e-01,  1.3727e-01, -1.1086e-01, -1.9583e-01, -5.3894e-01,
         -9.1778e-02,  1.2149e-01,  2.8047e-01, -1.7669e-01,  3.8755e-01,
          1.8674e-01, -2.5281e-01,  2.7413e-01,  2.5623e-01,  4.3621e-01,
         -7.6459e-01, -8.3513e-01]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
799000 特征值优化 tensor(0.6079, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6117e+00, -4.0141e-01,  2.4453e-01, -3.3918e-01, -5.2237e-02,
         -1.7486e+00, -6.7020e-01, -5.6211e-01, -7.5645e-01,  2.5832e+00,
         -8.0757e-01, -4.5192e+00,  1.4088e-01,  1.1039e-02,  6.3378e-02,
          4.8059e-04, -4.8357e-02,  9.9293e-02,  1.3871e-01, -9.6337e-02,
         -3.7255e-03, -5.5889e-02, -8.3105e-02, -1.0246e-01, -1.8997e-01,
          2.7392e-01,  2.3751e-01, -8.1222e-02, -1.4614e-01, -5.0377e-02,
         -1.2445e-01, -1.7357e-01, -3.9151e-01,  1.6147e-01, -6.3036e-02,
          4.9473e-02,  1.3530e-02, -4.2648e-02,  1.0649e-01, -2.8167e-01,
         -6.4543e-02,  5.3207e-01,  1.1967e-01, -3.4727e-01,  2.9226e-01,
          4.6322e-01,  1.4115e-02, -1.7211e-01,  9.0925e-02,  9.0832e-02,
         -3.7816e-01, -1.6036e-01, -1.6248e+00,  4.7371e-01,  1.1605e-01,
          5.9843e-01,  1.2612e-01, -1.0641e-01, -1.9972e-01, -5.6013e-01,
         -1.0038e-01,  1.1946e-01,  2.7188e-01, -1.7763e-01,  3.8025e-01,
          1.7209e-01, -2.8019e-01,  3.1208e-01,  2.6088e-01,  4.3762e-01,
         -8.1645e-01, -8.3442e-01]], device='cuda:0') tensor(0.2054, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
800000 特征值优化 tensor(0.5992, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6030e+00, -4.1543e-01,  2.5170e-01, -3.3847e-01, -3.2586e-02,
         -1.7432e+00, -6.7411e-01, -5.9858e-01, -7.8200e-01,  2.6125e+00,
         -8.0526e-01, -4.5610e+00,  1.4021e-01, -3.8925e-02,  6.7176e-02,
          5.6906e-03,  2.5293e-02,  9.9392e-02,  1.4803e-01, -9.5081e-02,
         -1.9765e-03, -5.5616e-02, -1.3854e-01, -4.1111e-02, -2.1576e-01,
          2.6203e-01,  2.2788e-01, -4.5501e-02, -1.3915e-01, -5.0637e-02,
         -1.1969e-01, -1.4298e-01, -3.9820e-01,  1.5808e-01, -6.2519e-02,
          3.3623e-04,  1.5502e-02, -4.4706e-02,  1.0388e-01, -2.7979e-01,
         -6.7719e-02,  5.6740e-01,  1.1695e-01, -3.4687e-01,  2.9272e-01,
          4.6624e-01,  1.4428e-02, -1.6642e-01,  8.5556e-02,  8.5646e-02,
         -3.7606e-01, -1.6134e-01, -1.6302e+00,  4.7969e-01,  7.2670e-02,
          6.0524e-01,  1.3417e-01, -1.1256e-01, -1.8953e-01, -5.5349e-01,
         -8.6686e-02,  1.2272e-01,  2.9275e-01, -1.7971e-01,  3.8089e-01,
          1.8053e-01, -2.4092e-01,  2.8580e-01,  2.5822e-01,  4.3168e-01,
         -7.8427e-01, -8.4965e-01]], device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
801000 特征值优化 tensor(0.5968, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6161e+00, -3.8750e-01,  2.4834e-01, -3.4262e-01, -5.1319e-02,
         -1.7378e+00, -6.6163e-01, -5.6072e-01, -7.6456e-01,  2.6137e+00,
         -8.3512e-01, -4.5862e+00,  1.4057e-01,  4.0610e-03,  5.3137e-02,
          1.7422e-02, -7.3794e-02,  7.0336e-02,  1.4489e-01, -9.4876e-02,
         -3.7884e-03, -5.5712e-02, -3.0913e-02, -1.5925e-01, -1.7462e-01,
          2.8929e-01,  2.5596e-01, -1.1013e-01, -1.3967e-01, -5.0692e-02,
         -1.2557e-01, -1.7761e-01, -4.0240e-01,  1.6245e-01, -4.1603e-02,
          8.0642e-02,  1.3413e-02, -4.1662e-02,  1.1438e-01, -2.9391e-01,
         -6.3507e-02,  5.3677e-01,  1.2155e-01, -3.4807e-01,  2.9216e-01,
          4.5627e-01,  1.3002e-02, -1.6551e-01,  8.6543e-02,  8.6443e-02,
         -3.7084e-01, -1.6390e-01, -1.6207e+00,  4.7204e-01,  1.0799e-01,
          6.1214e-01,  1.3742e-01, -1.1300e-01, -2.0133e-01, -5.5107e-01,
         -1.0404e-01,  1.2093e-01,  2.6410e-01, -1.7875e-01,  3.8099e-01,
          1.5701e-01, -2.7886e-01,  3.3348e-01,  2.4849e-01,  4.5133e-01,
         -8.0056e-01, -8.6552e-01]], device='cuda:0') tensor(0.2074, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
802000 特征值优化 tensor(0.6203, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6004e+00, -3.9875e-01,  2.3621e-01, -3.2019e-01, -3.7455e-02,
         -1.7426e+00, -6.7652e-01, -5.6501e-01, -8.1060e-01,  2.6252e+00,
         -8.1038e-01, -4.6289e+00,  1.4058e-01, -9.0223e-03,  5.5163e-02,
         -1.4502e-02, -4.2744e-03,  1.0686e-01,  1.6022e-01, -9.5531e-02,
         -1.6335e-03, -5.6072e-02, -1.3466e-01, -4.6833e-02, -2.0206e-01,
          2.6108e-01,  2.3448e-01, -5.3387e-02, -1.4512e-01, -5.0133e-02,
         -1.2174e-01, -1.6599e-01, -3.9060e-01,  1.5591e-01, -8.1193e-02,
          2.7422e-02,  1.6198e-02, -3.9312e-02,  1.1050e-01, -3.0109e-01,
         -6.7184e-02,  5.7673e-01,  1.1477e-01, -3.4315e-01,  2.9605e-01,
          4.6171e-01,  1.5628e-02, -1.6781e-01,  9.0936e-02,  9.0846e-02,
         -3.7760e-01, -1.6584e-01, -1.6275e+00,  4.7653e-01,  9.1844e-02,
          6.0001e-01,  1.0425e-01, -1.0628e-01, -1.8313e-01, -5.6079e-01,
         -9.1382e-02,  1.1966e-01,  2.7302e-01, -1.7928e-01,  3.8350e-01,
          1.8581e-01, -2.7465e-01,  3.1146e-01,  2.6301e-01,  4.3230e-01,
         -7.8695e-01, -8.7078e-01]], device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
803000 特征值优化 tensor(0.6115, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6027e+00, -4.1397e-01,  2.4085e-01, -3.2597e-01, -3.3994e-02,
         -1.7190e+00, -6.6080e-01, -5.6815e-01, -8.1341e-01,  2.6558e+00,
         -8.1566e-01, -4.6640e+00,  1.3962e-01, -5.0209e-02,  2.6156e-02,
          1.1016e-02,  9.6658e-04,  1.0317e-01,  1.6545e-01, -9.5729e-02,
         -2.9769e-03, -5.7001e-02, -8.2887e-02, -9.1443e-02, -2.0295e-01,
          2.5339e-01,  2.2787e-01, -7.1313e-02, -1.3987e-01, -4.9222e-02,
         -1.2073e-01, -1.6239e-01, -3.9635e-01,  1.6212e-01, -6.2609e-02,
          3.0227e-02,  1.6360e-02, -4.6219e-02,  1.0872e-01, -2.8927e-01,
         -6.9037e-02,  5.7651e-01,  1.1700e-01, -3.4683e-01,  2.9326e-01,
          4.6815e-01,  1.3073e-02, -1.6339e-01,  8.4652e-02,  8.4723e-02,
         -3.8043e-01, -1.6011e-01, -1.6159e+00,  4.7412e-01,  8.6405e-02,
          6.0554e-01,  1.2035e-01, -1.0517e-01, -1.9497e-01, -5.7580e-01,
         -9.6473e-02,  1.2128e-01,  2.7786e-01, -1.7845e-01,  3.7919e-01,
          1.7668e-01, -2.5585e-01,  3.2057e-01,  2.5349e-01,  4.3816e-01,
         -7.8600e-01, -8.9398e-01]], device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
804000 特征值优化 tensor(0.5999, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6125e+00, -3.9701e-01,  2.4830e-01, -3.4288e-01, -4.8116e-02,
         -1.7403e+00, -6.5403e-01, -5.7524e-01, -7.9130e-01,  2.6817e+00,
         -8.2885e-01, -4.6915e+00,  1.4014e-01,  7.9287e-03,  4.7768e-02,
          4.1422e-03, -6.0134e-02,  8.5775e-02,  1.3451e-01, -9.5518e-02,
         -3.4309e-03, -5.5802e-02, -5.5388e-02, -1.3398e-01, -1.7942e-01,
          2.8211e-01,  2.4911e-01, -1.0488e-01, -1.4386e-01, -5.0571e-02,
         -1.2434e-01, -1.7683e-01, -3.9476e-01,  1.6025e-01, -4.9351e-02,
          6.3455e-02,  1.4939e-02, -4.0393e-02,  1.1905e-01, -3.0382e-01,
         -6.5865e-02,  5.6834e-01,  1.2062e-01, -3.4795e-01,  2.9307e-01,
          4.6068e-01,  1.3073e-02, -1.7128e-01,  8.9599e-02,  8.9513e-02,
         -3.7517e-01, -1.6129e-01, -1.6294e+00,  4.7703e-01,  1.0249e-01,
          6.0723e-01,  1.2972e-01, -1.1155e-01, -1.9424e-01, -5.6747e-01,
         -1.0483e-01,  1.2311e-01,  2.6714e-01, -1.8219e-01,  3.7106e-01,
          1.5692e-01, -2.6744e-01,  3.4134e-01,  2.5927e-01,  4.3793e-01,
         -8.1847e-01, -8.8182e-01]], device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
805000 特征值优化 tensor(0.6002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6031e+00, -4.1372e-01,  2.4757e-01, -3.3930e-01, -3.5674e-02,
         -1.7230e+00, -6.5561e-01, -5.8666e-01, -8.3658e-01,  2.6953e+00,
         -8.1694e-01, -4.7472e+00,  1.4009e-01, -4.5185e-02,  6.6912e-02,
          1.0483e-02,  2.1057e-02,  1.0062e-01,  1.4674e-01, -9.5694e-02,
         -2.0652e-03, -5.6148e-02, -1.3755e-01, -4.6768e-02, -2.1497e-01,
          2.6959e-01,  2.3718e-01, -4.6511e-02, -1.3893e-01, -5.0184e-02,
         -1.2071e-01, -1.5868e-01, -3.9619e-01,  1.6222e-01, -6.1899e-02,
          8.7188e-03,  1.5676e-02, -4.2042e-02,  1.1314e-01, -2.9696e-01,
         -6.7295e-02,  5.8588e-01,  1.1632e-01, -3.4493e-01,  2.9110e-01,
          4.6617e-01,  1.3999e-02, -1.6551e-01,  8.5391e-02,  8.5475e-02,
         -3.7305e-01, -1.6202e-01, -1.6293e+00,  4.7930e-01,  7.8812e-02,
          6.0615e-01,  1.2845e-01, -1.0660e-01, -1.8870e-01, -5.6189e-01,
         -9.8779e-02,  1.2432e-01,  2.8191e-01, -1.8450e-01,  3.8509e-01,
          1.7156e-01, -2.4149e-01,  3.0928e-01,  2.6074e-01,  4.3139e-01,
         -7.8870e-01, -9.0027e-01]], device='cuda:0') tensor(0.2028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
806000 特征值优化 tensor(0.5937, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6105e+00, -3.9550e-01,  2.5263e-01, -3.4092e-01, -4.6744e-02,
         -1.7641e+00, -6.4377e-01, -5.8141e-01, -7.9872e-01,  2.7266e+00,
         -8.4044e-01, -4.7626e+00,  1.4059e-01, -4.5851e-04,  5.2816e-02,
          1.9843e-03, -7.2275e-02,  7.8984e-02,  1.3354e-01, -9.5558e-02,
         -3.0404e-03, -5.5555e-02, -4.4650e-02, -1.6399e-01, -1.6160e-01,
          2.9416e-01,  2.6222e-01, -1.1447e-01, -1.4063e-01, -5.0457e-02,
         -1.2428e-01, -1.7490e-01, -3.9588e-01,  1.5889e-01, -4.0098e-02,
          7.4405e-02,  1.8235e-02, -4.3828e-02,  1.2206e-01, -3.0924e-01,
         -6.6253e-02,  5.8210e-01,  1.1985e-01, -3.4770e-01,  2.9256e-01,
          4.5513e-01,  1.4752e-02, -1.6687e-01,  8.5720e-02,  8.5640e-02,
         -3.7291e-01, -1.6168e-01, -1.6271e+00,  4.7555e-01,  6.8061e-02,
          6.1234e-01,  1.4409e-01, -1.1617e-01, -1.8938e-01, -5.6583e-01,
         -1.0416e-01,  1.2632e-01,  2.7693e-01, -1.8726e-01,  3.7228e-01,
          1.4679e-01, -2.6689e-01,  3.4992e-01,  2.6198e-01,  4.3763e-01,
         -8.2011e-01, -8.9020e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
807000 特征值优化 tensor(0.6054, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6048e+00, -4.1319e-01,  2.3905e-01, -3.2343e-01, -3.8739e-02,
         -1.7599e+00, -6.5292e-01, -6.0847e-01, -8.3905e-01,  2.7547e+00,
         -8.0915e-01, -4.8147e+00,  1.4033e-01, -8.7203e-02,  2.6545e-02,
         -4.5503e-03,  2.7477e-02,  1.0518e-01,  1.7462e-01, -9.5109e-02,
         -3.0309e-03, -5.5485e-02, -1.2816e-01, -7.6190e-02, -2.0684e-01,
          2.5253e-01,  2.4542e-01, -8.2381e-02, -1.3883e-01, -5.0884e-02,
         -1.2200e-01, -1.6052e-01, -3.8548e-01,  1.5768e-01, -6.3471e-02,
          1.1870e-02,  1.6063e-02, -4.5474e-02,  1.1313e-01, -2.9814e-01,
         -6.7738e-02,  6.2055e-01,  1.1737e-01, -3.4584e-01,  2.9172e-01,
          4.6933e-01,  1.3411e-02, -1.6084e-01,  8.5920e-02,  8.6016e-02,
         -3.8004e-01, -1.6333e-01, -1.6291e+00,  4.7851e-01,  7.4193e-02,
          5.9602e-01,  1.3471e-01, -1.1399e-01, -1.7826e-01, -5.7514e-01,
         -9.3767e-02,  1.1828e-01,  2.9749e-01, -1.7734e-01,  3.6566e-01,
          1.7063e-01, -2.2444e-01,  3.2149e-01,  2.7601e-01,  4.2790e-01,
         -8.2271e-01, -8.9351e-01]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
808000 特征值优化 tensor(0.6114, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6126e+00, -3.9953e-01,  2.4263e-01, -3.3512e-01, -4.0268e-02,
         -1.7496e+00, -6.5276e-01, -5.5764e-01, -8.4243e-01,  2.7590e+00,
         -8.2567e-01, -4.8361e+00,  1.4071e-01,  9.9181e-03,  4.4788e-02,
         -5.1821e-03, -2.5153e-02,  1.0930e-01,  1.3693e-01, -9.7055e-02,
         -3.1980e-03, -5.6508e-02, -1.0291e-01, -7.0649e-02, -1.8793e-01,
          2.7436e-01,  2.4211e-01, -7.8518e-02, -1.4594e-01, -4.9755e-02,
         -1.2153e-01, -1.7868e-01, -3.8677e-01,  1.6091e-01, -7.0506e-02,
          3.2595e-02,  1.6573e-02, -4.3741e-02,  1.2041e-01, -3.1065e-01,
         -6.8487e-02,  6.1158e-01,  1.2090e-01, -3.4724e-01,  2.9184e-01,
          4.6041e-01,  1.5050e-02, -1.7163e-01,  9.0092e-02,  9.0011e-02,
         -3.7974e-01, -1.5970e-01, -1.6277e+00,  4.7712e-01,  9.0500e-02,
          5.9869e-01,  1.2514e-01, -1.0523e-01, -1.8510e-01, -5.8999e-01,
         -1.0732e-01,  1.2747e-01,  2.7449e-01, -1.8512e-01,  3.6411e-01,
          1.6531e-01, -2.4742e-01,  3.4176e-01,  2.7315e-01,  4.2773e-01,
         -8.4027e-01, -9.0718e-01]], device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
809000 特征值优化 tensor(0.6143, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6064e+00, -4.0857e-01,  2.4040e-01, -3.2405e-01, -3.3929e-02,
         -1.7360e+00, -6.4920e-01, -5.7940e-01, -8.5711e-01,  2.7778e+00,
         -8.2515e-01, -4.8678e+00,  1.3990e-01, -4.5957e-02,  3.5267e-02,
          8.1958e-03, -3.1758e-03,  1.0919e-01,  1.6372e-01, -9.6052e-02,
         -2.7905e-03, -5.7001e-02, -8.0548e-02, -9.6335e-02, -2.0342e-01,
          2.5234e-01,  2.2897e-01, -7.5449e-02, -1.4063e-01, -4.9323e-02,
         -1.2078e-01, -1.6436e-01, -3.9069e-01,  1.5917e-01, -6.4781e-02,
          3.6699e-02,  1.8770e-02, -4.4862e-02,  1.1690e-01, -3.0502e-01,
         -7.0960e-02,  6.1709e-01,  1.1776e-01, -3.4657e-01,  2.9145e-01,
          4.6765e-01,  1.3766e-02, -1.6356e-01,  8.4823e-02,  8.4910e-02,
         -3.8217e-01, -1.6038e-01, -1.6243e+00,  4.7677e-01,  6.8427e-02,
          6.0500e-01,  1.1744e-01, -1.0574e-01, -1.8376e-01, -5.9903e-01,
         -9.4272e-02,  1.2322e-01,  2.7907e-01, -1.8103e-01,  3.6734e-01,
          1.6660e-01, -2.4447e-01,  3.4869e-01,  2.6439e-01,  4.3048e-01,
         -8.3251e-01, -9.2422e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
810000 特征值优化 tensor(0.6017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6103e+00, -3.9972e-01,  2.4615e-01, -3.4222e-01, -4.4713e-02,
         -1.7397e+00, -6.4748e-01, -5.6614e-01, -8.5008e-01,  2.7813e+00,
         -8.4620e-01, -4.8927e+00,  1.4032e-01,  3.6758e-03,  6.2318e-02,
          5.4292e-04, -5.8832e-02,  8.5033e-02,  1.4113e-01, -9.6076e-02,
         -3.5787e-03, -5.5757e-02, -6.0429e-02, -1.1893e-01, -1.8735e-01,
          2.8616e-01,  2.5649e-01, -9.5557e-02, -1.4643e-01, -5.0485e-02,
         -1.2350e-01, -1.8235e-01, -3.9371e-01,  1.5887e-01, -5.1576e-02,
          6.0605e-02,  1.5358e-02, -3.9609e-02,  1.2675e-01, -3.1879e-01,
         -6.6366e-02,  6.0450e-01,  1.1966e-01, -3.4828e-01,  2.9293e-01,
          4.6262e-01,  1.3155e-02, -1.7211e-01,  9.0765e-02,  9.0680e-02,
         -3.7507e-01, -1.6140e-01, -1.6295e+00,  4.7799e-01,  1.0118e-01,
          6.0831e-01,  1.2655e-01, -1.1287e-01, -1.8635e-01, -5.8125e-01,
         -1.1056e-01,  1.2568e-01,  2.6329e-01, -1.8392e-01,  3.7187e-01,
          1.4905e-01, -2.5460e-01,  3.6335e-01,  2.6765e-01,  4.3529e-01,
         -8.3742e-01, -9.3117e-01]], device='cuda:0') tensor(0.2032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
811000 特征值优化 tensor(0.5938, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6130e+00, -4.0534e-01,  2.5389e-01, -3.3771e-01, -4.1399e-02,
         -1.7389e+00, -6.4740e-01, -5.5773e-01, -8.8857e-01,  2.8155e+00,
         -8.3209e-01, -4.9320e+00,  1.4134e-01, -8.6920e-02,  8.1935e-02,
         -2.8613e-03,  1.9758e-02,  4.5345e-02,  2.0244e-01, -9.3149e-02,
         -2.1381e-03, -5.5814e-02, -1.6572e-01, -2.6350e-02, -2.1391e-01,
          2.6895e-01,  2.3637e-01, -4.2454e-02, -1.3938e-01, -5.0516e-02,
         -1.2463e-01, -1.5609e-01, -3.9461e-01,  1.6233e-01, -6.4646e-02,
         -1.0516e-02,  1.6466e-02, -4.4801e-02,  1.1867e-01, -3.0975e-01,
         -6.9407e-02,  6.3233e-01,  1.2041e-01, -3.4464e-01,  2.9107e-01,
          4.6717e-01,  1.2068e-02, -1.6889e-01,  8.5884e-02,  8.5974e-02,
         -3.7771e-01, -1.6042e-01, -1.6319e+00,  4.7814e-01,  7.5296e-02,
          6.0660e-01,  1.4169e-01, -1.1240e-01, -1.7614e-01, -5.6383e-01,
         -1.0846e-01,  1.3194e-01,  2.7090e-01, -1.8382e-01,  3.7891e-01,
          1.6578e-01, -2.2480e-01,  3.2424e-01,  2.7440e-01,  4.2391e-01,
         -7.8317e-01, -9.4611e-01]], device='cuda:0') tensor(0.2049, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
812000 特征值优化 tensor(20.2441, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2231, -0.8248,  0.5838,  0.5225, -1.3211,  1.2263,  0.0477, -1.1711,
         -0.0474, -0.5351,  0.0230, -1.6810,  0.7339, -0.1058, -0.0980,  0.5892,
         -0.0426,  0.4312,  0.0181,  0.2824,  0.9660,  1.2002,  0.0769, -0.6111,
          0.9312,  0.2608, -0.1944, -0.2799, -2.3407, -1.4803, -0.8867, -1.6413,
          0.4681,  0.5789, -0.2532,  0.1034,  0.3642,  0.4211,  0.1369, -1.5852,
         -1.5851,  1.2964, -1.6418, -3.2884, -1.6640, -1.2341,  0.3638, -1.1091,
         -0.0798, -0.1285,  1.4413,  0.6222, -2.4554, -0.4230,  0.2759, -0.2811,
         -2.0606,  1.8510, -0.4734,  0.0059, -0.4129, -1.3250, -0.7174,  0.7103,
         -0.1404,  0.5809,  1.1276,  0.1126, -0.4531,  1.0322,  0.9241,  2.0062]],
       device='cuda:0') tensor(0.2576, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
813000 特征值优化 tensor(5.7317, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0052, -0.3412, -0.3105,  1.0878, -2.2473,  0.2063, -0.6919, -0.6031,
         -0.9159, -0.3619, -0.5632, -2.3410,  0.1189, -0.0383,  0.0792,  0.0848,
          0.0805,  0.0681, -0.0485,  0.0027,  0.7822,  0.4530, -0.0110, -0.0233,
          0.1804,  0.1942, -0.2808,  0.0230, -1.4444, -0.6513, -0.7413, -0.8065,
          0.6029,  0.1071, -0.0204, -0.0766,  0.1148, -0.0194,  0.0233, -0.6026,
         -0.7012,  0.3457, -0.4910, -2.1512, -0.5095, -0.0944, -0.1144, -1.9185,
          0.8844,  0.8349,  0.4698,  0.2738, -2.6863,  0.3732,  0.1253, -0.2804,
         -0.9054,  0.8014, -0.0717,  0.0597, -0.5072, -0.3451, -0.4082,  0.3224,
         -0.1068,  0.1535,  0.6075,  0.1265, -0.8230,  0.4929,  0.1814,  0.9797]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
814000 特征值优化 tensor(1.1278, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4638e+00, -5.2323e-01, -7.7339e-01,  3.3355e-01, -2.3413e+00,
         -5.4125e-01, -1.0512e+00, -3.3028e-01, -5.0150e-01, -1.6376e-02,
         -3.3422e-01, -1.4716e+00,  9.9289e-02,  1.1878e-01,  2.9663e-01,
          1.5895e-02,  2.5928e-01,  1.0104e-01,  3.3095e-02,  3.7749e-02,
          3.8096e-01,  1.2958e-01, -3.8846e-02, -1.1358e-02, -9.7594e-04,
         -3.7935e-02, -1.0505e-01, -9.9625e-03, -1.0296e+00, -2.1009e-01,
         -4.5815e-01, -3.6165e-01,  2.7767e-01,  1.4734e-01, -1.1025e-02,
          3.2031e-04,  1.2330e-02, -4.6612e-02,  5.2524e-02, -2.5447e-01,
         -2.0952e-01,  9.7328e-02, -6.8733e-02, -1.3456e+00,  2.0785e-01,
         -6.1403e-02, -5.5954e-02, -1.7353e+00,  1.2073e+00,  1.1375e+00,
          9.0505e-01, -2.3068e-01, -1.8625e+00,  5.8626e-01,  2.7223e-01,
         -9.5514e-01,  3.3139e-02,  2.8451e-01, -1.4751e-01, -1.5657e-01,
         -2.2981e-01,  8.8623e-02,  2.0524e-01,  2.4467e-01,  2.1937e-01,
          3.1140e-03,  2.8465e-01, -1.4800e-02, -4.6947e-01,  3.2982e-01,
          3.9998e-01,  2.3665e-01]], device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
815000 特征值优化 tensor(0.8656, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0425e+00, -2.9546e-01, -8.7864e-01,  2.0491e-02, -2.0465e+00,
         -5.5457e-01, -1.2149e+00, -5.5299e-01, -2.5653e-01, -9.6133e-02,
         -2.5770e-01, -1.3595e+00,  6.0047e-02, -2.0121e-02,  2.4889e-01,
          7.4562e-03,  2.2533e-01,  1.1197e-01,  9.8390e-02, -2.0189e-03,
          2.6604e-01,  1.0409e-01, -1.5853e-02,  3.4735e-02,  4.3194e-02,
          2.4749e-02, -2.1701e-01, -5.7660e-02, -8.1894e-01, -1.8402e-01,
         -3.8953e-01, -3.2172e-01,  1.4208e-01,  1.5068e-01,  2.9664e-02,
          6.2675e-05,  9.6324e-03, -3.7793e-02,  1.0575e-01, -2.3854e-01,
         -2.0084e-01,  5.9724e-02, -9.7082e-02, -1.0658e+00,  1.8372e-01,
         -1.1406e-01, -8.0288e-03, -1.5065e+00,  1.1419e+00,  1.0252e+00,
          1.4314e+00, -4.4560e-01, -1.4074e+00,  3.9418e-01,  4.6111e-01,
         -8.2907e-01,  3.8404e-02,  2.7812e-01, -1.3370e-01, -2.9713e-01,
         -2.4092e-01,  9.5735e-02,  4.2350e-01,  1.9293e-01,  2.2222e-01,
          9.8275e-02,  4.3362e-01, -2.8086e-02, -3.6959e-01,  2.3635e-01,
          2.5886e-01,  2.0220e-01]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
816000 特征值优化 tensor(0.7705, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5653, -0.3951, -0.8423, -0.0506, -1.8788, -0.6003, -1.4174, -0.6007,
         -0.2292, -0.1022, -0.1864, -1.4430,  0.0680, -0.0538,  0.1136, -0.0504,
          0.2382,  0.0682,  0.1524,  0.0069,  0.1695,  0.1166, -0.0204,  0.0307,
          0.0128,  0.0549, -0.2143, -0.0379, -0.7578, -0.1948, -0.3331, -0.2638,
          0.0871,  0.1465,  0.0283, -0.0186, -0.0064, -0.0214,  0.1184, -0.2375,
         -0.2112,  0.0632, -0.1785, -0.8707,  0.2269, -0.1470,  0.0113, -1.3796,
          1.0634,  0.9325,  1.4352, -0.4307, -0.9297,  0.2145,  0.5244, -0.7131,
          0.0865,  0.2605, -0.1070, -0.2713, -0.2375,  0.0574,  0.4891,  0.1544,
          0.1880,  0.1432,  0.4553, -0.0145, -0.3473,  0.2404,  0.2073,  0.1738]],
       device='cuda:0') tensor(0.2028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
817000 特征值优化 tensor(0.7540, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3536, -0.2326, -0.8120,  0.0094, -1.8809, -0.6061, -1.5446, -0.6264,
         -0.1747, -0.1280, -0.1547, -1.4973,  0.0369, -0.0991,  0.0443, -0.1241,
          0.1943,  0.0172,  0.1662, -0.0166,  0.1376,  0.1146,  0.1118,  0.0105,
          0.0599,  0.1007, -0.1509,  0.0114, -0.6878, -0.1899, -0.2990, -0.1813,
          0.0646,  0.1470,  0.0418, -0.0287, -0.0033, -0.0088,  0.0974, -0.2363,
         -0.2147,  0.0812, -0.2406, -0.8101,  0.2713, -0.1309,  0.0248, -1.2593,
          1.0135,  0.8289,  1.3459, -0.3993, -0.5421,  0.0205,  0.4976, -0.6331,
          0.0821,  0.2628, -0.1364, -0.2702, -0.1690,  0.0181,  0.4849,  0.1396,
          0.1414,  0.1722,  0.4415, -0.0117, -0.3451,  0.2475,  0.2422,  0.1449]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
818000 特征值优化 tensor(0.7347, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3290, -0.2022, -0.8238,  0.0241, -1.9592, -0.5842, -1.5431, -0.7000,
         -0.1006, -0.1196, -0.0649, -1.5932,  0.0385, -0.0853, -0.0232, -0.0512,
          0.2039,  0.1121,  0.1748,  0.0176,  0.1362,  0.1094,  0.1019,  0.0740,
          0.1108,  0.1342, -0.1709,  0.1506, -0.6562, -0.1903, -0.3083, -0.1617,
          0.0180,  0.1474,  0.0533, -0.0162,  0.0041, -0.0088,  0.0853, -0.2335,
         -0.2113,  0.0957, -0.2543, -0.8068,  0.2675, -0.1618,  0.0409, -1.1721,
          0.9995,  0.7496,  1.2813, -0.3646, -0.3904, -0.0626,  0.4770, -0.6109,
          0.1384,  0.2241, -0.1421, -0.2673, -0.2049,  0.0415,  0.5602,  0.0908,
          0.1228,  0.1935,  0.4403, -0.0220, -0.3265,  0.2353,  0.2425,  0.1387]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
819000 特征值优化 tensor(0.7354, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3240, -0.2471, -0.8122,  0.0413, -1.9376, -0.5931, -1.5836, -0.7225,
         -0.0290, -0.0881, -0.0636, -1.6761,  0.0373,  0.0448,  0.0569, -0.1445,
          0.1678,  0.0611,  0.1813, -0.0469,  0.1356,  0.1095,  0.0581,  0.0624,
          0.1266,  0.1364, -0.1530,  0.1094, -0.6633, -0.1884, -0.2944, -0.1516,
          0.0455,  0.1459,  0.0128, -0.0566,  0.0193,  0.0081,  0.0663, -0.2307,
         -0.2174,  0.1154, -0.2656, -0.8046,  0.2703, -0.1653,  0.0557, -1.1144,
          1.0367,  0.6474,  1.1587, -0.3016, -0.3253, -0.0800,  0.5280, -0.5842,
          0.0879,  0.2545, -0.1636, -0.2696, -0.1882,  0.0407,  0.5238,  0.0869,
          0.1443,  0.1816,  0.3840, -0.0128, -0.3704,  0.2471,  0.2953,  0.1087]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
820000 特征值优化 tensor(0.7305, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.1693e-01, -2.4714e-01, -8.2048e-01,  3.9017e-02, -1.9344e+00,
         -6.1423e-01, -1.5712e+00, -6.8589e-01,  1.4108e-03, -9.1991e-02,
         -9.8938e-02, -1.6945e+00,  3.8502e-02,  5.2886e-02,  7.1472e-02,
         -1.5464e-01,  1.7698e-01,  3.4228e-02,  1.8134e-01, -3.7838e-02,
          1.3803e-01,  1.0806e-01,  1.0775e-01, -7.7590e-03,  1.6641e-01,
          1.5891e-01, -1.6745e-01,  1.3750e-01, -6.5566e-01, -1.8921e-01,
         -2.9765e-01, -1.4599e-01,  4.7430e-02,  1.4554e-01,  1.3641e-02,
         -5.9063e-02,  2.3702e-02, -6.1397e-04,  6.7011e-02, -2.3108e-01,
         -2.1848e-01,  1.1846e-01, -2.7001e-01, -8.0376e-01,  2.6849e-01,
         -1.5044e-01,  4.0683e-02, -1.0685e+00,  1.0213e+00,  6.1562e-01,
          1.1088e+00, -2.7662e-01, -3.1744e-01, -8.9147e-02,  5.0983e-01,
         -5.9955e-01,  9.1951e-02,  2.5736e-01, -1.5524e-01, -2.6825e-01,
         -1.7820e-01,  3.8707e-02,  5.1613e-01,  1.0156e-01,  1.3562e-01,
          1.8913e-01,  3.8061e-01, -1.5654e-02, -3.6785e-01,  2.3898e-01,
          3.0421e-01,  1.0412e-01]], device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
821000 特征值优化 tensor(0.7344, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.1715e-01, -2.1828e-01, -8.2968e-01,  4.1376e-02, -1.9566e+00,
         -5.7992e-01, -1.5776e+00, -7.0727e-01,  1.6404e-02, -6.4424e-02,
         -9.4731e-02, -1.7184e+00,  3.8375e-02, -9.8638e-02, -5.7796e-02,
         -2.2507e-02,  2.6395e-01,  1.5920e-01,  1.5272e-01,  2.6079e-02,
          1.3534e-01,  1.0762e-01,  4.1657e-02,  8.3144e-02,  9.9969e-02,
          1.4159e-01, -1.6121e-01,  1.3762e-01, -6.4954e-01, -1.8944e-01,
         -3.0650e-01, -1.4170e-01,  2.3087e-02,  1.4765e-01,  3.0731e-02,
         -1.9948e-02,  7.7185e-03, -5.7495e-04,  6.2201e-02, -2.3197e-01,
         -2.0898e-01,  1.2127e-01, -2.6605e-01, -8.0616e-01,  2.7060e-01,
         -1.6609e-01,  4.4840e-02, -1.0542e+00,  1.0135e+00,  6.0605e-01,
          1.0997e+00, -2.6963e-01, -2.9690e-01, -1.1428e-01,  4.9164e-01,
         -5.9381e-01,  1.3880e-01,  2.2196e-01, -1.6549e-01, -2.5981e-01,
         -2.1615e-01,  4.1621e-02,  5.6238e-01,  7.7666e-02,  1.2441e-01,
          1.8414e-01,  3.8080e-01, -2.5637e-02, -3.3802e-01,  2.4088e-01,
          2.6530e-01,  1.3545e-01]], device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
822000 特征值优化 tensor(0.7357, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3371, -0.2471, -0.8243,  0.0434, -1.9187, -0.5699, -1.5889, -0.7180,
          0.0197, -0.0760, -0.0645, -1.7201,  0.0372,  0.0301,  0.0478, -0.1169,
          0.1674,  0.0881,  0.1810, -0.0366,  0.1358,  0.1068,  0.0188,  0.0398,
          0.1203,  0.1489, -0.1432,  0.1295, -0.6507, -0.1880, -0.2901, -0.1475,
          0.0458,  0.1475,  0.0138, -0.0575,  0.0223,  0.0076,  0.0608, -0.2291,
         -0.2190,  0.1221, -0.2521, -0.8121,  0.2667, -0.1669,  0.0596, -1.0553,
          1.0158,  0.6070,  1.0977, -0.2692, -0.3045, -0.0872,  0.5239, -0.5834,
          0.0815,  0.2508, -0.1568, -0.2614, -0.1906,  0.0468,  0.5188,  0.0920,
          0.1362,  0.1853,  0.3710, -0.0167, -0.3709,  0.2433,  0.2887,  0.1154]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
823000 特征值优化 tensor(0.7379, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3244, -0.2304, -0.8341,  0.0453, -1.9469, -0.5652, -1.6092, -0.7052,
          0.0334, -0.0654, -0.0694, -1.7392,  0.0393, -0.0416, -0.0576, -0.0926,
          0.1962,  0.1245,  0.1625,  0.0183,  0.1379,  0.1079,  0.0628,  0.0897,
          0.1116,  0.1417, -0.1550,  0.1481, -0.6520, -0.1888, -0.3048, -0.1471,
          0.0323,  0.1472,  0.0399, -0.0080,  0.0060,  0.0025,  0.0607, -0.2289,
         -0.2092,  0.1223, -0.2581, -0.8100,  0.2636, -0.1494,  0.0350, -1.0533,
          1.0160,  0.6066,  1.0983, -0.2693, -0.3193, -0.0996,  0.5056, -0.5929,
          0.1035,  0.2393, -0.1584, -0.2508, -0.2056,  0.0393,  0.5466,  0.0843,
          0.1248,  0.1908,  0.3789, -0.0239, -0.3516,  0.2455,  0.2668,  0.1293]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
824000 特征值优化 tensor(0.7361, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3255, -0.2371, -0.8210,  0.0497, -1.9374, -0.5842, -1.5625, -0.6922,
          0.0376, -0.0661, -0.0963, -1.7226,  0.0385,  0.0198,  0.0312, -0.1126,
          0.1773,  0.0980,  0.1725, -0.0059,  0.1373,  0.1071,  0.0196,  0.0501,
          0.1143,  0.1495, -0.1463,  0.1274, -0.6495, -0.1880, -0.2980, -0.1437,
          0.0411,  0.1472,  0.0137, -0.0504,  0.0235,  0.0020,  0.0573, -0.2295,
         -0.2181,  0.1264, -0.2632, -0.8080,  0.2695, -0.1542,  0.0410, -1.0568,
          1.0136,  0.6089,  1.0958, -0.2700, -0.2964, -0.1003,  0.5133, -0.5951,
          0.0986,  0.2458, -0.1550, -0.2614, -0.1980,  0.0464,  0.5230,  0.0943,
          0.1375,  0.1825,  0.3617, -0.0205, -0.3649,  0.2399,  0.2864,  0.1189]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
825000 特征值优化 tensor(0.7417, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3388, -0.2444, -0.8299,  0.0498, -1.9332, -0.5719, -1.5901, -0.6904,
          0.0329, -0.0822, -0.0830, -1.7337,  0.0392,  0.0107, -0.0302, -0.1140,
          0.1580,  0.1083,  0.1745,  0.0179,  0.1381,  0.1079,  0.0371,  0.0802,
          0.1129,  0.1403, -0.1585,  0.1451, -0.6508, -0.1891, -0.3019, -0.1497,
          0.0347,  0.1472,  0.0462, -0.0216,  0.0075, -0.0026,  0.0590, -0.2272,
         -0.2065,  0.1246, -0.2510, -0.8138,  0.2646, -0.1483,  0.0395, -1.0543,
          1.0157,  0.6055,  1.0971, -0.2678, -0.3321, -0.0908,  0.4955, -0.5856,
          0.1003,  0.2424, -0.1605, -0.2546, -0.2076,  0.0441,  0.5327,  0.0906,
          0.1193,  0.2010,  0.3812, -0.0218, -0.3406,  0.2449,  0.2749,  0.1182]],
       device='cuda:0') tensor(0.2042, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
826000 正交保障 tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3405, -0.2169, -0.8262,  0.0409, -1.9750, -0.5616, -1.5982, -0.7311,
          0.0426, -0.0666, -0.0592, -1.7376,  0.0368, -0.0781, -0.0548, -0.0444,
          0.2542,  0.1751,  0.1507,  0.0414,  0.1356,  0.1067,  0.0406,  0.1288,
          0.1056,  0.1429, -0.1466,  0.1269, -0.6487, -0.1886, -0.3090, -0.1395,
          0.0224,  0.1473,  0.0449, -0.0038,  0.0116,  0.0049,  0.0573, -0.2271,
         -0.2110,  0.1237, -0.2516, -0.8113,  0.2681, -0.1694,  0.0507, -1.0531,
          1.0126,  0.6059,  1.0982, -0.2701, -0.2780, -0.1268,  0.5049, -0.5813,
          0.1218,  0.2270, -0.1549, -0.2500, -0.2092,  0.0429,  0.5593,  0.0701,
          0.1219,  0.1919,  0.3781, -0.0259, -0.3421,  0.2403,  0.2516,  0.1351]],
       device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
827000 特征值优化 tensor(0.7527, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3201, -0.2210, -0.8183,  0.0546, -1.9119, -0.6091, -1.6042, -0.6812,
          0.0180, -0.0910, -0.0797, -1.6983,  0.0380,  0.0519,  0.0141, -0.1362,
          0.1485,  0.0533,  0.1789, -0.0033,  0.1381,  0.1062,  0.0568,  0.0575,
          0.1139,  0.1434, -0.1455,  0.1243, -0.6482, -0.1880, -0.2978, -0.1622,
          0.0409,  0.1462,  0.0462, -0.0355,  0.0119,  0.0066,  0.0533, -0.2256,
         -0.2180,  0.1256, -0.2590, -0.8030,  0.2683, -0.1377,  0.0347, -1.0554,
          1.0139,  0.6065,  1.0978, -0.2719, -0.3388, -0.0893,  0.5169, -0.5842,
          0.0764,  0.2651, -0.1539, -0.2585, -0.1893,  0.0430,  0.5039,  0.0894,
          0.1232,  0.1988,  0.3775, -0.0208, -0.3605,  0.2562,  0.2837,  0.1060]],
       device='cuda:0') tensor(0.2066, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
828000 特征值优化 tensor(0.7365, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2400e-01, -2.3347e-01, -8.2940e-01,  5.0669e-02, -1.9569e+00,
         -5.7644e-01, -1.5711e+00, -7.0056e-01,  3.4170e-02, -7.7488e-02,
         -7.9235e-02, -1.7266e+00,  3.6743e-02, -7.1377e-02, -5.3053e-02,
         -7.8732e-02,  2.0336e-01,  1.3657e-01,  1.5591e-01,  4.7345e-02,
          1.3568e-01,  1.0861e-01,  2.4350e-02,  8.8245e-02,  1.0480e-01,
          1.4200e-01, -1.6286e-01,  1.4098e-01, -6.5010e-01, -1.8958e-01,
         -3.0483e-01, -1.4175e-01,  2.4202e-02,  1.4764e-01,  4.6167e-02,
         -1.1410e-02,  1.3791e-02, -1.1945e-03,  5.6534e-02, -2.2735e-01,
         -2.1368e-01,  1.2430e-01, -2.5970e-01, -8.0963e-01,  2.6792e-01,
         -1.6554e-01,  5.3312e-02, -1.0574e+00,  1.0158e+00,  6.0332e-01,
          1.0972e+00, -2.6838e-01, -2.8915e-01, -1.1596e-01,  4.9349e-01,
         -5.9599e-01,  1.2327e-01,  2.3079e-01, -1.5798e-01, -2.4970e-01,
         -2.1076e-01,  5.1063e-02,  5.5400e-01,  7.8207e-02,  1.2557e-01,
          1.9260e-01,  3.7836e-01, -2.4133e-02, -3.5408e-01,  2.3836e-01,
          2.4787e-01,  1.3396e-01]], device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
829000 特征值优化 tensor(0.7349, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3165, -0.2307, -0.8205,  0.0490, -1.9457, -0.5936, -1.5742, -0.7035,
          0.0147, -0.1035, -0.0703, -1.7010,  0.0373,  0.0219,  0.0431, -0.1430,
          0.1689,  0.0871,  0.1769, -0.0143,  0.1362,  0.1066,  0.0460,  0.0404,
          0.1195,  0.1496, -0.1528,  0.1267, -0.6485, -0.1883, -0.2976, -0.1453,
          0.0433,  0.1469,  0.0229, -0.0625,  0.0240,  0.0043,  0.0576, -0.2290,
         -0.2196,  0.1268, -0.2680, -0.8048,  0.2683, -0.1672,  0.0507, -1.0545,
          1.0142,  0.6047,  1.0940, -0.2682, -0.2953, -0.0989,  0.5184, -0.5852,
          0.1011,  0.2480, -0.1553, -0.2641, -0.1969,  0.0498,  0.5157,  0.0948,
          0.1370,  0.1936,  0.3755, -0.0169, -0.3666,  0.2404,  0.2830,  0.1103]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
830000 特征值优化 tensor(0.7370, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.3652e-01, -2.2880e-01, -8.3039e-01,  4.0778e-02, -1.9178e+00,
         -5.7461e-01, -1.5744e+00, -7.0627e-01,  1.4770e-02, -9.8357e-02,
         -7.0874e-02, -1.7092e+00,  3.7931e-02, -4.3515e-02, -5.7731e-02,
         -7.3746e-02,  1.9862e-01,  1.1749e-01,  1.6477e-01,  2.5889e-02,
          1.3702e-01,  1.0675e-01,  2.5175e-02,  8.0157e-02,  1.0541e-01,
          1.4359e-01, -1.5314e-01,  1.2930e-01, -6.4834e-01, -1.8930e-01,
         -3.0032e-01, -1.5294e-01,  3.1391e-02,  1.4741e-01,  4.8273e-02,
         -1.6258e-02,  1.2023e-02, -1.3763e-04,  5.7989e-02, -2.2876e-01,
         -2.1375e-01,  1.2464e-01, -2.5612e-01, -8.1070e-01,  2.6344e-01,
         -1.7746e-01,  5.7562e-02, -1.0484e+00,  1.0115e+00,  6.0216e-01,
          1.0965e+00, -2.6824e-01, -3.4383e-01, -8.2830e-02,  4.9801e-01,
         -5.9375e-01,  1.2561e-01,  2.2931e-01, -1.6159e-01, -2.5928e-01,
         -2.0087e-01,  5.0489e-02,  5.4628e-01,  8.2435e-02,  1.1569e-01,
          1.9987e-01,  3.9412e-01, -2.7206e-02, -3.5970e-01,  2.4271e-01,
          2.6497e-01,  1.2633e-01]], device='cuda:0') tensor(0.2061, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
831000 特征值优化 tensor(0.7354, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3158, -0.2286, -0.8293,  0.0468, -1.9377, -0.5721, -1.5894, -0.7220,
          0.0208, -0.0895, -0.0487, -1.7231,  0.0378, -0.0594, -0.0589, -0.0484,
          0.2041,  0.1365,  0.1752,  0.0261,  0.1363,  0.1079,  0.0169,  0.0976,
          0.1097,  0.1403, -0.1624,  0.1379, -0.6513, -0.1887, -0.3045, -0.1505,
          0.0286,  0.1472,  0.0402, -0.0118,  0.0073,  0.0031,  0.0576, -0.2285,
         -0.2115,  0.1250, -0.2648, -0.8099,  0.2690, -0.1569,  0.0431, -1.0567,
          1.0181,  0.6036,  1.0978, -0.2681, -0.3327, -0.0930,  0.5025, -0.5863,
          0.1207,  0.2315, -0.1576, -0.2502, -0.2114,  0.0472,  0.5523,  0.0770,
          0.1329,  0.1909,  0.3880, -0.0255, -0.3505,  0.2493,  0.2476,  0.1339]],
       device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
832000 特征值优化 tensor(0.7448, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3290, -0.2403, -0.8204,  0.0568, -1.9090, -0.5853, -1.6032, -0.6842,
          0.0244, -0.0962, -0.0828, -1.7217,  0.0396,  0.0191,  0.0023, -0.1078,
          0.1560,  0.0877,  0.1806,  0.0113,  0.1390,  0.1081,  0.0191,  0.0598,
          0.1104,  0.1422, -0.1570,  0.1412, -0.6491, -0.1887, -0.2979, -0.1536,
          0.0418,  0.1469,  0.0412, -0.0248,  0.0102,  0.0023,  0.0546, -0.2274,
         -0.2107,  0.1290, -0.2550, -0.8097,  0.2604, -0.1441,  0.0333, -1.0614,
          1.0152,  0.6072,  1.0965, -0.2687, -0.3408, -0.0817,  0.5062, -0.5794,
          0.0800,  0.2570, -0.1626, -0.2507, -0.1964,  0.0433,  0.5179,  0.0886,
          0.1400,  0.1918,  0.3789, -0.0209, -0.3473,  0.2508,  0.2679,  0.1174]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
833000 特征值优化 tensor(0.7360, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.1757e-01, -2.2435e-01, -8.2651e-01,  4.5923e-02, -1.9459e+00,
         -5.7701e-01, -1.5935e+00, -7.0151e-01,  2.9350e-02, -9.4402e-02,
         -7.2395e-02, -1.7280e+00,  3.8574e-02, -5.7978e-02, -6.3230e-02,
         -5.5667e-02,  2.3367e-01,  1.3741e-01,  1.5683e-01,  1.4581e-02,
          1.3739e-01,  1.0727e-01,  5.2762e-03,  1.0749e-01,  1.1352e-01,
          1.4872e-01, -1.5670e-01,  1.3524e-01, -6.4969e-01, -1.8879e-01,
         -3.0504e-01, -1.4382e-01,  2.6653e-02,  1.4769e-01,  3.8346e-02,
         -1.4929e-02,  6.4892e-03,  5.0364e-04,  4.9798e-02, -2.2789e-01,
         -2.0788e-01,  1.3248e-01, -2.6585e-01, -8.0881e-01,  2.6941e-01,
         -1.5382e-01,  3.6355e-02, -1.0544e+00,  1.0157e+00,  6.0566e-01,
          1.0965e+00, -2.6803e-01, -3.0135e-01, -1.1142e-01,  4.9654e-01,
         -5.9305e-01,  1.2749e-01,  2.2879e-01, -1.7386e-01, -2.5671e-01,
         -2.1361e-01,  4.3049e-02,  5.5409e-01,  8.0347e-02,  1.3233e-01,
          1.8977e-01,  3.7454e-01, -2.4437e-02, -3.4902e-01,  2.4446e-01,
          2.6151e-01,  1.2704e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
834000 特征值优化 tensor(0.7482, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2590e-01, -2.4021e-01, -8.2686e-01,  6.1780e-02, -1.9288e+00,
         -5.9152e-01, -1.5948e+00, -7.0359e-01,  2.0185e-02, -1.0238e-01,
         -8.4879e-02, -1.6927e+00,  3.7191e-02, -3.1065e-02,  8.6453e-04,
         -4.9819e-02,  1.8529e-01,  1.2042e-01,  1.5251e-01,  1.9237e-03,
          1.3632e-01,  1.0717e-01,  6.5087e-02,  8.8532e-02,  9.4088e-02,
          1.4693e-01, -1.5347e-01,  1.0407e-01, -6.4809e-01, -1.8978e-01,
         -2.9978e-01, -1.4196e-01,  3.4983e-02,  1.4714e-01,  3.4281e-02,
         -3.5396e-02,  2.0830e-02,  1.4124e-02,  4.6138e-02, -2.2545e-01,
         -2.2507e-01,  1.3046e-01, -2.5587e-01, -8.1211e-01,  2.6973e-01,
         -1.4438e-01,  4.0564e-02, -1.0506e+00,  1.0137e+00,  6.0540e-01,
          1.0906e+00, -2.7292e-01, -2.9903e-01, -1.0955e-01,  5.1816e-01,
         -5.8287e-01,  1.0023e-01,  2.4595e-01, -1.5484e-01, -2.5850e-01,
         -2.0403e-01,  5.7251e-02,  5.3420e-01,  7.7921e-02,  1.3199e-01,
          1.8619e-01,  3.6993e-01, -1.5837e-02, -3.5942e-01,  2.3337e-01,
          2.7164e-01,  1.1200e-01]], device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
835000 特征值优化 tensor(0.7301, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2084e-01, -2.2585e-01, -8.2302e-01,  4.0754e-02, -1.9510e+00,
         -5.9053e-01, -1.5721e+00, -6.9180e-01,  3.1119e-02, -1.1095e-01,
         -8.9821e-02, -1.7069e+00,  3.6029e-02,  3.2789e-02,  6.0122e-02,
         -1.8095e-01,  1.4839e-01,  7.2297e-02,  1.8376e-01, -1.0778e-02,
          1.3684e-01,  1.0729e-01,  4.1976e-02,  1.8233e-02,  1.5064e-01,
          1.6854e-01, -1.3495e-01,  1.2045e-01, -6.5088e-01, -1.8758e-01,
         -3.0228e-01, -1.4668e-01,  4.6350e-02,  1.4726e-01,  3.8019e-03,
         -7.1462e-02,  2.4628e-02, -5.8471e-04,  5.6582e-02, -2.3016e-01,
         -2.1869e-01,  1.2962e-01, -2.6681e-01, -8.0276e-01,  2.6475e-01,
         -1.8469e-01,  5.9730e-02, -1.0600e+00,  1.0178e+00,  6.0860e-01,
          1.0983e+00, -2.7106e-01, -3.0658e-01, -9.9810e-02,  5.1412e-01,
         -5.9466e-01,  9.0998e-02,  2.5493e-01, -1.4542e-01, -2.5632e-01,
         -1.8239e-01,  4.2021e-02,  5.0980e-01,  1.0317e-01,  1.4803e-01,
          1.8653e-01,  3.7812e-01, -2.3852e-02, -3.6913e-01,  2.3874e-01,
          2.6989e-01,  1.2122e-01]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
836000 特征值优化 tensor(0.7387, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2819e-01, -2.3261e-01, -8.3053e-01,  4.6304e-02, -1.9481e+00,
         -5.7451e-01, -1.5863e+00, -6.8667e-01,  2.2151e-02, -1.1222e-01,
         -1.0934e-01, -1.7253e+00,  3.9679e-02, -1.4752e-02, -2.0867e-02,
         -7.9821e-02,  1.9984e-01,  1.3186e-01,  1.6478e-01,  1.9699e-02,
          1.3852e-01,  1.0760e-01, -1.4193e-02,  7.5347e-02,  1.2424e-01,
          1.4769e-01, -1.6595e-01,  1.4884e-01, -6.5218e-01, -1.8948e-01,
         -3.0469e-01, -1.4407e-01,  3.1629e-02,  1.4709e-01,  4.2386e-02,
         -1.7825e-02,  6.6142e-03,  1.8593e-04,  5.4322e-02, -2.2689e-01,
         -2.0807e-01,  1.2907e-01, -2.5678e-01, -8.1049e-01,  2.6227e-01,
         -1.4937e-01,  3.5105e-02, -1.0574e+00,  1.0181e+00,  6.0517e-01,
          1.0995e+00, -2.6873e-01, -3.1110e-01, -1.0415e-01,  4.9659e-01,
         -5.9714e-01,  1.1196e-01,  2.3700e-01, -1.6138e-01, -2.5003e-01,
         -2.1095e-01,  3.6811e-02,  5.4494e-01,  8.9780e-02,  1.3595e-01,
          1.9708e-01,  3.9148e-01, -2.4555e-02, -3.3596e-01,  2.4395e-01,
          2.5112e-01,  1.2442e-01]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
837000 特征值优化 tensor(0.7425, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.3165e-01, -2.4516e-01, -8.2055e-01,  5.6058e-02, -1.9315e+00,
         -5.8639e-01, -1.5724e+00, -6.9240e-01,  9.1191e-03, -1.0440e-01,
         -1.0867e-01, -1.7066e+00,  3.7685e-02,  1.7974e-03,  1.8476e-02,
         -7.4155e-02,  2.0224e-01,  1.1078e-01,  1.5590e-01, -4.2808e-03,
          1.3673e-01,  1.0669e-01,  3.9381e-02,  6.5716e-02,  1.1075e-01,
          1.5582e-01, -1.4720e-01,  1.2212e-01, -6.4838e-01, -1.8748e-01,
         -2.9600e-01, -1.4230e-01,  3.4936e-02,  1.4757e-01,  2.4886e-02,
         -3.7930e-02,  3.2134e-02,  7.7366e-03,  4.4877e-02, -2.2725e-01,
         -2.2757e-01,  1.3592e-01, -2.5770e-01, -8.0942e-01,  2.7003e-01,
         -1.4871e-01,  4.2386e-02, -1.0551e+00,  1.0133e+00,  6.0697e-01,
          1.0913e+00, -2.6887e-01, -2.7888e-01, -1.0988e-01,  5.1785e-01,
         -5.8234e-01,  9.9933e-02,  2.4554e-01, -1.5968e-01, -2.6587e-01,
         -1.8823e-01,  5.5129e-02,  5.2160e-01,  8.9666e-02,  1.4609e-01,
          1.8362e-01,  3.6633e-01, -1.7733e-02, -3.5414e-01,  2.2428e-01,
          2.8309e-01,  1.0973e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
838000 特征值优化 tensor(0.7450, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2379e-01, -2.3740e-01, -8.2345e-01,  5.5418e-02, -1.9478e+00,
         -5.7602e-01, -1.6047e+00, -6.7921e-01,  1.5599e-02, -1.1645e-01,
         -8.8892e-02, -1.7061e+00,  3.8770e-02, -2.8097e-03, -9.7504e-03,
         -1.1873e-01,  1.6134e-01,  8.4659e-02,  1.7453e-01,  1.2891e-02,
          1.3844e-01,  1.0806e-01,  3.2821e-02,  6.3166e-02,  1.1139e-01,
          1.4106e-01, -1.5382e-01,  1.3745e-01, -6.4956e-01, -1.8837e-01,
         -3.0243e-01, -1.4683e-01,  3.8435e-02,  1.4639e-01,  5.0613e-02,
         -3.1699e-02,  1.0127e-02,  1.2799e-03,  5.1454e-02, -2.2811e-01,
         -2.1009e-01,  1.3189e-01, -2.5773e-01, -8.0885e-01,  2.6267e-01,
         -1.4254e-01,  3.3243e-02, -1.0593e+00,  1.0185e+00,  6.0532e-01,
          1.0959e+00, -2.6888e-01, -3.2294e-01, -9.7911e-02,  5.0439e-01,
         -5.8072e-01,  9.6353e-02,  2.4841e-01, -1.6958e-01, -2.5700e-01,
         -1.9950e-01,  4.1893e-02,  5.1546e-01,  8.9733e-02,  1.2532e-01,
          2.0187e-01,  3.8215e-01, -2.1902e-02, -3.4108e-01,  2.4947e-01,
          2.6521e-01,  1.1696e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
839000 特征值优化 tensor(0.7405, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2989e-01, -2.4236e-01, -8.2988e-01,  4.6532e-02, -1.9158e+00,
         -5.6815e-01, -1.6338e+00, -7.1760e-01,  1.5875e-02, -1.1165e-01,
         -4.8197e-02, -1.7120e+00,  3.9220e-02, -2.0352e-02, -3.5776e-02,
         -9.9694e-02,  1.7150e-01,  8.5938e-02,  1.8376e-01,  1.3713e-03,
          1.3786e-01,  1.0732e-01,  9.3412e-02,  6.5240e-02,  1.1413e-01,
          1.4226e-01, -1.5247e-01,  1.3757e-01, -6.5083e-01, -1.8871e-01,
         -2.9599e-01, -1.4899e-01,  3.7283e-02,  1.4705e-01,  4.0549e-02,
         -1.9528e-02,  8.1892e-03,  9.7610e-03,  5.2704e-02, -2.2874e-01,
         -2.1213e-01,  1.3122e-01, -2.5804e-01, -8.1216e-01,  2.6852e-01,
         -1.4117e-01,  3.3754e-02, -1.0541e+00,  1.0164e+00,  6.0455e-01,
          1.0976e+00, -2.6908e-01, -3.2883e-01, -8.6466e-02,  5.2102e-01,
         -5.7282e-01,  1.0155e-01,  2.4074e-01, -1.6415e-01, -2.5579e-01,
         -1.9607e-01,  4.1960e-02,  5.2492e-01,  8.5136e-02,  1.4021e-01,
          1.9101e-01,  3.8045e-01, -2.2286e-02, -3.4954e-01,  2.4065e-01,
          2.6437e-01,  1.2295e-01]], device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
840000 特征值优化 tensor(0.7642, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3782, -0.2113, -0.8242,  0.0519, -1.9416, -0.5848, -1.6153, -0.7342,
          0.0328, -0.0968, -0.0281, -1.7139,  0.0373, -0.0580, -0.0360, -0.0480,
          0.2349,  0.1278,  0.1488,  0.0071,  0.1371,  0.1065,  0.0354,  0.0996,
          0.0940,  0.1433, -0.1483,  0.1108, -0.6469, -0.1868, -0.3059, -0.1537,
          0.0360,  0.1493,  0.0405, -0.0167,  0.0156,  0.0135,  0.0465, -0.2241,
         -0.2209,  0.1288, -0.2361, -0.8095,  0.2759, -0.1467,  0.0314, -1.0526,
          1.0179,  0.6008,  1.0938, -0.2672, -0.3227, -0.1049,  0.5274, -0.5777,
          0.1044,  0.2443, -0.1520, -0.2477, -0.1999,  0.0531,  0.5468,  0.0609,
          0.1389,  0.1917,  0.3786, -0.0196, -0.3663,  0.2488,  0.2472,  0.1243]],
       device='cuda:0') tensor(0.2038, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
841000 特征值优化 tensor(0.7393, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2880e-01, -2.3600e-01, -8.2766e-01,  4.8036e-02, -1.9267e+00,
         -5.7849e-01, -1.5971e+00, -6.9576e-01,  2.4783e-02, -1.0471e-01,
         -7.2459e-02, -1.7271e+00,  3.8624e-02, -1.2273e-02, -2.7733e-02,
         -9.0066e-02,  1.7628e-01,  1.0822e-01,  1.7761e-01,  1.4591e-02,
          1.3786e-01,  1.0791e-01,  1.0825e-02,  8.4925e-02,  1.1479e-01,
          1.4156e-01, -1.6024e-01,  1.3939e-01, -6.5110e-01, -1.8904e-01,
         -2.9998e-01, -1.4980e-01,  3.6742e-02,  1.4702e-01,  3.8078e-02,
         -1.5730e-02,  6.4446e-03,  1.4476e-04,  5.0438e-02, -2.2718e-01,
         -2.0657e-01,  1.3265e-01, -2.6034e-01, -8.0748e-01,  2.6683e-01,
         -1.4976e-01,  3.6868e-02, -1.0582e+00,  1.0169e+00,  6.0556e-01,
          1.1001e+00, -2.6969e-01, -3.3229e-01, -8.7891e-02,  4.9889e-01,
         -5.8260e-01,  1.0098e-01,  2.4445e-01, -1.5886e-01, -2.5042e-01,
         -2.0482e-01,  3.9890e-02,  5.3394e-01,  8.9526e-02,  1.5317e-01,
          1.8493e-01,  3.7828e-01, -2.2649e-02, -3.5338e-01,  2.5058e-01,
          2.5833e-01,  1.2387e-01]], device='cuda:0') tensor(0.2041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
842000 特征值优化 tensor(0.7642, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3401, -0.2095, -0.8379,  0.0646, -1.9433, -0.5930, -1.5927, -0.6957,
          0.0291, -0.1077, -0.0974, -1.7070,  0.0369, -0.0426, -0.0447, -0.0280,
          0.2205,  0.1338,  0.1292,  0.0096,  0.1372,  0.1055, -0.0126,  0.0984,
          0.1051,  0.1428, -0.1558,  0.1240, -0.6471, -0.1861, -0.3094, -0.1453,
          0.0371,  0.1499,  0.0434, -0.0205,  0.0213,  0.0045,  0.0452, -0.2236,
         -0.2246,  0.1312, -0.2520, -0.8063,  0.2727, -0.1462,  0.0321, -1.0515,
          1.0170,  0.6066,  1.0977, -0.2723, -0.3013, -0.1200,  0.5070, -0.5941,
          0.1047,  0.2425, -0.1511, -0.2465, -0.2012,  0.0546,  0.5459,  0.0742,
          0.1346,  0.1912,  0.3778, -0.0194, -0.3506,  0.2400,  0.2443,  0.1249]],
       device='cuda:0') tensor(0.2120, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
843000 特征值优化 tensor(0.7328, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2040e-01, -2.5118e-01, -8.2230e-01,  4.5085e-02, -1.9277e+00,
         -5.9396e-01, -1.5843e+00, -6.9044e-01,  1.8720e-02, -1.1585e-01,
         -7.2019e-02, -1.7206e+00,  3.7695e-02,  7.0038e-02,  2.2421e-02,
         -1.5943e-01,  1.6723e-01,  8.3137e-02,  2.1290e-01, -2.6096e-02,
          1.3625e-01,  1.0688e-01,  6.8659e-02,  6.6608e-02,  1.3641e-01,
          1.6156e-01, -1.4694e-01,  1.1991e-01, -6.4937e-01, -1.8832e-01,
         -2.9842e-01, -1.4750e-01,  4.7060e-02,  1.4633e-01,  1.4684e-02,
         -6.4205e-02,  2.1077e-02,  1.6279e-03,  4.8884e-02, -2.2630e-01,
         -2.1350e-01,  1.3309e-01, -2.6683e-01, -8.0261e-01,  2.6909e-01,
         -1.5918e-01,  4.8634e-02, -1.0563e+00,  1.0133e+00,  6.0926e-01,
          1.0976e+00, -2.7048e-01, -3.2183e-01, -9.0806e-02,  5.1382e-01,
         -5.8521e-01,  9.1850e-02,  2.5273e-01, -1.6442e-01, -2.5984e-01,
         -1.8373e-01,  3.7389e-02,  5.0978e-01,  1.0180e-01,  1.5330e-01,
          1.8586e-01,  3.7070e-01, -1.6650e-02, -3.6745e-01,  2.4546e-01,
          2.8227e-01,  1.0701e-01]], device='cuda:0') tensor(0.2034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
844000 特征值优化 tensor(0.7809, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3280, -0.2320, -0.8217,  0.0443, -1.9255, -0.5760, -1.6169, -0.7285,
          0.0269, -0.1251, -0.0393, -1.7061,  0.0340,  0.0294,  0.0611, -0.1570,
          0.1559,  0.0743,  0.1955, -0.0208,  0.1343,  0.1061,  0.0240,  0.0355,
          0.1280,  0.1528, -0.1444,  0.1205, -0.6503, -0.1878, -0.2936, -0.1534,
          0.0494,  0.1496,  0.0241, -0.0675,  0.0225,  0.0107,  0.0511, -0.2276,
         -0.2192,  0.1323, -0.2686, -0.7966,  0.2742, -0.1687,  0.0519, -1.0568,
          1.0186,  0.6022,  1.0973, -0.2699, -0.3327, -0.0808,  0.5449, -0.5715,
          0.0880,  0.2527, -0.1544, -0.2569, -0.1728,  0.0388,  0.5018,  0.0881,
          0.1477,  0.1966,  0.3778, -0.0195, -0.3810,  0.2510,  0.2689,  0.1129]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
845000 特征值优化 tensor(0.7364, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3240, -0.2310, -0.8343,  0.0407, -1.9618, -0.5600, -1.5977, -0.7107,
          0.0383, -0.1095, -0.0874, -1.7459,  0.0393, -0.0375, -0.0249, -0.0544,
          0.2332,  0.1507,  0.1682,  0.0212,  0.1377,  0.1074,  0.0417,  0.0951,
          0.1164,  0.1479, -0.1494,  0.1414, -0.6528, -0.1890, -0.3111, -0.1452,
          0.0331,  0.1475,  0.0308, -0.0091,  0.0074,  0.0022,  0.0502, -0.2260,
         -0.2090,  0.1329, -0.2605, -0.8081,  0.2636, -0.1527,  0.0374, -1.0550,
          1.0197,  0.6053,  1.1003, -0.2692, -0.3219, -0.1071,  0.5062, -0.5937,
          0.1085,  0.2348, -0.1577, -0.2435, -0.2040,  0.0354,  0.5486,  0.0850,
          0.1428,  0.1904,  0.3903, -0.0297, -0.3468,  0.2467,  0.2435,  0.1322]],
       device='cuda:0') tensor(0.2051, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
846000 特征值优化 tensor(0.7318, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2008e-01, -2.4251e-01, -8.2417e-01,  4.0883e-02, -1.9376e+00,
         -5.8518e-01, -1.6044e+00, -7.0734e-01,  4.1000e-02, -1.2252e-01,
         -5.3766e-02, -1.7246e+00,  3.8360e-02,  6.2899e-02,  3.0079e-02,
         -1.6640e-01,  1.6014e-01,  8.3359e-02,  2.1705e-01, -2.4067e-02,
          1.3649e-01,  1.0659e-01,  1.8510e-02,  1.8220e-02,  1.3070e-01,
          1.5672e-01, -1.4550e-01,  1.2962e-01, -6.4936e-01, -1.8813e-01,
         -2.9500e-01, -1.5076e-01,  5.4093e-02,  1.4671e-01, -8.2036e-04,
         -6.2527e-02,  2.2103e-02,  6.4978e-03,  4.9342e-02, -2.2733e-01,
         -2.1765e-01,  1.3555e-01, -2.6755e-01, -8.0334e-01,  2.6917e-01,
         -1.6051e-01,  4.6881e-02, -1.0552e+00,  1.0156e+00,  6.0549e-01,
          1.0971e+00, -2.7003e-01, -3.1791e-01, -8.1864e-02,  5.3106e-01,
         -5.8243e-01,  8.5480e-02,  2.5302e-01, -1.4680e-01, -2.5311e-01,
         -1.7401e-01,  3.8805e-02,  5.0084e-01,  1.0025e-01,  1.6181e-01,
          1.8406e-01,  3.7737e-01, -2.4798e-02, -3.8170e-01,  2.4725e-01,
          2.6683e-01,  1.1845e-01]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
847000 特征值优化 tensor(0.7355, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3269, -0.2382, -0.8308,  0.0465, -1.9832, -0.5776, -1.5817, -0.6939,
          0.0334, -0.1171, -0.0780, -1.7240,  0.0373, -0.0885, -0.0598, -0.0626,
          0.2181,  0.1479,  0.1564,  0.0469,  0.1356,  0.1084,  0.0320,  0.0877,
          0.0998,  0.1490, -0.1548,  0.1330, -0.6491, -0.1895, -0.3070, -0.1402,
          0.0199,  0.1473,  0.0460, -0.0099,  0.0127, -0.0031,  0.0475, -0.2266,
         -0.2112,  0.1341, -0.2590, -0.8088,  0.2666, -0.1698,  0.0569, -1.0545,
          1.0129,  0.6044,  1.0972, -0.2685, -0.2747, -0.1262,  0.4865, -0.6003,
          0.1320,  0.2255, -0.1625, -0.2460, -0.2042,  0.0507,  0.5608,  0.0769,
          0.1388,  0.1916,  0.3853, -0.0287, -0.3522,  0.2358,  0.2291,  0.1387]],
       device='cuda:0') tensor(0.2036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
848000 特征值优化 tensor(0.7308, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3116, -0.2289, -0.8162,  0.0490, -1.9556, -0.6078, -1.5706, -0.6836,
          0.0170, -0.1436, -0.0706, -1.6860,  0.0369,  0.0456,  0.0311, -0.1829,
          0.1594,  0.0597,  0.2036, -0.0170,  0.1374,  0.1065,  0.0867,  0.0607,
          0.1322,  0.1531, -0.1403,  0.1174, -0.6475, -0.1882, -0.3009, -0.1485,
          0.0486,  0.1461,  0.0228, -0.0732,  0.0230, -0.0022,  0.0502, -0.2286,
         -0.2164,  0.1369, -0.2699, -0.8039,  0.2691, -0.1674,  0.0478, -1.0578,
          1.0136,  0.6067,  1.0961, -0.2713, -0.3159, -0.0956,  0.5162, -0.5957,
          0.0939,  0.2566, -0.1579, -0.2609, -0.1893,  0.0426,  0.5011,  0.1066,
          0.1505,  0.1963,  0.3779, -0.0192, -0.3741,  0.2393,  0.2710,  0.1063]],
       device='cuda:0') tensor(0.2056, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
849000 特征值优化 tensor(0.7421, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.3729e-01, -2.4566e-01, -8.2516e-01,  4.9557e-02, -1.9359e+00,
         -5.8406e-01, -1.6210e+00, -6.9413e-01,  8.3554e-03, -1.3268e-01,
         -4.9495e-02, -1.6965e+00,  3.9160e-02, -1.8332e-02, -1.3175e-02,
         -1.0192e-01,  1.6938e-01,  9.6460e-02,  1.7632e-01,  2.5209e-02,
          1.3785e-01,  1.0685e-01,  4.6535e-02,  8.2288e-02,  1.0639e-01,
          1.4169e-01, -1.4472e-01,  1.2180e-01, -6.4881e-01, -1.8823e-01,
         -3.0179e-01, -1.5211e-01,  3.7478e-02,  1.4739e-01,  4.6186e-02,
         -2.2730e-02,  6.6647e-03,  1.8978e-03,  5.2326e-02, -2.2780e-01,
         -2.0658e-01,  1.3219e-01, -2.5148e-01, -8.1335e-01,  2.6551e-01,
         -1.4945e-01,  4.0447e-02, -1.0548e+00,  1.0186e+00,  6.0140e-01,
          1.0955e+00, -2.6809e-01, -3.4054e-01, -8.7033e-02,  5.0932e-01,
         -5.8042e-01,  1.0764e-01,  2.4225e-01, -1.6761e-01, -2.5245e-01,
         -1.9781e-01,  4.2741e-02,  5.2260e-01,  8.9894e-02,  1.4150e-01,
          1.9868e-01,  3.9282e-01, -2.3623e-02, -3.5363e-01,  2.4832e-01,
          2.4616e-01,  1.2361e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
850000 特征值优化 tensor(0.7355, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.1561e-01, -2.2128e-01, -8.2721e-01,  4.5789e-02, -1.9637e+00,
         -5.8125e-01, -1.5994e+00, -6.9160e-01,  3.3823e-02, -1.1776e-01,
         -7.0273e-02, -1.7253e+00,  3.8566e-02, -7.1592e-02, -5.9821e-02,
         -5.8055e-02,  2.4280e-01,  1.3654e-01,  1.6258e-01,  8.6639e-03,
          1.3681e-01,  1.0768e-01,  4.9248e-02,  9.0451e-02,  1.0506e-01,
          1.4737e-01, -1.4834e-01,  1.3291e-01, -6.4891e-01, -1.8892e-01,
         -3.0755e-01, -1.4221e-01,  2.2304e-02,  1.4723e-01,  3.7244e-02,
         -1.3982e-02,  8.0371e-03, -1.1956e-03,  4.4292e-02, -2.2736e-01,
         -2.0863e-01,  1.3867e-01, -2.6595e-01, -8.0759e-01,  2.6999e-01,
         -1.5505e-01,  3.6993e-02, -1.0543e+00,  1.0125e+00,  6.0620e-01,
          1.0991e+00, -2.7042e-01, -2.9588e-01, -1.1536e-01,  4.9130e-01,
         -5.9858e-01,  1.2791e-01,  2.2906e-01, -1.6339e-01, -2.4962e-01,
         -2.0298e-01,  4.1592e-02,  5.5589e-01,  8.0067e-02,  1.4671e-01,
          1.8654e-01,  3.7602e-01, -2.6915e-02, -3.4936e-01,  2.3812e-01,
          2.4175e-01,  1.3256e-01]], device='cuda:0') tensor(0.2067, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
851000 特征值优化 tensor(0.7332, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3241, -0.2312, -0.8228,  0.0424, -1.9354, -0.5804, -1.5947, -0.6992,
          0.0253, -0.1331, -0.0590, -1.7132,  0.0367,  0.0323,  0.0456, -0.1476,
          0.1559,  0.0843,  0.1854, -0.0220,  0.1358,  0.1066,  0.0248,  0.0369,
          0.1321,  0.1541, -0.1413,  0.1245, -0.6493, -0.1880, -0.2922, -0.1501,
          0.0466,  0.1473,  0.0092, -0.0608,  0.0225,  0.0033,  0.0484, -0.2271,
         -0.2189,  0.1369, -0.2665, -0.8028,  0.2673, -0.1738,  0.0563, -1.0541,
          1.0156,  0.6045,  1.0968, -0.2694, -0.3062, -0.0872,  0.5236, -0.5871,
          0.0910,  0.2494, -0.1516, -0.2546, -0.1803,  0.0480,  0.5116,  0.0962,
          0.1641,  0.1851,  0.3769, -0.0208, -0.3826,  0.2425,  0.2624,  0.1171]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
852000 特征值优化 tensor(0.7378, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2746e-01, -2.3063e-01, -8.2846e-01,  4.5562e-02, -1.9375e+00,
         -5.7479e-01, -1.5997e+00, -6.9709e-01,  2.6422e-02, -1.2144e-01,
         -6.2667e-02, -1.7233e+00,  3.8874e-02, -3.6803e-02, -5.5121e-02,
         -7.7110e-02,  1.9849e-01,  1.3017e-01,  1.6087e-01,  1.6724e-02,
          1.3810e-01,  1.0736e-01,  4.3715e-02,  9.6287e-02,  1.1147e-01,
          1.4700e-01, -1.4923e-01,  1.3552e-01, -6.4945e-01, -1.8905e-01,
         -3.0163e-01, -1.4868e-01,  3.1456e-02,  1.4756e-01,  4.3023e-02,
         -1.2317e-02,  9.4623e-03,  7.5575e-04,  4.4288e-02, -2.2615e-01,
         -2.1109e-01,  1.3892e-01, -2.6190e-01, -8.0635e-01,  2.6562e-01,
         -1.5215e-01,  3.7322e-02, -1.0538e+00,  1.0128e+00,  6.0604e-01,
          1.0990e+00, -2.7027e-01, -3.2704e-01, -9.4441e-02,  5.0238e-01,
         -5.9529e-01,  1.1780e-01,  2.3330e-01, -1.6700e-01, -2.5136e-01,
         -1.9815e-01,  4.3802e-02,  5.4390e-01,  8.3686e-02,  1.5338e-01,
          1.8505e-01,  3.7510e-01, -2.3854e-02, -3.6107e-01,  2.4212e-01,
          2.4798e-01,  1.2802e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
853000 特征值优化 tensor(0.7653, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3478, -0.1884, -0.8284,  0.0536, -1.9552, -0.5920, -1.6008, -0.6918,
          0.0189, -0.1307, -0.0762, -1.7035,  0.0368, -0.0460, -0.0414, -0.0353,
          0.2430,  0.1436,  0.1208,  0.0060,  0.1374,  0.1064,  0.0441,  0.0859,
          0.1043,  0.1426, -0.1470,  0.1222, -0.6450, -0.1886, -0.3121, -0.1451,
          0.0363,  0.1490,  0.0473, -0.0273,  0.0190,  0.0036,  0.0386, -0.2238,
         -0.2211,  0.1411, -0.2476, -0.8052,  0.2711, -0.1566,  0.0343, -1.0514,
          1.0123,  0.6019,  1.0956, -0.2685, -0.2961, -0.1225,  0.5058, -0.5962,
          0.1178,  0.2391, -0.1676, -0.2516, -0.1955,  0.0538,  0.5453,  0.0722,
          0.1332,  0.1972,  0.3741, -0.0225, -0.3613,  0.2443,  0.2502,  0.1205]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
854000 特征值优化 tensor(0.7459, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2223e-01, -2.3983e-01, -8.2217e-01,  5.5521e-02, -1.9124e+00,
         -5.8049e-01, -1.6176e+00, -6.6201e-01,  1.2567e-02, -1.4351e-01,
         -7.8560e-02, -1.7141e+00,  3.7592e-02,  2.7150e-02, -1.5569e-02,
         -1.1888e-01,  1.4881e-01,  8.7397e-02,  1.7835e-01,  1.0133e-02,
          1.3773e-01,  1.0816e-01,  3.6323e-02,  5.6186e-02,  1.1309e-01,
          1.4625e-01, -1.5385e-01,  1.3902e-01, -6.4976e-01, -1.8871e-01,
         -2.9514e-01, -1.5099e-01,  4.2198e-02,  1.4679e-01,  4.4777e-02,
         -2.7958e-02,  9.5316e-03,  1.7174e-03,  4.3425e-02, -2.2568e-01,
         -2.1472e-01,  1.4046e-01, -2.5599e-01, -8.0866e-01,  2.6037e-01,
         -1.4158e-01,  3.3688e-02, -1.0582e+00,  1.0146e+00,  6.0765e-01,
          1.0955e+00, -2.6717e-01, -3.2565e-01, -8.6155e-02,  5.0310e-01,
         -5.8871e-01,  7.8317e-02,  2.5722e-01, -1.6584e-01, -2.5057e-01,
         -1.9444e-01,  4.5488e-02,  5.0860e-01,  9.7934e-02,  1.4654e-01,
          1.9754e-01,  3.8699e-01, -2.3746e-02, -3.5493e-01,  2.4604e-01,
          2.6007e-01,  1.1387e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
855000 特征值优化 tensor(0.7366, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2443e-01, -2.3911e-01, -8.2859e-01,  4.2605e-02, -1.9648e+00,
         -5.6909e-01, -1.6140e+00, -6.9165e-01,  3.1867e-02, -1.2210e-01,
         -3.9118e-02, -1.7344e+00,  3.8264e-02, -8.6618e-02, -4.3788e-02,
         -7.7560e-02,  1.8093e-01,  1.2842e-01,  1.5465e-01,  4.2920e-02,
          1.3733e-01,  1.0735e-01,  4.4980e-02,  1.0869e-01,  1.0592e-01,
          1.4716e-01, -1.4694e-01,  1.3149e-01, -6.5006e-01, -1.8884e-01,
         -3.0768e-01, -1.4715e-01,  2.0362e-02,  1.4735e-01,  3.8080e-02,
          2.1108e-03,  9.0514e-03, -1.9482e-03,  4.3494e-02, -2.2522e-01,
         -2.1031e-01,  1.3826e-01, -2.6044e-01, -8.1254e-01,  2.6705e-01,
         -1.5332e-01,  4.3171e-02, -1.0540e+00,  1.0147e+00,  6.0401e-01,
          1.0992e+00, -2.7023e-01, -3.0284e-01, -1.1068e-01,  4.9068e-01,
         -6.0081e-01,  1.1964e-01,  2.3082e-01, -1.6284e-01, -2.3992e-01,
         -1.9830e-01,  5.2337e-02,  5.5503e-01,  7.7167e-02,  1.5732e-01,
          1.8496e-01,  3.7988e-01, -2.5532e-02, -3.6324e-01,  2.3800e-01,
          2.2209e-01,  1.4076e-01]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
856000 特征值优化 tensor(0.7342, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3279, -0.2355, -0.8212,  0.0446, -1.9557, -0.5824, -1.5830, -0.6742,
          0.0186, -0.1454, -0.0747, -1.7066,  0.0376,  0.0341,  0.0456, -0.1484,
          0.1576,  0.0853,  0.1765, -0.0076,  0.1367,  0.1069,  0.0242,  0.0384,
          0.1301,  0.1550, -0.1389,  0.1224, -0.6496, -0.1878, -0.2979, -0.1475,
          0.0423,  0.1468,  0.0152, -0.0579,  0.0223, -0.0037,  0.0439, -0.2267,
         -0.2178,  0.1407, -0.2642, -0.8047,  0.2664, -0.1677,  0.0518, -1.0553,
          1.0136,  0.6068,  1.0959, -0.2693, -0.2952, -0.0968,  0.5032, -0.6015,
          0.0939,  0.2481, -0.1583, -0.2559, -0.1819,  0.0500,  0.5161,  0.1006,
          0.1657,  0.1852,  0.3765, -0.0222, -0.3804,  0.2386,  0.2589,  0.1173]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
857000 特征值优化 tensor(0.7379, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2796e-01, -2.3299e-01, -8.3233e-01,  5.0053e-02, -1.9445e+00,
         -5.6851e-01, -1.6211e+00, -6.7912e-01,  2.8139e-02, -1.4358e-01,
         -5.6475e-02, -1.7317e+00,  3.9621e-02, -3.0910e-02, -5.2940e-02,
         -1.0094e-01,  1.8293e-01,  1.2261e-01,  1.7037e-01,  1.8315e-02,
          1.3780e-01,  1.0740e-01,  3.9950e-02,  8.1321e-02,  1.1784e-01,
          1.4675e-01, -1.5015e-01,  1.3644e-01, -6.5115e-01, -1.8865e-01,
         -3.0430e-01, -1.5114e-01,  3.1526e-02,  1.4715e-01,  4.3299e-02,
         -1.4532e-02,  4.9616e-03, -9.1944e-04,  4.1613e-02, -2.2359e-01,
         -2.0837e-01,  1.3986e-01, -2.5582e-01, -8.1480e-01,  2.6614e-01,
         -1.5328e-01,  3.8448e-02, -1.0519e+00,  1.0136e+00,  6.0762e-01,
          1.0958e+00, -2.6830e-01, -3.3902e-01, -9.0497e-02,  4.9866e-01,
         -5.9891e-01,  9.7575e-02,  2.4359e-01, -1.6652e-01, -2.4474e-01,
         -1.9087e-01,  4.0962e-02,  5.3642e-01,  9.0772e-02,  1.5273e-01,
          1.9473e-01,  3.8544e-01, -2.4578e-02, -3.5794e-01,  2.4081e-01,
          2.4219e-01,  1.2084e-01]], device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
858000 特征值优化 tensor(0.7353, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2092e-01, -2.3650e-01, -8.2200e-01,  4.1420e-02, -1.9433e+00,
         -5.7294e-01, -1.6089e+00, -6.9933e-01,  3.4122e-02, -1.4071e-01,
         -4.5251e-02, -1.7295e+00,  3.7953e-02,  4.6542e-02,  3.6689e-02,
         -1.1319e-01,  1.6855e-01,  1.0911e-01,  1.7912e-01, -9.3002e-03,
          1.3727e-01,  1.0700e-01,  2.3359e-02,  4.0103e-02,  1.2372e-01,
          1.6303e-01, -1.3833e-01,  1.2076e-01, -6.5083e-01, -1.8769e-01,
         -2.9531e-01, -1.4812e-01,  4.5247e-02,  1.4808e-01, -1.7130e-03,
         -4.5703e-02,  2.6536e-02,  6.3045e-03,  4.0078e-02, -2.2432e-01,
         -2.2264e-01,  1.4175e-01, -2.6587e-01, -8.0728e-01,  2.6726e-01,
         -1.5814e-01,  4.4419e-02, -1.0574e+00,  1.0164e+00,  6.0860e-01,
          1.0987e+00, -2.7050e-01, -3.0625e-01, -8.8785e-02,  5.1928e-01,
         -5.8877e-01,  8.5803e-02,  2.4803e-01, -1.5272e-01, -2.4901e-01,
         -1.6420e-01,  4.7854e-02,  5.1270e-01,  9.2615e-02,  1.7938e-01,
          1.7876e-01,  3.7480e-01, -2.4319e-02, -3.9065e-01,  2.3811e-01,
          2.5227e-01,  1.2143e-01]], device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
859000 特征值优化 tensor(0.7371, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3246, -0.2342, -0.8274,  0.0487, -1.9430, -0.5775, -1.6016, -0.6883,
          0.0275, -0.1440, -0.0401, -1.7216,  0.0379, -0.0551, -0.0591, -0.0591,
          0.1847,  0.1317,  0.1676,  0.0356,  0.1368,  0.1078,  0.0192,  0.0804,
          0.1057,  0.1472, -0.1527,  0.1348, -0.6491, -0.1890, -0.3032, -0.1511,
          0.0277,  0.1473,  0.0447, -0.0097,  0.0082, -0.0021,  0.0401, -0.2246,
         -0.2104,  0.1430, -0.2585, -0.8132,  0.2677, -0.1585,  0.0461, -1.0550,
          1.0137,  0.6041,  1.0977, -0.2688, -0.3270, -0.0934,  0.4915, -0.5956,
          0.1151,  0.2357, -0.1665, -0.2417, -0.1964,  0.0507,  0.5458,  0.0827,
          0.1587,  0.1900,  0.3816, -0.0262, -0.3700,  0.2426,  0.2209,  0.1338]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
860000 特征值优化 tensor(0.7322, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3347, -0.1994, -0.8218,  0.0452, -1.9620, -0.5769, -1.6109, -0.7340,
          0.0207, -0.1523,  0.0024, -1.7098,  0.0361, -0.1167, -0.0748, -0.0061,
          0.2710,  0.1783,  0.1570,  0.0377,  0.1344,  0.1074, -0.0075,  0.0776,
          0.1087,  0.1735, -0.1325,  0.1321, -0.6502, -0.1883, -0.3083, -0.1487,
          0.0266,  0.1478,  0.0557, -0.0185,  0.0110,  0.0051,  0.0383, -0.2245,
         -0.2139,  0.1431, -0.2601, -0.8024,  0.2694, -0.1834,  0.0547, -1.0606,
          1.0175,  0.6081,  1.0998, -0.2712, -0.3161, -0.1034,  0.5106, -0.5865,
          0.1287,  0.2278, -0.1672, -0.2512, -0.1965,  0.0464,  0.5587,  0.0702,
          0.1568,  0.1904,  0.3788, -0.0245, -0.3866,  0.2466,  0.2324,  0.1286]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
861000 特征值优化 tensor(0.7356, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2625e-01, -2.4442e-01, -8.1797e-01,  5.1970e-02, -1.9099e+00,
         -5.9999e-01, -1.5987e+00, -6.8160e-01, -9.4980e-03, -1.7628e-01,
         -4.5885e-02, -1.6684e+00,  3.6128e-02,  3.6543e-02,  4.4615e-02,
         -1.1705e-01,  1.7011e-01,  9.4973e-02,  1.8525e-01, -2.2849e-02,
          1.3492e-01,  1.0694e-01,  6.7491e-02,  6.0242e-02,  1.2599e-01,
          1.4626e-01, -1.4111e-01,  1.1956e-01, -6.4925e-01, -1.8846e-01,
         -2.8949e-01, -1.4837e-01,  4.1264e-02,  1.4643e-01,  3.5092e-02,
         -6.4481e-02,  2.1979e-02,  1.3934e-03,  4.0827e-02, -2.2746e-01,
         -2.1788e-01,  1.4520e-01, -2.6286e-01, -8.0345e-01,  2.6993e-01,
         -1.6712e-01,  5.8481e-02, -1.0625e+00,  1.0191e+00,  6.0626e-01,
          1.0982e+00, -2.7167e-01, -3.0840e-01, -8.6212e-02,  5.1396e-01,
         -5.9000e-01,  1.0361e-01,  2.4885e-01, -1.8019e-01, -2.6247e-01,
         -1.7830e-01,  4.7874e-02,  5.1422e-01,  9.5109e-02,  1.5765e-01,
          1.9726e-01,  3.7838e-01, -1.7693e-02, -3.8856e-01,  2.4142e-01,
          2.5846e-01,  1.0739e-01]], device='cuda:0') tensor(0.2045, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
862000 特征值优化 tensor(0.7516, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.1802e-01, -2.2570e-01, -8.2007e-01,  5.7755e-02, -1.9074e+00,
         -6.1385e-01, -1.6222e+00, -6.7033e-01, -3.8136e-02, -1.7605e-01,
         -5.1506e-02, -1.6476e+00,  3.7139e-02,  3.3387e-02,  3.1977e-02,
         -1.2917e-01,  1.5022e-01,  7.4166e-02,  1.8651e-01,  1.6912e-03,
          1.3604e-01,  1.0741e-01,  7.0992e-02,  5.7049e-02,  1.1972e-01,
          1.4534e-01, -1.4497e-01,  1.2413e-01, -6.4750e-01, -1.8843e-01,
         -2.9526e-01, -1.5968e-01,  3.9730e-02,  1.4719e-01,  5.6477e-02,
         -3.6244e-02,  1.1171e-02,  2.8906e-03,  4.0961e-02, -2.2629e-01,
         -2.1715e-01,  1.4078e-01, -2.5801e-01, -8.0238e-01,  2.6843e-01,
         -1.3638e-01,  3.6250e-02, -1.0536e+00,  1.0167e+00,  6.0121e-01,
          1.0933e+00, -2.7010e-01, -3.3934e-01, -8.0097e-02,  5.1129e-01,
         -5.8825e-01,  9.2615e-02,  2.5764e-01, -1.7553e-01, -2.6154e-01,
         -1.7519e-01,  4.6103e-02,  5.0183e-01,  9.2115e-02,  1.4368e-01,
          2.0464e-01,  3.9480e-01, -2.0406e-02, -3.7987e-01,  2.5383e-01,
          2.5401e-01,  1.0512e-01]], device='cuda:0') tensor(0.2091, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
863000 特征值优化 tensor(3.5505, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0596e+00,  2.6230e-01,  1.7461e-01, -4.8966e-01, -9.6590e-01,
         -9.2223e-01, -2.5309e+00, -5.8189e-01, -1.5890e+00, -1.1254e+00,
         -2.1447e+00, -5.9463e-01, -3.4393e-01, -1.4119e+00,  3.3736e-02,
         -3.3232e-02, -4.2604e-02, -3.0193e-01,  3.8530e-02,  1.6704e-02,
          4.8976e-02, -9.2664e-02, -4.2776e-02,  1.3901e-01, -2.4708e-01,
          1.4032e-03, -2.8227e-01, -4.2510e-01, -2.6681e-01,  5.3583e-02,
          7.7811e-01, -3.2342e-01, -1.9614e-01,  2.2661e-01,  2.4637e-01,
         -2.8923e-01,  1.0805e-01,  2.3749e-01, -2.2967e-01, -8.5335e-01,
         -2.6972e-01, -3.9727e-01,  1.5639e+00,  3.4571e-01, -7.3822e-01,
         -1.8033e-01,  1.1882e-01, -5.4539e-01,  5.0347e-01, -1.1195e-01,
          1.4473e-01, -4.9246e-02, -6.2407e-01, -1.3724e-01, -1.0370e+00,
          5.7090e-02, -5.5419e-01,  1.7092e-01,  4.9040e-01,  4.7309e-01,
         -1.6502e+00,  1.3949e+00, -7.4955e-01,  1.4232e+00, -1.9357e+00,
          1.2828e-01, -1.3850e+00,  3.3439e-01, -9.5016e-01,  5.4348e-01,
         -1.9064e+00,  6.0171e-01]], device='cuda:0') tensor(0.2084, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
864000 特征值优化 tensor(0.9903, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6130,  0.5771, -0.1308, -0.5756, -1.2460, -1.2662, -2.4110, -1.1772,
         -1.6369, -1.0641, -1.7607, -0.7505, -0.2048, -0.6815,  0.2026,  0.1742,
          0.4550, -0.0461,  0.0071, -0.0383,  0.0647, -0.0368,  0.0490, -0.1016,
         -0.1346, -0.1369, -0.0423,  0.0190, -0.1068, -0.0126,  0.3885, -0.1734,
          0.0284,  0.2180,  0.1901, -0.1223,  0.0300,  0.1866, -0.3156, -0.5886,
          0.0498, -0.3861,  1.0037,  0.2308, -0.2657, -0.1074,  0.0123, -0.2403,
          0.3924, -0.3301,  0.3590, -0.0417, -0.1449,  0.0603, -0.9004,  0.1412,
         -0.0968,  0.0736,  0.4311,  0.3280, -1.9168,  1.0821, -0.9271,  1.1904,
         -1.6148,  0.0175, -1.4521,  0.2394, -0.8221,  0.8187, -1.6943,  0.6617]],
       device='cuda:0') tensor(0.2054, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
865000 特征值优化 tensor(0.9023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6416,  0.5347, -0.1665, -0.5378, -1.1516, -1.4023, -2.2220, -1.1721,
         -1.6081, -1.0182, -1.5036, -0.6966, -0.2020, -0.4475,  0.1043,  0.4906,
          0.5974, -0.2687,  0.2184, -0.0147,  0.0593, -0.0401,  0.0270, -0.0669,
         -0.0889, -0.1999, -0.0753,  0.0144, -0.0956, -0.0067,  0.4009, -0.1975,
          0.0736,  0.2094,  0.1899, -0.0982, -0.0387,  0.1957, -0.2506, -0.5210,
          0.0756, -0.3977,  0.9842,  0.1656, -0.2000, -0.0337, -0.0115, -0.2240,
          0.3643, -0.3495,  0.3146, -0.0095, -0.1660,  0.0297, -0.9837,  0.1204,
          0.0041,  0.0440,  0.3742,  0.3517, -2.0936,  1.0302, -0.7928,  1.0853,
         -1.3623, -0.0757, -1.3402,  0.1925, -0.9651,  0.8735, -1.4979,  0.6150]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
866000 特征值优化 tensor(0.8556, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6630e+00,  5.1730e-01, -2.1978e-01, -5.1945e-01, -1.1248e+00,
         -1.4067e+00, -2.0353e+00, -1.0992e+00, -1.4467e+00, -1.1220e+00,
         -1.4523e+00, -5.4796e-01, -2.1052e-01, -2.7615e-01,  7.9936e-02,
          4.3070e-01,  6.8551e-01, -2.7648e-01,  2.0928e-01,  1.5529e-02,
          5.1027e-02, -2.2553e-02,  1.2389e-02,  3.3119e-02, -3.9512e-02,
         -1.4930e-01, -5.4305e-02,  8.2815e-02, -9.7587e-02, -6.9179e-05,
          3.8861e-01, -2.1000e-01,  8.2524e-02,  2.1379e-01,  1.8240e-01,
         -4.9817e-02, -4.4740e-02,  1.8656e-01, -1.6541e-01, -4.5050e-01,
          8.4061e-02, -4.1541e-01,  9.6916e-01,  1.9134e-01, -1.9449e-01,
          6.4122e-03, -1.1615e-02, -2.3685e-01,  3.3113e-01, -3.3850e-01,
          2.4775e-01,  1.0827e-02, -1.7258e-01,  4.0117e-02, -9.5340e-01,
          1.5287e-01,  9.7890e-02, -4.7960e-03,  2.6917e-01,  1.7601e-01,
         -2.1499e+00,  1.0017e+00, -8.1119e-01,  1.0471e+00, -1.1422e+00,
         -1.2362e-01, -9.7256e-01, -2.1487e-02, -9.1372e-01,  8.4746e-01,
         -1.1567e+00,  4.1468e-01]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
867000 特征值优化 tensor(0.7080, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6864,  0.5345, -0.2550, -0.4287, -1.0775, -1.3175, -1.8423, -0.9641,
         -1.0779, -1.3724, -1.4875, -0.5325, -0.2136, -0.1812,  0.0869,  0.4297,
          0.6519, -0.2524,  0.2398,  0.0365,  0.0462, -0.0146, -0.0803,  0.0475,
         -0.0473, -0.1602, -0.0032,  0.1920, -0.0793, -0.0126,  0.3743, -0.2273,
          0.0817,  0.2244,  0.1775, -0.0476, -0.0540,  0.1939, -0.1479, -0.2471,
          0.0879, -0.3076,  0.9743,  0.1709, -0.1712, -0.0072, -0.0049, -0.2660,
          0.0086, -0.0149,  0.1288,  0.0659, -0.1782,  0.0570, -0.9048,  0.2100,
         -0.0036,  0.0515,  0.3798, -0.1195, -2.1593,  0.9311, -0.7711,  0.9906,
         -0.9509, -0.1145, -0.7695, -0.1963, -0.7808,  0.8000, -0.6439,  0.2001]],
       device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
868000 特征值优化 tensor(0.6988, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7245e+00,  5.3619e-01, -2.8619e-01, -5.4161e-01, -1.0894e+00,
         -1.3385e+00, -1.6174e+00, -8.4402e-01, -9.2606e-01, -1.2658e+00,
         -1.4771e+00, -4.5910e-01, -2.1282e-01, -1.8404e-01,  1.0734e-01,
          5.1006e-01,  5.8416e-01, -2.0896e-01,  2.6016e-01,  5.1601e-02,
          4.6050e-02, -1.4006e-02,  3.0615e-02,  1.0109e-02, -4.0396e-02,
         -1.6458e-01, -7.3118e-03,  1.7168e-01, -8.4463e-02, -4.1387e-03,
          3.7776e-01, -2.5215e-01,  9.4758e-02,  2.2625e-01,  1.7961e-01,
         -3.5938e-02, -4.6281e-02,  2.0374e-01, -7.3660e-02, -2.2822e-01,
          8.3389e-02, -3.1457e-01,  9.9637e-01,  1.7765e-01, -1.8409e-01,
         -2.0451e-02,  2.9879e-05, -2.6812e-01,  4.5343e-02, -3.1686e-02,
          1.6271e-01,  6.2251e-02, -2.0326e-01,  6.3757e-02, -9.0544e-01,
          2.2851e-01, -4.9832e-02,  7.4045e-02,  3.4376e-01, -1.2885e-01,
         -2.1374e+00,  8.8054e-01, -7.0648e-01,  9.1817e-01, -8.5545e-01,
         -9.9648e-02, -5.9961e-01, -2.3423e-01, -6.9598e-01,  7.3118e-01,
         -4.5153e-01,  1.0470e-01]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
869000 特征值优化 tensor(0.6699, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7947e+00,  5.9744e-01, -2.6739e-01, -4.8026e-01, -1.3298e+00,
         -1.3881e+00, -1.4314e+00, -6.4599e-01, -7.4945e-01, -9.1468e-01,
         -1.4494e+00, -2.8073e-01, -2.1851e-01, -2.4511e-01,  9.3695e-02,
          3.9793e-01,  6.1029e-01, -2.3865e-01,  2.3639e-01,  4.4171e-02,
          4.9375e-02, -1.3766e-02, -7.6454e-02,  4.9006e-02, -5.8023e-02,
         -1.5565e-01, -1.7814e-02,  1.8296e-01, -7.5622e-02, -5.1424e-03,
          4.3846e-01, -2.5783e-01,  5.9843e-02,  2.1579e-01,  1.3735e-01,
         -3.0723e-03, -8.6359e-02,  2.0167e-01, -1.1446e-03, -1.7513e-01,
          1.0405e-01, -2.5864e-01,  9.9024e-01,  1.9465e-01, -1.2220e-01,
          2.9787e-02, -6.5149e-02, -2.7406e-01,  2.8367e-02, -2.1124e-02,
          1.1595e-01,  7.3830e-02, -5.9306e-02, -7.5104e-02, -8.5310e-01,
          3.1789e-01, -5.7631e-02,  6.7646e-02,  3.1666e-01, -1.6293e-01,
         -2.0888e+00,  7.3657e-01, -5.6150e-01,  7.7245e-01, -6.5361e-01,
         -1.2298e-01, -4.8452e-01, -2.2615e-01, -4.9660e-01,  6.5687e-01,
         -2.9783e-01,  9.0845e-02]], device='cuda:0') tensor(0.2072, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
870000 特征值优化 tensor(0.6656, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.8646e+00,  6.2215e-01, -2.8096e-01, -4.9711e-01, -1.5491e+00,
         -1.3974e+00, -1.1934e+00, -5.3311e-01, -5.8700e-01, -7.2698e-01,
         -1.4395e+00, -1.2552e-01, -2.2125e-01, -2.7948e-01,  3.2636e-02,
          4.0326e-01,  5.4090e-01, -2.5266e-01,  2.8034e-01,  4.5641e-02,
          5.4240e-02, -1.5850e-02,  5.9060e-02, -8.2988e-04, -3.2804e-02,
         -1.9216e-01, -1.3302e-02,  1.8681e-01, -7.1146e-02, -2.1171e-03,
          4.9354e-01, -2.7293e-01,  7.7136e-02,  2.1437e-01,  1.0899e-01,
         -1.7058e-02, -9.4601e-02,  2.0007e-01,  4.7927e-02, -1.3031e-01,
          1.2739e-01, -2.0906e-01,  1.0067e+00,  2.1520e-01, -1.3496e-01,
         -1.2606e-02, -4.1679e-02, -2.5144e-01, -1.0655e-03, -8.2764e-04,
          1.1518e-01,  7.3315e-02, -7.2109e-02, -1.2763e-01, -8.0254e-01,
          3.8783e-01, -1.1337e-01,  9.3547e-02,  3.3835e-01, -1.4728e-01,
         -1.9824e+00,  6.2817e-01, -4.4934e-01,  6.4004e-01, -5.7094e-01,
         -1.2400e-01, -4.5703e-01, -1.6253e-01, -3.2112e-01,  5.7743e-01,
         -2.5337e-01,  1.2928e-01]], device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
871000 特征值优化 tensor(0.6515, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.8911e+00,  6.5738e-01, -2.7338e-01, -5.1708e-01, -1.6021e+00,
         -1.4615e+00, -9.8006e-01, -4.5544e-01, -5.0766e-01, -6.7823e-01,
         -1.5022e+00,  5.0382e-02, -2.2151e-01, -2.6611e-01, -5.6817e-02,
          3.8479e-01,  5.4559e-01, -2.0220e-01,  2.3840e-01,  4.1896e-02,
          5.2977e-02, -1.3373e-02,  5.3980e-02, -3.6779e-03, -3.8644e-02,
         -1.8709e-01, -4.2666e-02,  1.7971e-01, -1.0856e-01, -6.4470e-03,
          5.0125e-01, -2.6403e-01,  7.6007e-02,  2.1434e-01,  9.7453e-02,
         -4.8543e-02, -6.0443e-02,  2.0607e-01,  6.5420e-02, -9.1769e-02,
          1.1882e-01, -1.7099e-01,  1.0307e+00,  2.0544e-01, -1.4265e-01,
         -2.0462e-02, -4.8489e-02, -2.6551e-01, -8.9872e-04, -9.0985e-04,
          1.4469e-01,  7.2127e-02, -6.7941e-02, -1.3133e-01, -7.5427e-01,
          4.2335e-01, -1.0555e-01,  1.0502e-01,  3.4993e-01, -1.4651e-01,
         -1.8309e+00,  5.7050e-01, -3.9797e-01,  5.9167e-01, -5.1408e-01,
         -1.2500e-01, -4.8265e-01, -1.2626e-01, -2.7850e-01,  5.4348e-01,
         -3.1564e-01,  1.8460e-01]], device='cuda:0') tensor(0.2077, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
872000 特征值优化 tensor(0.6556, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9120,  0.6879, -0.2649, -0.5003, -1.6541, -1.3999, -0.7811, -0.4672,
         -0.5008, -0.6706, -1.6095,  0.0075, -0.2212, -0.2978, -0.0100,  0.3683,
          0.5272, -0.2187,  0.2741,  0.0371,  0.0527, -0.0134, -0.0145,  0.0296,
         -0.0505, -0.1598, -0.0213,  0.1854, -0.0765, -0.0057,  0.5101, -0.2567,
          0.0809,  0.2138,  0.1133, -0.0242, -0.0202,  0.2035,  0.0633, -0.0891,
          0.1155, -0.1670,  1.0473,  0.2026, -0.1428, -0.0455, -0.0439, -0.2799,
          0.0029,  0.0030,  0.1248,  0.0760, -0.0694, -0.1385, -0.7117,  0.4491,
         -0.1122,  0.0933,  0.3441, -0.1494, -1.6702,  0.5217, -0.3292,  0.5407,
         -0.5403, -0.1016, -0.4642, -0.1408, -0.2167,  0.5196, -0.3010,  0.1824]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
873000 特征值优化 tensor(0.6436, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9532,  0.7146, -0.2592, -0.4948, -1.7182, -1.4243, -0.5386, -0.4476,
         -0.4466, -0.6531, -1.7624,  0.0370, -0.2218, -0.3195, -0.0099,  0.3426,
          0.5074, -0.1958,  0.2869,  0.0126,  0.0512, -0.0138, -0.0605,  0.0805,
         -0.0696, -0.1611, -0.0036,  0.1899, -0.0491, -0.0056,  0.5225, -0.2432,
          0.0913,  0.2176,  0.1257,  0.0024,  0.0170,  0.2049,  0.0721, -0.0692,
          0.0993, -0.1472,  1.0673,  0.1888, -0.1384, -0.0237, -0.0646, -0.2832,
          0.0050,  0.0048,  0.0688,  0.1023, -0.1044, -0.1330, -0.5994,  0.5478,
         -0.1129,  0.0915,  0.3151, -0.1651, -1.3136,  0.3910, -0.1629,  0.4488,
         -0.5509, -0.0800, -0.4308, -0.1643, -0.1203,  0.4647, -0.2615,  0.1639]],
       device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
874000 特征值优化 tensor(0.6428, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9708e+00,  7.1841e-01, -2.6749e-01, -5.0968e-01, -1.7070e+00,
         -1.4516e+00, -3.8734e-01, -5.0265e-01, -3.9316e-01, -6.3405e-01,
         -2.0028e+00,  4.1000e-02, -2.2228e-01, -3.4442e-01,  8.7298e-02,
          3.7967e-01,  4.4827e-01, -2.0925e-01,  3.4779e-01,  4.1183e-02,
          5.1969e-02, -1.3804e-02,  4.6082e-02, -1.5345e-02, -3.2869e-02,
         -1.7486e-01, -3.8387e-02,  1.7783e-01, -7.2023e-02, -6.0602e-03,
          5.1942e-01, -2.2678e-01,  8.6865e-02,  2.1744e-01,  1.0562e-01,
         -2.9499e-02,  5.9109e-02,  1.9725e-01,  9.3974e-02, -7.7565e-02,
          8.4605e-02, -1.6391e-01,  1.0685e+00,  1.9658e-01, -1.3836e-01,
         -2.7690e-02, -6.2788e-02, -2.6986e-01,  1.0876e-03,  1.1267e-03,
          1.2479e-01,  7.9065e-02, -9.0619e-02, -1.3646e-01, -5.3549e-01,
          5.8000e-01, -1.1394e-01,  1.0015e-01,  3.1156e-01, -1.5701e-01,
         -1.2369e+00,  3.9085e-01, -1.2663e-01,  4.3750e-01, -5.6268e-01,
         -8.3691e-02, -4.5303e-01, -1.1888e-01, -3.6877e-02,  4.6509e-01,
         -2.6706e-01,  1.7940e-01]], device='cuda:0') tensor(0.2071, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
875000 特征值优化 tensor(0.6455, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9741e+00,  7.3568e-01, -2.7764e-01, -4.9778e-01, -1.7254e+00,
         -1.4169e+00, -3.1792e-01, -5.3689e-01, -4.1588e-01, -5.9561e-01,
         -2.1805e+00,  4.1755e-02, -2.2212e-01, -3.5177e-01,  6.6011e-02,
          3.6666e-01,  4.3727e-01, -1.9317e-01,  3.6976e-01, -3.8515e-03,
          5.2212e-02, -1.3818e-02, -2.8504e-02,  3.7959e-02, -6.8728e-02,
         -1.6014e-01, -1.7641e-02,  1.8235e-01, -5.2797e-02, -4.6464e-03,
          5.2506e-01, -2.2687e-01,  9.1505e-02,  2.1701e-01,  1.1717e-01,
         -1.4088e-02,  6.6752e-02,  1.9678e-01,  8.9308e-02, -7.2947e-02,
          8.4364e-02, -1.5850e-01,  1.0684e+00,  1.9623e-01, -1.3436e-01,
         -3.4333e-02, -6.2875e-02, -2.6347e-01,  4.1067e-04,  1.2903e-04,
          8.9341e-02,  9.1017e-02, -9.1056e-02, -1.4107e-01, -5.1721e-01,
          5.9647e-01, -1.2417e-01,  9.6942e-02,  3.1756e-01, -1.5777e-01,
         -1.2244e+00,  3.9319e-01, -1.1007e-01,  4.2792e-01, -5.4917e-01,
         -7.5471e-02, -4.5821e-01, -1.3703e-01,  3.9261e-02,  4.5982e-01,
         -2.7744e-01,  1.7461e-01]], device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
876000 特征值优化 tensor(0.6441, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9844e+00,  7.3449e-01, -2.7462e-01, -5.2523e-01, -1.7421e+00,
         -1.4374e+00, -3.1516e-01, -5.6060e-01, -3.9110e-01, -6.4781e-01,
         -2.2620e+00,  4.2399e-02, -2.2207e-01, -3.4988e-01,  1.0700e-01,
          3.7820e-01,  4.2807e-01, -2.2266e-01,  4.0288e-01,  6.4574e-03,
          5.1717e-02, -1.4238e-02,  3.4886e-02, -1.0987e-02, -4.1502e-02,
         -1.6623e-01, -4.1299e-02,  1.7479e-01, -7.3079e-02, -5.2052e-03,
          5.2983e-01, -2.2089e-01,  8.6149e-02,  2.1733e-01,  1.1090e-01,
         -2.6559e-02,  7.7867e-02,  1.9008e-01,  9.2042e-02, -7.4546e-02,
          7.8522e-02, -1.6211e-01,  1.0743e+00,  1.9653e-01, -1.3792e-01,
         -3.4957e-02, -6.2783e-02, -2.6601e-01,  1.6627e-03,  1.9465e-03,
          1.2875e-01,  7.9725e-02, -7.9051e-02, -1.5274e-01, -5.0696e-01,
          5.9291e-01, -1.1559e-01,  9.7028e-02,  3.1471e-01, -1.5740e-01,
         -1.2241e+00,  3.9714e-01, -1.0174e-01,  4.3101e-01, -5.6759e-01,
         -7.7665e-02, -4.4999e-01, -1.2450e-01,  9.2682e-02,  4.6457e-01,
         -2.7622e-01,  1.7922e-01]], device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
877000 特征值优化 tensor(0.6440, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9904e+00,  7.4581e-01, -2.7807e-01, -4.9413e-01, -1.7606e+00,
         -1.4201e+00, -2.8812e-01, -5.7032e-01, -4.0813e-01, -6.1055e-01,
         -2.3343e+00,  3.1553e-02, -2.2213e-01, -3.5382e-01,  7.2228e-02,
          3.9246e-01,  4.1666e-01, -1.8831e-01,  4.0094e-01, -2.4310e-02,
          5.2267e-02, -1.3413e-02, -4.3177e-02,  4.7442e-02, -7.0837e-02,
         -1.6428e-01, -1.3182e-02,  1.8063e-01, -4.6158e-02, -5.4091e-03,
          5.3360e-01, -2.2382e-01,  9.1679e-02,  2.1717e-01,  1.2088e-01,
         -7.0521e-03,  7.4278e-02,  1.9403e-01,  8.6770e-02, -7.0479e-02,
          8.2395e-02, -1.5574e-01,  1.0780e+00,  1.9739e-01, -1.3709e-01,
         -4.2400e-02, -6.1540e-02, -2.6581e-01,  6.3246e-04,  1.0541e-03,
          7.4026e-02,  9.9774e-02, -8.3055e-02, -1.5275e-01, -4.9510e-01,
          6.0392e-01, -1.1936e-01,  9.4523e-02,  3.2184e-01, -1.6438e-01,
         -1.2157e+00,  3.9557e-01, -9.8135e-02,  4.2746e-01, -5.5458e-01,
         -7.2032e-02, -4.4873e-01, -1.4665e-01,  1.1812e-01,  4.6151e-01,
         -2.6726e-01,  1.6704e-01]], device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
878000 特征值优化 tensor(0.6435, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9935e+00,  7.4885e-01, -2.5899e-01, -5.0360e-01, -1.7722e+00,
         -1.4415e+00, -3.0806e-01, -5.7633e-01, -3.8159e-01, -6.3747e-01,
         -2.3565e+00,  2.5974e-02, -2.2201e-01, -3.4699e-01,  1.0541e-01,
          3.7955e-01,  4.2303e-01, -2.3853e-01,  4.2291e-01, -5.1517e-03,
          5.1964e-02, -1.3707e-02,  3.6662e-02, -7.8451e-03, -2.6658e-02,
         -1.8599e-01, -3.5782e-02,  1.7652e-01, -5.9200e-02, -5.9078e-03,
          5.3744e-01, -2.1997e-01,  8.8191e-02,  2.1781e-01,  1.0938e-01,
         -2.0921e-02,  7.7790e-02,  1.9204e-01,  9.2400e-02, -7.1450e-02,
          7.9400e-02, -1.5803e-01,  1.0817e+00,  1.9385e-01, -1.3714e-01,
         -4.2726e-02, -6.2467e-02, -2.7485e-01,  7.9136e-04,  2.6628e-03,
          1.1076e-01,  8.4512e-02, -8.0991e-02, -1.6267e-01, -5.0319e-01,
          6.0064e-01, -1.1367e-01,  9.7846e-02,  3.2217e-01, -1.5620e-01,
         -1.2196e+00,  3.9574e-01, -9.2937e-02,  4.3070e-01, -5.6305e-01,
         -7.4643e-02, -4.4086e-01, -1.3111e-01,  1.3492e-01,  4.6364e-01,
         -2.5863e-01,  1.7585e-01]], device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
879000 特征值优化 tensor(0.6435, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9927e+00,  7.5226e-01, -2.7502e-01, -5.2070e-01, -1.7759e+00,
         -1.4275e+00, -3.2826e-01, -5.7173e-01, -3.7689e-01, -6.1335e-01,
         -2.3615e+00,  4.4250e-02, -2.2092e-01, -3.2080e-01,  1.5101e-01,
          3.9503e-01,  4.2314e-01, -2.2508e-01,  3.9956e-01, -1.1947e-02,
          5.2552e-02, -1.4237e-02,  3.5410e-02, -1.9286e-02, -5.1145e-02,
         -1.6277e-01, -3.9812e-02,  1.6705e-01, -6.1416e-02, -5.2967e-03,
          5.4106e-01, -2.2814e-01,  9.7574e-02,  2.1799e-01,  1.0568e-01,
         -2.5657e-02,  7.0242e-02,  1.9452e-01,  9.8216e-02, -7.4224e-02,
          8.2911e-02, -1.6450e-01,  1.0825e+00,  1.9568e-01, -1.3636e-01,
         -4.3702e-02, -6.1301e-02, -2.6631e-01,  1.0304e-03,  3.3334e-03,
          1.1458e-01,  8.5090e-02, -1.0327e-01, -1.5401e-01, -5.1070e-01,
          5.9999e-01, -1.2893e-01,  1.0010e-01,  3.2426e-01, -1.5339e-01,
         -1.2156e+00,  3.8761e-01, -9.3404e-02,  4.3183e-01, -5.5830e-01,
         -7.7748e-02, -4.5245e-01, -1.2645e-01,  1.3825e-01,  4.6624e-01,
         -2.7452e-01,  1.7772e-01]], device='cuda:0') tensor(0.2032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
880000 特征值优化 tensor(0.6417, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0081e+00,  7.5215e-01, -2.6763e-01, -5.0954e-01, -1.7763e+00,
         -1.4235e+00, -3.4606e-01, -5.5724e-01, -3.8951e-01, -6.0711e-01,
         -2.3251e+00,  4.8795e-02, -2.2232e-01, -3.1154e-01,  1.8031e-01,
          4.1874e-01,  4.1515e-01, -2.1885e-01,  3.9865e-01,  8.0560e-03,
          5.1541e-02, -1.4137e-02,  4.8113e-02, -2.0035e-02, -4.6344e-02,
         -1.7199e-01, -2.7499e-02,  1.8997e-01, -7.5458e-02, -5.8414e-03,
          5.4078e-01, -2.3023e-01,  9.8123e-02,  2.1739e-01,  1.0378e-01,
         -3.4439e-02,  6.5385e-02,  1.9583e-01,  1.0013e-01, -7.5259e-02,
          8.3727e-02, -1.6541e-01,  1.0862e+00,  1.8886e-01, -1.3228e-01,
         -2.9608e-02, -7.0665e-02, -2.7014e-01,  1.0384e-03,  1.2904e-03,
          1.1778e-01,  8.2847e-02, -1.0451e-01, -1.5319e-01, -5.1539e-01,
          5.9682e-01, -1.3489e-01,  1.0313e-01,  3.2114e-01, -1.5376e-01,
         -1.2238e+00,  3.8780e-01, -9.9990e-02,  4.3447e-01, -5.4311e-01,
         -8.4767e-02, -4.6295e-01, -1.1855e-01,  1.2394e-01,  4.6571e-01,
         -2.9196e-01,  1.8829e-01]], device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
881000 特征值优化 tensor(0.6407, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0105e+00,  7.5610e-01, -2.7065e-01, -5.1266e-01, -1.7777e+00,
         -1.4490e+00, -3.6244e-01, -5.5837e-01, -3.8918e-01, -6.1053e-01,
         -2.3176e+00,  1.2577e-02, -2.2252e-01, -3.5343e-01,  1.3973e-01,
          4.3691e-01,  4.0381e-01, -2.0689e-01,  4.1008e-01,  1.8107e-02,
          5.1407e-02, -1.4220e-02,  6.9172e-02, -3.2307e-02, -3.4461e-02,
         -1.7857e-01, -3.3060e-02,  1.9202e-01, -6.0036e-02, -5.7377e-03,
          5.3930e-01, -2.2832e-01,  9.6749e-02,  2.1774e-01,  1.0088e-01,
         -4.1547e-02,  6.5054e-02,  1.9483e-01,  1.0379e-01, -8.1101e-02,
          8.3063e-02, -1.7445e-01,  1.0877e+00,  1.8362e-01, -1.2585e-01,
         -2.2126e-02, -7.5783e-02, -2.6817e-01,  1.8481e-04,  1.2488e-03,
          1.1556e-01,  8.4769e-02, -9.4138e-02, -1.5448e-01, -5.3295e-01,
          5.8789e-01, -1.3130e-01,  1.0829e-01,  3.1104e-01, -1.4802e-01,
         -1.2233e+00,  3.8618e-01, -1.0281e-01,  4.3748e-01, -5.4476e-01,
         -8.8504e-02, -4.6946e-01, -1.0745e-01,  1.1958e-01,  4.7088e-01,
         -2.6860e-01,  1.7589e-01]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
882000 特征值优化 tensor(0.6415, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0114e+00,  7.6580e-01, -2.7257e-01, -4.8425e-01, -1.7697e+00,
         -1.4162e+00, -3.0560e-01, -5.7932e-01, -4.2893e-01, -6.2251e-01,
         -2.3645e+00,  8.4453e-02, -2.2253e-01, -3.6251e-01,  6.0612e-02,
          3.7641e-01,  4.4592e-01, -2.1388e-01,  4.0742e-01, -3.4489e-02,
          5.1649e-02, -1.3497e-02, -3.6085e-02,  5.4096e-02, -9.6249e-02,
         -1.5199e-01,  6.4308e-03,  1.8828e-01, -3.4618e-02, -5.5982e-03,
          5.3728e-01, -2.2751e-01,  9.9105e-02,  2.1709e-01,  1.3723e-01,
         -9.0055e-03,  6.8948e-02,  1.9503e-01,  6.8284e-02, -4.7988e-02,
          8.7075e-02, -1.2421e-01,  1.0876e+00,  1.8601e-01, -1.2641e-01,
         -3.2558e-02, -7.2041e-02, -2.6789e-01,  4.7190e-04, -8.3912e-05,
          6.7186e-02,  1.0146e-01, -9.7926e-02, -1.5122e-01, -5.0423e-01,
          6.0402e-01, -1.3887e-01,  1.0463e-01,  3.1632e-01, -1.5461e-01,
         -1.2092e+00,  3.8815e-01, -9.3710e-02,  4.2600e-01, -5.2495e-01,
         -6.5934e-02, -4.6523e-01, -1.5739e-01,  1.3147e-01,  4.6541e-01,
         -3.0287e-01,  1.7867e-01]], device='cuda:0') tensor(0.2057, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
883000 特征值优化 tensor(0.6386, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0198e+00,  7.7558e-01, -2.6813e-01, -5.0554e-01, -1.7492e+00,
         -1.4227e+00, -3.0956e-01, -5.9016e-01, -5.4515e-01, -6.4768e-01,
         -2.4261e+00,  2.1347e-01, -2.2252e-01, -3.5704e-01,  5.5862e-02,
          3.7878e-01,  4.5257e-01, -2.2996e-01,  4.1443e-01, -2.0072e-02,
          5.1560e-02, -1.4285e-02,  1.5199e-02,  2.2042e-02, -1.3158e-01,
         -1.4712e-01,  2.0594e-02,  1.4864e-01, -1.0491e-02, -5.8937e-03,
          5.3454e-01, -2.2575e-01,  9.8597e-02,  2.1755e-01,  1.3308e-01,
         -1.0918e-02,  7.3917e-02,  1.9235e-01,  1.5040e-02, -2.9791e-02,
          8.5433e-02, -7.2858e-02,  1.0895e+00,  1.8976e-01, -1.2785e-01,
         -3.7455e-02, -7.2620e-02, -2.7385e-01,  5.2740e-03,  1.9911e-03,
          7.6218e-02,  1.0307e-01, -9.6322e-02, -1.4970e-01, -4.8328e-01,
          6.0391e-01, -1.2571e-01,  9.7743e-02,  3.5149e-01, -1.5258e-01,
         -1.1919e+00,  3.7929e-01, -8.7792e-02,  4.2579e-01, -4.2377e-01,
         -9.2296e-02, -4.7084e-01, -1.8623e-01,  1.6086e-01,  4.7807e-01,
         -3.9138e-01,  1.8886e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
884000 特征值优化 tensor(0.6383, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0296e+00,  7.7514e-01, -2.6276e-01, -5.0647e-01, -1.7575e+00,
         -1.4277e+00, -3.0763e-01, -6.0869e-01, -5.7449e-01, -6.6358e-01,
         -2.4744e+00,  2.4366e-01, -2.2240e-01, -3.5607e-01,  3.5205e-02,
          3.7853e-01,  4.5238e-01, -2.3100e-01,  4.3347e-01, -3.6675e-02,
          5.1091e-02, -1.4309e-02,  8.8727e-03, -4.8692e-03, -1.3372e-01,
         -1.4280e-01,  1.9037e-02,  1.3455e-01, -2.4488e-02, -5.7071e-03,
          5.3706e-01, -2.2574e-01,  9.9608e-02,  2.1766e-01,  1.3825e-01,
         -9.2438e-03,  7.1642e-02,  1.9348e-01,  1.4289e-03, -2.4259e-02,
          8.7291e-02, -5.7730e-02,  1.0980e+00,  1.8355e-01, -1.2760e-01,
         -3.4654e-02, -7.4464e-02, -2.7361e-01,  6.3812e-03, -2.7918e-04,
          8.1796e-02,  1.0043e-01, -9.7742e-02, -1.5208e-01, -4.8286e-01,
          6.1553e-01, -1.2596e-01,  9.9256e-02,  3.6620e-01, -1.5039e-01,
         -1.1865e+00,  3.7702e-01, -7.8952e-02,  4.2254e-01, -3.9561e-01,
         -9.3031e-02, -4.6461e-01, -1.9599e-01,  1.8027e-01,  4.7658e-01,
         -4.1387e-01,  1.8546e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
885000 特征值优化 tensor(0.6376, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0315,  0.7747, -0.2567, -0.4971, -1.7911, -1.4299, -0.3128, -0.6003,
         -0.5881, -0.6637, -2.4271,  0.2024, -0.2227, -0.3545,  0.1185,  0.3449,
          0.4747, -0.2747,  0.4151, -0.0547,  0.0514, -0.0143,  0.0225,  0.0060,
         -0.1265, -0.1387,  0.0324,  0.1603, -0.0253, -0.0064,  0.5439, -0.2324,
          0.1066,  0.2176,  0.1200, -0.0113,  0.0655,  0.1956, -0.0027, -0.0273,
          0.0917, -0.0590,  1.0994,  0.1811, -0.1248, -0.0313, -0.0768, -0.2780,
          0.0138, -0.0075,  0.0723,  0.1032, -0.1153, -0.1542, -0.4859,  0.6301,
         -0.1308,  0.1022,  0.3526, -0.1507, -1.1838,  0.3772, -0.0753,  0.4185,
         -0.3695, -0.1092, -0.4552, -0.2016,  0.1599,  0.4669, -0.3880,  0.1826]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
886000 特征值优化 tensor(0.6414, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0132e+00,  7.7189e-01, -2.7033e-01, -5.0238e-01, -1.7988e+00,
         -1.4244e+00, -3.5346e-01, -5.8848e-01, -6.1834e-01, -6.8054e-01,
         -2.3961e+00,  2.6980e-01, -2.2100e-01, -3.3618e-01,  1.3818e-01,
          3.8652e-01,  4.3840e-01, -2.3277e-01,  4.0275e-01, -3.8699e-02,
          5.2977e-02, -1.3463e-02,  2.6419e-02,  9.9536e-03, -1.0763e-01,
         -1.6171e-01,  1.3627e-02,  1.3523e-01, -3.1194e-02, -5.6229e-03,
          5.4709e-01, -2.3089e-01,  1.0514e-01,  2.1777e-01,  1.1118e-01,
         -3.5839e-02,  5.8092e-02,  1.9582e-01, -9.5415e-03, -2.3423e-02,
          9.2194e-02, -5.0441e-02,  1.0919e+00,  1.9314e-01, -1.3354e-01,
         -4.6813e-02, -6.3989e-02, -2.7090e-01, -9.1425e-06,  1.4869e-03,
          8.0675e-02,  9.9167e-02, -1.0837e-01, -1.5787e-01, -5.1297e-01,
          5.9992e-01, -1.5926e-01,  1.1482e-01,  3.6124e-01, -1.3916e-01,
         -1.2004e+00,  3.7587e-01, -8.3748e-02,  4.2588e-01, -3.3163e-01,
         -1.2611e-01, -4.6289e-01, -1.8879e-01,  1.4771e-01,  4.7454e-01,
         -4.5635e-01,  2.1328e-01]], device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
887000 特征值优化 tensor(0.6387, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0175e+00,  7.6149e-01, -2.7022e-01, -5.0576e-01, -1.7959e+00,
         -1.4275e+00, -3.2443e-01, -5.6089e-01, -5.8743e-01, -6.9088e-01,
         -2.3538e+00,  2.5243e-01, -2.2202e-01, -3.4315e-01,  1.1966e-01,
          3.7303e-01,  4.5039e-01, -2.4081e-01,  3.9727e-01, -5.0773e-02,
          5.1802e-02, -1.3059e-02,  1.9486e-02,  1.7884e-02, -1.0028e-01,
         -1.5749e-01,  1.0369e-02,  1.4094e-01, -4.9615e-02, -6.9864e-03,
          5.4627e-01, -2.3060e-01,  1.0302e-01,  2.1763e-01,  1.2738e-01,
         -1.9001e-02,  6.6216e-02,  1.9392e-01, -6.0648e-04, -2.3261e-02,
          8.7102e-02, -5.4957e-02,  1.0912e+00,  1.9886e-01, -1.4155e-01,
         -4.9674e-02, -6.2546e-02, -2.7175e-01,  7.3344e-04,  1.4652e-03,
          9.4001e-02,  9.5265e-02, -1.0777e-01, -1.5732e-01, -4.9373e-01,
          6.1559e-01, -1.4612e-01,  1.0914e-01,  3.5908e-01, -1.4311e-01,
         -1.2072e+00,  3.7982e-01, -9.3386e-02,  4.2605e-01, -3.6269e-01,
         -1.0838e-01, -4.4992e-01, -1.9200e-01,  1.3322e-01,  4.7029e-01,
         -4.2153e-01,  1.9448e-01]], device='cuda:0') tensor(0.2053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
888000 特征值优化 tensor(0.6384, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0120e+00,  7.5703e-01, -2.7271e-01, -5.0347e-01, -1.7962e+00,
         -1.4274e+00, -3.2209e-01, -5.5075e-01, -5.7014e-01, -6.9745e-01,
         -2.3292e+00,  2.4983e-01, -2.2213e-01, -3.4780e-01,  1.1441e-01,
          3.5870e-01,  4.6673e-01, -2.4830e-01,  3.8735e-01, -5.9222e-02,
          5.1745e-02, -1.3030e-02,  1.8395e-02,  2.0860e-02, -1.0651e-01,
         -1.5731e-01,  1.0683e-02,  1.3327e-01, -5.4417e-02, -6.7884e-03,
          5.4661e-01, -2.3120e-01,  1.0351e-01,  2.1744e-01,  1.3194e-01,
         -1.2361e-02,  6.6150e-02,  1.9404e-01, -5.0549e-03, -2.2791e-02,
          8.6748e-02, -5.2497e-02,  1.0881e+00,  2.0000e-01, -1.4221e-01,
         -4.8911e-02, -6.1671e-02, -2.7005e-01,  2.8426e-03, -1.1574e-03,
          9.2835e-02,  9.5091e-02, -1.0840e-01, -1.5648e-01, -4.9371e-01,
          6.1965e-01, -1.3205e-01,  1.0228e-01,  3.6789e-01, -1.4776e-01,
         -1.2080e+00,  3.8044e-01, -9.7066e-02,  4.2507e-01, -3.8557e-01,
         -9.7016e-02, -4.4711e-01, -1.9868e-01,  1.2224e-01,  4.6804e-01,
         -4.1837e-01,  1.8325e-01]], device='cuda:0') tensor(0.2029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
889000 特征值优化 tensor(0.6382, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0069e+00,  7.5225e-01, -2.7086e-01, -5.0504e-01, -1.8020e+00,
         -1.4272e+00, -3.2299e-01, -5.4579e-01, -5.6307e-01, -6.9870e-01,
         -2.3135e+00,  2.5247e-01, -2.2205e-01, -3.4814e-01,  1.1191e-01,
          3.5501e-01,  4.6839e-01, -2.4789e-01,  3.8623e-01, -6.1041e-02,
          5.1920e-02, -1.2873e-02,  1.7052e-02,  2.0715e-02, -1.0104e-01,
         -1.5746e-01,  1.1559e-02,  1.3627e-01, -5.5415e-02, -6.6845e-03,
          5.4770e-01, -2.3236e-01,  1.0462e-01,  2.1760e-01,  1.3334e-01,
         -9.3130e-03,  6.5278e-02,  1.9495e-01, -1.9917e-03, -2.0327e-02,
          8.7244e-02, -4.9591e-02,  1.0852e+00,  2.0055e-01, -1.4244e-01,
         -4.6339e-02, -6.2040e-02, -2.7114e-01,  9.9814e-03, -8.0797e-03,
          9.4817e-02,  9.5509e-02, -1.1020e-01, -1.5712e-01, -4.9552e-01,
          6.2148e-01, -1.3388e-01,  1.0285e-01,  3.6839e-01, -1.4838e-01,
         -1.2092e+00,  3.8000e-01, -9.8639e-02,  4.2486e-01, -3.7759e-01,
         -9.3603e-02, -4.3776e-01, -1.9943e-01,  1.1441e-01,  4.6830e-01,
         -4.1345e-01,  1.7813e-01]], device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
890000 特征值优化 tensor(0.6493, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9982,  0.7398, -0.2788, -0.5052, -1.7999, -1.4024, -0.3215, -0.5378,
         -0.5582, -0.6896, -2.2952,  0.2176, -0.2210, -0.3319,  0.1228,  0.3707,
          0.4252, -0.2236,  0.4025, -0.0192,  0.0531, -0.0147,  0.0036, -0.0165,
         -0.1321, -0.1480,  0.0213,  0.1662, -0.0428, -0.0062,  0.5445, -0.2303,
          0.1026,  0.2169,  0.1130, -0.0122,  0.0689,  0.1916, -0.0049, -0.0234,
          0.0830, -0.0526,  1.0778,  0.2077, -0.1381, -0.0649, -0.0465, -0.2575,
          0.0155, -0.0159,  0.0863,  0.0948, -0.1036, -0.1566, -0.5070,  0.6003,
         -0.1205,  0.0919,  0.3648, -0.1607, -1.2113,  0.3802, -0.1048,  0.4271,
         -0.3752, -0.1005, -0.4360, -0.2016,  0.1093,  0.4691, -0.4064,  0.1862]],
       device='cuda:0') tensor(0.2052, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
891000 特征值优化 tensor(0.6457, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9887e+00,  7.5357e-01, -2.8405e-01, -4.9732e-01, -1.7986e+00,
         -1.3981e+00, -3.2003e-01, -5.3494e-01, -5.5902e-01, -6.8420e-01,
         -2.2931e+00,  2.0284e-01, -2.2207e-01, -3.2619e-01,  1.2828e-01,
          3.8325e-01,  4.2173e-01, -2.2964e-01,  3.9167e-01, -1.8947e-02,
          5.2178e-02, -1.3657e-02, -5.9254e-03, -4.1611e-02, -1.3526e-01,
         -1.3783e-01,  2.4778e-02,  1.5600e-01, -3.1855e-02, -5.3900e-03,
          5.4609e-01, -2.3010e-01,  1.0112e-01,  2.1692e-01,  1.1220e-01,
         -1.6304e-02,  6.8126e-02,  1.9201e-01, -6.2669e-04, -2.6006e-02,
          8.3116e-02, -6.0111e-02,  1.0754e+00,  2.0769e-01, -1.4439e-01,
         -5.9474e-02, -5.5055e-02, -2.6241e-01,  8.3448e-03, -7.5951e-03,
          7.5418e-02,  1.0045e-01, -1.0443e-01, -1.6048e-01, -5.1366e-01,
          6.0307e-01, -1.2125e-01,  8.9986e-02,  3.5487e-01, -1.6356e-01,
         -1.2180e+00,  3.8153e-01, -1.0808e-01,  4.2944e-01, -3.6833e-01,
         -1.0364e-01, -4.4946e-01, -2.0152e-01,  1.0608e-01,  4.7096e-01,
         -4.1324e-01,  1.8843e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
892000 特征值优化 tensor(0.6435, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9943e+00,  7.5336e-01, -2.7544e-01, -4.9903e-01, -1.7992e+00,
         -1.4046e+00, -3.3343e-01, -5.3387e-01, -5.5851e-01, -6.7344e-01,
         -2.2993e+00,  1.8909e-01, -2.2192e-01, -3.2953e-01,  1.4650e-01,
          3.9172e-01,  4.1572e-01, -2.2586e-01,  3.9482e-01, -1.6800e-02,
          5.2014e-02, -1.4012e-02, -1.7855e-02, -5.7983e-02, -1.4166e-01,
         -1.2496e-01,  2.8217e-02,  1.5907e-01, -2.7168e-02, -5.6915e-03,
          5.4619e-01, -2.3004e-01,  1.0075e-01,  2.1709e-01,  1.0658e-01,
         -2.5346e-02,  6.6549e-02,  1.9330e-01,  3.2640e-03, -2.6565e-02,
          8.4317e-02, -6.2311e-02,  1.0788e+00,  1.9970e-01, -1.3868e-01,
         -4.8098e-02, -6.0249e-02, -2.6754e-01,  2.5247e-03,  5.9865e-04,
          7.2173e-02,  1.0381e-01, -1.0227e-01, -1.6067e-01, -5.1977e-01,
          5.9731e-01, -1.2978e-01,  9.5291e-02,  3.5191e-01, -1.5277e-01,
         -1.2220e+00,  3.8140e-01, -1.1168e-01,  4.3256e-01, -3.5556e-01,
         -1.0849e-01, -4.6000e-01, -1.9583e-01,  1.0901e-01,  4.7342e-01,
         -4.1807e-01,  1.9346e-01]], device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
893000 特征值优化 tensor(0.6426, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9949e+00,  7.5425e-01, -2.7468e-01, -4.9426e-01, -1.7964e+00,
         -1.4092e+00, -3.2790e-01, -5.3076e-01, -5.5527e-01, -6.6855e-01,
         -2.2986e+00,  1.7847e-01, -2.2213e-01, -3.3555e-01,  1.5618e-01,
          3.9341e-01,  4.1378e-01, -2.2597e-01,  3.9426e-01, -1.2883e-02,
          5.1920e-02, -1.3485e-02, -3.6702e-02, -5.2505e-02, -1.4992e-01,
         -1.1821e-01,  3.1384e-02,  1.6375e-01, -2.8686e-02, -5.3532e-03,
          5.4525e-01, -2.2890e-01,  9.8239e-02,  2.1745e-01,  1.0730e-01,
         -2.9313e-02,  6.6965e-02,  1.9351e-01,  2.5496e-03, -2.6664e-02,
          8.3037e-02, -6.2593e-02,  1.0770e+00,  2.0176e-01, -1.3851e-01,
         -4.7115e-02, -6.1192e-02, -2.6793e-01, -7.9158e-04,  2.2436e-03,
          6.7892e-02,  1.0400e-01, -1.0251e-01, -1.5868e-01, -5.2079e-01,
          5.9193e-01, -1.2885e-01,  9.6020e-02,  3.5044e-01, -1.4706e-01,
         -1.2232e+00,  3.8228e-01, -1.1399e-01,  4.3473e-01, -3.5561e-01,
         -1.0786e-01, -4.6890e-01, -1.9353e-01,  1.0907e-01,  4.7072e-01,
         -4.2093e-01,  1.9650e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
894000 特征值优化 tensor(0.6441, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9883e+00,  7.5052e-01, -2.7796e-01, -4.9512e-01, -1.8079e+00,
         -1.4030e+00, -3.4468e-01, -5.3775e-01, -5.6320e-01, -6.8694e-01,
         -2.2973e+00,  1.7385e-01, -2.2184e-01, -3.2255e-01,  1.4285e-01,
          3.9131e-01,  4.2093e-01, -2.2719e-01,  3.9769e-01, -1.8125e-02,
          5.2180e-02, -1.3969e-02, -1.7218e-02, -3.5189e-02, -1.4554e-01,
         -1.3096e-01,  3.1277e-02,  1.6183e-01, -3.0029e-02, -5.3911e-03,
          5.4893e-01, -2.3040e-01,  1.0153e-01,  2.1699e-01,  1.0894e-01,
         -2.1284e-02,  6.4694e-02,  1.9332e-01, -3.3741e-03, -2.7959e-02,
          8.4471e-02, -6.1591e-02,  1.0760e+00,  1.9759e-01, -1.3587e-01,
         -4.5414e-02, -6.0353e-02, -2.6530e-01,  2.0693e-03, -8.8368e-04,
          7.3700e-02,  1.0102e-01, -1.0606e-01, -1.6239e-01, -5.2496e-01,
          5.9366e-01, -1.2544e-01,  9.3613e-02,  3.6168e-01, -1.5274e-01,
         -1.2211e+00,  3.7979e-01, -1.0888e-01,  4.3470e-01, -3.6040e-01,
         -1.0493e-01, -4.5905e-01, -2.0258e-01,  1.0632e-01,  4.7748e-01,
         -4.1977e-01,  1.8479e-01]], device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
895000 特征值优化 tensor(0.6386, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9971e+00,  7.4213e-01, -2.6383e-01, -5.0876e-01, -1.8140e+00,
         -1.4238e+00, -3.2046e-01, -5.3823e-01, -5.5598e-01, -7.2185e-01,
         -2.2940e+00,  1.9674e-01, -2.2218e-01, -3.5194e-01,  1.3084e-01,
          3.5124e-01,  4.6834e-01, -2.4688e-01,  3.8289e-01, -5.9924e-02,
          5.1584e-02, -1.3273e-02,  4.0647e-02, -3.9776e-03, -1.0608e-01,
         -1.3660e-01,  3.7992e-02,  1.5624e-01, -5.0614e-02, -7.0506e-03,
          5.4953e-01, -2.3437e-01,  1.0695e-01,  2.1792e-01,  1.2268e-01,
         -2.5230e-02,  6.0426e-02,  1.9623e-01, -1.1339e-02, -2.2709e-02,
          9.0479e-02, -4.8567e-02,  1.0806e+00,  1.9930e-01, -1.4120e-01,
         -3.7076e-02, -6.4123e-02, -2.7355e-01,  3.5385e-03, -1.6221e-03,
          9.7155e-02,  9.5123e-02, -1.1312e-01, -1.5880e-01, -5.0687e-01,
          6.1398e-01, -1.3139e-01,  1.0076e-01,  3.7367e-01, -1.4382e-01,
         -1.2143e+00,  3.8002e-01, -1.0364e-01,  4.2249e-01, -3.6943e-01,
         -9.8929e-02, -4.4722e-01, -1.9982e-01,  1.0250e-01,  4.6719e-01,
         -4.3122e-01,  1.9449e-01]], device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
896000 特征值优化 tensor(0.6383, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0008,  0.7469, -0.2588, -0.4785, -1.8128, -1.4216, -0.3690, -0.5315,
         -0.6174, -0.7161, -2.3039,  0.1749, -0.2224, -0.3118,  0.2109,  0.4434,
          0.4081, -0.2107,  0.3990,  0.0070,  0.0507, -0.0149, -0.0155, -0.0859,
         -0.1554, -0.1250,  0.0272,  0.1422, -0.0195, -0.0056,  0.5504, -0.2361,
          0.1075,  0.2172,  0.0978, -0.0613,  0.0567,  0.1948, -0.0085, -0.0400,
          0.0881, -0.0720,  1.0826,  0.1792, -0.1211, -0.0087, -0.0811, -0.2720,
         -0.0163,  0.0207,  0.0637,  0.1019, -0.1122, -0.1595, -0.5436,  0.5876,
         -0.1385,  0.1041,  0.3582, -0.1243, -1.2311,  0.3762, -0.1111,  0.4345,
         -0.3201, -0.1371, -0.5067, -0.1856,  0.1148,  0.4792, -0.4923,  0.2038]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
897000 特征值优化 tensor(0.6814, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0008e+00,  7.4650e-01, -2.6534e-01, -5.0599e-01, -1.8045e+00,
         -1.4205e+00, -3.4470e-01, -5.1898e-01, -6.1075e-01, -7.2083e-01,
         -2.2765e+00,  1.5293e-01, -2.2235e-01, -3.3015e-01,  2.1081e-01,
          4.2466e-01,  3.9518e-01, -2.2552e-01,  4.0482e-01,  1.1462e-02,
          5.1686e-02, -1.5056e-02, -2.5698e-02, -7.8447e-02, -1.3873e-01,
         -1.1892e-01,  3.0535e-02,  1.5493e-01, -2.4845e-02, -5.5127e-03,
          5.4706e-01, -2.3250e-01,  1.0238e-01,  2.1744e-01,  9.8312e-02,
         -5.8733e-02,  6.4083e-02,  1.9370e-01,  1.4338e-04, -3.9622e-02,
          8.3109e-02, -7.8782e-02,  1.0819e+00,  1.8451e-01, -1.2593e-01,
         -1.7729e-02, -7.5482e-02, -2.7486e-01, -2.0394e-02,  2.8784e-02,
          7.3804e-02,  1.0445e-01, -9.9707e-02, -1.6169e-01, -5.3227e-01,
          5.9469e-01, -1.3843e-01,  1.0347e-01,  3.5274e-01, -1.2711e-01,
         -1.2359e+00,  3.8339e-01, -1.1677e-01,  4.3477e-01, -3.1577e-01,
         -1.3490e-01, -4.9352e-01, -1.8762e-01,  1.0216e-01,  4.7163e-01,
         -4.7596e-01,  2.0741e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
898000 特征值优化 tensor(0.6381, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9985,  0.7461, -0.2616, -0.5027, -1.8072, -1.4226, -0.3501, -0.5192,
         -0.6098, -0.7209, -2.2725,  0.1504, -0.2223, -0.3246,  0.2132,  0.4283,
          0.3956, -0.2193,  0.4055,  0.0075,  0.0513, -0.0146, -0.0383, -0.0739,
         -0.1474, -0.1133,  0.0336,  0.1475, -0.0177, -0.0050,  0.5475, -0.2336,
          0.1039,  0.2170,  0.1019, -0.0537,  0.0620,  0.1936, -0.0047, -0.0396,
          0.0848, -0.0778,  1.0820,  0.1826, -0.1250, -0.0162, -0.0763, -0.2742,
         -0.0358,  0.0427,  0.0604,  0.1089, -0.1053, -0.1606, -0.5358,  0.5917,
         -0.1352,  0.1030,  0.3559, -0.1275, -1.2350,  0.3812, -0.1166,  0.4349,
         -0.3218, -0.1280, -0.4945, -0.1941,  0.1008,  0.4750, -0.4806,  0.2010]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
899000 特征值优化 tensor(0.6397, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9964e+00,  7.4376e-01, -2.6575e-01, -4.8228e-01, -1.8062e+00,
         -1.4222e+00, -3.4338e-01, -5.1362e-01, -6.0147e-01, -7.1334e-01,
         -2.2590e+00,  1.4157e-01, -2.2232e-01, -3.2738e-01,  1.9592e-01,
          4.1787e-01,  4.0130e-01, -2.1397e-01,  3.9788e-01,  8.1928e-04,
          5.1196e-02, -1.4501e-02, -4.1318e-02, -7.8689e-02, -1.5885e-01,
         -1.1615e-01,  3.6540e-02,  1.4875e-01, -2.7396e-02, -5.9659e-03,
          5.4815e-01, -2.3461e-01,  1.0457e-01,  2.1721e-01,  1.0347e-01,
         -4.6861e-02,  6.3188e-02,  1.9419e-01, -1.2292e-02, -3.6403e-02,
          8.4758e-02, -6.9200e-02,  1.0803e+00,  1.8827e-01, -1.2976e-01,
         -2.2049e-02, -7.2221e-02, -2.6963e-01, -1.4305e-02,  1.8159e-02,
          5.9220e-02,  1.0541e-01, -1.0875e-01, -1.5879e-01, -5.3107e-01,
          5.9683e-01, -1.3180e-01,  1.0143e-01,  3.6171e-01, -1.2745e-01,
         -1.2372e+00,  3.8185e-01, -1.1848e-01,  4.3366e-01, -3.2213e-01,
         -1.2404e-01, -4.9195e-01, -2.0080e-01,  9.5035e-02,  4.7259e-01,
         -4.7239e-01,  1.9317e-01]], device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
900000 特征值优化 tensor(0.6441, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9741,  0.7398, -0.2778, -0.4931, -1.8192, -1.4063, -0.3436, -0.5211,
         -0.5837, -0.7321, -2.2484,  0.1348, -0.2218, -0.3208,  0.1403,  0.3864,
          0.4238, -0.2243,  0.3922, -0.0177,  0.0524, -0.0148, -0.0056, -0.0611,
         -0.1480, -0.1368,  0.0302,  0.1478, -0.0308, -0.0053,  0.5509, -0.2335,
          0.1046,  0.2173,  0.1094, -0.0232,  0.0633,  0.1932, -0.0153, -0.0362,
          0.0863, -0.0675,  1.0652,  0.2045, -0.1388, -0.0433, -0.0588, -0.2642,
          0.0068, -0.0051,  0.0736,  0.1002, -0.1101, -0.1622, -0.5275,  0.5985,
         -0.1219,  0.0925,  0.3646, -0.1455, -1.2256,  0.3779, -0.1165,  0.4324,
         -0.3458, -0.1095, -0.4601, -0.2163,  0.0871,  0.4771, -0.4420,  0.1702]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
901000 特征值优化 tensor(0.6766, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9856,  0.7300, -0.2704, -0.5028, -1.8095, -1.4283, -0.3068, -0.5107,
         -0.5731, -0.7694, -2.2286,  0.1787, -0.2219, -0.3448,  0.1277,  0.3386,
          0.4651, -0.2430,  0.3709, -0.0582,  0.0520, -0.0134,  0.0173,  0.0163,
         -0.1097, -0.1506,  0.0258,  0.1456, -0.0498, -0.0067,  0.5489, -0.2344,
          0.1047,  0.2181,  0.1277, -0.0085,  0.0645,  0.1946, -0.0230, -0.0277,
          0.0866, -0.0518,  1.0744,  0.2038, -0.1434, -0.0416, -0.0580, -0.2708,
          0.0204, -0.0175,  0.0914,  0.0959, -0.1126, -0.1580, -0.4965,  0.6168,
         -0.1174,  0.0924,  0.3783, -0.1410, -1.2221,  0.3824, -0.1129,  0.4232,
         -0.3545, -0.0904, -0.4237, -0.2236,  0.0775,  0.4635, -0.4364,  0.1585]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
902000 特征值优化 tensor(0.6387, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9875,  0.7337, -0.2706, -0.5040, -1.8130, -1.4291, -0.3115, -0.5103,
         -0.5739, -0.7759, -2.2322,  0.1660, -0.2219, -0.3483,  0.1277,  0.3411,
          0.4655, -0.2433,  0.3704, -0.0637,  0.0519, -0.0135,  0.0360,  0.0069,
         -0.1049, -0.1470,  0.0302,  0.1444, -0.0587, -0.0072,  0.5493, -0.2349,
          0.1059,  0.2176,  0.1281, -0.0128,  0.0641,  0.1951, -0.0216, -0.0287,
          0.0874, -0.0555,  1.0761,  0.2001, -0.1423, -0.0372, -0.0617, -0.2703,
          0.0130, -0.0115,  0.0925,  0.0967, -0.1124, -0.1585, -0.4985,  0.6197,
         -0.1155,  0.0943,  0.3734, -0.1389, -1.2219,  0.3822, -0.1140,  0.4239,
         -0.3547, -0.0940, -0.4312, -0.2222,  0.0763,  0.4648, -0.4406,  0.1609]],
       device='cuda:0') tensor(0.2084, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
903000 特征值优化 tensor(0.6390, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9881e+00,  7.3333e-01, -2.6554e-01, -5.0733e-01, -1.8095e+00,
         -1.4266e+00, -3.1016e-01, -5.1528e-01, -5.6368e-01, -7.6482e-01,
         -2.2407e+00,  1.4451e-01, -2.2194e-01, -3.5040e-01,  1.2914e-01,
          3.4623e-01,  4.6463e-01, -2.4258e-01,  3.7181e-01, -5.7970e-02,
          5.1678e-02, -1.3088e-02,  3.4497e-02,  2.8898e-04, -1.0454e-01,
         -1.4220e-01,  3.5333e-02,  1.5383e-01, -5.5707e-02, -6.8239e-03,
          5.4883e-01, -2.3503e-01,  1.0656e-01,  2.1750e-01,  1.2302e-01,
         -2.0523e-02,  6.2907e-02,  1.9619e-01, -1.7421e-02, -2.8788e-02,
          8.9345e-02, -5.7164e-02,  1.0759e+00,  2.0158e-01, -1.4328e-01,
         -3.7773e-02, -6.1288e-02, -2.7310e-01,  6.6416e-03, -4.9290e-03,
          9.4942e-02,  9.6240e-02, -1.1383e-01, -1.5720e-01, -5.0109e-01,
          6.2026e-01, -1.2147e-01,  9.6814e-02,  3.7478e-01, -1.3531e-01,
         -1.2205e+00,  3.8212e-01, -1.1386e-01,  4.2378e-01, -3.5216e-01,
         -9.7386e-02, -4.3606e-01, -2.1741e-01,  7.7566e-02,  4.6681e-01,
         -4.4195e-01,  1.7193e-01]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
904000 特征值优化 tensor(0.6402, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9830,  0.7308, -0.2653, -0.5032, -1.8081, -1.4275, -0.3250, -0.5113,
         -0.5626, -0.7602, -2.2444,  0.1405, -0.2218, -0.3439,  0.1402,  0.3721,
          0.4320, -0.2199,  0.3760, -0.0377,  0.0519, -0.0132,  0.0256,  0.0034,
         -0.1059, -0.1451,  0.0305,  0.1510, -0.0473, -0.0069,  0.5485, -0.2346,
          0.1055,  0.2172,  0.1164, -0.0304,  0.0602,  0.1967, -0.0124, -0.0321,
          0.0887, -0.0641,  1.0737,  0.1986, -0.1406, -0.0394, -0.0592, -0.2725,
         -0.0051,  0.0076,  0.0898,  0.0977, -0.1113, -0.1575, -0.5121,  0.6115,
         -0.1272,  0.1004,  0.3664, -0.1293, -1.2279,  0.3824, -0.1169,  0.4276,
         -0.3407, -0.1044, -0.4501, -0.2121,  0.0813,  0.4666, -0.4631,  0.1833]],
       device='cuda:0') tensor(0.2087, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
905000 特征值优化 tensor(0.6410, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9830,  0.7330, -0.2651, -0.5015, -1.8046, -1.4307, -0.3197, -0.5103,
         -0.5638, -0.7587, -2.2461,  0.1368, -0.2218, -0.3394,  0.1437,  0.3747,
          0.4212, -0.2179,  0.3757, -0.0308,  0.0525, -0.0134,  0.0324, -0.0026,
         -0.1056, -0.1430,  0.0305,  0.1447, -0.0456, -0.0068,  0.5465, -0.2349,
          0.1051,  0.2175,  0.1095, -0.0342,  0.0611,  0.1966, -0.0118, -0.0336,
          0.0880, -0.0679,  1.0747,  0.1986, -0.1396, -0.0415, -0.0589, -0.2724,
         -0.0063,  0.0085,  0.0859,  0.0991, -0.1116, -0.1572, -0.5155,  0.6109,
         -0.1248,  0.0996,  0.3616, -0.1291, -1.2324,  0.3846, -0.1195,  0.4282,
         -0.3300, -0.1096, -0.4547, -0.2115,  0.0807,  0.4661, -0.4725,  0.1841]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
906000 特征值优化 tensor(0.6417, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9823,  0.7373, -0.2627, -0.4988, -1.8055, -1.4306, -0.3218, -0.5072,
         -0.5680, -0.7601, -2.2466,  0.1349, -0.2205, -0.3362,  0.1511,  0.3787,
          0.4152, -0.2143,  0.3747, -0.0271,  0.0534, -0.0134,  0.0377, -0.0038,
         -0.1101, -0.1424,  0.0298,  0.1394, -0.0454, -0.0072,  0.5483, -0.2343,
          0.1045,  0.2178,  0.1064, -0.0375,  0.0610,  0.1960, -0.0112, -0.0344,
          0.0877, -0.0698,  1.0751,  0.1965, -0.1362, -0.0420, -0.0582, -0.2739,
         -0.0110,  0.0142,  0.0846,  0.0987, -0.1109, -0.1577, -0.5185,  0.6074,
         -0.1282,  0.1010,  0.3646, -0.1236, -1.2346,  0.3830, -0.1190,  0.4281,
         -0.3217, -0.1125, -0.4588, -0.2124,  0.0848,  0.4665, -0.4832,  0.1845]],
       device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
907000 特征值优化 tensor(0.6445, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9803,  0.7295, -0.2653, -0.4912, -1.8136, -1.4249, -0.3287, -0.5096,
         -0.5775, -0.7305, -2.2522,  0.1133, -0.2215, -0.3379,  0.1556,  0.4008,
          0.3969, -0.2044,  0.3834, -0.0128,  0.0533, -0.0140,  0.0437, -0.0035,
         -0.1224, -0.1488,  0.0337,  0.1431, -0.0393, -0.0057,  0.5476, -0.2343,
          0.1043,  0.2180,  0.1019, -0.0445,  0.0604,  0.1953, -0.0129, -0.0344,
          0.0880, -0.0697,  1.0716,  0.1911, -0.1277, -0.0517, -0.0503, -0.2731,
         -0.0220,  0.0236,  0.0779,  0.0999, -0.1037, -0.1591, -0.5306,  0.5938,
         -0.1331,  0.1025,  0.3677, -0.1265, -1.2346,  0.3835, -0.1228,  0.4317,
         -0.3074, -0.1154, -0.4786, -0.2075,  0.0842,  0.4701, -0.4996,  0.1852]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
908000 特征值优化 tensor(0.6415, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9815,  0.7404, -0.2698, -0.4862, -1.8116, -1.4187, -0.3291, -0.5050,
         -0.5509, -0.7298, -2.2455,  0.1043, -0.2222, -0.3232,  0.1659,  0.3974,
          0.4126, -0.2131,  0.3894, -0.0113,  0.0517, -0.0141, -0.0278, -0.0816,
         -0.1623, -0.1267,  0.0366,  0.1436, -0.0270, -0.0046,  0.5507, -0.2332,
          0.1033,  0.2177,  0.1068, -0.0343,  0.0631,  0.1939, -0.0121, -0.0353,
          0.0859, -0.0686,  1.0693,  0.1990, -0.1357, -0.0332, -0.0649, -0.2678,
         -0.0036,  0.0061,  0.0623,  0.1026, -0.1090, -0.1601, -0.5270,  0.5918,
         -0.1183,  0.0937,  0.3658, -0.1318, -1.2339,  0.3808, -0.1255,  0.4337,
         -0.3238, -0.1045, -0.4763, -0.2138,  0.0855,  0.4738, -0.4708,  0.1689]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
909000 特征值优化 tensor(0.6559, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9860,  0.7168, -0.2751, -0.5038, -1.8158, -1.4192, -0.3170, -0.5074,
         -0.5487, -0.7843, -2.2320,  0.1290, -0.2207, -0.3390,  0.1171,  0.3514,
          0.4535, -0.2328,  0.3870, -0.0378,  0.0529, -0.0154,  0.0153, -0.0044,
         -0.1263, -0.1584,  0.0212,  0.1503, -0.0347, -0.0042,  0.5513, -0.2342,
          0.1053,  0.2163,  0.1145, -0.0109,  0.0618,  0.1929, -0.0195, -0.0328,
          0.0873, -0.0636,  1.0671,  0.2087, -0.1334, -0.0482, -0.0501, -0.2664,
          0.0232, -0.0178,  0.0907,  0.0921, -0.1090, -0.1590, -0.5106,  0.6049,
         -0.1188,  0.0890,  0.3752, -0.1392, -1.2229,  0.3765, -0.1166,  0.4232,
         -0.3531, -0.0745, -0.4190, -0.2340,  0.0804,  0.4696, -0.4514,  0.1511]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
910000 特征值优化 tensor(0.6389, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9855,  0.7319, -0.2707, -0.5049, -1.8123, -1.4298, -0.2982, -0.5054,
         -0.5337, -0.7925, -2.2370,  0.1340, -0.2219, -0.3467,  0.1250,  0.3337,
          0.4633, -0.2458,  0.3708, -0.0645,  0.0520, -0.0133,  0.0353,  0.0045,
         -0.1050, -0.1478,  0.0339,  0.1433, -0.0577, -0.0074,  0.5497, -0.2339,
          0.1059,  0.2182,  0.1291, -0.0111,  0.0647,  0.1951, -0.0198, -0.0282,
          0.0881, -0.0567,  1.0751,  0.2007, -0.1421, -0.0382, -0.0610, -0.2704,
          0.0174, -0.0158,  0.0942,  0.0961, -0.1120, -0.1581, -0.4921,  0.6219,
         -0.1112,  0.0918,  0.3780, -0.1358, -1.2191,  0.3809, -0.1174,  0.4224,
         -0.3446, -0.0816, -0.4221, -0.2292,  0.0765,  0.4661, -0.4469,  0.1458]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
911000 特征值优化 tensor(0.6394, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9864e+00,  7.3151e-01, -2.6620e-01, -5.0754e-01, -1.8046e+00,
         -1.4274e+00, -3.0249e-01, -5.0771e-01, -5.2512e-01, -7.7612e-01,
         -2.2442e+00,  1.0711e-01, -2.2194e-01, -3.4918e-01,  1.2653e-01,
          3.4622e-01,  4.5351e-01, -2.3988e-01,  3.7453e-01, -5.5259e-02,
          5.1904e-02, -1.3059e-02,  3.7596e-02, -2.8967e-03, -1.0588e-01,
         -1.4221e-01,  3.9561e-02,  1.5314e-01, -5.4624e-02, -7.1064e-03,
          5.4804e-01, -2.3397e-01,  1.0626e-01,  2.1822e-01,  1.2102e-01,
         -2.4068e-02,  6.3121e-02,  1.9619e-01, -1.4905e-02, -2.8900e-02,
          8.9722e-02, -6.0144e-02,  1.0752e+00,  2.0275e-01, -1.4466e-01,
         -3.9329e-02, -6.0323e-02, -2.7345e-01,  3.1072e-03, -1.0309e-03,
          9.6024e-02,  9.5768e-02, -1.1276e-01, -1.5662e-01, -4.9777e-01,
          6.1771e-01, -1.1794e-01,  9.3937e-02,  3.7617e-01, -1.2877e-01,
         -1.2205e+00,  3.8009e-01, -1.1892e-01,  4.2349e-01, -3.3959e-01,
         -8.8202e-02, -4.3504e-01, -2.2127e-01,  7.7165e-02,  4.6800e-01,
         -4.5873e-01,  1.6639e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
912000 特征值优化 tensor(0.6439, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9709,  0.7282, -0.2638, -0.4851, -1.8032, -1.4285, -0.3294, -0.5086,
         -0.5436, -0.7354, -2.2603,  0.0924, -0.2212, -0.3324,  0.1563,  0.3956,
          0.3975, -0.2064,  0.3786, -0.0136,  0.0522, -0.0139,  0.0441, -0.0036,
         -0.1221, -0.1484,  0.0340,  0.1449, -0.0385, -0.0060,  0.5453, -0.2338,
          0.1055,  0.2173,  0.1018, -0.0465,  0.0597,  0.1961, -0.0080, -0.0351,
          0.0886, -0.0722,  1.0731,  0.1884, -0.1304, -0.0477, -0.0539, -0.2724,
         -0.0209,  0.0228,  0.0772,  0.0979, -0.1060, -0.1575, -0.5286,  0.5929,
         -0.1334,  0.1035,  0.3656, -0.1171, -1.2325,  0.3817, -0.1250,  0.4330,
         -0.3063, -0.1068, -0.4794, -0.2091,  0.0821,  0.4746, -0.5112,  0.1818]],
       device='cuda:0') tensor(0.2108, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
913000 特征值优化 tensor(6.7032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3095e+00,  8.2428e-01, -4.1178e-01, -2.0772e+00, -3.5070e-01,
         -4.2589e-01, -2.5448e+00,  1.1453e+00, -2.9732e-01,  2.6603e-01,
          1.2854e-01, -1.2780e+00,  1.3652e-01,  8.1288e-01, -2.4332e-01,
         -4.6261e-01, -5.3263e-01,  3.7142e-01,  4.5866e-01, -1.2998e-02,
         -3.6611e-01, -8.3418e-01,  3.0589e-01,  4.3651e-01,  1.4412e-01,
         -2.3677e-02, -2.7129e-01, -1.1997e-01, -6.3628e-01, -7.6945e-01,
         -3.1992e-02,  3.6823e-02, -1.3347e-01, -1.5297e-02,  2.1439e-01,
         -2.1336e-01,  8.0303e-01,  9.6065e-01,  8.1884e-01, -5.1593e-01,
         -8.9485e-01, -2.0571e-01,  3.5136e-02, -4.3872e-01,  2.7503e-01,
          3.5433e-04, -8.8783e-01,  1.6281e-01,  5.8732e-02, -6.2829e-01,
         -4.7589e-01, -7.4705e-01, -4.0718e-01,  3.2258e-01,  7.1656e-01,
         -8.9265e-01, -1.2513e+00,  1.4977e+00, -4.1454e-02,  3.6824e-02,
         -2.2070e+00, -7.7695e-01,  3.8071e-01,  9.9854e-01, -1.1370e+00,
          7.1999e-01,  1.7561e+00, -3.1892e-01, -1.7052e+00, -2.0548e-01,
         -1.0137e+00,  8.6292e-01]], device='cuda:0') tensor(0.2058, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
914000 特征值优化 tensor(1.0201, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6171, -0.1538, -0.8677, -1.3920, -1.1457, -1.3781, -3.0300,  1.8343,
         -0.7896,  0.2291, -0.5926, -1.0970,  0.1639,  0.0902,  0.0227, -0.2475,
         -0.1687,  0.0285,  0.0676, -0.0718, -0.0718, -0.5231,  0.0051,  0.0303,
          0.1697, -0.1983, -0.2341, -0.2902, -0.0970, -0.4309, -0.0176, -0.0048,
         -0.0855, -0.0119,  0.0939,  0.0276,  0.3431,  0.4500,  0.3791, -0.3395,
         -0.3178,  0.0191,  0.3087, -0.3030,  0.1174, -0.1416, -0.2329, -0.0681,
         -0.0384, -0.5328, -0.1218, -0.5002,  0.1881,  0.0088,  0.9613, -0.2833,
         -0.4808,  0.5240,  0.0573,  0.2454, -0.9421, -0.7633, -0.0281,  0.4711,
         -1.1833,  0.4205,  1.1501, -0.3549, -0.7588, -0.2211, -0.3513,  0.4936]],
       device='cuda:0') tensor(0.2120, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
915000 特征值优化 tensor(0.7869, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6130e+00, -1.4709e-01, -8.4301e-01, -1.0213e+00, -1.0779e+00,
         -1.5985e+00, -3.0664e+00,  1.9221e+00, -7.4096e-01,  2.2961e-01,
         -5.9702e-01, -1.1931e+00,  1.6631e-01, -2.7364e-02, -4.9716e-03,
         -3.1222e-01, -2.6587e-01, -1.5580e-01,  3.0090e-01, -9.8484e-02,
         -8.2683e-02, -4.7095e-01,  1.3367e-02, -5.0764e-02,  2.1686e-01,
         -1.6465e-01, -1.7684e-01, -3.7795e-01, -9.4954e-02, -3.6350e-01,
          3.6442e-03,  4.4969e-03, -5.5011e-02, -1.5312e-03,  1.0033e-01,
          3.3466e-02,  2.7816e-01,  3.6918e-01,  2.9351e-01, -3.0239e-01,
         -2.3983e-01,  4.1977e-03,  2.3180e-01, -4.2848e-01,  2.6118e-01,
         -2.3350e-01, -1.7075e-01,  1.9822e-02,  1.5762e-02, -5.0132e-01,
         -2.1650e-01, -3.9673e-01,  5.0372e-02,  1.0639e-01,  1.0141e+00,
         -3.1636e-01, -3.2365e-02,  3.0298e-01, -1.3851e-01,  1.3287e-01,
         -7.6640e-01, -7.5124e-01,  7.4369e-02,  4.2495e-01, -9.0228e-01,
          3.4505e-01,  7.1893e-01, -2.1556e-01, -5.6632e-01, -2.2156e-01,
          2.1181e-01,  2.7041e-01]], device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
916000 特征值优化 tensor(0.6996, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6057e+00, -6.7616e-02, -7.2590e-01, -8.6512e-01, -1.0323e+00,
         -1.7489e+00, -3.0771e+00,  1.9700e+00, -6.1956e-01,  3.6606e-01,
         -5.9079e-01, -1.2247e+00,  1.6413e-01,  5.0539e-03, -4.5206e-02,
         -3.3146e-01, -2.8557e-01, -2.1213e-01,  3.0205e-01, -1.2876e-01,
         -8.8255e-02, -4.5224e-01,  1.2938e-01, -6.9022e-02,  2.0182e-01,
         -2.1858e-01, -1.5975e-01, -3.9447e-01, -9.6945e-02, -3.3764e-01,
          2.2472e-03,  3.2309e-02, -2.0299e-02, -1.5098e-02,  8.5577e-02,
         -1.1561e-02,  2.1115e-01,  3.2962e-01,  2.5423e-01, -2.6847e-01,
         -2.1112e-01, -2.0489e-02,  1.4666e-01, -4.1086e-01,  3.2677e-01,
         -3.5830e-01, -1.1313e-01, -7.9083e-03,  4.8333e-02, -4.7733e-01,
         -2.5545e-01, -3.4739e-01,  7.4862e-03,  1.2302e-01,  9.9962e-01,
         -3.5642e-01,  1.4556e-01,  1.9833e-01, -4.9781e-02, -1.1603e-02,
         -6.5271e-01, -7.9437e-01,  1.9353e-01,  4.2586e-01, -6.4030e-01,
          2.6039e-01,  3.7551e-01, -1.2521e-01, -6.2599e-01, -1.7998e-01,
          4.8201e-01,  1.6066e-01]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
917000 特征值优化 tensor(0.7021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5740e+00, -5.0352e-02, -6.6948e-01, -7.6039e-01, -1.0363e+00,
         -1.7100e+00, -3.0669e+00,  2.0442e+00, -6.2852e-01,  4.6922e-01,
         -5.7260e-01, -1.3454e+00,  1.6887e-01, -1.9135e-02, -3.9890e-02,
         -2.9750e-01, -3.3774e-01, -2.8450e-01,  2.4382e-01, -1.3119e-01,
         -8.3884e-02, -4.3377e-01,  7.7276e-02, -4.0667e-02,  2.4307e-01,
         -2.0736e-01, -1.0443e-01, -3.5811e-01, -9.5974e-02, -3.1815e-01,
          1.7434e-03,  3.2747e-02, -2.1500e-02, -1.4162e-02,  8.2949e-02,
          5.5374e-03,  1.4653e-01,  3.1049e-01,  2.5049e-01, -2.7558e-01,
         -1.8303e-01, -1.2650e-02,  1.3535e-01, -4.0515e-01,  3.3526e-01,
         -3.6056e-01, -1.0582e-01, -6.9826e-03,  7.6404e-02, -4.7429e-01,
         -2.8753e-01, -3.2630e-01,  1.1577e-03,  1.3039e-01,  1.0014e+00,
         -3.5203e-01,  1.5627e-01,  1.9372e-01, -4.9689e-02,  3.1140e-02,
         -6.0914e-01, -8.1124e-01,  2.0715e-01,  4.4120e-01, -6.0556e-01,
          2.5306e-01,  3.1917e-01, -8.9841e-02, -6.4503e-01, -1.5906e-01,
          4.8130e-01,  1.4909e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
918000 特征值优化 tensor(0.6996, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5795, -0.0343, -0.6331, -0.7248, -1.0535, -1.7250, -3.0009,  2.1693,
         -0.7159,  0.4464, -0.5215, -1.3534,  0.1683,  0.0083,  0.0500, -0.3651,
         -0.3245, -0.2817,  0.2252, -0.1274, -0.0855, -0.4221, -0.0533, -0.0702,
          0.2375, -0.2035, -0.1140, -0.3208, -0.0957, -0.3062,  0.0035, -0.0293,
          0.0057, -0.0128,  0.0607,  0.0505,  0.0074,  0.3125,  0.2747, -0.2894,
         -0.1602, -0.0046,  0.1423, -0.4091,  0.3260, -0.3648, -0.1092, -0.0033,
          0.0936, -0.4697, -0.2837, -0.3155,  0.0031,  0.1309,  0.9843, -0.3038,
          0.1845,  0.1846, -0.0301,  0.0254, -0.5936, -0.7623,  0.2085,  0.4627,
         -0.6167,  0.2257,  0.3580, -0.0830, -0.6752, -0.1684,  0.4784,  0.1486]],
       device='cuda:0') tensor(0.2077, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
919000 特征值优化 tensor(0.7069, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5952e+00, -4.6812e-02, -5.8493e-01, -6.6634e-01, -1.0441e+00,
         -1.7102e+00, -2.9322e+00,  2.1682e+00, -8.1842e-01,  4.1119e-01,
         -5.4768e-01, -1.3216e+00,  1.6643e-01,  3.0693e-02, -1.2350e-02,
         -3.3414e-01, -3.0037e-01, -2.4719e-01,  2.7723e-01, -1.2298e-01,
         -8.7498e-02, -4.0805e-01, -5.7558e-02, -1.4401e-01,  2.3918e-01,
         -1.7230e-01, -1.2493e-01, -3.0732e-01, -9.5793e-02, -2.9249e-01,
          3.4794e-03,  8.0113e-04, -1.8838e-02, -1.0874e-02,  7.8104e-02,
          4.0844e-02, -1.3708e-01,  3.6681e-01,  2.8733e-01, -2.9411e-01,
         -1.6972e-01, -2.7815e-03,  1.5116e-01, -4.1555e-01,  3.1898e-01,
         -3.6392e-01, -1.1263e-01, -9.5240e-04,  1.0837e-01, -4.5369e-01,
         -2.8168e-01, -3.0205e-01,  8.0105e-03,  1.2365e-01,  9.6530e-01,
         -2.4968e-01,  1.9482e-01,  1.8439e-01, -2.4336e-02,  3.3166e-02,
         -6.3057e-01, -7.5743e-01,  2.2689e-01,  4.7189e-01, -5.8768e-01,
          1.9264e-01,  3.7131e-01, -7.2587e-02, -6.5658e-01, -1.5994e-01,
          4.5270e-01,  1.5825e-01]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
920000 特征值优化 tensor(0.7030, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5804e+00, -3.0883e-02, -5.5821e-01, -6.3647e-01, -1.0408e+00,
         -1.7139e+00, -2.9336e+00,  2.1543e+00, -8.3963e-01,  3.9132e-01,
         -5.6466e-01, -1.3045e+00,  1.7055e-01,  4.2959e-02, -7.3417e-03,
         -3.4221e-01, -2.9396e-01, -2.4127e-01,  2.7968e-01, -1.2342e-01,
         -8.4984e-02, -4.0428e-01, -7.4645e-02, -1.4765e-01,  2.3658e-01,
         -1.8396e-01, -1.0918e-01, -2.9984e-01, -9.5257e-02, -2.8804e-01,
          2.8136e-03,  1.4549e-02, -7.8767e-03, -1.0971e-02,  6.6987e-02,
          4.4813e-02, -1.8191e-01,  4.1253e-01,  2.9449e-01, -2.9273e-01,
         -1.9902e-01, -5.5538e-03,  1.4856e-01, -4.0956e-01,  3.2051e-01,
         -3.6547e-01, -1.0848e-01, -1.0854e-02,  1.1397e-01, -4.5446e-01,
         -2.8920e-01, -2.9929e-01,  6.5032e-03,  1.2421e-01,  9.6105e-01,
         -2.4131e-01,  1.8892e-01,  1.8537e-01, -2.6304e-02,  2.6819e-02,
         -6.4265e-01, -7.3806e-01,  2.1810e-01,  4.6402e-01, -5.8303e-01,
          1.8066e-01,  3.8632e-01, -7.7913e-02, -6.4276e-01, -1.7356e-01,
          4.5333e-01,  1.6277e-01]], device='cuda:0') tensor(0.2122, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
921000 特征值优化 tensor(0.6960, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5859e+00, -3.0183e-02, -5.5413e-01, -6.4562e-01, -1.0559e+00,
         -1.7292e+00, -2.9223e+00,  2.1707e+00, -8.4616e-01,  3.9115e-01,
         -5.6990e-01, -1.2843e+00,  1.7059e-01, -2.3777e-02, -5.2328e-02,
         -3.0004e-01, -3.3122e-01, -2.3174e-01,  3.1773e-01, -1.2269e-01,
         -8.4552e-02, -4.0372e-01, -4.3073e-02, -1.8803e-01,  2.3004e-01,
         -1.9527e-01, -1.0931e-01, -3.0767e-01, -9.5739e-02, -2.8801e-01,
          4.7343e-03,  1.2810e-02, -3.1152e-02, -1.5192e-02,  9.2245e-02,
          4.4628e-03, -2.2125e-01,  4.1900e-01,  3.0087e-01, -2.9064e-01,
         -1.9856e-01, -9.6980e-03,  1.5041e-01, -4.1206e-01,  3.2318e-01,
         -3.6901e-01, -1.0522e-01, -1.1995e-02,  1.1391e-01, -4.5386e-01,
         -2.8378e-01, -2.9965e-01,  3.6604e-04,  1.2841e-01,  9.5334e-01,
         -2.1454e-01,  1.8204e-01,  1.8564e-01, -1.5054e-02,  2.1509e-02,
         -6.5334e-01, -7.5456e-01,  2.3038e-01,  4.6669e-01, -5.8383e-01,
          1.8564e-01,  3.8681e-01, -8.4865e-02, -6.4056e-01, -1.5981e-01,
          4.4426e-01,  1.6678e-01]], device='cuda:0') tensor(0.2081, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
922000 特征值优化 tensor(0.6981, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5798, -0.0306, -0.5539, -0.6453, -1.0468, -1.7270, -2.9452,  2.1546,
         -0.8536,  0.3824, -0.5985, -1.2628,  0.1696, -0.0117, -0.0575, -0.3239,
         -0.3103, -0.2464,  0.3023, -0.1229, -0.0848, -0.4041, -0.0767, -0.1685,
          0.2312, -0.2071, -0.1096, -0.3054, -0.0958, -0.2888,  0.0045,  0.0089,
         -0.0268, -0.0146,  0.0792,  0.0291, -0.2237,  0.4304,  0.3000, -0.2894,
         -0.2049, -0.0100,  0.1470, -0.4112,  0.3224, -0.3690, -0.1064, -0.0137,
          0.1133, -0.4555, -0.2839, -0.3011, -0.0036,  0.1276,  0.9554, -0.2158,
          0.1886,  0.1822, -0.0254,  0.0142, -0.6596, -0.7592,  0.2285,  0.4637,
         -0.5895,  0.1825,  0.3821, -0.0849, -0.6192, -0.1668,  0.4379,  0.1740]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
923000 特征值优化 tensor(0.6903, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6014e+00, -4.4926e-02, -5.5353e-01, -6.5855e-01, -1.0523e+00,
         -1.7547e+00, -2.9753e+00,  2.1999e+00, -8.0205e-01,  3.9611e-01,
         -5.4199e-01, -1.2826e+00,  1.6979e-01,  4.1245e-02, -1.6163e-02,
         -3.9258e-01, -2.8151e-01, -2.4561e-01,  2.3704e-01, -1.2272e-01,
         -8.5273e-02, -4.0353e-01, -1.5559e-01, -8.5765e-02,  2.4062e-01,
         -2.4805e-01, -5.6212e-02, -2.8923e-01, -9.5704e-02, -2.8834e-01,
          3.6657e-03,  8.1797e-03,  1.3049e-02, -1.4196e-02,  6.2842e-02,
          3.7115e-02, -2.0844e-01,  4.5578e-01,  2.9050e-01, -2.9509e-01,
         -2.3847e-01, -1.3163e-03,  1.5688e-01, -4.1364e-01,  3.2242e-01,
         -3.6215e-01, -1.0704e-01, -1.2178e-02,  1.1440e-01, -4.5469e-01,
         -2.7646e-01, -3.0089e-01, -4.1481e-03,  1.3162e-01,  9.6192e-01,
         -2.2278e-01,  1.9490e-01,  1.7423e-01, -3.4533e-02,  2.8441e-03,
         -6.6106e-01, -7.0902e-01,  1.9682e-01,  4.6361e-01, -5.8993e-01,
          1.8933e-01,  3.8562e-01, -8.8077e-02, -6.4266e-01, -2.2110e-01,
          4.4615e-01,  1.6909e-01]], device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
924000 特征值优化 tensor(0.7021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5810e+00, -3.8499e-02, -5.6279e-01, -6.4824e-01, -1.0427e+00,
         -1.7273e+00, -2.9903e+00,  2.1723e+00, -8.4777e-01,  3.6192e-01,
         -6.1000e-01, -1.2587e+00,  1.7000e-01, -2.0374e-02, -5.2176e-02,
         -3.4007e-01, -2.9112e-01, -2.4998e-01,  2.9052e-01, -1.2390e-01,
         -8.4514e-02, -4.0504e-01, -9.1655e-02, -1.3741e-01,  2.2910e-01,
         -1.9961e-01, -1.2968e-01, -2.9225e-01, -9.5787e-02, -2.8952e-01,
          4.8103e-03, -3.3190e-03, -1.8240e-02, -1.6631e-02,  7.1480e-02,
          3.9125e-02, -2.2306e-01,  4.3685e-01,  3.0814e-01, -2.8791e-01,
         -2.1209e-01, -1.5662e-02,  1.4950e-01, -4.0908e-01,  3.2193e-01,
         -3.6113e-01, -1.0856e-01, -8.4930e-03,  1.1246e-01, -4.5405e-01,
         -2.8277e-01, -2.9937e-01, -2.6658e-03,  1.2666e-01,  9.5880e-01,
         -2.1935e-01,  1.8152e-01,  1.8294e-01, -3.0137e-02,  2.0691e-02,
         -6.5222e-01, -7.6806e-01,  2.2571e-01,  4.7368e-01, -5.8535e-01,
          1.7663e-01,  3.9050e-01, -8.3820e-02, -6.2353e-01, -1.7797e-01,
          4.5039e-01,  1.6535e-01]], device='cuda:0') tensor(0.2059, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
925000 特征值优化 tensor(0.7124, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5934e+00, -3.4390e-02, -5.5629e-01, -6.4256e-01, -1.0506e+00,
         -1.7385e+00, -3.0238e+00,  2.1860e+00, -8.1286e-01,  4.0852e-01,
         -6.0808e-01, -1.2904e+00,  1.7048e-01,  2.1843e-02, -1.5594e-02,
         -3.9129e-01, -2.7136e-01, -2.5909e-01,  2.3438e-01, -1.2371e-01,
         -8.5333e-02, -4.0234e-01, -1.4533e-01, -8.7868e-02,  2.4233e-01,
         -2.1147e-01, -9.9858e-02, -2.7195e-01, -9.6899e-02, -2.8665e-01,
          5.8346e-03, -5.0974e-03,  4.0271e-04, -1.6398e-02,  7.9746e-02,
          4.0532e-02, -2.0430e-01,  4.4842e-01,  2.9404e-01, -2.9022e-01,
         -2.2507e-01, -7.7605e-03,  1.5200e-01, -4.1075e-01,  3.2136e-01,
         -3.6547e-01, -1.0612e-01, -9.6201e-03,  1.1425e-01, -4.5198e-01,
         -2.8221e-01, -3.0089e-01, -1.5030e-03,  1.2361e-01,  9.6541e-01,
         -2.3342e-01,  1.9940e-01,  1.7536e-01, -2.2041e-02,  1.5306e-02,
         -6.3249e-01, -7.6010e-01,  2.1190e-01,  4.7999e-01, -6.0242e-01,
          1.9846e-01,  3.7555e-01, -8.6975e-02, -6.4349e-01, -1.8089e-01,
          4.4743e-01,  1.6887e-01]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
926000 特征值优化 tensor(0.6940, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5987e+00, -4.3924e-02, -5.3993e-01, -6.4839e-01, -1.0582e+00,
         -1.7566e+00, -3.0558e+00,  2.2127e+00, -7.9098e-01,  4.1015e-01,
         -5.9284e-01, -1.3009e+00,  1.7058e-01,  2.5257e-02,  1.3926e-02,
         -4.0278e-01, -2.7130e-01, -2.6932e-01,  2.2208e-01, -1.2244e-01,
         -8.4123e-02, -4.0330e-01, -1.6153e-01, -6.7867e-02,  2.3655e-01,
         -2.2661e-01, -8.3259e-02, -3.0623e-01, -9.5729e-02, -2.8805e-01,
          3.0407e-03,  1.9213e-02, -1.6830e-02, -1.6776e-02,  6.0866e-02,
          5.5396e-02, -2.0346e-01,  4.5672e-01,  2.8743e-01, -2.8952e-01,
         -2.3802e-01, -6.3869e-03,  1.5849e-01, -4.1280e-01,  3.2290e-01,
         -3.6043e-01, -1.0663e-01, -1.8791e-02,  1.1444e-01, -4.5428e-01,
         -2.8131e-01, -3.0060e-01,  8.6022e-03,  1.2768e-01,  9.6480e-01,
         -2.2407e-01,  1.8567e-01,  1.7786e-01, -5.7876e-02, -4.7058e-02,
         -6.4749e-01, -7.3904e-01,  1.9749e-01,  4.7631e-01, -6.0113e-01,
          1.9871e-01,  3.8031e-01, -9.3619e-02, -6.2915e-01, -2.1632e-01,
          4.6805e-01,  1.6454e-01]], device='cuda:0') tensor(0.2032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
927000 特征值优化 tensor(0.7068, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5911e+00, -4.4246e-02, -5.5816e-01, -6.4467e-01, -1.0460e+00,
         -1.7183e+00, -3.0564e+00,  2.2184e+00, -8.3913e-01,  3.9298e-01,
         -6.2550e-01, -1.2884e+00,  1.6934e-01,  1.8837e-02, -3.7410e-02,
         -3.6307e-01, -2.7393e-01, -2.6450e-01,  2.6235e-01, -1.2399e-01,
         -8.4085e-02, -4.0423e-01, -1.2455e-01, -1.1061e-01,  2.3307e-01,
         -2.0447e-01, -1.1980e-01, -2.8982e-01, -9.5936e-02, -2.8818e-01,
          5.3906e-03, -5.2692e-04, -1.4846e-02, -1.6111e-02,  7.7178e-02,
          4.8678e-02, -2.2641e-01,  4.5008e-01,  3.0218e-01, -2.8783e-01,
         -2.2322e-01, -1.5790e-02,  1.5380e-01, -4.0916e-01,  3.2198e-01,
         -3.6165e-01, -1.0741e-01, -9.4424e-03,  1.1424e-01, -4.5662e-01,
         -2.8571e-01, -3.0093e-01, -5.2976e-05,  1.2504e-01,  9.6773e-01,
         -2.2150e-01,  1.9311e-01,  1.8243e-01, -3.9409e-02,  3.3046e-03,
         -6.6768e-01, -7.8123e-01,  2.1184e-01,  4.8063e-01, -5.8846e-01,
          1.8465e-01,  3.7119e-01, -7.5667e-02, -6.1915e-01, -1.8897e-01,
          4.4790e-01,  1.6475e-01]], device='cuda:0') tensor(0.2030, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
928000 特征值优化 tensor(0.7010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5851e+00, -4.5814e-02, -5.5872e-01, -6.4845e-01, -1.0444e+00,
         -1.7210e+00, -3.0706e+00,  2.2170e+00, -8.5488e-01,  3.9357e-01,
         -6.4179e-01, -1.2657e+00,  1.7057e-01, -9.5152e-03, -4.4925e-02,
         -3.4241e-01, -2.9691e-01, -2.4796e-01,  2.9979e-01, -1.2375e-01,
         -8.4282e-02, -4.0366e-01, -1.0248e-01, -1.6106e-01,  2.3135e-01,
         -2.0444e-01, -1.2112e-01, -3.0047e-01, -9.5339e-02, -2.8830e-01,
          4.8985e-03,  3.3723e-03, -1.9956e-02, -1.6236e-02,  7.5364e-02,
          3.1070e-02, -2.4138e-01,  4.4945e-01,  3.0728e-01, -2.8971e-01,
         -2.1762e-01, -1.3829e-02,  1.5125e-01, -4.1064e-01,  3.2339e-01,
         -3.5746e-01, -1.0826e-01, -1.0328e-02,  1.1236e-01, -4.5352e-01,
         -2.8375e-01, -2.9946e-01, -2.8634e-03,  1.2688e-01,  9.6225e-01,
         -2.2003e-01,  1.8098e-01,  1.8403e-01, -2.9276e-02,  1.8087e-02,
         -6.5278e-01, -7.9070e-01,  2.1931e-01,  4.8575e-01, -5.8576e-01,
          1.8050e-01,  3.7595e-01, -8.1107e-02, -6.1419e-01, -1.8795e-01,
          4.4958e-01,  1.6407e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
929000 特征值优化 tensor(0.6947, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6327e+00, -8.5222e-02, -5.5230e-01, -6.5104e-01, -1.0579e+00,
         -1.7324e+00, -3.0922e+00,  2.2223e+00, -8.3773e-01,  3.9388e-01,
         -6.5960e-01, -1.2794e+00,  1.6223e-01, -9.2184e-03, -7.0353e-02,
         -3.5784e-01, -2.9121e-01, -2.4394e-01,  3.0328e-01, -1.2137e-01,
         -9.2750e-02, -4.0458e-01, -8.0757e-02, -1.7740e-01,  2.1298e-01,
         -2.0672e-01, -1.2914e-01, -3.2416e-01, -9.5802e-02, -2.8858e-01,
          3.6929e-03,  3.6688e-02,  1.3686e-04, -1.7144e-02,  7.5050e-02,
          3.6205e-02, -2.4543e-01,  4.4923e-01,  3.1209e-01, -2.8950e-01,
         -2.2059e-01, -1.5812e-02,  1.6414e-01, -4.1524e-01,  3.0424e-01,
         -3.5194e-01, -1.1761e-01, -1.3001e-02,  1.1312e-01, -4.5314e-01,
         -2.8112e-01, -2.9934e-01,  4.9392e-03,  1.2784e-01,  9.6414e-01,
         -2.2623e-01,  1.8310e-01,  1.8299e-01, -2.3842e-02,  3.3005e-02,
         -6.6344e-01, -8.0227e-01,  2.5447e-01,  4.8887e-01, -5.9879e-01,
          1.8793e-01,  3.7103e-01, -7.9664e-02, -6.3176e-01, -1.7585e-01,
          4.5373e-01,  1.6199e-01]], device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
930000 特征值优化 tensor(0.7257, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6583e+00, -9.7780e-02, -5.4247e-01, -6.6088e-01, -1.0614e+00,
         -1.7561e+00, -3.1171e+00,  2.2400e+00, -8.0724e-01,  3.9786e-01,
         -6.3738e-01, -1.2813e+00,  1.6265e-01,  1.9289e-02,  1.6554e-02,
         -4.2955e-01, -2.5361e-01, -2.3275e-01,  2.6456e-01, -1.2208e-01,
         -9.2805e-02, -4.0343e-01, -1.7302e-01, -7.0890e-02,  2.3286e-01,
         -2.0881e-01, -1.1548e-01, -3.0548e-01, -9.6807e-02, -2.8828e-01,
          1.9937e-03,  2.0586e-03, -8.7504e-03, -1.5109e-02,  7.5972e-02,
          3.4463e-02, -2.3809e-01,  4.7857e-01,  2.9008e-01, -2.8938e-01,
         -2.4447e-01, -8.8260e-03,  1.7602e-01, -4.1269e-01,  2.9654e-01,
         -3.4863e-01, -1.1362e-01, -1.3316e-02,  1.1628e-01, -4.5147e-01,
         -2.7727e-01, -2.9984e-01,  7.7898e-03,  1.1995e-01,  9.7185e-01,
         -2.3206e-01,  2.0328e-01,  1.6715e-01, -5.1972e-02, -2.8226e-02,
         -6.6731e-01, -7.7214e-01,  2.0413e-01,  4.8807e-01, -6.0516e-01,
          1.9781e-01,  3.6353e-01, -7.5750e-02, -6.3745e-01, -2.0068e-01,
          4.6538e-01,  1.5767e-01]], device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
931000 特征值优化 tensor(0.6965, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6273, -0.0812, -0.5555, -0.6513, -1.0616, -1.7233, -3.1085,  2.2557,
         -0.8504,  0.3964, -0.6666, -1.2678,  0.1622, -0.0109, -0.0561, -0.3383,
         -0.3128, -0.2464,  0.3093, -0.1234, -0.0924, -0.4059, -0.0897, -0.1739,
          0.2208, -0.2005, -0.1270, -0.3140, -0.0962, -0.2899,  0.0047, -0.0053,
         -0.0157, -0.0183,  0.0761,  0.0362, -0.2620,  0.4544,  0.3111, -0.2897,
         -0.2186, -0.0158,  0.1579, -0.4125,  0.3073, -0.3553, -0.1162, -0.0107,
          0.1108, -0.4512, -0.2823, -0.2998, -0.0040,  0.1337,  0.9632, -0.2297,
          0.1773,  0.1862, -0.0198,  0.0263, -0.6518, -0.8092,  0.2348,  0.4829,
         -0.5905,  0.1820,  0.3728, -0.0830, -0.6242, -0.1837,  0.4548,  0.1643]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
932000 特征值优化 tensor(0.7009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6218e+00, -8.0099e-02, -5.6044e-01, -6.4097e-01, -1.0495e+00,
         -1.7098e+00, -3.1582e+00,  2.2719e+00, -8.4891e-01,  3.8105e-01,
         -6.4823e-01, -1.2755e+00,  1.6269e-01,  3.5065e-02, -1.5761e-02,
         -3.7517e-01, -2.8802e-01, -2.3149e-01,  2.9533e-01, -1.2224e-01,
         -9.1795e-02, -4.0368e-01, -1.0436e-01, -1.5852e-01,  2.3143e-01,
         -1.8343e-01, -1.0937e-01, -3.0328e-01, -9.5785e-02, -2.8817e-01,
          2.3042e-03,  2.2465e-02,  1.3390e-02, -1.2357e-02,  5.5575e-02,
          5.1376e-02, -2.2561e-01,  4.5549e-01,  3.0354e-01, -2.8648e-01,
         -2.3211e-01, -1.6237e-02,  1.5826e-01, -4.1230e-01,  3.0631e-01,
         -3.5245e-01, -1.1757e-01, -8.7956e-03,  1.1128e-01, -4.5192e-01,
         -2.8785e-01, -2.9883e-01,  5.6537e-03,  1.2661e-01,  9.7415e-01,
         -2.4792e-01,  1.8357e-01,  1.8552e-01, -2.5581e-02,  2.7503e-02,
         -6.3523e-01, -7.8125e-01,  2.1798e-01,  4.9502e-01, -5.9062e-01,
          1.7555e-01,  3.8292e-01, -8.7337e-02, -6.4197e-01, -2.0573e-01,
          4.5838e-01,  1.6829e-01]], device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
933000 特征值优化 tensor(0.6951, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6182e+00, -6.4948e-02, -5.5350e-01, -6.4629e-01, -1.0480e+00,
         -1.7308e+00, -3.1751e+00,  2.2811e+00, -8.2510e-01,  3.9034e-01,
         -6.3782e-01, -1.2823e+00,  1.6488e-01,  3.6590e-02, -8.4898e-03,
         -3.9912e-01, -2.7252e-01, -2.3669e-01,  2.5841e-01, -1.2211e-01,
         -8.9801e-02, -4.0507e-01, -1.4398e-01, -1.0417e-01,  2.3380e-01,
         -2.1396e-01, -9.1802e-02, -2.9627e-01, -9.5651e-02, -2.8914e-01,
          3.1376e-03,  1.6511e-03,  1.3380e-02, -1.6757e-02,  5.7047e-02,
          6.1511e-02, -2.2453e-01,  4.7096e-01,  3.0121e-01, -2.8832e-01,
         -2.5149e-01, -1.2480e-02,  1.5990e-01, -4.0980e-01,  3.0612e-01,
         -3.5918e-01, -1.1336e-01, -1.1174e-02,  1.1331e-01, -4.5215e-01,
         -2.8396e-01, -2.9913e-01, -5.6997e-03,  1.3254e-01,  9.7963e-01,
         -2.3543e-01,  1.8014e-01,  1.8716e-01, -4.5198e-02,  7.4103e-03,
         -6.5605e-01, -7.7029e-01,  2.1987e-01,  4.9332e-01, -5.8658e-01,
          1.8266e-01,  3.7384e-01, -8.9146e-02, -6.3735e-01, -2.3278e-01,
          4.6190e-01,  1.6979e-01]], device='cuda:0') tensor(0.2040, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
934000 特征值优化 tensor(0.7088, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6165e+00, -6.6745e-02, -5.6010e-01, -6.4816e-01, -1.0458e+00,
         -1.7206e+00, -3.1637e+00,  2.2766e+00, -8.2686e-01,  3.9053e-01,
         -6.6502e-01, -1.2899e+00,  1.6469e-01,  1.0621e-02, -3.0579e-02,
         -3.8855e-01, -2.6731e-01, -2.4913e-01,  2.5531e-01, -1.2385e-01,
         -8.9625e-02, -4.0255e-01, -1.4800e-01, -1.0648e-01,  2.4056e-01,
         -2.0842e-01, -1.1874e-01, -2.7305e-01, -9.5386e-02, -2.8655e-01,
          5.3036e-03,  6.2622e-03,  4.8568e-03, -1.4656e-02,  7.8112e-02,
          5.5880e-02, -2.3580e-01,  4.7554e-01,  3.0214e-01, -2.8625e-01,
         -2.4638e-01, -1.5346e-02,  1.5729e-01, -4.0652e-01,  3.0648e-01,
         -3.5644e-01, -1.1554e-01, -8.8269e-03,  1.1209e-01, -4.5433e-01,
         -2.8289e-01, -3.0015e-01, -2.3911e-03,  1.2490e-01,  9.7900e-01,
         -2.4063e-01,  1.9232e-01,  1.8327e-01, -3.0860e-02,  2.2785e-03,
         -6.4521e-01, -8.0499e-01,  2.1132e-01,  5.0009e-01, -5.8789e-01,
          1.8856e-01,  3.6368e-01, -8.0687e-02, -6.3756e-01, -2.0024e-01,
          4.5546e-01,  1.6337e-01]], device='cuda:0') tensor(0.2080, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
935000 特征值优化 tensor(0.7008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6195e+00, -7.7292e-02, -5.4971e-01, -6.3984e-01, -1.0555e+00,
         -1.7144e+00, -3.1792e+00,  2.2886e+00, -8.2639e-01,  3.9096e-01,
         -6.8683e-01, -1.2686e+00,  1.6350e-01, -3.9451e-03, -2.9095e-02,
         -3.6743e-01, -2.9887e-01, -2.5881e-01,  2.9218e-01, -1.2468e-01,
         -9.1191e-02, -4.0278e-01, -1.1750e-01, -1.5226e-01,  2.2772e-01,
         -2.0220e-01, -1.2131e-01, -2.9591e-01, -9.6038e-02, -2.8655e-01,
          4.9789e-03,  1.2764e-02, -4.5115e-04, -1.5148e-02,  6.8775e-02,
          4.6008e-02, -2.3615e-01,  4.6006e-01,  3.0532e-01, -2.8748e-01,
         -2.3238e-01, -1.6094e-02,  1.5487e-01, -4.1191e-01,  3.1160e-01,
         -3.5481e-01, -1.1564e-01, -1.3143e-02,  1.1474e-01, -4.5439e-01,
         -2.8655e-01, -2.9982e-01,  2.1818e-03,  1.2758e-01,  9.7631e-01,
         -2.2980e-01,  1.8127e-01,  1.8649e-01, -3.1366e-02,  1.0923e-02,
         -6.4509e-01, -8.2483e-01,  2.1368e-01,  5.0283e-01, -5.9652e-01,
          1.8718e-01,  3.6542e-01, -7.9392e-02, -6.1736e-01, -1.9431e-01,
          4.5898e-01,  1.5999e-01]], device='cuda:0') tensor(0.2032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
936000 特征值优化 tensor(0.6997, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6138, -0.0732, -0.5538, -0.6449, -1.0560, -1.7131, -3.1931,  2.2882,
         -0.8221,  0.3890, -0.7063, -1.2738,  0.1637,  0.0093, -0.0407, -0.3651,
         -0.2973, -0.2581,  0.2940, -0.1243, -0.0905, -0.4038, -0.1121, -0.1550,
          0.2263, -0.2050, -0.1271, -0.2972, -0.0957, -0.2878,  0.0049, -0.0043,
         -0.0113, -0.0142,  0.0705,  0.0444, -0.2446,  0.4632,  0.3084, -0.2870,
         -0.2352, -0.0182,  0.1541, -0.4120,  0.3140, -0.3552, -0.1151, -0.0116,
          0.1135, -0.4530, -0.2842, -0.2992,  0.0044,  0.1267,  0.9770, -0.2360,
          0.1809,  0.1866, -0.0332,  0.0184, -0.6583, -0.8256,  0.2382,  0.5010,
         -0.5947,  0.1898,  0.3664, -0.0803, -0.6297, -0.1880,  0.4599,  0.1605]],
       device='cuda:0') tensor(0.2061, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
937000 特征值优化 tensor(0.6966, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6290, -0.0896, -0.5502, -0.6394, -1.0720, -1.7136, -3.1917,  2.3187,
         -0.8691,  0.3700, -0.7203, -1.2360,  0.1618,  0.0067, -0.0652, -0.3455,
         -0.2987, -0.2382,  0.3369, -0.1236, -0.0928, -0.4057, -0.0864, -0.1937,
          0.2197, -0.1871, -0.1200, -0.3108, -0.0953, -0.2895,  0.0060,  0.0256,
          0.0090, -0.0155,  0.0761,  0.0333, -0.2730,  0.4472,  0.3151, -0.2844,
         -0.2171, -0.0212,  0.1585, -0.4100,  0.3043, -0.3513, -0.1171, -0.0133,
          0.1126, -0.4507, -0.2884, -0.2970, -0.0038,  0.1320,  0.9746, -0.2237,
          0.1778,  0.1866, -0.0283,  0.0426, -0.6874, -0.8348,  0.2732,  0.4966,
         -0.5879,  0.1772,  0.3776, -0.0885, -0.6149, -0.1842,  0.4449,  0.1724]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
938000 特征值优化 tensor(0.6983, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6159, -0.0759, -0.5493, -0.6441, -1.0572, -1.7172, -3.2124,  2.3241,
         -0.8458,  0.3864, -0.7108, -1.2480,  0.1632,  0.0060, -0.0331, -0.3508,
         -0.3141, -0.2434,  0.3171, -0.1234, -0.0906, -0.4032, -0.0952, -0.1724,
          0.2303, -0.2036, -0.1211, -0.2981, -0.0954, -0.2872,  0.0043,  0.0038,
         -0.0128, -0.0164,  0.0772,  0.0327, -0.2548,  0.4598,  0.3063, -0.2860,
         -0.2302, -0.0176,  0.1549, -0.4131,  0.3106, -0.3557, -0.1149, -0.0136,
          0.1130, -0.4524, -0.2859, -0.2991,  0.0072,  0.1274,  0.9748, -0.2299,
          0.1798,  0.1834, -0.0355,  0.0202, -0.6741, -0.8303,  0.2322,  0.5116,
         -0.5983,  0.1867,  0.3715, -0.0839, -0.6208, -0.1928,  0.4529,  0.1650]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
939000 特征值优化 tensor(0.7399, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6319, -0.0855, -0.5525, -0.6581, -1.0692, -1.7399, -3.2037,  2.3278,
         -0.8384,  0.3881, -0.7346, -1.2688,  0.1620, -0.0131, -0.0672, -0.3364,
         -0.3223, -0.2321,  0.3368, -0.1231, -0.0930, -0.4056, -0.0511, -0.2058,
          0.2112, -0.2014, -0.1297, -0.3296, -0.0955, -0.2892,  0.0050,  0.0122,
         -0.0388, -0.0195,  0.0849,  0.0159, -0.2785,  0.4582,  0.3152, -0.2850,
         -0.2223, -0.0229,  0.1592, -0.4090,  0.3021, -0.3539, -0.1165, -0.0117,
          0.1140, -0.4519, -0.2783, -0.3000,  0.0141,  0.1250,  0.9686, -0.2272,
          0.1788,  0.1819, -0.0161,  0.0401, -0.6933, -0.8392,  0.2486,  0.5092,
         -0.5995,  0.1920,  0.3751, -0.0861, -0.6086, -0.1856,  0.4530,  0.1651]],
       device='cuda:0') tensor(0.2030, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
940000 特征值优化 tensor(0.6962, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6257, -0.0749, -0.5319, -0.6469, -1.0562, -1.7270, -3.2479,  2.3437,
         -0.8305,  0.3830, -0.6873, -1.2704,  0.1628,  0.0612, -0.0341, -0.4173,
         -0.2616, -0.2229,  0.2835, -0.1220, -0.0914, -0.4052, -0.1374, -0.1343,
          0.2295, -0.1935, -0.1202, -0.2916, -0.0961, -0.2899,  0.0035,  0.0078,
          0.0052, -0.0168,  0.0473,  0.0599, -0.2340,  0.4723,  0.3078, -0.2882,
         -0.2529, -0.0152,  0.1598, -0.4107,  0.3046, -0.3583, -0.1156, -0.0224,
          0.1130, -0.4524, -0.2826, -0.3008, -0.0053,  0.1334,  0.9788, -0.2376,
          0.1718,  0.1916, -0.0320,  0.0155, -0.6145, -0.8057,  0.2048,  0.5091,
         -0.5998,  0.1776,  0.3684, -0.0812, -0.6300, -0.2367,  0.4670,  0.1649]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
941000 特征值优化 tensor(0.6949, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6201e+00, -6.6839e-02, -5.4936e-01, -6.4305e-01, -1.0501e+00,
         -1.7322e+00, -3.2509e+00,  2.3451e+00, -8.2082e-01,  3.9629e-01,
         -6.9453e-01, -1.2846e+00,  1.6462e-01,  4.1051e-02, -1.2510e-02,
         -4.0758e-01, -2.7335e-01, -2.4502e-01,  2.6828e-01, -1.2223e-01,
         -9.0180e-02, -4.0460e-01, -1.3559e-01, -1.1695e-01,  2.3275e-01,
         -2.1311e-01, -9.0835e-02, -2.9365e-01, -9.5815e-02, -2.8901e-01,
          4.2336e-03,  1.0705e-02,  1.0397e-02, -1.7255e-02,  5.4602e-02,
          5.8284e-02, -2.3611e-01,  4.7852e-01,  3.0327e-01, -2.8712e-01,
         -2.5557e-01, -1.5147e-02,  1.5899e-01, -4.0965e-01,  3.0635e-01,
         -3.5967e-01, -1.1382e-01, -1.2986e-02,  1.1300e-01, -4.5218e-01,
         -2.8582e-01, -2.9902e-01, -5.5433e-03,  1.3155e-01,  9.8658e-01,
         -2.3989e-01,  1.7589e-01,  1.8899e-01, -5.1522e-02,  1.1914e-03,
         -6.6002e-01, -7.9873e-01,  2.1381e-01,  5.0765e-01, -5.8751e-01,
          1.8331e-01,  3.7334e-01, -9.2379e-02, -6.2656e-01, -2.3471e-01,
          4.7853e-01,  1.6410e-01]], device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
942000 特征值优化 tensor(0.7134, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6273e+00, -7.0563e-02, -5.6120e-01, -6.5486e-01, -1.0569e+00,
         -1.7292e+00, -3.2499e+00,  2.3570e+00, -8.4577e-01,  3.8943e-01,
         -6.8949e-01, -1.2707e+00,  1.6284e-01,  2.5584e-02, -1.9330e-02,
         -4.0916e-01, -2.7223e-01, -2.3112e-01,  2.6888e-01, -1.2402e-01,
         -9.2106e-02, -4.0396e-01, -1.6063e-01, -9.6905e-02,  2.3733e-01,
         -2.0839e-01, -1.0883e-01, -2.7748e-01, -9.7240e-02, -2.8801e-01,
          5.7527e-03, -4.6521e-03,  5.1510e-03, -1.6213e-02,  7.2765e-02,
          5.2650e-02, -2.4248e-01,  4.8052e-01,  3.0382e-01, -2.8579e-01,
         -2.5549e-01, -1.9174e-02,  1.5774e-01, -4.1141e-01,  3.0337e-01,
         -3.5884e-01, -1.1602e-01, -5.8451e-03,  1.1594e-01, -4.4960e-01,
         -2.7519e-01, -2.9795e-01,  1.6586e-03,  1.2223e-01,  9.8125e-01,
         -2.4207e-01,  1.9481e-01,  1.7844e-01, -3.5120e-02,  3.7545e-03,
         -6.6092e-01, -8.0606e-01,  2.0983e-01,  5.2585e-01, -5.8962e-01,
          1.8600e-01,  3.6418e-01, -8.1944e-02, -6.4405e-01, -2.2972e-01,
          4.5796e-01,  1.6451e-01]], device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
943000 特征值优化 tensor(0.6964, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6301e+00, -8.6709e-02, -5.5681e-01, -6.5405e-01, -1.0619e+00,
         -1.7261e+00, -3.2421e+00,  2.3601e+00, -8.4792e-01,  3.9141e-01,
         -7.2861e-01, -1.2556e+00,  1.6246e-01, -5.5641e-02, -1.1337e-02,
         -3.6373e-01, -3.0856e-01, -2.3531e-01,  3.2240e-01, -1.2274e-01,
         -9.2659e-02, -4.0534e-01, -9.6108e-02, -1.6947e-01,  2.2306e-01,
         -2.0577e-01, -1.2511e-01, -3.0999e-01, -9.5902e-02, -2.8939e-01,
          3.6516e-03,  1.6052e-02,  4.5163e-03, -1.7690e-02,  7.4622e-02,
          3.8984e-02, -2.6152e-01,  4.6622e-01,  3.1390e-01, -2.8671e-01,
         -2.3651e-01, -1.9850e-02,  1.5959e-01, -4.1199e-01,  3.0579e-01,
         -3.5302e-01, -1.1615e-01, -1.0441e-02,  1.1281e-01, -4.5334e-01,
         -2.7971e-01, -3.0000e-01,  3.5850e-04,  1.3124e-01,  9.7312e-01,
         -2.3636e-01,  1.8005e-01,  1.8312e-01, -3.0373e-02,  2.4638e-02,
         -6.3781e-01, -8.4169e-01,  2.2460e-01,  5.1116e-01, -6.0355e-01,
          1.8731e-01,  3.6428e-01, -8.1398e-02, -6.2684e-01, -2.0275e-01,
          4.5798e-01,  1.6362e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
944000 特征值优化 tensor(0.6932, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6319, -0.0844, -0.5571, -0.6599, -1.0666, -1.7398, -3.2496,  2.3771,
         -0.8404,  0.3933, -0.7369, -1.2610,  0.1620, -0.0580, -0.0200, -0.3574,
         -0.3259, -0.2378,  0.3193, -0.1226, -0.0929, -0.4065, -0.0707, -0.1893,
          0.2138, -0.2037, -0.1288, -0.3278, -0.0960, -0.2912,  0.0035,  0.0039,
          0.0275, -0.0201,  0.0814,  0.0269, -0.2660,  0.4671,  0.3154, -0.2854,
         -0.2355, -0.0217,  0.1602, -0.4107,  0.3039, -0.3545, -0.1165, -0.0107,
          0.1105, -0.4515, -0.2776, -0.3005,  0.0140,  0.1267,  0.9769, -0.2377,
          0.1805,  0.1812, -0.0314,  0.0370, -0.6758, -0.8494,  0.2344,  0.5198,
         -0.6055,  0.1927,  0.3627, -0.0830, -0.6343, -0.1921,  0.4580,  0.1628]],
       device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
945000 特征值优化 tensor(0.7007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6231e+00, -7.8511e-02, -5.5630e-01, -6.3786e-01, -1.0510e+00,
         -1.7123e+00, -3.2881e+00,  2.3713e+00, -8.4761e-01,  3.9125e-01,
         -7.3351e-01, -1.2745e+00,  1.6249e-01, -1.1278e-02,  5.6723e-02,
         -3.7956e-01, -2.9404e-01, -2.3125e-01,  3.0503e-01, -1.2214e-01,
         -9.1509e-02, -4.0496e-01, -1.0320e-01, -1.5495e-01,  2.3769e-01,
         -1.9102e-01, -1.1089e-01, -2.9776e-01, -9.5743e-02, -2.8890e-01,
          2.9588e-03, -1.1614e-02, -3.7085e-03, -1.1723e-02,  5.6635e-02,
          4.9767e-02, -2.4753e-01,  4.7313e-01,  3.0715e-01, -2.8418e-01,
         -2.4584e-01, -2.0264e-02,  1.5947e-01, -4.0925e-01,  3.0251e-01,
         -3.5425e-01, -1.1622e-01, -1.3685e-02,  1.1093e-01, -4.5434e-01,
         -2.9309e-01, -3.0099e-01,  5.5745e-03,  1.2792e-01,  9.8045e-01,
         -2.4741e-01,  1.8751e-01,  1.8355e-01, -2.1899e-02,  3.5333e-02,
         -6.5580e-01, -8.1781e-01,  2.1652e-01,  5.1996e-01, -5.9967e-01,
          1.8030e-01,  3.7179e-01, -8.7065e-02, -6.2499e-01, -2.2305e-01,
          4.6339e-01,  1.6596e-01]], device='cuda:0') tensor(0.2062, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
946000 特征值优化 tensor(0.6975, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6250e+00, -7.7582e-02, -5.4715e-01, -6.4018e-01, -1.0550e+00,
         -1.7199e+00, -3.2996e+00,  2.3836e+00, -8.3856e-01,  3.9141e-01,
         -7.2733e-01, -1.2810e+00,  1.6296e-01,  3.2811e-03,  6.7694e-02,
         -3.9879e-01, -2.7870e-01, -2.4240e-01,  2.8220e-01, -1.2254e-01,
         -9.1356e-02, -4.0507e-01, -1.2480e-01, -1.3635e-01,  2.3205e-01,
         -2.0374e-01, -1.0111e-01, -2.9889e-01, -9.6064e-02, -2.8959e-01,
          4.3650e-03, -3.9365e-03, -4.6983e-03, -1.7934e-02,  5.6469e-02,
          5.5232e-02, -2.4096e-01,  4.7669e-01,  3.0940e-01, -2.8636e-01,
         -2.5325e-01, -1.9208e-02,  1.6079e-01, -4.1304e-01,  3.0420e-01,
         -3.5392e-01, -1.1787e-01, -1.4963e-02,  1.1067e-01, -4.5088e-01,
         -2.8734e-01, -3.0022e-01,  5.8131e-03,  1.2816e-01,  9.8342e-01,
         -2.4318e-01,  1.8363e-01,  1.8615e-01, -3.4974e-02,  1.6096e-02,
         -6.4836e-01, -8.1725e-01,  2.1494e-01,  5.1999e-01, -5.9209e-01,
          1.8128e-01,  3.6824e-01, -8.7837e-02, -6.3894e-01, -2.3095e-01,
          4.7339e-01,  1.6640e-01]], device='cuda:0') tensor(0.2036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
947000 特征值优化 tensor(0.7092, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5967e+00, -4.5466e-02, -5.5725e-01, -6.3600e-01, -1.0511e+00,
         -1.7253e+00, -3.2975e+00,  2.3808e+00, -8.3344e-01,  3.9870e-01,
         -7.5371e-01, -1.2842e+00,  1.6764e-01,  7.4014e-03,  3.0653e-04,
         -3.5264e-01, -3.2751e-01, -2.4138e-01,  3.0657e-01, -1.2347e-01,
         -8.7664e-02, -4.0484e-01, -7.0215e-02, -1.6199e-01,  2.3544e-01,
         -1.9166e-01, -1.4091e-01, -2.9893e-01, -9.5849e-02, -2.8863e-01,
          4.8335e-03,  6.9837e-03,  3.0241e-03, -1.4930e-02,  7.5667e-02,
          4.0279e-02, -2.5683e-01,  4.7245e-01,  3.0337e-01, -2.8540e-01,
         -2.3985e-01, -1.8613e-02,  1.5366e-01, -4.1288e-01,  3.1834e-01,
         -3.5934e-01, -1.1274e-01, -1.0227e-02,  1.1246e-01, -4.5260e-01,
         -2.8781e-01, -3.0054e-01,  3.8799e-04,  1.2250e-01,  9.8148e-01,
         -2.4972e-01,  1.9650e-01,  1.8153e-01, -2.3083e-02,  2.0562e-02,
         -6.2503e-01, -8.3714e-01,  2.1291e-01,  5.1644e-01, -6.1003e-01,
          1.9977e-01,  3.5671e-01, -7.5245e-02, -6.1500e-01, -2.1530e-01,
          4.6389e-01,  1.5863e-01]], device='cuda:0') tensor(0.2028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
948000 特征值优化 tensor(0.6941, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6002, -0.0455, -0.5462, -0.6439, -1.0556, -1.7411, -3.3187,  2.4123,
         -0.8368,  0.4092, -0.7277, -1.2751,  0.1701,  0.0214,  0.0222, -0.4211,
         -0.2920, -0.2730,  0.2512, -0.1236, -0.0851, -0.4047, -0.1203, -0.0846,
          0.2268, -0.2097, -0.1022, -0.3144, -0.0959, -0.2894,  0.0036, -0.0054,
          0.0209, -0.0169,  0.0555,  0.0546, -0.2317,  0.4809,  0.3080, -0.2860,
         -0.2591, -0.0174,  0.1567, -0.4117,  0.3215, -0.3620, -0.1070, -0.0161,
          0.1132, -0.4531, -0.2847, -0.3004,  0.0071,  0.1274,  0.9915, -0.2476,
          0.1761,  0.1866, -0.0518, -0.0227, -0.6544, -0.8268,  0.1983,  0.5204,
         -0.5898,  0.1831,  0.3621, -0.0900, -0.6380, -0.2292,  0.4739,  0.1625]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
949000 特征值优化 tensor(0.6938, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5911e+00, -3.7578e-02, -5.5544e-01, -6.5154e-01, -1.0537e+00,
         -1.7400e+00, -3.3479e+00,  2.4086e+00, -8.1912e-01,  4.2047e-01,
         -7.2837e-01, -1.2966e+00,  1.7026e-01,  3.0923e-03,  5.3799e-02,
         -4.1629e-01, -2.9112e-01, -2.5947e-01,  2.4153e-01, -1.2311e-01,
         -8.4629e-02, -4.0466e-01, -1.3535e-01, -7.5901e-02,  2.3482e-01,
         -2.2139e-01, -9.5739e-02, -3.0077e-01, -9.5566e-02, -2.8896e-01,
          4.7597e-03, -1.3002e-02, -5.4268e-03, -1.8588e-02,  5.8612e-02,
          5.8894e-02, -2.3043e-01,  4.9194e-01,  3.0655e-01, -2.8718e-01,
         -2.7126e-01, -1.6047e-02,  1.5333e-01, -4.1052e-01,  3.2252e-01,
         -3.6443e-01, -1.0653e-01, -1.0654e-02,  1.1291e-01, -4.5223e-01,
         -2.8086e-01, -2.9900e-01,  5.5314e-03,  1.2537e-01,  9.9605e-01,
         -2.5745e-01,  1.7780e-01,  1.8580e-01, -4.3486e-02, -1.6469e-02,
         -6.4763e-01, -8.2264e-01,  2.1211e-01,  5.2420e-01, -6.0098e-01,
          1.9259e-01,  3.5739e-01, -8.7463e-02, -6.6046e-01, -2.4167e-01,
          4.7958e-01,  1.6040e-01]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
950000 特征值优化 tensor(0.7009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5873e+00, -4.4860e-02, -5.7248e-01, -6.6541e-01, -1.0545e+00,
         -1.7235e+00, -3.3458e+00,  2.4097e+00, -8.2726e-01,  4.1586e-01,
         -7.6198e-01, -1.2777e+00,  1.6975e-01, -2.8826e-02, -1.1764e-02,
         -3.6197e-01, -3.0246e-01, -2.6565e-01,  2.9146e-01, -1.2485e-01,
         -8.4778e-02, -4.0362e-01, -1.0835e-01, -1.2966e-01,  2.3385e-01,
         -2.0891e-01, -1.2075e-01, -2.9531e-01, -9.5635e-02, -2.8828e-01,
          5.2463e-03,  3.3972e-03,  6.3365e-03, -1.7106e-02,  7.0238e-02,
          4.2693e-02, -2.6064e-01,  4.7960e-01,  3.1644e-01, -2.8560e-01,
         -2.5012e-01, -2.2524e-02,  1.5094e-01, -4.1101e-01,  3.2237e-01,
         -3.5668e-01, -1.1066e-01, -1.9671e-03,  1.1268e-01, -4.5475e-01,
         -2.7457e-01, -3.0046e-01, -2.5476e-03,  1.3074e-01,  9.8803e-01,
         -2.4471e-01,  1.8570e-01,  1.8232e-01, -3.3809e-02,  1.2555e-02,
         -6.4210e-01, -8.5754e-01,  2.1521e-01,  5.2564e-01, -6.1030e-01,
          1.9659e-01,  3.5245e-01, -7.7338e-02, -6.2421e-01, -2.1983e-01,
          4.6030e-01,  1.5687e-01]], device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
951000 特征值优化 tensor(0.7000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5869e+00, -4.4160e-02, -5.4774e-01, -6.4193e-01, -1.0492e+00,
         -1.7275e+00, -3.3647e+00,  2.4078e+00, -8.1665e-01,  4.2566e-01,
         -7.8355e-01, -1.2842e+00,  1.6973e-01, -2.3486e-02, -1.5365e-02,
         -3.6473e-01, -3.0924e-01, -2.6349e-01,  2.9542e-01, -1.2520e-01,
         -8.4038e-02, -4.0245e-01, -1.0404e-01, -1.3165e-01,  2.3228e-01,
         -2.1179e-01, -1.2028e-01, -2.9823e-01, -9.5785e-02, -2.8596e-01,
          5.1594e-03,  8.7378e-03,  1.0202e-02, -1.7683e-02,  7.1222e-02,
          3.9081e-02, -2.5569e-01,  4.8187e-01,  3.1240e-01, -2.8587e-01,
         -2.5222e-01, -2.1727e-02,  1.5162e-01, -4.1076e-01,  3.2329e-01,
         -3.5639e-01, -1.0993e-01, -1.2685e-02,  1.1433e-01, -4.5372e-01,
         -2.8609e-01, -3.0005e-01, -1.0206e-03,  1.2820e-01,  9.9213e-01,
         -2.4648e-01,  1.8650e-01,  1.8064e-01, -2.8015e-02,  7.5498e-03,
         -6.6015e-01, -8.7163e-01,  2.1990e-01,  5.2685e-01, -6.1886e-01,
          2.0060e-01,  3.5038e-01, -7.5996e-02, -6.1707e-01, -2.1039e-01,
          4.6960e-01,  1.5103e-01]], device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
952000 特征值优化 tensor(0.6926, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.5919e+00, -4.8125e-02, -5.4844e-01, -6.4589e-01, -1.0579e+00,
         -1.7329e+00, -3.3680e+00,  2.4269e+00, -8.3024e-01,  4.1387e-01,
         -7.9508e-01, -1.2764e+00,  1.6969e-01, -3.8854e-02, -5.0856e-02,
         -3.3996e-01, -3.4328e-01, -2.4103e-01,  3.3679e-01, -1.2328e-01,
         -8.4537e-02, -4.0384e-01, -5.1980e-02, -1.8741e-01,  2.2270e-01,
         -2.1184e-01, -1.2659e-01, -3.1366e-01, -9.5958e-02, -2.8851e-01,
          4.0521e-03,  8.1015e-03,  9.5734e-03, -1.8351e-02,  8.7699e-02,
         -1.4190e-04, -2.6798e-01,  4.7023e-01,  3.1415e-01, -2.8342e-01,
         -2.3856e-01, -2.4150e-02,  1.5345e-01, -4.1171e-01,  3.2367e-01,
         -3.6077e-01, -1.0670e-01, -1.4779e-02,  1.1610e-01, -4.5417e-01,
         -2.8244e-01, -2.9882e-01,  7.7194e-03,  1.2567e-01,  9.9362e-01,
         -2.4046e-01,  1.7141e-01,  1.8718e-01, -2.8561e-02,  3.5231e-02,
         -6.9598e-01, -8.8222e-01,  2.4781e-01,  5.3484e-01, -6.1042e-01,
          1.9893e-01,  3.6012e-01, -8.3170e-02, -6.1466e-01, -2.0428e-01,
          4.7798e-01,  1.4805e-01]], device='cuda:0') tensor(0.2034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
953000 特征值优化 tensor(0.6933, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6247, -0.0822, -0.5524, -0.6574, -1.0714, -1.7378, -3.3756,  2.4368,
         -0.8284,  0.4200, -0.7998, -1.2799,  0.1630, -0.0415, -0.0035, -0.3600,
         -0.3301, -0.2422,  0.3329, -0.1241, -0.0919, -0.4064, -0.0703, -0.1763,
          0.2169, -0.2119, -0.1261, -0.3231, -0.0958, -0.2909,  0.0037, -0.0065,
          0.0138, -0.0199,  0.0798,  0.0227, -0.2823,  0.4785,  0.3230, -0.2847,
         -0.2416, -0.0257,  0.1578, -0.4164,  0.3124, -0.3504, -0.1173, -0.0123,
          0.1112, -0.4509, -0.2791, -0.3000,  0.0141,  0.1294,  0.9864, -0.2356,
          0.1801,  0.1819, -0.0248,  0.0388, -0.6862, -0.8845,  0.2330,  0.5305,
         -0.6119,  0.1974,  0.3475, -0.0767, -0.6027, -0.2102,  0.4670,  0.1539]],
       device='cuda:0') tensor(0.2030, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
954000 特征值优化 tensor(0.6957, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6303e+00, -8.1755e-02, -5.4744e-01, -6.5333e-01, -1.0553e+00,
         -1.7183e+00, -3.4064e+00,  2.4476e+00, -8.5105e-01,  4.0285e-01,
         -7.5944e-01, -1.2749e+00,  1.6203e-01, -3.4293e-03,  8.3472e-02,
         -4.0150e-01, -2.8047e-01, -2.3268e-01,  2.9723e-01, -1.2342e-01,
         -9.1984e-02, -4.0575e-01, -1.3413e-01, -1.3199e-01,  2.2756e-01,
         -1.9582e-01, -1.2217e-01, -3.0567e-01, -9.5774e-02, -2.9069e-01,
          3.1578e-03, -3.9076e-02, -1.5459e-02, -1.6048e-02,  5.5085e-02,
          5.6725e-02, -2.6190e-01,  4.9447e-01,  3.1679e-01, -2.8408e-01,
         -2.6541e-01, -2.3438e-02,  1.5965e-01, -4.1184e-01,  3.0679e-01,
         -3.5426e-01, -1.1683e-01, -1.4665e-02,  1.1016e-01, -4.5180e-01,
         -2.8105e-01, -3.0172e-01,  1.9218e-03,  1.3026e-01,  9.9310e-01,
         -2.4628e-01,  1.7993e-01,  1.8864e-01, -4.8882e-02,  1.4611e-02,
         -6.6385e-01, -8.3777e-01,  2.0943e-01,  5.3457e-01, -5.9408e-01,
          1.7872e-01,  3.5447e-01, -8.4028e-02, -6.2698e-01, -2.4597e-01,
          4.7902e-01,  1.6245e-01]], device='cuda:0') tensor(0.2039, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
955000 特征值优化 tensor(0.6926, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6368e+00, -8.4324e-02, -5.3813e-01, -6.5965e-01, -1.0724e+00,
         -1.7372e+00, -3.4021e+00,  2.4344e+00, -8.3412e-01,  4.1088e-01,
         -7.7260e-01, -1.2651e+00,  1.6226e-01,  1.9191e-03,  6.2750e-02,
         -4.3808e-01, -2.7282e-01, -2.4211e-01,  2.8457e-01, -1.2265e-01,
         -9.2397e-02, -4.0416e-01, -1.6069e-01, -9.0027e-02,  2.2852e-01,
         -2.1218e-01, -1.1896e-01, -3.1056e-01, -9.5648e-02, -2.8857e-01,
          4.2536e-03, -3.3042e-02, -1.9466e-02, -1.6452e-02,  5.4970e-02,
          5.8640e-02, -2.5619e-01,  4.9940e-01,  3.0692e-01, -2.8382e-01,
         -2.6999e-01, -2.0205e-02,  1.6190e-01, -4.0880e-01,  3.0295e-01,
         -3.5719e-01, -1.1520e-01, -1.9579e-02,  1.1275e-01, -4.5235e-01,
         -2.7799e-01, -2.9968e-01,  7.1292e-03,  1.3063e-01,  9.9896e-01,
         -2.4565e-01,  1.7769e-01,  1.8645e-01, -5.7921e-02, -1.6470e-02,
         -6.6014e-01, -8.5074e-01,  2.0142e-01,  5.3643e-01, -6.0080e-01,
          1.8795e-01,  3.5087e-01, -8.9342e-02, -6.0852e-01, -2.4678e-01,
          4.8704e-01,  1.6115e-01]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
956000 特征值优化 tensor(0.6949, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6451e+00, -8.9342e-02, -5.2459e-01, -6.4840e-01, -1.0685e+00,
         -1.7245e+00, -3.4045e+00,  2.4426e+00, -8.1879e-01,  3.7485e-01,
         -7.7286e-01, -1.2768e+00,  1.6324e-01, -4.5975e-03,  6.1608e-02,
         -4.3139e-01, -2.8150e-01, -2.3601e-01,  2.8311e-01, -1.2041e-01,
         -9.0993e-02, -4.0372e-01, -1.3281e-01, -1.3380e-01,  2.2206e-01,
         -2.0165e-01, -1.2201e-01, -2.9527e-01, -9.4786e-02, -2.8748e-01,
          3.7236e-03, -1.0013e-02,  1.8370e-03, -1.7462e-02,  4.4847e-02,
          6.3574e-02, -2.5165e-01,  4.9280e-01,  3.1414e-01, -2.8187e-01,
         -2.6473e-01, -2.3615e-02,  1.6814e-01, -4.0997e-01,  3.0632e-01,
         -3.6029e-01, -1.0821e-01, -2.6235e-02,  1.1562e-01, -4.4981e-01,
         -2.8550e-01, -2.9463e-01,  1.1496e-02,  1.2758e-01,  9.9450e-01,
         -2.4746e-01,  1.6910e-01,  1.9432e-01, -3.4559e-02,  1.0955e-02,
         -6.4526e-01, -8.5895e-01,  1.9965e-01,  5.4428e-01, -6.1498e-01,
          1.8437e-01,  3.5164e-01, -7.6938e-02, -6.1987e-01, -2.4222e-01,
          4.9299e-01,  1.5443e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
957000 特征值优化 tensor(0.7094, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6138e+00, -6.5549e-02, -5.6340e-01, -6.5338e-01, -1.0498e+00,
         -1.7205e+00, -3.4067e+00,  2.4536e+00, -8.2708e-01,  3.9756e-01,
         -7.6576e-01, -1.2746e+00,  1.6397e-01, -2.2431e-02,  2.3463e-02,
         -3.8931e-01, -2.8224e-01, -2.4538e-01,  2.6461e-01, -1.2442e-01,
         -8.9468e-02, -4.0244e-01, -1.4720e-01, -1.0677e-01,  2.4492e-01,
         -2.1101e-01, -1.1484e-01, -2.7073e-01, -9.6762e-02, -2.8653e-01,
          5.8609e-03,  2.8269e-03,  1.2221e-03, -1.5794e-02,  7.6998e-02,
          5.5713e-02, -2.6034e-01,  4.9793e-01,  3.0784e-01, -2.7751e-01,
         -2.6881e-01, -2.6517e-02,  1.5583e-01, -4.0747e-01,  3.0799e-01,
         -3.5789e-01, -1.1526e-01, -4.8949e-03,  1.1575e-01, -4.5351e-01,
         -2.7697e-01, -2.9878e-01, -1.8440e-03,  1.2323e-01,  1.0002e+00,
         -2.5156e-01,  1.9486e-01,  1.8176e-01, -3.3308e-02,  6.4631e-04,
         -6.6166e-01, -8.6240e-01,  2.0490e-01,  5.4968e-01, -6.0980e-01,
          1.9811e-01,  3.4301e-01, -8.1976e-02, -6.3285e-01, -2.3696e-01,
          4.7084e-01,  1.6002e-01]], device='cuda:0') tensor(0.2045, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
958000 特征值优化 tensor(0.7072, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6122e+00, -6.5340e-02, -5.5633e-01, -6.4649e-01, -1.0516e+00,
         -1.7283e+00, -3.4173e+00,  2.4471e+00, -8.2551e-01,  4.0519e-01,
         -7.8561e-01, -1.2808e+00,  1.6436e-01, -2.4840e-02,  1.2151e-02,
         -3.9576e-01, -2.7923e-01, -2.7242e-01,  2.6325e-01, -1.2478e-01,
         -8.9011e-02, -4.0247e-01, -1.4262e-01, -1.0717e-01,  2.4744e-01,
         -2.0887e-01, -1.1642e-01, -2.6886e-01, -9.5601e-02, -2.8677e-01,
          5.5029e-03, -1.4299e-02, -4.6461e-03, -1.8745e-02,  7.4743e-02,
          5.6960e-02, -2.5152e-01,  4.9154e-01,  3.1048e-01, -2.7967e-01,
         -2.6606e-01, -2.6232e-02,  1.5608e-01, -4.0987e-01,  3.1153e-01,
         -3.5709e-01, -1.1604e-01, -9.7727e-03,  1.1426e-01, -4.5489e-01,
         -2.8416e-01, -3.0053e-01,  3.0834e-03,  1.2552e-01,  9.9773e-01,
         -2.6248e-01,  1.9698e-01,  1.7909e-01, -3.2526e-02, -2.9270e-03,
         -6.2723e-01, -8.8210e-01,  2.1705e-01,  5.4239e-01, -6.1394e-01,
          1.9709e-01,  3.4227e-01, -7.8318e-02, -6.4083e-01, -2.2595e-01,
          4.7196e-01,  1.5645e-01]], device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
959000 特征值优化 tensor(0.7017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6227e+00, -8.2171e-02, -5.6284e-01, -6.5708e-01, -1.0557e+00,
         -1.7193e+00, -3.4217e+00,  2.4489e+00, -8.4808e-01,  4.0149e-01,
         -8.0102e-01, -1.2674e+00,  1.6212e-01, -3.2536e-02,  5.4802e-03,
         -3.8689e-01, -2.8835e-01, -2.4752e-01,  3.0563e-01, -1.2548e-01,
         -9.1281e-02, -4.0291e-01, -1.2624e-01, -1.2603e-01,  2.3507e-01,
         -2.1476e-01, -1.1816e-01, -2.8238e-01, -9.6153e-02, -2.8736e-01,
          3.3887e-03, -1.1957e-02, -5.6726e-03, -1.5162e-02,  6.5989e-02,
          5.8485e-02, -2.6477e-01,  4.9295e-01,  3.2288e-01, -2.8153e-01,
         -2.6218e-01, -2.9256e-02,  1.5696e-01, -4.0612e-01,  3.0217e-01,
         -3.5119e-01, -1.1932e-01, -6.3716e-03,  1.1292e-01, -4.5513e-01,
         -2.7991e-01, -3.0072e-01,  4.8077e-03,  1.2767e-01,  9.9242e-01,
         -2.5712e-01,  1.8696e-01,  1.8350e-01, -2.7885e-02,  4.2262e-03,
         -6.4803e-01, -8.8985e-01,  2.2670e-01,  5.3771e-01, -6.1697e-01,
          1.8857e-01,  3.5171e-01, -7.8546e-02, -6.4272e-01, -2.1540e-01,
          4.7074e-01,  1.5926e-01]], device='cuda:0') tensor(0.2055, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
960000 特征值优化 tensor(0.7115, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6243, -0.0741, -0.5562, -0.6328, -1.0463, -1.7134, -3.4247,  2.4723,
         -0.8691,  0.3849, -0.7956, -1.2616,  0.1630, -0.0180,  0.0293, -0.3764,
         -0.3049, -0.2346,  0.3165, -0.1240, -0.0929, -0.4045, -0.0735, -0.1759,
          0.2437, -0.1856, -0.1331, -0.2893, -0.0961, -0.2871,  0.0059, -0.0056,
          0.0157, -0.0130,  0.0822,  0.0408, -0.2844,  0.4935,  0.3102, -0.2785,
         -0.2539, -0.0274,  0.1602, -0.4104,  0.3011, -0.3535, -0.1177, -0.0107,
          0.1149, -0.4529, -0.2840, -0.2981, -0.0064,  0.1266,  0.9868, -0.2566,
          0.1883,  0.1852, -0.0292,  0.0344, -0.6422, -0.8694,  0.2083,  0.5425,
         -0.6070,  0.1860,  0.3490, -0.0770, -0.6250, -0.2247,  0.4684,  0.1644]],
       device='cuda:0') tensor(0.2056, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
961000 特征值优化 tensor(0.7028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6237, -0.0771, -0.5633, -0.6419, -1.0531, -1.7132, -3.4472,  2.4734,
         -0.8548,  0.3979, -0.7934, -1.2710,  0.1623, -0.0088,  0.0538, -0.3769,
         -0.3009, -0.2396,  0.3074, -0.1218, -0.0924, -0.4049, -0.1014, -0.1603,
          0.2384, -0.1928, -0.1163, -0.2986, -0.0954, -0.2891,  0.0037, -0.0101,
         -0.0035, -0.0124,  0.0605,  0.0502, -0.2781,  0.4920,  0.3152, -0.2803,
         -0.2573, -0.0285,  0.1613, -0.4106,  0.3045, -0.3540, -0.1171, -0.0086,
          0.1114, -0.4522, -0.2883, -0.2987,  0.0057,  0.1278,  0.9880, -0.2585,
          0.1898,  0.1853, -0.0198,  0.0311, -0.6409, -0.8618,  0.2125,  0.5493,
         -0.6176,  0.1887,  0.3542, -0.0812, -0.6287, -0.2384,  0.4751,  0.1589]],
       device='cuda:0') tensor(0.2098, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
962000 特征值优化 tensor(0.6955, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6221e+00, -7.1714e-02, -5.3898e-01, -6.5509e-01, -1.0353e+00,
         -1.7317e+00, -3.4595e+00,  2.4853e+00, -8.4079e-01,  4.1015e-01,
         -7.8032e-01, -1.2645e+00,  1.6360e-01,  1.2779e-02,  6.5550e-02,
         -4.3233e-01, -2.6803e-01, -2.4704e-01,  2.7489e-01, -1.2301e-01,
         -9.0052e-02, -4.0445e-01, -1.4924e-01, -1.0592e-01,  2.2679e-01,
         -2.1045e-01, -1.2273e-01, -3.0657e-01, -9.5873e-02, -2.8845e-01,
          4.2168e-03, -5.1046e-03, -8.6429e-03, -1.6967e-02,  5.5462e-02,
          5.7115e-02, -2.5877e-01,  4.9900e-01,  3.1518e-01, -2.8087e-01,
         -2.7312e-01, -2.6608e-02,  1.5829e-01, -4.0833e-01,  3.0612e-01,
         -3.5854e-01, -1.1460e-01, -1.9024e-02,  1.1244e-01, -4.5183e-01,
         -2.8020e-01, -3.0004e-01, -7.4799e-03,  1.2869e-01,  9.9738e-01,
         -2.5546e-01,  1.7874e-01,  1.8709e-01, -5.1683e-02,  3.3269e-03,
         -6.4012e-01, -8.5206e-01,  2.0886e-01,  5.4215e-01, -5.9961e-01,
          1.8607e-01,  3.4685e-01, -8.8945e-02, -6.4390e-01, -2.4969e-01,
          4.8541e-01,  1.6097e-01]], device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
963000 特征值优化 tensor(11.1300, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.3298e-02, -3.6078e-01, -6.4271e-01, -1.2570e+00, -4.6898e-01,
         -3.2817e+00, -5.1205e-01, -2.1692e-01, -8.6987e-01, -1.0507e+00,
         -1.5289e+00,  1.4046e+00, -5.3602e-02, -6.4671e-01, -1.3296e+00,
          1.1940e-01, -9.8391e-01, -2.1841e-01,  1.2698e-02,  5.7009e-02,
         -7.0391e-02, -1.7246e+00, -2.1879e-01, -5.5059e-01, -5.5678e-01,
         -8.8412e-02, -5.4753e-01,  1.6559e-01,  6.1715e-01,  1.1540e-03,
          7.9578e-01,  1.3732e-02,  9.1486e-03, -1.5893e-01,  8.8500e-02,
         -8.0892e-01, -1.5896e+00, -1.0115e-01, -5.9961e-01, -6.2002e-01,
          6.9138e-01,  2.8673e-02, -4.2977e-01, -9.1939e-01,  6.3950e-01,
          8.6785e-02,  3.8856e-02, -1.5636e+00, -8.4603e-01, -1.4816e-01,
          3.3678e-01,  6.8920e-01, -1.5086e-01,  1.4653e+00, -1.1925e-02,
          3.7900e-01,  3.1758e-01,  7.6569e-01, -5.0471e-02,  2.2469e+00,
         -2.6856e-03,  2.6157e-01,  1.7779e-01,  2.0456e-02,  1.1750e+00,
         -4.7866e-01,  4.7908e-01, -2.3492e-01, -6.8100e-01, -2.8247e-01,
          4.9899e-01,  9.0078e-01]], device='cuda:0') tensor(0.2084, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
964000 特征值优化 tensor(1.6770, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7463, -0.5584, -1.5359, -0.0106, -0.9106, -3.3659, -0.4795, -0.0108,
         -1.4219, -0.3867, -1.2512,  0.5915,  0.1446, -0.0652, -0.3180,  0.1161,
         -0.0566, -0.0571, -0.0402, -0.0106,  0.0575, -0.8214, -0.1469, -0.3245,
         -0.0408, -0.0184, -0.1562,  0.0914,  0.0245, -0.1424,  0.2065,  0.0555,
          0.0519,  0.3297, -0.0516, -0.2096, -0.5212,  0.0276, -0.0401, -0.1131,
          0.4224,  0.0131, -0.1240, -0.6527,  0.3149,  0.2376,  0.0040, -1.0107,
         -0.8916,  0.0438, -0.1227,  0.0755, -0.5570,  0.8207,  0.1010,  0.1578,
          0.1232,  0.2516, -0.0293,  1.0695,  0.1263,  0.1976,  0.0846,  0.0448,
          0.8512, -0.1495,  0.3071,  0.0035, -0.1515,  0.0195, -0.1761,  0.3336]],
       device='cuda:0') tensor(0.2138, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
965000 特征值优化 tensor(0.8044, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.8229e-01, -7.7417e-01, -1.5790e+00,  2.4312e-03, -8.1080e-01,
         -3.0067e+00, -7.5297e-01, -3.2581e-02, -1.4471e+00, -4.6560e-03,
         -9.1918e-01,  3.1200e-01,  1.5149e-01, -1.7656e-03, -2.1169e-01,
          1.0942e-01,  9.7458e-02, -9.5567e-02,  1.6099e-02, -3.5905e-02,
          4.5744e-02, -6.7806e-01, -2.7444e-01, -3.5802e-01,  8.4140e-02,
          1.1132e-01, -1.9618e-01,  1.8301e-01,  2.6949e-02, -1.6761e-01,
          1.7526e-01,  4.4086e-02,  3.1230e-03,  4.3669e-01, -3.1372e-02,
         -1.2019e-01, -2.7957e-01,  3.2908e-03, -7.6321e-02, -1.4967e-01,
          3.1790e-01,  4.9970e-02, -1.1117e-01, -6.8038e-01,  2.4009e-01,
          1.9345e-01, -2.8019e-02, -7.5428e-01, -1.0604e+00,  3.2417e-01,
         -1.8107e-02, -4.6378e-03, -3.1708e-01,  6.5038e-01, -2.9279e-02,
          1.9681e-01,  4.7941e-01, -2.4713e-01, -2.1284e-01,  4.6328e-01,
          1.3057e-01,  1.0015e-01,  9.1311e-02,  2.9678e-02,  9.6468e-01,
         -5.0710e-02,  1.9029e-01, -8.0091e-02, -1.9155e-01,  1.4011e-01,
         -1.6008e-01,  2.0695e-01]], device='cuda:0') tensor(0.2042, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
966000 特征值优化 tensor(0.7960, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.8791e-01, -7.8150e-01, -1.4635e+00, -8.4660e-02, -8.9858e-01,
         -2.8988e+00, -7.4655e-01,  1.5593e-01, -1.4650e+00,  5.6325e-02,
         -9.1110e-01,  1.3704e-01,  1.5254e-01,  1.2190e-02, -1.8475e-01,
          1.1224e-01,  8.0240e-02, -7.6739e-02,  6.3611e-02, -1.7777e-02,
          4.7445e-02, -6.4375e-01, -4.7453e-01, -3.3439e-01,  1.2867e-01,
          7.9042e-02, -2.0030e-01,  1.2542e-01,  3.1980e-02, -1.8716e-01,
          1.7131e-01,  2.0938e-02, -3.9764e-02,  3.3966e-01, -1.8635e-03,
         -1.1915e-01, -2.7045e-01,  1.5518e-02, -9.4257e-02, -1.4164e-01,
          3.1028e-01,  7.0528e-02, -1.1229e-01, -6.8649e-01,  2.4296e-01,
          2.1029e-01, -3.5947e-02, -7.5659e-01, -9.9908e-01,  3.3942e-01,
         -2.4394e-03, -2.6409e-02, -2.4492e-01,  6.2260e-01, -1.0047e-03,
          1.9167e-01,  5.5585e-01, -1.1843e-01, -2.0059e-01,  4.0534e-01,
          1.2959e-01,  1.1166e-01,  9.6354e-02,  5.1649e-02,  1.0102e+00,
         -1.9680e-02,  9.3164e-02, -6.3997e-02, -2.0789e-01,  1.3636e-01,
          4.5882e-03,  1.1690e-01]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
967000 特征值优化 tensor(0.7804, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.9454, -0.8184, -1.3740, -0.1444, -0.9497, -2.8149, -0.8212,  0.3110,
         -1.4359,  0.0554, -0.8208,  0.0703,  0.1676, -0.0068, -0.1492,  0.0873,
          0.0933, -0.1359,  0.0770, -0.0212,  0.0631, -0.6188, -0.5262, -0.2047,
          0.1687,  0.0542, -0.2172,  0.1283,  0.0271, -0.2034,  0.1788,  0.0695,
         -0.0468,  0.3520,  0.0153, -0.0546, -0.2707,  0.0033, -0.1109, -0.1290,
          0.3086,  0.0860, -0.1116, -0.7043,  0.2312,  0.1983, -0.0534, -0.7717,
         -0.9447,  0.3423,  0.0118, -0.0502, -0.1006,  0.5554,  0.0392,  0.1761,
          0.3936, -0.0833, -0.1838,  0.3637,  0.1649,  0.1025, -0.0316,  0.0772,
          1.0160, -0.0287,  0.0707, -0.0589, -0.3313,  0.1811,  0.1315,  0.0540]],
       device='cuda:0') tensor(0.2041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
968000 特征值优化 tensor(0.7821, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0521e+00, -9.2115e-01, -1.2831e+00, -1.8718e-01, -9.8880e-01,
         -2.6506e+00, -7.5122e-01,  3.5401e-01, -1.3956e+00,  5.8585e-02,
         -8.5894e-01,  7.3995e-02,  1.9964e-01, -4.2393e-02, -1.3555e-01,
          8.0172e-02,  9.2663e-02, -1.4009e-01,  7.3726e-02, -4.7418e-03,
          8.9799e-02, -6.0377e-01, -4.8576e-01, -1.7798e-01,  1.7725e-01,
          5.4379e-02, -1.9716e-01,  1.4577e-01,  2.7745e-02, -2.2048e-01,
          1.8468e-01,  5.1706e-02, -7.7603e-02,  3.4377e-01,  5.4276e-03,
         -4.5721e-02, -2.7283e-01, -1.0558e-02, -1.2531e-01, -1.1362e-01,
          3.0675e-01,  9.5923e-02, -1.3587e-01, -7.1858e-01,  2.1444e-01,
          1.7285e-01, -7.1316e-02, -7.8364e-01, -9.1845e-01,  3.4846e-01,
          2.2166e-02, -8.1320e-02,  9.7191e-02,  4.4859e-01, -1.4799e-03,
          1.4576e-01,  3.3326e-01, -7.7891e-02, -1.9861e-01,  3.5229e-01,
          1.1033e-01,  1.0848e-01, -6.1265e-02,  5.9349e-02,  9.5336e-01,
         -2.1989e-02,  1.0191e-01, -3.8791e-02, -4.2110e-01,  2.5220e-01,
          1.6053e-01,  5.3484e-02]], device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
969000 特征值优化 tensor(0.7868, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1097e+00, -8.9950e-01, -1.1333e+00, -3.0453e-01, -9.9634e-01,
         -2.4864e+00, -7.8549e-01,  4.1094e-01, -1.4179e+00,  2.4236e-02,
         -8.2379e-01,  6.8639e-02,  1.9381e-01, -4.1373e-02, -1.4035e-01,
          6.9060e-02,  8.4011e-02, -1.4021e-01,  7.4102e-02, -1.5168e-02,
          9.9341e-02, -5.6385e-01, -5.0278e-01, -1.3423e-01,  1.3880e-01,
          8.3130e-02, -1.9403e-01,  1.7063e-01,  3.1722e-02, -2.4916e-01,
          1.8578e-01,  7.3424e-02, -6.5164e-02,  3.0834e-01, -4.9807e-03,
         -1.4103e-02, -2.6897e-01, -6.5961e-04, -9.5969e-02, -1.3338e-01,
          2.9809e-01,  6.5833e-02, -1.2558e-01, -7.5453e-01,  2.3533e-01,
          1.7122e-01, -6.7550e-02, -7.7728e-01, -9.0232e-01,  4.0505e-01,
          1.6003e-02, -1.0173e-01,  1.5034e-01,  4.1409e-01,  8.5735e-02,
          1.1598e-01,  3.0966e-01, -3.1195e-02, -2.3475e-01,  3.8956e-01,
          9.4450e-02,  1.3219e-01, -1.1446e-01,  1.0341e-01,  1.0121e+00,
         -2.8410e-02,  7.7079e-02, -4.8763e-02, -4.9210e-01,  2.7100e-01,
          1.1010e-01,  4.7353e-02]], device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
970000 特征值优化 tensor(0.7588, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1056, -0.9215, -1.0094, -0.3963, -0.9887, -2.3203, -0.7713,  0.4518,
         -1.4788,  0.0151, -0.8688,  0.0976,  0.1969, -0.0785, -0.1682,  0.0515,
          0.0992, -0.1057,  0.1112,  0.0205,  0.1037, -0.5399, -0.4473, -0.1067,
          0.1170,  0.1002, -0.1555,  0.1826,  0.0097, -0.2890,  0.1868,  0.0739,
         -0.0825,  0.2705, -0.0153, -0.0264, -0.2637,  0.0365, -0.1238, -0.1258,
          0.2945,  0.0870, -0.1305, -0.7822,  0.2397,  0.1601, -0.0639, -0.8045,
         -0.8323,  0.3805,  0.0211, -0.1568,  0.1433,  0.4121, -0.0232,  0.1178,
          0.3085,  0.0023, -0.1951,  0.4082,  0.1095,  0.1401, -0.1064,  0.0921,
          0.9729, -0.0244,  0.1313, -0.0517, -0.5109,  0.2830,  0.1739,  0.0469]],
       device='cuda:0') tensor(0.2091, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
971000 特征值优化 tensor(0.7577, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1103, -0.9213, -1.0005, -0.5025, -0.9963, -2.3283, -0.7435,  0.4347,
         -1.4815,  0.0053, -0.8870,  0.0857,  0.1965, -0.0624, -0.1668,  0.0546,
          0.1074, -0.1082,  0.1087,  0.0178,  0.1033, -0.5347, -0.4486, -0.1033,
          0.1072,  0.1311, -0.1374,  0.1897, -0.0062, -0.3137,  0.1862,  0.0741,
         -0.0843,  0.2693, -0.0207, -0.0158, -0.2617,  0.0494, -0.1319, -0.1217,
          0.2930,  0.0952, -0.1252, -0.7833,  0.2392,  0.1555, -0.0613, -0.8043,
         -0.8206,  0.3765,  0.0240, -0.1808,  0.1378,  0.4178, -0.0311,  0.1236,
          0.3115,  0.0046, -0.2024,  0.4019,  0.1066,  0.1410, -0.0957,  0.0919,
          0.9547, -0.0182,  0.1509, -0.0571, -0.4970,  0.2725,  0.1956,  0.0393]],
       device='cuda:0') tensor(0.2107, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
972000 特征值优化 tensor(0.7651, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1108e+00, -9.1521e-01, -1.0209e+00, -5.8082e-01, -9.8146e-01,
         -2.3238e+00, -7.4972e-01,  4.2016e-01, -1.4598e+00, -2.9830e-02,
         -8.9126e-01,  9.4256e-02,  1.9598e-01, -5.4481e-02, -1.5603e-01,
          6.9072e-02,  1.0905e-01, -1.2398e-01,  8.8798e-02,  3.1018e-03,
          1.0233e-01, -5.4076e-01, -4.2972e-01, -1.2307e-01,  1.0592e-01,
          1.0430e-01, -1.6030e-01,  1.8212e-01,  7.8680e-04, -3.3602e-01,
          1.8608e-01,  8.1439e-02, -7.5201e-02,  2.6805e-01, -1.0738e-02,
         -7.6678e-03, -2.6328e-01,  3.9897e-02, -1.0358e-01, -1.3862e-01,
          2.9735e-01,  6.7953e-02, -1.3095e-01, -7.7658e-01,  2.4075e-01,
          1.6647e-01, -6.8592e-02, -8.0330e-01, -8.2815e-01,  3.7011e-01,
          2.1320e-02, -2.0334e-01,  1.4099e-01,  4.1430e-01,  1.7279e-02,
          1.2386e-01,  3.1321e-01,  5.0479e-03, -2.2438e-01,  3.9719e-01,
          8.5003e-02,  1.4997e-01, -1.4722e-01,  1.0607e-01,  9.9037e-01,
         -2.3985e-02,  1.4319e-01, -5.3830e-02, -4.9778e-01,  2.7576e-01,
          1.6284e-01,  4.4857e-02]], device='cuda:0') tensor(0.2237, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
973000 正交保障 tensor(0.2100, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1094, -0.9167, -1.0552, -0.6464, -0.9773, -2.3223, -0.7562,  0.4211,
         -1.4096, -0.0767, -0.8797,  0.0672,  0.1941, -0.0595, -0.1335,  0.1105,
          0.0741, -0.1764,  0.0271, -0.0472,  0.1016, -0.5530, -0.4358, -0.1054,
          0.1099,  0.0884, -0.1773,  0.1909, -0.0039, -0.3525,  0.1905,  0.0885,
         -0.0556,  0.2666,  0.0106, -0.0039, -0.2702,  0.0294, -0.0733, -0.1588,
          0.3032,  0.0442, -0.1257, -0.7823,  0.2444,  0.1602, -0.0595, -0.8096,
         -0.8442,  0.3671,  0.0175, -0.2199,  0.1651,  0.4096,  0.0759,  0.1091,
          0.3054,  0.0119, -0.2745,  0.3626,  0.0565,  0.1505, -0.2029,  0.1348,
          1.0243, -0.0401,  0.1163, -0.0586, -0.4742,  0.2639,  0.1230,  0.0523]],
       device='cuda:0') tensor(0.2100, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
974000 特征值优化 tensor(0.7615, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1179, -0.9193, -1.0890, -0.7109, -0.9738, -2.3252, -0.7328,  0.3958,
         -1.4233, -0.0855, -0.8965,  0.0584,  0.1953, -0.0614, -0.1442,  0.1147,
          0.0755, -0.1524,  0.0528, -0.0265,  0.1039, -0.5594, -0.4398, -0.1220,
          0.0998,  0.1057, -0.1661,  0.1919, -0.0026, -0.3691,  0.1896,  0.0853,
         -0.0542,  0.2679, -0.0056, -0.0052, -0.2679,  0.0471, -0.0854, -0.1528,
          0.3012,  0.0528, -0.1277, -0.7835,  0.2468,  0.1731, -0.0696, -0.8047,
         -0.8544,  0.3607,  0.0169, -0.2355,  0.1594,  0.4093,  0.0470,  0.1151,
          0.3124,  0.0054, -0.2815,  0.3605,  0.0569,  0.1516, -0.1911,  0.1235,
          1.0035, -0.0234,  0.1404, -0.0629, -0.4649,  0.2579,  0.1523,  0.0400]],
       device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
975000 特征值优化 tensor(0.7484, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.1410, -0.9379, -0.9642, -0.8882, -0.9763, -2.3789, -0.6700,  0.4246,
         -1.5060, -0.0698, -0.9342,  0.0600,  0.2024, -0.0649, -0.1646,  0.0655,
          0.1010, -0.1031,  0.1096,  0.0112,  0.1083, -0.5301, -0.4154, -0.2028,
          0.0721,  0.1299, -0.1259,  0.1998, -0.0177, -0.4105,  0.1864,  0.0834,
         -0.0825,  0.2869, -0.0211,  0.0176, -0.2537,  0.0731, -0.1223, -0.1256,
          0.2865,  0.0810, -0.1264, -0.8011,  0.2454,  0.1410, -0.0573, -0.8128,
         -0.8406,  0.4119,  0.0319, -0.2848,  0.1309,  0.4174, -0.0348,  0.1284,
          0.3042, -0.0142, -0.2533,  0.4251,  0.0702,  0.1567, -0.1322,  0.0928,
          0.9385, -0.0128,  0.1966, -0.0541, -0.4791,  0.2625,  0.2251,  0.0265]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
976000 特征值优化 tensor(0.6245, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.4427e-01, -7.0225e-01, -9.9650e-01, -9.7410e-01, -1.0151e+00,
         -2.7394e+00, -6.3995e-01,  4.4564e-01, -1.6128e+00,  5.5555e-02,
         -7.6996e-01,  1.1519e-01,  1.4930e-01, -2.4928e-02, -1.6375e-01,
          6.6286e-02,  6.7753e-02, -1.3741e-01,  8.6994e-02, -4.9755e-02,
          5.3130e-02, -5.0341e-01, -4.4572e-01, -2.5165e-01,  4.7945e-02,
          1.3031e-01, -1.7587e-01,  1.8284e-01, -5.4888e-04, -3.9640e-01,
          1.8105e-01,  1.0551e-01,  1.8882e-04,  3.8243e-01,  1.5414e-02,
          4.6595e-03, -2.6352e-01,  4.4185e-02, -9.3663e-02, -1.3480e-01,
          3.0414e-01,  3.2895e-02, -3.0712e-01, -7.1197e-01,  4.8197e-01,
          1.3210e-02,  5.3477e-02, -5.8944e-01, -1.0355e+00,  4.0988e-01,
          1.8344e-01, -3.5727e-01,  4.4003e-01,  2.4496e-01, -5.1224e-02,
          4.1112e-02,  2.3684e-01, -8.3611e-02,  3.0338e-03,  3.9842e-01,
          9.3858e-02,  9.9242e-02, -2.3166e-01,  8.1914e-02,  6.7009e-01,
          2.8484e-02,  2.3821e-01, -6.9717e-02, -4.2851e-01,  1.9624e-01,
          2.6529e-01,  1.1499e-01]], device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
977000 特征值优化 tensor(0.6143, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.7510e-01, -6.1910e-01, -8.3999e-01, -7.9498e-01, -1.0013e+00,
         -2.8794e+00, -6.5278e-01,  4.7907e-01, -1.6966e+00,  1.0731e-01,
         -7.6015e-01,  2.1452e-01,  1.3990e-01, -1.9855e-02, -1.6790e-01,
          7.2969e-02,  9.4012e-02, -7.3465e-02,  1.0456e-01, -1.3145e-01,
          5.5919e-02, -4.5967e-01, -4.1775e-01, -2.2056e-01,  7.2713e-02,
          1.1286e-01, -1.6493e-01,  2.0060e-01, -3.4440e-02, -3.5464e-01,
          1.8103e-01,  1.0433e-01,  4.0638e-03,  4.1346e-01,  7.8928e-03,
          7.9754e-04, -2.5845e-01,  5.1951e-02, -5.9938e-02, -1.0872e-01,
          2.9917e-01,  5.3391e-03, -3.3355e-01, -7.0145e-01,  5.2706e-01,
          2.1784e-01, -3.1973e-02, -5.8766e-01, -9.7765e-01,  4.3096e-01,
          1.7388e-01, -3.0487e-01,  4.3989e-01,  2.4358e-01, -5.1579e-02,
         -2.8829e-02,  2.5183e-01, -1.2175e-01,  5.5877e-03,  3.9913e-01,
          1.1020e-01,  1.0868e-01, -2.2035e-01,  1.0535e-01,  6.2759e-01,
          2.1905e-02,  1.8352e-01, -4.6427e-02, -4.4500e-01,  1.9066e-01,
          3.0993e-01,  1.2309e-01]], device='cuda:0') tensor(0.2079, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
978000 特征值优化 tensor(0.6105, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8480, -0.5773, -0.7397, -0.6983, -1.0170, -2.8974, -0.6553,  0.4589,
         -1.7018,  0.1056, -0.7620,  0.2232,  0.1339,  0.0044, -0.1892,  0.0818,
          0.1005, -0.0682,  0.1145, -0.1355,  0.0497, -0.4363, -0.4019, -0.2168,
          0.0639,  0.1224, -0.1685,  0.1941, -0.0334, -0.3304,  0.1812,  0.1045,
          0.0029,  0.4180,  0.0161,  0.0035, -0.2605,  0.0538, -0.0594, -0.1100,
          0.3028,  0.0035, -0.3386, -0.6856,  0.5381,  0.2660, -0.0463, -0.5914,
         -0.9505,  0.4524,  0.1727, -0.2815,  0.4430,  0.2436, -0.0540, -0.0168,
          0.2525, -0.1230,  0.0126,  0.3978,  0.1063,  0.1042, -0.2257,  0.0975,
          0.6343,  0.0248,  0.1895, -0.0516, -0.4497,  0.1918,  0.3094,  0.1225]],
       device='cuda:0') tensor(0.2056, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
979000 特征值优化 tensor(0.6065, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.3540e-01, -5.7346e-01, -6.8325e-01, -6.4551e-01, -1.0168e+00,
         -3.0202e+00, -6.5665e-01,  4.6808e-01, -1.6918e+00,  9.6402e-02,
         -7.8054e-01,  2.3153e-01,  1.3348e-01,  3.1617e-02, -2.0749e-01,
          8.4840e-02,  1.0472e-01, -5.3688e-02,  1.1634e-01, -1.3615e-01,
          4.9571e-02, -4.2382e-01, -3.7979e-01, -2.1313e-01,  5.9444e-02,
          1.3385e-01, -1.7050e-01,  1.9641e-01, -3.3533e-02, -3.1817e-01,
          1.8051e-01,  1.0471e-01, -1.9240e-03,  4.5228e-01,  1.4571e-02,
          1.4561e-02, -2.6301e-01,  4.6107e-02, -6.1653e-02, -1.0940e-01,
          3.0676e-01,  2.3641e-03, -3.4602e-01, -6.8538e-01,  5.4181e-01,
          2.6103e-01, -4.6495e-02, -6.0256e-01, -9.2779e-01,  4.5899e-01,
          1.7844e-01, -2.7147e-01,  4.4340e-01,  2.4373e-01, -5.2785e-02,
         -1.3562e-02,  2.5509e-01, -1.6288e-01,  1.1446e-02,  3.9796e-01,
          1.0131e-01,  1.0094e-01, -2.2201e-01,  9.4564e-02,  6.2950e-01,
          2.8402e-02,  1.9748e-01, -5.2903e-02, -4.4017e-01,  1.9179e-01,
          3.0679e-01,  1.2457e-01]], device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
980000 特征值优化 tensor(0.6066, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.4606e-01, -5.7934e-01, -6.4038e-01, -5.9605e-01, -1.0173e+00,
         -3.1404e+00, -6.4937e-01,  4.7172e-01, -1.7024e+00,  9.4147e-02,
         -7.7719e-01,  2.2939e-01,  1.3198e-01,  3.1444e-02, -2.0479e-01,
          8.6480e-02,  1.0004e-01, -5.4937e-02,  1.1536e-01, -1.3496e-01,
          4.7603e-02, -4.1191e-01, -3.8790e-01, -2.1985e-01,  5.1823e-02,
          1.2949e-01, -1.7539e-01,  1.9034e-01, -2.8590e-02, -3.0729e-01,
          1.8050e-01,  1.0542e-01, -2.1628e-03,  4.8107e-01,  2.0033e-02,
          1.2194e-02, -2.6109e-01,  4.6935e-02, -6.2388e-02, -1.0805e-01,
          3.0593e-01,  3.0050e-03, -3.3944e-01, -6.8855e-01,  5.3807e-01,
          2.5357e-01, -4.2952e-02, -5.9200e-01, -9.2984e-01,  4.7763e-01,
          1.7029e-01, -2.5984e-01,  4.4301e-01,  2.4420e-01, -5.1473e-02,
         -2.1142e-02,  2.6060e-01, -1.9286e-01,  3.9947e-03,  3.8753e-01,
          1.0177e-01,  1.0347e-01, -2.2274e-01,  9.5673e-02,  6.2307e-01,
          3.2884e-02,  1.9550e-01, -4.8824e-02, -4.4168e-01,  1.9062e-01,
          3.1318e-01,  1.2197e-01]], device='cuda:0') tensor(0.2048, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
981000 特征值优化 tensor(0.5991, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8131, -0.6361, -0.5945, -0.5548, -1.0259, -3.2516, -0.6646,  0.4613,
         -1.7172,  0.1108, -0.7849,  0.2433,  0.1283, -0.0655, -0.1877,  0.1240,
          0.0338, -0.1289,  0.1169, -0.1381,  0.0241, -0.4038, -0.3920, -0.1882,
          0.0743,  0.1111, -0.1750,  0.1991, -0.0300, -0.2970,  0.1799,  0.1118,
         -0.0292,  0.4997,  0.0456, -0.0180, -0.2584,  0.0674, -0.0612, -0.1036,
          0.3026,  0.0088, -0.3539, -0.6796,  0.5511,  0.2816, -0.0679, -0.6065,
         -0.9183,  0.4886,  0.1740, -0.2495,  0.4448,  0.2436, -0.0573, -0.0414,
          0.2380, -0.1907,  0.0102,  0.3646,  0.1050,  0.1054, -0.2155,  0.0874,
          0.6360,  0.0236,  0.2242, -0.0685, -0.4400,  0.1796,  0.3371,  0.1062]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
982000 特征值优化 tensor(0.6000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7998, -0.6307, -0.5798, -0.5411, -1.0253, -3.3194, -0.6767,  0.4693,
         -1.7191,  0.1035, -0.7918,  0.2355,  0.1288, -0.0564, -0.1804,  0.1119,
          0.0414, -0.1211,  0.1129, -0.1385,  0.0234, -0.4016, -0.3945, -0.1883,
          0.0694,  0.1078, -0.1725,  0.1962, -0.0290, -0.2938,  0.1800,  0.1086,
         -0.0173,  0.5109,  0.0492, -0.0173, -0.2596,  0.0730, -0.0617, -0.1051,
          0.3038,  0.0084, -0.3618, -0.6775,  0.5545,  0.2852, -0.0729, -0.6113,
         -0.9149,  0.4923,  0.1759, -0.2486,  0.4483,  0.2415, -0.0544, -0.0548,
          0.2595, -0.2077,  0.0077,  0.3627,  0.1122,  0.1083, -0.2295,  0.0963,
          0.6355,  0.0275,  0.2263, -0.0678, -0.4445,  0.1787,  0.3343,  0.1083]],
       device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
983000 特征值优化 tensor(0.6053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.1971e-01, -5.5078e-01, -5.8412e-01, -5.4523e-01, -1.0146e+00,
         -3.3024e+00, -6.5100e-01,  4.5885e-01, -1.6877e+00,  7.1658e-02,
         -8.0358e-01,  2.3489e-01,  1.2847e-01,  4.2262e-02, -2.1297e-01,
          7.5486e-02,  1.1275e-01, -4.2859e-02,  1.1691e-01, -1.3673e-01,
          4.2996e-02, -3.9916e-01, -3.8880e-01, -1.9512e-01,  6.5762e-02,
          1.3944e-01, -1.7049e-01,  1.9619e-01, -2.4394e-02, -2.9347e-01,
          1.8067e-01,  1.0414e-01,  4.0647e-03,  5.1875e-01,  2.2057e-02,
          2.6521e-02, -2.6334e-01,  4.7078e-02, -5.9587e-02, -1.0781e-01,
          3.1491e-01,  5.6531e-04, -3.4627e-01, -6.7625e-01,  5.4311e-01,
          2.6895e-01, -4.5061e-02, -6.0230e-01, -9.1067e-01,  4.9194e-01,
          1.8051e-01, -2.5071e-01,  4.4836e-01,  2.4098e-01, -5.5421e-02,
          6.7348e-03,  2.7610e-01, -2.3545e-01,  1.2046e-04,  3.7330e-01,
          9.7161e-02,  1.0334e-01, -2.3127e-01,  9.6116e-02,  6.0995e-01,
          3.4794e-02,  2.0950e-01, -5.3844e-02, -4.4178e-01,  1.8475e-01,
          3.1397e-01,  1.2417e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
984000 特征值优化 tensor(0.6047, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.1427e-01, -5.4479e-01, -5.7575e-01, -5.3467e-01, -1.0170e+00,
         -3.3121e+00, -6.6582e-01,  4.2990e-01, -1.6723e+00,  6.8972e-02,
         -8.1995e-01,  2.4292e-01,  1.2671e-01,  5.5679e-02, -2.2061e-01,
          7.1439e-02,  1.1535e-01, -4.1183e-02,  1.1829e-01, -1.3770e-01,
          4.1372e-02, -3.9749e-01, -3.7616e-01, -1.9244e-01,  7.8953e-02,
          1.4552e-01, -1.7507e-01,  2.0153e-01, -2.4360e-02, -2.9032e-01,
          1.8102e-01,  1.0407e-01,  9.0611e-03,  5.2145e-01,  1.6826e-02,
          5.6914e-02, -2.6850e-01,  3.8969e-02, -5.7769e-02, -1.0919e-01,
          3.2547e-01, -2.0357e-03, -3.5128e-01, -6.7923e-01,  5.4395e-01,
          2.5418e-01, -4.1838e-02, -5.9991e-01, -9.1182e-01,  4.9631e-01,
          1.7917e-01, -2.4746e-01,  4.5221e-01,  2.3893e-01, -5.5623e-02,
         -2.3748e-02,  2.7210e-01, -2.3648e-01, -4.0728e-03,  3.7021e-01,
          8.9371e-02,  1.0191e-01, -2.4442e-01,  9.4453e-02,  6.0045e-01,
          3.4407e-02,  2.1675e-01, -6.4345e-02, -4.2879e-01,  1.7673e-01,
          3.1685e-01,  1.2557e-01]], device='cuda:0') tensor(0.2029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
985000 特征值优化 tensor(0.6022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8137, -0.6139, -0.5832, -0.5408, -1.0240, -3.3118, -0.6766,  0.4350,
         -1.7118,  0.0795, -0.8060,  0.2332,  0.1256, -0.0472, -0.1739,  0.1156,
          0.0410, -0.1199,  0.1214, -0.1377,  0.0262, -0.4016, -0.3981, -0.1842,
          0.0726,  0.1002, -0.1786,  0.1942, -0.0263, -0.2936,  0.1806,  0.1083,
         -0.0165,  0.5146,  0.0468, -0.0195, -0.2605,  0.0754, -0.0604, -0.1068,
          0.3117,  0.0040, -0.3582, -0.6828,  0.5525,  0.2863, -0.0701, -0.6076,
         -0.9144,  0.4924,  0.1772, -0.2495,  0.4481,  0.2415, -0.0515,  0.0076,
          0.2560, -0.2147,  0.0035,  0.3637,  0.1083,  0.1063, -0.2344,  0.0907,
          0.6263,  0.0313,  0.2265, -0.0609, -0.4371,  0.1710,  0.3375,  0.1105]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
986000 特征值优化 tensor(0.6035, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8167, -0.5510, -0.5827, -0.5430, -1.0146, -3.2955, -0.6573,  0.4386,
         -1.6765,  0.0552, -0.8183,  0.2473,  0.1271,  0.0552, -0.2238,  0.0709,
          0.1133, -0.0382,  0.1182, -0.1372,  0.0419, -0.3996, -0.3756, -0.1954,
          0.0767,  0.1484, -0.1746,  0.2066, -0.0268, -0.2922,  0.1807,  0.1036,
          0.0094,  0.5149,  0.0170,  0.0515, -0.2673,  0.0448, -0.0560, -0.1086,
          0.3217, -0.0043, -0.3491, -0.6780,  0.5430,  0.2590, -0.0417, -0.6023,
         -0.9111,  0.4933,  0.1800, -0.2490,  0.4482,  0.2414, -0.0538,  0.0049,
          0.2659, -0.2239, -0.0047,  0.3682,  0.0896,  0.1015, -0.2438,  0.0941,
          0.6003,  0.0330,  0.2181, -0.0654, -0.4289,  0.1782,  0.3280,  0.1196]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
987000 特征值优化 tensor(0.6127, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.2368e-01, -5.8975e-01, -5.8659e-01, -5.3941e-01, -1.0119e+00,
         -3.2908e+00, -6.6739e-01,  4.1122e-01, -1.6587e+00,  3.9304e-02,
         -8.3753e-01,  2.2450e-01,  1.2323e-01,  2.7997e-02, -1.8350e-01,
          8.0397e-02,  5.7341e-02, -7.7597e-02,  8.9388e-02, -1.3743e-01,
          3.0617e-02, -3.9881e-01, -3.7875e-01, -1.9177e-01,  6.5711e-02,
          9.4262e-02, -1.8085e-01,  1.9436e-01, -2.3752e-02, -2.9268e-01,
          1.8064e-01,  1.0449e-01,  8.6400e-03,  5.1963e-01,  1.1373e-02,
          3.2513e-02, -2.6411e-01,  5.0297e-02, -5.4829e-02, -1.1178e-01,
          3.1878e-01, -1.6619e-03, -3.4864e-01, -6.8440e-01,  5.4497e-01,
          2.5704e-01, -5.0571e-02, -6.0001e-01, -9.1041e-01,  4.8958e-01,
          1.7770e-01, -2.4881e-01,  4.4300e-01,  2.4410e-01, -5.6236e-02,
          6.5353e-04,  2.7769e-01, -2.4015e-01, -8.9423e-03,  3.7870e-01,
          9.6404e-02,  1.0606e-01, -2.3300e-01,  9.2876e-02,  5.9722e-01,
          3.4205e-02,  2.0516e-01, -4.9871e-02, -4.1245e-01,  1.7292e-01,
          3.1070e-01,  1.2490e-01]], device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
988000 特征值优化 tensor(0.5996, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.0903e-01, -6.1872e-01, -5.8366e-01, -5.4583e-01, -1.0232e+00,
         -3.2917e+00, -6.6785e-01,  4.8788e-01, -1.7254e+00,  5.8687e-02,
         -7.8427e-01,  2.3735e-01,  1.2629e-01, -6.6726e-02, -1.7425e-01,
          1.2021e-01,  3.8011e-02, -1.3563e-01,  1.2098e-01, -1.3842e-01,
          2.6122e-02, -4.0202e-01, -4.0122e-01, -1.8232e-01,  6.4301e-02,
          1.0522e-01, -1.7969e-01,  1.9377e-01, -2.7533e-02, -2.9470e-01,
          1.8000e-01,  1.0612e-01, -6.1532e-03,  5.1087e-01,  4.7659e-02,
         -3.2573e-02, -2.5652e-01,  7.7002e-02, -5.5773e-02, -1.0511e-01,
          2.9764e-01,  2.5013e-03, -3.6068e-01, -6.8309e-01,  5.5173e-01,
          2.7678e-01, -6.6185e-02, -6.0847e-01, -9.1499e-01,  4.9172e-01,
          1.7757e-01, -2.5008e-01,  4.4382e-01,  2.4395e-01, -5.4830e-02,
         -2.5787e-02,  2.3553e-01, -2.0187e-01,  6.4344e-05,  3.5708e-01,
          1.0666e-01,  1.1244e-01, -2.4786e-01,  1.0533e-01,  6.2709e-01,
          2.7133e-02,  2.2850e-01, -6.7642e-02, -4.3760e-01,  1.7881e-01,
          3.5370e-01,  1.0296e-01]], device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
989000 特征值优化 tensor(0.6187, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8461, -0.5936, -0.5865, -0.5387, -1.0119, -3.2559, -0.6365,  0.4785,
         -1.7381,  0.0226, -0.7824,  0.2211,  0.1317, -0.0482, -0.1621,  0.0838,
          0.0733, -0.0973,  0.1037, -0.1354,  0.0471, -0.3992, -0.4069, -0.1897,
          0.0521,  0.0909, -0.1718,  0.1932, -0.0216, -0.2941,  0.1807,  0.1042,
          0.0063,  0.5096,  0.0073, -0.0171, -0.2567,  0.0576, -0.0473, -0.1085,
          0.2968, -0.0096, -0.3422, -0.6851,  0.5392,  0.2914, -0.0533, -0.5956,
         -0.9164,  0.4894,  0.1769, -0.2487,  0.4406,  0.2444, -0.0530, -0.0212,
          0.2478, -0.2209, -0.0040,  0.3591,  0.1022,  0.1106, -0.2265,  0.1127,
          0.6188,  0.0212,  0.1943, -0.0441, -0.4320,  0.1864,  0.3292,  0.1267]],
       device='cuda:0') tensor(0.2042, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
990000 特征值优化 tensor(0.6033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8392, -0.5858, -0.5875, -0.5516, -1.0193, -3.2757, -0.6461,  0.4592,
         -1.6838,  0.0193, -0.7987,  0.2490,  0.1327,  0.0578, -0.2298,  0.0793,
          0.1036, -0.0416,  0.1185, -0.1354,  0.0475, -0.4011, -0.3815, -0.1944,
          0.0714,  0.1383, -0.1738,  0.2048, -0.0262, -0.2946,  0.1807,  0.1023,
          0.0063,  0.5141,  0.0195,  0.0366, -0.2618,  0.0554, -0.0528, -0.1079,
          0.3049, -0.0075, -0.3436, -0.6903,  0.5359,  0.2426, -0.0366, -0.6028,
         -0.9134,  0.4913,  0.1804, -0.2512,  0.4478,  0.2411, -0.0538, -0.0165,
          0.2603, -0.2250, -0.0077,  0.3726,  0.0990,  0.1040, -0.2351,  0.0988,
          0.5946,  0.0356,  0.2162, -0.0604, -0.4374,  0.1917,  0.3321,  0.1203]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
991000 特征值优化 tensor(0.6045, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8402, -0.5751, -0.5851, -0.5462, -1.0197, -3.2846, -0.6444,  0.4685,
         -1.6830,  0.0102, -0.8042,  0.2467,  0.1285,  0.0611, -0.2266,  0.0753,
          0.1042, -0.0430,  0.1213, -0.1353,  0.0432, -0.4001, -0.3815, -0.1923,
          0.0653,  0.1522, -0.1783,  0.2001, -0.0205, -0.2941,  0.1798,  0.1030,
          0.0051,  0.5182,  0.0204,  0.0416, -0.2602,  0.0559, -0.0523, -0.1092,
          0.3052, -0.0078, -0.3393, -0.6857,  0.5381,  0.2559, -0.0409, -0.6027,
         -0.9120,  0.4924,  0.1817, -0.2528,  0.4500,  0.2394, -0.0549, -0.0237,
          0.2621, -0.2326, -0.0117,  0.3721,  0.0994,  0.1060, -0.2326,  0.1029,
          0.5910,  0.0386,  0.2192, -0.0607, -0.4374,  0.1900,  0.3303,  0.1200]],
       device='cuda:0') tensor(0.2063, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
992000 特征值优化 tensor(0.6050, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.3516e-01, -5.6940e-01, -5.8461e-01, -5.4223e-01, -1.0168e+00,
         -3.2788e+00, -6.4313e-01,  4.6634e-01, -1.6950e+00,  3.1448e-03,
         -7.9979e-01,  2.4173e-01,  1.2741e-01,  6.1307e-02, -2.2945e-01,
          7.9015e-02,  1.0277e-01, -4.1944e-02,  1.1589e-01, -1.3596e-01,
          4.2448e-02, -3.9928e-01, -3.8457e-01, -1.9660e-01,  5.5741e-02,
          1.3017e-01, -1.8333e-01,  1.9271e-01, -2.0469e-02, -2.9386e-01,
          1.8036e-01,  1.0259e-01,  7.2637e-03,  5.1698e-01,  2.3734e-02,
          2.8835e-02, -2.6079e-01,  5.6202e-02, -5.1599e-02, -1.0919e-01,
          3.0554e-01, -7.6491e-03, -3.4515e-01, -6.8677e-01,  5.4032e-01,
          2.5343e-01, -4.2138e-02, -6.0206e-01, -9.1158e-01,  4.9196e-01,
          1.8248e-01, -2.5248e-01,  4.4876e-01,  2.4091e-01, -5.4799e-02,
         -2.3837e-02,  2.6544e-01, -2.3255e-01, -1.4032e-02,  3.7497e-01,
          9.8730e-02,  1.0623e-01, -2.3435e-01,  1.0188e-01,  5.9375e-01,
          4.1634e-02,  2.1829e-01, -5.6516e-02, -4.3757e-01,  1.8968e-01,
          3.3311e-01,  1.1800e-01]], device='cuda:0') tensor(0.2056, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
993000 特征值优化 tensor(0.6042, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8485, -0.5826, -0.5847, -0.5450, -1.0210, -3.2842, -0.6474,  0.4581,
         -1.6876, -0.0052, -0.7998,  0.2452,  0.1271,  0.0666, -0.2319,  0.0804,
          0.1010, -0.0425,  0.1236, -0.1347,  0.0420, -0.4005, -0.3821, -0.1969,
          0.0610,  0.1310, -0.1816,  0.1971, -0.0205, -0.2936,  0.1806,  0.1023,
          0.0079,  0.5177,  0.0229,  0.0359, -0.2605,  0.0580, -0.0506, -0.1094,
          0.3051, -0.0088, -0.3376, -0.6891,  0.5381,  0.2541, -0.0420, -0.6032,
         -0.9125,  0.4924,  0.1817, -0.2528,  0.4509,  0.2395, -0.0554, -0.0214,
          0.2655, -0.2328, -0.0151,  0.3749,  0.0985,  0.1057, -0.2365,  0.1010,
          0.5885,  0.0409,  0.2235, -0.0600, -0.4388,  0.1904,  0.3345,  0.1189]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
994000 特征值优化 tensor(0.6028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8470, -0.5943, -0.5848, -0.5458, -1.0204, -3.2965, -0.6470,  0.4621,
         -1.6781, -0.0114, -0.8067,  0.2550,  0.1325,  0.0680, -0.2337,  0.0778,
          0.1017, -0.0387,  0.1233, -0.1346,  0.0469, -0.4006, -0.3732, -0.1939,
          0.0711,  0.1315, -0.1830,  0.2006, -0.0206, -0.2947,  0.1808,  0.1024,
          0.0077,  0.5203,  0.0212,  0.0561, -0.2610,  0.0546, -0.0487, -0.1095,
          0.3060, -0.0112, -0.3396, -0.6925,  0.5349,  0.2430, -0.0374, -0.6044,
         -0.9123,  0.4915,  0.1811, -0.2529,  0.4509,  0.2398, -0.0547, -0.0162,
          0.2655, -0.2348, -0.0196,  0.3727,  0.0962,  0.1059, -0.2354,  0.1012,
          0.5810,  0.0408,  0.2266, -0.0683, -0.4333,  0.1895,  0.3348,  0.1202]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
995000 特征值优化 tensor(0.6033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8516, -0.6034, -0.5850, -0.5449, -1.0212, -3.2834, -0.6442,  0.4624,
         -1.6819, -0.0162, -0.8017,  0.2464,  0.1302,  0.0745, -0.2372,  0.0784,
          0.0982, -0.0414,  0.1194, -0.1345,  0.0449, -0.4005, -0.3716, -0.2013,
          0.0667,  0.1286, -0.1863,  0.2044, -0.0215, -0.2954,  0.1806,  0.1025,
          0.0067,  0.5174,  0.0218,  0.0543, -0.2605,  0.0555, -0.0480, -0.1105,
          0.3051, -0.0110, -0.3420, -0.6964,  0.5362,  0.2465, -0.0393, -0.6044,
         -0.9133,  0.4916,  0.1805, -0.2522,  0.4509,  0.2397, -0.0543, -0.0131,
          0.2580, -0.2287, -0.0194,  0.3708,  0.0929,  0.1054, -0.2395,  0.0999,
          0.5812,  0.0418,  0.2242, -0.0656, -0.4350,  0.1911,  0.3443,  0.1143]],
       device='cuda:0') tensor(0.2060, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
996000 特征值优化 tensor(0.6027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8357, -0.5821, -0.5858, -0.5459, -1.0227, -3.2855, -0.6533,  0.4477,
         -1.6786, -0.0237, -0.8018,  0.2502,  0.1311,  0.0721, -0.2417,  0.0842,
          0.1013, -0.0331,  0.1204, -0.1363,  0.0457, -0.4007, -0.3668, -0.2014,
          0.0621,  0.1485, -0.1864,  0.2066, -0.0245, -0.2948,  0.1807,  0.1025,
          0.0073,  0.5175,  0.0224,  0.0580, -0.2607,  0.0582, -0.0476, -0.1104,
          0.3047, -0.0123, -0.3514, -0.6948,  0.5400,  0.2384, -0.0392, -0.6049,
         -0.9127,  0.4917,  0.1795, -0.2521,  0.4513,  0.2398, -0.0526, -0.0121,
          0.2617, -0.2305, -0.0217,  0.3727,  0.0969,  0.1067, -0.2355,  0.0994,
          0.5773,  0.0435,  0.2244, -0.0664, -0.4336,  0.1897,  0.3440,  0.1158]],
       device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
997000 特征值优化 tensor(0.6026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8133, -0.5675, -0.5836, -0.5438, -1.0177, -3.2966, -0.6395,  0.4651,
         -1.6929, -0.0208, -0.8124,  0.2554,  0.1284,  0.0697, -0.2394,  0.0771,
          0.0991, -0.0365,  0.1139, -0.1327,  0.0432, -0.4001, -0.3616, -0.1927,
          0.0487,  0.1456, -0.1955,  0.2081, -0.0222, -0.2940,  0.1804,  0.1030,
          0.0057,  0.5187,  0.0205,  0.0824, -0.2607,  0.0532, -0.0440, -0.1095,
          0.3054, -0.0171, -0.3492, -0.6864,  0.5349,  0.2520, -0.0412, -0.6038,
         -0.9126,  0.4921,  0.1810, -0.2517,  0.4487,  0.2410, -0.0542, -0.0096,
          0.2424, -0.2205, -0.0272,  0.3594,  0.0935,  0.1047, -0.2368,  0.1003,
          0.5798,  0.0458,  0.2079, -0.0719, -0.4309,  0.1904,  0.3673,  0.1023]],
       device='cuda:0') tensor(0.2034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
998000 特征值优化 tensor(0.6014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8308, -0.6260, -0.5879, -0.5508, -1.0208, -3.2931, -0.6534,  0.4608,
         -1.7481, -0.0112, -0.7808,  0.2406,  0.1250, -0.0564, -0.1787,  0.1229,
          0.0402, -0.1298,  0.1133, -0.1320,  0.0286, -0.4017, -0.4141, -0.1819,
          0.0494,  0.0719, -0.1904,  0.1871, -0.0254, -0.2944,  0.1803,  0.1061,
         -0.0045,  0.5154,  0.0523, -0.0288, -0.2555,  0.0816, -0.0458, -0.1125,
          0.2960, -0.0094, -0.3404, -0.6872,  0.5370,  0.2790, -0.0628, -0.6046,
         -0.9145,  0.4921,  0.1807, -0.2509,  0.4415,  0.2453, -0.0531, -0.0232,
          0.2463, -0.2164, -0.0233,  0.3620,  0.1038,  0.1105, -0.2426,  0.1002,
          0.6122,  0.0441,  0.2265, -0.0654, -0.4386,  0.1799,  0.3637,  0.1017]],
       device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
999000 特征值优化 tensor(0.6055, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.3685e-01, -5.7379e-01, -5.8767e-01, -5.5035e-01, -1.0181e+00,
         -3.2713e+00, -6.3126e-01,  4.5892e-01, -1.6944e+00, -4.6487e-02,
         -8.0323e-01,  2.4565e-01,  1.3286e-01,  4.2346e-02, -2.1647e-01,
          7.8610e-02,  1.0525e-01, -4.9116e-02,  1.1326e-01, -1.3499e-01,
          4.8757e-02, -4.0076e-01, -3.8829e-01, -1.9575e-01,  6.4951e-02,
          1.1378e-01, -1.8057e-01,  2.0279e-01, -2.5916e-02, -2.9467e-01,
          1.8031e-01,  1.0471e-01,  1.0292e-03,  5.1285e-01,  2.2208e-02,
          2.0406e-02, -2.6169e-01,  5.6245e-02, -4.3805e-02, -1.0925e-01,
          3.0598e-01, -1.5476e-02, -3.4034e-01, -6.8487e-01,  5.3680e-01,
          2.4969e-01, -3.9032e-02, -6.0294e-01, -9.1274e-01,  4.9182e-01,
          1.8029e-01, -2.5057e-01,  4.4144e-01,  2.4450e-01, -5.2345e-02,
         -1.6229e-02,  2.6241e-01, -2.2395e-01, -2.2996e-02,  3.7243e-01,
          9.0550e-02,  1.0336e-01, -2.3326e-01,  9.2026e-02,  5.8290e-01,
          3.8390e-02,  2.1959e-01, -6.0189e-02, -4.2674e-01,  1.8963e-01,
          3.4647e-01,  1.1612e-01]], device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
完成共1000000轮迭代 推荐参数如下：
收敛loss为： ('超出最大迭代次数', tensor(0.5371))
tensor([[-5.1235e-01,  2.9318e-01, -1.6641e+00,  1.0486e+00,  4.8787e-01,
         -2.3142e+00, -1.7024e+00, -2.3075e+00, -6.2613e-01,  4.0542e-01,
         -5.3872e+00, -7.0955e-02, -9.2799e-02,  1.2838e-01,  1.4131e-01,
         -1.0288e-01,  1.2670e-01, -1.7719e-03, -5.7111e-02,  2.6024e-03,
         -6.7969e-02, -1.0628e-01,  4.9064e-01, -2.7310e-01, -1.1410e-01,
         -2.0701e-01,  1.4598e-01,  2.6007e-01,  5.3507e-02,  4.2248e-01,
          2.4393e-01,  1.8169e-01, -2.3258e-01,  5.0960e-02, -1.9652e-02,
         -7.4280e-02,  1.1461e-02,  1.7398e-01,  1.4799e-01, -2.5010e-01,
          9.8522e-01, -9.6701e-02,  5.4587e-03, -2.0328e-01,  4.0649e-01,
          2.0774e-01, -2.3473e-02,  9.7778e-02,  7.1149e-01, -7.5390e-01,
         -4.8364e-01,  1.4656e-01, -5.7575e-01,  9.0717e-02,  1.0280e-02,
          4.6320e-03,  6.3890e-01,  2.7391e-01,  4.0434e-01, -1.5351e-01,
          1.5645e-02,  1.4606e-01, -1.1514e-01,  1.9489e-01,  3.1697e-01,
          1.3172e-01,  3.3871e-01, -1.1414e-01, -1.2477e+00, -5.4863e-01,
         -5.5834e-01, -5.2680e-02]], device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.5373))
tensor([[-0.3725,  0.4081, -1.1600, -0.6204, -1.5891,  0.2009, -3.2414,  3.9230,
         -1.7664, -0.7688, -3.3333, -0.7657,  0.0536,  0.0315,  0.0458, -0.3123,
         -0.5128, -0.3212,  0.5272, -0.0887,  0.0754, -0.0331, -0.1401,  0.2849,
          0.1153,  0.1152,  0.0254,  0.1631,  0.0269,  0.2017, -0.0130,  0.0754,
          0.1016, -0.0969, -0.0738, -0.0483,  0.3911, -0.2074,  0.0283,  0.0636,
         -0.2227,  0.1843,  0.2346,  0.5110,  0.0159, -0.4682, -0.0382, -0.3265,
          0.2432, -0.4542,  0.2209,  0.1069, -0.1897, -0.0624,  0.3557,  0.3445,
          0.0484,  0.2316,  0.2996,  0.2096,  1.1807, -0.0356, -1.4503,  0.0595,
          0.3235,  0.1216,  0.1006,  0.0227,  1.4600, -0.2395, -0.6856, -0.1034]],
       device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.5779))
tensor([[-1.6524e+00,  7.2642e-01, -1.3103e+00,  1.9858e-01,  1.3073e-01,
         -8.7075e-01, -1.0882e+00, -1.9728e+00, -1.3963e+00,  5.1499e-01,
         -9.0929e-01, -8.4500e-01,  1.1726e-01,  4.7314e-02,  4.1141e-02,
         -1.1811e-01, -2.2848e-01,  4.7260e-01, -5.7195e-02, -2.9084e-02,
          2.1803e-01, -1.0059e-01, -2.1473e-02, -7.4682e-03, -5.3313e-02,
         -3.6374e-01, -3.3160e-01,  5.2017e-03,  6.9883e-03, -5.6389e-01,
         -1.4034e-02,  2.1863e-03, -3.4422e-02,  5.5576e-02, -5.2622e-02,
         -3.6812e-03,  2.2157e-01,  1.1785e-01, -1.2995e-01, -1.0535e-01,
         -2.0478e-01,  4.3944e-02,  2.2929e-01,  1.0884e-01, -8.2032e-02,
         -2.0068e-01, -4.5847e-02, -2.8891e-01,  6.2987e-01, -1.0615e+00,
         -9.0400e-02, -1.8174e-01, -3.3292e-01, -7.4637e-02,  3.2504e-01,
         -1.3043e-03, -5.9866e-03,  1.8776e-01, -1.2256e-01, -3.9182e-01,
          1.6645e-01,  2.7303e-01,  1.5621e-01,  4.8959e-02,  5.8005e-01,
          1.3240e-01,  1.8133e-01, -4.8040e-02, -7.2015e-02, -1.5360e-01,
         -4.2946e-01,  1.5551e-01]], device='cuda:0')
收敛loss为： ('收敛', tensor(0.5790))
tensor([[-1.4231e+00, -1.6915e-01, -1.3326e+00, -1.6632e-01, -5.6620e-01,
         -6.9324e-01, -6.7001e-01,  3.6773e-02,  7.4967e-01, -3.0881e-01,
         -2.1186e+00, -2.0970e+00,  1.5694e-01,  8.6204e-02,  3.7740e-01,
         -5.1862e-02, -6.7073e-02,  1.8174e-01,  4.1985e-01, -1.0665e-01,
         -5.1047e-03,  4.7378e-02, -1.0616e-01,  1.8591e-01,  5.2911e-02,
         -7.9703e-02,  2.4340e-01,  1.6437e-02, -7.6890e-03,  7.7562e-01,
         -2.1573e-02,  8.8589e-03, -9.9874e-04, -1.1310e-03, -8.0208e-02,
         -6.5385e-03, -3.0553e-02,  2.2350e-02, -1.3305e-01, -3.7800e-02,
         -8.8630e-02,  1.4506e-01, -1.0697e-01,  3.2313e-01, -2.5587e-01,
         -8.9778e-02, -6.5740e-02, -6.2721e-01,  5.9783e-01, -1.3832e+00,
         -1.3543e-01,  4.7142e-02,  6.7968e-01,  2.5978e-01,  2.5371e-01,
          1.2210e-01, -1.5943e-01,  1.1011e-01,  1.2504e-02, -2.8877e-01,
          8.6312e-03, -4.6563e-02, -1.4234e-01,  1.3347e-01, -2.4416e-01,
          6.5517e-02, -8.5339e-01,  4.9960e-02,  3.6684e-01,  2.2512e-02,
         -1.2988e+00,  7.7465e-01]], device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.5829))
tensor([[ 1.0013e-01,  1.3990e+00, -6.5974e-02, -3.5043e-01, -8.8026e-01,
         -2.1135e+00, -2.3670e+00, -4.1967e-01, -9.5656e-01, -3.2650e-01,
         -1.3125e+00, -1.1933e+00,  9.4297e-02,  3.3917e-02, -3.8793e-02,
          1.1998e-01,  1.0741e-01, -2.9865e-02, -6.6159e-04,  8.7324e-02,
         -1.2094e-01, -1.4204e-01, -1.0955e-01,  1.0291e-01, -2.1763e-01,
         -1.5708e-01,  2.4070e-02, -1.3696e-01, -1.1268e-01, -1.2212e-01,
          5.3879e-02, -2.3916e-01,  4.9739e-02,  9.0743e-02, -2.0679e-02,
         -1.5437e-01,  5.9655e-01, -1.0427e-01,  1.3219e-01, -2.7945e-01,
         -3.3083e-03, -5.9071e-02, -4.6171e-01, -8.4547e-02, -8.4452e-02,
          3.0955e-01,  1.8231e-01, -3.2415e-01, -3.9907e-01,  5.5103e-01,
          2.8970e-01,  2.6254e-02, -8.7903e-02,  2.6160e-01,  4.2305e-02,
         -5.9926e-02,  2.0706e-01,  8.9116e-02, -1.5214e-01,  5.7273e-01,
         -1.1109e-01, -1.4393e-01,  2.2686e-01,  7.7113e-02,  9.4263e-02,
          2.2262e-01,  3.4886e-01, -1.2065e-02,  1.8611e-01,  3.4274e-02,
          2.1692e-01,  3.3226e-02]], device='cuda:0')
收敛loss为： ('收敛', tensor(0.5832))
tensor([[-1.2867,  0.1687, -0.5472, -0.2688, -0.2486, -0.6675, -1.0830, -0.2700,
         -1.1155, -0.1753, -1.1563, -0.4267,  0.2095,  0.2096,  0.2683,  0.0868,
          0.5060,  0.0334,  0.0905,  0.1061, -0.0363, -0.0664,  0.1521,  0.0604,
          0.0146,  0.0200,  0.1953,  0.2162, -0.0780,  0.1184,  0.1658,  0.2359,
         -0.0104,  0.1933,  0.0265,  0.1330, -0.0254,  0.2411, -0.0786,  0.0790,
         -0.0461, -0.0497, -0.0730, -0.0763, -0.0767,  0.6042,  0.2840,  0.1057,
          0.2570,  0.0547, -0.1522,  0.0773, -0.7970, -0.0393,  0.4398, -0.2613,
         -0.7411, -0.0871, -0.2458,  0.4433,  0.3518,  0.2712, -0.1857,  0.1803,
         -0.1555,  0.0598,  0.2807,  0.0658,  0.0483, -0.0679,  0.4505,  0.2914]],
       device='cuda:0')
收敛loss为： ('收敛', tensor(0.5836))
tensor([[-1.7304, -0.5618, -1.7392,  1.7352,  0.6124, -0.1411, -2.4866, -0.3714,
         -0.3899, -0.2665, -0.9120, -1.0128, -0.0581,  0.0588, -0.2617,  0.3370,
         -0.0485, -0.2297, -0.2472,  0.1274,  0.1236,  0.4300, -0.1743, -0.0078,
         -0.1372,  0.1027,  0.0392,  0.0045,  0.0139, -0.2860,  0.0691,  0.2675,
          0.1119, -0.1525, -0.0771, -0.0307,  0.0401, -0.4850,  0.0754, -0.0494,
         -0.5037, -0.0928,  0.2428, -0.4676,  0.5413, -0.3215, -0.1137,  0.0180,
          0.1252, -0.1529, -0.3035,  0.2899, -0.9567,  0.3034, -0.8534, -0.2624,
          0.1747,  0.1011, -0.3019,  0.2115, -0.4510,  0.0456, -0.3360, -0.4145,
         -0.3467, -0.1738,  0.2379, -0.0925,  0.0465, -0.3586, -0.2040,  0.0524]],
       device='cuda:0')
收敛loss为： ('收敛', tensor(0.5841))
tensor([[-9.0103e-01,  1.5694e-01, -2.7628e+00,  1.8215e+00, -2.6972e-01,
         -1.6402e+00, -1.7202e+00, -1.2741e+00, -1.4294e-01,  2.2116e+00,
          8.2236e-01, -5.5936e+00,  1.1314e-01,  1.9092e-02,  6.2136e-03,
         -2.0074e-03,  1.0417e-01, -7.7244e-02, -1.4458e-01,  2.1129e-02,
          2.3081e-01, -4.2700e-02,  3.7553e-02,  2.8504e-02, -1.0551e-01,
         -2.6245e-01, -7.3874e-01,  9.1500e-01, -3.9956e-02,  1.2647e-01,
          1.3719e-01, -8.4920e-02, -7.5492e-02, -1.0967e-01, -4.5120e-02,
         -3.5814e-01,  6.8228e-01,  1.8135e-01, -3.9934e-01,  3.8975e-01,
         -1.8968e-02, -3.8917e-01,  5.5036e-01,  1.3251e-01, -1.2047e-01,
         -4.4513e-01, -3.3593e-02,  4.8498e-01, -3.4824e-01,  3.8499e-01,
         -1.1186e+00,  1.5692e-01, -5.7824e-02,  2.1700e-01,  1.3203e-01,
         -3.3670e-01, -1.9167e-01,  1.6105e-01,  6.3572e-01, -1.1851e+00,
         -7.6705e-01, -3.8983e-01, -5.2499e-02, -3.2907e-01, -4.4169e-01,
         -9.7252e-02,  2.2774e-01,  7.5469e-02, -4.5552e-01,  1.0636e-01,
         -1.8147e+00,  3.5597e-01]], device='cuda:0')
收敛loss为： ('收敛', tensor(0.5845))
tensor([[-1.0431, -0.2881, -1.3600, -0.3411, -0.5261, -2.2134, -0.4123, -0.9147,
         -0.7376, -0.2155, -0.9445, -0.7795, -0.0179, -0.0045,  0.0566,  0.2473,
          0.1600, -0.1747,  0.5272,  0.0858,  0.0206,  0.3403, -0.0290, -0.2381,
         -0.2875, -0.0916,  0.0645,  0.0956,  0.1035, -0.3498, -0.0203,  0.1300,
          0.0032, -0.3351, -0.1453, -0.0068, -0.0083, -0.0387, -0.2633,  0.0765,
          0.2260, -0.0584,  0.2413, -0.1967,  0.3681, -0.4265, -0.1963, -0.1422,
         -0.4256,  0.2807,  0.4200,  0.2351,  0.5245,  0.3332,  0.1019,  0.4435,
         -0.8243, -0.5409, -0.5257,  0.1046, -0.3257,  0.1497,  0.2687,  0.0288,
          0.2255, -0.1269, -0.1415, -0.0142, -0.4452,  0.0213,  0.1244,  0.0343]],
       device='cuda:0')
收敛loss为： ('收敛', tensor(0.5861))
tensor([[-2.7793e-01, -4.1003e-01, -1.6182e+00,  1.3166e-01, -6.1404e-02,
         -1.7599e+00, -4.2434e+00, -6.8804e-02,  8.5037e-03, -5.0270e-01,
         -3.0792e-01, -1.2991e+00,  2.6844e-01, -3.1003e-02,  1.5221e-01,
          5.5816e-01, -1.1332e-01, -8.1771e-02,  6.4148e-02,  9.0953e-02,
          2.6395e-01, -9.0769e-02,  2.2969e-01,  2.4874e-01,  2.2106e-01,
          2.9264e-02, -2.4465e-01, -2.6808e-01,  2.1738e-02, -7.8040e-02,
          1.4635e-01, -2.3359e-01, -2.2608e-02,  7.4274e-02,  5.4415e-02,
         -8.8129e-02,  5.7321e-02,  1.7811e-01,  3.9955e-02, -1.1324e-03,
         -1.9855e-01, -3.9412e-01, -1.8166e-01,  3.2778e-01, -1.6019e-01,
         -5.0360e-01, -2.3938e-01,  6.2619e-01,  3.7432e-01, -1.4768e-01,
          2.3705e-01, -1.9639e-02,  3.5028e-03,  1.4353e-01,  2.2479e-01,
          2.8560e-01, -3.0366e-01, -6.0549e-02,  1.7898e-01, -3.6145e-01,
         -2.2598e+00,  1.5172e+00,  1.0884e-02,  1.9839e-01, -8.3285e-01,
          7.8415e-02,  4.4080e-02, -9.1622e-02,  4.3533e-01, -4.3538e-02,
         -7.4639e-01, -3.7739e-01]], device='cuda:0')
收敛loss为： ('收敛', tensor(0.5963))
tensor([[ 5.1697e-01,  3.0463e-01, -2.2334e+00, -1.6718e+00, -5.4996e-01,
         -7.8803e-01, -1.8141e+00, -6.9503e-01, -2.4641e+00,  4.5842e-01,
         -4.4111e-01, -2.2359e+00,  7.2201e-02,  1.3235e-01,  1.5424e-01,
          8.5126e-02, -1.1218e-01, -2.0842e-03,  2.3028e-01,  1.4750e-02,
         -2.4146e-01, -3.4389e-01, -1.1177e-01, -1.4489e-01,  9.4340e-04,
          1.4725e-01,  4.1266e-01,  4.2325e-01, -2.1947e-01, -3.9435e-01,
         -2.6334e-02, -3.9603e-03, -1.0407e-01, -1.7878e-02, -9.2940e-02,
         -1.3026e-01,  4.6303e-01, -1.1747e-02, -1.0517e-01,  3.0026e-02,
         -1.5176e-01, -4.4190e-03, -3.7314e-01, -3.4576e-01,  3.6701e-01,
          1.0852e-02,  8.3041e-02, -3.1144e-01,  3.7466e-01, -1.3168e+00,
         -3.8002e-01, -5.1777e-01,  4.9905e-01,  3.4402e-01,  1.4757e-01,
         -2.4464e-01, -3.1637e-01,  1.6471e-01,  3.0382e-01, -3.0153e-01,
         -2.8796e-01, -1.4292e-01, -2.0387e-01, -2.1515e-01,  2.8994e-02,
          7.1386e-02,  2.7261e-01,  2.3970e-02,  5.0340e-02,  1.8440e-01,
          2.6461e-01,  6.9409e-02]], device='cuda:0')
收敛loss为： ('收敛', tensor(0.6103))
tensor([[ 3.7562e-01, -1.7594e-01, -1.7279e+00, -2.6958e-01, -2.3721e+00,
         -1.2925e+00, -2.8419e+00, -1.1108e+00, -9.5023e-01, -8.0519e-01,
         -3.5521e-01, -2.4831e-01,  9.9837e-02, -7.4360e-02,  8.0980e-02,
          1.0933e-03, -2.8258e-01, -1.0233e-01, -2.4132e-01, -9.2633e-02,
         -1.2402e-01,  2.7248e-01, -1.8292e-01, -3.4691e-02,  2.6350e-02,
         -1.2367e-01, -1.2816e-01, -7.9981e-02, -8.6105e-02,  9.3681e-02,
          6.1187e-02,  8.0549e-01, -3.7796e-01, -1.8425e-01,  1.2912e-01,
          1.0174e-02,  1.2270e-01, -9.3769e-02, -2.6617e-01, -2.2801e-02,
         -1.5110e-01,  1.0712e-02, -4.6911e-01, -6.1183e-02,  1.8470e-02,
          2.1306e-01, -1.3059e-01, -3.3818e-01, -3.9086e-01, -2.2773e-01,
         -1.2012e-01, -2.7300e-01,  1.9595e-01,  4.9007e-01, -1.1192e+00,
         -2.9842e-01,  3.0093e-01,  3.1447e-01,  6.2734e-01,  2.5469e-01,
         -4.0716e+00,  2.3161e+00, -2.4198e+00,  9.1267e-01, -1.9321e-01,
         -3.2052e-02, -1.8823e-01, -6.8089e-02, -1.0050e+00,  6.2425e-01,
          2.4606e-01,  2.1399e-01]], device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.6104))
tensor([[-1.6156e+00, -3.9412e-01,  2.3256e-01, -3.1354e-01, -2.7734e-02,
         -1.7448e+00, -6.4627e-01, -6.0254e-01, -8.9218e-01,  2.8114e+00,
         -8.2099e-01, -4.9574e+00,  1.3976e-01, -3.5482e-02,  2.2560e-02,
          3.1126e-02, -3.3747e-02,  1.0921e-01,  1.6918e-01, -9.4381e-02,
         -3.5836e-03, -5.6106e-02, -5.1584e-02, -1.2452e-01, -2.0368e-01,
          2.5805e-01,  2.5351e-01, -7.9653e-02, -1.4144e-01, -5.0114e-02,
         -1.2144e-01, -1.7328e-01, -3.8489e-01,  1.5713e-01, -6.5370e-02,
          5.7066e-02,  2.0189e-02, -4.1498e-02,  1.1940e-01, -3.1360e-01,
         -7.1280e-02,  6.0790e-01,  1.2047e-01, -3.4602e-01,  2.9056e-01,
          4.6341e-01,  1.2327e-02, -1.6463e-01,  9.0718e-02,  9.0821e-02,
         -3.8604e-01, -1.6371e-01, -1.6240e+00,  4.7587e-01,  7.8950e-02,
          6.0089e-01,  1.1090e-01, -1.1301e-01, -1.7318e-01, -5.9912e-01,
         -9.9866e-02,  1.2466e-01,  2.8480e-01, -1.8469e-01,  3.6941e-01,
          1.6712e-01, -2.5317e-01,  3.6884e-01,  2.6429e-01,  4.2235e-01,
         -7.9802e-01, -9.6173e-01]], device='cuda:0')
收敛loss为： ('收敛', tensor(0.6181))
tensor([[-2.6761, -0.8275, -0.6430, -0.0165, -1.5567, -0.5247,  0.3243, -0.1528,
         -1.1201, -0.3710, -0.7149, -0.3360,  0.5152, -0.3719, -0.0955,  0.0113,
         -0.3081, -0.1058,  0.1226, -0.1337,  0.5238,  0.1677, -0.0490, -0.0505,
         -0.0070, -0.0323, -0.1701,  0.2962,  0.0262,  0.1986,  0.0638, -0.0652,
          0.0206, -0.1849,  0.0093,  0.1614, -0.2907, -0.1095, -0.0503,  0.0455,
         -0.1113,  0.0758,  0.0916, -0.3759, -0.1888, -0.4556, -0.3123,  0.3249,
          0.1531,  0.1477, -0.5977,  0.0036,  0.3555,  0.1975,  0.4109,  0.5620,
          0.2008,  0.1741,  0.2975,  0.3997, -0.3970, -0.0624, -0.0466,  0.0452,
         -0.2236,  0.0410,  0.0860, -0.2172, -0.6106, -0.2405, -0.9666,  0.0736]],
       device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.6306))
tensor([[-0.6035,  0.0456, -0.8733, -0.0852, -1.0107, -0.5377, -2.1459, -0.9066,
         -0.5543, -0.5753, -0.3014, -3.7098, -0.3157,  0.0982,  0.1363,  0.1367,
          0.0131, -0.2652,  0.1137,  0.1640, -0.2939, -0.0481,  0.2291,  0.0616,
          0.0996, -0.1662,  0.4085,  0.1595, -0.0792, -0.0521,  0.3482, -0.1563,
          0.1454, -0.0333, -0.0201,  0.0140,  0.1935,  0.1892,  0.4511,  0.2929,
          0.0164,  0.1967, -0.4809,  0.0891, -0.1894, -0.2819, -0.1347,  0.3234,
          0.3644, -0.0799,  0.3463,  0.0757, -0.5696,  0.4282,  0.2886,  0.2877,
         -0.7260, -0.1051,  0.3349, -0.6290,  0.2053, -0.1082, -0.0288,  0.0662,
         -0.2949, -0.2093, -0.4219, -0.2843,  0.4705,  0.1553,  0.4440, -0.2649]],
       device='cuda:0')
收敛loss为： ('收敛', tensor(0.6315))
tensor([[-0.9127, -0.7183, -1.9710,  0.2788,  0.1470, -0.6456, -1.9530,  0.2059,
         -0.0696, -0.3768, -0.5070, -0.0980,  0.0255,  0.0352,  0.1930,  0.2247,
         -0.0495, -0.0911,  0.0337, -0.1342,  0.2118,  0.0657, -0.0732,  0.1099,
         -0.2824, -0.0332, -0.1279,  0.1075,  0.4895, -0.1774, -0.3370, -0.0096,
         -0.0100, -0.0189,  0.1523,  0.1124, -0.0608, -0.0077,  0.3950,  0.1101,
         -0.2169,  0.4552,  0.4199,  0.3208, -0.1811,  0.1094,  0.0343, -0.6208,
          1.0067, -0.0998,  0.1210, -0.1317, -0.3473, -0.0950,  0.4615, -0.2352,
         -0.3057,  0.1268,  0.3213, -0.3876,  0.6900, -0.0216,  0.3222,  0.0135,
         -0.7767,  0.0106, -0.0616, -0.0573, -0.1659,  0.2231, -0.6576, -0.0272]],
       device='cuda:0')
收敛loss为： ('收敛', tensor(0.6315))
tensor([[-9.9549e-01,  1.2764e+00, -1.6869e+00, -1.6516e+00, -9.1746e-01,
         -1.1443e+00, -1.5209e+00,  4.9373e-01, -2.7232e-01,  4.3573e-01,
         -1.7845e+00, -1.0847e+00, -1.4983e-01,  3.2358e-01, -1.5020e-01,
          3.4117e-01,  2.4063e-01,  4.7729e-01, -8.1502e-02,  1.0141e-01,
          1.3178e-01,  8.3808e-01,  7.7957e-02, -6.3682e-02, -1.2536e-02,
          1.9467e-01, -7.3353e-02,  1.4851e-01, -4.5448e-02,  4.1101e-01,
          2.1712e-01,  5.2126e-02, -8.8736e-02,  8.0294e-02,  6.5191e-04,
          7.0050e-02, -1.9798e-01, -3.7934e-02, -4.5614e-02, -1.2119e-01,
         -2.4771e-01,  5.7752e-03,  3.8796e-01,  6.7339e-02, -1.9733e-01,
         -8.0128e-01,  8.8961e-03, -6.1103e-01, -1.5086e-01, -8.0430e-01,
         -1.7119e-01, -3.7046e-01, -5.2125e-01,  1.4550e-01, -2.6293e-01,
          6.1027e-01, -3.0908e-01,  8.7204e-02, -4.2124e-01,  2.2148e-01,
          1.4084e-01, -2.4195e-02,  1.1500e-01,  2.2111e-03,  4.0755e-01,
          1.9516e-01, -3.8699e-01,  2.0528e-02,  5.3270e-01,  6.3302e-02,
         -1.2840e-01,  2.7538e-01]], device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.6380))
tensor([[-1.5145, -0.4043, -1.3668,  0.4720, -0.6579, -0.8658, -1.7796, -2.8178,
         -1.3202, -0.6976, -1.1971, -0.1594,  0.1597,  0.1043,  0.1013,  0.2302,
         -0.3964,  0.2647,  0.0943, -0.1695, -0.1783,  0.1677, -0.1121, -0.0094,
          0.0588,  0.1348, -0.3251, -0.1151,  0.0656,  0.1644, -0.3540,  0.0058,
          0.0187,  0.1584,  0.0718, -0.1123,  0.7640,  0.5406, -0.0513, -0.0451,
          0.1881, -0.2415,  0.3941, -0.5005,  0.5475,  0.4184, -0.1358,  0.2572,
          0.5284, -0.4886, -0.1675, -0.0827, -0.3580,  0.1446, -0.2711, -0.5805,
         -0.4359,  0.2319,  0.0847,  0.0330, -0.7403, -0.4680, -0.1803, -0.5905,
          0.2563,  0.0666,  0.5474,  0.0679, -0.4335, -0.4366, -0.1892,  0.0424]],
       device='cuda:0')
收敛loss为： ('收敛', tensor(0.6381))
tensor([[-1.6105e+00, -5.1228e-01, -1.4631e+00, -3.3914e-01, -1.4930e+00,
         -1.5838e+00, -4.9071e-01, -9.7436e-01, -2.4427e-01,  4.9577e-01,
         -7.7587e-01, -4.0917e-01,  1.8767e-01, -2.3704e-02,  3.1581e-02,
         -3.8317e-01,  1.3127e-01, -2.0819e-01, -6.4759e-02,  6.2254e-01,
         -3.1315e-02,  1.4376e-01, -1.6087e-03,  4.3765e-01,  1.0301e-01,
         -1.7802e-01,  7.7669e-02, -3.4475e-02, -3.2902e-02,  5.6023e-01,
          1.5051e-01, -5.7249e-02,  5.1212e-02, -2.6605e-01,  6.2674e-02,
          1.5847e-02, -2.3126e-01, -1.4486e-01, -9.7798e-02, -7.4211e-02,
          2.5677e-01, -7.9290e-02, -4.2428e-01,  6.9943e-01,  6.9974e-01,
          6.1873e-01, -2.2684e-02, -6.4873e-01, -1.4891e+00,  6.7211e-01,
          2.3493e-01, -1.4600e-01, -3.9248e-01,  5.5719e-02,  3.6556e-01,
         -3.5501e-01,  5.5401e-01,  1.0291e-01, -9.3888e-02, -2.2274e-01,
          3.8297e-01, -1.2514e-01,  3.9999e-01,  1.0973e-01, -2.9294e-01,
          2.3851e-01, -7.8891e-05,  7.0644e-02, -5.0247e-02,  8.6852e-02,
          2.2175e-01, -3.1576e-02]], device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.6423))
tensor([[-1.9831,  0.7286, -0.2676, -0.5032, -1.8062, -1.4257, -0.2994, -0.5042,
         -0.5163, -0.7895, -2.2405,  0.1140, -0.2219, -0.3494,  0.1205,  0.3428,
          0.4600, -0.2380,  0.3690, -0.0577,  0.0519, -0.0139,  0.0228,  0.0064,
         -0.1077, -0.1473,  0.0340,  0.1469, -0.0483, -0.0071,  0.5485, -0.2334,
          0.1055,  0.2175,  0.1267, -0.0190,  0.0626,  0.1957, -0.0148, -0.0293,
          0.0895, -0.0619,  1.0734,  0.2021, -0.1435, -0.0377, -0.0604, -0.2723,
          0.0079, -0.0051,  0.0905,  0.0972, -0.1112, -0.1570, -0.4964,  0.6193,
         -0.1166,  0.0942,  0.3733, -0.1296, -1.2194,  0.3793, -0.1185,  0.4222,
         -0.3452, -0.0816, -0.4323, -0.2238,  0.0774,  0.4663, -0.4603,  0.1539]],
       device='cuda:0')
收敛loss为： ('收敛', tensor(0.6502))
tensor([[-9.7484e-01, -1.4368e-01, -2.2010e+00,  9.7130e-01,  2.5399e-01,
         -1.1950e+00,  9.3343e-01, -5.1612e-01, -3.8956e+00, -3.3390e-01,
         -7.3399e-01, -1.0212e+00,  5.0433e-01,  2.1880e-01, -4.8681e-02,
         -7.6372e-02, -4.5369e-02, -2.0218e-02, -2.8438e-03,  3.2230e-02,
          1.8376e-01, -5.7833e-02, -1.1095e-01,  6.3913e-02,  5.8897e-01,
          5.3266e-01, -2.4818e-01,  2.2086e-01, -1.2357e-01, -1.1720e-01,
         -1.7704e-02,  6.0448e-02, -1.1752e-01, -1.0848e-01,  1.4172e-01,
          1.0439e-01, -1.4354e-01, -2.0674e-01, -1.5341e-01, -2.0881e-01,
          1.1724e-01, -2.4734e-01, -5.5556e-01,  3.4041e-01, -4.5860e-01,
         -1.8137e-01, -2.4069e-01,  9.3543e-01, -1.7304e-01,  5.0344e-01,
         -4.2069e-01,  4.8452e-02, -5.4058e-01,  1.5303e-02, -1.6048e-01,
          6.3555e-02, -1.2273e-01, -4.7593e-03, -7.4207e-02, -5.4237e-01,
         -1.4896e-01,  1.0466e-02,  1.1591e-01, -1.0037e-01,  1.3628e-01,
         -1.8465e-01,  1.9700e-01, -2.3960e-01, -1.0422e-01, -1.5955e-02,
          2.4654e-01,  5.8163e-02]], device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.6518))
tensor([[-0.6850, -1.1693, -0.1960, -0.7101, -0.9694, -1.1409, -1.1209, -0.4057,
         -1.1737,  1.1563, -1.3653, -1.8739, -0.1424, -0.0893, -0.1867, -0.0419,
          0.0435, -0.1708, -0.1063, -0.2498,  0.1209,  0.4259, -0.0599,  0.1191,
          0.0977,  0.0404, -0.0636, -0.4319,  0.0942,  0.1915, -0.4273,  0.0773,
          0.0641, -0.0119, -0.0784, -0.0404,  0.1730,  0.0690,  0.2829, -0.0273,
         -0.1441, -0.0425, -0.3387,  0.3510,  0.1658,  0.2686,  0.1260, -0.6132,
          0.2510, -0.4366, -0.0582, -0.1534,  0.1451, -0.1700,  0.6161,  0.1163,
          0.1866,  0.0171, -0.4988,  0.2941, -0.3522,  0.1214, -0.3320,  0.0219,
          0.3041,  0.0675, -0.3671,  0.1824,  0.7356,  0.0815,  0.0489, -0.0025]],
       device='cuda:0')
收敛loss为： ('收敛', tensor(0.6606))
tensor([[-4.6507e-01,  1.0717e+00, -1.6048e+00, -9.6256e-01, -1.7790e+00,
         -1.7989e+00, -4.9629e-01, -5.1650e-01, -3.6179e-01, -1.9445e-01,
         -9.6069e-01, -8.6053e-01,  6.6316e-02,  4.3494e-02,  5.2772e-01,
         -5.3717e-02, -1.5292e-01, -1.7528e-01,  8.8049e-02, -1.5883e-02,
         -6.0652e-03,  3.4875e-01, -3.3906e-01, -1.7028e-01,  1.1401e-01,
         -2.2633e-02,  2.8659e-02, -7.5708e-02,  5.3413e-02,  3.7395e-01,
         -2.8084e-01, -9.0773e-02,  6.1424e-02, -2.2164e-02, -6.3842e-02,
          1.3255e-01, -7.6859e-02, -1.2553e-01, -1.9213e-01,  2.6147e-01,
          4.7204e-01, -6.8418e-02, -4.0339e-01,  7.0311e-01, -4.7217e-01,
         -3.9167e-01,  9.5096e-02,  2.6029e-01, -3.2632e-01,  3.1131e-01,
         -4.0272e-01, -2.9885e-01,  9.4708e-01, -7.8380e-02, -2.4566e-01,
          2.3232e-01,  8.9116e-02,  2.8484e-01,  2.6481e-01,  1.5246e-02,
         -1.3199e-01, -1.6192e-01,  9.0279e-02,  7.6769e-02, -6.3124e-01,
         -1.5409e-01, -1.0497e-01, -2.5388e-02, -3.3610e-01, -5.6843e-02,
         -4.6794e-04, -9.3102e-02]], device='cuda:0')
收敛loss为： ('收敛', tensor(0.6649))
tensor([[-1.3962e+00,  4.4009e-01, -1.4081e+00,  5.2092e-01, -1.1240e+00,
         -7.7779e-01, -1.4210e+00, -9.0064e-01, -3.3643e-01, -1.6859e+00,
         -9.8412e-01, -2.4575e+00,  3.9256e-01, -8.4260e-02, -1.0193e-01,
         -1.0863e-01,  1.3660e-01, -4.6388e-01,  6.3862e-02, -6.7414e-03,
         -1.5641e-01,  2.8146e-01,  1.0297e-01, -5.3935e-04,  3.1544e-01,
          2.9490e-01, -4.4448e-01,  1.3054e-01,  1.3390e-02, -4.8267e-02,
         -1.1433e-01,  8.9043e-02,  6.1357e-02, -1.7918e-02, -1.7772e-01,
         -3.7212e-02, -8.0270e-01, -2.5414e-01, -1.1120e-01,  1.2216e-01,
         -1.2696e-01, -1.5049e-01, -5.5671e-01, -1.8378e-01, -1.8354e-01,
          1.4946e-01,  2.6191e-01,  5.8993e-01, -1.9707e-01,  1.2665e-01,
         -1.5492e-02, -7.8500e-02, -1.6308e-01,  2.9437e-02, -5.9024e-01,
          3.4231e-02, -1.6254e-01,  9.6736e-02,  6.7215e-01, -8.9180e-02,
         -5.2653e-01, -5.1149e-01,  2.3697e-02, -3.1142e-01, -1.2801e+00,
          6.3846e-01,  3.4961e-01,  1.9396e-01,  7.2216e-01,  1.7701e-01,
          8.7085e-01,  1.2085e-01]], device='cuda:0')
收敛loss为： ('收敛', tensor(0.6661))
tensor([[-1.3843e+00, -7.6726e-02,  2.7435e-01,  2.7117e-01, -1.8686e+00,
         -1.8072e+00, -1.5960e+00, -5.9071e-01,  3.7717e-01, -3.4667e-01,
         -2.6253e-01, -1.7127e+00, -6.2718e-02,  3.0061e-01, -2.5098e-01,
         -1.1482e-02, -5.3132e-02,  2.4577e-01, -2.4311e-01,  8.6903e-02,
          5.9366e-02, -5.6928e-02,  4.9239e-03,  1.6664e-02, -2.3174e-01,
         -2.1209e-02, -1.4803e-01, -4.9027e-02, -8.9678e-02, -2.0516e-01,
          5.3438e-01,  1.0298e-01,  3.8530e-02, -3.2029e-02, -5.0305e-03,
          6.3559e-01,  5.5896e-02,  7.7460e-02, -9.7082e-02,  2.6482e-01,
          9.8805e-02,  1.8989e-01,  3.0014e-01,  3.4445e-02,  1.1185e-01,
         -4.4675e-01, -1.5505e-01, -2.5686e-01, -1.3603e-01,  3.9257e-01,
         -2.3051e-01, -2.5149e-02,  1.2541e-01, -2.3067e-01,  4.9226e-01,
          4.6449e-01, -4.2902e-01,  5.3521e-01, -5.7977e-01,  2.4917e-01,
          6.0655e-02,  1.6352e-01, -9.3297e-02,  5.3064e-02, -3.5748e-01,
         -1.1529e-03, -2.2162e-01,  1.6998e-01, -7.3535e-01, -2.5012e-02,
         -5.6789e-01,  6.0803e-01]], device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.6733))
tensor([[-1.7834,  0.1252, -0.7393, -0.2924, -1.2749, -0.5653, -1.2729,  0.2436,
         -2.0681, -0.4912, -0.2746,  0.1417, -0.0032, -0.0404,  0.4039, -0.0735,
         -0.0527,  0.0191, -0.1951,  0.0431, -0.0071, -0.0788,  0.1887,  0.1079,
         -0.0811, -0.0820, -0.0194, -0.1382, -0.0432, -0.6169, -0.1903, -0.1106,
         -0.0283, -0.0179, -0.0119,  0.1069, -0.0521,  0.0419,  0.5053,  0.0336,
         -0.0627,  0.2859,  0.0576,  0.1123,  0.1124,  0.2691,  0.0308, -0.5135,
          0.0042, -0.6132,  0.0179, -0.1217,  0.8934,  0.0106, -0.0130,  0.0285,
         -0.2148,  0.0579, -0.1087,  0.5297,  0.2481,  0.1170,  0.3483,  0.1209,
         -0.3309, -0.1541,  0.0266, -0.0652,  0.3197,  0.1526, -0.5691, -0.0170]],
       device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.6827))
tensor([[ 0.0232, -0.5025, -0.5086,  0.3995, -1.7735, -2.9177, -2.3244,  1.3575,
         -1.2225, -0.1402,  0.2202,  0.1773,  0.0590,  0.0107, -0.0979,  0.2677,
         -0.0633,  0.0567,  0.0132,  0.0571,  0.0677,  0.0126, -0.1150, -0.0655,
          0.0402,  0.0075,  0.1629,  0.1647,  0.0105, -0.1395, -0.0247,  0.0732,
          0.0596,  0.0577, -0.0676, -0.0331,  0.4600, -0.2281,  0.0366, -0.0770,
          0.0228, -0.1497, -0.4973,  0.1161,  0.9660, -0.6199,  0.3134, -0.4502,
         -0.0585,  0.1650, -0.3222, -0.0440,  0.5845, -0.0129,  0.1519, -0.3072,
          0.4593, -0.2035,  0.5824, -0.3598, -0.1369, -0.3670, -0.4022,  0.0197,
         -0.6601, -0.1305,  0.2923,  0.0981,  0.1005,  0.2569,  0.2103, -0.0652]],
       device='cuda:0')
收敛loss为： ('收敛', tensor(0.6971))
tensor([[-9.6487e-01,  4.6408e-01, -9.2796e-01, -6.5531e-01, -2.1507e+00,
         -4.3683e-01, -1.1018e-01,  2.7912e-01, -2.5683e+00, -6.7359e-01,
         -6.1497e-02, -1.1703e+00,  1.4111e-01, -1.0141e-01, -9.5204e-02,
         -5.3183e-02,  1.1523e-01,  1.9199e-01, -7.2164e-02,  1.4556e-02,
         -3.2247e-01,  1.9384e-01, -2.6759e-02, -2.7899e-01, -5.0689e-01,
          2.7359e-01, -1.4506e-01, -1.9811e-01,  6.2348e-02, -6.0776e-02,
         -4.1968e-01,  2.4247e-01, -5.3020e-01, -1.9473e-01, -1.0670e-01,
         -6.6108e-02, -1.0102e-01, -8.9868e-02, -9.7270e-02,  1.5171e-01,
          2.2546e-01,  6.8442e-02, -7.2423e-03,  5.8669e-01, -4.4770e-01,
          1.8370e-01,  1.2773e-01,  5.0524e-01, -1.6451e-01,  1.9473e-01,
          4.3861e-01, -4.5043e-04, -2.1855e-01,  3.4030e-01,  5.3022e-01,
          5.2824e-01, -6.7031e-01, -1.0022e-01,  1.7210e-01, -5.7408e-01,
         -8.7858e-01,  9.9070e-02, -4.1534e-01,  2.2021e-01,  1.1910e+00,
          6.6752e-02, -4.7689e-02, -9.0212e-02, -1.4523e+00,  4.0302e-01,
         -4.0547e-01,  1.3953e-01]], device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.7000))
tensor([[-1.6332e+00, -8.7462e-02, -5.4637e-01, -6.4341e-01, -1.0601e+00,
         -1.7349e+00, -3.4319e+00,  2.4954e+00, -8.5484e-01,  4.0352e-01,
         -8.0181e-01, -1.2508e+00,  1.6189e-01, -2.0179e-02,  1.0605e-02,
         -3.6844e-01, -3.1442e-01, -2.3948e-01,  3.4853e-01, -1.2320e-01,
         -9.2908e-02, -4.0439e-01, -4.8484e-02, -2.1324e-01,  2.2316e-01,
         -2.1057e-01, -1.2375e-01, -3.1088e-01, -9.5655e-02, -2.8867e-01,
          4.2282e-03,  1.4848e-02,  2.5932e-02, -1.9703e-02,  8.9556e-02,
          1.5409e-03, -2.9212e-01,  4.7945e-01,  3.2460e-01, -2.8107e-01,
         -2.4603e-01, -2.9745e-02,  1.5982e-01, -4.0940e-01,  3.0297e-01,
         -3.5193e-01, -1.1705e-01, -1.6003e-02,  1.1423e-01, -4.5439e-01,
         -2.8448e-01, -3.0047e-01,  1.1113e-03,  1.2896e-01,  9.8433e-01,
         -2.4037e-01,  1.7097e-01,  1.8672e-01, -2.5983e-02,  5.4815e-02,
         -6.3850e-01, -8.8764e-01,  2.2419e-01,  5.4312e-01, -6.0643e-01,
          1.9340e-01,  3.5359e-01, -8.7001e-02, -6.2161e-01, -2.1962e-01,
          4.7432e-01,  1.5673e-01]], device='cuda:0')
收敛loss为： ('收敛', tensor(0.7025))
tensor([[-3.4559e-01,  8.1676e-01, -1.9408e+00, -8.9490e-02, -8.4597e-01,
         -1.0405e+00,  1.6982e-01,  6.0935e-01, -1.6082e+00,  1.2313e-01,
         -1.6593e+00, -1.1961e+00,  3.3512e-01,  4.4354e-02, -7.5762e-02,
         -5.2966e-02,  5.7680e-02,  2.5680e-01, -1.0130e-01, -7.3695e-02,
         -3.5984e-01, -1.2730e-02, -2.9412e-01, -6.0362e-02,  3.0952e-01,
         -5.0037e-01,  1.0382e-01, -7.3375e-02, -9.9394e-02,  2.0132e-03,
         -2.0458e-02, -5.1517e-02, -3.8284e-02,  4.7324e-01, -1.6818e-01,
          8.5268e-04, -2.8170e-01,  2.9780e-02, -3.7544e-01, -9.1603e-02,
         -2.5861e-02,  4.1906e-02, -2.9556e-01, -3.0758e-01,  2.2940e-01,
          5.7838e-01,  2.4689e-01,  5.8503e-01, -5.1912e-01,  1.7797e-01,
          3.3355e-01,  3.2321e-02, -2.5630e-01,  1.5410e-01, -6.2354e-01,
         -9.3489e-03, -2.2918e-01, -1.9599e-02, -4.3500e-01,  3.2496e-01,
         -4.1738e-01,  3.3577e-02, -5.2303e-01,  7.3109e-02, -6.7263e-01,
         -2.0837e-01,  6.4720e-01,  1.2623e-01,  3.8206e-01,  5.1855e-02,
         -5.9190e-02,  3.1279e-01]], device='cuda:0')
收敛loss为： ('收敛', tensor(0.7091))
tensor([[-1.9737, -1.3611, -0.5355, -0.0131, -1.7527, -0.5285, -0.4462,  0.5140,
         -1.2870, -0.7843, -0.5309, -1.5893,  0.8259, -0.3932,  0.1163,  0.2597,
          0.0125,  0.3567,  0.0110, -0.1414,  0.4521, -0.1097,  0.1164, -0.0229,
         -0.1543, -0.1974,  0.0335, -0.0365, -0.0837,  0.0684, -0.0293,  0.0434,
         -0.0250,  0.2471, -0.1698, -0.0189, -0.0348, -0.0359, -0.0884, -0.0581,
         -0.2576,  0.0387, -0.7456, -0.6639, -0.2645,  0.0953, -0.3962,  0.3764,
         -0.0141,  0.5085,  0.2028,  0.0376,  0.2163,  0.1647, -0.0690, -0.4854,
         -0.0252,  0.0854,  0.5559, -0.2630, -0.0528, -0.0384,  0.0518,  0.0073,
          0.1134, -0.1457,  0.7118, -0.0277, -0.1335,  0.1553, -0.1339, -0.1910]],
       device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.7398))
tensor([[-0.3150, -0.2305, -0.8199,  0.0584, -1.9120, -0.6057, -1.6269, -0.6670,
         -0.0388, -0.1746, -0.0532, -1.6521,  0.0368,  0.0276,  0.0238, -0.1224,
          0.1518,  0.0779,  0.1835,  0.0056,  0.1378,  0.1088,  0.0592,  0.0609,
          0.1168,  0.1430, -0.1412,  0.1277, -0.6468, -0.1895, -0.2921, -0.1536,
          0.0396,  0.1477,  0.0558, -0.0363,  0.0125,  0.0042,  0.0419, -0.2276,
         -0.2143,  0.1425, -0.2527, -0.8079,  0.2635, -0.1363,  0.0351, -1.0538,
          1.0178,  0.6027,  1.0926, -0.2690, -0.3410, -0.0754,  0.5076, -0.5881,
          0.0951,  0.2536, -0.1766, -0.2605, -0.1796,  0.0477,  0.5017,  0.0922,
          0.1432,  0.2055,  0.3980, -0.0206, -0.3738,  0.2525,  0.2513,  0.1076]],
       device='cuda:0')
收敛loss为： ('收敛', tensor(0.7416))
tensor([[-1.1728, -0.0636, -2.6555,  0.1010, -0.1872, -0.7402,  0.0203, -0.9395,
         -0.8592,  0.0758, -1.0339, -0.1191,  0.1079, -0.0079, -0.1223, -0.2295,
          0.0088,  0.0564,  0.0200, -0.0480,  0.0398,  0.4147,  0.5974, -0.1772,
         -0.1626, -0.1533, -0.0668,  0.0070,  0.0413,  0.2941,  0.0629,  0.1328,
          0.0284, -0.0366,  0.0258,  0.0970, -0.0594,  0.0739, -0.0880,  0.3426,
         -0.2535, -0.0476,  0.3509, -0.2364,  0.2587,  0.3394,  0.0920,  0.1529,
         -0.8720, -0.4378, -0.5238, -0.1337, -0.8747,  0.4725,  0.4287, -0.5221,
          0.6134,  0.3258, -0.4504, -0.1135, -0.7601,  0.2199,  0.4383,  0.0304,
         -0.7529, -0.1585, -0.0648,  0.1606,  0.1068,  0.1917, -0.0476,  0.2158]],
       device='cuda:0')
收敛loss为： ('收敛', tensor(0.7637))
tensor([[-1.2813,  1.2346, -0.0624, -0.3484, -0.8782, -0.6728, -1.8082,  1.1091,
         -1.3684,  1.1295, -1.3351, -0.8466,  0.1562,  0.0653,  0.0398, -0.0813,
         -0.6039, -0.1150,  0.0697, -0.2855,  0.0791,  0.0273,  0.1078, -0.1001,
         -0.1897,  0.0685,  0.0524, -0.1106, -0.1038, -0.2903, -0.0175, -0.0494,
          0.0189, -0.0318, -0.1409,  0.1410, -0.0828, -0.0258, -0.0146,  0.2832,
         -0.0418, -0.2705, -0.6517,  0.7180, -0.1305, -0.5071, -0.0547, -0.3232,
          0.6071, -0.4384,  0.4221, -0.0264,  0.1280, -0.0362, -0.0795, -0.2460,
          0.3905,  0.3999,  0.1712,  0.3476,  0.3549, -0.0401, -0.3157,  0.0383,
         -0.6102, -0.3864,  0.1378,  0.4192,  0.7836, -0.2106, -0.3269,  0.3368]],
       device='cuda:0')
4507.7762799263
         3403680262 function calls (3401002532 primitive calls) in 4554.480 seconds

   Ordered by: cumulative time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
   2837/1    0.064    0.000 4554.485 4554.485 {built-in method builtins.exec}
        1    0.001    0.001 4554.485 4554.485 test.py:1(<module>)
        1   59.875   59.875 4507.776 4507.776 para4band.py:230(train)
  1000000   10.762    0.000 1966.409    0.002 optimizer.py:265(wrapper)
  1000000    7.308    0.000 1928.596    0.002 optimizer.py:29(_use_grad)
  1000000    5.826    0.000 1917.718    0.002 adam.py:108(step)
  1000000   67.111    0.000 1696.587    0.002 adam.py:231(adam)
  1000000   14.616    0.000 1577.603    0.002 adam.py:396(_multi_tensor_adam)
  1000000   49.320    0.000 1387.189    0.001 para4band.py:168(loss)
  1000000    3.428    0.000  920.936    0.001 _tensor.py:428(backward)
  1000000    4.530    0.000  917.230    0.001 __init__.py:106(backward)
  1000000  891.734    0.001  891.734    0.001 {method 'run_backward' of 'torch._C._EngineBase' objects}
2000000/1000000    5.791    0.000  814.325    0.001 module.py:1494(_call_impl)
  1000000    7.278    0.000  810.260    0.001 para4band.py:111(forward)
  1000036    1.898    0.000  520.424    0.001 para4tb.py:113(create_model_function)
  1000036  170.393    0.000  518.526    0.001 para4tb.py:87(__create_TB_function)
  2000444  446.874    0.000  446.874    0.000 {built-in method torch._foreach_add_}
  1000036   12.521    0.000  271.256    0.000 para4tb.py:92(<listcomp>)
  1000222  259.289    0.000  259.289    0.000 {built-in method torch._foreach_addcmul_}
 73078110   22.228    0.000  259.025    0.000 container.py:629(<genexpr>)
  1000000   82.171    0.000  239.129    0.000 para4band.py:155(loss3)
 72077040   52.961    0.000  236.797    0.000 container.py:603(__getitem__)
  1000000  147.085    0.000  199.917    0.000 adam.py:66(_init_group)
  1000000    2.497    0.000  190.974    0.000 _contextlib.py:112(decorate_context)
  1000000  145.005    0.000  181.279    0.000 _foreach_utils.py:20(_group_tensors_by_device_and_dtype)
  1004309   22.303    0.000  169.319    0.000 para4tb.py:101(matrix_function)
  4004309  158.821    0.000  158.821    0.000 {built-in method torch.matmul}
144000444   94.227    0.000  154.355    0.000 optimizer.py:39(_get_value)
      295    0.011    0.000  151.028    0.512 __init__.py:1(<module>)
  1000000   29.664    0.000  149.636    0.000 para4band.py:145(loss2)
  1000000   29.421    0.000  127.064    0.000 para4band.py:136(loss1)
  1000222   24.629    0.000  105.890    0.000 adam.py:489(<listcomp>)
 72079560   50.235    0.000  100.706    0.000 container.py:586(_get_abs_string_index)
  1000000    6.193    0.000  100.289    0.000 para4band.py:76(forward)
  2008618   12.025    0.000   99.786    0.000 functional.py:192(einsum)
  1000222   21.361    0.000   94.455    0.000 adam.py:490(<listcomp>)
  1000222   91.029    0.000   91.029    0.000 {built-in method torch._foreach_add}
  1000222   88.388    0.000   88.388    0.000 {built-in method torch._foreach_sqrt}
  2008618   84.315    0.000   84.315    0.000 {built-in method torch.einsum}
 77186426   55.369    0.000   76.347    0.000 {built-in method builtins.getattr}
  1000222   13.731    0.000   76.257    0.000 adam.py:494(<listcomp>)
  1000000   44.944    0.000   75.732    0.000 optimizer.py:435(zero_grad)
  2000001   74.575    0.000   74.575    0.000 {built-in method torch.sort}
  6648506   70.032    0.000   70.032    0.000 {built-in method torch.mean}
 72000222   43.461    0.000   62.525    0.000 optimizer.py:52(_dispatch_sqrt)
   651122   59.031    0.000   59.031    0.000 {built-in method torch.tensor}
  3000000   57.786    0.000   57.786    0.000 {built-in method torch.abs}
308682878/308679777   42.040    0.000   57.435    0.000 {built-in method builtins.len}
  3000000   55.109    0.000   55.109    0.000 {built-in method torch.topk}
722106567   54.040    0.000   54.040    0.000 {method 'append' of 'list' objects}
288000888   52.255    0.000   52.255    0.000 {built-in method torch.is_complex}
145074684   51.343    0.000   51.343    0.000 {method 'item' of 'torch._C._TensorBase' objects}
  3038114   13.006    0.000   49.839    0.000 {built-in method builtins.all}
   2671/5    0.013    0.000   43.377    8.675 <frozen importlib._bootstrap>:1167(_find_and_load)
   2637/5    0.010    0.000   43.377    8.675 <frozen importlib._bootstrap>:1122(_find_and_load_unlocked)
  2361/12    0.008    0.000   43.360    3.613 <frozen importlib._bootstrap>:666(_load_unlocked)
   2163/5    0.005    0.000   43.359    8.672 <frozen importlib._bootstrap_external>:934(exec_module)
  5725/13    0.003    0.000   43.166    3.320 <frozen importlib._bootstrap>:233(_call_with_frames_removed)
  1001070   39.784    0.000   39.784    0.000 {built-in method torch.stack}
  1000222   38.651    0.000   38.651    0.000 {built-in method torch._foreach_div_}
  1074/92    0.002    0.000   38.187    0.415 {built-in method builtins.__import__}
  3004346   36.308    0.000   36.333    0.000 {method 'type' of 'torch._C._TensorBase' objects}
  1000222   34.441    0.000   34.441    0.000 {built-in method torch._foreach_addcdiv_}
  2000444   33.246    0.000   33.246    0.000 {built-in method torch._foreach_mul_}
     2163    0.014    0.000   32.447    0.015 <frozen importlib._bootstrap_external>:1007(get_code)
     2163    0.006    0.000   32.098    0.015 <frozen importlib._bootstrap_external>:1127(get_data)
 2430/662    0.005    0.000   30.206    0.046 <frozen importlib._bootstrap>:1209(_handle_fromlist)
  2000000    4.407    0.000   27.146    0.000 profiler.py:491(__enter__)
  1000000    1.952    0.000   26.948    0.000 optimizer.py:64(_default_to_fused_or_foreach)
 78084973   26.172    0.000   26.177    0.000 module.py:1601(__getattr__)
2239/2169   25.438    0.011   25.581    0.012 {method 'read' of '_io.BufferedReader' objects}
  1000222   12.494    0.000   25.522    0.000 adam.py:433(<listcomp>)
227093669/226078995   23.199    0.000   25.221    0.000 {built-in method builtins.isinstance}
  1000222   10.829    0.000   24.034    0.000 adam.py:436(<listcomp>)
  1000222   10.930    0.000   23.925    0.000 adam.py:434(<listcomp>)
  1000222   10.689    0.000   23.718    0.000 adam.py:435(<listcomp>)
  2000000    1.553    0.000   22.739    0.000 _ops.py:497(__call__)
  2000000    9.348    0.000   21.658    0.000 profiler.py:495(__exit__)
 72012997   14.633    0.000   21.193    0.000 _tensor.py:942(__hash__)
  2000000   21.186    0.000   21.186    0.000 {built-in method torch._ops.profiler._record_function_enter_new}
  1000038   20.021    0.000   20.021    0.000 {built-in method torch.zeros}
  1000000    4.408    0.000   19.235    0.000 __init__.py:50(_make_grads)
 73000222   14.883    0.000   18.794    0.000 adam.py:268(<genexpr>)
  1000001   18.114    0.000   18.114    0.000 {built-in method torch.diag_embed}
 73000222   18.025    0.000   18.025    0.000 optimizer.py:72(<genexpr>)
  1000000   16.937    0.000   16.937    0.000 {method 'repeat' of 'torch._C._TensorBase' objects}
145162744   15.394    0.000   15.394    0.000 container.py:625(__len__)
223009552   15.218    0.000   15.218    0.000 _jit_internal.py:1102(is_scripting)
  1000000    1.895    0.000   15.070    0.000 optimizer.py:228(_cuda_graph_capture_health_check)
  1000000   14.003    0.000   14.003    0.000 {built-in method torch.ones_like}
  2000000    1.483    0.000   11.628    0.000 _ops.py:286(__call__)
  1000002    1.612    0.000   10.732    0.000 __init__.py:94(is_available)
  2000000   10.361    0.000   10.361    0.000 {method 'view' of 'torch._C._TensorBase' objects}
  2000000   10.145    0.000   10.145    0.000 {built-in method torch._ops.profiler.}
   648506    5.081    0.000   10.056    0.000 functional.py:1387(norm)
        1    0.001    0.001    9.993    9.993 _meta_registrations.py:1(<module>)
  2000000    9.926    0.000    9.926    0.000 {built-in method torch.diagonal}
        2    0.001    0.000    9.557    4.779 decompositions.py:1(<module>)
        1    0.000    0.000    9.222    9.222 fake_tensor.py:1(<module>)
        1    0.000    0.000    9.170    9.170 _guards.py:1(<module>)
  1018094    5.262    0.000    9.119    0.000 module.py:1617(__setattr__)
        1    0.000    0.000    8.907    8.907 band_data_in.py:1(<module>)
145000666    8.883    0.000    8.883    0.000 _utils.py:786(is_compiling)
  2000001    8.865    0.000    8.865    0.000 {method 'transpose' of 'torch._C._TensorBase' objects}
  1004309    8.053    0.000    8.053    0.000 {built-in method torch.exp}
  1000002    1.057    0.000    7.863    0.000 __init__.py:91(_nvml_based_avail)
  1000034    7.715    0.000    7.715    0.000 {built-in method torch.randn}
  1000024    0.719    0.000    6.806    0.000 <frozen os>:772(getenv)
     2163    6.676    0.003    6.676    0.003 {built-in method io.open_code}
  2000000    4.384    0.000    6.572    0.000 profiler.py:482(__init__)
 72036151    6.562    0.000    6.562    0.000 {built-in method builtins.id}
2361/2230    0.004    0.000    6.425    0.003 <frozen importlib._bootstrap>:566(module_from_spec)
  160/140    0.000    0.000    6.372    0.046 <frozen importlib._bootstrap_external>:1231(create_module)
  160/140    4.383    0.027    6.371    0.046 {built-in method _imp.create_dynamic}
        1    0.000    0.000    6.195    6.195 outputs.py:1(<module>)
  1001245    1.617    0.000    6.088    0.000 <frozen _collections_abc>:771(get)
 72000229    5.866    0.000    5.866    0.000 {built-in method math.sqrt}
        1    0.000    0.000    5.344    5.344 dos.py:1(<module>)
  4017308    3.755    0.000    5.241    0.000 grad_mode.py:149(__init__)
  1000222    5.227    0.000    5.227    0.000 adam.py:492(<listcomp>)
        3    0.000    0.000    5.222    1.741 _support_alternative_backends.py:1(<module>)
 72085913    5.130    0.000    5.130    0.000 {built-in method _operator.index}
        1    0.000    0.000    5.073    5.073 _signal_api.py:1(<module>)
  1000000    4.928    0.000    4.928    0.000 {built-in method torch.flatten}
   648506    4.652    0.000    4.652    0.000 {built-in method torch._C._linalg.linalg_vector_norm}
2498/2416    0.019    0.000    4.617    0.002 <frozen importlib._bootstrap>:1056(_find_spec)
  1000356    2.907    0.000    4.471    0.000 <frozen os>:673(__getitem__)
        5    0.000    0.000    4.366    0.873 functional.py:1(<module>)
  1000000    4.189    0.000    4.189    0.000 {built-in method torch.conj}
  1000000    3.959    0.000    3.959    0.000 {method 'conj' of 'torch._C._TensorBase' objects}
     2491    0.002    0.000    3.862    0.002 <frozen importlib._bootstrap_external>:1496(find_spec)
2504/2491    0.008    0.000    3.860    0.002 <frozen importlib._bootstrap_external>:1464(_get_spec)
     3709    0.028    0.000    3.838    0.001 <frozen importlib._bootstrap_external>:1604(find_spec)
    10622    0.004    0.000    3.765    0.000 <frozen importlib._bootstrap_external>:140(_path_stat)
    10795    3.764    0.000    3.764    0.000 {built-in method posix.stat}
     4458    0.003    0.000    3.730    0.001 <frozen importlib._bootstrap_external>:150(_path_is_mode_type)
     4007    0.002    0.000    3.730    0.001 <frozen importlib._bootstrap_external>:159(_path_isfile)
     4309    0.037    0.000    3.582    0.001 para4band.py:101(init_trans_matrix)
  1001070    2.029    0.000    3.578    0.000 container.py:628(__iter__)
        1    0.000    0.000    3.393    3.393 para4band.py:123(__init__)
        1    0.000    0.000    3.393    3.393 para4band.py:83(__init__)
        1    0.000    0.000    3.392    3.392 para4tb.py:13(__init__)
  1000000    2.537    0.000    3.175    0.000 _foreach_utils.py:24(<listcomp>)
        1    0.000    0.000    3.064    3.064 band.py:1(<module>)
        1    0.000    0.000    3.040    3.040 tight_binding_hamiltonian.py:1(<module>)
       35    0.000    0.000    2.902    0.083 module.py:1039(to)
       35    0.007    0.000    2.902    0.083 module.py:795(_apply)
    11727    1.495    0.000    2.900    0.000 {method 'to' of 'torch._C._TensorBase' objects}
     2520    0.002    0.000    2.881    0.001 module.py:1139(convert)
  1000000    0.968    0.000    2.879    0.000 _contextlib.py:141(clone)
        1    0.000    0.000    2.874    2.874 Orbit_spd_manager.py:1(<module>)
        1    0.000    0.000    2.830    2.830 Orbit_spd_with_spin.py:1(<module>)
        1    0.000    0.000    2.814    2.814 Orbit_spd_without_spin.py:1(<module>)
        1    0.000    0.000    2.812    2.812 Orbit_spd.py:1(<module>)
  2006135    2.719    0.000    2.719    0.000 {built-in method torch._C._get_tracing_state}
        1    0.000    0.000    2.662    2.662 inputs.py:1(<module>)
        1    0.000    0.000    2.631    2.631 _spline_filters.py:1(<module>)
        1    0.000    0.000    2.620    2.620 _signaltools.py:1(<module>)
        1    0.000    0.000    2.546    2.546 _ltisys.py:1(<module>)
  1008654    1.181    0.000    2.447    0.000 grad_mode.py:53(__enter__)
        1    0.000    0.000    2.271    2.271 _interpolate.py:1(<module>)
  160/128    0.000    0.000    2.267    0.018 <frozen importlib._bootstrap_external>:1239(exec_module)
  160/128    0.013    0.000    2.266    0.018 {built-in method _imp.exec_dynamic}
     1108    0.014    0.000    2.255    0.002 {built-in method builtins.print}
  1014332    1.834    0.000    2.253    0.000 parameter.py:8(__instancecheck__)
     3067    0.008    0.000    2.242    0.001 _tensor.py:420(__repr__)
     3067    0.029    0.000    2.233    0.001 _tensor_str.py:633(_str)
  1000000    0.413    0.000    2.216    0.000 graphs.py:19(is_current_stream_capturing)
        1    0.000    0.000    2.207    2.207 _fitpack_py.py:1(<module>)
     3067    0.087    0.000    2.149    0.001 _tensor_str.py:366(_str_intern)
        1    0.000    0.000    2.101    2.101 _bsplines.py:1(<module>)
     3067    0.026    0.000    2.012    0.001 _tensor_str.py:287(_tensor_str)
        1    0.000    0.000    1.983    1.983 polyfuncs.py:1(<module>)
2003902/2003650    1.929    0.000    1.978    0.000 typing.py:357(inner)
        1    0.000    0.000    1.974    1.974 specialpolys.py:1(<module>)
  1008664    1.825    0.000    1.923    0.000 grad_mode.py:48(__init__)
  1008654    0.870    0.000    1.906    0.000 grad_mode.py:57(__exit__)
  1000222    1.274    0.000    1.897    0.000 _foreach_utils.py:27(<lambda>)
    46/41    0.000    0.000    1.845    0.045 __init__.py:108(import_module)
    47/41    0.000    0.000    1.845    0.045 <frozen importlib._bootstrap>:1194(_gcd_import)
  1320352    1.179    0.000    1.837    0.000 {method 'format' of 'str' objects}
  1000000    1.803    0.000    1.803    0.000 {built-in method torch._C._cuda_isCurrentStreamCapturing}
        1    0.000    0.000    1.785    1.785 pyplot.py:1(<module>)
     4309    1.745    0.000    1.745    0.000 {built-in method torch._C._linalg.linalg_eigh}
     3067    0.389    0.000    1.743    0.001 _tensor_str.py:100(__init__)
        1    0.000    0.000    1.696    1.696 _peak_finding.py:1(<module>)
        1    0.000    0.000    1.667    1.667 rings.py:1(<module>)
  2008630    1.105    0.000    1.618    0.000 _VF.py:26(__getattr__)
  1000364    1.026    0.000    1.564    0.000 <frozen os>:755(encode)
2050611/2050270    0.563    0.000    1.476    0.000 {built-in method builtins.hasattr}
       10    0.000    0.000    1.435    0.144 linear.py:1(<module>)
      4/1    0.000    0.000    1.405    1.405 __init__.py:219(_lazy_init)
  6025962    1.388    0.000    1.388    0.000 {built-in method torch.is_grad_enabled}
        1    1.371    1.371    1.371    1.371 {built-in method torch._C._cuda_init}
        1    0.000    0.000    1.175    1.175 eager_transforms.py:1(<module>)
        1    0.000    0.000    1.154    1.154 _jit_internal.py:1(<module>)
        1    0.000    0.000    1.064    1.064 partfrac.py:1(<module>)
        1    0.000    0.000    1.064    1.064 decorator.py:65(xthreaded)
        1    0.000    0.000    1.064    1.064 decorator.py:16(threaded_factory)
        1    0.000    0.000    1.029    1.029 _stats_py.py:1(<module>)
5017/4863    0.072    0.000    1.011    0.000 {built-in method builtins.__build_class__}
        1    0.000    0.000    1.005    1.005 pycode.py:1(<module>)
        1    0.000    0.000    1.003    1.003 codeprinter.py:1(<module>)
       19    0.001    0.000    0.994    0.052 utils.py:1(<module>)
        5    0.000    0.000    0.887    0.177 errors.py:1(<module>)
        1    0.000    0.000    0.884    0.884 distributions.py:1(<module>)
2500/2416    0.002    0.000    0.858    0.000 __init__.py:101(find_spec)
      2/1    0.000    0.000    0.855    0.855 __init__.py:111(spec_for_distutils)
  1000003    0.577    0.000    0.843    0.000 __init__.py:87(_is_compiled)
        3    0.000    0.000    0.833    0.278 __config__.py:1(<module>)
        1    0.000    0.000    0.830    0.830 ctx_fp.py:1(<module>)
  4109258    0.826    0.000    0.826    0.000 {method 'get' of 'dict' objects}
        1    0.000    0.000    0.822    0.822 colorbar.py:1(<module>)
       31    0.000    0.000    0.814    0.026 __init__.py:129(__getattr__)
        1    0.000    0.000    0.785    0.785 _diagnostic.py:1(<module>)
        1    0.000    0.000    0.784    0.784 ctx_base.py:1(<module>)
        2    0.000    0.000    0.764    0.382 python.py:1(<module>)
        1    0.000    0.000    0.753    0.753 polytools.py:1(<module>)
        1    0.000    0.000    0.748    0.748 proxy_tensor.py:1(<module>)
        6    0.000    0.000    0.742    0.124 __init__.py:274(load)
        5    0.000    0.000    0.736    0.147 serialization.py:28(loadfn)
  4017308    0.729    0.000    0.729    0.000 {built-in method torch._C._set_grad_enabled}
        1    0.000    0.000    0.724    0.724 _optimize.py:1(<module>)
  1000222    0.589    0.000    0.715    0.000 optimizer.py:46(_stack_if_compiling)
        2    0.000    0.000    0.708    0.354 quantize.py:1(<module>)
  4011176    0.694    0.000    0.694    0.000 {method 'values' of 'collections.OrderedDict' objects}
        1    0.000    0.000    0.686    0.686 sympify.py:1(<module>)
        1    0.000    0.000    0.680    0.680 _infra.py:1(<module>)
        1    0.000    0.000    0.676    0.676 distributed_c10d.py:1(<module>)
        1    0.000    0.000    0.675    0.675 _kdtree.py:1(<module>)
        1    0.000    0.000    0.672    0.672 _geometric_slerp.py:1(<module>)
        1    0.004    0.004    0.664    0.664 {built-in method torch._C._initExtension}
    76481    0.082    0.000    0.658    0.000 _tensor.py:868(__format__)
        1    0.000    0.000    0.654    0.654 figure.py:1(<module>)
        2    0.000    0.000    0.650    0.325 constructor.py:1(<module>)
        2    0.000    0.000    0.648    0.324 distance.py:1(<module>)
        1    0.000    0.000    0.633    0.633 formatter.py:1(<module>)
        1    0.000    0.000    0.598    0.598 hub.py:1(<module>)
  2008618    0.581    0.000    0.581    0.000 {built-in method torch._C._has_torch_function}
        1    0.000    0.000    0.568    0.568 _distn_infrastructure.py:1(<module>)
  1000222    0.560    0.000    0.560    0.000 _foreach_utils.py:27(<listcomp>)
        1    0.000    0.000    0.556    0.556 inputs.py:1947(PotcarSingle)
  1000000    0.547    0.000    0.547    0.000 {built-in method torch._C._are_functorch_transforms_active}
        2    0.000    0.000    0.545    0.273 dist.py:1(<module>)
        1    0.000    0.000    0.544    0.544 json.py:1(<module>)
        1    0.000    0.000    0.538    0.538 symbolic_opset11.py:1(<module>)
        1    0.000    0.000    0.530    0.530 _subplots.py:1(<module>)
        1    0.000    0.000    0.515    0.515 contour.py:1(<module>)
        1    0.000    0.000    0.513    0.513 _minimize.py:1(<module>)
        1    0.000    0.000    0.498    0.498 mock.py:1(<module>)
        2    0.000    0.000    0.488    0.244 dense.py:1(<module>)
        1    0.000    0.000    0.487    0.487 _axes.py:1(<module>)
        1    0.000    0.000    0.483    0.483 cyaml.py:1(<module>)
  1728054    0.479    0.000    0.479    0.000 {built-in method torch._C._has_torch_function_unary}
        7    0.003    0.000    0.475    0.068 __init__.py:299(loads)
  2000000    0.470    0.000    0.470    0.000 {method '__exit__' of 'torch._C.DisableTorchFunctionSubclass' objects}
        5    0.000    0.000    0.470    0.094 json.py:885(decode)
        1    0.000    0.000    0.469    0.469 immutable.py:1(<module>)
        2    0.000    0.000    0.461    0.231 structure.py:1(<module>)
  1000000    0.453    0.000    0.453    0.000 __init__.py:98(_tensor_or_tensors_to_tuple)
  1000499    0.431    0.000    0.431    0.000 {method 'encode' of 'str' objects}
  1012268    0.425    0.000    0.425    0.000 {method 'numel' of 'torch._C._TensorBase' objects}
        1    0.000    0.000    0.419    0.419 para4tb.py:32(load_and_check_matrix)
  1000002    0.413    0.000    0.413    0.000 {built-in method torch._C._cuda_getDeviceCount}
        1    0.000    0.000    0.409    0.409 matrixbase.py:1(<module>)
     1000    0.030    0.000    0.395    0.000 para4band.py:321(<listcomp>)
       12    0.001    0.000    0.389    0.032 core.py:1(<module>)
 571498/5    0.176    0.000    0.384    0.077 json.py:728(process_decoded)
26830/756    0.063    0.000    0.384    0.001 json.py:876(<dictcomp>)
        1    0.000    0.000    0.370    0.370 expr.py:1(<module>)
        1    0.000    0.000    0.363    0.363 _windows.py:1(<module>)
        1    0.000    0.000    0.363    0.363 base_events.py:1(<module>)
        4    0.000    0.000    0.359    0.090 _base.py:1(<module>)
        1    0.000    0.000    0.353    0.353 const_fold.py:1(<module>)
23121/12951    0.076    0.000    0.352    0.000 json.py:881(<listcomp>)
        2    0.000    0.000    0.351    0.175 function.py:1(<module>)
        3    0.000    0.000    0.348    0.116 numbers.py:1(<module>)
        1    0.000    0.000    0.348    0.348 wannier90.py:1(<module>)
        1    0.000    0.000    0.347    0.347 _misc.py:1(<module>)
        2    0.000    0.000    0.343    0.171 text.py:1(<module>)
        4    0.000    0.000    0.334    0.083 basic.py:1(<module>)
        1    0.000    0.000    0.327    0.327 request.py:1(<module>)
        1    0.000    0.000    0.318    0.318 slice.py:1(<module>)
        1    0.000    0.000    0.311    0.311 products.py:1(<module>)
        6    0.000    0.000    0.309    0.052 linear_relu.py:1(<module>)
        1    0.000    0.000    0.309    0.309 _sputils.py:1(<module>)
        1    0.000    0.000    0.305    0.305 client.py:1(<module>)
        4    0.000    0.000    0.304    0.076 random.py:1(<module>)
        1    0.000    0.000    0.295    0.295 textpath.py:1(<module>)
        1    0.000    0.000    0.294    0.294 matexpr.py:1(<module>)
     2163    0.006    0.000    0.290    0.000 <frozen importlib._bootstrap_external>:727(_compile_bytecode)
       10    0.145    0.015    0.290    0.029 {method 'read' of '_io.TextIOWrapper' objects}
        2    0.000    0.000    0.281    0.140 fake_quantize.py:1(<module>)
     2163    0.281    0.000    0.281    0.000 {built-in method marshal.loads}
        1    0.000    0.000    0.280    0.280 _script.py:1(<module>)
        1    0.000    0.000    0.279    0.279 index_tricks.py:1(<module>)
        1    0.000    0.000    0.278    0.278 memory.py:1(<module>)
        2    0.000    0.000    0.276    0.138 _util.py:1(<module>)
        1    0.000    0.000    0.276    0.276 maggroups.py:1(<module>)
        1    0.000    0.000    0.271    0.271 _array_api.py:1(<module>)
1008283/1008278    0.265    0.000    0.265    0.000 {built-in method builtins.iter}
  2000000    0.261    0.000    0.261    0.000 __init__.py:89(annotate)
        2    0.000    0.000    0.261    0.130 parser.py:1(<module>)
        1    0.000    0.000    0.254    0.254 override.py:1(<module>)
        1    0.000    0.000    0.254    0.254 __init__.py:80(do_override)
        1    0.000    0.000    0.254    0.254 __init__.py:63(ensure_local_distutils)
        1    0.000    0.000    0.252    0.252 _memory_viz.py:1(<module>)
        1    0.000    0.000    0.251    0.251 mathtext.py:1(<module>)
        1    0.000    0.000    0.251    0.251 _root.py:1(<module>)
        1    0.000    0.000    0.246    0.246 summations.py:1(<module>)
        2    0.000    0.000    0.243    0.121 observer.py:1(<module>)
        2    0.000    0.000    0.239    0.120 quantization_mappings.py:1(<module>)
4101/3067    0.011    0.000    0.239    0.000 _tensor_str.py:250(_tensor_str_with_formatter)
        3    0.000    0.000    0.238    0.079 serialization.py:1(<module>)
        2    0.000    0.000    0.237    0.119 utilities.py:1(<module>)
        6    0.000    0.000    0.227    0.038 conv.py:1(<module>)
        1    0.000    0.000    0.225    0.225 feedparser.py:1(<module>)
        1    0.000    0.000    0.223    0.223 defmatrix.py:1(<module>)
        1    0.000    0.000    0.221    0.221 algebraicfield.py:1(<module>)
        1    0.000    0.000    0.221    0.221 blas.py:1(<module>)
  1001328    0.220    0.000    0.220    0.000 {method 'values' of 'dict' objects}
        1    0.000    0.000    0.219    0.219 mul.py:1(<module>)
        1    0.000    0.000    0.219    0.219 _recursive.py:1(<module>)
        3    0.000    0.000    0.215    0.072 reductions.py:1(<module>)
        1    0.000    0.000    0.214    0.214 matmul.py:1(<module>)
        1    0.000    0.000    0.214    0.214 autograd_function.py:1(<module>)
        1    0.000    0.000    0.213    0.213 Image.py:1(<module>)
        1    0.021    0.021    0.212    0.212 {built-in method _pickle.load}
 1159/799    0.001    0.000    0.207    0.000 {built-in method builtins.sum}
     1034    0.007    0.000    0.206    0.000 _tensor_str.py:276(<listcomp>)
      300    0.003    0.000    0.206    0.001 matrix_element.py:127(__add__)
        3    0.000    0.000    0.203    0.068 _basic.py:1(<module>)
        1    0.000    0.000    0.200    0.200 bandstructure.py:1(<module>)
        2    0.000    0.000    0.200    0.100 abc.py:1(<module>)
        6    0.000    0.000    0.199    0.033 rnn.py:1(<module>)
      245    0.000    0.000    0.198    0.001 _docscrape.py:579(__init__)
     1034    0.009    0.000    0.196    0.000 _tensor_str.py:208(_vector_str)
     6024    0.009    0.000    0.195    0.000 numeric.py:2170(allclose)
      110    0.000    0.000    0.191    0.002 linecache.py:36(getlines)
       51    0.000    0.000    0.191    0.004 linecache.py:80(updatecache)
 2056/183    0.001    0.000    0.191    0.001 cache.py:69(wrapper)
        1    0.000    0.000    0.191    0.191 _minpack_py.py:1(<module>)
    28/25    0.000    0.000    0.190    0.008 operations.py:62(__new__)
       14    0.000    0.000    0.189    0.013 tokenize.py:392(open)
        1    0.000    0.000    0.188    0.188 _linprog.py:1(<module>)
        5    0.000    0.000    0.188    0.038 add.py:197(flatten)
        1    0.000    0.000    0.187    0.187 analyzer.py:1(<module>)
       30    0.000    0.000    0.185    0.006 tokenize.py:299(detect_encoding)
        1    0.000    0.000    0.185    0.185 _policybase.py:1(<module>)
       36    0.000    0.000    0.185    0.005 tokenize.py:323(read_or_stop)
       20    0.185    0.009    0.185    0.009 {method 'readline' of '_io.BufferedReader' objects}
        1    0.000    0.000    0.184    0.184 _tensor.py:1(<module>)
  1014332    0.182    0.000    0.182    0.000 {function _ParameterMeta.__instancecheck__ at 0x151b09b67920}
        3    0.000    0.000    0.182    0.061 linalg.py:1(<module>)
        5    0.000    0.000    0.182    0.036 _common.py:1(<module>)
        1    0.000    0.000    0.180    0.180 datapipe.py:1(<module>)
        1    0.000    0.000    0.180    0.180 plot.py:1(<module>)
      251    0.001    0.000    0.176    0.001 _docscrape.py:140(__init__)
        3    0.000    0.000    0.172    0.057 solvers.py:1(<module>)
        1    0.000    0.000    0.168    0.168 image.py:1(<module>)
        1    0.000    0.000    0.166    0.166 ode.py:1(<module>)
     6024    0.024    0.000    0.164    0.000 numeric.py:2249(isclose)
        1    0.000    0.000    0.164    0.164 tensor.py:1(<module>)
        1    0.000    0.000    0.164    0.164 polyclasses.py:1(<module>)
        1    0.000    0.000    0.162    0.162 symbolic_caffe2.py:1(<module>)
        1    0.000    0.000    0.162    0.162 computed_entries.py:1(<module>)
        1    0.000    0.000    0.162    0.162 rcsetup.py:1(<module>)
        1    0.000    0.000    0.161    0.161 numerictypes.py:1(<module>)
        1    0.000    0.000    0.161    0.161 spglib.py:1(<module>)
        2    0.000    0.000    0.160    0.080 domainmatrix.py:1(<module>)
     4309    0.023    0.000    0.157    0.000 para4band.py:73(__init__)
      300    0.000    0.000    0.157    0.001 matrix_element.py:14(__init__)
      300    0.005    0.000    0.155    0.001 matrix_element.py:21(check_input)
        1    0.000    0.000    0.155    0.155 _conversion.py:1(<module>)
        1    0.000    0.000    0.155    0.155 find_first_use_of_broken_modules.py:1(<module>)
     1034    0.016    0.000    0.155    0.000 _tensor_str.py:238(<listcomp>)
        1    0.000    0.000    0.154    0.154 minimize_trustregion_constr.py:1(<module>)
        1    0.000    0.000    0.154    0.154 package_exporter.py:1(<module>)
        1    0.000    0.000    0.151    0.151 category.py:1(<module>)
        2    0.000    0.000    0.150    0.075 bsplines.py:1(<module>)
        1    0.000    0.000    0.150    0.150 simplify.py:1(<module>)
     3067    0.149    0.000    0.149    0.000 {built-in method torch.masked_select}
        1    0.000    0.000    0.149    0.149 multiarray.py:1(<module>)
        4    0.000    0.000    0.145    0.036 eigen.py:1(<module>)
        2    0.000    0.000    0.145    0.072 context.py:1(<module>)
        2    0.000    0.000    0.144    0.072 _compression.py:113(readall)
        1    0.000    0.000    0.144    0.144 _continuous_distns.py:1(<module>)
        1    0.000    0.000    0.144    0.144 _delegation.py:1(<module>)
        2    0.000    0.000    0.143    0.072 _parser.py:1(<module>)
        1    0.000    0.000    0.143    0.143 single.py:1(<module>)
        1    0.000    0.000    0.143    0.143 bz2.py:157(read)
        2    0.000    0.000    0.142    0.071 _ops.py:1(<module>)
        9    0.000    0.000    0.141    0.016 _compression.py:72(read)
       39    0.140    0.004    0.140    0.004 {method 'decompress' of '_bz2.BZ2Decompressor' objects}
        1    0.000    0.000    0.140    0.140 pretty.py:1(<module>)
        2    0.000    0.000    0.140    0.070 callable.py:1(<module>)
        1    0.000    0.000    0.140    0.140 power.py:1(<module>)
  1000000    0.139    0.000    0.139    0.000 optimizer.py:249(_optimizer_step_code)
    74448    0.022    0.000    0.139    0.000 _tensor_str.py:219(_val_formatter)
        1    0.000    0.000    0.138    0.138 graph_module.py:1(<module>)
      251    0.004    0.000    0.136    0.001 _docscrape.py:388(_parse)
       84    0.000    0.000    0.134    0.002 linecache.py:26(getline)
        1    0.000    0.000    0.134    0.134 _entry_points.py:1(<module>)
        1    0.000    0.000    0.133    0.133 sparse_adam.py:1(<module>)
       36    0.000    0.000    0.132    0.004 para4tb.py:126(set_zero_and_init_matrix_fuction)
        1    0.000    0.000    0.131    0.131 point.py:1(<module>)
     3067    0.130    0.000    0.130    0.000 {built-in method torch.isfinite}
        1    0.000    0.000    0.130    0.130 _utils_internal.py:1(<module>)
        1    0.000    0.000    0.128    0.128 tempfile.py:1(<module>)
        1    0.000    0.000    0.128    0.128 kl.py:1(<module>)
        1    0.000    0.000    0.127    0.127 _type_aliases.py:1(<module>)
        1    0.000    0.000    0.126    0.126 header.py:1(<module>)
        1    0.000    0.000    0.126    0.126 limits.py:1(<module>)
        1    0.000    0.000    0.126    0.126 band.py:29(get_data)
        1    0.000    0.000    0.126    0.126 band_data_in.py:13(__init__)
        1    0.000    0.000    0.126    0.126 band_data_in.py:29(__module_choose)
        1    0.001    0.001    0.126    0.126 band_data_in.py:36(__get_dat_content)
        1    0.000    0.000    0.125    0.125 base_backend.py:1(<module>)
        1    0.000    0.000    0.124    0.124 _funcs.py:1(<module>)
        2    0.000    0.000    0.124    0.062 overrides.py:1(<module>)
        7    0.000    0.000    0.124    0.018 common.py:1(<module>)
        1    0.000    0.000    0.124    0.124 PngImagePlugin.py:1(<module>)
        1    0.000    0.000    0.124    0.124 _multicomp.py:1(<module>)
    76481    0.059    0.000    0.123    0.000 _tensor_str.py:176(format)
        1    0.000    0.000    0.123    0.123 _ndimage_api.py:1(<module>)
        2    0.000    0.000    0.122    0.061 series.py:1(<module>)
        1    0.013    0.013    0.122    0.122 band_data_in.py:71(get_band)
        1    0.000    0.000    0.121    0.121 composition.py:1(<module>)
     6135    0.012    0.000    0.120    0.000 _tensor.py:920(__iter__)
        4    0.000    0.000    0.120    0.030 graph.py:1(<module>)
        1    0.000    0.000    0.119    0.119 gumbel.py:1(<module>)
       34    0.001    0.000    0.118    0.003 para4tb.py:118(init_para)
        1    0.000    0.000    0.114    0.114 shutil.py:1(<module>)
        1    0.000    0.000    0.113    0.113 iterables.py:1(<module>)
        1    0.000    0.000    0.113    0.113 groups.py:1(<module>)
        1    0.000    0.000    0.113    0.113 _functional.py:1(<module>)
        1    0.000    0.000    0.112    0.112 fontconfig_pattern.py:1(<module>)
        1    0.000    0.000    0.112    0.112 Periodicity_System.py:1(<module>)
        1    0.000    0.000    0.111    0.111 symbolic_helper.py:1(<module>)
        1    0.000    0.000    0.110    0.110 integrals.py:1(<module>)
       16    0.000    0.000    0.110    0.007 traceback.py:220(extract_stack)
       16    0.000    0.000    0.110    0.007 traceback.py:375(extract)
       16    0.000    0.000    0.110    0.007 traceback.py:397(_extract_from_extended_frame_gen)
        1    0.000    0.000    0.110    0.110 net_min_base.py:1(<module>)
      181    0.000    0.000    0.109    0.001 traceback.py:316(line)
        1    0.000    0.000    0.109    0.109 _qmc.py:1(<module>)
        1    0.000    0.000    0.109    0.109 ivp.py:1(<module>)
        1    0.000    0.000    0.108    0.108 dbapi2.py:1(<module>)
        1    0.000    0.000    0.107    0.107 cmd.py:1(<module>)
    30998    0.106    0.000    0.106    0.000 {method 'split' of 'str' objects}
        1    0.000    0.000    0.106    0.106 split_utils.py:1(<module>)
        2    0.000    0.000    0.106    0.053 _matfuncs.py:1(<module>)
        1    0.000    0.000    0.105    0.105 periodic_table.py:1(<module>)
        1    0.000    0.000    0.104    0.104 _mio.py:1(<module>)
        1    0.000    0.000    0.102    0.102 _pickle.py:1(<module>)
    78757    0.101    0.000    0.101    0.000 {method 'detach' of 'torch._C._TensorBase' objects}
        1    0.000    0.000    0.101    0.101 entity.py:1(<module>)
        1    0.000    0.000    0.100    0.100 _code_flow.py:1(<module>)
     6024    0.034    0.000    0.100    0.000 numeric.py:2330(within_tol)
     6135    0.099    0.000    0.099    0.000 {method 'unbind' of 'torch._C._TensorBase' objects}
        1    0.000    0.000    0.099    0.099 uarray.py:1(<module>)
        2    0.000    0.000    0.098    0.049 distributed.py:1(<module>)
        1    0.000    0.000    0.096    0.096 __init__.py:155(_check_versions)
        1    0.000    0.000    0.096    0.096 _svds.py:1(<module>)
        1    0.000    0.000    0.096    0.096 _helper.py:1(<module>)
        2    0.000    0.000    0.095    0.048 kind.py:1(<module>)
        1    0.000    0.000    0.094    0.094 pyfunctorch.py:1(<module>)
        2    0.000    0.000    0.094    0.047 scanner.py:1(<module>)
        1    0.000    0.000    0.093    0.093 numeric.py:1(<module>)
        3    0.000    0.000    0.093    0.031 profiler.py:1(<module>)
        1    0.000    0.000    0.093    0.093 cli.py:1(<module>)
        2    0.000    0.000    0.093    0.046 batchnorm.py:1(<module>)
        1    0.000    0.000    0.092    0.092 ddm.py:1(<module>)
        1    0.000    0.000    0.092    0.092 collections.py:1(<module>)
        1    0.000    0.000    0.091    0.091 _thread_flow.py:1(<module>)
     6407    0.005    0.000    0.090    0.000 __init__.py:272(_compile)
        1    0.000    0.000    0.090    0.090 _thread_flow_location.py:1(<module>)
        1    0.000    0.000    0.089    0.089 secrets.py:1(<module>)
        1    0.000    0.000    0.089    0.089 py3k.py:1(<module>)
        1    0.000    0.000    0.088    0.088 _tool.py:1(<module>)
       10    0.087    0.009    0.087    0.009 {orjson.loads}
        1    0.000    0.000    0.087    0.087 _at.py:1(<module>)
     2500    0.002    0.000    0.086    0.000 inspect.py:3270(signature)
3228/2522    0.014    0.000    0.085    0.000 inspect.py:2422(_signature_from_callable)
       97    0.001    0.000    0.085    0.001 _array_api.py:806(decorator)
        1    0.000    0.000    0.084    0.084 staggered.py:1(<module>)
     2500    0.002    0.000    0.084    0.000 inspect.py:3016(from_callable)
        1    0.000    0.000    0.084    0.084 tokens.py:1(<module>)
        3    0.000    0.000    0.083    0.028 __init__.py:342(__init__)
        3    0.083    0.028    0.083    0.028 {built-in method _ctypes.dlopen}
        1    0.001    0.001    0.082    0.082 groups.py:293(SpaceGroup)
      295    0.001    0.000    0.082    0.000 _compiler.py:738(compile)
        2    0.000    0.000    0.081    0.040 __init__.py:12(__getattr__)
        1    0.000    0.000    0.079    0.079 minpoly.py:1(<module>)
        1    0.000    0.000    0.079    0.079 jit_utils.py:1(<module>)
        1    0.000    0.000    0.079    0.079 blocking_input.py:1(<module>)
        1    0.000    0.000    0.078    0.078 formal.py:1(<module>)
        1    0.000    0.000    0.077    0.077 gradcheck.py:1(<module>)
        1    0.000    0.000    0.075    0.075 lambdify.py:1(<module>)
        1    0.000    0.000    0.075    0.075 libmpc.py:1(<module>)
      110    0.002    0.000    0.074    0.001 _distn_infrastructure.py:1863(__init__)
       26    0.000    0.000    0.074    0.003 _jit_internal.py:847(_check_overload_body)
        1    0.000    0.000    0.074    0.074 equality_constrained_sqp.py:1(<module>)
       26    0.000    0.000    0.074    0.003 _sources.py:119(parse_def)
        1    0.000    0.000    0.073    0.073 __init__.py:159(_load_global_deps)
        1    0.000    0.000    0.073    0.073 least_squares.py:1(<module>)
       26    0.000    0.000    0.071    0.003 _sources.py:11(get_source_lines_and_file)
      531    0.000    0.000    0.071    0.000 __init__.py:225(compile)
       26    0.000    0.000    0.071    0.003 inspect.py:1243(getsourcelines)
        1    0.000    0.000    0.071    0.071 _morestats.py:1(<module>)
        1    0.000    0.000    0.071    0.071 locks.py:1(<module>)
        1    0.000    0.000    0.070    0.070 mg_operation.py:1(<module>)
        1    0.000    0.000    0.070    0.070 frontend.py:1(<module>)
        1    0.000    0.000    0.068    0.068 dataloader.py:1(<module>)
        1    0.000    0.000    0.068    0.068 replicate.py:1(<module>)
        2    0.000    0.000    0.068    0.034 subprocess.py:1(<module>)
     3025    0.042    0.000    0.068    0.000 inspect.py:867(cleandoc)
        1    0.000    0.000    0.068    0.068 _trustregion_krylov.py:1(<module>)
        1    0.000    0.000    0.068    0.068 half_normal.py:1(<module>)
        2    0.000    0.000    0.067    0.034 exponential.py:1(<module>)
        1    0.000    0.000    0.066    0.066 singularity_functions.py:1(<module>)
        1    0.000    0.000    0.066    0.066 _svdp.py:1(<module>)
        2    0.000    0.000    0.066    0.033 grouping.py:1(<module>)
      130    0.000    0.000    0.066    0.001 dataclasses.py:1210(wrap)
      130    0.005    0.000    0.065    0.001 dataclasses.py:885(_process_class)
        1    0.000    0.000    0.065    0.065 artist.py:1(<module>)
       11    0.000    0.000    0.064    0.006 artist.py:1613(kwdoc)
        2    0.000    0.000    0.064    0.032 markers.py:1(<module>)
        1    0.000    0.000    0.064    0.064 graph_settings.py:1(<module>)
     1400    0.005    0.000    0.063    0.000 _docscrape.py:201(_read_to_next_section)
        1    0.000    0.000    0.063    0.063 _external_properties.py:1(<module>)
        1    0.000    0.000    0.063    0.063 evalf.py:1(<module>)
        1    0.000    0.000    0.062    0.062 backend_bases.py:1(<module>)
        1    0.000    0.000    0.062    0.062 polyhedron.py:1(<module>)
        2    0.000    0.000    0.062    0.031 traverse.py:1(<module>)
        1    0.000    0.000    0.061    0.061 node.py:1(<module>)
        1    0.000    0.000    0.061    0.061 lsq_linear.py:1(<module>)
     1444    0.003    0.000    0.061    0.000 _docscrape.py:212(_read_sections)
       63    0.001    0.000    0.061    0.001 _axis_nan_policy.py:418(axis_nan_policy_decorator)
        1    0.000    0.000    0.061    0.061 ctx_mp.py:1(<module>)
        1    0.000    0.000    0.060    0.060 hierarchy.py:1(<module>)
        2    0.000    0.000    0.059    0.030 __init__.py:181(_lazy_call)
        2    0.000    0.000    0.059    0.030 traceback.py:213(format_stack)
       26    0.000    0.000    0.059    0.002 inspect.py:1055(findsource)
     2632    0.003    0.000    0.059    0.000 inspect.py:848(getdoc)
        2    0.000    0.000    0.058    0.029 events.py:1(<module>)
        1    0.000    0.000    0.058    0.058 axes3d.py:1(<module>)
        1    0.000    0.000    0.057    0.057 constraint_registry.py:1(<module>)
        1    0.000    0.000    0.057    0.057 nvfuser_prims.py:1(<module>)
        2    0.000    0.000    0.057    0.029 shape_base.py:1(<module>)
        2    0.000    0.000    0.057    0.029 path.py:1(<module>)
       10    0.000    0.000    0.056    0.006 version.py:1(<module>)
        1    0.000    0.000    0.056    0.056 pyprojecttoml.py:1(<module>)
        1    0.000    0.000    0.056    0.056 hb.py:1(<module>)
    18072    0.011    0.000    0.056    0.000 fromnumeric.py:2421(all)
        1    0.000    0.000    0.055    0.055 _cubature.py:1(<module>)
     2667    0.003    0.000    0.055    0.000 <frozen importlib._bootstrap>:169(__enter__)
        1    0.000    0.000    0.055    0.055 _modified.py:1(<module>)
      130    0.000    0.000    0.055    0.000 dataclasses.py:1193(dataclass)
        1    0.000    0.000    0.055    0.055 _apply_pyprojecttoml.py:1(<module>)
        1    0.000    0.000    0.055    0.055 cm.py:1(<module>)
        1    0.000    0.000    0.055    0.055 lattice.py:1(<module>)
        1    0.000    0.000    0.055    0.055 para4tb.py:73(__get_TB_fix_data)
     2005    0.017    0.000    0.054    0.000 inspect.py:2327(_signature_from_function)
        1    0.000    0.000    0.054    0.054 _csr.py:1(<module>)
       20    0.000    0.000    0.054    0.003 _jit_internal.py:875(_overload)
        1    0.000    0.000    0.054    0.054 _fitpack_impl.py:1(<module>)
      295    0.001    0.000    0.053    0.000 _parser.py:970(parse)
        1    0.000    0.000    0.053    0.053 gtk.py:1(<module>)
        1    0.000    0.000    0.053    0.053 combsimp.py:1(<module>)
        1    0.000    0.000    0.052    0.052 comm.py:1(<module>)
     6829    0.020    0.000    0.052    0.000 module.py:539(register_parameter)
        1    0.000    0.000    0.052    0.052 _differentiable_functions.py:1(<module>)
        4    0.000    0.000    0.052    0.013 transforms.py:1(<module>)
        2    0.000    0.000    0.052    0.026 linsolve.py:1(<module>)
     4345    0.042    0.000    0.052    0.000 module.py:437(__init__)
        1    0.000    0.000    0.052    0.052 _kde.py:1(<module>)
        1    0.000    0.000    0.052    0.052 charset.py:1(<module>)
        1    0.000    0.000    0.051    0.051 symbol.py:1(<module>)
  877/295    0.003    0.000    0.051    0.000 _parser.py:447(_parse_sub)
        1    0.000    0.000    0.051    0.051 npyio.py:1(<module>)
        1    0.000    0.000    0.051    0.051 data_parallel.py:1(<module>)
        1    0.000    0.000    0.051    0.051 _filters.py:1(<module>)
        1    0.000    0.000    0.051    0.051 sslproto.py:1(<module>)
        1    0.000    0.000    0.051    0.051 encoders.py:1(<module>)
13079/11862    0.011    0.000    0.050    0.000 {built-in method __new__ of type object at 0x864300}
        1    0.000    0.000    0.050    0.050 _linprog_highs.py:1(<module>)
 1297/316    0.018    0.000    0.050    0.000 _parser.py:507(_parse)
       68    0.000    0.000    0.050    0.001 _util.py:1195(decorator)
      462    0.001    0.000    0.050    0.000 basic.py:212(__init_subclass__)
        1    0.000    0.000    0.050    0.050 forward_ad.py:1(<module>)
     2361    0.009    0.000    0.050    0.000 <frozen importlib._bootstrap>:493(_init_module_attrs)
        1    0.000    0.000    0.050    0.050 tz.py:1(<module>)
       13    0.000    0.000    0.049    0.004 library.py:32(__init__)
      463    0.022    0.000    0.049    0.000 assumptions.py:614(_prepare_class_assumptions)
        1    0.000    0.000    0.048    0.048 bdf.py:1(<module>)
      449    0.001    0.000    0.048    0.000 __init__.py:80(decomposition_decorator)
        1    0.000    0.000    0.048    0.048 finitefield.py:1(<module>)
        1    0.000    0.000    0.048    0.048 _linprog_ip.py:1(<module>)
        1    0.000    0.000    0.048    0.048 band_data_out.py:1(<module>)
       11    0.001    0.000    0.048    0.004 artist.py:1386(pprint_setters)
        1    0.000    0.000    0.047    0.047 transformed_distribution.py:1(<module>)
       28    0.025    0.001    0.047    0.002 __init__.py:785(_rc_params_in_file)
        1    0.000    0.000    0.046    0.046 scimath.py:1(<module>)
        2    0.000    0.000    0.046    0.023 _backend.py:1(<module>)
        1    0.000    0.000    0.046    0.046 splitter_base.py:1(<module>)
      376    0.000    0.000    0.046    0.000 __init__.py:686(__getitem__)
        1    0.000    0.000    0.046    0.046 complexes.py:1(<module>)
        1    0.000    0.000    0.046    0.046 gmpy.py:1(<module>)
      3/2    0.000    0.000    0.046    0.023 pyplot.py:216(switch_backend)
    18109    0.018    0.000    0.045    0.000 fromnumeric.py:71(_wrapreduction)
        1    0.000    0.000    0.045    0.045 _linesearch.py:1(<module>)
      521    0.005    0.000    0.045    0.000 _docscrape.py:224(_parse_param_list)
        4    0.000    0.000    0.045    0.011 _utils.py:1(<module>)
        1    0.000    0.000    0.045    0.045 bz2.py:1(<module>)
      463    0.010    0.000    0.044    0.000 doccer.py:29(docformat)
     4862    0.042    0.000    0.044    0.000 <frozen importlib._bootstrap>:100(acquire)
        1    0.000    0.000    0.043    0.043 _artifact_change.py:1(<module>)
        2    0.000    0.000    0.043    0.022 _helpers.py:1(<module>)
       87    0.000    0.000    0.043    0.000 dispatcher.py:178(add)
     2700    0.008    0.000    0.043    0.000 textwrap.py:419(dedent)
        1    0.000    0.000    0.043    0.043 setupcfg.py:1(<module>)
       91    0.002    0.000    0.043    0.000 enum.py:466(__new__)
        1    0.000    0.000    0.043    0.043 stringpict.py:1(<module>)
        1    0.000    0.000    0.043    0.043 delta_functions.py:1(<module>)
       87    0.000    0.000    0.043    0.000 dispatcher.py:222(reorder)
        1    0.000    0.000    0.043    0.043 domain.py:1(<module>)
        2    0.000    0.000    0.042    0.021 pyplot.py:276(backend_mod)
        1    0.000    0.000    0.042    0.042 _measurements.py:1(<module>)
      550    0.001    0.000    0.042    0.000 _pytree.py:194(tree_map)
        1    0.000    0.000    0.042    0.042 ring_series.py:1(<module>)
        1    0.000    0.000    0.042    0.042 _trustregion_dogleg.py:1(<module>)
        1    0.000    0.000    0.041    0.041 assumptions.py:1(<module>)
        1    0.000    0.000    0.040    0.040 interval_arithmetic.py:1(<module>)
        1    0.000    0.000    0.040    0.040 nonhomogeneous.py:1(<module>)
       35    0.000    0.000    0.040    0.001 container.py:580(__init__)
        2    0.000    0.000    0.040    0.020 bessel.py:1(<module>)
        1    0.000    0.000    0.040    0.040 _multivariate.py:1(<module>)
        1    0.000    0.000    0.040    0.040 _tokenizer.py:1(<module>)
        1    0.000    0.000    0.040    0.040 error_functions.py:1(<module>)
        1    0.000    0.000    0.040    0.040 core.py:164(load_base_library)
        1    0.000    0.000    0.040    0.040 core.py:196(read_style_directory)
      131    0.001    0.000    0.040    0.000 _distn_infrastructure.py:830(_construct_doc)
        1    0.000    0.000    0.040    0.040 dispatcher.py:1(<module>)
        1    0.000    0.000    0.039    0.039 graphs.py:1(<module>)
        1    0.000    0.000    0.039    0.039 partitions_.py:1(<module>)
       35    0.000    0.000    0.039    0.001 container.py:631(__iadd__)
       35    0.001    0.000    0.039    0.001 container.py:650(extend)
        1    0.000    0.000    0.039    0.039 pickle.py:1(<module>)
        1    0.000    0.000    0.039    0.039 _discrete_distns.py:1(<module>)
        1    0.000    0.000    0.039    0.039 _rotation_groups.py:1(<module>)
       26    0.000    0.000    0.039    0.001 __init__.py:859(rc_params_from_file)
    76481    0.038    0.000    0.038    0.000 {method '__format__' of 'float' objects}
        1    0.000    0.000    0.038    0.038 conflict.py:1(<module>)
        1    0.000    0.000    0.038    0.038 arpack.py:1(<module>)
     2520    0.003    0.000    0.037    0.000 container.py:639(append)
    18708    0.007    0.000    0.037    0.000 {built-in method builtins.next}
        1    0.000    0.000    0.037    0.037 _highs_wrapper.py:1(<module>)
     5425    0.015    0.000    0.037    0.000 _docscrape.py:67(read_to_condition)
      421    0.002    0.000    0.037    0.000 dataclasses.py:413(_create_fn)
     4326    0.013    0.000    0.037    0.000 <frozen importlib._bootstrap_external>:437(cache_from_source)
        1    0.000    0.000    0.037    0.037 dataframes.py:1(<module>)
     1002    0.007    0.000    0.037    0.000 enum.py:233(__set_name__)
        1    0.000    0.000    0.037    0.037 sg_operation.py:1(<module>)
    21317    0.014    0.000    0.036    0.000 <frozen importlib._bootstrap_external>:126(_path_join)
      550    0.000    0.000    0.036    0.000 _pytree.py:196(<listcomp>)
        1    0.000    0.000    0.036    0.036 fromnumeric.py:1(<module>)
        1    0.000    0.000    0.036    0.036 hmac.py:1(<module>)
      592    0.003    0.000    0.036    0.000 __init__.py:31(_add_op_to_registry)
        1    0.000    0.000    0.036    0.036 generate.py:1(<module>)
        1    0.000    0.000    0.036    0.036 gmpyfinitefield.py:1(<module>)
        1    0.000    0.000    0.035    0.035 ellipse.py:1(<module>)
        1    0.000    0.000    0.035    0.035 package_importer.py:1(<module>)
        1    0.000    0.000    0.035    0.035 _ode.py:1(<module>)
      454    0.000    0.000    0.035    0.000 __init__.py:127(register)
        1    0.000    0.000    0.035    0.035 _filter_design.py:1(<module>)
        1    0.000    0.000    0.035    0.035 dense_ndim_array.py:1(<module>)
        1    0.000    0.000    0.034    0.034 _linprog_util.py:1(<module>)
        1    0.000    0.000    0.034    0.034 _testutils.py:1(<module>)
        1    0.000    0.000    0.034    0.034 structures.py:1(<module>)
        1    0.000    0.000    0.034    0.034 graph_drawer.py:1(<module>)
        1    0.000    0.000    0.034    0.034 mutable_ndim_array.py:1(<module>)
        1    0.000    0.000    0.033    0.033 dates.py:1(<module>)
        1    0.000    0.000    0.033    0.033 __init__.py:128(_check_capability)
        1    0.000    0.000    0.033    0.033 _shgo.py:1(<module>)
        1    0.000    0.000    0.033    0.033 ImagePalette.py:1(<module>)
        1    0.000    0.000    0.033    0.033 homomorphisms.py:1(<module>)
        1    0.000    0.000    0.033    0.033 grad_mode.py:1(<module>)
        1    0.000    0.000    0.033    0.033 module.py:1(<module>)
        1    0.000    0.000    0.033    0.033 logging.py:1(<module>)
     3067    0.033    0.000    0.033    0.000 {method 'min' of 'torch._C._TensorBase' objects}
        1    0.000    0.000    0.032    0.032 engine.py:1(<module>)
        1    0.000    0.000    0.032    0.032 _location.py:1(<module>)
        1    0.000    0.000    0.032    0.032 __init__.py:645(device_count)
        1    0.000    0.000    0.032    0.032 __init__.py:616(_device_count_nvml)
        1    0.022    0.022    0.032    0.032 __init__.py:539(_raw_device_count_nvml)
        1    0.000    0.000    0.032    0.032 gamma_functions.py:1(<module>)
2164/2161    0.002    0.000    0.032    0.000 <frozen importlib._bootstrap_external>:599(_check_name_wrapper)
     3969    0.002    0.000    0.032    0.000 _docscrape.py:77(read_to_next_empty_line)
        1    0.000    0.000    0.032    0.032 grad.py:1(<module>)
        1    0.000    0.000    0.032    0.032 _expm_multiply.py:1(<module>)
     1465    0.005    0.000    0.032    0.000 _ops.py:447(__getattr__)
        1    0.003    0.003    0.031    0.031 _meta_registrations.py:2649(activate_meta)
        1    0.001    0.001    0.031    0.031 para4tb.py:45(__get_exp)
     4220    0.015    0.000    0.031    0.000 _docscrape.py:168(_is_at_section)
        3    0.000    0.000    0.031    0.010 __init__.py:984(version)
        1    0.000    0.000    0.031    0.031 beta.py:1(<module>)
        1    0.000    0.000    0.031    0.031 monkey.py:1(<module>)
        1    0.000    0.000    0.031    0.031 line.py:1(<module>)
        1    0.000    0.000    0.031    0.031 _remove_redundancy.py:1(<module>)
        1    0.000    0.000    0.030    0.030 galoisgroups.py:1(<module>)
        1    0.000    0.000    0.030    0.030 _mio5.py:1(<module>)
        1    0.000    0.000    0.030    0.030 std.py:1(<module>)
        1    0.000    0.000    0.030    0.030 difflib.py:1(<module>)
        1    0.000    0.000    0.030    0.030 scatter_gather.py:1(<module>)
        2    0.000    0.000    0.030    0.015 readers.py:1(<module>)
     5110    0.030    0.000    0.030    0.000 {built-in method torch.zeros_like}
        1    0.000    0.000    0.030    0.030 basis.py:1(<module>)
    12084    0.014    0.000    0.030    0.000 _ufunc_config.py:33(seterr)
        1    0.000    0.000    0.030    0.030 _common.py:17(files)
        1    0.000    0.000    0.029    0.029 _common.py:59(from_package)
        1    0.000    0.000    0.029    0.029 _adapters.py:28(get_resource_reader)
        1    0.000    0.000    0.029    0.029 _adapters.py:151(_native)
        1    0.000    0.000    0.029    0.029 _adapters.py:146(_reader)
        1    0.000    0.000    0.029    0.029 <frozen importlib._bootstrap_external>:1136(get_resource_reader)
      398    0.003    0.000    0.029    0.000 _util.py:504(getfullargspec_no_self)
        1    0.000    0.000    0.029    0.029 _tool_component.py:1(<module>)
        1    0.000    0.000    0.029    0.029 gridspec.py:1(<module>)
     9201    0.008    0.000    0.029    0.000 _tensor_str.py:94(tensor_totype)
        1    0.000    0.000    0.029    0.029 _root_scalar.py:1(<module>)
        1    0.000    0.000    0.029    0.029 font_manager.py:1(<module>)
        1    0.000    0.000    0.029    0.029 bernoulli.py:1(<module>)
        2    0.000    0.000    0.028    0.014 decorator.py:1(<module>)
     4486    0.002    0.000    0.028    0.000 <frozen importlib._bootstrap>:392(cached)
        1    0.000    0.000    0.028    0.028 archive_util.py:1(<module>)
     9123    0.004    0.000    0.028    0.000 contextlib.py:132(__enter__)
        2    0.000    0.000    0.028    0.014 fourier.py:1(<module>)
        1    0.000    0.000    0.028    0.028 blockmatrix.py:1(<module>)
        3    0.000    0.000    0.028    0.009 __init__.py:625(version)
        1    0.000    0.000    0.028    0.028 expand.py:1(<module>)
        3    0.000    0.000    0.028    0.009 __init__.py:598(metadata)
        1    0.000    0.000    0.027    0.027 _artifact.py:1(<module>)
     3067    0.027    0.000    0.027    0.000 {built-in method torch.ceil}
        2    0.000    0.000    0.027    0.014 laplace.py:1(<module>)
      778    0.003    0.000    0.027    0.000 _ops.py:553(__getattr__)
        1    0.000    0.000    0.027    0.027 tarfile.py:1(<module>)
        1    0.000    0.000    0.027    0.027 densebasic.py:1(<module>)
        1    0.000    0.000    0.027    0.027 factor_.py:1(<module>)
    30105    0.011    0.000    0.027    0.000 {built-in method builtins.setattr}
      295    0.001    0.000    0.027    0.000 _compiler.py:571(_code)
        1    0.000    0.000    0.027    0.027 comments.py:1(<module>)
        1    0.000    0.000    0.027    0.027 lapack.py:1(<module>)
        1    0.000    0.000    0.027    0.027 backend_agg.py:1(<module>)
        1    0.000    0.000    0.026    0.026 ElementTree.py:1(<module>)
       26    0.000    0.000    0.026    0.001 _util.py:277(decorator)
     2520    0.002    0.000    0.026    0.000 container.py:614(__setitem__)
     2323    0.003    0.000    0.026    0.000 <frozen importlib._bootstrap_external>:567(_get_cached)
     3067    0.026    0.000    0.026    0.000 {method 'max' of 'torch._C._TensorBase' objects}
        2    0.000    0.000    0.026    0.013 _adapters.py:1(<module>)
      120    0.001    0.000    0.026    0.000 periodic_table.py:77(__init__)
        1    0.000    0.000    0.025    0.025 warnings.py:96(_showwarnmsg)
        1    0.000    0.000    0.025    0.025 warnings.py:20(_showwarnmsg_impl)
        5    0.000    0.000    0.025    0.005 pathlib.py:1053(read_text)
        1    0.000    0.000    0.025    0.025 warnings.py:117(_formatwarnmsg)
        1    0.000    0.000    0.025    0.025 warnings.py:35(_formatwarnmsg_impl)
        1    0.000    0.000    0.025    0.025 iterative.py:1(<module>)
        4    0.000    0.000    0.025    0.006 __init__.py:926(read_text)
     1111    0.004    0.000    0.025    0.000 typing.py:1336(__init__)
        1    0.000    0.000    0.025    0.025 _result.py:1(<module>)
       12    0.002    0.000    0.025    0.002 artist.py:1337(get_setters)
        1    0.000    0.000    0.025    0.025 expr_with_intlimits.py:1(<module>)
        1    0.000    0.000    0.025    0.025 _run.py:1(<module>)
        1    0.000    0.000    0.025    0.025 uuid.py:1(<module>)
        2    0.000    0.000    0.025    0.012 inverse.py:1(<module>)
        2    0.000    0.000    0.025    0.012 sysconfig.py:710(get_config_var)
      4/3    0.000    0.000    0.025    0.008 sysconfig.py:629(get_config_vars)
        5    0.000    0.000    0.024    0.005 polyhedron.py:34(__new__)
        1    0.000    0.000    0.024    0.024 _new_distributions.py:1(<module>)
        1    0.000    0.000    0.024    0.024 message.py:1(<module>)
        1    0.000    0.000    0.024    0.024 _lbfgsb_py.py:1(<module>)
        1    0.000    0.000    0.024    0.024 timeutils.py:1(<module>)
        1    0.000    0.000    0.024    0.024 art3d.py:1(<module>)
      426    0.001    0.000    0.024    0.000 units.py:153(__init__)
     1411    0.005    0.000    0.024    0.000 library.py:71(impl)
     6829    0.008    0.000    0.024    0.000 parameter.py:30(__new__)
        3    0.000    0.000    0.024    0.008 _distribution_infrastructure.py:1317(_combine_docs)
     3067    0.024    0.000    0.024    0.000 {method 'ne' of 'torch._C._TensorBase' objects}
       68    0.024    0.000    0.024    0.000 {built-in method io.open}
       43    0.000    0.000    0.024    0.001 dispatcher.py:147(_)
        1    0.000    0.000    0.023    0.023 lambdarepr.py:1(<module>)
        1    0.000    0.000    0.023    0.023 matpow.py:1(<module>)
      425    0.001    0.000    0.023    0.000 artist.py:1290(get_valid_values)
66430/66427    0.021    0.000    0.023    0.000 {method 'join' of 'str' objects}
        1    0.000    0.000    0.023    0.023 _lil.py:1(<module>)
        1    0.000    0.000    0.023    0.023 _directory_reader.py:1(<module>)
     1747    0.001    0.000    0.023    0.000 artist.py:1356(is_alias)
        1    0.000    0.000    0.023    0.023 _compressed.py:1(<module>)
    83520    0.019    0.000    0.023    0.000 {built-in method builtins.max}
     2137    0.002    0.000    0.023    0.000 _docscrape.py:573(dedent_lines)
        1    0.000    0.000    0.023    0.023 _decomp_lu.py:1(<module>)
        1    0.000    0.000    0.023    0.023 lines.py:1(<module>)
     6709    0.013    0.000    0.023    0.000 inspect.py:2676(__init__)
     3067    0.023    0.000    0.023    0.000 {method 'abs' of 'torch._C._TensorBase' objects}
        1    0.000    0.000    0.023    0.023 _distribution_infrastructure.py:1(<module>)
        1    0.000    0.000    0.023    0.023 subsets.py:1(<module>)
     2033    0.002    0.000    0.022    0.000 _tensor_str.py:195(_scalar_str)
      778    0.022    0.000    0.022    0.000 {built-in method torch._C._jit_get_operation}
        1    0.000    0.000    0.022    0.022 trf.py:1(<module>)
        1    0.000    0.000    0.022    0.022 sysconfig.py:527(_init_posix)
        1    0.000    0.000    0.022    0.022 coord.py:1(<module>)
      426    0.011    0.000    0.022    0.000 units.py:163(check_mappings)
        1    0.000    0.000    0.022    0.022 _replacement.py:1(<module>)
  583/432    0.000    0.000    0.022    0.000 typing.py:477(__getitem__)
        1    0.000    0.000    0.022    0.022 pathlib.py:1(<module>)
        1    0.000    0.000    0.022    0.022 axis.py:1(<module>)
       87    0.000    0.000    0.022    0.000 conflict.py:24(ambiguities)
       87    0.005    0.000    0.022    0.000 conflict.py:27(<setcomp>)
        1    0.000    0.000    0.022    0.022 _slsqp_py.py:1(<module>)
 9538/251    0.010    0.000    0.022    0.000 copy.py:128(deepcopy)
        1    0.000    0.000    0.021    0.021 annotations.py:1(<module>)
        1    0.000    0.000    0.021    0.021 _spectral_py.py:1(<module>)
        1    0.000    0.000    0.021    0.021 lie_group.py:1(<module>)
 2251/295    0.009    0.000    0.021    0.000 _compiler.py:37(_compile)
        1    0.000    0.000    0.021    0.021 lgmres.py:1(<module>)
        1    0.000    0.000    0.021    0.021 unix_events.py:1(<module>)
        1    0.000    0.000    0.021    0.021 ask.py:1(<module>)
     1034    0.021    0.000    0.021    0.000 {method 'tolist' of 'torch._C._TensorBase' objects}
        1    0.000    0.000    0.021    0.021 interpolative.py:1(<module>)
       87    0.001    0.000    0.021    0.000 conflict.py:56(ordering)
        1    0.000    0.000    0.021    0.021 api.py:1(<module>)
       35    0.000    0.000    0.021    0.001 core.py:59(_)
        1    0.000    0.000    0.021    0.021 contingency.py:1(<module>)
      481    0.013    0.000    0.021    0.000 doccer.py:225(indentcount_lines)
  502/251    0.003    0.000    0.021    0.000 copy.py:227(_deepcopy_dict)
        9    0.000    0.000    0.021    0.002 util.py:1(<module>)
        1    0.000    0.000    0.021    0.021 _invocation.py:1(<module>)
     3068    0.020    0.000    0.020    0.000 {method 'reshape' of 'torch._C._TensorBase' objects}
        1    0.000    0.000    0.020    0.020 _beartype.py:1(<module>)
        6    0.000    0.000    0.020    0.003 _jit_internal.py:928(_overload_method)
        2    0.000    0.000    0.020    0.010 function_base.py:1(<module>)
    18116    0.020    0.000    0.020    0.000 {method 'reduce' of 'numpy.ufunc' objects}
      131    0.001    0.000    0.020    0.000 _distn_infrastructure.py:749(_construct_argparser)
      431    0.002    0.000    0.020    0.000 typing.py:652(Union)
        1    0.000    0.000    0.020    0.020 trigonometric.py:1(<module>)
        1    0.000    0.000    0.019    0.019 fancy_getopt.py:1(<module>)
        1    0.000    0.000    0.019    0.019 pc_groups.py:1(<module>)
      130    0.001    0.000    0.019    0.000 dataclasses.py:530(_init_fn)
     9123    0.008    0.000    0.019    0.000 contextlib.py:141(__exit__)
        1    0.000    0.000    0.019    0.019 galoistools.py:1(<module>)
     6042    0.004    0.000    0.019    0.000 _ufunc_config.py:430(__enter__)
        1    0.000    0.000    0.019    0.019 lzma.py:1(<module>)
        1    0.000    0.000    0.019    0.019 relational.py:1(<module>)
        1    0.000    0.000    0.019    0.019 rnn.py:340(RNN)
     9123    0.006    0.000    0.019    0.000 contextlib.py:284(helper)
        1    0.000    0.000    0.018    0.018 tags.py:1(<module>)
        1    0.000    0.000    0.018    0.018 base64.py:1(<module>)
    21317    0.013    0.000    0.018    0.000 <frozen importlib._bootstrap_external>:128(<listcomp>)
        2    0.000    0.000    0.018    0.009 _aliases.py:1(<module>)
       12    0.000    0.000    0.018    0.002 artist.py:1242(__init__)
        1    0.000    0.000    0.018    0.018 rk.py:1(<module>)
     3067    0.012    0.000    0.018    0.000 _tensor_str.py:331(_add_suffixes)
        1    0.000    0.000    0.018    0.018 _ccallback.py:1(<module>)
       12    0.001    0.000    0.018    0.001 artist.py:1262(get_aliases)
        1    0.000    0.000    0.018    0.018 discovery.py:1(<module>)
     6042    0.004    0.000    0.018    0.000 _ufunc_config.py:435(__exit__)
      121    0.001    0.000    0.018    0.000 __init__.py:259(_make_prim)
        1    0.000    0.000    0.018    0.018 residue_ntheory.py:1(<module>)
        1    0.000    0.000    0.018    0.018 reduction.py:1(<module>)
        1    0.000    0.000    0.018    0.018 _entropy.py:1(<module>)
        1    0.000    0.000    0.018    0.018 _support_alternative_backends.py:294(<dictcomp>)
       23    0.000    0.000    0.017    0.001 _support_alternative_backends.py:46(wrapper)
        2    0.000    0.000    0.017    0.009 modules.py:1(<module>)
        1    0.000    0.000    0.017    0.017 vq.py:1(<module>)
        2    0.000    0.000    0.017    0.009 polynomial.py:1(<module>)
        1    0.000    0.000    0.017    0.017 _zeros_py.py:1(<module>)
      251    0.001    0.000    0.017    0.000 _docscrape.py:366(_parse_summary)
        6    0.000    0.000    0.017    0.003 _docscrape.py:626(__init__)
        1    0.000    0.000    0.017    0.017 intersection.py:1(<module>)
        1    0.000    0.000    0.017    0.017 _odepack_py.py:1(<module>)
       87    0.002    0.000    0.016    0.000 conflict.py:62(<listcomp>)
        5    0.000    0.000    0.016    0.003 polyhedron.py:388(<listcomp>)
       50    0.000    0.000    0.016    0.000 iterables.py:2618(minlex)
    86717    0.016    0.000    0.016    0.000 {method 'dim' of 'torch._C._TensorBase' objects}
        1    0.000    0.000    0.016    0.016 adadelta.py:1(<module>)
     6829    0.016    0.000    0.016    0.000 {built-in method _make_subclass}
        1    0.000    0.000    0.016    0.016 headerregistry.py:1(<module>)
     4862    0.010    0.000    0.016    0.000 <frozen importlib._bootstrap>:179(_get_module_lock)
        1    0.000    0.000    0.016    0.016 exp_family.py:1(<module>)
        1    0.000    0.000    0.016    0.016 type_check.py:1(<module>)
        1    0.000    0.000    0.016    0.016 libhyper.py:1(<module>)
      232    0.001    0.000    0.016    0.000 function.py:164(__init__)
        1    0.000    0.000    0.015    0.015 _rgi.py:1(<module>)
        1    0.000    0.000    0.015    0.015 _upfirdn.py:1(<module>)
     6043    0.015    0.000    0.015    0.000 {method 'sub' of 're.Pattern' objects}
        9    0.000    0.000    0.015    0.002 exceptions.py:1(<module>)
        1    0.000    0.000    0.015    0.015 _compat.py:1(<module>)
     6176    0.002    0.000    0.015    0.000 conflict.py:19(ambiguous)
        1    0.000    0.000    0.015    0.015 smtlib.py:1(<module>)
      245    0.001    0.000    0.015    0.000 _docscrape.py:599(__str__)
        1    0.000    0.000    0.015    0.015 ssl.py:1(<module>)
        1    0.000    0.000    0.015    0.015 _reqs.py:1(<module>)
     3197    0.009    0.000    0.015    0.000 functools.py:35(update_wrapper)
     3146    0.010    0.000    0.015    0.000 inspect.py:2962(__init__)
        1    0.000    0.000    0.015    0.015 actions.py:1(<module>)
        2    0.000    0.000    0.015    0.007 main.py:1(<module>)
        1    0.000    0.000    0.015    0.015 _tnc.py:1(<module>)
     1411    0.015    0.000    0.015    0.000 {built-in method torch._C.impl}
     2700    0.014    0.000    0.014    0.000 {method 'findall' of 're.Pattern' objects}
        1    0.000    0.000    0.014    0.014 _mstats_basic.py:1(<module>)
    89467    0.014    0.000    0.014    0.000 {method 'startswith' of 'str' objects}
      524    0.000    0.000    0.014    0.000 __init__.py:173(search)
        1    0.000    0.000    0.014    0.014 twodim_base.py:1(<module>)
       21    0.000    0.000    0.014    0.001 _distn_infrastructure.py:3319(__init__)
       34    0.010    0.000    0.014    0.000 para4tb.py:121(<listcomp>)
    13223    0.003    0.000    0.014    0.000 conflict.py:43(edge)
        1    0.000    0.000    0.014    0.014 composer.py:1(<module>)
        1    0.000    0.000    0.014    0.014 loss.py:1(<module>)
        1    0.000    0.000    0.014    0.014 _package_pickler.py:1(<module>)
        1    0.000    0.000    0.014    0.014 _graph.py:1(<module>)
        1    0.000    0.000    0.014    0.014 legend.py:1(<module>)
     2324    0.003    0.000    0.014    0.000 <frozen importlib._bootstrap_external>:1599(_get_spec)
        2    0.000    0.000    0.014    0.007 fuse_modules.py:1(<module>)
        1    0.000    0.000    0.013    0.013 result.py:1(<module>)
      248    0.002    0.000    0.013    0.000 _docscrape.py:548(__str__)
        1    0.000    0.000    0.013    0.013 chi2.py:1(<module>)
        1    0.000    0.000    0.013    0.013 _fftlog.py:1(<module>)
     2163    0.002    0.000    0.013    0.000 <frozen importlib._bootstrap_external>:1146(path_stats)
      367    0.001    0.000    0.013    0.000 permutations.py:1628(__call__)
        1    0.000    0.000    0.013    0.013 compat.py:1(<module>)
      131    0.000    0.000    0.013    0.000 _distn_infrastructure.py:735(_attach_argparser_methods)
     1465    0.012    0.000    0.013    0.000 _ops.py:239(__init__)
        1    0.000    0.000    0.013    0.013 _gauss_kronrod.py:1(<module>)
        1    0.000    0.000    0.013    0.013 libmpf.py:1(<module>)
     4326    0.006    0.000    0.013    0.000 <frozen importlib._bootstrap_external>:132(_path_split)
        2    0.000    0.000    0.013    0.006 spawn.py:1(<module>)
      110    0.001    0.000    0.013    0.000 _distn_infrastructure.py:1923(_attach_methods)
      232    0.001    0.000    0.013    0.000 function.py:124(arity)
        1    0.000    0.000    0.013    0.013 visualization.py:1(<module>)
      213    0.000    0.000    0.012    0.000 units.py:318(__new__)
        1    0.000    0.000    0.012    0.012 field.py:1(<module>)
      213    0.000    0.000    0.012    0.000 units.py:299(__init__)
     2195    0.002    0.000    0.012    0.000 <frozen importlib._bootstrap>:216(_lock_unlock_module)
      142    0.005    0.000    0.012    0.000 __init__.py:348(namedtuple)
        1    0.000    0.000    0.012    0.012 _reporting_descriptor.py:1(<module>)
        1    0.000    0.000    0.012    0.012 trigsimp.py:1(<module>)
     1456    0.001    0.000    0.012    0.000 _docscrape.py:85(read_to_next_unindented_line)
     9123    0.010    0.000    0.012    0.000 contextlib.py:104(__init__)
     6176    0.006    0.000    0.012    0.000 conflict.py:12(consistent)
    71960    0.010    0.000    0.012    0.000 {built-in method builtins.min}
        1    0.000    0.000    0.012    0.012 _notification.py:1(<module>)
        1    0.000    0.000    0.012    0.012 bonds.py:1(<module>)
        1    0.012    0.012    0.012    0.012 {built-in method torch.max}
        1    0.000    0.000    0.012    0.012 bonds.py:21(_load_bond_length_data)
        1    0.000    0.000    0.012    0.012 rl.py:1(<module>)
     1241    0.001    0.000    0.012    0.000 __init__.py:655(__setitem__)
        1    0.000    0.000    0.012    0.012 reader.py:1(<module>)
        1    0.000    0.000    0.012    0.012 _artifact_content.py:1(<module>)
     3879    0.003    0.000    0.012    0.000 <frozen importlib._bootstrap_external>:1421(_path_importer_cache)
        1    0.000    0.000    0.012    0.012 _rbfinterp.py:1(<module>)
        1    0.000    0.000    0.012    0.012 _text.py:1(<module>)
       26    0.001    0.000    0.012    0.000 inspect.py:1232(getblock)
       55    0.000    0.000    0.012    0.000 __init__.py:388(inner)
        1    0.000    0.000    0.012    0.012 heapq.py:1(<module>)
    15804    0.008    0.000    0.012    0.000 conflict.py:7(supercedes)
       35    0.000    0.000    0.012    0.000 adam.py:14(__init__)
     2221    0.011    0.000    0.012    0.000 {method '__exit__' of '_io._IOBase' objects}
     2245    0.005    0.000    0.011    0.000 typing.py:168(_type_check)
        1    0.000    0.000    0.011    0.011 _ni_docstrings.py:1(<module>)
       35    0.001    0.000    0.011    0.000 optimizer.py:169(__init__)
        1    0.000    0.000    0.011    0.011 afm.py:1(<module>)
        1    0.000    0.000    0.011    0.011 _axes.py:71(Axes)
        1    0.000    0.000    0.011    0.011 more.py:1(<module>)
        1    0.000    0.000    0.011    0.011 meta_utils.py:1(<module>)
        1    0.000    0.000    0.011    0.011 trf_linear.py:1(<module>)
        1    0.000    0.000    0.011    0.011 _normalization.py:1(<module>)
      131    0.000    0.000    0.011    0.000 _distn_infrastructure.py:683(__init__)
    12084    0.010    0.000    0.011    0.000 _ufunc_config.py:132(geterr)
     1503    0.003    0.000    0.011    0.000 tokenize.py:433(_tokenize)
    19254    0.006    0.000    0.011    0.000 _parser.py:252(get)
     2038    0.011    0.000    0.011    0.000 {built-in method torch._C._dispatch_has_kernel_for_dispatch_key}
     6134    0.009    0.000    0.011    0.000 _python_dispatch.py:86(_disable_current_modes)
        1    0.000    0.000    0.010    0.010 distribution.py:1(<module>)
        1    0.000    0.000    0.010    0.010 nvfuser_prims.py:806(register_nvprims)
     8262    0.005    0.000    0.010    0.000 typing.py:1280(__setattr__)
      100    0.002    0.000    0.010    0.000 iterables.py:1165(least_rotation)
    34455    0.008    0.000    0.010    0.000 _docscrape.py:64(eof)
      222    0.002    0.000    0.010    0.000 wrappers.py:191(_out_wrapper)
        1    0.000    0.000    0.010    0.010 pythonmpq.py:1(<module>)
        1    0.000    0.000    0.010    0.010 polyoptions.py:1(<module>)
      129    0.000    0.000    0.010    0.000 dataclasses.py:589(_repr_fn)
        1    0.000    0.000    0.010    0.010 lowrank_multivariate_normal.py:1(<module>)
     3310    0.002    0.000    0.010    0.000 __init__.py:178(sub)
        1    0.000    0.000    0.010    0.010 onnx_proto_utils.py:1(<module>)
     4380    0.010    0.000    0.010    0.000 {built-in method torch._C._log_api_usage_once}
        6    0.000    0.000    0.010    0.002 _typing.py:1(<module>)
     1465    0.010    0.000    0.010    0.000 {built-in method torch._C._get_operation_overload}
       36    0.000    0.000    0.010    0.000 __init__.py:893(inner)
       56    0.000    0.000    0.010    0.000 __init__.py:770(_open_file_or_url)
       11    0.000    0.000    0.010    0.001 __init__.py:10(partialclass)
        1    0.000    0.000    0.010    0.010 _direct_py.py:1(<module>)
        1    0.000    0.000    0.010    0.010 mod.py:1(<module>)
     8189    0.007    0.000    0.010    0.000 _docscrape.py:57(seek_next_non_empty_line)
      403    0.001    0.000    0.009    0.000 <frozen abc>:105(__new__)
      292    0.001    0.000    0.009    0.000 <frozen importlib._bootstrap_external>:1655(_fill_cache)
     2324    0.006    0.000    0.009    0.000 <frozen importlib._bootstrap_external>:778(spec_from_file_location)
    95906    0.009    0.000    0.009    0.000 {method 'lstrip' of 'str' objects}
      191    0.007    0.000    0.009    0.000 {built-in method builtins.eval}
      128    0.000    0.000    0.009    0.000 dataclasses.py:625(_cmp_fn)
        1    0.000    0.000    0.009    0.009 _decomp.py:1(<module>)
      292    0.001    0.000    0.009    0.000 <frozen importlib._bootstrap_external>:1408(_path_hooks)
        1    0.000    0.000    0.009    0.009 _validation.py:1(<module>)
      300    0.009    0.000    0.009    0.000 {built-in method posix.listdir}
2659/2614    0.002    0.000    0.009    0.000 {built-in method builtins.any}
     7323    0.006    0.000    0.009    0.000 enum.py:669(__call__)
        1    0.000    0.000    0.009    0.009 _reporting_descriptor_reference.py:1(<module>)
       23    0.008    0.000    0.009    0.000 {method 'readlines' of '_io._IOBase' objects}
      393    0.001    0.000    0.009    0.000 typing.py:1539(copy_with)
        1    0.008    0.008    0.009    0.009 para4tb.py:55(__get_values_and_index)
      465    0.001    0.000    0.009    0.000 permutations.py:902(__new__)
     4862    0.007    0.000    0.009    0.000 <frozen importlib._bootstrap>:125(release)
        1    0.000    0.000    0.009    0.009 io.py:1(<module>)
      257    0.001    0.000    0.008    0.000 typing.py:1530(__getitem__)
      325    0.000    0.000    0.008    0.000 function_base.py:497(add_newdoc)
      189    0.000    0.000    0.008    0.000 library.py:50(define)
        2    0.000    0.000    0.008    0.004 _add_newdocs.py:1(<module>)
       21    0.001    0.000    0.008    0.000 para4band.py:294(<listcomp>)
        1    0.000    0.000    0.008    0.008 _symbolic_trace.py:1(<module>)
      965    0.002    0.000    0.008    0.000 typing_extensions.py:3177(_collect_parameters)
      189    0.008    0.000    0.008    0.000 {built-in method torch._C.define}
        1    0.000    0.000    0.008    0.008 hyperexpand.py:1(<module>)
    12610    0.008    0.000    0.008    0.000 {method 'expandtabs' of 'str' objects}
       70    0.001    0.000    0.008    0.000 __init__.py:1364(_preprocess_data)
        1    0.000    0.000    0.008    0.008 font_manager.py:1004(json_load)
        1    0.000    0.000    0.008    0.008 _resampling.py:1(<module>)
      151    0.000    0.000    0.008    0.000 typing.py:692(Optional)
       97    0.001    0.000    0.008    0.000 __init__.py:427(_make_inplace)
     3067    0.004    0.000    0.008    0.000 forward_ad.py:114(unpack_dual)
       93    0.000    0.000    0.007    0.000 pydoc.py:186(getdoc)
     2667    0.002    0.000    0.007    0.000 <frozen importlib._bootstrap>:173(__exit__)
     2163    0.004    0.000    0.007    0.000 <frozen importlib._bootstrap_external>:642(_classify_pyc)
        1    0.000    0.000    0.007    0.007 patches.py:1(<module>)
     1318    0.003    0.000    0.007    0.000 enum.py:352(__setitem__)
    10171    0.005    0.000    0.007    0.000 _docscrape.py:91(peek)
        1    0.000    0.000    0.007    0.007 specifiers.py:1(<module>)
     9689    0.007    0.000    0.007    0.000 {method 'splitlines' of 'str' objects}
        1    0.000    0.000    0.007    0.007 common.py:8(pyparsing_common)
   112/79    0.000    0.000    0.007    0.000 <frozen importlib._bootstrap_external>:1311(__iter__)
     2232    0.004    0.000    0.007    0.000 _docscrape.py:475(_str_param_list)
        1    0.000    0.000    0.007    0.007 facts.py:1(<module>)
   164/92    0.000    0.000    0.007    0.000 <frozen importlib._bootstrap_external>:1297(_recalculate)
1062/1021    0.003    0.000    0.007    0.000 sorting.py:10(default_sort_key)
       41    0.001    0.000    0.007    0.000 typing.py:2817(__new__)
        2    0.000    0.000    0.007    0.004 operations.py:1(<module>)
        1    0.000    0.000    0.007    0.007 _memory_profiler.py:1(<module>)
    11173    0.007    0.000    0.007    0.000 module.py:1618(remove_from)
      748    0.003    0.000    0.007    0.000 dataclasses.py:724(_get_field)
    21761    0.005    0.000    0.007    0.000 _docscrape.py:80(is_empty)
     1115    0.001    0.000    0.007    0.000 typing.py:1241(__init__)
       93    0.000    0.000    0.007    0.000 pydoc.py:170(_getdoc)
        1    0.000    0.000    0.007    0.007 _isotonic.py:1(<module>)
    12048    0.004    0.000    0.007    0.000 _ufunc_config.py:452(_no_nep50_warning)
        1    0.000    0.000    0.007    0.007 union.py:1(<module>)
       47    0.000    0.000    0.007    0.000 __init__.py:424(_make_elementwise_unary_prim)
        1    0.000    0.000    0.007    0.007 specifiers.py:99(Specifier)
        1    0.000    0.000    0.007    0.007 dir_util.py:1(<module>)
        1    0.000    0.000    0.007    0.007 _builtins.py:1(<module>)
        1    0.000    0.000    0.007    0.007 ExifTags.py:1(<module>)
      665    0.005    0.000    0.007    0.000 _compiler.py:241(_optimize_charset)
     2603    0.004    0.000    0.007    0.000 inspect.py:735(unwrap)
        2    0.000    0.000    0.007    0.003 fft.py:1(<module>)
  515/173    0.001    0.000    0.006    0.000 sorting.py:202(ordered)
        3    0.000    0.000    0.006    0.002 _distribution_infrastructure.py:1368(_generate_example)
        1    0.000    0.000    0.006    0.006 routeddecoder.py:1(<module>)
    66802    0.006    0.000    0.006    0.000 {method 'strip' of 'str' objects}
     9305    0.004    0.000    0.006    0.000 typing.py:1229(_is_dunder)
    28116    0.005    0.000    0.006    0.000 units.py:166(<genexpr>)
        1    0.000    0.000    0.006    0.006 pythonfinitefield.py:1(<module>)
       21    0.000    0.000    0.006    0.000 _distn_infrastructure.py:3380(_construct_docstrings)
    18109    0.006    0.000    0.006    0.000 fromnumeric.py:72(<dictcomp>)
        2    0.000    0.000    0.006    0.003 decoder.py:1(<module>)
     5726    0.004    0.000    0.006    0.000 _docscrape.py:86(is_unindented)
    14840    0.004    0.000    0.006    0.000 _parser.py:162(__getitem__)
    12544    0.006    0.000    0.006    0.000 {built-in method builtins.abs}
     2590    0.001    0.000    0.006    0.000 module.py:2059(parameters)
      459    0.001    0.000    0.006    0.000 permutations.py:354(list)
        5    0.000    0.000    0.006    0.001 sets.py:1982(__new__)
        1    0.000    0.000    0.006    0.006 _codata.py:1(<module>)
        1    0.000    0.000    0.006    0.006 tokenize.py:99(_compile)
    67965    0.006    0.000    0.006    0.000 {method 'items' of 'dict' objects}
       44    0.000    0.000    0.006    0.000 typing.py:2797(_make_nmtuple)
    22106    0.006    0.000    0.006    0.000 _parser.py:231(__next)
     6489    0.004    0.000    0.006    0.000 <frozen importlib._bootstrap_external>:84(_unpack_uint32)
        1    0.000    0.000    0.006    0.006 worker.py:1(<module>)
        1    0.000    0.000    0.006    0.006 struct.py:1(<module>)
     1298    0.006    0.000    0.006    0.000 {built-in method torch._C._dispatch_has_kernel}
     2163    0.003    0.000    0.006    0.000 <frozen importlib._bootstrap_external>:675(_validate_timestamp_pyc)
    53199    0.006    0.000    0.006    0.000 {method 'rstrip' of 'str' objects}
      317    0.001    0.000    0.006    0.000 overrides.py:142(decorator)
        2    0.000    0.000    0.006    0.003 error.py:1(<module>)
      706    0.002    0.000    0.005    0.000 inspect.py:2042(_signature_bound_method)
    30618    0.005    0.000    0.005    0.000 _docscrape.py:43(__getitem__)
     2590    0.001    0.000    0.005    0.000 module.py:2084(named_parameters)
     1034    0.005    0.000    0.005    0.000 {built-in method torch.transpose}
        1    0.000    0.000    0.005    0.005 _docscrape.py:1(<module>)
        1    0.000    0.000    0.005    0.005 monkey.py:72(patch_all)
    30632    0.005    0.000    0.005    0.000 assumptions.py:489(as_property)
        1    0.000    0.000    0.005    0.005 monkey.py:93(_patch_distribution_metadata)
 2638/706    0.004    0.000    0.005    0.000 _parser.py:172(getwidth)
      295    0.001    0.000    0.005    0.000 _compiler.py:509(_compile_info)
       13    0.000    0.000    0.005    0.000 para4band.py:307(<listcomp>)
      136    0.000    0.000    0.005    0.000 typing.py:1614(__getitem__)
        1    0.000    0.000    0.005    0.005 mstats.py:1(<module>)
        1    0.000    0.000    0.005    0.005 comparison.py:1(<module>)
    21721    0.005    0.000    0.005    0.000 <frozen importlib._bootstrap>:244(_verbose_message)
      472    0.001    0.000    0.005    0.000 assumptions.py:469(__init__)
     1034    0.003    0.000    0.005    0.000 _tensor_str.py:243(<listcomp>)
      292    0.001    0.000    0.005    0.000 <frozen importlib._bootstrap_external>:1696(path_hook_for_FileFinder)
        1    0.000    0.000    0.005    0.005 _hypotests.py:1(<module>)
      459    0.001    0.000    0.005    0.000 permutations.py:385(<listcomp>)
      901    0.001    0.000    0.005    0.000 inspect.py:3032(replace)
        1    0.000    0.000    0.005    0.005 cm.py:53(_gen_cmap_registry)
3977/3797    0.003    0.000    0.005    0.000 sympify.py:124(sympify)
     7790    0.003    0.000    0.005    0.000 <frozen importlib._bootstrap>:405(parent)
      700    0.001    0.000    0.005    0.000 colors.py:161(to_rgba)
      134    0.000    0.000    0.005    0.000 wrappers.py:105(__call__)
        1    0.000    0.000    0.005    0.005 _numdiff.py:1(<module>)
     1644    0.002    0.000    0.005    0.000 dataclasses.py:665(_is_type)
     1477    0.001    0.000    0.005    0.000 typing.py:684(<genexpr>)
     3633    0.001    0.000    0.005    0.000 <frozen abc>:117(__instancecheck__)
        1    0.000    0.000    0.005    0.005 colors.py:1(<module>)
       81    0.000    0.000    0.005    0.000 docstring.py:77(dedent_interpd)
     2590    0.002    0.000    0.005    0.000 module.py:2045(_named_members)
    93/40    0.000    0.000    0.005    0.000 typing.py:1363(__getitem__)
        1    0.000    0.000    0.005    0.005 wavfile.py:1(<module>)
       68    0.000    0.000    0.004    0.000 _internal.py:31(inner)
       29    0.000    0.000    0.004    0.000 __init__.py:439(_make_elementwise_binary_prim)
       97    0.000    0.000    0.004    0.000 _array_api.py:733(_make_capabilities_note)
     2520    0.002    0.000    0.004    0.000 module.py:799(compute_should_use_set_data)
     2492    0.002    0.000    0.004    0.000 <frozen importlib._bootstrap>:922(find_spec)
     2005    0.003    0.000    0.004    0.000 inspect.py:167(get_annotations)
       17    0.000    0.000    0.004    0.000 rcsetup.py:928(validate_cycler)
    13536    0.003    0.000    0.004    0.000 conflict.py:15(<genexpr>)
     6077    0.004    0.000    0.004    0.000 {method 'match' of 're.Pattern' objects}
  580/530    0.001    0.000    0.004    0.000 containers.py:54(__new__)
        1    0.000    0.000    0.004    0.004 mathtext.py:2275(Parser)
    19564    0.004    0.000    0.004    0.000 {method 'rpartition' of 'str' objects}
       13    0.000    0.000    0.004    0.000 enum.py:874(_convert_)
       14    0.000    0.000    0.004    0.000 inspect.py:592(getmembers)
        1    0.000    0.000    0.004    0.004 mathtext.py:2845(<lambda>)
        1    0.000    0.000    0.004    0.004 mathtext.py:2845(<listcomp>)
        1    0.000    0.000    0.004    0.004 polyroots.py:1(<module>)
     9982    0.003    0.000    0.004    0.000 <frozen importlib._bootstrap>:1032(__exit__)
      428    0.000    0.000    0.004    0.000 rcsetup.py:360(validate_color)
     2597    0.003    0.000    0.004    0.000 <frozen importlib._bootstrap>:198(cb)
       14    0.002    0.000    0.004    0.000 inspect.py:550(_getmembers)
      131    0.002    0.000    0.004    0.000 facts.py:599(deduce_all_facts)
      459    0.001    0.000    0.004    0.000 permutations.py:433(__init__)
       11    0.000    0.000    0.004    0.000 core.py:1152(parse_string)
41415/39575    0.004    0.000    0.004    0.000 {built-in method builtins.hash}
      160    0.002    0.000    0.004    0.000 _docscrape.py:290(_parse_see_also)
     1467    0.004    0.000    0.004    0.000 {built-in method numpy.array}
       20    0.002    0.000    0.004    0.000 enum.py:1625(convert_class)
     2597    0.002    0.000    0.004    0.000 <frozen importlib._bootstrap>:71(__init__)
        1    0.000    0.000    0.004    0.004 _decomp_svd.py:1(<module>)
        1    0.000    0.000    0.004    0.004 animation.py:1(<module>)
       35    0.002    0.000    0.004    0.000 optimizer.py:489(add_param_group)
      905    0.001    0.000    0.004    0.000 {built-in method builtins.sorted}
        1    0.000    0.000    0.004    0.004 helpers.py:1(<module>)
        1    0.000    0.000    0.004    0.004 _solvers.py:1(<module>)
       36    0.000    0.000    0.004    0.000 __init__.py:1329(_add_data_doc)
        1    0.000    0.000    0.004    0.004 platform.py:1(<module>)
       64    0.000    0.000    0.004    0.000 core.py:1449(__add__)
     1602    0.001    0.000    0.004    0.000 __init__.py:163(match)
        1    0.000    0.000    0.004    0.004 _differentialevolution.py:1(<module>)
     8132    0.004    0.000    0.004    0.000 {method 'replace' of 'str' objects}
        2    0.000    0.000    0.004    0.002 _globals.py:1(<module>)
        1    0.000    0.000    0.004    0.004 _stack.py:1(<module>)
  628/550    0.001    0.000    0.004    0.000 _pytree.py:143(tree_flatten)
        8    0.000    0.000    0.004    0.000 core.py:5842(__init__)
     3633    0.001    0.000    0.004    0.000 {built-in method _abc._abc_instancecheck}
     1048    0.003    0.000    0.004    0.000 _ops.py:314(inner)
       32    0.001    0.000    0.004    0.000 colors.py:776(from_list)
     8652    0.003    0.000    0.004    0.000 <frozen importlib._bootstrap_external>:134(<genexpr>)
     28/7    0.000    0.000    0.004    0.001 core.py:4715(leave_whitespace)
       65    0.000    0.000    0.004    0.000 core.py:4081(__init__)
 2209/389    0.000    0.000    0.004    0.000 <frozen abc>:121(__subclasscheck__)
     9982    0.003    0.000    0.004    0.000 <frozen importlib._bootstrap>:1028(__enter__)
     8288    0.003    0.000    0.004    0.000 inspect.py:3011(<genexpr>)
     3067    0.004    0.000    0.004    0.000 {built-in method torch._C._functorch.is_functorch_wrapped_tensor}
        1    0.001    0.001    0.004    0.004 symbolic_opset9.py:1(<module>)
        1    0.000    0.000    0.004    0.004 _methods.py:1(<module>)
    58/39    0.000    0.000    0.004    0.000 functools.py:981(__get__)
       45    0.000    0.000    0.004    0.000 core.py:3146(mayReturnEmpty)
 2209/389    0.003    0.000    0.004    0.000 {built-in method _abc._abc_subclasscheck}
      138    0.000    0.000    0.004    0.000 rcsetup.py:87(f)
      426    0.000    0.000    0.004    0.000 colors.py:129(is_color_like)
        1    0.000    0.000    0.004    0.004 _array_like.py:1(<module>)
     2015    0.001    0.000    0.004    0.000 containers.py:60(__getitem__)
    38/19    0.000    0.000    0.004    0.000 core.py:3119(re)
        4    0.002    0.001    0.004    0.001 _codata.py:1993(parse_constants_2002to2014)
     4952    0.001    0.000    0.003    0.000 permutations.py:320(__missing__)
       42    0.000    0.000    0.003    0.000 doccer.py:283(decorate)
     2568    0.001    0.000    0.003    0.000 typing.py:159(_type_convert)
     7652    0.003    0.000    0.003    0.000 {method 'rfind' of 'str' objects}
      278    0.001    0.000    0.003    0.000 overrides.py:83(verify_matching_signatures)
      436    0.000    0.000    0.003    0.000 core.py:526(copy)
      401    0.000    0.000    0.003    0.000 _parser.py:94(closegroup)
      786    0.001    0.000    0.003    0.000 _builtins.py:161(_register_builtin)
       87    0.000    0.000    0.003    0.000 typing.py:483(__getitem__)
        1    0.000    0.000    0.003    0.003 ops.py:205(add_arithmetic_ops)
      370    0.001    0.000    0.003    0.000 colors.py:197(_to_rgba_no_colorcycle)
    10713    0.002    0.000    0.003    0.000 mathtext.py:2847(<genexpr>)
    12085    0.003    0.000    0.003    0.000 {built-in method numpy.seterrobj}
        1    0.000    0.000    0.003    0.003 pretty_symbology.py:1(<module>)
      213    0.003    0.000    0.003    0.000 {built-in method builtins.compile}
      140    0.001    0.000    0.003    0.000 deprecation.py:168(deprecate)
        3    0.000    0.000    0.003    0.001 __init__.py:958(distribution)
       18    0.000    0.000    0.003    0.000 ops.py:348(_wrap)
        3    0.000    0.000    0.003    0.001 __init__.py:545(from_name)
      129    0.000    0.000    0.003    0.000 typing.py:1585(__getitem__)
        1    0.000    0.000    0.003    0.003 _qmvnt.py:1(<module>)
     6266    0.002    0.000    0.003    0.000 misc.py:500(as_int)
       22    0.000    0.000    0.003    0.000 inspect.py:1344(getfullargspec)
   260/11    0.001    0.000    0.003    0.000 core.py:813(_parseNoCache)
        1    0.000    0.000    0.003    0.003 _construct.py:1(<module>)
        1    0.000    0.000    0.003    0.003 binary.py:1(<module>)
     1513    0.001    0.000    0.003    0.000 sympify.py:514(_sympify)
    20723    0.003    0.000    0.003    0.000 {method 'get' of 'mappingproxy' objects}
    63/11    0.000    0.000    0.003    0.000 core.py:4172(parseImpl)
     3514    0.002    0.000    0.003    0.000 copy.py:201(_deepcopy_list)
       71    0.000    0.000    0.003    0.000 typing.py:701(Literal)
        2    0.000    0.000    0.003    0.002 deprecation.py:208(_inner_deprecate_positional_args)
        2    0.000    0.000    0.003    0.002 polyutils.py:1(<module>)
       18    0.000    0.000    0.003    0.000 rcsetup.py:437(validate_font_properties)
        6    0.000    0.000    0.003    0.001 _docscrape.py:680(methods)
       16    0.000    0.000    0.003    0.000 util.py:412(_inner)
        9    0.000    0.000    0.003    0.000 fontconfig_pattern.py:119(parse)
       15    0.000    0.000    0.003    0.000 _bunch.py:32(_make_tuple_bunch)
2950/2720    0.001    0.000    0.003    0.000 containers.py:56(<genexpr>)
        1    0.000    0.000    0.003    0.003 _plotutils.py:1(<module>)
        3    0.000    0.000    0.003    0.001 ctx_mp.py:63(__init__)
      292    0.001    0.000    0.003    0.000 <frozen zipimport>:64(__init__)
        1    0.000    0.000    0.003    0.003 _pep440.py:1(<module>)
        1    0.000    0.000    0.003    0.003 clip_grad.py:1(<module>)
        1    0.000    0.000    0.003    0.003 radsimp.py:1(<module>)
      436    0.001    0.000    0.003    0.000 copy.py:66(copy)
        1    0.000    0.000    0.003    0.003 configparser.py:1(<module>)
        1    0.000    0.000    0.003    0.003 rootoftools.py:1(<module>)
       21    0.000    0.000    0.003    0.000 __init__.py:910(<genexpr>)
     59/7    0.000    0.000    0.003    0.000 core.py:3923(leave_whitespace)
        1    0.000    0.000    0.003    0.003 _complex.py:1(<module>)
      100    0.000    0.000    0.003    0.000 iterables.py:1127(rotate_left)
        1    0.000    0.000    0.003    0.003 polynomialring.py:1(<module>)
      239    0.000    0.000    0.003    0.000 rcsetup.py:353(validate_color_for_prop_cycle)
       64    0.000    0.000    0.003    0.000 rcsetup.py:106(<listcomp>)
       18    0.000    0.000    0.003    0.000 __init__.py:808(search)
        1    0.000    0.000    0.003    0.003 hyper.py:1(<module>)
       87    0.001    0.000    0.003    0.000 utils.py:25(_toposort)
   127/59    0.000    0.000    0.003    0.000 core.py:4015(copy)
      544    0.000    0.000    0.003    0.000 registration.py:296(wrapper)
        1    0.000    0.000    0.003    0.003 diophantine.py:1(<module>)
        1    0.000    0.000    0.003    0.003 _configuration_override.py:1(<module>)
        1    0.000    0.000    0.003    0.003 storage.py:1(<module>)
     4016    0.002    0.000    0.003    0.000 copy.py:243(_keep_alive)
        1    0.000    0.000    0.003    0.003 hyperbolic.py:1(<module>)
        1    0.000    0.000    0.003    0.003 _info.py:1(<module>)
        1    0.000    0.000    0.003    0.003 boolalg.py:1(<module>)
        2    0.000    0.000    0.003    0.001 _pytree.py:1(<module>)
       12    0.000    0.000    0.003    0.000 dataclasses.py:600(_frozen_get_del_attr)
     1465    0.003    0.000    0.003    0.000 {built-in method torch._C._get_schema}
        1    0.000    0.000    0.003    0.003 message.py:135(Message)
        1    0.000    0.000    0.003    0.003 socket.py:1(<module>)
     3067    0.003    0.000    0.003    0.000 {built-in method torch._C._get_default_device}
        1    0.000    0.000    0.003    0.003 assume.py:1(<module>)
    93/40    0.000    0.000    0.003    0.000 typing.py:1395(_determine_new_args)
        1    0.000    0.000    0.003    0.003 table.py:1(<module>)
      101    0.000    0.000    0.003    0.000 _meta_registrations.py:33(wrapper)
      292    0.001    0.000    0.003    0.000 <frozen importlib._bootstrap_external>:1559(__init__)
       74    0.000    0.000    0.003    0.000 typing.py:1599(__getitem_inner__)
        1    0.000    0.000    0.003    0.003 _decomp_schur.py:1(<module>)
        1    0.000    0.000    0.003    0.003 _fit.py:1(<module>)
      291    0.000    0.000    0.003    0.000 <frozen codecs>:319(decode)
    18215    0.003    0.000    0.003    0.000 {built-in method numpy.asanyarray}
        1    0.000    0.000    0.003    0.003 _stats_mstats_common.py:1(<module>)
       64    0.000    0.000    0.003    0.000 util.py:401(replaced_by_pep8)
     2163    0.003    0.000    0.003    0.000 {built-in method _imp._fix_co_filename}
    12936    0.002    0.000    0.003    0.000 {method 'add' of 'set' objects}
    24170    0.003    0.000    0.003    0.000 {built-in method numpy.geterrobj}
       69    0.003    0.000    0.003    0.000 {built-in method builtins.dir}
       16    0.000    0.000    0.003    0.000 inspect.py:2311(_signature_from_builtin)
        1    0.000    0.000    0.003    0.003 structure.py:5581(<dictcomp>)
      140    0.000    0.000    0.003    0.000 core.py:4109(<genexpr>)
        1    0.000    0.000    0.003    0.003 _logsumexp.py:1(<module>)
       16    0.000    0.000    0.003    0.000 structure.py:5069(__init__)
      786    0.001    0.000    0.003    0.000 _builtins.py:128(_get_builtin_table)
        1    0.000    0.000    0.003    0.003 perm_groups.py:1(<module>)
        1    0.000    0.000    0.003    0.003 _decomp_qr.py:1(<module>)
       21    0.000    0.000    0.002    0.000 _distn_infrastructure.py:3358(_attach_methods)
       16    0.000    0.000    0.002    0.000 structure.py:3449(__init__)
       24    0.001    0.000    0.002    0.000 util.py:210(_collapse_string_to_ranges)
        1    0.000    0.000    0.002    0.002 _basinhopping.py:1(<module>)
        8    0.000    0.000    0.002    0.000 __init__.py:817(lookup)
      431    0.001    0.000    0.002    0.000 typing.py:320(_remove_dups_flatten)
        8    0.000    0.000    0.002    0.000 __init__.py:823(__init__)
        1    0.000    0.000    0.002    0.002 version.py:161(Version)
       16    0.000    0.000    0.002    0.000 inspect.py:2177(_signature_fromstr)
        1    0.000    0.000    0.002    0.002 _pep440.py:285(Version)
        7    0.000    0.000    0.002    0.000 core.py:2833(__init__)
        1    0.000    0.000    0.002    0.002 _dtype_like.py:1(<module>)
       16    0.000    0.000    0.002    0.000 _functools.py:75(wrapper)
      888    0.002    0.000    0.002    0.000 {built-in method torch.view_as_real}
        6    0.000    0.000    0.002    0.000 _docscrape.py:694(properties)
        1    0.000    0.000    0.002    0.002 _decomp_qz.py:1(<module>)
      291    0.002    0.000    0.002    0.000 {built-in method _codecs.utf_8_decode}
       93    0.000    0.000    0.002    0.000 _compatibility.py:10(mark_back_compat)
      367    0.001    0.000    0.002    0.000 permutations.py:1323(__mul__)
       16    0.000    0.000    0.002    0.000 rcsetup.py:843(cycler)
      451    0.000    0.000    0.002    0.000 <frozen importlib._bootstrap_external>:164(_path_isdir)
    10200    0.002    0.000    0.002    0.000 {method 'endswith' of 'str' objects}
       21    0.000    0.000    0.002    0.000 decompositions.py:3288(register_inplace)
       54    0.000    0.000    0.002    0.000 deprecation.py:333(_delete_parameter)
        2    0.000    0.000    0.002    0.001 polynomials.py:1(<module>)
        1    0.000    0.000    0.002    0.002 typing_extensions.py:1(<module>)
        1    0.000    0.000    0.002    0.002 _decomp_cholesky.py:1(<module>)
    18072    0.002    0.000    0.002    0.000 fromnumeric.py:2416(_all_dispatcher)
       78    0.000    0.000    0.002    0.000 typing.py:1772(__class_getitem__)
     3067    0.002    0.000    0.002    0.000 {built-in method torch._is_functional_tensor}
    17441    0.002    0.000    0.002    0.000 {built-in method _imp.acquire_lock}
      512    0.000    0.000    0.002    0.000 numbers.py:1984(__lt__)
    16779    0.002    0.000    0.002    0.000 {built-in method builtins.issubclass}
     1034    0.002    0.000    0.002    0.000 _tensor_str.py:240(<listcomp>)
   127/59    0.000    0.000    0.002    0.000 core.py:4018(<listcomp>)
        1    0.000    0.000    0.002    0.002 _tanhsinh.py:1(<module>)
        5    0.000    0.000    0.002    0.000 ctx_base.py:42(__init__)
      605    0.001    0.000    0.002    0.000 _inspect.py:96(getargspec)
        3    0.000    0.000    0.002    0.001 __init__.py:32(message_from_string)
        1    0.000    0.000    0.002    0.002 _manylinux.py:1(<module>)
        1    0.000    0.000    0.002    0.002 groundtypes.py:1(<module>)
        2    0.001    0.001    0.002    0.001 _codata.py:2019(parse_constants_2018toXXXX)
    17441    0.002    0.000    0.002    0.000 {built-in method _imp.release_lock}
        3    0.000    0.000    0.002    0.001 _distribution_infrastructure.py:2043(_draw)
        3    0.000    0.000    0.002    0.001 parser.py:59(parsestr)
     1193    0.002    0.000    0.002    0.000 _docscrape.py:188(_strip)
       15    0.000    0.000    0.002    0.000 core.py:1601(__or__)
        1    0.000    0.000    0.002    0.002 singleton.py:1(<module>)
        1    0.000    0.000    0.002    0.002 permutations.py:1(<module>)
       20    0.000    0.000    0.002    0.000 mul.py:205(flatten)
        2    0.000    0.000    0.002    0.001 sysconfig.py:185(_safe_realpath)
        2    0.000    0.000    0.002    0.001 <frozen posixpath>:411(realpath)
        3    0.000    0.000    0.002    0.001 patches.py:1867(pprint_styles)
        3    0.000    0.000    0.002    0.001 parser.py:41(parse)
       93    0.000    0.000    0.002    0.000 sites.py:38(__init__)
      165    0.000    0.000    0.002    0.000 typing.py:832(__init__)
      3/2    0.000    0.000    0.002    0.001 <frozen posixpath>:420(_joinrealpath)
        1    0.000    0.000    0.002    0.002 integerring.py:1(<module>)
        1    0.000    0.000    0.002    0.002 ctx_mp_python.py:1(<module>)
     5359    0.002    0.000    0.002    0.000 {method 'update' of 'dict' objects}
        1    0.000    0.000    0.002    0.002 common_types.py:1(<module>)
        1    0.000    0.000    0.002    0.002 _docscrape.py:112(NumpyDocString)
      965    0.002    0.000    0.002    0.000 typing_extensions.py:3092(_has_generic_or_protocol_as_origin)
       15    0.000    0.000    0.002    0.000 core.py:4399(__init__)
        1    0.000    0.000    0.002    0.002 _parseaddr.py:1(<module>)
        1    0.000    0.000    0.002    0.002 realfield.py:1(<module>)
        1    0.000    0.000    0.002    0.002 parametrizations.py:1(<module>)
       59    0.000    0.000    0.002    0.000 core.py:3931(<listcomp>)
        1    0.000    0.000    0.002    0.002 c10d_error_logger.py:1(<module>)
        2    0.000    0.000    0.002    0.001 decoder.py:332(decode)
     6251    0.001    0.000    0.002    0.000 _parser.py:247(match)
       19    0.002    0.000    0.002    0.000 {built-in method posix.lstat}
        2    0.001    0.000    0.002    0.001 decoder.py:343(raw_decode)
     2520    0.002    0.000    0.002    0.000 {built-in method torch._has_compatible_shallow_copy_type}
        1    0.000    0.000    0.002    0.002 unary.py:1(<module>)
        2    0.002    0.001    0.002    0.001 {method 'join' of 'bytes' objects}
       28    0.000    0.000    0.002    0.000 _basic.py:16(_dispatch)
        1    0.000    0.000    0.002    0.002 _artifact_location.py:1(<module>)
        1    0.000    0.000    0.002    0.002 _static.py:1(<module>)
        1    0.000    0.000    0.002    0.002 _mannwhitneyu.py:1(<module>)
        5    0.001    0.000    0.002    0.000 functions.py:18(__init__)
        1    0.000    0.000    0.002    0.002 realfield.py:87(__init__)
        1    0.000    0.000    0.002    0.002 backend_tools.py:1(<module>)
       28    0.000    0.000    0.002    0.000 _backend.py:174(generate_multimethod)
        5    0.000    0.000    0.002    0.000 pathlib.py:1036(open)
        1    0.000    0.000    0.002    0.002 pyplot.py:2138(_setup_pyplot_info_docstrings)
        1    0.000    0.000    0.002    0.002 symbolic_shapes.py:1(<module>)
        1    0.000    0.000    0.002    0.002 integers.py:1(<module>)
     2616    0.001    0.000    0.002    0.000 <frozen importlib._bootstrap_external>:180(_path_isabs)
      125    0.000    0.000    0.002    0.000 cache.py:66(func_wrapper)
      607    0.000    0.000    0.002    0.000 typing.py:1535(<genexpr>)
        4    0.000    0.000    0.002    0.000 feedparser.py:173(feed)
        7    0.001    0.000    0.002    0.000 _builtins.py:134(register_all)
        1    0.000    0.000    0.002    0.002 _address.py:1(<module>)
       64    0.000    0.000    0.002    0.000 wrappers.py:285(backwards_not_supported)
        3    0.000    0.000    0.002    0.001 patches.py:1871(<listcomp>)
        1    0.000    0.000    0.002    0.002 trajectory.py:1(<module>)
       35    0.000    0.000    0.002    0.000 _typing.py:346(__new__)
        7    0.000    0.000    0.002    0.000 ctx_mp_python.py:279(binary_op)
      590    0.001    0.000    0.002    0.000 enum.py:1483(__and__)
     5212    0.002    0.000    0.002    0.000 {built-in method _thread.allocate_lock}
        1    0.000    0.000    0.002    0.002 parameters.py:1(<module>)
        1    0.000    0.000    0.002    0.002 _arffread.py:1(<module>)
      100    0.000    0.000    0.002    0.000 matrix_element.py:167(__radd__)
        1    0.002    0.002    0.002    0.002 {built-in method torch._C._c10d_init}
     1800    0.001    0.000    0.002    0.000 _docscrape.py:457(_str_indent)
        1    0.000    0.000    0.002    0.002 csv.py:1(<module>)
     2602    0.001    0.000    0.002    0.000 numbers.py:1965(__eq__)
        1    0.000    0.000    0.002    0.002 vmap.py:1(<module>)
        1    0.000    0.000    0.002    0.002 _lowrank.py:1(<module>)
        1    0.000    0.000    0.002    0.002 proxy.py:1(<module>)
       71    0.000    0.000    0.002    0.000 enum.py:451(__prepare__)
      200    0.000    0.000    0.002    0.000 containers.py:75(__add__)
     1043    0.001    0.000    0.002    0.000 typing.py:1270(__getattr__)
        7    0.000    0.000    0.002    0.000 feedparser.py:178(_call_parse)
       74    0.000    0.000    0.002    0.000 typing.py:1580(copy_with)
      544    0.001    0.000    0.002    0.000 registration.py:213(register)
     7319    0.002    0.000    0.002    0.000 enum.py:1074(__new__)
     2776    0.001    0.000    0.002    0.000 inspect.py:755(_is_wrapper)
       22    0.000    0.000    0.002    0.000 core.py:620(set_parse_action)
       28    0.000    0.000    0.002    0.000 _backend.py:312(get_defaults)
        7    0.000    0.000    0.002    0.000 feedparser.py:218(_parsegen)
        1    0.000    0.000    0.002    0.002 _dual_annealing.py:1(<module>)
        1    0.000    0.000    0.002    0.002 _attachment.py:1(<module>)
        1    0.000    0.000    0.002    0.002 _header_value_parser.py:1(<module>)
     5579    0.001    0.000    0.002    0.000 _ops.py:289(__hash__)
     4289    0.001    0.000    0.002    0.000 _parser.py:170(append)
     4901    0.001    0.000    0.002    0.000 inspect.py:378(isfunction)
        3    0.000    0.000    0.002    0.001 _distribution_infrastructure.py:868(draw)
       44    0.000    0.000    0.002    0.000 typing.py:2799(<dictcomp>)
       22    0.000    0.000    0.002    0.000 _distribution_infrastructure.py:1083(filtered)
        1    0.000    0.000    0.002    0.002 scalarstring.py:1(<module>)
        1    0.000    0.000    0.002    0.002 _comparison.py:1(<module>)
        1    0.000    0.000    0.002    0.002 interpreter.py:1(<module>)
        6    0.000    0.000    0.002    0.000 _distribution_infrastructure.py:605(draw)
      459    0.001    0.000    0.002    0.000 iterables.py:1923(has_dups)
     1126    0.000    0.000    0.002    0.000 colors.py:124(_is_nth_color)
       22    0.000    0.000    0.002    0.000 core.py:701(<listcomp>)
     1456    0.001    0.000    0.002    0.000 _docscrape.py:49(read)
        1    0.000    0.000    0.002    0.002 _ufunc_config.py:1(<module>)
        2    0.000    0.000    0.002    0.001 fnmatch.py:1(<module>)
      592    0.001    0.000    0.002    0.000 _pytree.py:136(__init__)
        2    0.000    0.000    0.002    0.001 sets.py:1(<module>)
       26    0.000    0.000    0.002    0.000 core.py:257(_trim_arity)
      243    0.000    0.000    0.002    0.000 functools.py:518(decorating_function)
        1    0.000    0.000    0.002    0.002 _linprog_rs.py:1(<module>)
        2    0.000    0.000    0.002    0.001 factorials.py:1(<module>)
        1    0.000    0.000    0.002    0.002 _char_codes.py:1(<module>)
        1    0.000    0.000    0.002    0.002 grad_scaler.py:1(<module>)
     2671    0.002    0.000    0.002    0.000 <frozen importlib._bootstrap>:357(__init__)
       72    0.000    0.000    0.002    0.000 inspect.py:3224(__str__)
        1    0.000    0.000    0.002    0.002 hashlib.py:1(<module>)
     4881    0.001    0.000    0.002    0.000 _parser.py:158(__len__)
        5    0.000    0.000    0.002    0.000 io.py:28(zopen)
        1    0.000    0.000    0.002    0.002 relativedelta.py:1(<module>)
       13    0.000    0.000    0.002    0.000 enum.py:891(<listcomp>)
     9727    0.002    0.000    0.002    0.000 {method '__exit__' of '_thread.lock' objects}
       14    0.000    0.000    0.002    0.000 hashlib.py:126(__get_openssl_constructor)
        3    0.000    0.000    0.002    0.001 _constants.py:1(<module>)
     2194    0.002    0.000    0.002    0.000 <frozen importlib._bootstrap>:48(_new_module)
       30    0.000    0.000    0.002    0.000 __init__.py:652(__init__)
        1    0.000    0.000    0.002    0.002 _mio4.py:1(<module>)
        1    0.000    0.000    0.002    0.002 connection.py:1(<module>)
      976    0.001    0.000    0.002    0.000 _compiler.py:396(_simple)
     2492    0.002    0.000    0.002    0.000 {built-in method _imp.find_frozen}
      403    0.002    0.000    0.002    0.000 {built-in method _abc._abc_init}
      961    0.002    0.000    0.002    0.000 {method 'search' of 're.Pattern' objects}
        1    0.000    0.000    0.002    0.002 ExifTags.py:21(Base)
       30    0.000    0.000    0.002    0.000 <frozen _collections_abc>:941(update)
      317    0.000    0.000    0.002    0.000 font_manager.py:962(_json_decode)
     6134    0.002    0.000    0.002    0.000 {built-in method torch.get_default_dtype}
     2869    0.002    0.000    0.002    0.000 functools.py:65(wraps)
        1    0.000    0.000    0.002    0.002 gzip.py:296(read)
        1    0.000    0.000    0.002    0.002 <frozen importlib._bootstrap>:977(exec_module)
      532    0.001    0.000    0.002    0.000 function_base.py:2285(__init__)
        2    0.000    0.000    0.001    0.001 hashlib.py:82(__get_builtin_constructor)
        1    0.000    0.000    0.001    0.001 <frozen ntpath>:1(<module>)
     1482    0.001    0.000    0.001    0.000 enum.py:809(__setattr__)
        1    0.000    0.000    0.001    0.001 Bravais_Lattice.py:1(<module>)
        2    0.000    0.000    0.001    0.001 fractions.py:1(<module>)
  108/107    0.000    0.000    0.001    0.000 __init__.py:235(wrapper)
        1    0.000    0.000    0.001    0.001 _nonlin.py:1(<module>)
        1    0.000    0.000    0.001    0.001 accumulationbounds.py:1(<module>)
        1    0.000    0.000    0.001    0.001 zeta_functions.py:1(<module>)
        1    0.000    0.000    0.001    0.001 core.py:6281(<listcomp>)
        1    0.000    0.000    0.001    0.001 parsing.py:1(<module>)
     2209    0.001    0.000    0.001    0.000 {method 'extend' of 'list' objects}
        1    0.000    0.000    0.001    0.001 _expm_frechet.py:1(<module>)
        1    0.000    0.000    0.001    0.001 module.py:366(Module)
        1    0.000    0.000    0.001    0.001 wavfile.py:72(WAVE_FORMAT)
        1    0.000    0.000    0.001    0.001 stateless.py:1(<module>)
       20    0.000    0.000    0.001    0.000 core.py:5363(parseImpl)
        1    0.000    0.000    0.001    0.001 _max_len_seq.py:1(<module>)
        1    0.000    0.000    0.001    0.001 core.py:389(ParserElement)
        7    0.000    0.000    0.001    0.000 gzip.py:474(read)
       83    0.000    0.000    0.001    0.000 core.py:3887(__init__)
        1    0.000    0.000    0.001    0.001 fancysets.py:1(<module>)
  274/176    0.000    0.000    0.001    0.000 core.py:1947(name)
        1    0.000    0.000    0.001    0.001 polyoptions.py:397(Domain)
     3067    0.001    0.000    0.001    0.000 {method '_is_zerotensor' of 'torch._C._TensorBase' objects}
       12    0.001    0.000    0.001    0.000 artist.py:1273(<listcomp>)
       35    0.000    0.000    0.001    0.000 core.py:76(ismethod)
     6024    0.001    0.000    0.001    0.000 {method 'set' of '_contextvars.ContextVar' objects}
      248    0.001    0.000    0.001    0.000 _docscrape.py:499(_str_see_also)
     9746    0.001    0.000    0.001    0.000 {built-in method _thread.get_ident}
  206/114    0.000    0.000    0.001    0.000 core.py:1910(default_name)
       42    0.000    0.000    0.001    0.000 _typing.py:257(__new__)
      628    0.000    0.000    0.001    0.000 _pytree.py:105(_is_leaf)
        1    0.000    0.000    0.001    0.001 _spherical_voronoi.py:1(<module>)
       14    0.000    0.000    0.001    0.000 core.py:115(doc_note)
        2    0.000    0.000    0.001    0.001 core.py:6134(srange)
       97    0.001    0.000    0.001    0.000 {method 'sort' of 'list' objects}
       29    0.000    0.000    0.001    0.000 typing.py:1628(copy_with)
     6493    0.001    0.000    0.001    0.000 {built-in method from_bytes}
     1627    0.001    0.000    0.001    0.000 enum.py:78(_is_private)
      541    0.000    0.000    0.001    0.000 dataclasses.py:828(_set_new_attribute)
      502    0.001    0.000    0.001    0.000 typing.py:306(_deduplicate)
     1366    0.000    0.000    0.001    0.000 {built-in method builtins.delattr}
        1    0.000    0.000    0.001    0.001 configparser.py:569(RawConfigParser)
     3872    0.001    0.000    0.001    0.000 typing.py:1348(__eq__)
    28/22    0.000    0.000    0.001    0.000 _distribution_infrastructure.py:1136(wrapped)
      927    0.001    0.000    0.001    0.000 permutations.py:1028(_af_new)
        7    0.000    0.000    0.001    0.000 _nonlin.py:1584(_nonlin_wrapper)
      365    0.000    0.000    0.001    0.000 typing.py:1623(<genexpr>)
      436    0.001    0.000    0.001    0.000 copy.py:259(_reconstruct)
     6134    0.001    0.000    0.001    0.000 {method 'has_names' of 'torch._C._TensorBase' objects}
       20    0.000    0.000    0.001    0.000 core.py:5119(parseImpl)
     22/3    0.000    0.000    0.001    0.000 core.py:4122(streamline)
        3    0.000    0.000    0.001    0.000 ctx_mp.py:96(init_builtins)
     3067    0.001    0.000    0.001    0.000 {built-in method torch._C._len_torch_dispatch_stack}
     6941    0.001    0.000    0.001    0.000 {method 'pop' of 'list' objects}
     8747    0.001    0.000    0.001    0.000 {method 'isidentifier' of 'str' objects}
     6024    0.001    0.000    0.001    0.000 {method 'reset' of '_contextvars.ContextVar' objects}
        1    0.000    0.000    0.001    0.001 _quadpack_py.py:1(<module>)
      104    0.000    0.000    0.001    0.000 typing.py:1006(__init__)
      628    0.000    0.000    0.001    0.000 <string>:2(__init__)
     4191    0.001    0.000    0.001    0.000 numbers.py:2011(__hash__)
    11121    0.001    0.000    0.001    0.000 inspect.py:2729(name)
        1    0.000    0.000    0.001    0.001 getlimits.py:162(_register_known_types)
       43    0.000    0.000    0.001    0.000 ast.py:33(parse)
        5    0.000    0.000    0.001    0.000 perm_groups.py:124(__new__)
     6034    0.001    0.000    0.001    0.000 _ufunc_config.py:426(__init__)
        1    0.000    0.000    0.001    0.001 _sketches.py:1(<module>)
        1    0.000    0.000    0.001    0.001 __init__.py:42(_load_pmg_settings)
     2994    0.001    0.000    0.001    0.000 _parser.py:284(tell)
        1    0.000    0.000    0.001    0.001 sequences.py:1(<module>)
        1    0.000    0.000    0.001    0.001 helpers.py:634(make_html_tags)
     1456    0.001    0.000    0.001    0.000 _docscrape.py:16(strip_blank_lines)
        1    0.000    0.000    0.001    0.001 _correlation.py:1(<module>)
        1    0.000    0.000    0.001    0.001 helpers.py:576(_makeTags)
     8013    0.001    0.000    0.001    0.000 _docscrape.py:153(__getitem__)
      755    0.001    0.000    0.001    0.000 dataclasses.py:451(_field_init)
      822    0.000    0.000    0.001    0.000 typing_extensions.py:3114(_is_unpacked_typevartuple)
      199    0.000    0.000    0.001    0.000 typing.py:245(_collect_parameters)
        1    0.000    0.000    0.001    0.001 _sensitivity_analysis.py:1(<module>)
      138    0.000    0.000    0.001    0.000 _meta_registrations.py:34(register)
     7528    0.001    0.000    0.001    0.000 {built-in method posix.fspath}
       82    0.000    0.000    0.001    0.000 pathlib.py:504(_from_parts)
       64    0.000    0.000    0.001    0.000 typing.py:1470(copy_with)
       75    0.000    0.000    0.001    0.000 pathlib.py:868(__new__)
     30/4    0.000    0.000    0.001    0.000 core.py:3963(streamline)
       96    0.000    0.000    0.001    0.000 pathlib.py:484(_parse_args)
     1662    0.001    0.000    0.001    0.000 basic.py:288(__new__)
     72/4    0.000    0.000    0.001    0.000 core.py:980(_parseCache)
       31    0.000    0.000    0.001    0.000 _base.py:56(__set_name__)
1647/1434    0.001    0.000    0.001    0.000 typing.py:1354(__hash__)
       44    0.000    0.000    0.001    0.000 core.py:4404(<genexpr>)
        1    0.000    0.000    0.001    0.001 unary.py:167(<dictcomp>)
        1    0.000    0.000    0.001    0.001 contextvars.py:1(<module>)
       57    0.000    0.000    0.001    0.000 <frozen genericpath>:16(exists)
        1    0.000    0.000    0.001    0.001 _torch_docs.py:1(<module>)
        1    0.000    0.000    0.001    0.001 extras.py:1(<module>)
      992    0.001    0.000    0.001    0.000 _docscrape.py:491(_str_section)
      748    0.001    0.000    0.001    0.000 dataclasses.py:347(field)
  755/724    0.001    0.000    0.001    0.000 typing.py:1636(__hash__)
        6    0.000    0.000    0.001    0.000 warnings.py:130(filterwarnings)
        2    0.000    0.000    0.001    0.001 base.py:1(<module>)
      215    0.000    0.000    0.001    0.000 symbolic_helper.py:263(decorator)
      105    0.000    0.000    0.001    0.000 typing.py:1822(__init_subclass__)
      141    0.000    0.000    0.001    0.000 sorting.py:179(_nodes)
      129    0.000    0.000    0.001    0.000 dataclasses.py:394(_recursive_repr)
        1    0.000    0.000    0.001    0.001 torch_version.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _decomp_ldl.py:1(<module>)
        1    0.000    0.000    0.001    0.001 dviread.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _survival.py:1(<module>)
     1800    0.001    0.000    0.001    0.000 _docscrape.py:458(<listcomp>)
    11885    0.001    0.000    0.001    0.000 inspect.py:2741(kind)
        1    0.000    0.000    0.001    0.001 fontconfig_pattern.py:62(__init__)
      586    0.001    0.000    0.001    0.000 _inspect.py:65(getargs)
       55    0.000    0.000    0.001    0.000 __init__.py:2081(getLogger)
     2546    0.001    0.000    0.001    0.000 _docscrape.py:403(<genexpr>)
        1    0.000    0.000    0.001    0.001 subgraph_rewriter.py:1(<module>)
        1    0.000    0.000    0.001    0.001 depends.py:1(<module>)
        1    0.000    0.000    0.001    0.001 graph.py:675(Graph)
        1    0.000    0.000    0.001    0.001 _rules.py:1(<module>)
        1    0.000    0.000    0.001    0.001 rnn.py:551(LSTM)
        9    0.000    0.000    0.001    0.000 assume.py:175(__new__)
      146    0.000    0.000    0.001    0.000 enum.py:923(_get_mixins_)
        6    0.000    0.000    0.001    0.000 getlimits.py:34(__init__)
        1    0.000    0.000    0.001    0.001 tools_common.py:1(<module>)
     3067    0.001    0.000    0.001    0.000 {method 'is_neg' of 'torch._C._TensorBase' objects}
       52    0.000    0.000    0.001    0.000 inspect.py:936(getsourcefile)
       37    0.001    0.000    0.001    0.000 function_base.py:24(linspace)
       16    0.000    0.000    0.001    0.000 inspect.py:2105(_signature_strip_non_python_syntax)
    11079    0.001    0.000    0.001    0.000 {built-in method builtins.callable}
       21    0.000    0.000    0.001    0.000 arrayprint.py:506(wrapper)
  518/510    0.000    0.000    0.001    0.000 {built-in method builtins.repr}
        2    0.000    0.000    0.001    0.000 combining.py:1(<module>)
       69    0.000    0.000    0.001    0.000 _compatibility.py:24(mark_not_back_compat)
        1    0.000    0.000    0.001    0.001 __init__.py:454(StrFormatStyle)
        1    0.000    0.000    0.001    0.001 binary.py:171(<dictcomp>)
      425    0.000    0.000    0.001    0.000 artist.py:1363(aliased_name)
      665    0.001    0.000    0.001    0.000 _compiler.py:214(_compile_charset)
      426    0.000    0.000    0.001    0.000 __init__.py:218(finditer)
        2    0.000    0.000    0.001    0.000 __init__.py:368(get_device_capability)
        2    0.000    0.000    0.001    0.000 container.py:1(<module>)
        3    0.000    0.000    0.001    0.000 __init__.py:385(get_device_properties)
     10/3    0.000    0.000    0.001    0.000 unicode.py:14(__get__)
      459    0.000    0.000    0.001    0.000 permutations.py:455(<listcomp>)
       17    0.000    0.000    0.001    0.000 deprecation.py:416(_make_keyword_only)
        1    0.000    0.000    0.001    0.001 ImageMode.py:1(<module>)
        1    0.000    0.000    0.001    0.001 miscellaneous.py:1(<module>)
     7354    0.001    0.000    0.001    0.000 {method '__contains__' of 'frozenset' objects}
     1375    0.001    0.000    0.001    0.000 enum.py:37(_is_descriptor)
        1    0.000    0.000    0.001    0.001 _variation.py:1(<module>)
        1    0.000    0.000    0.001    0.001 elliptic_integrals.py:1(<module>)
      277    0.001    0.000    0.001    0.000 results.py:153(__new__)
       27    0.000    0.000    0.001    0.000 pathlib.py:940(glob)
      205    0.000    0.000    0.001    0.000 inspect.py:2763(__str__)
     2686    0.001    0.000    0.001    0.000 util.py:202(__call__)
        3    0.001    0.000    0.001    0.000 {built-in method torch.cuda._get_device_properties}
       90    0.000    0.000    0.001    0.000 basic.py:447(sort_key)
        1    0.000    0.000    0.001    0.001 decimal.py:1(<module>)
  628/550    0.001    0.000    0.001    0.000 _pytree.py:165(tree_unflatten)
        3    0.000    0.000    0.001    0.000 string.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _external_property_file_references.py:1(<module>)
     20/6    0.000    0.000    0.001    0.000 core.py:4741(streamline)
      772    0.001    0.000    0.001    0.000 _docscrape.py:28(__init__)
     3128    0.001    0.000    0.001    0.000 facts.py:633(<genexpr>)
       59    0.000    0.000    0.001    0.000 __init__.py:791(joinpath)
      628    0.001    0.000    0.001    0.000 _pytree.py:120(__post_init__)
       80    0.000    0.000    0.001    0.000 _array_api.py:757(xp_capabilities)
        1    0.000    0.000    0.001    0.001 operator_schemas.py:1(<module>)
     5813    0.001    0.000    0.001    0.000 {method 'group' of 're.Match' objects}
        1    0.000    0.000    0.001    0.001 _distribution_infrastructure.py:2297(entropy)
        1    0.000    0.000    0.001    0.001 mathieu_functions.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _miobase.py:1(<module>)
       84    0.000    0.000    0.001    0.000 __init__.py:1641(get_aten_op)
     1747    0.001    0.000    0.001    0.000 enum.py:47(_is_dunder)
       54    0.000    0.000    0.001    0.000 __init__.py:1327(getLogger)
      542    0.001    0.000    0.001    0.000 _parser.py:367(_escape)
      115    0.000    0.000    0.001    0.000 inspect.py:786(_finddoc)
        6    0.000    0.000    0.001    0.000 pathlib.py:1245(is_dir)
     1034    0.001    0.000    0.001    0.000 {method 'size' of 'torch._C._TensorBase' objects}
      129    0.001    0.000    0.001    0.000 ctx_mp_python.py:979(_wrap_libmp_function)
        1    0.000    0.000    0.001    0.001 _distribution_infrastructure.py:2317(_entropy_quadrature)
        1    0.000    0.000    0.001    0.001 defchararray.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _interpolation.py:1(<module>)
        6    0.000    0.000    0.001    0.000 _docscrape.py:698(<listcomp>)
        2    0.000    0.000    0.001    0.000 _internal.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _distribution_infrastructure.py:2076(_quadrature)
       15    0.000    0.000    0.001    0.000 typing.py:2893(__new__)
        1    0.000    0.000    0.001    0.001 datetime.py:1(<module>)
       98    0.001    0.000    0.001    0.000 pathlib.py:56(parse_parts)
        2    0.000    0.000    0.001    0.000 __init__.py:456(_get_config_or_cache_dir)
       53    0.000    0.000    0.001    0.000 core.py:3161(parseImpl)
      182    0.000    0.000    0.001    0.000 numbers.py:1975(__gt__)
        6    0.000    0.000    0.001    0.000 pathlib.py:1008(stat)
        1    0.000    0.000    0.001    0.001 _nnls.py:1(<module>)
       12    0.000    0.000    0.001    0.000 __init__.py:1852(_define_aliases)
       50    0.000    0.000    0.001    0.000 basic.py:737(as_dummy)
       14    0.000    0.000    0.001    0.000 periodic_table.py:1608(get_el_sp)
      886    0.001    0.000    0.001    0.000 typing.py:2374(get_origin)
        1    0.000    0.000    0.001    0.001 runner.py:1(<module>)
     1286    0.001    0.000    0.001    0.000 enum.py:728(__delattr__)
     6024    0.001    0.000    0.001    0.000 numeric.py:2166(_allclose_dispatcher)
        8    0.000    0.000    0.001    0.000 core.py:2951(_generateDefaultName)
      395    0.000    0.000    0.001    0.000 containers.py:110(__hash__)
     2237    0.001    0.000    0.001    0.000 inspect.py:292(isclass)
      401    0.000    0.000    0.001    0.000 _parser.py:82(opengroup)
      106    0.000    0.000    0.001    0.000 contextlib.py:257(contextmanager)
        2    0.000    0.000    0.001    0.000 _procrustes.py:1(<module>)
        1    0.000    0.000    0.001    0.001 unary.py:170(<dictcomp>)
        1    0.000    0.000    0.001    0.001 indexed.py:1(<module>)
    24/12    0.000    0.000    0.001    0.000 core.py:4425(parseImpl)
      664    0.000    0.000    0.001    0.000 _pytree.py:99(_get_node_type)
        1    0.000    0.000    0.001    0.001 _region.py:1(<module>)
        1    0.000    0.000    0.001    0.001 matcher_utils.py:1(<module>)
       11    0.000    0.000    0.001    0.000 core.py:2952(charsAsStr)
        1    0.000    0.000    0.001    0.001 signal.py:1(<module>)
        1    0.001    0.001    0.001    0.001 helpers.py:678(<dictcomp>)
        1    0.000    0.000    0.001    0.001 scale.py:1(<module>)
        1    0.000    0.000    0.001    0.001 special.py:1(<module>)
      485    0.001    0.000    0.001    0.000 _array_api.py:676(__str__)
      468    0.000    0.000    0.001    0.000 _parser.py:444(_uniq)
        2    0.000    0.000    0.001    0.000 pathlib.py:1111(mkdir)
        1    0.000    0.000    0.001    0.001 _type_utils.py:1(<module>)
      235    0.001    0.000    0.001    0.000 core.py:456(__init__)
        1    0.001    0.001    0.001    0.001 {built-in method torch._C._autograd_init}
        8    0.000    0.000    0.001    0.000 __init__.py:794(children)
        1    0.000    0.000    0.001    0.001 string.py:69(__init_subclass__)
        3    0.000    0.000    0.001    0.000 feedparser.py:471(_parse_headers)
     1721    0.001    0.000    0.001    0.000 typing.py:1631(__eq__)
        2    0.001    0.000    0.001    0.000 {built-in method posix.mkdir}
        1    0.000    0.000    0.001    0.001 _tanhsinh.py:958(nsum)
        1    0.000    0.000    0.001    0.001 __init__.py:1129(manager_path)
        1    0.000    0.000    0.001    0.001 gammazeta.py:1(<module>)
      349    0.000    0.000    0.001    0.000 _docscrape.py:303(parse_item_name)
     3067    0.001    0.000    0.001    0.000 _python_dispatch.py:89(<listcomp>)
     1820    0.001    0.000    0.001    0.000 _docscrape.py:156(__setitem__)
        1    0.001    0.001    0.001    0.001 events.py:644(BaseDefaultEventLoopPolicy)
       80    0.001    0.000    0.001    0.000 function.py:289(__init__)
        1    0.000    0.000    0.001    0.001 _short_time_fft.py:1(<module>)
      398    0.001    0.000    0.001    0.000 _util.py:526(<listcomp>)
        1    0.000    0.000    0.001    0.001 complexfield.py:1(<module>)
      110    0.000    0.000    0.001    0.000 _compiler.py:384(_mk_bitmap)
      266    0.000    0.000    0.001    0.000 <frozen _collections_abc>:859(__iter__)
        1    0.000    0.000    0.001    0.001 std.py:245(tqdm)
        1    0.000    0.000    0.001    0.001 sites.py:1(<module>)
     2667    0.001    0.000    0.001    0.000 <frozen importlib._bootstrap>:165(__init__)
        1    0.000    0.000    0.001    0.001 _decomp_polar.py:1(<module>)
        2    0.000    0.000    0.001    0.000 combinatorics.py:1(<module>)
        1    0.000    0.000    0.001    0.001 para4tb.py:24(<listcomp>)
        1    0.000    0.000    0.001    0.001 unicode.py:80(alphanums)
     3208    0.001    0.000    0.001    0.000 {method 'pop' of 'dict' objects}
      327    0.001    0.000    0.001    0.000 <frozen posixpath>:60(isabs)
     1008    0.000    0.000    0.001    0.000 colors.py:266(<genexpr>)
       18    0.000    0.000    0.001    0.000 core.py:5230(parseImpl)
        1    0.000    0.000    0.001    0.001 rnn.py:830(GRU)
        1    0.000    0.000    0.001    0.001 __init__.py:505(get_cachedir)
     2412    0.001    0.000    0.001    0.000 _parser.py:109(__init__)
     1627    0.001    0.000    0.001    0.000 enum.py:58(_is_sunder)
       63    0.000    0.000    0.001    0.000 colors.py:829(reversed)
        1    0.000    0.000    0.001    0.001 _tensor_docs.py:1(<module>)
        1    0.000    0.000    0.001    0.001 pydoc.py:1(<module>)
        1    0.000    0.000    0.001    0.001 equality.py:1(<module>)
        1    0.000    0.000    0.001    0.001 gammazeta.py:1372(<listcomp>)
       10    0.000    0.000    0.001    0.000 extras.py:233(__init__)
        1    0.000    0.000    0.001    0.001 parse.py:1(<module>)
        1    0.000    0.000    0.001    0.001 tools_common.py:78(FxNetAccFusionsFinder)
      300    0.000    0.000    0.001    0.000 matrix_element.py:41(<listcomp>)
       93    0.000    0.000    0.001    0.000 composition.py:141(__init__)
       10    0.000    0.000    0.001    0.000 extras.py:237(getdoc)
        6    0.000    0.000    0.001    0.000 _distribution_infrastructure.py:1597(__init__)
     6024    0.001    0.000    0.001    0.000 numeric.py:2245(_isclose_dispatcher)
       15    0.000    0.000    0.001    0.000 _distribution_infrastructure.py:3136(moment)
        1    0.000    0.000    0.001    0.001 _pocketfft.py:1(<module>)
       80    0.001    0.000    0.001    0.000 _array_api.py:682(_make_sphinx_capabilities)
        1    0.000    0.000    0.001    0.001 complexfield.py:48(__init__)
      750    0.000    0.000    0.001    0.000 numbers.py:1972(__ne__)
        2    0.000    0.000    0.001    0.000 unicode.py:55(_chars_for_ranges)
        5    0.000    0.000    0.001    0.000 polyhedron.py:390(<listcomp>)
        1    0.000    0.000    0.001    0.001 unicode.py:70(alphas)
        6    0.000    0.000    0.001    0.000 _docscrape.py:684(<listcomp>)
        4    0.000    0.000    0.001    0.000 enum.py:822(_create_)
       38    0.000    0.000    0.001    0.000 getlimits.py:111(_float_to_str)
       58    0.000    0.000    0.001    0.000 wrappers.py:328(elementwise_unary_scalar_wrapper)
       28    0.000    0.000    0.001    0.000 _distribution_infrastructure.py:305(get_numerical_endpoints)
        1    0.000    0.000    0.001    0.001 ElementPath.py:1(<module>)
      300    0.001    0.000    0.001    0.000 matrix_element.py:90(__extract_var)
      639    0.000    0.000    0.001    0.000 ctx_mp_python.py:1014(_wrap_specfun)
        3    0.000    0.000    0.001    0.000 activation.py:1(<module>)
      428    0.001    0.000    0.001    0.000 libmpf.py:291(from_man_exp)
        1    0.000    0.000    0.001    0.001 _web_response.py:1(<module>)
       20    0.000    0.000    0.001    0.000 typing.py:1357(__or__)
     2520    0.001    0.000    0.001    0.000 {method 'is_floating_point' of 'torch._C._TensorBase' objects}
       65    0.000    0.000    0.001    0.000 assumptions.py:497(getit)
     2496    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap>:748(find_spec)
     20/6    0.000    0.000    0.001    0.000 core.py:4698(parseImpl)
        1    0.000    0.000    0.001    0.001 pkgutil.py:506(extend_path)
        6    0.001    0.000    0.001    0.000 {method 'decompress' of 'zlib.Decompress' objects}
      269    0.000    0.000    0.001    0.000 __init__.py:304(<genexpr>)
        1    0.000    0.000    0.001    0.001 pickletools.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _web_request.py:1(<module>)
        1    0.000    0.000    0.001    0.001 beta_functions.py:1(<module>)
       71    0.000    0.000    0.001    0.000 enum.py:987(_find_new_)
        2    0.000    0.000    0.001    0.000 gzip.py:467(_read_gzip_header)
     6092    0.001    0.000    0.001    0.000 multiarray.py:669(result_type)
  335/280    0.000    0.000    0.001    0.000 _compiler.py:434(_get_literal_prefix)
        1    0.000    0.000    0.001    0.001 pooling.py:1(<module>)
        2    0.000    0.000    0.001    0.000 gzip.py:418(_read_gzip_header)
        1    0.000    0.000    0.001    0.001 server_process_global_profiler.py:1(<module>)
       26    0.000    0.000    0.001    0.000 _hook_iterator.py:102(hook_iterator)
       31    0.000    0.000    0.001    0.000 gzip.py:86(read)
      431    0.000    0.000    0.001    0.000 _util.py:541(<genexpr>)
      266    0.000    0.000    0.001    0.000 dataclasses.py:380(_tuple_str)
     3970    0.001    0.000    0.001    0.000 {method 'values' of 'mappingproxy' objects}
       42    0.000    0.000    0.001    0.000 {numpy.random._generator.default_rng}
      297    0.000    0.000    0.001    0.000 _parser.py:222(__init__)
        1    0.000    0.000    0.001    0.001 tensor_functions.py:1(<module>)
       83    0.000    0.000    0.001    0.000 deprecation.py:222(finalize)
       61    0.000    0.000    0.001    0.000 core.py:4672(__init__)
        1    0.000    0.000    0.001    0.001 _add_docstring.py:1(<module>)
      186    0.000    0.000    0.001    0.000 typing.py:1673(__hash__)
     2164    0.001    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:1097(__init__)
        1    0.000    0.000    0.001    0.001 reinplace.py:1(<module>)
        1    0.000    0.000    0.001    0.001 dataset.py:1(<module>)
     2826    0.001    0.000    0.001    0.000 facts.py:582(_tell)
        6    0.000    0.000    0.001    0.000 _distribution_infrastructure.py:1616(_update_parameters)
        1    0.000    0.000    0.001    0.001 _realtransforms.py:1(<module>)
        1    0.000    0.000    0.001    0.001 periodic_table.py:865(Element)
     1246    0.000    0.000    0.001    0.000 _docscrape.py:454(_str_header)
        1    0.000    0.000    0.001    0.001 libintmath.py:1(<module>)
        1    0.000    0.000    0.001    0.001 latex.py:1(<module>)
        1    0.000    0.000    0.001    0.001 TiffTags.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _exception.py:1(<module>)
        1    0.000    0.000    0.001    0.001 symbolic_opset10.py:1(<module>)
        1    0.000    0.000    0.001    0.001 figure.py:220(Figure)
       90    0.000    0.000    0.001    0.000 basic.py:475(<listcomp>)
      106    0.000    0.000    0.001    0.000 typing.py:932(__init__)
        1    0.000    0.000    0.001    0.001 texmanager.py:1(<module>)
     3959    0.001    0.000    0.001    0.000 typing.py:1341(<genexpr>)
       34    0.000    0.000    0.001    0.000 symbol.py:494(__new__)
        1    0.000    0.000    0.001    0.001 _linalg.py:1(<module>)
        1    0.000    0.000    0.001    0.001 sampler.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _graph_traversal.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _suppression.py:1(<module>)
        1    0.000    0.000    0.001    0.001 ctx_iv.py:306(__init__)
      130    0.000    0.000    0.001    0.000 dataclasses.py:371(_fields_in_init_order)
        1    0.001    0.001    0.001    0.001 {built-in method torch._C._rpc_init}
        1    0.000    0.000    0.001    0.001 __init__.py:149(EntryPoint)
        3    0.000    0.000    0.001    0.000 arrayprint.py:1487(_array_repr_implementation)
        1    0.000    0.000    0.001    0.001 _result_provenance.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _add_docstring.py:27(_parse_docstrings)
        4    0.000    0.000    0.001    0.000 __init__.py:2295(_make_reduction_prim)
       29    0.000    0.000    0.001    0.000 _array_api.py:553(xp_promote)
        1    0.000    0.000    0.001    0.001 _special_matrices.py:1(<module>)
       87    0.000    0.000    0.001    0.000 utils.py:83(groupby)
       45    0.000    0.000    0.001    0.000 basic.py:1386(has)
        1    0.000    0.000    0.001    0.001 ctx_iv.py:1(<module>)
       58    0.000    0.000    0.001    0.000 <frozen abc>:110(register)
        1    0.000    0.000    0.001    0.001 _translation_metadata.py:1(<module>)
      544    0.000    0.000    0.001    0.000 registration.py:159(add)
        1    0.000    0.000    0.001    0.001 ticker.py:1(<module>)
     4835    0.001    0.000    0.001    0.000 _ops.py:398(name)
        1    0.000    0.000    0.001    0.001 _rectangle.py:1(<module>)
     1034    0.001    0.000    0.001    0.000 {built-in method math.floor}
        1    0.000    0.000    0.001    0.001 _logical_location.py:1(<module>)
        1    0.000    0.000    0.001    0.001 __init__.py:1151(<listcomp>)
        3    0.000    0.000    0.001    0.000 arrayprint.py:561(array2string)
        5    0.000    0.000    0.001    0.000 decorator.py:177(create)
       72    0.000    0.000    0.001    0.000 pydoc.py:104(_finddoc)
       82    0.000    0.000    0.001    0.000 __init__.py:1873(make_alias)
        2    0.000    0.000    0.001    0.000 loader.py:1(<module>)
      237    0.000    0.000    0.001    0.000 libmpf.py:330(from_int)
      664    0.000    0.000    0.001    0.000 _pytree.py:89(_is_namedtuple_instance)
        1    0.000    0.000    0.001    0.001 _version_control_details.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _elffile.py:1(<module>)
       63    0.000    0.000    0.001    0.000 colors.py:848(<dictcomp>)
        1    0.000    0.000    0.001    0.001 operator_support.py:1(<module>)
      185    0.000    0.000    0.001    0.000 inspect.py:1449(formatannotation)
       58    0.000    0.000    0.001    0.000 {built-in method _abc._abc_register}
        1    0.000    0.000    0.001    0.001 texmanager.py:47(TexManager)
       19    0.000    0.000    0.001    0.000 functools.py:852(register)
     5303    0.001    0.000    0.001    0.000 inspect.py:3024(parameters)
        1    0.000    0.000    0.001    0.001 six.py:1(<module>)
     6709    0.001    0.000    0.001    0.000 {built-in method builtins.ord}
      420    0.000    0.000    0.001    0.000 _ops.py:505(overloads)
        1    0.000    0.000    0.001    0.001 polar.py:1(<module>)
     4878    0.001    0.000    0.001    0.000 basic.py:906(args)
        1    0.000    0.000    0.001    0.001 _node.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _message.py:1(<module>)
        1    0.000    0.000    0.001    0.001 ordinals.py:1(<module>)
       45    0.000    0.000    0.001    0.000 basic.py:1507(_has)
        1    0.001    0.001    0.001    0.001 comments.py:1007(CommentedKeyMap)
      130    0.000    0.000    0.001    0.000 dataclasses.py:574(<listcomp>)
       42    0.000    0.000    0.001    0.000 symbol.py:359(__xnew__)
       10    0.000    0.000    0.001    0.000 dataclasses.py:846(_hash_add)
        1    0.000    0.000    0.001    0.001 __init__.py:345(<listcomp>)
        1    0.000    0.000    0.001    0.001 _page_trend_test.py:1(<module>)
        1    0.001    0.001    0.001    0.001 platform.py:781(uname_result)
       12    0.000    0.000    0.001    0.000 _distribution_infrastructure.py:943(filtered)
        1    0.000    0.000    0.001    0.001 _stack_frame.py:1(<module>)
        1    0.000    0.000    0.001    0.001 __init__.py:421(PercentStyle)
     2519    0.000    0.000    0.001    0.000 {method 'setdefault' of 'dict' objects}
        1    0.000    0.000    0.001    0.001 pathlib.py:313(select_from)
        1    0.000    0.000    0.001    0.001 registration.py:1(<module>)
      245    0.000    0.000    0.001    0.000 _docscrape.py:591(get_func)
      540    0.000    0.000    0.001    0.000 _tensor_docs.py:8(add_docstr_all)
        1    0.000    0.000    0.001    0.001 binary.py:174(<dictcomp>)
      790    0.000    0.000    0.001    0.000 containers.py:66(__len__)
       18    0.000    0.000    0.001    0.000 arrayprint.py:1595(_array_str_implementation)
        1    0.000    0.000    0.001    0.001 _short_time_fft.py:229(ShortTimeFFT)
     2213    0.001    0.000    0.001    0.000 {method 'find' of 'bytearray' objects}
        1    0.000    0.000    0.001    0.001 relativedelta.py:18(relativedelta)
        1    0.000    0.000    0.000    0.000 ase.py:1(<module>)
      271    0.000    0.000    0.000    0.000 _parser.py:307(_class_escape)
      163    0.000    0.000    0.000    0.000 fromnumeric.py:53(_wrapfunc)
        7    0.000    0.000    0.000    0.000 periodic_table.py:1223(from_str)
      544    0.000    0.000    0.000    0.000 registration.py:135(__init__)
        1    0.000    0.000    0.000    0.000 widgets.py:1(<module>)
        1    0.000    0.000    0.000    0.000 internal.py:1(<module>)
        2    0.000    0.000    0.000    0.000 __init__.py:474(_get_data_path)
        3    0.000    0.000    0.000    0.000 arrayprint.py:523(_array2string)
      146    0.000    0.000    0.000    0.000 deprecation.py:24(_generate_deprecation_warning)
     1406    0.000    0.000    0.000    0.000 _parser.py:79(groups)
        1    0.000    0.000    0.000    0.000 diagonal.py:1(<module>)
     5522    0.000    0.000    0.000    0.000 copy.py:182(_deepcopy_atomic)
      248    0.000    0.000    0.000    0.000 _docscrape.py:531(_str_index)
       16    0.000    0.000    0.000    0.000 arraypad.py:533(pad)
      163    0.000    0.000    0.000    0.000 iterables.py:585(sift)
        1    0.000    0.000    0.000    0.000 polygon.py:1(<module>)
        2    0.000    0.000    0.000    0.000 qconfig.py:1(<module>)
       63    0.000    0.000    0.000    0.000 _axis_nan_policy.py:291(_get_axis_params)
       10    0.000    0.000    0.000    0.000 dataclasses.py:639(_hash_fn)
      217    0.000    0.000    0.000    0.000 enum.py:913(_check_for_existing_members_)
      146    0.000    0.000    0.000    0.000 enum.py:959(_find_data_type_)
       87    0.000    0.000    0.000    0.000 conflict.py:67(<dictcomp>)
      423    0.000    0.000    0.000    0.000 {method 'copy' of 'dict' objects}
      330    0.000    0.000    0.000    0.000 basic.py:468(inner_key)
        1    0.000    0.000    0.000    0.000 node.py:105(Node)
        1    0.000    0.000    0.000    0.000 pyplot.py:1872(get_plot_commands)
      540    0.000    0.000    0.000    0.000 dataclasses.py:821(_set_qualname)
        1    0.000    0.000    0.000    0.000 return_types.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _run_automation_details.py:1(<module>)
     1293    0.000    0.000    0.000    0.000 inspect.py:1182(tokeneater)
       14    0.000    0.000    0.000    0.000 __init__.py:2089(_warn_external)
       40    0.000    0.000    0.000    0.000 mul.py:483(_gather)
     1318    0.000    0.000    0.000    0.000 enum.py:69(_is_internal_class)
        1    0.000    0.000    0.000    0.000 _reporting_configuration.py:1(<module>)
     3709    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:71(_relax_case)
        1    0.000    0.000    0.000    0.000 _cm_listed.py:1(<module>)
   190/92    0.000    0.000    0.000    0.000 core.py:1956(__str__)
     1164    0.000    0.000    0.000    0.000 {built-in method torch._C._add_docstr}
        1    0.000    0.000    0.000    0.000 libintmath.py:127(<listcomp>)
       15    0.000    0.000    0.000    0.000 typing.py:2916(<dictcomp>)
     1191    0.000    0.000    0.000    0.000 libintmath.py:91(python_bitcount)
      129    0.000    0.000    0.000    0.000 fromnumeric.py:1025(argsort)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1(<module>)
        1    0.000    0.000    0.000    0.000 utils.py:34(envwrap)
        1    0.000    0.000    0.000    0.000 _physical_location.py:1(<module>)
      748    0.000    0.000    0.000    0.000 dataclasses.py:267(__init__)
        1    0.000    0.000    0.000    0.000 _location_relationship.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _sarif_log.py:1(<module>)
  280/140    0.000    0.000    0.000    0.000 module.py:2224(named_modules)
       87    0.000    0.000    0.000    0.000 utils.py:61(reverse_dict)
       24    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:386(draw)
      459    0.000    0.000    0.000    0.000 iterables.py:1943(<genexpr>)
      325    0.000    0.000    0.000    0.000 function_base.py:483(_add_docstring)
        1    0.000    0.000    0.000    0.000 _edge_traversal.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _reporting_descriptor_relationship.py:1(<module>)
        1    0.000    0.000    0.000    0.000 utils.py:73(<dictcomp>)
        1    0.000    0.000    0.000    0.000 ops.py:1(<module>)
     10/4    0.000    0.000    0.000    0.000 core.py:4409(streamline)
        1    0.000    0.000    0.000    0.000 _edge.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _multiformat_message_string.py:1(<module>)
        1    0.000    0.000    0.000    0.000 backend_agg.py:389(FigureCanvasAgg)
     2336    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1565(<genexpr>)
      117    0.000    0.000    0.000    0.000 typing.py:1020(__typing_subst__)
        1    0.000    0.000    0.000    0.000 spherical_harmonics.py:1(<module>)
       28    0.000    0.000    0.000    0.000 _decorator.py:23(__call__)
      115    0.000    0.000    0.000    0.000 containers.py:100(__eq__)
        1    0.000    0.000    0.000    0.000 _trace.py:1(<module>)
        1    0.000    0.000    0.000    0.000 graph_manipulation.py:1(<module>)
      174    0.000    0.000    0.000    0.000 <frozen posixpath>:71(join)
       18    0.000    0.000    0.000    0.000 arrayprint.py:1588(_guarded_repr_or_str)
        1    0.000    0.000    0.000    0.000 gaussiandomains.py:1(<module>)
     1272    0.000    0.000    0.000    0.000 typing.py:882(__eq__)
       25    0.000    0.000    0.000    0.000 decorator.py:317(deprecated_decorator)
       18    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3211(_moment_central_dispatch)
        1    0.000    0.000    0.000    0.000 _add_newdocs_scalars.py:1(<module>)
        1    0.000    0.000    0.000    0.000 timeouts.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _external_property_file_reference.py:1(<module>)
        2    0.000    0.000    0.000    0.000 sysconfig.py:621(get_path)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1779(_validate)
        1    0.000    0.000    0.000    0.000 join.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:516(get_data_path)
        1    0.000    0.000    0.000    0.000 projections.py:1(<module>)
        2    0.000    0.000    0.000    0.000 sysconfig.py:609(get_paths)
        2    0.000    0.000    0.000    0.000 __init__.py:2078(_make_copy_from_view)
        1    0.000    0.000    0.000    0.000 encoder.py:1(<module>)
      347    0.000    0.000    0.000    0.000 pretty_symbology.py:10(U)
        1    0.000    0.000    0.000    0.000 _scalars.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dataloader.py:129(DataLoader)
        1    0.000    0.000    0.000    0.000 request.py:939(AbstractBasicAuthHandler)
        1    0.000    0.000    0.000    0.000 interpreter.py:16(Interpreter)
     1036    0.000    0.000    0.000    0.000 _parser.py:166(__setitem__)
        6    0.000    0.000    0.000    0.000 _version.py:55(__init__)
        1    0.000    0.000    0.000    0.000 gzip.py:25(open)
        1    0.000    0.000    0.000    0.000 band_data_in.py:60(generate_k_path)
        2    0.000    0.000    0.000    0.000 sysconfig.py:261(_expand_vars)
        1    0.000    0.000    0.000    0.000 due.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _tool_component_reference.py:1(<module>)
        1    0.000    0.000    0.000    0.000 reductions.py:148(<dictcomp>)
        1    0.000    0.000    0.000    0.000 version.py:112(StrictVersion)
       49    0.000    0.000    0.000    0.000 core.py:131(get_object_signature)
      436    0.000    0.000    0.000    0.000 {method '__reduce_ex__' of 'object' objects}
        6    0.000    0.000    0.000    0.000 deprecation.py:56(warn_deprecated)
      148    0.000    0.000    0.000    0.000 enum.py:753(__getattr__)
        1    0.000    0.000    0.000    0.000 _relative_risk.py:1(<module>)
     3221    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 modules.py:606(SubModule)
        5    0.000    0.000    0.000    0.000 perm_groups.py:144(<listcomp>)
  460/100    0.000    0.000    0.000    0.000 sorting.py:168(_node_count)
     2361    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:413(has_location)
       10    0.000    0.000    0.000    0.000 contextlib.py:78(inner)
      135    0.000    0.000    0.000    0.000 pyplot.py:1884(<genexpr>)
        1    0.000    0.000    0.000    0.000 _fix.py:1(<module>)
       73    0.000    0.000    0.000    0.000 {built-in method torch.ones}
        1    0.000    0.000    0.000    0.000 queue.py:1(<module>)
        1    0.000    0.000    0.000    0.000 options.py:1(<module>)
       57    0.000    0.000    0.000    0.000 <frozen posixpath>:228(expanduser)
     2520    0.000    0.000    0.000    0.000 __future__.py:20(get_overwrite_module_params_on_conversion)
       86    0.000    0.000    0.000    0.000 _parser.py:265(getuntil)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:833(validation)
        1    0.000    0.000    0.000    0.000 __init__.py:537(_get_data_path)
       52    0.000    0.000    0.000    0.000 core.py:894(__init__)
        2    0.000    0.000    0.000    0.000 _functions.py:1(<module>)
        1    0.000    0.000    0.000    0.000 gzip.py:134(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:569(matplotlib_fname)
        1    0.000    0.000    0.000    0.000 para4band.py:122(Para4Band_train)
      471    0.000    0.000    0.000    0.000 {built-in method fromkeys}
        1    0.000    0.000    0.000    0.000 backend.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ops.py:89(get_ops_with_reflection)
      398    0.000    0.000    0.000    0.000 _util.py:531(<listcomp>)
       82    0.000    0.000    0.000    0.000 symbolic_helper.py:358(decorator)
        1    0.000    0.000    0.000    0.000 _property_bag.py:1(<module>)
     1694    0.000    0.000    0.000    0.000 unicode.py:63(<genexpr>)
      110    0.000    0.000    0.000    0.000 _compiler.py:386(<listcomp>)
        2    0.000    0.000    0.000    0.000 _distn_infrastructure.py:4172(get_distribution_names)
       26    0.000    0.000    0.000    0.000 core.py:6855(__init__)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3276(_moment_standardized)
        1    0.000    0.000    0.000    0.000 ImageFile.py:1(<module>)
       91    0.000    0.000    0.000    0.000 core.py:2408(__init__)
        1    0.000    0.000    0.000    0.000 _lobpcg.py:1(<module>)
      188    0.000    0.000    0.000    0.000 colors.py:850(<listcomp>)
        5    0.000    0.000    0.000    0.000 ctx_iv.py:244(_binary_op)
      266    0.000    0.000    0.000    0.000 inspect.py:973(getmodule)
        1    0.000    0.000    0.000    0.000 entities.py:1(<module>)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3282(_moment_standardized_dispatch)
     4061    0.000    0.000    0.000    0.000 inspect.py:2733(default)
        1    0.000    0.000    0.000    0.000 collate.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ctx_fp.py:18(__init__)
       54    0.000    0.000    0.000    0.000 decorators.py:46(deco)
       68    0.000    0.000    0.000    0.000 _internal.py:14(get_xp)
        1    0.000    0.000    0.000    0.000 shape_prop.py:1(<module>)
        6    0.000    0.000    0.000    0.000 printer.py:424(decorator)
  157/148    0.000    0.000    0.000    0.000 fake_tensor.py:92(contains_tensor_types)
       25    0.000    0.000    0.000    0.000 typing.py:2013(__init_subclass__)
       26    0.000    0.000    0.000    0.000 core.py:6860(getdoc)
        1    0.000    0.000    0.000    0.000 backend_registry.py:1(<module>)
       13    0.000    0.000    0.000    0.000 _deprecation.py:20(decorator)
     2169    0.000    0.000    0.000    0.000 typing.py:1662(<genexpr>)
        9    0.000    0.000    0.000    0.000 _multivariate.py:5755(_docfill)
     3325    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}
      109    0.000    0.000    0.000    0.000 inspect.py:2068(_signature_is_builtin)
        1    0.000    0.000    0.000    0.000 ExifTags.py:295(<dictcomp>)
        1    0.000    0.000    0.000    0.000 nvfuser_prims.py:664(register_var_mean)
        1    0.000    0.000    0.000    0.000 artist.py:1236(ArtistInspector)
     1760    0.000    0.000    0.000    0.000 dataclasses.py:427(<genexpr>)
      140    0.000    0.000    0.000    0.000 basic.py:497(__eq__)
      776    0.000    0.000    0.000    0.000 enum.py:188(__get__)
        6    0.000    0.000    0.000    0.000 rcsetup.py:340(validate_color_or_inherit)
        1    0.000    0.000    0.000    0.000 _spdx.py:1(<module>)
       87    0.000    0.000    0.000    0.000 _docscrape.py:658(splitlines_x)
        6    0.000    0.000    0.000    0.000 printer.py:392(__init__)
     2603    0.000    0.000    0.000    0.000 {built-in method sys.getrecursionlimit}
      231    0.000    0.000    0.000    0.000 _compiler.py:465(_get_charset_prefix)
        1    0.000    0.000    0.000    0.000 dlpack.py:1(<module>)
       62    0.000    0.000    0.000    0.000 decorator.py:233(memoize_property)
        1    0.000    0.000    0.000    0.000 hadamard.py:1(<module>)
      456    0.000    0.000    0.000    0.000 feedparser.py:128(__next__)
        1    0.000    0.000    0.000    0.000 mlab.py:1(<module>)
        1    0.000    0.000    0.000    0.000 piecewise.py:1(<module>)
       50    0.000    0.000    0.000    0.000 numbers.py:1622(__eq__)
      154    0.000    0.000    0.000    0.000 <frozen _collections_abc>:428(__new__)
      398    0.000    0.000    0.000    0.000 _util.py:553(<dictcomp>)
        3    0.000    0.000    0.000    0.000 typing.py:2852(NamedTuple)
      398    0.000    0.000    0.000    0.000 _util.py:536(<listcomp>)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3308(_moment_standardized_normalize)
        1    0.000    0.000    0.000    0.000 pickle.py:197(<listcomp>)
      778    0.000    0.000    0.000    0.000 _ops.py:419(__init__)
     1282    0.000    0.000    0.000    0.000 dataclasses.py:647(_is_classvar)
     1371    0.000    0.000    0.000    0.000 {method 'capitalize' of 'str' objects}
        1    0.000    0.000    0.000    0.000 main.py:57(__init__)
       54    0.000    0.000    0.000    0.000 decorators.py:52(__sympifyit)
        1    0.000    0.000    0.000    0.000 selectors.py:1(<module>)
      347    0.000    0.000    0.000    0.000 {built-in method unicodedata.lookup}
       12    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:724(validate)
        1    0.000    0.000    0.000    0.000 datapipes.py:1(<module>)
        1    0.000    0.000    0.000    0.000 polyerrors.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _symbolic_trace.py:204(Tracer)
      194    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1293(_get_parent_path)
        1    0.000    0.000    0.000    0.000 gammasimp.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ask.py:21(AssumptionKeys)
      398    0.000    0.000    0.000    0.000 _util.py:546(<listcomp>)
      216    0.000    0.000    0.000    0.000 _policybase.py:293(header_source_parse)
        1    0.000    0.000    0.000    0.000 matadd.py:1(<module>)
       82    0.000    0.000    0.000    0.000 linecache.py:52(checkcache)
      482    0.000    0.000    0.000    0.000 dataclasses.py:306(__set_name__)
        4    0.000    0.000    0.000    0.000 __init__.py:590(gen_candidates)
        1    0.000    0.000    0.000    0.000 colorbar.py:321(ColorbarBase)
       13    0.000    0.000    0.000    0.000 deprecation.py:277(_rename_parameter)
       50    0.000    0.000    0.000    0.000 containers.py:177(<lambda>)
        1    0.000    0.000    0.000    0.000 _special_locations.py:1(<module>)
        5    0.000    0.000    0.000    0.000 decorator.py:144(make)
        1    0.000    0.000    0.000    0.000 permutation.py:1(<module>)
        3    0.000    0.000    0.000    0.000 <decorator-gen-1>:1(_held_figure)
      398    0.000    0.000    0.000    0.000 _util.py:550(<dictcomp>)
        1    0.000    0.000    0.000    0.000 symbolic_opset8.py:1(<module>)
       24    0.000    0.000    0.000    0.000 core.py:5818(__init__)
        3    0.000    0.000    0.000    0.000 decorator.py:200(decorate)
       40    0.000    0.000    0.000    0.000 core.py:2462(__init__)
      171    0.000    0.000    0.000    0.000 typing.py:1287(__instancecheck__)
        1    0.000    0.000    0.000    0.000 main.py:761(official_plug_ins)
        3    0.000    0.000    0.000    0.000 arrayprint.py:452(_get_format_function)
        2    0.000    0.000    0.000    0.000 determinant.py:1(<module>)
        1    0.000    0.000    0.000    0.000 expr_with_limits.py:1(<module>)
        6    0.000    0.000    0.000    0.000 typing.py:1360(__ror__)
      827    0.000    0.000    0.000    0.000 {method 'update' of 'set' objects}
       19    0.000    0.000    0.000    0.000 path.py:98(__init__)
       10    0.000    0.000    0.000    0.000 _torch_docs.py:10(parse_kwargs)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1506(UnivariateDistribution)
       62    0.000    0.000    0.000    0.000 __init__.py:873(normalize)
        1    0.000    0.000    0.000    0.000 _sources.py:1(<module>)
       28    0.000    0.000    0.000    0.000 inspect.py:2248(p)
       35    0.000    0.000    0.000    0.000 transforms.py:1251(__init_subclass__)
        4    0.000    0.000    0.000    0.000 assumptions.py:509(_ask)
        1    0.000    0.000    0.000    0.000 constraints.py:1(<module>)
       34    0.000    0.000    0.000    0.000 core.py:3064(__init__)
       26    0.000    0.000    0.000    0.000 _jit_internal.py:1125(_qualified_name)
      129    0.000    0.000    0.000    0.000 {method 'argsort' of 'numpy.ndarray' objects}
      100    0.000    0.000    0.000    0.000 iterables.py:1970(uniq)
     2163    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1122(get_filename)
      191    0.000    0.000    0.000    0.000 typing.py:1608(<genexpr>)
        4    0.000    0.000    0.000    0.000 core.py:1518(__mul__)
      590    0.000    0.000    0.000    0.000 _compiler.py:568(isstring)
        1    0.000    0.000    0.000    0.000 importtools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 threading.py:1(<module>)
      240    0.000    0.000    0.000    0.000 functools.py:479(lru_cache)
        3    0.000    0.000    0.000    0.000 decorators.py:123(sympify_method_args)
      115    0.000    0.000    0.000    0.000 inspect.py:776(_findclass)
        1    0.000    0.000    0.000    0.000 glob.py:13(glob)
        1    0.000    0.000    0.000    0.000 argparse.py:1(<module>)
        1    0.000    0.000    0.000    0.000 types.py:1(<module>)
      757    0.000    0.000    0.000    0.000 __init__.py:907(<lambda>)
        1    0.000    0.000    0.000    0.000 containers.py:1(<module>)
        7    0.000    0.000    0.000    0.000 power.py:136(__new__)
       52    0.000    0.000    0.000    0.000 package_importer.py:687(_patched_getfile)
        1    0.000    0.000    0.000    0.000 _script.py:892(_get_methods)
       43    0.000    0.000    0.000    0.000 decompositions.py:43(type_casts)
       22    0.000    0.000    0.000    0.000 core.py:4215(_generateDefaultName)
       18    0.000    0.000    0.000    0.000 message.py:489(get)
       10    0.000    0.000    0.000    0.000 symbol.py:654(symbols)
      536    0.000    0.000    0.000    0.000 function_base.py:348(iterable)
        1    0.000    0.000    0.000    0.000 gmpy.py:110(_get_flint)
        1    0.000    0.000    0.000    0.000 _base.py:422(_AxesBase)
        1    0.000    0.000    0.000    0.000 __init__.py:486(get_configdir)
      735    0.000    0.000    0.000    0.000 dataclasses.py:511(_init_param)
        1    0.000    0.000    0.000    0.000 _named_member_accessor.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sharding.py:1(<module>)
       26    0.000    0.000    0.000    0.000 _sources.py:102(make_source_context)
        1    0.000    0.000    0.000    0.000 nanfunctions.py:1(<module>)
      436    0.000    0.000    0.000    0.000 copyreg.py:104(__newobj__)
      958    0.000    0.000    0.000    0.000 utils.py:56(<genexpr>)
       71    0.000    0.000    0.000    0.000 typing.py:335(_flatten_literal_params)
       30    0.000    0.000    0.000    0.000 _array_api.py:503(xp_result_type)
       12    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:352(contains)
       21    0.000    0.000    0.000    0.000 symbol.py:325(__new__)
      3/1    0.000    0.000    0.000    0.000 glob.py:60(_iglob)
       54    0.000    0.000    0.000    0.000 __init__.py:1378(_fixupParents)
        1    0.000    0.000    0.000    0.000 _color_data.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3017(sample)
       73    0.000    0.000    0.000    0.000 rcsetup.py:90(<listcomp>)
        1    0.000    0.000    0.000    0.000 __init__.py:258(WordSet)
        2    0.000    0.000    0.000    0.000 doccer.py:263(filldoc)
        1    0.000    0.000    0.000    0.000 axis.py:628(Axis)
        1    0.000    0.000    0.000    0.000 glob.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _foreach_utils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 periodic_table.py:72(ElementBase)
        3    0.000    0.000    0.000    0.000 arrayprint.py:411(<lambda>)
        1    0.000    0.000    0.000    0.000 symbolic_opset12.py:1(<module>)
     1282    0.000    0.000    0.000    0.000 dataclasses.py:655(_is_initvar)
        4    0.000    0.000    0.000    0.000 assumptions.py:481(copy)
      295    0.000    0.000    0.000    0.000 {built-in method _sre.compile}
     1034    0.000    0.000    0.000    0.000 _tensor_str.py:173(width)
      295    0.000    0.000    0.000    0.000 _distn_infrastructure.py:839(<genexpr>)
        1    0.000    0.000    0.000    0.000 markers.py:145(MarkerStyle)
        2    0.000    0.000    0.000    0.000 doccer.py:292(unindent_dict)
        1    0.000    0.000    0.000    0.000 split_module.py:1(<module>)
        1    0.000    0.000    0.000    0.000 binrel.py:1(<module>)
        1    0.000    0.000    0.000    0.000 symbolic_opset13.py:1(<module>)
       26    0.000    0.000    0.000    0.000 _sources.py:37(normalize_source_lines)
        1    0.000    0.000    0.000    0.000 periodic_table.py:1536(from_str)
        1    0.000    0.000    0.000    0.000 _meta.py:1(<module>)
        1    0.000    0.000    0.000    0.000 geo.py:1(<module>)
        1    0.000    0.000    0.000    0.000 partitions.py:1(<module>)
        3    0.000    0.000    0.000    0.000 arrayprint.py:907(__init__)
        1    0.000    0.000    0.000    0.000 passthrough.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _mgc.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pkgutil.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _tensor.py:81(Tensor)
        2    0.000    0.000    0.000    0.000 _new_distributions.py:49(__init__)
        1    0.000    0.000    0.000    0.000 conventions.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _conversions.py:1(<module>)
        1    0.000    0.000    0.000    0.000 umath.py:1(<module>)
        1    0.000    0.000    0.000    0.000 profiler_util.py:1(<module>)
        1    0.000    0.000    0.000    0.000 collections.py:22(Collection)
        1    0.000    0.000    0.000    0.000 para4band.py:1(<module>)
       77    0.000    0.000    0.000    0.000 <frozen posixpath>:150(dirname)
      200    0.000    0.000    0.000    0.000 {built-in method builtins.locals}
      187    0.000    0.000    0.000    0.000 typing.py:908(_is_unpacked_typevartuple)
        1    0.000    0.000    0.000    0.000 unicode.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _multiufuncs.py:1(<module>)
        1    0.000    0.000    0.000    0.000 add.py:1(<module>)
       41    0.000    0.000    0.000    0.000 decorators.py:110(priority_decorator)
        1    0.000    0.000    0.000    0.000 _named_member_accessor.py:85(NamedMemberAccessor)
        1    0.000    0.000    0.000    0.000 ctypeslib.py:1(<module>)
        1    0.000    0.000    0.000    0.000 zipfile.py:1(<module>)
  420/397    0.000    0.000    0.000    0.000 basic.py:315(__hash__)
        3    0.000    0.000    0.000    0.000 streams.py:1(<module>)
      367    0.000    0.000    0.000    0.000 permutations.py:1385(<listcomp>)
       24    0.000    0.000    0.000    0.000 doccer.py:311(unindent_string)
     1330    0.000    0.000    0.000    0.000 {built-in method sys.intern}
        5    0.000    0.000    0.000    0.000 perm_groups.py:146(<listcomp>)
      790    0.000    0.000    0.000    0.000 containers.py:63(<genexpr>)
       10    0.000    0.000    0.000    0.000 typing_extensions.py:633(__new__)
        2    0.000    0.000    0.000    0.000 traceback.py:29(format_list)
        1    0.000    0.000    0.000    0.000 sysconfig.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2391(skewness)
        1    0.000    0.000    0.000    0.000 numpy.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _exporter_states.py:1(<module>)
       17    0.000    0.000    0.000    0.000 {built-in method _functools.reduce}
        1    0.000    0.000    0.000    0.000 _lobpcg.py:257(LOBPCGAutogradFunction)
        1    0.000    0.000    0.000    0.000 compatibility.py:1(<module>)
       71    0.000    0.000    0.000    0.000 inspect.py:2745(replace)
        1    0.000    0.000    0.000    0.000 proxy.py:83(TracerBase)
       30    0.000    0.000    0.000    0.000 symbolic_opset9.py:292(_apply)
        1    0.000    0.000    0.000    0.000 nvfuser_prims.py:771(register_view)
        1    0.000    0.000    0.000    0.000 array_comprehension.py:1(<module>)
        3    0.000    0.000    0.000    0.000 arrayprint.py:934(fillFormat)
        1    0.000    0.000    0.000    0.000 adjoint.py:1(<module>)
     2163    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:931(create_module)
        1    0.000    0.000    0.000    0.000 sympy_parser.py:1(<module>)
        1    0.000    0.000    0.000    0.000 callable.py:171(CollatorIterDataPipe)
       48    0.000    0.000    0.000    0.000 periodic_table.py:1057(__hash__)
      190    0.000    0.000    0.000    0.000 pyplot.py:82(_copy_docstring_and_deprecators)
       14    0.000    0.000    0.000    0.000 __init__.py:198(split)
        1    0.000    0.000    0.000    0.000 functional_call.py:1(<module>)
      453    0.000    0.000    0.000    0.000 {built-in method numpy.asarray}
       10    0.000    0.000    0.000    0.000 _contextlib.py:123(__call__)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1(<module>)
      605    0.000    0.000    0.000    0.000 _inspect.py:13(ismethod)
        8    0.000    0.000    0.000    0.000 typing.py:2248(get_type_hints)
        1    0.000    0.000    0.000    0.000 nvfuser_prims.py:385(register_full)
        1    0.000    0.000    0.000    0.000 padding.py:1(<module>)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3247(_moment_central_transform)
     12/2    0.000    0.000    0.000    0.000 core.py:1578(makeOptionalList)
       26    0.000    0.000    0.000    0.000 _sources.py:87(__init__)
        1    0.000    0.000    0.000    0.000 _musllinux.py:1(<module>)
       73    0.000    0.000    0.000    0.000 _internal.py:872(_ufunc_doc_signature_formatter)
      686    0.000    0.000    0.000    0.000 inspect.py:2457(<lambda>)
       12    0.000    0.000    0.000    0.000 message.py:591(get_content_type)
      171    0.000    0.000    0.000    0.000 typing.py:1546(__subclasscheck__)
        7    0.000    0.000    0.000    0.000 pathlib.py:909(home)
        2    0.000    0.000    0.000    0.000 conv_fused.py:1(<module>)
       87    0.000    0.000    0.000    0.000 docstring.py:38(__call__)
        2    0.000    0.000    0.000    0.000 decorator.py:215(decorator)
        1    0.000    0.000    0.000    0.000 _decorator.py:1(<module>)
        1    0.000    0.000    0.000    0.000 kronecker.py:1(<module>)
        2    0.000    0.000    0.000    0.000 normalization.py:1(<module>)
       30    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1276(__init__)
    429/1    0.000    0.000    0.000    0.000 __config__.py:14(_cleanup)
        2    0.000    0.000    0.000    0.000 sysconfig.py:253(_extend_dict)
        1    0.000    0.000    0.000    0.000 dviread.py:185(Dvi)
        2    0.000    0.000    0.000    0.000 units.py:1(<module>)
      268    0.000    0.000    0.000    0.000 libmpf.py:322(<genexpr>)
      259    0.000    0.000    0.000    0.000 dataclasses.py:389(<listcomp>)
     49/1    0.000    0.000    0.000    0.000 __config__.py:20(<dictcomp>)
        1    0.000    0.000    0.000    0.000 matrixbase.py:99(MatrixBase)
        2    0.000    0.000    0.000    0.000 traceback.py:1(<module>)
        3    0.000    0.000    0.000    0.000 functions.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _comparison.py:310(Pair)
        1    0.000    0.000    0.000    0.000 transformer.py:1(<module>)
        1    0.000    0.000    0.000    0.000 artist.py:60(Artist)
      156    0.000    0.000    0.000    0.000 inspect.py:330(isdatadescriptor)
      325    0.000    0.000    0.000    0.000 function_base.py:465(_needs_add_docstring)
        1    0.000    0.000    0.000    0.000 pickletools.py:2224(assure_pickle_consistency)
       79    0.000    0.000    0.000    0.000 core.py:4216(<genexpr>)
       52    0.000    0.000    0.000    0.000 inspect.py:896(getfile)
     2914    0.000    0.000    0.000    0.000 basic.py:208(__sympy__)
        1    0.000    0.000    0.000    0.000 streamreader.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:917(<dictcomp>)
        1    0.000    0.000    0.000    0.000 rcsetup.py:1504(<dictcomp>)
      172    0.000    0.000    0.000    0.000 decorator.py:184(public)
     1239    0.000    0.000    0.000    0.000 {built-in method sys._getframe}
       95    0.000    0.000    0.000    0.000 permutations.py:2051(is_identity)
      251    0.000    0.000    0.000    0.000 _docscrape.py:393(<setcomp>)
        1    0.000    0.000    0.000    0.000 bisect.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sysconfig.py:443(get_makefile_filename)
      606    0.000    0.000    0.000    0.000 <frozen posixpath>:41(_get_sep)
      232    0.000    0.000    0.000    0.000 function.py:147(<listcomp>)
        2    0.000    0.000    0.000    0.000 traceback.py:513(format)
       32    0.000    0.000    0.000    0.000 rcsetup.py:925(<genexpr>)
        1    0.000    0.000    0.000    0.000 case.py:1(<module>)
       24    0.000    0.000    0.000    0.000 _add_newdocs_scalars.py:71(add_newdoc_for_scalar_type)
        2    0.000    0.000    0.000    0.000 quant_type.py:1(<module>)
        1    0.000    0.000    0.000    0.000 graph_module.py:283(GraphModule)
       27    0.000    0.000    0.000    0.000 singleton.py:190(__init__)
        1    0.000    0.000    0.000    0.000 TiffTags.py:439(_populate)
        1    0.000    0.000    0.000    0.000 _monkeytype_config.py:1(<module>)
        1    0.000    0.000    0.000    0.000 results.py:1(<module>)
        1    0.000    0.000    0.000    0.000 glob.py:105(_glob1)
        1    0.000    0.000    0.000    0.000 axis.py:34(Tick)
        1    0.000    0.000    0.000    0.000 str.py:1(<module>)
      135    0.000    0.000    0.000    0.000 core.py:2016(__eq__)
      130    0.000    0.000    0.000    0.000 dataclasses.py:550(<dictcomp>)
       26    0.000    0.000    0.000    0.000 _mangling.py:44(is_mangled)
        1    0.000    0.000    0.000    0.000 runners.py:1(<module>)
      449    0.000    0.000    0.000    0.000 __init__.py:57(register_decomposition)
       17    0.000    0.000    0.000    0.000 getlimits.py:484(__new__)
        1    0.000    0.000    0.000    0.000 container.py:42(Sequential)
        4    0.000    0.000    0.000    0.000 sparse.py:1(<module>)
        1    0.000    0.000    0.000    0.000 quaternion.py:1(<module>)
        3    0.000    0.000    0.000    0.000 pyplot.py:794(close)
      248    0.000    0.000    0.000    0.000 _docscrape.py:465(_str_summary)
       10    0.000    0.000    0.000    0.000 {function SeedSequence.generate_state at 0x151b0a4c6a20}
      456    0.000    0.000    0.000    0.000 feedparser.py:78(readline)
       12    0.000    0.000    0.000    0.000 core.py:6035(__init__)
       23    0.000    0.000    0.000    0.000 overrides.py:177(decorator)
        1    0.000    0.000    0.000    0.000 _binned_statistic.py:1(<module>)
     1623    0.000    0.000    0.000    0.000 permutations.py:456(<genexpr>)
        1    0.000    0.000    0.000    0.000 nccl.py:1(<module>)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fileopener.py:1(<module>)
        1    0.000    0.000    0.000    0.000 parametrize.py:1(<module>)
        4    0.000    0.000    0.000    0.000 constants.py:1(<module>)
      552    0.000    0.000    0.000    0.000 <frozen os>:759(decode)
      267    0.000    0.000    0.000    0.000 function.py:152(<lambda>)
      737    0.000    0.000    0.000    0.000 dataclasses.py:439(_field_assign)
        2    0.000    0.000    0.000    0.000 _new_distributions.py:391(__init__)
        3    0.000    0.000    0.000    0.000 _pylab_helpers.py:79(destroy_all)
        2    0.000    0.000    0.000    0.000 operations.py:623(register_handlerclass)
        1    0.000    0.000    0.000    0.000 pydoc.py:465(Doc)
       26    0.000    0.000    0.000    0.000 core.py:921(__init__)
      295    0.000    0.000    0.000    0.000 _parser.py:954(fix_flags)
      453    0.000    0.000    0.000    0.000 wrappers.py:210(<genexpr>)
      970    0.000    0.000    0.000    0.000 _array_api.py:665(_render)
        1    0.000    0.000    0.000    0.000 selecting.py:1(<module>)
       30    0.000    0.000    0.000    0.000 _inspect.py:140(formatargspec)
        1    0.000    0.000    0.000    0.000 _multivariate.py:2694(__init__)
        1    0.000    0.000    0.000    0.000 isoparser.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _comparison.py:30(ErrorMeta)
       16    0.000    0.000    0.000    0.000 structure.py:3569(nelectrons)
       16    0.000    0.000    0.000    0.000 __init__.py:482(cycler)
       48    0.000    0.000    0.000    0.000 periodic_table.py:1485(__str__)
      243    0.000    0.000    0.000    0.000 iterables.py:3083(is_sequence)
       27    0.000    0.000    0.000    0.000 pathlib.py:353(_select_from)
       42    0.000    0.000    0.000    0.000 core.py:277(wrapper)
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1536(find_distributions)
        1    0.000    0.000    0.000    0.000 rrule.py:1(<module>)
        1    0.000    0.000    0.000    0.000 expr.py:46(Expr)
        1    0.000    0.000    0.000    0.000 scale.py:670(_get_scale_docs)
       26    0.000    0.000    0.000    0.000 {slot wrapper '__init__' of 'object' objects}
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2394(kurtosis)
        1    0.000    0.000    0.000    0.000 tensor_can.py:1(<module>)
       23    0.000    0.000    0.000    0.000 core.py:5355(__init__)
       35    0.000    0.000    0.000    0.000 module.py:2167(children)
        1    0.000    0.000    0.000    0.000 ExifTags.py:305(GPS)
       43    0.000    0.000    0.000    0.000 pathlib.py:546(__fspath__)
     1019    0.000    0.000    0.000    0.000 permutations.py:1065(array_form)
      231    0.000    0.000    0.000    0.000 inspect.py:1950(_signature_get_user_defined_method)
        7    0.000    0.000    0.000    0.000 ops.py:136(<listcomp>)
       10    0.000    0.000    0.000    0.000 _contextlib.py:69(context_decorator)
       24    0.000    0.000    0.000    0.000 dviread.py:167(decorate)
        1    0.000    0.000    0.000    0.000 _crosstab.py:1(<module>)
       37    0.000    0.000    0.000    0.000 decorators.py:214(make_wrapped)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:29(_initialize)
      519    0.000    0.000    0.000    0.000 inspect.py:300(ismethod)
        8    0.000    0.000    0.000    0.000 _multiufuncs.py:25(__init__)
        2    0.000    0.000    0.000    0.000 _new_distributions.py:296(__init__)
     1048    0.000    0.000    0.000    0.000 _ops.py:313(py_impl)
       13    0.000    0.000    0.000    0.000 enum.py:1473(__or__)
        1    0.000    0.000    0.000    0.000 polyoptions.py:300(Wrt)
        1    0.000    0.000    0.000    0.000 _interface.py:1(<module>)
        1    0.000    0.000    0.000    0.000 net_min_base.py:89(_MinimizerBase)
      108    0.000    0.000    0.000    0.000 typing.py:2532(overload)
        2    0.000    0.000    0.000    0.000 _multivariate.py:2009(__init__)
        1    0.000    0.000    0.000    0.000 instancenorm.py:1(<module>)
     1282    0.000    0.000    0.000    0.000 dataclasses.py:661(_is_kw_only)
        1    0.000    0.000    0.000    0.000 tasks.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _itertools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 animation.py:408(FileMovieWriter)
        1    0.000    0.000    0.000    0.000 _hook_iterator.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:746(copy)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:922(ShapeEnv)
        1    0.000    0.000    0.000    0.000 gmpy.py:135(_get_gmpy2)
        1    0.000    0.000    0.000    0.000 plane.py:1(<module>)
       95    0.000    0.000    0.000    0.000 permutations.py:2055(is_Identity)
        1    0.000    0.000    0.000    0.000 path.py:23(Path)
       19    0.000    0.000    0.000    0.000 _continuous_distns.py:59(_call_super_mom)
      364    0.000    0.000    0.000    0.000 socket.py:83(<lambda>)
        1    0.000    0.000    0.000    0.000 options.py:43(TensorPipeRpcBackendOptions)
        1    0.000    0.000    0.000    0.000 __init__.py:747(<dictcomp>)
      472    0.000    0.000    0.000    0.000 facts.py:579(__init__)
        2    0.000    0.000    0.000    0.000 kind.py:287(_)
        1    0.000    0.000    0.000    0.000 funcmatrix.py:1(<module>)
        2    0.000    0.000    0.000    0.000 _shape.py:1(<module>)
      222    0.000    0.000    0.000    0.000 wrappers.py:187(out_wrapper)
        1    0.000    0.000    0.000    0.000 nvfuser_prims.py:605(register_rand_like)
        3    0.000    0.000    0.000    0.000 {built-in method gc.collect}
     1023    0.000    0.000    0.000    0.000 _docscrape.py:46(reset)
        2    0.000    0.000    0.000    0.000 fused.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _version.py:114(_compare)
        1    0.000    0.000    0.000    0.000 _meta.py:7(PackageMetadata)
        1    0.000    0.000    0.000    0.000 process.py:1(<module>)
        1    0.000    0.000    0.000    0.000 flatten.py:1(<module>)
        1    0.000    0.000    0.000    0.000 param_fetch.py:1(<module>)
      363    0.000    0.000    0.000    0.000 socket.py:78(<lambda>)
    347/1    0.000    0.000    0.000    0.000 __config__.py:19(_cleanup)
      420    0.000    0.000    0.000    0.000 _ops.py:506(<listcomp>)
        2    0.000    0.000    0.000    0.000 fuser_method_mappings.py:1(<module>)
       82    0.000    0.000    0.000    0.000 return_types.py:9(pytree_register_structseq)
        1    0.000    0.000    0.000    0.000 _type_utils.py:58(JitScalarType)
     39/1    0.000    0.000    0.000    0.000 __config__.py:25(<dictcomp>)
        1    0.000    0.000    0.000    0.000 filelister.py:1(<module>)
      366    0.000    0.000    0.000    0.000 socket.py:93(<lambda>)
        1    0.000    0.000    0.000    0.000 importtools.py:48(import_module)
        1    0.000    0.000    0.000    0.000 repmatrix.py:566(__new__)
        2    0.000    0.000    0.000    0.000 _version.py:151(__ge__)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3336(_moment_transform_center)
       24    0.000    0.000    0.000    0.000 dtypes.py:66(_add_dtype_helper)
        1    0.000    0.000    0.000    0.000 _encoded_words.py:1(<module>)
        1    0.000    0.000    0.000    0.000 graycode.py:1(<module>)
      309    0.000    0.000    0.000    0.000 types.py:164(__init__)
       56    0.000    0.000    0.000    0.000 pathlib.py:536(__str__)
       20    0.000    0.000    0.000    0.000 numbers.py:3148(__eq__)
      605    0.000    0.000    0.000    0.000 _inspect.py:26(isfunction)
        1    0.000    0.000    0.000    0.000 _decorator.py:63(non_deterministic)
        1    0.000    0.000    0.000    0.000 _decomp_cossin.py:1(<module>)
     1534    0.000    0.000    0.000    0.000 {method 'isupper' of 'str' objects}
        1    0.000    0.000    0.000    0.000 ndim_array.py:1(<module>)
      365    0.000    0.000    0.000    0.000 socket.py:88(<lambda>)
      213    0.000    0.000    0.000    0.000 ctx_fp.py:51(_wrap_specfun)
     1260    0.000    0.000    0.000    0.000 colors.py:276(<genexpr>)
        1    0.000    0.000    0.000    0.000 widgets.py:1087(SubplotTool)
        9    0.000    0.000    0.000    0.000 message.py:615(get_content_maintype)
       35    0.000    0.000    0.000    0.000 {built-in method torch._C._nn._parse_to}
        3    0.000    0.000    0.000    0.000 _adapters.py:35(__init__)
        1    0.000    0.000    0.000    0.000 isoparser.py:42(isoparser)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:1(<module>)
      248    0.000    0.000    0.000    0.000 _docscrape.py:460(_str_signature)
        1    0.000    0.000    0.000    0.000 arraysetops.py:1(<module>)
       27    0.000    0.000    0.000    0.000 artist.py:20(allow_rasterization)
        1    0.000    0.000    0.000    0.000 graph.py:19(Node)
       55    0.000    0.000    0.000    0.000 __init__.py:1447(__init__)
        1    0.000    0.000    0.000    0.000 _interpolate.py:282(__init__)
       18    0.000    0.000    0.000    0.000 __init__.py:811(mtime)
       32    0.000    0.000    0.000    0.000 basic.py:2117(_exec_constructor_postprocessors)
        1    0.000    0.000    0.000    0.000 ctypeslib.py:360(_get_scalar_type_map)
      248    0.000    0.000    0.000    0.000 _docscrape.py:470(_str_extended_summary)
       72    0.000    0.000    0.000    0.000 pydoc.py:94(_findclass)
       27    0.000    0.000    0.000    0.000 <frozen genericpath>:27(isfile)
        1    0.000    0.000    0.000    0.000 polytools.py:106(Poly)
       42    0.000    0.000    0.000    0.000 traceback.py:458(format_frame_summary)
        1    0.000    0.000    0.000    0.000 repmatrix.py:569(_new)
      266    0.000    0.000    0.000    0.000 <frozen os>:696(__iter__)
        1    0.000    0.000    0.000    0.000 join.py:112(Join)
       36    0.000    0.000    0.000    0.000 inspect.py:402(isgeneratorfunction)
      544    0.000    0.000    0.000    0.000 registration.py:267(onnx_symbolic)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2385(variance)
      273    0.000    0.000    0.000    0.000 typing_extensions.py:3054(_check_generic)
        1    0.000    0.000    0.000    0.000 pathlib.py:281(_make_selector)
        3    0.000    0.000    0.000    0.000 __init__.py:893(find_distributions)
      304    0.000    0.000    0.000    0.000 _docscrape.py:374(<listcomp>)
       16    0.000    0.000    0.000    0.000 __init__.py:546(_cycler)
      628    0.000    0.000    0.000    0.000 _pytree.py:121(<listcomp>)
     1191    0.000    0.000    0.000    0.000 {built-in method _bisect.bisect_right}
        1    0.000    0.000    0.000    0.000 _covariance.py:1(<module>)
        1    0.000    0.000    0.000    0.000 order.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ctypeslib.py:371(<dictcomp>)
        3    0.000    0.000    0.000    0.000 _adapters.py:42(_repair_headers)
        1    0.000    0.000    0.000    0.000 __init__.py:342(<listcomp>)
        5    0.000    0.000    0.000    0.000 symbol.py:339(_canonical_assumptions)
        1    0.000    0.000    0.000    0.000 calendar.py:1(<module>)
       32    0.000    0.000    0.000    0.000 arraypad.py:458(_as_pairs)
     2730    0.000    0.000    0.000    0.000 inspect.py:589(<lambda>)
        1    0.000    0.000    0.000    0.000 companion.py:1(<module>)
     2343    0.000    0.000    0.000    0.000 {built-in method builtins.chr}
       23    0.000    0.000    0.000    0.000 distributed_c10d.py:1432(exception_handler)
      226    0.000    0.000    0.000    0.000 rcsetup.py:150(validate_bool)
        1    0.000    0.000    0.000    0.000 timeouts.py:26(Timeout)
        1    0.000    0.000    0.000    0.000 _guards.py:83(Guard)
        1    0.000    0.000    0.000    0.000 container.py:684(ParameterDict)
      586    0.000    0.000    0.000    0.000 _inspect.py:41(iscode)
        1    0.000    0.000    0.000    0.000 package_exporter.py:186(PackageExporter)
        1    0.000    0.000    0.000    0.000 utils.py:76(wrap)
       89    0.000    0.000    0.000    0.000 _parser.py:894(_parse_flags)
        1    0.000    0.000    0.000    0.000 mathml.py:1(<module>)
        1    0.000    0.000    0.000    0.000 transpose.py:1(<module>)
      126    0.000    0.000    0.000    0.000 colors.py:704(__init__)
        1    0.000    0.000    0.000    0.000 quiver.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pathlib.py:349(__init__)
      185    0.000    0.000    0.000    0.000 {built-in method _imp.is_builtin}
       15    0.000    0.000    0.000    0.000 symbolic_opset10.py:67(_apply)
        5    0.000    0.000    0.000    0.000 decorator.py:75(__init__)
       28    0.000    0.000    0.000    0.000 <frozen _collections_abc>:778(__contains__)
        1    0.000    0.000    0.000    0.000 _nested_sequence.py:1(<module>)
        7    0.000    0.000    0.000    0.000 pathlib.py:1377(expanduser)
      426    0.000    0.000    0.000    0.000 {method 'finditer' of 're.Pattern' objects}
        1    0.000    0.000    0.000    0.000 bz2.py:271(open)
       54    0.000    0.000    0.000    0.000 typing.py:1620(<genexpr>)
       21    0.000    0.000    0.000    0.000 deprecation.py:178(finalize)
        1    0.000    0.000    0.000    0.000 adam.py:1(<module>)
       17    0.000    0.000    0.000    0.000 __init__.py:416(by_key)
      265    0.000    0.000    0.000    0.000 {method 'find' of 'str' objects}
        1    0.000    0.000    0.000    0.000 importer.py:1(<module>)
        3    0.000    0.000    0.000    0.000 ctx_mp_python.py:585(__init__)
      113    0.000    0.000    0.000    0.000 typing.py:1926(_caller)
       55    0.000    0.000    0.000    0.000 symbol.py:294(_sanitize)
        1    0.000    0.000    0.000    0.000 upsampling.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:2306(_make_var_reduction_prim)
        1    0.000    0.000    0.000    0.000 axis3d.py:1(<module>)
       14    0.000    0.000    0.000    0.000 pathlib.py:530(_make_child)
        1    0.000    0.000    0.000    0.000 pathlib.py:260(compile_pattern)
       68    0.000    0.000    0.000    0.000 _util.py:1165(_apply_over_batch)
        7    0.000    0.000    0.000    0.000 ops.py:140(<listcomp>)
        5    0.000    0.000    0.000    0.000 core.py:1485(__radd__)
      295    0.000    0.000    0.000    0.000 _parser.py:73(__init__)
      544    0.000    0.000    0.000    0.000 registration.py:76(set_base)
       13    0.000    0.000    0.000    0.000 core.py:8389(__init__)
        1    0.000    0.000    0.000    0.000 conditionset.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _creation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 matexpr.py:37(MatrixExpr)
        1    0.000    0.000    0.000    0.000 _vmap_internals.py:1(<module>)
        1    0.000    0.000    0.000    0.000 mathtext.py:1925(<dictcomp>)
        6    0.000    0.000    0.000    0.000 deprecation.py:272(__set_name__)
        2    0.000    0.000    0.000    0.000 helper.py:1(<module>)
        1    0.000    0.000    0.000    0.000 container.py:408(ModuleDict)
       93    0.000    0.000    0.000    0.000 typing.py:277(_unpack_args)
        1    0.000    0.000    0.000    0.000 _color_data.py:995(<dictcomp>)
      750    0.000    0.000    0.000    0.000 rcsetup.py:234(validator)
        1    0.000    0.000    0.000    0.000 sparse_ndim_array.py:1(<module>)
      129    0.000    0.000    0.000    0.000 dataclasses.py:593(<listcomp>)
       23    0.000    0.000    0.000    0.000 symbolic_shapes.py:699(_make_node_magic)
        1    0.000    0.000    0.000    0.000 _mio5_params.py:1(<module>)
       19    0.000    0.000    0.000    0.000 deprecation.py:372(<listcomp>)
        8    0.000    0.000    0.000    0.000 symbol.py:393(__xnew_cached_)
        1    0.000    0.000    0.000    0.000 radau.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _cubic.py:1(<module>)
        1    0.000    0.000    0.000    0.000 nvfuser_prims.py:526(register_native_batch_norm)
      367    0.000    0.000    0.000    0.000 permutations.py:381(<listcomp>)
        1    0.000    0.000    0.000    0.000 monomials.py:1(<module>)
        3    0.000    0.000    0.000    0.000 __init__.py:906(_search_paths)
        1    0.000    0.000    0.000    0.000 representer.py:1(<module>)
        1    0.000    0.000    0.000    0.000 shlex.py:1(<module>)
       30    0.000    0.000    0.000    0.000 utils.py:104(__init__)
     1269    0.000    0.000    0.000    0.000 {method 'clear' of 'dict' objects}
        9    0.000    0.000    0.000    0.000 deprecation.py:435(<listcomp>)
        1    0.000    0.000    0.000    0.000 selector_events.py:1(<module>)
        1    0.000    0.000    0.000    0.000 legend_handler.py:1(<module>)
       40    0.000    0.000    0.000    0.000 rcsetup.py:51(__init__)
        1    0.000    0.000    0.000    0.000 meijerint.py:1(<module>)
        1    0.000    0.000    0.000    0.000 smtlib.py:25(SMTLibPrinter)
       20    0.000    0.000    0.000    0.000 colors.py:929(reversed)
        1    0.000    0.000    0.000    0.000 _quadrature.py:1(<module>)
        1    0.000    0.000    0.000    0.000 prufer.py:1(<module>)
     1326    0.000    0.000    0.000    0.000 _builtins.py:124(_is_special_functional_bound_op)
       39    0.000    0.000    0.000    0.000 inspect.py:391(_has_code_flag)
        1    0.000    0.000    0.000    0.000 _polybase.py:1(<module>)
        1    0.000    0.000    0.000    0.000 parabola.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:75(TensorKey)
      117    0.000    0.000    0.000    0.000 __init__.py:321(filter)
       52    0.000    0.000    0.000    0.000 singleton.py:131(__getattr__)
        7    0.000    0.000    0.000    0.000 __init__.py:72(CFUNCTYPE)
      237    0.000    0.000    0.000    0.000 pydoc.py:155(_getowndoc)
        1    0.000    0.000    0.000    0.000 exprtools.py:1(<module>)
        9    0.000    0.000    0.000    0.000 fromnumeric.py:2177(sum)
        1    0.000    0.000    0.000    0.000 testing.py:1(<module>)
        3    0.000    0.000    0.000    0.000 __init__.py:801(zip_children)
        1    0.000    0.000    0.000    0.000 expressiondomain.py:1(<module>)
       93    0.000    0.000    0.000    0.000 inspect.py:2080(_signature_is_functionlike)
      255    0.000    0.000    0.000    0.000 traversal.py:12(iterargs)
       58    0.000    0.000    0.000    0.000 _utils.py:779(classproperty)
        9    0.000    0.000    0.000    0.000 functools.py:800(singledispatch)
     1282    0.000    0.000    0.000    0.000 {method 'span' of 're.Match' objects}
        2    0.000    0.000    0.000    0.000 getlimits.py:540(_init)
      865    0.000    0.000    0.000    0.000 dataclasses.py:375(<genexpr>)
        1    0.000    0.000    0.000    0.000 _hessian_update_strategy.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _trace.py:566(ignore_lib_warnings)
       16    0.000    0.000    0.000    0.000 __init__.py:226(_from_iter)
        1    0.000    0.000    0.000    0.000 configparser.py:376(BasicInterpolation)
       17    0.000    0.000    0.000    0.000 stride_tricks.py:480(broadcast_arrays)
        1    0.000    0.000    0.000    0.000 series_class.py:1(<module>)
        1    0.000    0.000    0.000    0.000 flatten.py:54(Unflatten)
      635    0.000    0.000    0.000    0.000 typing.py:729(<genexpr>)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2894(icdf)
        1    0.000    0.000    0.000    0.000 common.py:432(<listcomp>)
        1    0.000    0.000    0.000    0.000 resolver.py:1(<module>)
      130    0.000    0.000    0.000    0.000 dataclasses.py:1018(<listcomp>)
      163    0.000    0.000    0.000    0.000 function.py:149(<listcomp>)
       40    0.000    0.000    0.000    0.000 getlimits.py:91(_float_to_float)
       13    0.000    0.000    0.000    0.000 core.py:8394(getdoc)
        1    0.000    0.000    0.000    0.000 backend_managers.py:1(<module>)
        1    0.000    0.000    0.000    0.000 configparser.py:522(LegacyInterpolation)
        1    0.000    0.000    0.000    0.000 patches.py:2812(ArrowStyle)
        1    0.000    0.000    0.000    0.000 _coo.py:1(<module>)
       18    0.000    0.000    0.000    0.000 _static.py:27(_prevent_modification)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:393(DataFlowNode)
       68    0.000    0.000    0.000    0.000 pickletools.py:1124(__init__)
        3    0.000    0.000    0.000    0.000 embedding_ops.py:1(<module>)
      151    0.000    0.000    0.000    0.000 libintmath.py:353(ifac)
        1    0.000    0.000    0.000    0.000 _vertex.py:1(<module>)
      494    0.000    0.000    0.000    0.000 _compiler.py:31(_combine_flags)
        1    0.000    0.000    0.000    0.000 core.py:6550(__new__)
        1    0.000    0.000    0.000    0.000 powerset.py:1(<module>)
      306    0.000    0.000    0.000    0.000 rcsetup.py:1043(_convert_validator_spec)
      582    0.000    0.000    0.000    0.000 __init__.py:422(<genexpr>)
      162    0.000    0.000    0.000    0.000 core.py:2446(__new__)
      109    0.000    0.000    0.000    0.000 inspect.py:310(ismethoddescriptor)
      871    0.000    0.000    0.000    0.000 {method 'popitem' of 'collections.OrderedDict' objects}
        1    0.000    0.000    0.000    0.000 offsetbox.py:1385(AnnotationBbox)
      108    0.000    0.000    0.000    0.000 iterables.py:3025(iterable)
       13    0.000    0.000    0.000    0.000 {built-in method torch._C._dispatch_library}
        1    0.000    0.000    0.000    0.000 container.py:250(ModuleList)
        1    0.000    0.000    0.000    0.000 trace.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _tanhsinh.py:1254(_direct)
        3    0.000    0.000    0.000    0.000 autocast_mode.py:1(<module>)
       19    0.000    0.000    0.000    0.000 pythonmpq.py:57(__new__)
        1    0.000    0.000    0.000    0.000 profiler.py:306(profile)
       63    0.000    0.000    0.000    0.000 _axis_nan_policy.py:340(_axis_nan_policy_factory)
        8    0.000    0.000    0.000    0.000 deprecation.py:231(wrapper)
    52/46    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1320(__len__)
       17    0.000    0.000    0.000    0.000 ctx_iv.py:407(_mpq)
       46    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:276(__init__)
       18    0.000    0.000    0.000    0.000 core.py:997(__init__)
        1    0.000    0.000    0.000    0.000 unicode.py:123(pyparsing_unicode)
      386    0.000    0.000    0.000    0.000 inspect.py:283(ismodule)
       40    0.000    0.000    0.000    0.000 colors.py:889(__init__)
        1    0.000    0.000    0.000    0.000 _bsr.py:1(<module>)
        1    0.000    0.000    0.000    0.000 axes3d.py:44(Axes3D)
        1    0.000    0.000    0.000    0.000 adaptive.py:1(<module>)
        1    0.000    0.000    0.000    0.000 wishart.py:1(<module>)
        1    0.000    0.000    0.000    0.000 helpers.py:1084(<listcomp>)
      871    0.000    0.000    0.000    0.000 conflict.py:67(<listcomp>)
        1    0.000    0.000    0.000    0.000 curve.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ctx_iv.py:324(_init_builtins)
      194    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1283(_find_parent_path_names)
       16    0.000    0.000    0.000    0.000 tokenize.py:408(tokenize)
        3    0.000    0.000    0.000    0.000 arrayprint.py:780(_formatArray)
        1    0.000    0.000    0.000    0.000 _parser.py:58(_timelex)
        1    0.000    0.000    0.000    0.000 combinatorics.py:17(SamplerIterDataPipe)
       20    0.000    0.000    0.000    0.000 numbers.py:3314(__eq__)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:634(MemoryProfile)
     1080    0.000    0.000    0.000    0.000 inspect.py:729(getmro)
        1    0.000    0.000    0.000    0.000 _axis_nan_policy.py:1(<module>)
        3    0.000    0.000    0.000    0.000 __init__.py:866(__init__)
        1    0.000    0.000    0.000    0.000 _mathtext_data.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _collections.py:1(<module>)
        1    0.000    0.000    0.000    0.000 base_subprocess.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fnmatch.py:48(filter)
        1    0.000    0.000    0.000    0.000 immutable_collections.py:1(<module>)
      786    0.000    0.000    0.000    0.000 utils.py:45(<genexpr>)
       42    0.000    0.000    0.000    0.000 results.py:573(copy)
       35    0.000    0.000    0.000    0.000 optimizer.py:291(_patch_step_function)
      544    0.000    0.000    0.000    0.000 registration.py:71(__init__)
        3    0.000    0.000    0.000    0.000 zipfile.py:2370(__init__)
        1    0.000    0.000    0.000    0.000 dotproduct.py:1(<module>)
        1    0.000    0.000    0.000    0.000 gruntz.py:1(<module>)
        4    0.000    0.000    0.000    0.000 feedparser.py:101(push)
        1    0.000    0.000    0.000    0.000 polar.py:776(PolarAxes)
        1    0.000    0.000    0.000    0.000 domainmatrix.py:86(DomainMatrix)
        1    0.000    0.000    0.000    0.000 testing.py:17(pyparsing_test)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1249(wrapped)
        1    0.000    0.000    0.000    0.000 bz2.py:37(__init__)
       71    0.000    0.000    0.000    0.000 enum.py:345(__init__)
        3    0.000    0.000    0.000    0.000 feedparser.py:184(close)
        1    0.000    0.000    0.000    0.000 contains.py:1(<module>)
        1    0.000    0.000    0.000    0.000 suite.py:1(<module>)
       48    0.000    0.000    0.000    0.000 pretty_symbology.py:100(<lambda>)
        1    0.000    0.000    0.000    0.000 backend_registry.py:56(register_backend)
       12    0.000    0.000    0.000    0.000 doccer.py:161(_doc)
        1    0.000    0.000    0.000    0.000 _recursive.py:354(ConcreteTypeStore)
        1    0.000    0.000    0.000    0.000 patches.py:617(Shadow)
        1    0.000    0.000    0.000    0.000 mul.py:91(Mul)
        1    0.000    0.000    0.000    0.000 rcsetup.py:96(<listcomp>)
        7    0.000    0.000    0.000    0.000 numeric.py:1393(moveaxis)
       21    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1118(_dispatch)
        1    0.000    0.000    0.000    0.000 jit_utils.py:22(GraphContext)
        1    0.000    0.000    0.000    0.000 kl.py:818(_add_kl_info)
        2    0.000    0.000    0.000    0.000 _delegators.py:1(<module>)
        5    0.000    0.000    0.000    0.000 core.py:589(_setResultsName)
        1    0.000    0.000    0.000    0.000 bezier.py:1(<module>)
      130    0.000    0.000    0.000    0.000 <frozen abc>:146(update_abstractmethods)
        1    0.000    0.000    0.000    0.000 _qmc.py:802(QMCEngine)
      138    0.000    0.000    0.000    0.000 {built-in method builtins.round}
        1    0.000    0.000    0.000    0.000 find_file_dependencies.py:1(<module>)
        1    0.000    0.000    0.000    0.000 grad_scaler.py:45(GradScaler)
        2    0.000    0.000    0.000    0.000 bn_relu.py:1(<module>)
     15/3    0.000    0.000    0.000    0.000 arrayprint.py:789(recurser)
        1    0.000    0.000    0.000    0.000 _dok.py:1(<module>)
        2    0.000    0.000    0.000    0.000 dropout.py:1(<module>)
        1    0.000    0.000    0.000    0.000 mathtext.py:1863(Glue)
     1185    0.000    0.000    0.000    0.000 enum.py:1125(__init__)
        9    0.000    0.000    0.000    0.000 textwrap.py:470(indent)
     1790    0.000    0.000    0.000    0.000 __init__.py:785(<lambda>)
        1    0.000    0.000    0.000    0.000 fnmatch.py:38(_compile_pattern)
       64    0.000    0.000    0.000    0.000 wrappers.py:294(BackwardsNotSupported)
       12    0.000    0.000    0.000    0.000 datetime.py:592(__new__)
       40    0.000    0.000    0.000    0.000 rcsetup.py:63(<dictcomp>)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2318(integrand)
     1297    0.000    0.000    0.000    0.000 permutations.py:1613(__iter__)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:593(CategoryElement)
       32    0.000    0.000    0.000    0.000 basic.py:2128(<setcomp>)
      130    0.000    0.000    0.000    0.000 dataclasses.py:1044(<listcomp>)
        1    0.000    0.000    0.000    0.000 legend.py:269(Legend)
        1    0.000    0.000    0.000    0.000 matcher_utils.py:15(_init_logger)
       15    0.000    0.000    0.000    0.000 _bunch.py:5(_validate_names)
        3    0.000    0.000    0.000    0.000 _new_distributions.py:108(_moment_central_formula)
        1    0.000    0.000    0.000    0.000 solveset.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ExifTags.py:361(LightSource)
        1    0.000    0.000    0.000    0.000 _rules.py:382(_POERules)
        1    0.000    0.000    0.000    0.000 repmatrix.py:209(_flat_list_to_DomainMatrix)
        1    0.000    0.000    0.000    0.000 _type_aliases.py:94(_add_aliases)
        1    0.000    0.000    0.000    0.000 groups.py:316(<dictcomp>)
        1    0.000    0.000    0.000    0.000 {built-in method torch._C._dist_autograd_init}
        5    0.000    0.000    0.000    0.000 core.py:6040(__add__)
        1    0.000    0.000    0.000    0.000 backend_agg.py:71(RendererAgg)
      688    0.000    0.000    0.000    0.000 {method 'decode' of 'bytes' objects}
        1    0.000    0.000    0.000    0.000 _probability_distribution.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _basic.py:33(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _tanhsinh.py:899(_nsum_iv)
      566    0.000    0.000    0.000    0.000 _compiler.py:426(_get_iscased)
        2    0.000    0.000    0.000    0.000 windows.py:1(<module>)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:149(Backend)
      432    0.000    0.000    0.000    0.000 colors.py:224(<genexpr>)
        1    0.000    0.000    0.000    0.000 profiler.py:47(_KinetoProfile)
        4    0.000    0.000    0.000    0.000 enum.py:1357(_missing_)
        1    0.000    0.000    0.000    0.000 storage.py:18(_StorageBase)
      513    0.000    0.000    0.000    0.000 {method 'items' of 'mappingproxy' objects}
      416    0.000    0.000    0.000    0.000 typing.py:1667(__eq__)
        1    0.000    0.000    0.000    0.000 _multivariate.py:394(__init__)
        5    0.000    0.000    0.000    0.000 backend_bases.py:1580(_check_savefig_extra_args)
        1    0.000    0.000    0.000    0.000 hooks.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _iotools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 gaussiandomains.py:328(GaussianIntegerRing)
        1    0.000    0.000    0.000    0.000 configparser.py:448(ExtendedInterpolation)
      166    0.000    0.000    0.000    0.000 pathlib.py:239(splitroot)
        1    0.000    0.000    0.000    0.000 mathematica.py:1(<module>)
       10    0.000    0.000    0.000    0.000 version.py:52(__init__)
        3    0.000    0.000    0.000    0.000 zipfile.py:2251(make)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:181(SymNode)
     1002    0.000    0.000    0.000    0.000 enum.py:230(__init__)
        1    0.000    0.000    0.000    0.000 polyoptions.py:187(_init_dependencies_order)
        2    0.000    0.000    0.000    0.000 mixins.py:1(<module>)
      865    0.000    0.000    0.000    0.000 dataclasses.py:1102(<genexpr>)
      158    0.000    0.000    0.000    0.000 typing.py:1800(<genexpr>)
        1    0.000    0.000    0.000    0.000 _exceptions.py:1(<module>)
        1    0.000    0.000    0.000    0.000 lattice.py:38(Lattice)
        1    0.000    0.000    0.000    0.000 repmatrix.py:183(_dod_to_DomainMatrix)
        1    0.000    0.000    0.000    0.000 pretty_symbology.py:108(<dictcomp>)
       27    0.000    0.000    0.000    0.000 singleton.py:125(register)
        1    0.000    0.000    0.000    0.000 bdist.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _dia.py:1(<module>)
        1    0.000    0.000    0.000    0.000 numbers.py:329(tribonacci)
        1    0.000    0.000    0.000    0.000 weak.py:1(<module>)
        1    0.000    0.000    0.000    0.000 periodic_table.py:1660(ElementType)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:191(SchemaMatcher)
        1    0.000    0.000    0.000    0.000 spines.py:1(<module>)
     1616    0.000    0.000    0.000    0.000 {built-in method builtins.globals}
        6    0.000    0.000    0.000    0.000 _codata.py:2045(replace_exact)
       62    0.000    0.000    0.000    0.000 rational.py:31(__new__)
      147    0.000    0.000    0.000    0.000 TiffTags.py:35(__new__)
        1    0.000    0.000    0.000    0.000 analyzer.py:1018(PointGroupAnalyzer)
        1    0.000    0.000    0.000    0.000 dirichlet.py:1(<module>)
       23    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:593(__init__)
        1    0.000    0.000    0.000    0.000 unicode.py:85(identchars)
        1    0.000    0.000    0.000    0.000 combinatorics.py:14(ShufflerIterDataPipe)
        1    0.000    0.000    0.000    0.000 configparser.py:1325(ConverterMapping)
        1    0.000    0.000    0.000    0.000 parameter.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:52(Orbital)
      166    0.000    0.000    0.000    0.000 colors.py:521(__init__)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2382(mean)
       34    0.000    0.000    0.000    0.000 {method 'split' of 're.Pattern' objects}
       21    0.000    0.000    0.000    0.000 domain.py:379(__call__)
      307    0.000    0.000    0.000    0.000 __init__.py:722(__iter__)
       54    0.000    0.000    0.000    0.000 typing.py:1496(__mro_entries__)
        1    0.000    0.000    0.000    0.000 serializer.py:1(<module>)
      200    0.000    0.000    0.000    0.000 matrix_element.py:157(<listcomp>)
       18    0.000    0.000    0.000    0.000 __init__.py:844(search)
      117    0.000    0.000    0.000    0.000 _parser.py:1090(expand_template)
        1    0.000    0.000    0.000    0.000 von_mises.py:1(<module>)
       15    0.000    0.000    0.000    0.000 fromnumeric.py:2979(prod)
        1    0.000    0.000    0.000    0.000 _secondary_axes.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sampler.py:210(BatchSampler)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1339(_generate_domain_support)
        1    0.000    0.000    0.000    0.000 gzip.py:1(<module>)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3206(_moment_central)
        1    0.000    0.000    0.000    0.000 _adapters.py:8(Message)
        1    0.000    0.000    0.000    0.000 tricontour.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sequences.py:26(SeqBase)
        2    0.000    0.000    0.000    0.000 typing.py:1556(__or__)
        1    0.000    0.000    0.000    0.000 backend_bases.py:121(RendererBase)
       16    0.000    0.000    0.000    0.000 _internal.py:32(wrapped_f)
        1    0.000    0.000    0.000    0.000 gaussiandomains.py:517(GaussianRationalField)
        1    0.000    0.000    0.000    0.000 mathtext.py:219(MathtextBackendPs)
      694    0.000    0.000    0.000    0.000 boolalg.py:480(<lambda>)
        1    0.000    0.000    0.000    0.000 adam.py:13(Adam)
       15    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2007(_validate_order_kind)
       92    0.000    0.000    0.000    0.000 _collections.py:20(__missing__)
        1    0.000    0.000    0.000    0.000 fake_utils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 stride_tricks.py:1(<module>)
      261    0.000    0.000    0.000    0.000 dispatcher.py:204(<genexpr>)
        1    0.000    0.000    0.000    0.000 transports.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fu.py:1(<module>)
      216    0.000    0.000    0.000    0.000 typing.py:1389(<genexpr>)
    27/23    0.000    0.000    0.000    0.000 basic.py:366(compare)
        1    0.000    0.000    0.000    0.000 backend_bases.py:2785(NavigationToolbar2)
        2    0.000    0.000    0.000    0.000 _basic.py:3190(factorial2)
        1    0.000    0.000    0.000    0.000 repr.py:1(<module>)
        1    0.000    0.000    0.000    0.000 find_file_dependencies.py:7(_ExtractModuleReferences)
        1    0.000    0.000    0.000    0.000 pythonrationalfield.py:1(<module>)
        6    0.000    0.000    0.000    0.000 symbolic_opset9.py:1652(_avg_pool)
        2    0.000    0.000    0.000    0.000 conv_relu.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:5241(__init__)
        1    0.000    0.000    0.000    0.000 ddm.py:102(DDM)
        1    0.000    0.000    0.000    0.000 _legacy.py:1(<module>)
        1    0.000    0.000    0.000    0.000 quoprimime.py:1(<module>)
       37    0.000    0.000    0.000    0.000 numeric.py:1855(isscalar)
        1    0.000    0.000    0.000    0.000 expressiondomain.py:15(ExpressionDomain)
        1    0.000    0.000    0.000    0.000 _base.py:85(_spbase)
        1    0.000    0.000    0.000    0.000 unicode.py:99(identbodychars)
       43    0.000    0.000    0.000    0.000 symbolic_shapes.py:817(_make_user_magic)
        1    0.000    0.000    0.000    0.000 pyplot.py:2172(<listcomp>)
        5    0.000    0.000    0.000    0.000 random.py:119(__init__)
        1    0.000    0.000    0.000    0.000 _multivariate.py:4994(__init__)
        1    0.000    0.000    0.000    0.000 transformer.py:17(Transformer)
        1    0.000    0.000    0.000    0.000 operations.py:415(inversion)
        4    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2249(_support)
        1    0.000    0.000    0.000    0.000 monomials.py:387(MonomialOps)
        1    0.000    0.000    0.000    0.000 records.py:1(<module>)
       34    0.000    0.000    0.000    0.000 libmpf.py:491(from_rational)
       55    0.000    0.000    0.000    0.000 <frozen codecs>:309(__init__)
       36    0.000    0.000    0.000    0.000 tokenize.py:329(find_cookie)
       58    0.000    0.000    0.000    0.000 core.py:1922(set_name)
        1    0.000    0.000    0.000    0.000 routeddecoder.py:17(RoutedDecoderIterDataPipe)
       29    0.000    0.000    0.000    0.000 _array_api.py:576(<listcomp>)
       15    0.000    0.000    0.000    0.000 decorator.py:170(depends_on_deco)
        1    0.000    0.000    0.000    0.000 glob_group.py:1(<module>)
       44    0.000    0.000    0.000    0.000 core.py:4124(<genexpr>)
        1    0.000    0.000    0.000    0.000 tritools.py:1(<module>)
        9    0.000    0.000    0.000    0.000 pathlib.py:765(__truediv__)
       92    0.000    0.000    0.000    0.000 permutations.py:463(size)
       10    0.000    0.000    0.000    0.000 _text.py:79(__hash__)
       26    0.000    0.000    0.000    0.000 _basic.py:33(<listcomp>)
        1    0.000    0.000    0.000    0.000 _multivariate.py:1655(__init__)
        1    0.000    0.000    0.000    0.000 animation.py:96(MovieWriterRegistry)
       11    0.000    0.000    0.000    0.000 fractions.py:62(__new__)
       41    0.000    0.000    0.000    0.000 deprecation.py:365(<genexpr>)
      480    0.000    0.000    0.000    0.000 artist.py:1371(<genexpr>)
       83    0.000    0.000    0.000    0.000 linecache.py:147(lazycache)
        1    0.000    0.000    0.000    0.000 _multivariate.py:1128(__init__)
        1    0.000    0.000    0.000    0.000 exponential.py:1108(LambertW)
        1    0.000    0.000    0.000    0.000 patches.py:1909(BoxStyle)
        4    0.000    0.000    0.000    0.000 _pep440.py:292(__init__)
        1    0.000    0.000    0.000    0.000 _data.py:1(<module>)
       16    0.000    0.000    0.000    0.000 arraypad.py:86(_pad_simple)
       16    0.000    0.000    0.000    0.000 _type_aliases.py:58(bitname)
       27    0.000    0.000    0.000    0.000 pretty_symbology.py:121(<genexpr>)
        1    0.000    0.000    0.000    0.000 rootoftools.py:166(ComplexRootOf)
      114    0.000    0.000    0.000    0.000 textwrap.py:482(prefixed_lines)
        1    0.000    0.000    0.000    0.000 package_importer.py:48(PackageImporter)
        9    0.000    0.000    0.000    0.000 typing_extensions.py:757(__init_subclass__)
       21    0.000    0.000    0.000    0.000 domain.py:371(new)
        1    0.000    0.000    0.000    0.000 histograms.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _wilcoxon.py:1(<module>)
        1    0.000    0.000    0.000    0.000 emitter.py:1(<module>)
       87    0.000    0.000    0.000    0.000 utils.py:44(<dictcomp>)
        1    0.000    0.000    0.000    0.000 sdm.py:1(<module>)
        6    0.000    0.000    0.000    0.000 numeric.py:2507(extend_all)
       18    0.000    0.000    0.000    0.000 _compiler.py:389(_bytes_to_codes)
       21    0.000    0.000    0.000    0.000 __init__.py:315(_subx)
        1    0.000    0.000    0.000    0.000 fields.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:666(<listcomp>)
       20    0.000    0.000    0.000    0.000 mul.py:34(_mulsort)
        1    0.000    0.000    0.000    0.000 numbers.py:1211(Rational)
        1    0.000    0.000    0.000    0.000 _csc.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _endian.py:1(<module>)
        1    0.000    0.000    0.000    0.000 queues.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _freeze.py:1(<module>)
      711    0.000    0.000    0.000    0.000 {built-in method builtins.vars}
        1    0.000    0.000    0.000    0.000 _multivariate.py:6108(__init__)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1656(DraggableBase)
        1    0.000    0.000    0.000    0.000 _polyint.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dumper.py:1(<module>)
       37    0.000    0.000    0.000    0.000 mul.py:494(<listcomp>)
        9    0.000    0.000    0.000    0.000 fontconfig_pattern.py:138(_family)
        1    0.000    0.000    0.000    0.000 _qmc.py:2312(MultivariateNormalQMC)
        1    0.000    0.000    0.000    0.000 upsampling.py:11(Upsample)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3267(__init__)
       90    0.000    0.000    0.000    0.000 _pytree.py:47(_register_pytree_node)
        6    0.000    0.000    0.000    0.000 ctx_iv.py:413(convert)
        1    0.000    0.000    0.000    0.000 polyclasses.py:138(DMP)
       10    0.000    0.000    0.000    0.000 symbolic_opset11.py:87(_apply)
       43    0.000    0.000    0.000    0.000 core.py:3157(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:90(<listcomp>)
        1    0.000    0.000    0.000    0.000 _adapters.py:42(CompatibilityFiles)
        1    0.000    0.000    0.000    0.000 optimization.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _fir_filter_design.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _netcdf.py:1(<module>)
        1    0.000    0.000    0.000    0.000 conv.py:1195(LazyConv1d)
        1    0.000    0.000    0.000    0.000 splitter_base.py:256(_SplitterBase)
       34    0.000    0.000    0.000    0.000 operations.py:118(_from_args)
        1    0.000    0.000    0.000    0.000 zetazeros.py:1(<module>)
        3    0.000    0.000    0.000    0.000 zipfile.py:1242(__init__)
      135    0.000    0.000    0.000    0.000 containers.py:72(__iter__)
        1    0.000    0.000    0.000    0.000 patches.py:3564(FancyBboxPatch)
        2    0.000    0.000    0.000    0.000 _basic.py:3035(_factorialx_wrapper)
        6    0.000    0.000    0.000    0.000 core.py:1737(__call__)
       99    0.000    0.000    0.000    0.000 traceback.py:389(extended_frame_gen)
      216    0.000    0.000    0.000    0.000 message.py:506(set_raw)
       16    0.000    0.000    0.000    0.000 sysconfig.py:244(_subst_vars)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1379(<listcomp>)
        5    0.000    0.000    0.000    0.000 matrices.py:749(__init__)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:582(_ReducedHCT_Element)
        1    0.000    0.000    0.000    0.000 orderings.py:1(<module>)
        1    0.000    0.000    0.000    0.000 proxy.py:476(ParameterProxy)
       66    0.000    0.000    0.000    0.000 __init__.py:228(_acquireLock)
        1    0.000    0.000    0.000    0.000 free_groups.py:1(<module>)
        1    0.000    0.000    0.000    0.000 uuid.py:85(UUID)
        4    0.000    0.000    0.000    0.000 random.py:128(seed)
    18/17    0.000    0.000    0.000    0.000 typing.py:1474(__repr__)
        1    0.000    0.000    0.000    0.000 symbolic_opset7.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sampler.py:18(Sampler)
        1    0.000    0.000    0.000    0.000 colors.py:97(<dictcomp>)
       26    0.000    0.000    0.000    0.000 pretty_symbology.py:118(<lambda>)
        1    0.000    0.000    0.000    0.000 linear.py:9(Linear)
        1    0.000    0.000    0.000    0.000 rootisolation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 expr.py:266(__pow__)
        3    0.000    0.000    0.000    0.000 design_patterns.py:43(cached_class)
        1    0.000    0.000    0.000    0.000 hermite.py:1(<module>)
        1    0.000    0.000    0.000    0.000 libelefun.py:1(<module>)
        1    0.000    0.000    0.000    0.000 repmatrix.py:1(<module>)
        1    0.000    0.000    0.000    0.000 getlimits.py:1(<module>)
       12    0.000    0.000    0.000    0.000 weakref.py:104(__init__)
      128    0.000    0.000    0.000    0.000 dataclasses.py:1053(<listcomp>)
       15    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2223(support)
        1    0.000    0.000    0.000    0.000 testing.py:22(reset_pyparsing_context)
      544    0.000    0.000    0.000    0.000 registration.py:81(in_base)
       48    0.000    0.000    0.000    0.000 string.py:139(formula_double_format)
       49    0.000    0.000    0.000    0.000 _compiler.py:405(_generate_overlap_table)
        1    0.000    0.000    0.000    0.000 __init__.py:351(_sanity_check)
      143    0.000    0.000    0.000    0.000 core.py:794(preParse)
      254    0.000    0.000    0.000    0.000 core.py:3902(<genexpr>)
        1    0.000    0.000    0.000    0.000 para4tb.py:74(<listcomp>)
        8    0.000    0.000    0.000    0.000 typing.py:2345(<dictcomp>)
      748    0.000    0.000    0.000    0.000 {method 'remove' of 'set' objects}
        1    0.000    0.000    0.000    0.000 interpolate.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _distr_params.py:1(<module>)
        1    0.000    0.000    0.000    0.000 exceptions.py:30(ParseBaseException)
       35    0.000    0.000    0.000    0.000 module.py:2176(named_children)
        1    0.000    0.000    0.000    0.000 _decomp_lu.py:16(<dictcomp>)
        2    0.000    0.000    0.000    0.000 extension.py:1(<module>)
      841    0.000    0.000    0.000    0.000 inspect.py:2737(annotation)
        2    0.000    0.000    0.000    0.000 deprecation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:437(_get_xdg_config_dir)
       26    0.000    0.000    0.000    0.000 pathlib.py:657(stem)
      309    0.000    0.000    0.000    0.000 enum.py:220(__set_name__)
        1    0.000    0.000    0.000    0.000 spines.py:11(Spine)
        1    0.000    0.000    0.000    0.000 structure.py:1006(IStructure)
       16    0.000    0.000    0.000    0.000 {method 'uniform' of 'numpy.random._generator.Generator' objects}
       26    0.000    0.000    0.000    0.000 {built-in method torch._C.call_stack}
      213    0.000    0.000    0.000    0.000 ctx_iv.py:369(_wrap_specfun)
        2    0.000    0.000    0.000    0.000 polyclasses.py:146(__new__)
        1    0.000    0.000    0.000    0.000 hermite_e.py:1(<module>)
       72    0.000    0.000    0.000    0.000 util.py:113(set_)
       71    0.000    0.000    0.000    0.000 enum.py:945(_find_data_repr_)
        8    0.000    0.000    0.000    0.000 kind.py:43(__new__)
        4    0.000    0.000    0.000    0.000 _new_distributions.py:412(_icdf_formula)
        1    0.000    0.000    0.000    0.000 rnn.py:18(LSTMCell)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:4440(TruncatedDistribution)
        1    0.000    0.000    0.000    0.000 streamplot.py:1(<module>)
        1    0.000    0.000    0.000    0.000 lazy.py:1(<module>)
      224    0.000    0.000    0.000    0.000 {method 'setter' of 'property' objects}
        1    0.000    0.000    0.000    0.000 core.py:141(MaskedTensor)
        1    0.000    0.000    0.000    0.000 wishart.py:30(Wishart)
        1    0.000    0.000    0.000    0.000 chebyshev.py:1(<module>)
      160    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1220(__init__)
        1    0.000    0.000    0.000    0.000 _tukeylambda_stats.py:1(<module>)
        1    0.000    0.000    0.000    0.000 rational.py:1(<module>)
        5    0.000    0.000    0.000    0.000 pathlib.py:757(joinpath)
       37    0.000    0.000    0.000    0.000 libmpf.py:950(mpf_div)
        1    0.000    0.000    0.000    0.000 _secondary_axes.py:37(SecondaryAxis)
       23    0.000    0.000    0.000    0.000 functools.py:841(_is_union_type)
       23    0.000    0.000    0.000    0.000 pythonmpq.py:103(_new)
        1    0.000    0.000    0.000    0.000 optimizer.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:414(StreamContext)
        1    0.000    0.000    0.000    0.000 mathtext.py:261(MathtextBackendPdf)
        1    0.000    0.000    0.000    0.000 conv_add.py:1(<module>)
       38    0.000    0.000    0.000    0.000 assumptions.py:494(make_property)
        2    0.000    0.000    0.000    0.000 core.py:555(set_results_name)
        1    0.000    0.000    0.000    0.000 doccer.py:1(<module>)
        2    0.000    0.000    0.000    0.000 typing.py:2962(TypedDict)
        1    0.000    0.000    0.000    0.000 backend_managers.py:39(ToolManager)
        8    0.000    0.000    0.000    0.000 core.py:5098(__init__)
        1    0.000    0.000    0.000    0.000 _compat_pickle.py:1(<module>)
        1    0.000    0.000    0.000    0.000 basic.py:156(Basic)
        1    0.000    0.000    0.000    0.000 glob.py:175(_listdir)
        1    0.000    0.000    0.000    0.000 interpreter.py:370(Transformer)
      257    0.000    0.000    0.000    0.000 typing.py:1661(_value_and_type_iter)
        3    0.000    0.000    0.000    0.000 message.py:243(get_payload)
        1    0.000    0.000    0.000    0.000 _hessian_update_strategy.py:107(FullHessianUpdateStrategy)
        1    0.000    0.000    0.000    0.000 maple.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _multivariate.py:4391(__init__)
        1    0.000    0.000    0.000    0.000 systems.py:1(<module>)
        1    0.000    0.000    0.000    0.000 assumptions_generated.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _sysconfigdata__linux_x86_64-linux-gnu.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:3882(ParseExpression)
        1    0.000    0.000    0.000    0.000 _interface.py:55(LinearOperator)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3646(_logpxf_dispatch)
        2    0.000    0.000    0.000    0.000 core.py:6169(<listcomp>)
      130    0.000    0.000    0.000    0.000 dataclasses.py:325(__init__)
      200    0.000    0.000    0.000    0.000 _ops.py:437(__hash__)
        1    0.000    0.000    0.000    0.000 container.py:552(ParameterList)
        2    0.000    0.000    0.000    0.000 _distributor_init.py:1(<module>)
       47    0.000    0.000    0.000    0.000 numbers.py:1927(__mul__)
      212    0.000    0.000    0.000    0.000 transforms.py:1256(<genexpr>)
        1    0.000    0.000    0.000    0.000 pretty_symbology.py:120(<dictcomp>)
        1    0.000    0.000    0.000    0.000 serialization.py:281(_open_zipfile_reader)
        1    0.000    0.000    0.000    0.000 _guards.py:318(TracingContext)
        6    0.000    0.000    0.000    0.000 abc.py:32(_register)
      317    0.000    0.000    0.000    0.000 overrides.py:105(array_function_dispatch)
       22    0.000    0.000    0.000    0.000 numbers.py:1811(__new__)
        2    0.000    0.000    0.000    0.000 sysconfig.py:109(_getuserbase)
        1    0.000    0.000    0.000    0.000 symbolic_opset14.py:1(<module>)
      576    0.000    0.000    0.000    0.000 {method '__init_subclass__' of 'object' objects}
       10    0.000    0.000    0.000    0.000 typing_extensions.py:649(__init__)
        1    0.000    0.000    0.000    0.000 _orthogonal.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:2697(MaskedArray)
      107    0.000    0.000    0.000    0.000 rcsetup.py:65(__call__)
        1    0.000    0.000    0.000    0.000 logic.py:1(<module>)
       10    0.000    0.000    0.000    0.000 deprecation.py:83(wrap)
        1    0.000    0.000    0.000    0.000 _state.py:1(<module>)
        1    0.000    0.000    0.000    0.000 patches.py:1185(Arrow)
       40    0.000    0.000    0.000    0.000 getlimits.py:24(_fr1)
      350    0.000    0.000    0.000    0.000 {built-in method numpy.core._multiarray_umath.add_docstring}
        1    0.000    0.000    0.000    0.000 hooks.py:9(RemovableHandle)
      729    0.000    0.000    0.000    0.000 conflict.py:63(<lambda>)
      127    0.000    0.000    0.000    0.000 {method 'copy' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.000    0.000 _guards.py:26(GuardSource)
      157    0.000    0.000    0.000    0.000 {built-in method torch._C.isSubtypeOf}
        4    0.000    0.000    0.000    0.000 typing.py:349(_tp_cache)
       62    0.000    0.000    0.000    0.000 rational.py:7(create_reduced)
        4    0.000    0.000    0.000    0.000 ctx_iv.py:43(__new__)
        1    0.000    0.000    0.000    0.000 swa_utils.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _adapters.py:49(<listcomp>)
        1    0.000    0.000    0.000    0.000 distribution.py:10(Distribution)
        1    0.000    0.000    0.000    0.000 conv.py:272(Conv1d)
       72    0.000    0.000    0.000    0.000 util.py:110(get)
        1    0.000    0.000    0.000    0.000 _fuser.py:1(<module>)
        4    0.000    0.000    0.000    0.000 _script.py:265(__init__)
        2    0.000    0.000    0.000    0.000 version.py:47(parse)
        1    0.000    0.000    0.000    0.000 patches.py:3828(FancyArrowPatch)
       16    0.000    0.000    0.000    0.000 __init__.py:150(__init__)
        1    0.000    0.000    0.000    0.000 decorators.py:236(_func)
       29    0.000    0.000    0.000    0.000 _array_api.py:571(<listcomp>)
       19    0.000    0.000    0.000    0.000 __init__.py:2271(_check_shape)
       51    0.000    0.000    0.000    0.000 nvfuser_prims.py:144(_assert_nvfuser_op_exists)
        1    0.000    0.000    0.000    0.000 _special_sparse_arrays.py:1(<module>)
        3    0.000    0.000    0.000    0.000 patches.py:1885(<listcomp>)
        1    0.000    0.000    0.000    0.000 basic.py:2233(Atom)
        1    0.000    0.000    0.000    0.000 legendre.py:1(<module>)
      567    0.000    0.000    0.000    0.000 permutations.py:1184(size)
        1    0.000    0.000    0.000    0.000 cnf.py:1(<module>)
      682    0.000    0.000    0.000    0.000 {function RcParams.__getitem__ at 0x151adafb4c20}
        1    0.000    0.000    0.000    0.000 _fortran_format_parser.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:37(Category)
        1    0.000    0.000    0.000    0.000 band_data_in.py:40(get_Kpoint)
       14    0.000    0.000    0.000    0.000 _infra.py:65(from_sarif)
       48    0.000    0.000    0.000    0.000 pretty_symbology.py:101(<lambda>)
        1    0.000    0.000    0.000    0.000 scalarint.py:1(<module>)
        3    0.000    0.000    0.000    0.000 blas.py:395(getter)
      129    0.000    0.000    0.000    0.000 dataclasses.py:1047(<listcomp>)
        2    0.000    0.000    0.000    0.000 warnings.py:1(<module>)
        1    0.000    0.000    0.000    0.000 selectors.py:341(_PollLikeSelector)
       12    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:913(_set_invalid_nan)
        1    0.000    0.000    0.000    0.000 docstring.py:1(<module>)
       15    0.000    0.000    0.000    0.000 warnings.py:181(_add_filter)
        6    0.000    0.000    0.000    0.000 symbolic_opset9.py:1539(_max_pool)
       93    0.000    0.000    0.000    0.000 _script.py:897(<lambda>)
        1    0.000    0.000    0.000    0.000 core.py:5544(Forward)
        1    0.000    0.000    0.000    0.000 laguerre.py:1(<module>)
      777    0.000    0.000    0.000    0.000 {built-in method _sre.unicode_iscased}
        1    0.000    0.000    0.000    0.000 relaxed_bernoulli.py:1(<module>)
       23    0.000    0.000    0.000    0.000 rcsetup.py:347(validate_color_or_auto)
        1    0.000    0.000    0.000    0.000 _fft.py:1(<module>)
      208    0.000    0.000    0.000    0.000 inspect.py:946(<genexpr>)
        1    0.000    0.000    0.000    0.000 pooling.py:257(MaxUnpool1d)
        1    0.000    0.000    0.000    0.000 operator_schemas.py:29(_nonzero_schemas)
        1    0.000    0.000    0.000    0.000 activation.py:889(MultiheadAttention)
        1    0.000    0.000    0.000    0.000 conv.py:182(ConvTranspose1d)
        1    0.000    0.000    0.000    0.000 spectral_norm.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:4667(ParseElementEnhance)
       45    0.000    0.000    0.000    0.000 pathlib.py:523(_format_parsed_parts)
        1    0.000    0.000    0.000    0.000 __init__.py:979(ComplexFloatStorage)
        9    0.000    0.000    0.000    0.000 numeric.py:136(ones)
      105    0.000    0.000    0.000    0.000 module.py:2113(<lambda>)
       19    0.000    0.000    0.000    0.000 __init__.py:1281(_to_unmasked_float_array)
       28    0.000    0.000    0.000    0.000 ops.py:324(__getitem__)
        1    0.000    0.000    0.000    0.000 pythonrationalfield.py:9(PythonRationalField)
        1    0.000    0.000    0.000    0.000 fancysets.py:1386(CartesianComplexRegion)
        1    0.000    0.000    0.000    0.000 streams.py:395(StreamReader)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:508(contains)
      377    0.000    0.000    0.000    0.000 enum.py:779(<genexpr>)
       26    0.000    0.000    0.000    0.000 pretty_symbology.py:117(<lambda>)
      130    0.000    0.000    0.000    0.000 dataclasses.py:376(<genexpr>)
        4    0.000    0.000    0.000    0.000 functools.py:861(<lambda>)
       19    0.000    0.000    0.000    0.000 fromnumeric.py:3269(round)
        1    0.000    0.000    0.000    0.000 accumulationbounds.py:14(AccumulationBounds)
        1    0.000    0.000    0.000    0.000 importer.py:28(Importer)
      4/3    0.000    0.000    0.000    0.000 {method 'view' of 'numpy.ndarray' objects}
      108    0.000    0.000    0.000    0.000 typing.py:1015(<genexpr>)
        1    0.000    0.000    0.000    0.000 transforms.py:213(BboxBase)
        1    0.000    0.000    0.000    0.000 ask_generated.py:1(<module>)
        1    0.000    0.000    0.000    0.000 binomial.py:1(<module>)
  277/275    0.000    0.000    0.000    0.000 results.py:176(__init__)
        1    0.000    0.000    0.000    0.000 _dataclass_impls.py:1(<module>)
        1    0.000    0.000    0.000    0.000 scale.py:204(LogTransform)
        1    0.000    0.000    0.000    0.000 fake_tensor.py:169(FakeTensorConverter)
        1    0.000    0.000    0.000    0.000 _at.py:27(_AtOp)
        1    0.000    0.000    0.000    0.000 add.py:93(Add)
        2    0.000    0.000    0.000    0.000 __init__.py:305(_compile_repl)
       58    0.000    0.000    0.000    0.000 results.py:454(__iadd__)
        1    0.000    0.000    0.000    0.000 negative_binomial.py:1(<module>)
       80    0.000    0.000    0.000    0.000 _sources.py:51(remove_prefix)
        2    0.000    0.000    0.000    0.000 _pep440.py:117(parse)
        1    0.000    0.000    0.000    0.000 _ir_utils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _trigonometric_special.py:1(<module>)
        1    0.000    0.000    0.000    0.000 libintmath.py:126(<listcomp>)
        1    0.000    0.000    0.000    0.000 rnn.py:32(RNNBase)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:2835(deprecated)
        8    0.000    0.000    0.000    0.000 core.py:4464(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 core.py:125(Diagnostics)
        1    0.000    0.000    0.000    0.000 sgd.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ellipse.py:41(Ellipse)
        4    0.000    0.000    0.000    0.000 typing.py:353(decorator)
        1    0.000    0.000    0.000    0.000 ordinals.py:56(Ordinal)
        6    0.000    0.000    0.000    0.000 constraints.py:192(__init__)
        6    0.000    0.000    0.000    0.000 symbolic_opset10.py:129(_max_pool)
    32/24    0.000    0.000    0.000    0.000 typing.py:2348(_strip_annotations)
        1    0.000    0.000    0.000    0.000 dlpack.py:10(DLDeviceType)
        2    0.000    0.000    0.000    0.000 version.py:188(__init__)
        1    0.000    0.000    0.000    0.000 abc.py:56(Traversable)
       37    0.000    0.000    0.000    0.000 rcsetup.py:558(_validate_linestyle)
        1    0.000    0.000    0.000    0.000 functional_modules.py:1(<module>)
        3    0.000    0.000    0.000    0.000 typing_extensions.py:2894(__call__)
        2    0.000    0.000    0.000    0.000 expressiondomain.py:26(__init__)
       25    0.000    0.000    0.000    0.000 pretty_symbology.py:109(<genexpr>)
       24    0.000    0.000    0.000    0.000 {built-in method _warnings.warn}
        1    0.000    0.000    0.000    0.000 lines.py:200(Line2D)
        1    0.000    0.000    0.000    0.000 _compression.py:1(<module>)
       40    0.000    0.000    0.000    0.000 _parser.py:256(getwhile)
        1    0.000    0.000    0.000    0.000 patches.py:4184(ConnectionPatch)
        1    0.000    0.000    0.000    0.000 operator_support.py:37(OperatorSupport)
        1    0.000    0.000    0.000    0.000 galois_resolvents.py:1(<module>)
       24    0.000    0.000    0.000    0.000 constructor.py:337(add_default_constructor)
        7    0.000    0.000    0.000    0.000 enum.py:1532(unique)
    36/32    0.000    0.000    0.000    0.000 typing.py:224(_type_repr)
        4    0.000    0.000    0.000    0.000 stride_tricks.py:367(broadcast_to)
        1    0.000    0.000    0.000    0.000 _parser.py:569(__init__)
       14    0.000    0.000    0.000    0.000 numeric.py:1330(normalize_axis_tuple)
        1    0.000    0.000    0.000    0.000 ntheory.py:1(<module>)
        1    0.000    0.000    0.000    0.000 composition.py:38(Composition)
        7    0.000    0.000    0.000    0.000 dev.py:112(decorator)
        1    0.000    0.000    0.000    0.000 _cubic.py:378(Akima1DInterpolator)
      174    0.000    0.000    0.000    0.000 _docscrape.py:713(_should_skip_member)
        4    0.000    0.000    0.000    0.000 {function Random.seed at 0x151bc49958a0}
        1    0.000    0.000    0.000    0.000 module.py:53(_WrappedHook)
        1    0.000    0.000    0.000    0.000 continuous_bernoulli.py:1(<module>)
      250    0.000    0.000    0.000    0.000 {method 'indices' of 'slice' objects}
      149    0.000    0.000    0.000    0.000 _util.py:373(check_random_state)
        1    0.000    0.000    0.000    0.000 nodes.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _reporting_descriptor.py:17(ReportingDescriptor)
        1    0.000    0.000    0.000    0.000 cse_main.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:892(MetadataPathFinder)
       76    0.000    0.000    0.000    0.000 signal.py:9(<lambda>)
        1    0.000    0.000    0.000    0.000 multivariate_normal.py:1(<module>)
        1    0.000    0.000    0.000    0.000 futures.py:1(<module>)
        1    0.000    0.000    0.000    0.000 polar.py:225(ThetaLocator)
      212    0.000    0.000    0.000    0.000 transforms.py:1262(<genexpr>)
        1    0.000    0.000    0.000    0.000 _cm.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:2808(__new__)
        3    0.000    0.000    0.000    0.000 blas.py:422(get_blas_funcs)
        1    0.000    0.000    0.000    0.000 base_subprocess.py:255(WriteSubprocessPipeProto)
        6    0.000    0.000    0.000    0.000 core.py:5220(__init__)
        1    0.000    0.000    0.000    0.000 fake_utils.py:48(CrossRefFakeMode)
        1    0.000    0.000    0.000    0.000 adamw.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:410(ints)
        8    0.000    0.000    0.000    0.000 deprecation.py:493(_suppress_matplotlib_deprecation_warning)
        2    0.000    0.000    0.000    0.000 glob.py:141(_iterdir)
        1    0.000    0.000    0.000    0.000 expr_with_limits.py:199(ExprWithLimits)
        1    0.000    0.000    0.000    0.000 _comparison.py:484(NumberPair)
       12    0.000    0.000    0.000    0.000 polytools.py:69(_polifyit)
        1    0.000    0.000    0.000    0.000 _multicomp.py:25(DunnettResult)
        1    0.000    0.000    0.000    0.000 mixins.py:59(NDArrayOperatorsMixin)
        1    0.000    0.000    0.000    0.000 dataset.py:202(ConcatDataset)
        9    0.000    0.000    0.000    0.000 warnings.py:165(simplefilter)
        1    0.000    0.000    0.000    0.000 symbol.py:456(Dummy)
        1    0.000    0.000    0.000    0.000 categorical.py:1(<module>)
        1    0.000    0.000    0.000    0.000 conv.py:103(Conv1d)
       30    0.000    0.000    0.000    0.000 warnings.py:466(__enter__)
        1    0.000    0.000    0.000    0.000 decorators.py:111(binary_op_wrapper)
        1    0.000    0.000    0.000    0.000 combining.py:56(ZipperMapDataPipe)
        1    0.000    0.000    0.000    0.000 pathlib.py:857(Path)
       85    0.000    0.000    0.000    0.000 _parser.py:295(checkgroupname)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1644(FigureCanvasBase)
    35/24    0.000    0.000    0.000    0.000 typing.py:371(_eval_type)
       40    0.000    0.000    0.000    0.000 numbers.py:780(__new__)
       68    0.000    0.000    0.000    0.000 _internal.py:38(<listcomp>)
        1    0.000    0.000    0.000    0.000 pprint.py:1(<module>)
       26    0.000    0.000    0.000    0.000 _decomp_lu.py:16(<listcomp>)
        1    0.000    0.000    0.000    0.000 ticker.py:1689(Locator)
        1    0.000    0.000    0.000    0.000 grouping.py:144(GrouperIterDataPipe)
        1    0.000    0.000    0.000    0.000 numbers.py:281(Number)
        1    0.000    0.000    0.000    0.000 _parser.py:294(__init__)
        1    0.000    0.000    0.000    0.000 <frozen os>:44(_get_exports_list)
        1    0.000    0.000    0.000    0.000 printer.py:1(<module>)
       62    0.000    0.000    0.000    0.000 __init__.py:26(__new__)
        2    0.000    0.000    0.000    0.000 twodim_base.py:158(eye)
        1    0.000    0.000    0.000    0.000 _tzpath.py:1(<module>)
        4    0.000    0.000    0.000    0.000 polynomial.py:1227(__init__)
      502    0.000    0.000    0.000    0.000 {method 'copy' of 'list' objects}
      156    0.000    0.000    0.000    0.000 inspect.py:943(<genexpr>)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1502(<listcomp>)
        1    0.000    0.000    0.000    0.000 coreerrors.py:1(<module>)
        1    0.000    0.000    0.000    0.000 polyconfig.py:1(<module>)
       59    0.000    0.000    0.000    0.000 _array_api.py:170(_asarray)
        2    0.000    0.000    0.000    0.000 _new_distributions.py:397(_logpmf_formula)
        9    0.000    0.000    0.000    0.000 _util.py:981(decorator)
        1    0.000    0.000    0.000    0.000 threading.py:1402(__init__)
        1    0.000    0.000    0.000    0.000 lbfgs.py:1(<module>)
        4    0.000    0.000    0.000    0.000 enum.py:1420(<listcomp>)
        1    0.000    0.000    0.000    0.000 assumptions.py:220(_load_pre_generated_assumption_rules)
       55    0.000    0.000    0.000    0.000 numbers.py:3145(__hash__)
        2    0.000    0.000    0.000    0.000 multinomial.py:1(<module>)
      152    0.000    0.000    0.000    0.000 typing.py:456(__repr__)
        1    0.000    0.000    0.000    0.000 selecting.py:19(FilterIterDataPipe)
        1    0.000    0.000    0.000    0.000 facts.py:380(FactRules)
        1    0.000    0.000    0.000    0.000 transforms.py:270(ComposeTransform)
        4    0.000    0.000    0.000    0.000 _miobase.py:134(convert_dtypes)
        1    0.000    0.000    0.000    0.000 win.py:1(<module>)
        1    0.000    0.000    0.000    0.000 expr.py:261(_pow)
        1    0.000    0.000    0.000    0.000 requirements.py:1(<module>)
        1    0.000    0.000    0.000    0.000 inputs.py:1182(KpointsSupportedModes)
        1    0.000    0.000    0.000    0.000 pooling.py:418(MaxUnpool3d)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2457(pdf)
        1    0.000    0.000    0.000    0.000 _subplots.py:11(SubplotBase)
        1    0.000    0.000    0.000    0.000 split_utils.py:31(Component)
      140    0.000    0.000    0.000    0.000 deprecation.py:112(deprecated)
        1    0.000    0.000    0.000    0.000 filelist.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fake_tensor.py:748(FakeTensor)
        1    0.000    0.000    0.000    0.000 einsumfunc.py:1(<module>)
        1    0.000    0.000    0.000    0.000 resource_sharer.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _warnings_errors.py:1(<module>)
       15    0.000    0.000    0.000    0.000 <frozen _collections_abc>:933(clear)
        1    0.000    0.000    0.000    0.000 weight_norm.py:1(<module>)
       66    0.000    0.000    0.000    0.000 __init__.py:237(_releaseLock)
        4    0.000    0.000    0.000    0.000 typing_extensions.py:491(__init__)
        1    0.000    0.000    0.000    0.000 polytools.py:4542(PurePoly)
        1    0.000    0.000    0.000    0.000 polyquinticconst.py:1(<module>)
        3    0.000    0.000    0.000    0.000 {method 'integers' of 'numpy.random._generator.Generator' objects}
        5    0.000    0.000    0.000    0.000 iterables.py:1948(has_variety)
        1    0.000    0.000    0.000    0.000 suite.py:328(_ErrorHolder)
        1    0.000    0.000    0.000    0.000 single.py:1107(Liouville)
       42    0.000    0.000    0.000    0.000 ctx_mp_python.py:336(__new__)
       11    0.000    0.000    0.000    0.000 _tensor.py:31(_handle_torch_function_and_wrap_type_error_to_not_implemented)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4472(halfcauchy_gen)
        1    0.000    0.000    0.000    0.000 json.py:111(MSONable)
      101    0.000    0.000    0.000    0.000 core.py:6161(_expanded)
        1    0.000    0.000    0.000    0.000 pooling.py:331(MaxUnpool2d)
        1    0.000    0.000    0.000    0.000 trigonometry.py:1(<module>)
        1    0.000    0.000    0.000    0.000 response.py:1(<module>)
        1    0.000    0.000    0.000    0.000 polysys.py:1(<module>)
        4    0.000    0.000    0.000    0.000 {method 'close' of '_io.BufferedReader' objects}
        1    0.000    0.000    0.000    0.000 filelister.py:13(FileListerIterDataPipe)
        1    0.000    0.000    0.000    0.000 datapipe.py:42(IterDataPipe)
        2    0.000    0.000    0.000    0.000 core.py:2978(__array_finalize__)
        6    0.000    0.000    0.000    0.000 gzip.py:525(_add_read_data)
        2    0.000    0.000    0.000    0.000 log.py:1(<module>)
        1    0.000    0.000    0.000    0.000 graycode.py:6(GrayCode)
        2    0.000    0.000    0.000    0.000 densebasic.py:343(dmp_validate)
        6    0.000    0.000    0.000    0.000 gaussiandomains.py:23(__new__)
       26    0.000    0.000    0.000    0.000 _sources.py:72(<listcomp>)
        1    0.000    0.000    0.000    0.000 uniform.py:1(<module>)
        1    0.000    0.000    0.000    0.000 symbolic_opset15.py:1(<module>)
       65    0.000    0.000    0.000    0.000 core.py:4087(<listcomp>)
        1    0.000    0.000    0.000    0.000 facts.py:474(_from_python)
        1    0.000    0.000    0.000    0.000 para4tb.py:1(<module>)
        4    0.000    0.000    0.000    0.000 stride_tricks.py:340(_broadcast_to)
        1    0.000    0.000    0.000    0.000 wrappers.py:1(<module>)
       10    0.000    0.000    0.000    0.000 typing_extensions.py:567(_get_protocol_attrs)
        1    0.000    0.000    0.000    0.000 colorbar.py:1186(Colorbar)
        3    0.000    0.000    0.000    0.000 core.py:1627(__xor__)
       55    0.000    0.000    0.000    0.000 {built-in method numpy.empty}
      673    0.000    0.000    0.000    0.000 _beartype.py:34(_no_op_decorator)
        1    0.000    0.000    0.000    0.000 package_exporter.py:74(PackagingErrorReason)
        5    0.000    0.000    0.000    0.000 symbolic_shapes.py:858(_lru_cache)
        1    0.000    0.000    0.000    0.000 numbers.py:419(bernoulli)
       11    0.000    0.000    0.000    0.000 __init__.py:119(inplace_wrapper)
      397    0.000    0.000    0.000    0.000 enum.py:1226(value)
        3    0.000    0.000    0.000    0.000 six.py:887(wrapper)
        1    0.000    0.000    0.000    0.000 scale.py:263(LogScale)
        1    0.000    0.000    0.000    0.000 pooling.py:805(FractionalMaxPool3d)
        1    0.000    0.000    0.000    0.000 pooling.py:735(FractionalMaxPool2d)
       23    0.000    0.000    0.000    0.000 stride_tricks.py:416(_broadcast_shape)
       27    0.000    0.000    0.000    0.000 functools.py:845(_is_valid_dispatch_type)
        2    0.000    0.000    0.000    0.000 linear_fused.py:1(<module>)
       10    0.000    0.000    0.000    0.000 version.py:314(parse)
        1    0.000    0.000    0.000    0.000 _weights_only_unpickler.py:1(<module>)
      252    0.000    0.000    0.000    0.000 rcsetup.py:58(func)
       28    0.000    0.000    0.000    0.000 <frozen posixpath>:388(normpath)
        1    0.000    0.000    0.000    0.000 puiseux.py:1(<module>)
       88    0.000    0.000    0.000    0.000 six.py:146(__init__)
        5    0.000    0.000    0.000    0.000 functools.py:188(total_ordering)
       26    0.000    0.000    0.000    0.000 _sources.py:75(<listcomp>)
       40    0.000    0.000    0.000    0.000 {built-in method numpy.arange}
        1    0.000    0.000    0.000    0.000 polar.py:407(RadialLocator)
       20    0.000    0.000    0.000    0.000 core.py:1030(reset_cache)
       28    0.000    0.000    0.000    0.000 locale.py:678(getpreferredencoding)
        1    0.000    0.000    0.000    0.000 one_hot_categorical.py:1(<module>)
        1    0.000    0.000    0.000    0.000 rationalfield.py:1(<module>)
        3    0.000    0.000    0.000    0.000 __init__.py:882(__init__)
        1    0.000    0.000    0.000    0.000 cm.py:211(ScalarMappable)
        1    0.000    0.000    0.000    0.000 storage.py:318(TypedStorage)
        1    0.000    0.000    0.000    0.000 _constraints.py:1(<module>)
        1    0.000    0.000    0.000    0.000 iterables.py:781(topological_sort)
      130    0.000    0.000    0.000    0.000 core.py:1785(set_whitespace_chars)
        1    0.000    0.000    0.000    0.000 extrapolation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _factories.py:1(<module>)
        1    0.000    0.000    0.000    0.000 mixture_same_family.py:1(<module>)
        2    0.000    0.000    0.000    0.000 sysconfig.py:118(joinuser)
        1    0.000    0.000    0.000    0.000 tensor.py:968(TensorIndexType)
        1    0.000    0.000    0.000    0.000 patches.py:2376(ConnectionStyle)
        1    0.000    0.000    0.000    0.000 adagrad.py:1(<module>)
        2    0.000    0.000    0.000    0.000 init.py:1(<module>)
        1    0.000    0.000    0.000    0.000 relaxed_categorical.py:1(<module>)
        1    0.000    0.000    0.000    0.000 parametrize.py:69(ParametrizationList)
        1    0.000    0.000    0.000    0.000 transforms.py:543(PowerTransform)
       13    0.000    0.000    0.000    0.000 _dtype_ctypes.py:100(dtype_from_ctypes_type)
        1    0.000    0.000    0.000    0.000 pydoc.py:1803(Helper)
        1    0.000    0.000    0.000    0.000 inverselaplace.py:1(<module>)
       13    0.000    0.000    0.000    0.000 sympy_parser.py:1239(<genexpr>)
        1    0.000    0.000    0.000    0.000 _datasource.py:1(<module>)
       12    0.000    0.000    0.000    0.000 matexpr.py:23(deco)
        4    0.000    0.000    0.000    0.000 doccer.py:202(_doc)
      157    0.000    0.000    0.000    0.000 {built-in method torch._C.get}
        6    0.000    0.000    0.000    0.000 core.py:1146(__init__)
        1    0.000    0.000    0.000    0.000 conv.py:180(Conv1d)
       10    0.000    0.000    0.000    0.000 util.py:421(_inner)
      120    0.000    0.000    0.000    0.000 periodic_table.py:170(__getattr__)
       95    0.000    0.000    0.000    0.000 permutations.py:1060(_hashable_content)
        8    0.000    0.000    0.000    0.000 {built-in method zlib.crc32}
       19    0.000    0.000    0.000    0.000 path.py:193(_update_values)
        1    0.000    0.000    0.000    0.000 symbolic_opset16.py:1(<module>)
        1    0.000    0.000    0.000    0.000 Image.py:138(Transpose)
        1    0.000    0.000    0.000    0.000 _bary_rational.py:1(<module>)
        1    0.000    0.000    0.000    0.000 conv.py:47(_ConvNd)
        1    0.000    0.000    0.000    0.000 proxy.py:321(Proxy)
    18/17    0.000    0.000    0.000    0.000 typing.py:1480(<listcomp>)
      144    0.000    0.000    0.000    0.000 core.py:2025(__hash__)
        1    0.000    0.000    0.000    0.000 von_mises.py:70(VonMises)
        1    0.000    0.000    0.000    0.000 _ksstats.py:1(<module>)
        1    0.000    0.000    0.000    0.000 tokens.py:334(CommentToken)
       11    0.000    0.000    0.000    0.000 __init__.py:12(NewCls)
        1    0.000    0.000    0.000    0.000 miscellaneous.py:35(IdentityFunction)
        1    0.000    0.000    0.000    0.000 _contextlib.py:1(<module>)
        1    0.000    0.000    0.000    0.000 quadrature.py:1(<module>)
       13    0.000    0.000    0.000    0.000 enum.py:1347(_iter_member_by_def_)
       15    0.000    0.000    0.000    0.000 copyreg.py:113(_slotnames)
        2    0.000    0.000    0.000    0.000 domainmatrix.py:138(__new__)
        3    0.000    0.000    0.000    0.000 blas.py:337(_get_funcs)
       26    0.000    0.000    0.000    0.000 pathlib.py:877(_make_child_relpath)
        1    0.000    0.000    0.000    0.000 geometric.py:1(<module>)
      507    0.000    0.000    0.000    0.000 boolalg.py:440(__bool__)
        3    0.000    0.000    0.000    0.000 symbolic_opset10.py:240(_avg_pool)
        1    0.000    0.000    0.000    0.000 dense_ndim_array.py:13(DenseNDimArray)
       13    0.000    0.000    0.000    0.000 core.py:8406(_replace_return_type)
        1    0.000    0.000    0.000    0.000 _rules.py:22(_NodeMissingOnnxShapeInference)
      130    0.000    0.000    0.000    0.000 unicode.py:105(<genexpr>)
        1    0.000    0.000    0.000    0.000 _dtype_like.py:65(_DTypeDictBase)
        1    0.000    0.000    0.000    0.000 radam.py:1(<module>)
        1    0.000    0.000    0.000    0.000 qconfig_mapping.py:1(<module>)
        2    0.000    0.000    0.000    0.000 hypergeometric.py:1(<module>)
       26    0.000    0.000    0.000    0.000 _util.py:188(_transition_to_rng)
        1    0.000    0.000    0.000    0.000 _path.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _qmc.py:1960(PoissonDisk)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:204(_LogUniform)
       51    0.000    0.000    0.000    0.000 rcsetup.py:407(validate_fontsize)
        1    0.000    0.000    0.000    0.000 graph.py:131(saved_tensors_hooks)
        1    0.000    0.000    0.000    0.000 fold.py:1(<module>)
        1    0.000    0.000    0.000    0.000 trace_dependencies.py:1(<module>)
        1    0.000    0.000    0.000    0.000 logging_handlers.py:1(<module>)
      643    0.000    0.000    0.000    0.000 {built-in method _sre.unicode_tolower}
        1    0.000    0.000    0.000    0.000 _quad_vec.py:1(<module>)
        1    0.000    0.000    0.000    0.000 extensions.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2388(standard_deviation)
        3    0.000    0.000    0.000    0.000 monkey.py:44(get_unpatched)
        1    0.000    0.000    0.000    0.000 conv.py:156(Conv2d)
        5    0.000    0.000    0.000    0.000 _basic.py:3009(_is_subdtype)
        1    0.000    0.000    0.000    0.000 _infra.py:13(Level)
        8    0.000    0.000    0.000    0.000 _aliases.py:89(asarray)
        1    0.000    0.000    0.000    0.000 conv.py:465(Conv3d)
      316    0.000    0.000    0.000    0.000 {method 'items' of 'collections.OrderedDict' objects}
       15    0.000    0.000    0.000    0.000 arrayprint.py:989(<genexpr>)
        7    0.000    0.000    0.000    0.000 dev.py:80(deprecated_function_decorator)
        1    0.000    0.000    0.000    0.000 julia.py:1(<module>)
        1    0.000    0.000    0.000    0.000 combining.py:313(DemultiplexerIterDataPipe)
       10    0.000    0.000    0.000    0.000 _torch_docs.py:24(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:14(Normal)
        1    0.000    0.000    0.000    0.000 _pytree.py:114(TreeSpec)
        1    0.000    0.000    0.000    0.000 bdist.py:48(bdist)
        7    0.000    0.000    0.000    0.000 core.py:3633(__init__)
        5    0.000    0.000    0.000    0.000 add.py:40(_addsort)
        1    0.000    0.000    0.000    0.000 adamax.py:1(<module>)
        1    0.000    0.000    0.000    0.000 scalarfloat.py:1(<module>)
        1    0.000    0.000    0.000    0.000 numbers.py:594(Float)
        1    0.000    0.000    0.000    0.000 rmsprop.py:1(<module>)
        8    0.000    0.000    0.000    0.000 _ops.py:603(__getattr__)
        1    0.000    0.000    0.000    0.000 octave.py:1(<module>)
        1    0.000    0.000    0.000    0.000 quiver.py:195(QuiverKey)
        6    0.000    0.000    0.000    0.000 {method 'multinomial' of 'numpy.random._generator.Generator' objects}
        1    0.000    0.000    0.000    0.000 nadam.py:1(<module>)
        1    0.000    0.000    0.000    0.000 datetime.py:1311(time)
       16    0.000    0.000    0.000    0.000 arraypad.py:129(_set_pad_area)
        1    0.000    0.000    0.000    0.000 conv.py:316(Conv2d)
        1    0.000    0.000    0.000    0.000 scale.py:560(LogitScale)
        8    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:422(spec_from_loader)
       46    0.000    0.000    0.000    0.000 getlimits.py:101(_float_conv)
       11    0.000    0.000    0.000    0.000 __init__.py:1467(debug)
        2    0.000    0.000    0.000    0.000 _parser.py:997(parse_template)
        1    0.000    0.000    0.000    0.000 cache.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _qmc.py:1609(Sobol)
        1    0.000    0.000    0.000    0.000 independent.py:1(<module>)
        2    0.000    0.000    0.000    0.000 cache.py:168(lazy_function)
        1    0.000    0.000    0.000    0.000 asgd.py:1(<module>)
        1    0.000    0.000    0.000    0.000 expressionrawdomain.py:1(<module>)
      391    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
        1    0.000    0.000    0.000    0.000 symbol.py:212(Symbol)
        3    0.000    0.000    0.000    0.000 core.py:4241(__init__)
        1    0.000    0.000    0.000    0.000 pixelshuffle.py:1(<module>)
      423    0.000    0.000    0.000    0.000 typing.py:2216(cast)
        1    0.000    0.000    0.000    0.000 protocols.py:1(<module>)
      362    0.000    0.000    0.000    0.000 inspect.py:3028(return_annotation)
        4    0.000    0.000    0.000    0.000 typing.py:1520(__init__)
        1    0.000    0.000    0.000    0.000 _bws_test.py:1(<module>)
        1    0.000    0.000    0.000    0.000 autocast_mode.py:18(autocast)
        1    0.000    0.000    0.000    0.000 modularinteger.py:1(<module>)
       30    0.000    0.000    0.000    0.000 _array_api.py:523(<listcomp>)
        1    0.000    0.000    0.000    0.000 conv.py:214(Conv3d)
      110    0.000    0.000    0.000    0.000 {method 'translate' of 'bytearray' objects}
        1    0.000    0.000    0.000    0.000 mathtext.py:1078(StandardPsFonts)
        7    0.000    0.000    0.000    0.000 decoder.py:284(__init__)
        1    0.000    0.000    0.000    0.000 _compatibility.py:1(<module>)
        1    0.000    0.000    0.000    0.000 glsl.py:1(<module>)
      231    0.000    0.000    0.000    0.000 periodic_table.py:237(__hash__)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2494(pmf)
        2    0.000    0.000    0.000    0.000 _compression.py:39(__init__)
        1    0.000    0.000    0.000    0.000 numbers.py:2986(Infinity)
        1    0.000    0.000    0.000    0.000 libmpi.py:1(<module>)
      215    0.000    0.000    0.000    0.000 symbolic_helper.py:234(parse_args)
        1    0.000    0.000    0.000    0.000 __init__.py:1122(ELEMENTWISE_TYPE_PROMOTION_KIND)
        1    0.000    0.000    0.000    0.000 package_exporter.py:53(_ModuleProviderAction)
        1    0.000    0.000    0.000    0.000 ExifTags.py:341(<dictcomp>)
        1    0.000    0.000    0.000    0.000 power.py:22(Pow)
        1    0.000    0.000    0.000    0.000 _python_dispatch.py:1(<module>)
        1    0.000    0.000    0.000    0.000 observer.py:154(UniformQuantizationObserverBase)
        7    0.000    0.000    0.000    0.000 <frozen posixpath>:396(abspath)
        1    0.000    0.000    0.000    0.000 spglib.py:84(DictInterface)
       30    0.000    0.000    0.000    0.000 core.py:4465(<genexpr>)
        1    0.000    0.000    0.000    0.000 domainmatrix.py:506(convert_to)
        1    0.000    0.000    0.000    0.000 rings.py:586(PolyElement)
        1    0.000    0.000    0.000    0.000 dist.py:77(Distribution)
        1    0.000    0.000    0.000    0.000 _tensor_str.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fishersnedecor.py:1(<module>)
        1    0.000    0.000    0.000    0.000 simplex.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _polyint.py:108(_reshape_yi)
        7    0.000    0.000    0.000    0.000 memoization.py:27(decorator)
       99    0.000    0.000    0.000    0.000 traceback.py:325(walk_stack)
        1    0.000    0.000    0.000    0.000 sslproto.py:19(SSLProtocolState)
        1    0.000    0.000    0.000    0.000 bz2.py:97(close)
        1    0.000    0.000    0.000    0.000 patches.py:1551(Arc)
        1    0.000    0.000    0.000    0.000 matrices.py:1(<module>)
        7    0.000    0.000    0.000    0.000 symbolic_opset11.py:345(_interpolate)
        1    0.000    0.000    0.000    0.000 graph.py:267(_PyTreeInfo)
        1    0.000    0.000    0.000    0.000 sets.py:47(Set)
       12    0.000    0.000    0.000    0.000 __init__.py:1893(get_aliased_and_aliases)
        1    0.000    0.000    0.000    0.000 registration.py:64(OverrideDict)
        1    0.000    0.000    0.000    0.000 _exporter_states.py:43(RuntimeTypeCheckState)
       10    0.000    0.000    0.000    0.000 basic.py:135(_get_postprocessors)
        1    0.000    0.000    0.000    0.000 latex.py:142(LatexPrinter)
        1    0.000    0.000    0.000    0.000 compatibility.py:240(IPolys)
        1    0.000    0.000    0.000    0.000 half_cauchy.py:1(<module>)
        1    0.000    0.000    0.000    0.000 kumaraswamy.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _idl.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:863(__str__)
        1    0.000    0.000    0.000    0.000 numbers.py:3176(NegativeInfinity)
        1    0.000    0.000    0.000    0.000 _fortran.py:1(<module>)
        5    0.000    0.000    0.000    0.000 version.py:70(__lt__)
        1    0.000    0.000    0.000    0.000 collections.py:1306(LineCollection)
        2    0.000    0.000    0.000    0.000 traversal.py:1(<module>)
        1    0.000    0.000    0.000    0.000 normal.py:1(<module>)
      109    0.000    0.000    0.000    0.000 inspect.py:505(isbuiltin)
        2    0.000    0.000    0.000    0.000 __init__.py:653(get_arch_list)
       85    0.000    0.000    0.000    0.000 typing.py:891(__hash__)
        3    0.000    0.000    0.000    0.000 patches.py:1878(<listcomp>)
        1    0.000    0.000    0.000    0.000 graph.py:275(CodeGen)
        1    0.000    0.000    0.000    0.000 profiler_legacy.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _web_response.py:15(WebResponse)
        9    0.000    0.000    0.000    0.000 api.py:74(_require_initialized)
        1    0.000    0.000    0.000    0.000 readers.py:16(__init__)
        1    0.000    0.000    0.000    0.000 _globals.py:65(_CopyMode)
        1    0.000    0.000    0.000    0.000 _bvp.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _mmio.py:1(<module>)
        1    0.000    0.000    0.000    0.000 registration.py:123(_SymbolicFunctionGroup)
       50    0.000    0.000    0.000    0.000 sets.py:125(_infimum_key)
       20    0.000    0.000    0.000    0.000 <frozen io>:60(__getattr__)
        1    0.000    0.000    0.000    0.000 backend_tools.py:31(Cursors)
        1    0.000    0.000    0.000    0.000 __init__.py:447(_get_xdg_cache_dir)
        1    0.000    0.000    0.000    0.000 powsimp.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:298(OpTree)
        1    0.000    0.000    0.000    0.000 polynomial.py:1472(Polynomial)
        1    0.000    0.000    0.000    0.000 meta_utils.py:70(MetaConverter)
        1    0.000    0.000    0.000    0.000 matplotlib.py:1(<module>)
        1    0.000    0.000    0.000    0.000 report.py:1(<module>)
        1    0.000    0.000    0.000    0.000 cauchy.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _web_request.py:15(WebRequest)
        1    0.000    0.000    0.000    0.000 _layoutbox.py:1(<module>)
        1    0.000    0.000    0.000    0.000 rprop.py:1(<module>)
        1    0.000    0.000    0.000    0.000 observer.py:888(HistogramObserver)
        1    0.000    0.000    0.000    0.000 quoprimime.py:55(<listcomp>)
        1    0.000    0.000    0.000    0.000 _fitpack_repro.py:1(<module>)
        1    0.000    0.000    0.000    0.000 weak.py:79(WeakIdKeyDictionary)
       16    0.000    0.000    0.000    0.000 _type_aliases.py:44(_bits_of)
        1    0.000    0.000    0.000    0.000 ExifTags.py:352(IFD)
        1    0.000    0.000    0.000    0.000 pareto.py:1(<module>)
       25    0.000    0.000    0.000    0.000 pretty_symbology.py:133(<genexpr>)
       24    0.000    0.000    0.000    0.000 proxy.py:514(_scope)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:4590(ShiftedScaledDistribution)
        1    0.000    0.000    0.000    0.000 _kdtree.py:206(KDTree)
        1    0.000    0.000    0.000    0.000 __init__.py:354(<listcomp>)
        1    0.000    0.000    0.000    0.000 math2.py:1(<module>)
        1    0.000    0.000    0.000    0.000 compositedomain.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _common.py:47(get_package)
        1    0.000    0.000    0.000    0.000 _sf_error.py:1(<module>)
        1    0.000    0.000    0.000    0.000 scale.py:515(LogitTransform)
        1    0.000    0.000    0.000    0.000 arraypad.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _fftlog_backend.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _comparison.py:430(BooleanPair)
        1    0.000    0.000    0.000    0.000 _czt.py:1(<module>)
        6    0.000    0.000    0.000    0.000 {method 'any' of 'numpy.ndarray' objects}
        3    0.000    0.000    0.000    0.000 core.py:2488(__init__)
        1    0.000    0.000    0.000    0.000 fractionfield.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _comparison.py:607(TensorLikePair)
        1    0.000    0.000    0.000    0.000 memmap.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _ndbspline.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:47(Action)
       42    0.000    0.000    0.000    0.000 docstring.py:43(update)
        1    0.000    0.000    0.000    0.000 docstring.py:6(Substitution)
        1    0.000    0.000    0.000    0.000 recipes.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _core_metadata.py:1(<module>)
        1    0.000    0.000    0.000    0.000 studentT.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pretty.py:30(PrettyPrinter)
        1    0.000    0.000    0.000    0.000 _signal_api.py:30(<listcomp>)
        7    0.000    0.000    0.000    0.000 _parser.py:309(_convert)
        6    0.000    0.000    0.000    0.000 {method 'permuted' of 'numpy.random._generator.Generator' objects}
        1    0.000    0.000    0.000    0.000 _result.py:28(Result)
        1    0.000    0.000    0.000    0.000 util.py:49(get_platform)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3145(_moment_raw)
        1    0.000    0.000    0.000    0.000 facts.py:411(__init__)
        1    0.000    0.000    0.000    0.000 ExifTags.py:344(Interop)
       30    0.000    0.000    0.000    0.000 warnings.py:487(__exit__)
       87    0.000    0.000    0.000    0.000 kl.py:41(register_kl)
        1    0.000    0.000    0.000    0.000 <string>:2(__div__)
       62    0.000    0.000    0.000    0.000 unary.py:149(_torch_unary)
        1    0.000    0.000    0.000    0.000 ideals.py:1(<module>)
        1    0.000    0.000    0.000    0.000 design_patterns.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _policybase.py:99(_extend_docstrings)
        1    0.000    0.000    0.000    0.000 dates.py:589(DateFormatter)
      191    0.000    0.000    0.000    0.000 <frozen abc>:7(abstractmethod)
        4    0.000    0.000    0.000    0.000 fromnumeric.py:2692(max)
        1    0.000    0.000    0.000    0.000 parametrizations.py:33(_OrthMaps)
        1    0.000    0.000    0.000    0.000 scale.py:431(SymmetricalLogScale)
        1    0.000    0.000    0.000    0.000 ImageColor.py:1(<module>)
        1    0.000    0.000    0.000    0.000 lll.py:1(<module>)
        1    0.000    0.000    0.000    0.000 polyconfig.py:52(configure)
        1    0.000    0.000    0.000    0.000 ast.py:54(literal_eval)
        1    0.000    0.000    0.000    0.000 Image.py:158(Resampling)
        1    0.000    0.000    0.000    0.000 structure.py:213(SiteCollection)
        1    0.000    0.000    0.000    0.000 __init__.py:172(SDPBackend)
        2    0.000    0.000    0.000    0.000 lsoda.py:1(<module>)
        1    0.000    0.000    0.000    0.000 proxy_tensor.py:516(ProxySymDispatchMode)
        2    0.000    0.000    0.000    0.000 stubs.py:1(<module>)
        6    0.000    0.000    0.000    0.000 ctx_mp_python.py:47(__new__)
       14    0.000    0.000    0.000    0.000 numerictypes.py:357(issubdtype)
        1    0.000    0.000    0.000    0.000 const_fold.py:11(FoldedGraphModule)
      169    0.000    0.000    0.000    0.000 contextlib.py:431(__exit__)
        1    0.000    0.000    0.000    0.000 primes.py:1(<module>)
        1    0.000    0.000    0.000    0.000 combining.py:562(ZipperIterDataPipe)
        1    0.000    0.000    0.000    0.000 gamma.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _spherical_bessel.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ufunclike.py:1(<module>)
        1    0.000    0.000    0.000    0.000 <frozen _collections_abc>:835(__iter__)
        3    0.000    0.000    0.000    0.000 monkey.py:54(get_unpatched_class)
        1    0.000    0.000    0.000    0.000 numbers.py:4474(_register_classes)
        3    0.000    0.000    0.000    0.000 numbers.py:1306(__new__)
       30    0.000    0.000    0.000    0.000 _array_api.py:531(<listcomp>)
        7    0.000    0.000    0.000    0.000 symbolic_helper.py:1064(_interpolate_helper)
        1    0.000    0.000    0.000    0.000 trigonometric.py:2029(InverseTrigonometricFunction)
        1    0.000    0.000    0.000    0.000 gridspec.py:602(SubplotSpec)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:225(BackendConfig)
        8    0.000    0.000    0.000    0.000 core.py:1031(deprecation_wrapper)
       43    0.000    0.000    0.000    0.000 pathlib.py:515(_from_parsed_parts)
        6    0.000    0.000    0.000    0.000 libmpf.py:410(from_float)
        1    0.000    0.000    0.000    0.000 plane.py:27(<listcomp>)
        1    0.000    0.000    0.000    0.000 poisson.py:1(<module>)
        1    0.000    0.000    0.000    0.000 mock.py:44(<setcomp>)
        1    0.000    0.000    0.000    0.000 jscode.py:1(<module>)
       58    0.000    0.000    0.000    0.000 unary.py:158(_torch_inplace_unary)
        1    0.000    0.000    0.000    0.000 _ir_utils.py:4(_InsertPoint)
       87    0.000    0.000    0.000    0.000 kl.py:72(decorator)
        1    0.000    0.000    0.000    0.000 padding.py:82(ConstantPad2d)
       57    0.000    0.000    0.000    0.000 {method 'reshape' of 'numpy.ndarray' objects}
       48    0.000    0.000    0.000    0.000 lapack.py:908(backtickrepl)
        1    0.000    0.000    0.000    0.000 _mio5.py:149(MatFile5Reader)
        4    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:772(create_module)
      120    0.000    0.000    0.000    0.000 _multiufuncs.py:43(<genexpr>)
        1    0.000    0.000    0.000    0.000 constants.py:31(_SendfileMode)
      141    0.000    0.000    0.000    0.000 __init__.py:259(__iter__)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:387(_WorldMeta)
       12    0.000    0.000    0.000    0.000 misc.py:304(func_name)
        3    0.000    0.000    0.000    0.000 core.py:1667(__invert__)
       93    0.000    0.000    0.000    0.000 sites.py:138(species)
        3    0.000    0.000    0.000    0.000 feedparser.py:139(__init__)
        3    0.000    0.000    0.000    0.000 misc.py:1(<module>)
       83    0.000    0.000    0.000    0.000 traceback.py:264(__init__)
        1    0.000    0.000    0.000    0.000 para4band.py:14(Stiefel_Frame)
       38    0.000    0.000    0.000    0.000 observer.py:77(_with_args)
        3    0.000    0.000    0.000    0.000 functools.py:651(cache)
        1    0.000    0.000    0.000    0.000 reductions.py:379(init_reductions)
      127    0.000    0.000    0.000    0.000 ssl.py:125(<lambda>)
        6    0.000    0.000    0.000    0.000 <frozen posixpath>:117(splitext)
        1    0.000    0.000    0.000    0.000 profiler.py:230(ProfilerAction)
        1    0.000    0.000    0.000    0.000 _run.py:30(Run)
        4    0.000    0.000    0.000    0.000 ctx_base.py:52(_init_aliases)
        1    0.000    0.000    0.000    0.000 util.py:35(get_host_platform)
        3    0.000    0.000    0.000    0.000 TiffTags.py:450(<dictcomp>)
        2    0.000    0.000    0.000    0.000 __init__.py:386(__getattr__)
        1    0.000    0.000    0.000    0.000 rcode.py:1(<module>)
       16    0.000    0.000    0.000    0.000 __init__.py:62(_process_keys)
       28    0.000    0.000    0.000    0.000 {method 'remove' of 'list' objects}
        1    0.000    0.000    0.000    0.000 quant_type.py:9(QuantType)
        1    0.000    0.000    0.000    0.000 __init__.py:231(<listcomp>)
        1    0.000    0.000    0.000    0.000 c10d_error_logger.py:17(_get_or_create_logger)
       38    0.000    0.000    0.000    0.000 constructor.py:321(add_constructor)
        1    0.000    0.000    0.000    0.000 geo.py:252(AitoffAxes)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1366(MouseButton)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:888(Symbol)
        1    0.000    0.000    0.000    0.000 core.py:3127(view)
      127    0.000    0.000    0.000    0.000 ssl.py:130(<lambda>)
       42    0.000    0.000    0.000    0.000 typing.py:1803(<genexpr>)
        1    0.000    0.000    0.000    0.000 scale.py:541(LogisticTransform)
      162    0.000    0.000    0.000    0.000 _compatibility.py:7(compatibility)
      127    0.000    0.000    0.000    0.000 ssl.py:140(<lambda>)
        1    0.000    0.000    0.000    0.000 timeouts.py:18(_State)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:865(<listcomp>)
        1    0.000    0.000    0.000    0.000 weibull.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:23(Spin)
        4    0.000    0.000    0.000    0.000 ssl.py:461(__new__)
        1    0.000    0.000    0.000    0.000 lkj_cholesky.py:1(<module>)
        1    0.000    0.000    0.000    0.000 matcher_utils.py:50(SubgraphMatcher)
       13    0.000    0.000    0.000    0.000 weakref.py:367(__init__)
        1    0.000    0.000    0.000    0.000 recurr.py:1(<module>)
        6    0.000    0.000    0.000    0.000 stride_tricks.py:433(broadcast_shapes)
        1    0.000    0.000    0.000    0.000 docinfo.py:1(<module>)
        2    0.000    0.000    0.000    0.000 immutable_collections.py:18(_create_immutable_container)
        1    0.000    0.000    0.000    0.000 _pylab_helpers.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pythonintegerring.py:1(<module>)
        1    0.000    0.000    0.000    0.000 taskgroups.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _tool_component.py:19(ToolComponent)
        1    0.000    0.000    0.000    0.000 jiterator.py:1(<module>)
        1    0.000    0.000    0.000    0.000 throughput_benchmark.py:1(<module>)
        6    0.000    0.000    0.000    0.000 fromnumeric.py:2322(any)
      127    0.000    0.000    0.000    0.000 ssl.py:145(<lambda>)
        1    0.000    0.000    0.000    0.000 internal.py:23(RPCExecMode)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:604(CategoryDict)
        5    0.000    0.000    0.000    0.000 inverselaplace.py:668(__init__)
       62    0.000    0.000    0.000    0.000 __init__.py:202(_checkLevel)
       91    0.000    0.000    0.000    0.000 dataclasses.py:604(<genexpr>)
       29    0.000    0.000    0.000    0.000 constraint_registry.py:106(<lambda>)
       36    0.000    0.000    0.000    0.000 constraints.py:170(__init__)
        1    0.000    0.000    0.000    0.000 _monitor.py:1(<module>)
        5    0.000    0.000    0.000    0.000 version.py:334(_cmp)
        1    0.000    0.000    0.000    0.000 anomaly_mode.py:1(<module>)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:3841(Format)
        1    0.000    0.000    0.000    0.000 _stats.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sdm.py:25(SDM)
      127    0.000    0.000    0.000    0.000 ssl.py:150(<lambda>)
        1    0.000    0.000    0.000    0.000 _classes.py:1(<module>)
       14    0.000    0.000    0.000    0.000 rcsetup.py:623(validate_capstyle)
        3    0.000    0.000    0.000    0.000 symbolic_opset9.py:4792(_one_hidden_rnn)
        1    0.000    0.000    0.000    0.000 gmpyintegerring.py:1(<module>)
       61    0.000    0.000    0.000    0.000 _inspect.py:144(<lambda>)
      127    0.000    0.000    0.000    0.000 ssl.py:135(<lambda>)
        1    0.000    0.000    0.000    0.000 __init__.py:456(<listcomp>)
        5    0.000    0.000    0.000    0.000 quadrature.py:461(__init__)
        3    0.000    0.000    0.000    0.000 core.py:5079(__init__)
        7    0.000    0.000    0.000    0.000 _legacy.py:15(deprecated)
       92    0.000    0.000    0.000    0.000 {built-in method math.log}
        1    0.000    0.000    0.000    0.000 polygon.py:25(<listcomp>)
        1    0.000    0.000    0.000    0.000 symbolic_opset18.py:1(<module>)
        1    0.000    0.000    0.000    0.000 symbolic_opset17.py:1(<module>)
        1    0.000    0.000    0.000    0.000 combining.py:362(_DemultiplexerIterDataPipe)
        1    0.000    0.000    0.000    0.000 _elffile.py:33(EMachine)
        1    0.000    0.000    0.000    0.000 table.py:30(Cell)
        6    0.000    0.000    0.000    0.000 symbolic_opset9.py:1730(_adaptive_pool)
        1    0.000    0.000    0.000    0.000 gzip.py:456(__init__)
        1    0.000    0.000    0.000    0.000 rendezvous.py:1(<module>)
        1    0.000    0.000    0.000    0.000 padding.py:133(ConstantPad3d)
        1    0.000    0.000    0.000    0.000 registration.py:202(SymbolicRegistry)
      105    0.000    0.000    0.000    0.000 textwrap.py:479(predicate)
        3    0.000    0.000    0.000    0.000 __init__.py:36(__deprecate_private_class)
        1    0.000    0.000    0.000    0.000 locks.py:439(_BarrierState)
      377    0.000    0.000    0.000    0.000 enum.py:1221(name)
       14    0.000    0.000    0.000    0.000 <frozen posixpath>:140(basename)
      112    0.000    0.000    0.000    0.000 patches.py:1885(<genexpr>)
        1    0.000    0.000    0.000    0.000 variable.py:1(<module>)
        1    0.000    0.000    0.000    0.000 rings.py:196(PolyRing)
       15    0.000    0.000    0.000    0.000 arrayprint.py:984(<genexpr>)
        1    0.000    0.000    0.000    0.000 operations.py:29(AssocOp)
        1    0.000    0.000    0.000    0.000 evalf.py:1395(_create_evalf_table)
        1    0.000    0.000    0.000    0.000 plotgrid.py:1(<module>)
        1    0.000    0.000    0.000    0.000 Image.py:149(Transform)
        1    0.000    0.000    0.000    0.000 log_normal.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _translation_metadata.py:15(TranslationMetadata)
        9    0.000    0.000    0.000    0.000 typing.py:1639(__repr__)
        1    0.000    0.000    0.000    0.000 widgets.py:672(TextBox)
        1    0.000    0.000    0.000    0.000 rrule.py:1307(rruleset)
        1    0.000    0.000    0.000    0.000 inference.py:1(<module>)
        7    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:464(__str__)
        2    0.000    0.000    0.000    0.000 __init__.py:1460(setLevel)
       93    0.000    0.000    0.000    0.000 exceptions.py:49(__init__)
        3    0.000    0.000    0.000    0.000 core.py:3727(__init__)
        1    0.000    0.000    0.000    0.000 order.py:11(Order)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:393(norm_gen)
       28    0.000    0.000    0.000    0.000 typing_extensions.py:495(__setattr__)
        1    0.000    0.000    0.000    0.000 pg_operation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _invocation.py:17(Invocation)
        8    0.000    0.000    0.000    0.000 resolver.py:131(add_implicit_resolver_base)
    54/46    0.000    0.000    0.000    0.000 fake_tensor.py:94(<genexpr>)
        1    0.000    0.000    0.000    0.000 trifinder.py:1(<module>)
       14    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3153(_moment_raw_dispatch)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2327(median)
       13    0.000    0.000    0.000    0.000 mixins.py:44(_numeric_methods)
        1    0.000    0.000    0.000    0.000 _mio4.py:316(MatFile4Reader)
        6    0.000    0.000    0.000    0.000 bessel.py:893(assume_integer_order)
       52    0.000    0.000    0.000    0.000 _add_newdocs.py:6754(refer_to_array_attribute)
      124    0.000    0.000    0.000    0.000 functions.py:85(defun)
       15    0.000    0.000    0.000    0.000 _jit_internal.py:465(boolean_dispatch)
       38    0.000    0.000    0.000    0.000 getlimits.py:16(_fr0)
      104    0.000    0.000    0.000    0.000 inspect.py:456(istraceback)
       90    0.000    0.000    0.000    0.000 basic.py:938(_sorted_args)
        1    0.000    0.000    0.000    0.000 {built-in method torch._C._init_names}
       47    0.000    0.000    0.000    0.000 enum.py:1128(_generate_next_value_)
        1    0.000    0.000    0.000    0.000 _genz_malik.py:1(<module>)
        1    0.000    0.000    0.000    0.000 backend_bases.py:2772(_Mode)
       58    0.000    0.000    0.000    0.000 constraint_registry.py:87(register)
       63    0.000    0.000    0.000    0.000 _axis_nan_policy.py:659(<listcomp>)
        2    0.000    0.000    0.000    0.000 dispatcher.py:46(ambiguity_register_error_ignore_dup)
        3    0.000    0.000    0.000    0.000 core.py:5901(__init__)
        1    0.000    0.000    0.000    0.000 geo.py:416(LambertAxes)
        1    0.000    0.000    0.000    0.000 fancysets.py:1440(PolarComplexRegion)
        4    0.000    0.000    0.000    0.000 platform.py:1107(python_implementation)
        1    0.000    0.000    0.000    0.000 _polybase.py:18(ABCPolyBase)
       14    0.000    0.000    0.000    0.000 __init__.py:144(_check_size)
        1    0.000    0.000    0.000    0.000 {built-in method torch._C._multiprocessing_init}
        1    0.000    0.000    0.000    0.000 _odds_ratio.py:1(<module>)
        1    0.000    0.000    0.000    0.000 spectrum.py:1(<module>)
        6    0.000    0.000    0.000    0.000 symbolic_opset10.py:262(_interpolate)
        1    0.000    0.000    0.000    0.000 core.py:2510(Keyword)
        2    0.000    0.000    0.000    0.000 realfield.py:121(dtype)
        1    0.000    0.000    0.000    0.000 gmpyrationalfield.py:1(<module>)
       36    0.000    0.000    0.000    0.000 deprecation.py:192(_deprecated_property)
       13    0.000    0.000    0.000    0.000 fromnumeric.py:200(reshape)
        1    0.000    0.000    0.000    0.000 _mio5.py:817(MatFile5Writer)
        3    0.000    0.000    0.000    0.000 symbolic_opset11.py:577(_avg_pool)
        6    0.000    0.000    0.000    0.000 symbolic_opset9.py:3376(_unsupported_dropout)
       11    0.000    0.000    0.000    0.000 __init__.py:1734(isEnabledFor)
       26    0.000    0.000    0.000    0.000 basic.py:88(_cmp_name)
        1    0.000    0.000    0.000    0.000 core.py:39(OrbitalType)
        1    0.000    0.000    0.000    0.000 patches.py:1242(FancyArrow)
       12    0.000    0.000    0.000    0.000 weakref.py:289(update)
        1    0.000    0.000    0.000    0.000 contour.py:670(ContourSet)
        1    0.000    0.000    0.000    0.000 channelshuffle.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dop853_coefficients.py:1(<module>)
        1    0.000    0.000    0.000    0.000 profiler.py:820(KinetoStepTracker)
        1    0.000    0.000    0.000    0.000 reinplace.py:16(_ViewType)
      124    0.000    0.000    0.000    0.000 {method 'index' of 'list' objects}
      449    0.000    0.000    0.000    0.000 {method 'popleft' of 'collections.deque' objects}
        1    0.000    0.000    0.000    0.000 GimpGradientFile.py:1(<module>)
        3    0.000    0.000    0.000    0.000 numbers.py:1374(_new)
      116    0.000    0.000    0.000    0.000 typing.py:1812(<genexpr>)
        1    0.000    0.000    0.000    0.000 ctx_fp.py:12(FPContext)
        1    0.000    0.000    0.000    0.000 _lazy.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sqrtdenest.py:1(<module>)
       23    0.000    0.000    0.000    0.000 qconfig.py:98(__new__)
        5    0.000    0.000    0.000    0.000 misc.py:181(debug_decorator)
       55    0.000    0.000    0.000    0.000 numbers.py:546(__hash__)
       71    0.000    0.000    0.000    0.000 {method 'translate' of 'str' objects}
        1    0.000    0.000    0.000    0.000 _trustregion_exact.py:1(<module>)
        1    0.000    0.000    0.000    0.000 factortools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:11012(vonmises_gen)
        1    0.000    0.000    0.000    0.000 qs.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fetch.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _spectral.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _hook_iterator.py:8(_SnapshotState)
        1    0.000    0.000    0.000    0.000 ctx_mp_python.py:512(__div__)
        1    0.000    0.000    0.000    0.000 profiler.py:446(record_function)
        1    0.000    0.000    0.000    0.000 pretty_symbology.py:57(pretty_try_use_unicode)
        1    0.000    0.000    0.000    0.000 binomial.py:13(Binomial)
      100    0.000    0.000    0.000    0.000 perm_groups.py:136(<genexpr>)
       15    0.000    0.000    0.000    0.000 rcsetup.py:84(_listify_validator)
       44    0.000    0.000    0.000    0.000 typing.py:2798(<listcomp>)
        1    0.000    0.000    0.000    0.000 patches.py:698(Rectangle)
        1    0.000    0.000    0.000    0.000 Image.py:177(Dither)
       13    0.000    0.000    0.000    0.000 {method 'random' of 'numpy.random._generator.Generator' objects}
       12    0.000    0.000    0.000    0.000 arrayprint.py:753(_extendLine_pretty)
        1    0.000    0.000    0.000    0.000 combining.py:23(ConcaterIterDataPipe)
        1    0.000    0.000    0.000    0.000 sharding.py:16(SHARDING_PRIORITIES)
        1    0.000    0.000    0.000    0.000 importtools.py:14(__sympy_debug)
       89    0.000    0.000    0.000    0.000 operations.py:73(<genexpr>)
       10    0.000    0.000    0.000    0.000 getlimits.py:685(__init__)
        1    0.000    0.000    0.000    0.000 core.py:5454(__init__)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1744(_broadcast)
        1    0.000    0.000    0.000    0.000 _version.py:20(get_versions)
        1    0.000    0.000    0.000    0.000 _ellip_harm.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _guards.py:253(GuardsCheckpointState)
      134    0.000    0.000    0.000    0.000 wrappers.py:96(__init__)
        1    0.000    0.000    0.000    0.000 _utils.py:46(EventKey)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:601(__str__)
        1    0.000    0.000    0.000    0.000 factorials.py:285(subfactorial)
        1    0.000    0.000    0.000    0.000 grad_scaler.py:35(OptState)
        1    0.000    0.000    0.000    0.000 sslproto.py:27(AppProtocolState)
      104    0.000    0.000    0.000    0.000 inspect.py:466(isframe)
        1    0.000    0.000    0.000    0.000 patches.py:883(RegularPolygon)
       47    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:1103(_sanity_check)
       93    0.000    0.000    0.000    0.000 composition.py:207(items)
        2    0.000    0.000    0.000    0.000 calculus.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _threadsafety.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:231(reload_library)
        5    0.000    0.000    0.000    0.000 transforms.py:242(make_wrapper)
        1    0.000    0.000    0.000    0.000 geo.py:301(HammerAxes)
        1    0.000    0.000    0.000    0.000 settings.py:1(<module>)
        1    0.000    0.000    0.000    0.000 transforms.py:1746(Affine2DBase)
        1    0.000    0.000    0.000    0.000 _location.py:19(Location)
        1    0.000    0.000    0.000    0.000 common.py:286(StreamWrapper)
        1    0.000    0.000    0.000    0.000 core.py:6568(__array_finalize__)
        1    0.000    0.000    0.000    0.000 quasirandom.py:1(<module>)
        1    0.000    0.000    0.000    0.000 linalg.py:97(_determine_error_states)
        1    0.000    0.000    0.000    0.000 groups.py:317(<dictcomp>)
        2    0.000    0.000    0.000    0.000 complexfield.py:81(dtype)
        1    0.000    0.000    0.000    0.000 _morphology.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:4777(IndentedBlock)
        1    0.000    0.000    0.000    0.000 lbfgs.py:184(LBFGS)
       12    0.000    0.000    0.000    0.000 arrayprint.py:1018(__call__)
        1    0.000    0.000    0.000    0.000 remote_device.py:1(<module>)
        1    0.000    0.000    0.000    0.000 quiver.py:442(Quiver)
        3    0.000    0.000    0.000    0.000 __init__.py:576(__init__)
        1    0.000    0.000    0.000    0.000 _backend.py:51(set_global_backend)
        1    0.000    0.000    0.000    0.000 Image.py:190(Quantize)
      196    0.000    0.000    0.000    0.000 core.py:485(mayReturnEmpty)
        1    0.000    0.000    0.000    0.000 _type_aliases.py:211(_set_array_types)
       25    0.000    0.000    0.000    0.000 polyoptions.py:64(__init__)
        2    0.000    0.000    0.000    0.000 fnmatch.py:74(translate)
        1    0.000    0.000    0.000    0.000 library.py:1(<module>)
        1    0.000    0.000    0.000    0.000 inequalities.py:1(<module>)
        1    0.000    0.000    0.000    0.000 transforms.py:2038(IdentityTransform)
        2    0.000    0.000    0.000    0.000 getlimits.py:307(_get_machar)
       12    0.000    0.000    0.000    0.000 {built-in method numpy.zeros}
        1    0.000    0.000    0.000    0.000 _VF.py:1(<module>)
        1    0.000    0.000    0.000    0.000 {method 'write' of '_io.TextIOWrapper' objects}
        1    0.000    0.000    0.000    0.000 __init__.py:319(ELEMENTWISE_PRIM_TYPE_PROMOTION_KIND)
        1    0.000    0.000    0.000    0.000 Image.py:527(Image)
        1    0.000    0.000    0.000    0.000 _string_helpers.py:1(<module>)
        1    0.000    0.000    0.000    0.000 datetime.py:2293(timezone)
        1    0.000    0.000    0.000    0.000 distributed.py:148(_BufferCommHookLocation)
        1    0.000    0.000    0.000    0.000 base_events.py:387(BaseEventLoop)
        4    0.000    0.000    0.000    0.000 {built-in method _imp.create_builtin}
        1    0.000    0.000    0.000    0.000 __init__.py:1131(REDUCTION_OUTPUT_TYPE_KIND)
        2    0.000    0.000    0.000    0.000 __init__.py:144(is_cpython)
       41    0.000    0.000    0.000    0.000 _add_newdocs_scalars.py:83(<genexpr>)
        1    0.000    0.000    0.000    0.000 __init__.py:42(__sympy_debug)
        1    0.000    0.000    0.000    0.000 __init__.py:154(_check_cubins)
        1    0.000    0.000    0.000    0.000 _cm_listed.py:2061(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:270(Uniform)
        1    0.000    0.000    0.000    0.000 runners.py:15(_State)
       23    0.000    0.000    0.000    0.000 pkgutil.py:407(get_importer)
        3    0.000    0.000    0.000    0.000 <frozen os>:681(__setitem__)
        1    0.000    0.000    0.000    0.000 dataset.py:63(IterableDataset)
        3    0.000    0.000    0.000    0.000 rcsetup.py:701(_validate_hinting)
        1    0.000    0.000    0.000    0.000 _miobase.py:351(MatFileReader)
       49    0.000    0.000    0.000    0.000 results.py:215(__getitem__)
        2    0.000    0.000    0.000    0.000 rationaltools.py:1(<module>)
       47    0.000    0.000    0.000    0.000 core.py:2501(parseImpl)
        2    0.000    0.000    0.000    0.000 {built-in method posix.scandir}
        1    0.000    0.000    0.000    0.000 combining.py:10(ConcaterMapDataPipe)
        1    0.000    0.000    0.000    0.000 case.py:344(TestCase)
        1    0.000    0.000    0.000    0.000 getlimits.py:612(tiny)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:5382(MonotonicTransformedDistribution)
        1    0.000    0.000    0.000    0.000 combinatorics.py:54(ShufflerIterDataPipe)
        2    0.000    0.000    0.000    0.000 conflict.py:34(super_signature)
        1    0.000    0.000    0.000    0.000 logistic_normal.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:3696(__init__)
       42    0.000    0.000    0.000    0.000 _typing.py:275(__init__)
        1    0.000    0.000    0.000    0.000 subscheck.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pretty_symbology.py:132(<dictcomp>)
        1    0.000    0.000    0.000    0.000 numbers.py:3343(NaN)
        1    0.000    0.000    0.000    0.000 libmpf.py:136(<listcomp>)
        1    0.000    0.000    0.000    0.000 domainscalar.py:1(<module>)
        1    0.000    0.000    0.000    0.000 operations.py:575(AssocOpDispatcher)
       95    0.000    0.000    0.000    0.000 iterables.py:2000(check)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:707(beta_gen)
        1    0.000    0.000    0.000    0.000 geo.py:346(MollweideAxes)
      100    0.000    0.000    0.000    0.000 perm_groups.py:134(<genexpr>)
        1    0.000    0.000    0.000    0.000 _external_properties.py:25(ExternalProperties)
        1    0.000    0.000    0.000    0.000 ellipse.py:38(<listcomp>)
        1    0.000    0.000    0.000    0.000 subgraph_rewriter.py:21(ReplacedPatterns)
        1    0.000    0.000    0.000    0.000 outputs.py:205(Vasprun)
        1    0.000    0.000    0.000    0.000 decompositions.py:34(Reduction)
       41    0.000    0.000    0.000    0.000 numbers.py:442(sort_key)
        1    0.000    0.000    0.000    0.000 autograd_function.py:511(WrappedCtx)
        2    0.000    0.000    0.000    0.000 getlimits.py:86(_str_smallest_subnormal)
        4    0.000    0.000    0.000    0.000 {built-in method _ssl.txt2obj}
        4    0.000    0.000    0.000    0.000 getlimits.py:62(smallest_subnormal)
      110    0.000    0.000    0.000    0.000 _internal.py:883(<genexpr>)
        1    0.000    0.000    0.000    0.000 trirefine.py:1(<module>)
        1    0.000    0.000    0.000    0.000 tensor.py:2417(TensAdd)
        1    0.000    0.000    0.000    0.000 __init__.py:264(_reset_cache)
        1    0.000    0.000    0.000    0.000 index_methods.py:1(<module>)
        1    0.000    0.000    0.000    0.000 function.py:296(_SingleLevelFunction)
       36    0.000    0.000    0.000    0.000 deprecation.py:211(finalize)
        1    0.000    0.000    0.000    0.000 distributed.py:13(DistributedSampler)
        1    0.000    0.000    0.000    0.000 enumerative.py:1(<module>)
        1    0.000    0.000    0.000    0.000 numbers.py:1770(Integer)
        4    0.000    0.000    0.000    0.000 platform.py:915(system)
        1    0.000    0.000    0.000    0.000 intfunc.py:1(<module>)
      256    0.000    0.000    0.000    0.000 libintmath.py:62(python_trailing)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:370(Binomial)
        1    0.000    0.000    0.000    0.000 callable.py:21(MapperIterDataPipe)
        3    0.000    0.000    0.000    0.000 core.py:1757(suppress)
        1    0.000    0.000    0.000    0.000 rnn.py:382(LSTM)
        1    0.000    0.000    0.000    0.000 arrayop.py:1(<module>)
       24    0.000    0.000    0.000    0.000 {built-in method numpy.core._multiarray_umath.dragon4_positional}
        1    0.000    0.000    0.000    0.000 _binomtest.py:1(<module>)
      147    0.000    0.000    0.000    0.000 <frozen _collections_abc>:477(_is_param_expr)
        1    0.000    0.000    0.000    0.000 subfield.py:1(<module>)
        3    0.000    0.000    0.000    0.000 sdm.py:78(__init__)
        1    0.000    0.000    0.000    0.000 backend_bases.py:2630(FigureManagerBase)
       16    0.000    0.000    0.000    0.000 fake_quantize.py:106(with_args)
      186    0.000    0.000    0.000    0.000 __init__.py:108(<lambda>)
        2    0.000    0.000    0.000    0.000 signals.py:1(<module>)
       19    0.000    0.000    0.000    0.000 {method 'round' of 'numpy.ndarray' objects}
       10    0.000    0.000    0.000    0.000 __init__.py:216(_logged_cached)
        2    0.000    0.000    0.000    0.000 core.py:6744(__init__)
        1    0.000    0.000    0.000    0.000 sparse_adam.py:7(SparseAdam)
        1    0.000    0.000    0.000    0.000 helpers.py:692(OpAssoc)
        1    0.000    0.000    0.000    0.000 _machar.py:1(<module>)
        2    0.000    0.000    0.000    0.000 __init__.py:1415(_clear_cache)
        1    0.000    0.000    0.000    0.000 ssl.py:1006(SSLSocket)
        1    0.000    0.000    0.000    0.000 _common.py:42(resolve)
       28    0.000    0.000    0.000    0.000 {built-in method _locale.getencoding}
        1    0.000    0.000    0.000    0.000 polyclasses.py:1735(DUP_Flint)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2345(mode)
        1    0.000    0.000    0.000    0.000 grouping.py:29(BatcherIterDataPipe)
        1    0.000    0.000    0.000    0.000 distributed.py:256(DistributedDataParallel)
        1    0.000    0.000    0.000    0.000 negative_binomial.py:9(NegativeBinomial)
        1    0.000    0.000    0.000    0.000 _support_alternative_backends.py:16(_FuncInfo)
        1    0.000    0.000    0.000    0.000 zeta.py:1(<module>)
      116    0.000    0.000    0.000    0.000 typing.py:1814(<genexpr>)
        1    0.000    0.000    0.000    0.000 _linalg_utils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _mode_utils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sysconfig.py:219(is_python_build)
        1    0.000    0.000    0.000    0.000 bivariate.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:491(_parse_visible_devices)
        1    0.000    0.000    0.000    0.000 grouping.py:10(BatcherMapDataPipe)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:107(Disposal)
        1    0.000    0.000    0.000    0.000 _sparse.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:3589(__init__)
       18    0.000    0.000    0.000    0.000 _ops.py:31(_apply_docstring_templates)
        1    0.000    0.000    0.000    0.000 _gauss_legendre.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _external_property_file_references.py:15(ExternalPropertyFileReferences)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:487(DataFlowGraph)
        1    0.000    0.000    0.000    0.000 patches.py:1375(Ellipse)
        1    0.000    0.000    0.000    0.000 ssl.py:477(Purpose)
       93    0.000    0.000    0.000    0.000 _inspect.py:131(strseq)
        6    0.000    0.000    0.000    0.000 basic.py:147(_get_postprocessors_for_type)
        1    0.000    0.000    0.000    0.000 pycode.py:79(AbstractPythonCodePrinter)
        1    0.000    0.000    0.000    0.000 ring.py:1(<module>)
        1    0.000    0.000    0.000    0.000 glob.py:111(_glob0)
      166    0.000    0.000    0.000    0.000 enum.py:897(<lambda>)
        9    0.000    0.000    0.000    0.000 mul.py:844(as_coeff_Mul)
        1    0.000    0.000    0.000    0.000 identification.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _polyint.py:53(__init__)
        1    0.000    0.000    0.000    0.000 results.py:39(ParseResults)
        1    0.000    0.000    0.000    0.000 core.py:3839(Tag)
        1    0.000    0.000    0.000    0.000 parametrizations.py:39(_Orthogonal)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:6024(laplace_gen)
       49    0.000    0.000    0.000    0.000 core.py:2472(_generateDefaultName)
        2    0.000    0.000    0.000    0.000 _codata.py:1533(exact2018)
        1    0.000    0.000    0.000    0.000 line.py:47(<listcomp>)
        1    0.000    0.000    0.000    0.000 _check.py:1(<module>)
        2    0.000    0.000    0.000    0.000 contextlib.py:77(__call__)
        9    0.000    0.000    0.000    0.000 pythonmpq.py:93(_new_check)
        1    0.000    0.000    0.000    0.000 trigonometric.py:2584(atan)
        1    0.000    0.000    0.000    0.000 datapipe.py:358(_IterDataPipeSerializationWrapper)
        1    0.000    0.000    0.000    0.000 _thread_flow_location.py:19(ThreadFlowLocation)
       27    0.000    0.000    0.000    0.000 pathlib.py:622(name)
        5    0.000    0.000    0.000    0.000 _version.py:1(<module>)
       17    0.000    0.000    0.000    0.000 stride_tricks.py:538(<listcomp>)
       97    0.000    0.000    0.000    0.000 core.py:6163(<genexpr>)
        1    0.000    0.000    0.000    0.000 _structures.py:1(<module>)
       45    0.000    0.000    0.000    0.000 {built-in method torch._C.containedTypes}
        1    0.000    0.000    0.000    0.000 getlimits.py:589(smallest_normal)
        1    0.000    0.000    0.000    0.000 polyhedron.py:1019(<listcomp>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2037(expon_gen)
        1    0.000    0.000    0.000    0.000 animation.py:789(HTMLWriter)
       14    0.000    0.000    0.000    0.000 constraints.py:175(__call__)
        1    0.000    0.000    0.000    0.000 _trustregion.py:1(<module>)
       28    0.000    0.000    0.000    0.000 core.py:17(__setattr__)
        1    0.000    0.000    0.000    0.000 exponential.py:219(exp)
        1    0.000    0.000    0.000    0.000 __init__.py:1243(__init__)
        1    0.000    0.000    0.000    0.000 sampler.py:160(WeightedRandomSampler)
        1    0.000    0.000    0.000    0.000 gui.py:1(<module>)
        1    0.000    0.000    0.000    0.000 kind.py:190(KindDispatcher)
       59    0.000    0.000    0.000    0.000 {method 'astype' of 'numpy.ndarray' objects}
       15    0.000    0.000    0.000    0.000 weakref.py:495(popitem)
        1    0.000    0.000    0.000    0.000 text.py:104(Text)
        1    0.000    0.000    0.000    0.000 _tzpath.py:5(reset_tzpath)
      235    0.000    0.000    0.000    0.000 basic.py:324(_hashable_content)
        1    0.000    0.000    0.000    0.000 patches.py:19(Patch)
        5    0.000    0.000    0.000    0.000 decorator.py:127(update)
       36    0.000    0.000    0.000    0.000 binary.py:153(_torch_binary)
        1    0.000    0.000    0.000    0.000 _backend.py:330(set_global_backend)
        2    0.000    0.000    0.000    0.000 ctx_mp_python.py:368(__new__)
        9    0.000    0.000    0.000    0.000 typing_extensions.py:776(runtime_checkable)
       32    0.000    0.000    0.000    0.000 decorators.py:202(wrapper)
        1    0.000    0.000    0.000    0.000 typing.py:611(ClassVar)
        9    0.000    0.000    0.000    0.000 deprecation.py:433(<listcomp>)
        1    0.000    0.000    0.000    0.000 _index.py:1(<module>)
        1    0.000    0.000    0.000    0.000 refine.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _asarray.py:1(<module>)
        5    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1074(_set_invalid_nan_property)
        6    0.000    0.000    0.000    0.000 _methods.py:55(_any)
        1    0.000    0.000    0.000    0.000 _cm.py:158(<dictcomp>)
        1    0.000    0.000    0.000    0.000 base_tasks.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _parser.py:568(parser)
        4    0.000    0.000    0.000    0.000 vmap.py:30(doesnt_support_saved_tensors_hooks)
       25    0.000    0.000    0.000    0.000 rcsetup.py:773(_validate_greaterequal0_lessequal1)
        5    0.000    0.000    0.000    0.000 symbolic_opset9.py:2119(wrap_logical_op_with_negation)
        1    0.000    0.000    0.000    0.000 _digraph.py:1(<module>)
        1    0.000    0.000    0.000    0.000 lowrank_multivariate_normal.py:48(LowRankMultivariateNormal)
        1    0.000    0.000    0.000    0.000 __init__.py:1145(RETURN_TYPE)
        1    0.000    0.000    0.000    0.000 numerictypes.py:589(_register_types)
        1    0.000    0.000    0.000    0.000 _elffile.py:23(EIClass)
        1    0.000    0.000    0.000    0.000 _parser.py:1371(_tzparser)
        1    0.000    0.000    0.000    0.000 perm_groups.py:26(PermutationGroup)
       44    0.000    0.000    0.000    0.000 unicode.py:17(<genexpr>)
       66    0.000    0.000    0.000    0.000 {method 'acquire' of '_thread.RLock' objects}
        1    0.000    0.000    0.000    0.000 dates.py:1124(RRuleLocator)
        1    0.000    0.000    0.000    0.000 datapipe.py:377(DataChunk)
        1    0.000    0.000    0.000    0.000 _script.py:1506(_ScriptProfileTable)
        1    0.000    0.000    0.000    0.000 _exception.py:16(Exception)
        1    0.000    0.000    0.000    0.000 rszeta.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dataframe_wrapper.py:1(<module>)
       26    0.000    0.000    0.000    0.000 _hook_iterator.py:110(IteratorDecorator)
        1    0.000    0.000    0.000    0.000 activation.py:15(MultiheadAttention)
        2    0.000    0.000    0.000    0.000 quantize_jit.py:1(<module>)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3643(_pxf_dispatch)
        1    0.000    0.000    0.000    0.000 orthopolys.py:1(<module>)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:227(_SpecialForm)
        1    0.000    0.000    0.000    0.000 categorical.py:9(Categorical)
        1    0.000    0.000    0.000    0.000 dist.py:144(<listcomp>)
        1    0.000    0.000    0.000    0.000 __config__.py:14(DisplayModes)
        1    0.000    0.000    0.000    0.000 core.py:177(update_user_library)
        1    0.000    0.000    0.000    0.000 _mstats_extras.py:1(<module>)
        1    0.000    0.000    0.000    0.000 gzip.py:327(close)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9038(rayleigh_gen)
      169    0.000    0.000    0.000    0.000 contextlib.py:425(__init__)
        1    0.000    0.000    0.000    0.000 laplace.py:2203(InverseLaplaceTransform)
        4    0.000    0.000    0.000    0.000 rrule.py:80(_invalidates_cache)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:4810(OrderStatisticDistribution)
        3    0.000    0.000    0.000    0.000 rcsetup.py:487(validate_whiskers)
       12    0.000    0.000    0.000    0.000 domain.py:403(convert)
        1    0.000    0.000    0.000    0.000 characteristiczero.py:1(<module>)
       12    0.000    0.000    0.000    0.000 fake_tensor.py:328(impl_decorator)
        1    0.000    0.000    0.000    0.000 riccati.py:1(<module>)
        1    0.000    0.000    0.000    0.000 backend_bases.py:3548(export)
        1    0.000    0.000    0.000    0.000 fractions.py:38(Fraction)
        2    0.000    0.000    0.000    0.000 {built-in method _ctypes.POINTER}
      4/2    0.000    0.000    0.000    0.000 _aliases.py:594(isdtype)
        1    0.000    0.000    0.000    0.000 ecm.py:1(<module>)
        1    0.000    0.000    0.000    0.000 entity.py:67(<listcomp>)
        1    0.000    0.000    0.000    0.000 __init__.py:221(<listcomp>)
      195    0.000    0.000    0.000    0.000 permutations.py:2083(<genexpr>)
        1    0.000    0.000    0.000    0.000 result.py:24(TestResult)
       21    0.000    0.000    0.000    0.000 _distn_infrastructure.py:3308(__new__)
        1    0.000    0.000    0.000    0.000 base_futures.py:1(<module>)
      161    0.000    0.000    0.000    0.000 core.py:1774(leave_whitespace)
        2    0.000    0.000    0.000    0.000 __future__.py:1(<module>)
        2    0.000    0.000    0.000    0.000 __init__.py:393(__getitem__)
        1    0.000    0.000    0.000    0.000 _ndimage_api.py:16(<listcomp>)
       12    0.000    0.000    0.000    0.000 core.py:6117(<lambda>)
       24    0.000    0.000    0.000    0.000 pickletools.py:193(__init__)
        1    0.000    0.000    0.000    0.000 domainelement.py:1(<module>)
       17    0.000    0.000    0.000    0.000 _multivariate.py:216(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:327(<listcomp>)
      102    0.000    0.000    0.000    0.000 patches.py:1878(<genexpr>)
        1    0.000    0.000    0.000    0.000 file_structure_representation.py:1(<module>)
      230    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
       14    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:473(_get_endpoint_str)
        2    0.000    0.000    0.000    0.000 rcsetup.py:130(_validate_date)
        1    0.000    0.000    0.000    0.000 tr_interior_point.py:1(<module>)
        1    0.000    0.000    0.000    0.000 immutable.py:30(ImmutableRepMatrix)
        1    0.000    0.000    0.000    0.000 euclidtools.py:1(<module>)
       25    0.000    0.000    0.000    0.000 {built-in method _struct.calcsize}
        2    0.000    0.000    0.000    0.000 ctx_mp_python.py:612(_set_prec)
       89    0.000    0.000    0.000    0.000 functions.py:81(defun_wrapped)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:311(SizeMap)
        2    0.000    0.000    0.000    0.000 _importlib.py:1(<module>)
        1    0.000    0.000    0.000    0.000 format.py:1(<module>)
      216    0.000    0.000    0.000    0.000 _adapters.py:43(redent)
      161    0.000    0.000    0.000    0.000 util.py:242(escape_re_range_char)
        1    0.000    0.000    0.000    0.000 _package_unpickler.py:1(<module>)
        4    0.000    0.000    0.000    0.000 _spherical_bessel.py:14(decorator)
        1    0.000    0.000    0.000    0.000 timestamp.py:1(<module>)
        1    0.000    0.000    0.000    0.000 numeric.py:2123(identity)
        1    0.000    0.000    0.000    0.000 _rbf.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:58(Sectioned)
        1    0.000    0.000    0.000    0.000 polyutils.py:188(<listcomp>)
        3    0.000    0.000    0.000    0.000 _common.py:132(_validate_fromutc_inputs)
        1    0.000    0.000    0.000    0.000 transforms.py:821(InverseMellinTransform)
       28    0.000    0.000    0.000    0.000 {built-in method posix._path_normpath}
        1    0.000    0.000    0.000    0.000 _qap.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _matrix.py:1(<module>)
        1    0.000    0.000    0.000    0.000 error_functions.py:49(erf)
        1    0.000    0.000    0.000    0.000 matpow.py:12(MatPow)
        1    0.000    0.000    0.000    0.000 _fourier.py:1(<module>)
        1    0.000    0.000    0.000    0.000 para4band.py:329(<listcomp>)
        1    0.000    0.000    0.000    0.000 _reporting_descriptor_reference.py:15(ReportingDescriptorReference)
       57    0.000    0.000    0.000    0.000 core.py:4169(<genexpr>)
        1    0.000    0.000    0.000    0.000 {built-in method uarray._uarray.set_global_backend}
       17    0.000    0.000    0.000    0.000 <frozen _collections_abc>:78(_check_methods)
        1    0.000    0.000    0.000    0.000 defaults.py:1(<module>)
        9    0.000    0.000    0.000    0.000 overrides.py:23(set_array_function_like_doc)
        7    0.000    0.000    0.000    0.000 core.py:4767(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 timeit.py:1(<module>)
        4    0.000    0.000    0.000    0.000 _pep440.py:437(_cmpkey)
      101    0.000    0.000    0.000    0.000 _meta_registrations.py:32(register_meta)
        3    0.000    0.000    0.000    0.000 __init__.py:503(PYFUNCTYPE)
        1    0.000    0.000    0.000    0.000 sysconfig.py:719(get_platform)
        1    0.000    0.000    0.000    0.000 appellseqs.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sampler.py:64(SequentialSampler)
        1    0.000    0.000    0.000    0.000 __config__.py:9(DisplayModes)
       18    0.000    0.000    0.000    0.000 {method 'tolist' of 'memoryview' objects}
       26    0.000    0.000    0.000    0.000 {method 'fullmatch' of 're.Pattern' objects}
        1    0.000    0.000    0.000    0.000 domain.py:18(Domain)
        1    0.000    0.000    0.000    0.000 getopt.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _rotation_spline.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dogbox.py:1(<module>)
        1    0.000    0.000    0.000    0.000 preview.py:1(<module>)
        1    0.000    0.000    0.000    0.000 unicode.py:75(nums)
        1    0.000    0.000    0.000    0.000 _typing.py:248(_DataPipeMeta)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:6801(lognorm_gen)
        1    0.000    0.000    0.000    0.000 series_class.py:11(SeriesBase)
       55    0.000    0.000    0.000    0.000 __init__.py:382(_make_elementwise_unary_reference)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:8375(pearson3_gen)
        1    0.000    0.000    0.000    0.000 json.py:46(_load_redirect)
        1    0.000    0.000    0.000    0.000 tableform.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dfm.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _ndgriddata.py:1(<module>)
        3    0.000    0.000    0.000    0.000 {built-in method _csv.register_dialect}
        1    0.000    0.000    0.000    0.000 backend_tools.py:524(ToolViewsPositions)
       78    0.000    0.000    0.000    0.000 inspect.py:480(iscode)
       58    0.000    0.000    0.000    0.000 __init__.py:795(__init__)
       81    0.000    0.000    0.000    0.000 __init__.py:14(set_module)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3605(_pmf_formula)
        3    0.000    0.000    0.000    0.000 numeric.py:67(zeros_like)
        1    0.000    0.000    0.000    0.000 Lattice.py:1(<module>)
       23    0.000    0.000    0.000    0.000 functools.py:966(__init__)
       46    0.000    0.000    0.000    0.000 six.py:110(__init__)
       13    0.000    0.000    0.000    0.000 enum.py:1337(_iter_member_by_value_)
        1    0.000    0.000    0.000    0.000 core.py:3494(__init__)
        7    0.000    0.000    0.000    0.000 _aliases.py:447(reshape)
        1    0.000    0.000    0.000    0.000 _polyint.py:116(_set_yi)
        2    0.000    0.000    0.000    0.000 <frozen _collections_abc>:440(__repr__)
       12    0.000    0.000    0.000    0.000 _basic.py:3032(<genexpr>)
        1    0.000    0.000    0.000    0.000 core.py:170(iter_user_libraries)
        1    0.000    0.000    0.000    0.000 tag.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:367(<listcomp>)
        3    0.000    0.000    0.000    0.000 message.py:409(__getitem__)
       81    0.000    0.000    0.000    0.000 __init__.py:25(decorator)
        1    0.000    0.000    0.000    0.000 ctx_iv.py:153(__new__)
        1    0.000    0.000    0.000    0.000 trigonometric.py:553(cos)
       53    0.000    0.000    0.000    0.000 six.py:182(_add_module)
       55    0.000    0.000    0.000    0.000 logic.py:92(fuzzy_bool)
        2    0.000    0.000    0.000    0.000 {built-in method zlib.decompressobj}
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:8574(powerlaw_gen)
        1    0.000    0.000    0.000    0.000 _subplots.py:199(subplot_class_factory)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3028(_sample_dispatch)
       24    0.000    0.000    0.000    0.000 datapipe.py:133(register_datapipe_as_function)
       36    0.000    0.000    0.000    0.000 _string_helpers.py:16(english_lower)
        1    0.000    0.000    0.000    0.000 function.py:281(Application)
        2    0.000    0.000    0.000    0.000 _new_distributions.py:70(_icdf_formula)
        1    0.000    0.000    0.000    0.000 _dtype_like.py:71(_DTypeDict)
        1    0.000    0.000    0.000    0.000 GimpPaletteFile.py:1(<module>)
        3    0.000    0.000    0.000    0.000 coroutines.py:21(iscoroutinefunction)
        1    0.000    0.000    0.000    0.000 {method 'sum' of 'numpy.ndarray' objects}
        8    0.000    0.000    0.000    0.000 sympify.py:78(_is_numpy_instance)
        1    0.000    0.000    0.000    0.000 canonical_constraint.py:1(<module>)
        1    0.000    0.000    0.000    0.000 {built-in method torch._C._distributed_c10d.set_debug_level_from_env}
        1    0.000    0.000    0.000    0.000 elliptic.py:1(<module>)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:128(Blend)
        1    0.000    0.000    0.000    0.000 error_functions.py:2383(fresnels)
        1    0.000    0.000    0.000    0.000 dev.py:1(<module>)
        7    0.000    0.000    0.000    0.000 rcsetup.py:292(validate_backend)
        1    0.000    0.000    0.000    0.000 libintmath.py:89(<listcomp>)
       35    0.000    0.000    0.000    0.000 para4band.py:131(mask)
        2    0.000    0.000    0.000    0.000 tools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 glob.py:191(_lexists)
       42    0.000    0.000    0.000    0.000 typing.py:266(_check_generic)
       13    0.000    0.000    0.000    0.000 enum.py:901(<dictcomp>)
        5    0.000    0.000    0.000    0.000 perm_groups.py:149(__init__)
        1    0.000    0.000    0.000    0.000 {method 'dot' of 'numpy.ndarray' objects}
        2    0.000    0.000    0.000    0.000 blas.py:388(_memoize_get_funcs)
        1    0.000    0.000    0.000    0.000 _elffile.py:28(EIData)
        1    0.000    0.000    0.000    0.000 _censored_data.py:1(<module>)
        1    0.000    0.000    0.000    0.000 expintegrals.py:1(<module>)
      122    0.000    0.000    0.000    0.000 core.py:2459(__getnewargs__)
       82    0.000    0.000    0.000    0.000 typing.py:2823(<genexpr>)
       14    0.000    0.000    0.000    0.000 __init__.py:253(escape)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9339(irwinhall_gen)
        4    0.000    0.000    0.000    0.000 isoparser.py:22(_takes_ascii)
        4    0.000    0.000    0.000    0.000 fontconfig_pattern.py:158(_property)
       30    0.000    0.000    0.000    0.000 warnings.py:440(__init__)
        1    0.000    0.000    0.000    0.000 frontend.py:682(ExprBuilder)
        1    0.000    0.000    0.000    0.000 _globals.py:24(__init__)
        2    0.000    0.000    0.000    0.000 datetime.py:765(__neg__)
       90    0.000    0.000    0.000    0.000 {method 'insert' of 'list' objects}
       30    0.000    0.000    0.000    0.000 binary.py:162(_torch_inplace_binary)
        6    0.000    0.000    0.000    0.000 _jit_internal.py:895(get_class_name_lineno)
        8    0.000    0.000    0.000    0.000 _nonlin.py:119(_set_doc)
        9    0.000    0.000    0.000    0.000 fontconfig_pattern.py:150(_families)
        1    0.000    0.000    0.000    0.000 lobpcg.py:1(<module>)
        1    0.000    0.000    0.000    0.000 exponential.py:607(log)
        1    0.000    0.000    0.000    0.000 _basic_backend.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pde.py:1(<module>)
        4    0.000    0.000    0.000    0.000 __init__.py:511(cast)
        1    0.000    0.000    0.000    0.000 pickle.py:1137(_Unpickler)
       35    0.000    0.000    0.000    0.000 core.py:13(dispatch)
        3    0.000    0.000    0.000    0.000 arrayprint.py:64(_make_options_dict)
        4    0.000    0.000    0.000    0.000 random.py:797(getrandbits)
        1    0.000    0.000    0.000    0.000 str.py:20(StrPrinter)
       15    0.000    0.000    0.000    0.000 proxy.py:524(_define_reflectable)
        1    0.000    0.000    0.000    0.000 multivariate_normal.py:80(MultivariateNormal)
        1    0.000    0.000    0.000    0.000 simpledomain.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _infra.py:270(__post_init__)
        1    0.000    0.000    0.000    0.000 __init__.py:1076(__init__)
        6    0.000    0.000    0.000    0.000 numbers.py:3598(__hash__)
        3    0.000    0.000    0.000    0.000 symbolic_opset9.py:804(_reduce_with_dtype)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:4238(<dictcomp>)
        1    0.000    0.000    0.000    0.000 py39.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _new_distributions.py:394(_pmf_formula)
        6    0.000    0.000    0.000    0.000 stride_tricks.py:472(<listcomp>)
        1    0.000    0.000    0.000    0.000 geo.py:14(GeoAxes)
       12    0.000    0.000    0.000    0.000 rcsetup.py:200(validate_axisbelow)
        1    0.000    0.000    0.000    0.000 realtransforms.py:1(<module>)
       96    0.000    0.000    0.000    0.000 {built-in method math.isclose}
        3    0.000    0.000    0.000    0.000 _stats.py:14(count)
        1    0.000    0.000    0.000    0.000 __init__.py:850(TarInfo)
        1    0.000    0.000    0.000    0.000 tensor.py:3394(TensMul)
        5    0.000    0.000    0.000    0.000 functools.py:191(<setcomp>)
       28    0.000    0.000    0.000    0.000 power.py:803(as_base_exp)
        1    0.000    0.000    0.000    0.000 arrayterator.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3968(genhyperbolic_gen)
        1    0.000    0.000    0.000    0.000 pin_memory.py:1(<module>)
        3    0.000    0.000    0.000    0.000 feedparser.py:197(_new_message)
       18    0.000    0.000    0.000    0.000 conflict.py:30(<genexpr>)
       82    0.000    0.000    0.000    0.000 core.py:1962(streamline)
        2    0.000    0.000    0.000    0.000 traceback.py:439(from_list)
        1    0.000    0.000    0.000    0.000 matrix_element.py:1(<module>)
      187    0.000    0.000    0.000    0.000 boolalg.py:365(__bool__)
        4    0.000    0.000    0.000    0.000 symbolic_opset9.py:787(overload_by_arg_count)
        1    0.000    0.000    0.000    0.000 _artifact.py:17(Artifact)
        3    0.000    0.000    0.000    0.000 typing.py:856(_evaluate)
        3    0.000    0.000    0.000    0.000 fromnumeric.py:2836(min)
        1    0.000    0.000    0.000    0.000 _async.py:1(<module>)
        1    0.000    0.000    0.000    0.000 threading.py:849(__init__)
        2    0.000    0.000    0.000    0.000 _mio5_params.py:184(_convert_codecs)
        1    0.000    0.000    0.000    0.000 ImageSequence.py:1(<module>)
        1    0.000    0.000    0.000    0.000 cmd.py:34(Command)
        1    0.000    0.000    0.000    0.000 mathml.py:547(MathMLPresentationPrinter)
        1    0.000    0.000    0.000    0.000 trsock.py:1(<module>)
       97    0.000    0.000    0.000    0.000 docstring.py:63(copy)
       97    0.000    0.000    0.000    0.000 docstring.py:65(do_copy)
        1    0.000    0.000    0.000    0.000 Image.py:185(Palette)
        1    0.000    0.000    0.000    0.000 trigonometric.py:2797(acot)
      257    0.000    0.000    0.000    0.000 hmac.py:19(<genexpr>)
        1    0.000    0.000    0.000    0.000 bessel.py:1374(airyai)
      174    0.000    0.000    0.000    0.000 _docscrape.py:724(_is_show_member)
        1    0.000    0.000    0.000    0.000 interval_membership.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _region.py:16(Region)
        1    0.000    0.000    0.000    0.000 numbers.py:609(bell)
       12    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3600(_overrides)
        2    0.000    0.000    0.000    0.000 numbers.py:408(__float__)
        1    0.000    0.000    0.000    0.000 _complex.py:13(Complex)
       40    0.000    0.000    0.000    0.000 libmpf.py:208(_normalize1)
        2    0.000    0.000    0.000    0.000 util.py:171(register_after_fork)
        1    0.000    0.000    0.000    0.000 discovery.py:210(FlatLayoutPackageFinder)
        1    0.000    0.000    0.000    0.000 decorators.py:1(<module>)
        4    0.000    0.000    0.000    0.000 platform.py:1003(_sys_version)
        1    0.000    0.000    0.000    0.000 densetools.py:1(<module>)
       56    0.000    0.000    0.000    0.000 patches.py:1901(_register_style)
        2    0.000    0.000    0.000    0.000 __init__.py:394(pass_none)
        1    0.000    0.000    0.000    0.000 _qmc.py:1117(Halton)
        1    0.000    0.000    0.000    0.000 trigonometric.py:915(tan)
       90    0.000    0.000    0.000    0.000 basic.py:442(class_key)
        1    0.000    0.000    0.000    0.000 <frozen posixpath>:174(lexists)
        1    0.000    0.000    0.000    0.000 function.py:382(Function)
        1    0.000    0.000    0.000    0.000 bessel.py:1546(airybi)
        1    0.000    0.000    0.000    0.000 _disjoint_set.py:1(<module>)
        3    0.000    0.000    0.000    0.000 datetime.py:1673(__new__)
        1    0.000    0.000    0.000    0.000 lib_interval.py:1(<module>)
       41    0.000    0.000    0.000    0.000 typing.py:2885(_namedtuple_mro_entries)
        1    0.000    0.000    0.000    0.000 unicode.py:236(Japanese)
        2    0.000    0.000    0.000    0.000 _new_distributions.py:165(_icdf_formula)
       82    0.000    0.000    0.000    0.000 symbolic_helper.py:313(quantized_args)
        1    0.000    0.000    0.000    0.000 parametrizations.py:288(_SpectralNorm)
        1    0.000    0.000    0.000    0.000 polyclasses.py:1236(DMP_Python)
        1    0.000    0.000    0.000    0.000 <frozen os>:48(<listcomp>)
        1    0.000    0.000    0.000    0.000 tarfile.py:715(TarInfo)
       38    0.000    0.000    0.000    0.000 __init__.py:23(<genexpr>)
       24    0.000    0.000    0.000    0.000 numerictypes.py:514(_scalar_type_key)
        1    0.000    0.000    0.000    0.000 _mathtext_data.py:628(<dictcomp>)
       55    0.000    0.000    0.000    0.000 <frozen codecs>:260(__init__)
        1    0.000    0.000    0.000    0.000 resource_sharer.py:63(__init__)
        4    0.000    0.000    0.000    0.000 _ops.py:130(inner)
        3    0.000    0.000    0.000    0.000 expr.py:220(__neg__)
        1    0.000    0.000    0.000    0.000 __init__.py:22(<listcomp>)
        1    0.000    0.000    0.000    0.000 codeprinter.py:53(CodePrinter)
        8    0.000    0.000    0.000    0.000 ctx_iv.py:30(convert_mpf_)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:153(sinh)
       85    0.000    0.000    0.000    0.000 __init__.py:185(keys)
        1    0.000    0.000    0.000    0.000 __init__.py:727(DistributionFinder)
        4    0.000    0.000    0.000    0.000 enum.py:1727(<listcomp>)
        1    0.000    0.000    0.000    0.000 signal_handling.py:1(<module>)
        1    0.000    0.000    0.000    0.000 PaletteFile.py:1(<module>)
        1    0.000    0.000    0.000    0.000 continuous_bernoulli.py:12(ContinuousBernoulli)
        6    0.000    0.000    0.000    0.000 numeric.py:274(full)
        1    0.000    0.000    0.000    0.000 numerictypes.py:441(_construct_lookups)
        1    0.000    0.000    0.000    0.000 _milp.py:1(<module>)
        1    0.000    0.000    0.000    0.000 error_functions.py:288(erfc)
        1    0.000    0.000    0.000    0.000 trigonometric.py:1255(cot)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:89(<listcomp>)
        1    0.000    0.000    0.000    0.000 deltafunctions.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _coo.py:26(_coo_base)
        4    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:780(exec_module)
       12    0.000    0.000    0.000    0.000 functools.py:355(__init__)
        4    0.000    0.000    0.000    0.000 uuid.py:139(__init__)
        1    0.000    0.000    0.000    0.000 epathtools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9661(skewnorm_gen)
        1    0.000    0.000    0.000    0.000 egyptian_fraction.py:1(<module>)
        1    0.000    0.000    0.000    0.000 mock.py:402(NonCallableMock)
      130    0.000    0.000    0.000    0.000 __init__.py:247(<genexpr>)
        2    0.000    0.000    0.000    0.000 conflict.py:39(<listcomp>)
      257    0.000    0.000    0.000    0.000 hmac.py:20(<genexpr>)
      169    0.000    0.000    0.000    0.000 contextlib.py:428(__enter__)
        1    0.000    0.000    0.000    0.000 engine.py:177(DiagnosticContext)
        1    0.000    0.000    0.000    0.000 function.py:1045(Derivative)
        1    0.000    0.000    0.000    0.000 differentiation.py:1(<module>)
        2    0.000    0.000    0.000    0.000 __init__.py:912(createLock)
        1    0.000    0.000    0.000    0.000 core.py:1103(enable_packrat)
        1    0.000    0.000    0.000    0.000 _add_newdocs_scalars.py:18(numeric_type_aliases)
        3    0.000    0.000    0.000    0.000 monkey.py:26(_get_mro)
       10    0.000    0.000    0.000    0.000 _torch_docs.py:22(<listcomp>)
       18    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2149(_overrides)
        3    0.000    0.000    0.000    0.000 libmpf.py:59(prec_to_dps)
        1    0.000    0.000    0.000    0.000 _at.py:52(Undef)
       18    0.000    0.000    0.000    0.000 pickletools.py:961(__init__)
        2    0.000    0.000    0.000    0.000 orthogonal.py:1(<module>)
        1    0.000    0.000    0.000    0.000 trigonometric.py:243(sin)
        1    0.000    0.000    0.000    0.000 _await.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:4055(And)
        1    0.000    0.000    0.000    0.000 odes.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dates.py:1475(YearLocator)
       45    0.000    0.000    0.000    0.000 fromnumeric.py:3176(ndim)
       21    0.000    0.000    0.000    0.000 _codata.py:2127(value)
       39    0.000    0.000    0.000    0.000 functools.py:421(_unwrap_partial)
        1    0.000    0.000    0.000    0.000 bernoulli.py:12(Bernoulli)
        1    0.000    0.000    0.000    0.000 scalarbool.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dates.py:1230(AutoDateLocator)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1689(<lambda>)
        2    0.000    0.000    0.000    0.000 tree.py:1(<module>)
       62    0.000    0.000    0.000    0.000 _bunch.py:128(<genexpr>)
        1    0.000    0.000    0.000    0.000 __init__.py:144(<listcomp>)
        1    0.000    0.000    0.000    0.000 geometric.py:11(Geometric)
       16    0.000    0.000    0.000    0.000 pretty_symbology.py:169(<lambda>)
       16    0.000    0.000    0.000    0.000 doccer.py:126(_doc)
        1    0.000    0.000    0.000    0.000 _array_api_compat_vendor.py:1(<module>)
        1    0.000    0.000    0.000    0.000 parallel_apply.py:1(<module>)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:1384(acosh)
        1    0.000    0.000    0.000    0.000 _trustregion_ncg.py:1(<module>)
        1    0.000    0.000    0.000    0.000 permutations.py:473(Permutation)
        1    0.000    0.000    0.000    0.000 optimizer.py:262(profile_hook_step)
        1    0.000    0.000    0.000    0.000 triangulation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 boolalg.py:972(Xor)
        2    0.000    0.000    0.000    0.000 multidimensional.py:93(__call__)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:365(cosh)
        1    0.000    0.000    0.000    0.000 image.py:215(_ImageBase)
        1    0.000    0.000    0.000    0.000 __init__.py:39(_get_running_interactive_framework)
        1    0.000    0.000    0.000    0.000 approximants.py:1(<module>)
        1    0.000    0.000    0.000    0.000 axis3d.py:35(Axis)
        1    0.000    0.000    0.000    0.000 pycode.py:753(MpmathPrinter)
        1    0.000    0.000    0.000    0.000 pprint.py:106(PrettyPrinter)
        1    0.000    0.000    0.000    0.000 sorting.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fromnumeric.py:95(take)
        1    0.000    0.000    0.000    0.000 _address.py:12(Address)
       21    0.000    0.000    0.000    0.000 symbolic_opset9.py:301(wrapper)
        1    0.000    0.000    0.000    0.000 _pytesttester.py:1(<module>)
        6    0.000    0.000    0.000    0.000 rcsetup.py:617(validate_joinstyle)
        1    0.000    0.000    0.000    0.000 _norm.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:55(_pdf_formula)
        1    0.000    0.000    0.000    0.000 pathlib.py:112(_WindowsFlavour)
        3    0.000    0.000    0.000    0.000 {built-in method posix.putenv}
        1    0.000    0.000    0.000    0.000 polyhedron.py:1017(<listcomp>)
        1    0.000    0.000    0.000    0.000 trigonometric.py:2110(asin)
        1    0.000    0.000    0.000    0.000 __init__.py:118(<listcomp>)
        1    0.000    0.000    0.000    0.000 ratsimp.py:1(<module>)
        1    0.000    0.000    0.000    0.000 trigonometric.py:1800(csc)
       26    0.000    0.000    0.000    0.000 core.py:4417(<genexpr>)
       28    0.000    0.000    0.000    0.000 inspect.py:2211(parse_name)
        1    0.000    0.000    0.000    0.000 pyplot.py:1891(colormaps)
        4    0.000    0.000    0.000    0.000 platform.py:826(uname)
        1    0.000    0.000    0.000    0.000 trigonometric.py:2343(acos)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4259(gumbel_r_gen)
        1    0.000    0.000    0.000    0.000 property.py:1(<module>)
        3    0.000    0.000    0.000    0.000 __init__.py:435(validate)
        2    0.000    0.000    0.000    0.000 densebasic.py:333(_rec_strip)
        1    0.000    0.000    0.000    0.000 core.py:720(add_condition)
       30    0.000    0.000    0.000    0.000 {method 'startswith' of 'bytes' objects}
       28    0.000    0.000    0.000    0.000 numerictypes.py:283(issubclass_)
        1    0.000    0.000    0.000    0.000 random.py:358(randint)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3040(_sample_inverse_transform)
        1    0.000    0.000    0.000    0.000 series.py:126(BaseSeries)
        3    0.000    0.000    0.000    0.000 result.py:12(failfast)
        1    0.000    0.000    0.000    0.000 powerset.py:10(PowerSet)
        1    0.000    0.000    0.000    0.000 bvls.py:1(<module>)
        3    0.000    0.000    0.000    0.000 __init__.py:863(_addHandlerRef)
        1    0.000    0.000    0.000    0.000 Orbit.py:1(<module>)
       11    0.000    0.000    0.000    0.000 init.py:531(_make_deprecate)
        1    0.000    0.000    0.000    0.000 piecewise.py:65(Piecewise)
        1    0.000    0.000    0.000    0.000 sym_operation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 inputs.py:1212(Kpoints)
        1    0.000    0.000    0.000    0.000 __init__.py:1635(TarFile)
        1    0.000    0.000    0.000    0.000 _storage_docs.py:1(<module>)
        1    0.000    0.000    0.000    0.000 tz.py:1470(__get_gettz)
       14    0.000    0.000    0.000    0.000 numeric.py:1380(<listcomp>)
        1    0.000    0.000    0.000    0.000 _constrained_layout.py:1(<module>)
       13    0.000    0.000    0.000    0.000 _dtype_ctypes.py:71(_from_ctypes_scalar)
        1    0.000    0.000    0.000    0.000 generate.py:45(__init__)
       21    0.000    0.000    0.000    0.000 fancy_getopt.py:443(translate_longopt)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:1884(asech)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:611(tanh)
        1    0.000    0.000    0.000    0.000 error_functions.py:482(erfi)
        1    0.000    0.000    0.000    0.000 computed_entries.py:696(GibbsComputedStructureEntry)
        1    0.000    0.000    0.000    0.000 text.py:1521(Annotation)
       10    0.000    0.000    0.000    0.000 pretty_symbology.py:175(<lambda>)
        1    0.000    0.000    0.000    0.000 rationalfield.py:14(RationalField)
        4    0.000    0.000    0.000    0.000 shape_base.py:23(atleast_1d)
      115    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}
        1    0.000    0.000    0.000    0.000 limitseq.py:1(<module>)
        2    0.000    0.000    0.000    0.000 core.py:3529(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 subprocess.py:693(_use_posix_spawn)
        1    0.000    0.000    0.000    0.000 formatting.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _onenormest.py:1(<module>)
        1    0.000    0.000    0.000    0.000 trigonometric.py:3246(acsc)
        1    0.000    0.000    0.000    0.000 linalg.py:55(SVDResult)
        1    0.000    0.000    0.000    0.000 _stack.py:16(Stack)
        1    0.000    0.000    0.000    0.000 linalg.py:39(EigResult)
        2    0.000    0.000    0.000    0.000 types.py:247(coroutine)
        9    0.000    0.000    0.000    0.000 _ops.py:545(__init__)
        1    0.000    0.000    0.000    0.000 dos.py:644(CompleteDos)
        1    0.000    0.000    0.000    0.000 tensor.py:2845(Tensor)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:1206(asinh)
       36    0.000    0.000    0.000    0.000 __init__.py:884(_make_elementwise_binary_reference)
        1    0.000    0.000    0.000    0.000 uniform.py:11(Uniform)
        1    0.000    0.000    0.000    0.000 core.py:336(AffineScalarFunc)
        1    0.000    0.000    0.000    0.000 _savitzky_golay.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _qmc.py:1286(LatinHypercube)
        6    0.000    0.000    0.000    0.000 _weakrefset.py:37(__init__)
        1    0.000    0.000    0.000    0.000 printing.py:1(<module>)
        1    0.000    0.000    0.000    0.000 anchor.py:1(<module>)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:490(_SpecialGenericAlias)
        9    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3622(_overrides)
        1    0.000    0.000    0.000    0.000 Image.py:3874(_apply_env_variables)
       20    0.000    0.000    0.000    0.000 __init__.py:2254(_check_in_list)
       30    0.000    0.000    0.000    0.000 _type_aliases.py:203(_add_array_type)
       78    0.000    0.000    0.000    0.000 {method 'partition' of 'str' objects}
        1    0.000    0.000    0.000    0.000 matrixbase.py:3796(_handle_creation_inputs)
        1    0.000    0.000    0.000    0.000 _lti_conversion.py:1(<module>)
        6    0.000    0.000    0.000    0.000 operations.py:135(_new_rawargs)
        1    0.000    0.000    0.000    0.000 trigonometric.py:1692(sec)
        1    0.000    0.000    0.000    0.000 reader.py:59(Reader)
        1    0.000    0.000    0.000    0.000 eigen_symmetric.py:1(<module>)
       32    0.000    0.000    0.000    0.000 _type_aliases.py:46(<genexpr>)
        3    0.000    0.000    0.000    0.000 inspect.py:409(iscoroutinefunction)
        1    0.000    0.000    0.000    0.000 error_functions.py:2544(fresnelc)
        4    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1159(_cdf2_input_validation)
        1    0.000    0.000    0.000    0.000 sdm.py:910(convert_to)
        6    0.000    0.000    0.000    0.000 <frozen genericpath>:121(_splitext)
       15    0.000    0.000    0.000    0.000 pretty_symbology.py:417(<lambda>)
        1    0.000    0.000    0.000    0.000 ctx_base.py:24(StandardBaseContext)
        1    0.000    0.000    0.000    0.000 patches.py:1001(Polygon)
        1    0.000    0.000    0.000    0.000 sqfreetools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pathlib.py:455(PurePath)
        1    0.000    0.000    0.000    0.000 pathlib.py:934(_scandir)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:1141(sech)
       58    0.000    0.000    0.000    0.000 results.py:269(__bool__)
       12    0.000    0.000    0.000    0.000 typing.py:2356(<genexpr>)
        3    0.000    0.000    0.000    0.000 symbolic_opset9.py:2108(decorator)
        3    0.000    0.000    0.000    0.000 six.py:96(__get__)
        2    0.000    0.000    0.000    0.000 core.py:3767(__init__)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:1572(atanh)
        1    0.000    0.000    0.000    0.000 _iotools.py:450(StringConverter)
       20    0.000    0.000    0.000    0.000 mixins.py:16(_binary_method)
      208    0.000    0.000    0.000    0.000 multiarray.py:503(can_cast)
       28    0.000    0.000    0.000    0.000 typing_extensions.py:486(_is_dunder)
        1    0.000    0.000    0.000    0.000 ast.py:82(_convert)
      144    0.000    0.000    0.000    0.000 periodic_table.py:1519(oxi_state)
        1    0.000    0.000    0.000    0.000 patches.py:1095(Wedge)
        1    0.000    0.000    0.000    0.000 common.py:449(PMGDir)
        1    0.000    0.000    0.000    0.000 plot_implicit.py:1(<module>)
       24    0.000    0.000    0.000    0.000 calculus.py:4(defun)
       23    0.000    0.000    0.000    0.000 <frozen os>:817(fsdecode)
        1    0.000    0.000    0.000    0.000 singularities.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3545(gamma_gen)
        3    0.000    0.000    0.000    0.000 _array_api.py:485(xp_ravel)
        1    0.000    0.000    0.000    0.000 patches.py:1347(CirclePolygon)
       22    0.000    0.000    0.000    0.000 typing.py:913(_is_typevar_like)
        1    0.000    0.000    0.000    0.000 _waveforms.py:1(<module>)
       16    0.000    0.000    0.000    0.000 structure.py:230(__iter__)
        1    0.000    0.000    0.000    0.000 boolalg.py:1286(Equivalent)
        1    0.000    0.000    0.000    0.000 quaternion.py:58(Quaternion)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9162(reciprocal_gen)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:355(_Gamma)
        2    0.000    0.000    0.000    0.000 densebasic.py:255(dup_strip)
       16    0.000    0.000    0.000    0.000 inspect.py:2124(<listcomp>)
        1    0.000    0.000    0.000    0.000 transforms.py:995(CatTransform)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:6694(loglaplace_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2697(weibull_min_gen)
       22    0.000    0.000    0.000    0.000 <string>:1(<lambda>)
       56    0.000    0.000    0.000    0.000 {method 'newbyteorder' of 'numpy.dtype' objects}
        1    0.000    0.000    0.000    0.000 _polyint.py:136(_set_dtype)
        1    0.000    0.000    0.000    0.000 relaxed_bernoulli.py:11(LogitRelaxedBernoulli)
        1    0.000    0.000    0.000    0.000 scanner.py:71(Scanner)
        1    0.000    0.000    0.000    0.000 dist.py:244(Distribution)
        1    0.000    0.000    0.000    0.000 primetest.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:6455(logistic_gen)
       18    0.000    0.000    0.000    0.000 transforms.py:52(_make_str_method)
       15    0.000    0.000    0.000    0.000 decorator.py:132(doctest_depends_on)
        1    0.000    0.000    0.000    0.000 bessel.py:1028(yn)
        1    0.000    0.000    0.000    0.000 _serialization.py:1(<module>)
        1    0.000    0.000    0.000    0.000 timeutils.py:37(__do_timings)
        1    0.000    0.000    0.000    0.000 {method 'take' of 'numpy.ndarray' objects}
        2    0.000    0.000    0.000    0.000 __init__.py:16(_deprecation_notice)
        1    0.000    0.000    0.000    0.000 __init__.py:775(FastPath)
        1    0.000    0.000    0.000    0.000 trigonometric.py:3015(asec)
       26    0.000    0.000    0.000    0.000 _jit_internal.py:860(is_pass)
        1    0.000    0.000    0.000    0.000 Files_in.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dbapi2.py:54(register_adapters_and_converters)
        1    0.000    0.000    0.000    0.000 _polyint.py:533(BarycentricInterpolator)
        1    0.000    0.000    0.000    0.000 densearith.py:1(<module>)
        1    0.000    0.000    0.000    0.000 main.py:56(YAML)
        1    0.000    0.000    0.000    0.000 multidimensional.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _notification.py:18(Notification)
        1    0.000    0.000    0.000    0.000 dirichlet.py:16(_Dirichlet)
        1    0.000    0.000    0.000    0.000 inputs.py:82(Poscar)
        1    0.000    0.000    0.000    0.000 pytree_hacks.py:1(<module>)
        1    0.000    0.000    0.000    0.000 normalforms.py:1(<module>)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:513(__str__)
        1    0.000    0.000    0.000    0.000 _dcsrch.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _interpolate.py:434(fill_value)
        2    0.000    0.000    0.000    0.000 polyclasses.py:155(new)
       89    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.RLock' objects}
        1    0.000    0.000    0.000    0.000 hyperbolic.py:824(coth)
        1    0.000    0.000    0.000    0.000 threads.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _mangling.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pyplot.py:111(install_repl_displayhook)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:1737(acoth)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1381(<listcomp>)
        2    0.000    0.000    0.000    0.000 core.py:2952(_update_from)
       22    0.000    0.000    0.000    0.000 __init__.py:1273(append)
       23    0.000    0.000    0.000    0.000 __init__.py:1267(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:119(Cycler)
        1    0.000    0.000    0.000    0.000 format_helpers.py:1(<module>)
        1    0.000    0.000    0.000    0.000 calendar.py:52(_localized_month)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:2080(acsch)
        1    0.000    0.000    0.000    0.000 continued_fraction.py:1(<module>)
        1    0.000    0.000    0.000    0.000 rules.py:1(<module>)
        1    0.000    0.000    0.000    0.000 boolalg.py:68(Boolean)
        1    0.000    0.000    0.000    0.000 function.py:818(DefinedFunction)
       75    0.000    0.000    0.000    0.000 {built-in method _warnings._filters_mutated}
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:124(<listcomp>)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1713(_identify_parameterization)
        1    0.000    0.000    0.000    0.000 itt.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ctx_mp_python.py:434(mpc_convert_lhs)
        1    0.000    0.000    0.000    0.000 events.py:203(AbstractEventLoop)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:1070(csch)
        1    0.000    0.000    0.000    0.000 _dok.py:17(_dok_base)
       25    0.000    0.000    0.000    0.000 enum.py:787(__members__)
       16    0.000    0.000    0.000    0.000 arraypad.py:58(_view_roi)
        4    0.000    0.000    0.000    0.000 {built-in method posix.uname}
        1    0.000    0.000    0.000    0.000 Manager.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _multivariate.py:5334(random_table_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3758(erlang_gen)
       32    0.000    0.000    0.000    0.000 arraypad.py:109(<genexpr>)
        1    0.000    0.000    0.000    0.000 core.py:103(__diag__)
        1    0.000    0.000    0.000    0.000 symbol.py:524(Wild)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:125(StandardNormal)
      115    0.000    0.000    0.000    0.000 dataclasses.py:843(_hash_set_none)
        1    0.000    0.000    0.000    0.000 tarfile.py:1445(TarFile)
       10    0.000    0.000    0.000    0.000 _torch_docs.py:23(<listcomp>)
       39    0.000    0.000    0.000    0.000 _jit_internal.py:530(export)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:10433(truncpareto_gen)
        9    0.000    0.000    0.000    0.000 <frozen _collections_abc>:516(__subclasshook__)
        1    0.000    0.000    0.000    0.000 _version_control_details.py:15(VersionControlDetails)
        1    0.000    0.000    0.000    0.000 _state.py:18(__init__)
       26    0.000    0.000    0.000    0.000 inspect.py:1172(__init__)
        1    0.000    0.000    0.000    0.000 patches.py:1510(Circle)
       12    0.000    0.000    0.000    0.000 arrayprint.py:739(_extendLine)
        2    0.000    0.000    0.000    0.000 cache.py:123(_getenv)
       28    0.000    0.000    0.000    0.000 operations.py:101(<listcomp>)
       44    0.000    0.000    0.000    0.000 core.py:699(<genexpr>)
        1    0.000    0.000    0.000    0.000 _type_aliases.py:74(_add_types)
        1    0.000    0.000    0.000    0.000 matmul.py:24(MatMul)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:150(_pdf_formula)
        2    0.000    0.000    0.000    0.000 ordinals.py:81(__new__)
        1    0.000    0.000    0.000    0.000 inputs.py:2869(Potcar)
       15    0.000    0.000    0.000    0.000 _util.py:356(<listcomp>)
        2    0.000    0.000    0.000    0.000 datetime.py:923(__new__)
        1    0.000    0.000    0.000    0.000 hamiltonian.py:1(<module>)
        1    0.000    0.000    0.000    0.000 coreerrors.py:14(LazyExceptionMessage)
        1    0.000    0.000    0.000    0.000 numbers.py:189(fibonacci)
       15    0.000    0.000    0.000    0.000 _helpers.py:660(_check_device)
       57    0.000    0.000    0.000    0.000 __init__.py:2291(<genexpr>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4094(<lambda>)
       22    0.000    0.000    0.000    0.000 util.py:197(__init__)
        1    0.000    0.000    0.000    0.000 mock.py:1256(_patch)
        1    0.000    0.000    0.000    0.000 _parser.py:1373(_result)
        5    0.000    0.000    0.000    0.000 ctx_base.py:458(memoize)
        1    0.000    0.000    0.000    0.000 nvtx.py:1(<module>)
       18    0.000    0.000    0.000    0.000 traceback.py:310(_original_line)
        1    0.000    0.000    0.000    0.000 __init__.py:129(Command)
        1    0.000    0.000    0.000    0.000 fake_tensor.py:744(FakeTensorConfig)
        4    0.000    0.000    0.000    0.000 <frozen os>:1080(__subclasshook__)
        3    0.000    0.000    0.000    0.000 core.py:708(add_parse_action)
        1    0.000    0.000    0.000    0.000 ssl.py:484(SSLContext)
        2    0.000    0.000    0.000    0.000 _compression.py:59(close)
        1    0.000    0.000    0.000    0.000 transforms.py:685(Bbox)
       41    0.000    0.000    0.000    0.000 representer.py:131(add_representer)
       61    0.000    0.000    0.000    0.000 stride_tricks.py:542(<genexpr>)
        3    0.000    0.000    0.000    0.000 _codata.py:478(exact2006)
        3    0.000    0.000    0.000    0.000 __init__.py:290(__getattr__)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:276(__init__)
       16    0.000    0.000    0.000    0.000 inspect.py:2230(RewriteSymbolics)
       18    0.000    0.000    0.000    0.000 _add_newdocs_scalars.py:19(type_aliases_gen)
        1    0.000    0.000    0.000    0.000 patches.py:973(PathPatch)
        1    0.000    0.000    0.000    0.000 engine.py:28(Diagnostic)
       10    0.000    0.000    0.000    0.000 quadrature.py:21(__init__)
        1    0.000    0.000    0.000    0.000 request.py:317(Request)
        2    0.000    0.000    0.000    0.000 weakref.py:164(__setitem__)
        1    0.000    0.000    0.000    0.000 _result_provenance.py:15(ResultProvenance)
        1    0.000    0.000    0.000    0.000 textpath.py:18(TextToPath)
        1    0.000    0.000    0.000    0.000 para4band.py:327(<listcomp>)
        4    0.000    0.000    0.000    0.000 gaussiandomains.py:56(__neg__)
        1    0.000    0.000    0.000    0.000 _type_aliases.py:123(_add_integer_aliases)
       12    0.000    0.000    0.000    0.000 domain.py:470(of_type)
       87    0.000    0.000    0.000    0.000 kl.py:822(<lambda>)
        1    0.000    0.000    0.000    0.000 __init__.py:277(DeprecatedList)
        1    0.000    0.000    0.000    0.000 datetime.py:1665(datetime)
        1    0.000    0.000    0.000    0.000 Physics_System.py:1(<module>)
        1    0.000    0.000    0.000    0.000 gosper.py:1(<module>)
        1    0.000    0.000    0.000    0.000 threading.py:583(set)
        1    0.000    0.000    0.000    0.000 groebnertools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _graph_traversal.py:16(GraphTraversal)
        1    0.000    0.000    0.000    0.000 table.py:232(Table)
        1    0.000    0.000    0.000    0.000 lsqr.py:1(<module>)
        1    0.000    0.000    0.000    0.000 minres.py:1(<module>)
        4    0.000    0.000    0.000    0.000 {built-in method _imp.exec_builtin}
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4565(halflogistic_gen)
        2    0.000    0.000    0.000    0.000 sparsetools.py:1(<module>)
       79    0.000    0.000    0.000    0.000 reduction.py:43(register)
       15    0.000    0.000    0.000    0.000 __init__.py:593(<genexpr>)
        1    0.000    0.000    0.000    0.000 _realtransforms_backend.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _compressed.py:25(_cs_matrix)
        1    0.000    0.000    0.000    0.000 Files_out.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sites.py:28(Site)
        1    0.000    0.000    0.000    0.000 pydoc.py:565(HTMLDoc)
       50    0.000    0.000    0.000    0.000 typing.py:2018(<genexpr>)
        1    0.000    0.000    0.000    0.000 rnn.py:518(GRU)
        3    0.000    0.000    0.000    0.000 legend_handler.py:341(__init__)
        7    0.000    0.000    0.000    0.000 _nonlin.py:1596(<listcomp>)
        1    0.000    0.000    0.000    0.000 outputs.py:1962(Outcar)
        1    0.000    0.000    0.000    0.000 singularityfunctions.py:1(<module>)
        3    0.000    0.000    0.000    0.000 intfunc.py:162(igcd)
        1    0.000    0.000    0.000    0.000 mathtext.py:3302(MathTextParser)
       24    0.000    0.000    0.000    0.000 ctx_iv.py:397(make_mpf)
      134    0.000    0.000    0.000    0.000 six.py:93(__init__)
        1    0.000    0.000    0.000    0.000 _gcrotmk.py:1(<module>)
      129    0.000    0.000    0.000    0.000 fromnumeric.py:1021(_argsort_dispatcher)
       66    0.000    0.000    0.000    0.000 {method 'release' of '_thread.RLock' objects}
        2    0.000    0.000    0.000    0.000 libmpi.py:454(mpi_from_str)
       18    0.000    0.000    0.000    0.000 {method 'cast' of 'memoryview' objects}
        1    0.000    0.000    0.000    0.000 bessel.py:1094(SphericalHankelBase)
        1    0.000    0.000    0.000    0.000 filelist.py:21(FileList)
        5    0.000    0.000    0.000    0.000 datetime.py:515(_check_date_fields)
        1    0.000    0.000    0.000    0.000 polyclasses.py:2845(ANP)
        6    0.000    0.000    0.000    0.000 rcsetup.py:264(validate_fonttype)
       15    0.000    0.000    0.000    0.000 pretty_symbology.py:235(<lambda>)
        7    0.000    0.000    0.000    0.000 feedparser.py:122(pushlines)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:8154(pareto_gen)
       76    0.000    0.000    0.000    0.000 {method 'bit_length' of 'int' objects}
      138    0.000    0.000    0.000    0.000 core.py:809(postParse)
        3    0.000    0.000    0.000    0.000 _adapters.py:30(__new__)
        1    0.000    0.000    0.000    0.000 core.py:321(condition_as_parse_action)
        1    0.000    0.000    0.000    0.000 _logical_location.py:12(LogicalLocation)
        1    0.000    0.000    0.000    0.000 emitter.py:103(Emitter)
       26    0.000    0.000    0.000    0.000 inspect.py:752(_is_wrapper)
        1    0.000    0.000    0.000    0.000 core.py:238(<listcomp>)
       29    0.000    0.000    0.000    0.000 __init__.py:1830(_str_equal)
        1    0.000    0.000    0.000    0.000 _mmio.py:248(MMFile)
        2    0.000    0.000    0.000    0.000 _utils_internal.py:23(get_file_path)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:302(_World)
        1    0.000    0.000    0.000    0.000 fake_tensor.py:951(FakeTensorMode)
       10    0.000    0.000    0.000    0.000 pretty_symbology.py:171(<lambda>)
        1    0.000    0.000    0.000    0.000 puiseux.py:231(PuiseuxPoly)
        1    0.000    0.000    0.000    0.000 reductions.py:151(<dictcomp>)
        1    0.000    0.000    0.000    0.000 tz.py:41(tzutc)
        4    0.000    0.000    0.000    0.000 legend_handler.py:181(__init__)
        1    0.000    0.000    0.000    0.000 subprocess.py:747(Popen)
        1    0.000    0.000    0.000    0.000 transforms.py:209(_InverseTransform)
       25    0.000    0.000    0.000    0.000 decorator.py:251(deprecated)
       15    0.000    0.000    0.000    0.000 {method 'item' of 'numpy.generic' objects}
        3    0.000    0.000    0.000    0.000 _policybase.py:311(header_fetch_parse)
        1    0.000    0.000    0.000    0.000 precedence.py:1(<module>)
       10    0.000    0.000    0.000    0.000 inspect.py:1754(currentframe)
        1    0.000    0.000    0.000    0.000 pathlib.py:667(with_name)
       43    0.000    0.000    0.000    0.000 dispatcher.py:120(register)
        1    0.000    0.000    0.000    0.000 colors.py:81(__init__)
        1    0.000    0.000    0.000    0.000 animation.py:172(AbstractMovieWriter)
       54    0.000    0.000    0.000    0.000 decorators.py:23(_sympifyit)
        1    0.000    0.000    0.000    0.000 observer.py:611(PerChannelMinMaxObserver)
        1    0.000    0.000    0.000    0.000 convert_parameters.py:1(<module>)
        1    0.000    0.000    0.000    0.000 mathtext.py:966(StixFonts)
        1    0.000    0.000    0.000    0.000 matadd.py:19(MatAdd)
       30    0.000    0.000    0.000    0.000 core.py:4416(<genexpr>)
        7    0.000    0.000    0.000    0.000 legend_handler.py:136(__init__)
        1    0.000    0.000    0.000    0.000 frontend.py:531(StmtBuilder)
        3    0.000    0.000    0.000    0.000 _aliases.py:612(<genexpr>)
        1    0.000    0.000    0.000    0.000 font_manager.py:1022(FontManager)
        1    0.000    0.000    0.000    0.000 typing.py:1563(__repr__)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4391(gumbel_l_gen)
        1    0.000    0.000    0.000    0.000 _methods.py:47(_sum)
       14    0.000    0.000    0.000    0.000 dispatcher.py:113(__init__)
        1    0.000    0.000    0.000    0.000 _infra.py:36(Tag)
       36    0.000    0.000    0.000    0.000 _pytree.py:59(_list_unflatten)
        1    0.000    0.000    0.000    0.000 function_docs.py:1(<module>)
        1    0.000    0.000    0.000    0.000 {built-in method posix.readlink}
       13    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:807(__init__)
        1    0.000    0.000    0.000    0.000 pareto.py:9(Pareto)
        1    0.000    0.000    0.000    0.000 _dtype.py:1(<module>)
       93    0.000    0.000    0.000    0.000 {method 'ljust' of 'str' objects}
        2    0.000    0.000    0.000    0.000 <frozen os>:687(__delitem__)
       11    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2035(_preserve_type)
        1    0.000    0.000    0.000    0.000 matcher_utils.py:31(InternalMatch)
        1    0.000    0.000    0.000    0.000 batch_norm_replacement.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dot.py:1(<module>)
       27    0.000    0.000    0.000    0.000 _testutils.py:86(__init__)
        1    0.000    0.000    0.000    0.000 sslproto.py:262(SSLProtocol)
        1    0.000    0.000    0.000    0.000 polyhedron.py:1015(<listcomp>)
       23    0.000    0.000    0.000    0.000 {built-in method math.gcd}
      8/2    0.000    0.000    0.000    0.000 densebasic.py:315(_rec_validate)
        1    0.000    0.000    0.000    0.000 rnn.py:62(RNNBase)
        2    0.000    0.000    0.000    0.000 datetime.py:1336(__new__)
        1    0.000    0.000    0.000    0.000 __init__.py:136(script_if_tracing)
        1    0.000    0.000    0.000    0.000 convolutions.py:1(<module>)
        1    0.000    0.000    0.000    0.000 point.py:42(Point)
        1    0.000    0.000    0.000    0.000 __init__.py:638(levy_stable_gen)
        1    0.000    0.000    0.000    0.000 __init__.py:121(<listcomp>)
       93    0.000    0.000    0.000    0.000 composition.py:542(num_atoms)
        5    0.000    0.000    0.000    0.000 assume.py:305(__new__)
        1    0.000    0.000    0.000    0.000 tensor.py:1984(TensExpr)
        1    0.000    0.000    0.000    0.000 _tokenizer.py:91(Tokenizer)
        1    0.000    0.000    0.000    0.000 proxy_tensor.py:475(ProxyTorchDispatchMode)
        1    0.000    0.000    0.000    0.000 _laplacian.py:1(<module>)
        1    0.000    0.000    0.000    0.000 gaussiandomains.py:16(GaussianElement)
        1    0.000    0.000    0.000    0.000 common.py:465(<dictcomp>)
        1    0.000    0.000    0.000    0.000 rk.py:293(RK45)
        1    0.000    0.000    0.000    0.000 _replicated_tensor_ddp_utils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _mio5.py:516(VarWriter5)
        1    0.000    0.000    0.000    0.000 outputs.py:5920(Vaspout)
        3    0.000    0.000    0.000    0.000 arrayprint.py:403(_get_formatdict)
        1    0.000    0.000    0.000    0.000 _message.py:12(Message)
        1    0.000    0.000    0.000    0.000 _quantile.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _suppression.py:12(Suppression)
        6    0.000    0.000    0.000    0.000 _policybase.py:94(_append_doc)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4694(halfnorm_gen)
        1    0.000    0.000    0.000    0.000 reductions.py:154(<dictcomp>)
       20    0.000    0.000    0.000    0.000 rcsetup.py:600(_deprecate_case_insensitive_join_cap)
        1    0.000    0.000    0.000    0.000 mixture_same_family.py:9(MixtureSameFamily)
        2    0.000    0.000    0.000    0.000 typing.py:1211(__init__)
        4    0.000    0.000    0.000    0.000 core.py:5381(_generateDefaultName)
        8    0.000    0.000    0.000    0.000 util.py:119(clear)
        1    0.000    0.000    0.000    0.000 _factories.py:26(__init__)
        3    0.000    0.000    0.000    0.000 feedparser.py:70(close)
        1    0.000    0.000    0.000    0.000 decompogen.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _state.py:23(parse_env)
        1    0.000    0.000    0.000    0.000 _cubature.py:29(CubatureRegion)
        1    0.000    0.000    0.000    0.000 _common.py:149(_tzinfo)
        1    0.000    0.000    0.000    0.000 __init__.py:112(<listcomp>)
        1    0.000    0.000    0.000    0.000 chebyshev.py:1995(Chebyshev)
        1    0.000    0.000    0.000    0.000 sslproto.py:78(_SSLProtocolTransport)
       32    0.000    0.000    0.000    0.000 typing.py:2906(<genexpr>)
        1    0.000    0.000    0.000    0.000 argparse.py:157(HelpFormatter)
        1    0.000    0.000    0.000    0.000 linalg.py:43(EighResult)
        3    0.000    0.000    0.000    0.000 zipfile.py:1868(__del__)
        1    0.000    0.000    0.000    0.000 _bsr.py:24(_bsr_base)
       35    0.000    0.000    0.000    0.000 {method 'isdisjoint' of 'set' objects}
       10    0.000    0.000    0.000    0.000 gaussiandomains.py:27(new)
        6    0.000    0.000    0.000    0.000 rcsetup.py:228(_make_type_validator)
        1    0.000    0.000    0.000    0.000 periodic_table.py:1431(__init__)
       41    0.000    0.000    0.000    0.000 decorators.py:83(call_highest_priority)
        1    0.000    0.000    0.000    0.000 transformed_distribution.py:11(TransformedDistribution)
        1    0.000    0.000    0.000    0.000 ops.py:726(add_comparative_ops)
        1    0.000    0.000    0.000    0.000 _print_helpers.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:677(rv_generic)
        5    0.000    0.000    0.000    0.000 {built-in method posix.urandom}
        2    0.000    0.000    0.000    0.000 __init__.py:256(_register_at_fork_reinit_lock)
        1    0.000    0.000    0.000    0.000 mock.py:1960(<setcomp>)
        2    0.000    0.000    0.000    0.000 selectors.py:583(_can_use)
        8    0.000    0.000    0.000    0.000 rrule.py:77(<genexpr>)
       56    0.000    0.000    0.000    0.000 __init__.py:1894(<genexpr>)
       11    0.000    0.000    0.000    0.000 threading.py:90(RLock)
        2    0.000    0.000    0.000    0.000 version.py:523(_cmpkey)
        2    0.000    0.000    0.000    0.000 arrayprint.py:503(decorating_function)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2898(_icdf_dispatch)
        1    0.000    0.000    0.000    0.000 _probability_distribution.py:5(_ProbabilityDistribution)
        8    0.000    0.000    0.000    0.000 copyreg.py:12(pickle)
        1    0.000    0.000    0.000    0.000 groups.py:66(SymmetryGroup)
        1    0.000    0.000    0.000    0.000 more.py:2049(numeric_range)
        1    0.000    0.000    0.000    0.000 ndim_array.py:86(NDimArray)
       33    0.000    0.000    0.000    0.000 {method 'ravel' of 'numpy.ndarray' objects}
        3    0.000    0.000    0.000    0.000 feedparser.py:53(__init__)
       19    0.000    0.000    0.000    0.000 {method 'mro' of 'type' objects}
        1    0.000    0.000    0.000    0.000 process.py:71(BaseProcess)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:1(<module>)
        1    0.000    0.000    0.000    0.000 context.py:30(BaseContext)
        1    0.000    0.000    0.000    0.000 calendar.py:54(<listcomp>)
       26    0.000    0.000    0.000    0.000 tokenize.py:616(generate_tokens)
       74    0.000    0.000    0.000    0.000 {built-in method builtins.divmod}
        1    0.000    0.000    0.000    0.000 _rgi.py:56(RegularGridInterpolator)
        1    0.000    0.000    0.000    0.000 periodic_table.py:993(Species)
        1    0.000    0.000    0.000    0.000 __init__.py:45(enabled)
        1    0.000    0.000    0.000    0.000 threading.py:1008(_set_tstate_lock)
        1    0.000    0.000    0.000    0.000 _rectangle.py:12(Rectangle)
       71    0.000    0.000    0.000    0.000 <frozen _collections_abc>:409(__subclasshook__)
       40    0.000    0.000    0.000    0.000 enum.py:92(_is_single_bit)
        1    0.000    0.000    0.000    0.000 futures.py:30(Future)
        1    0.000    0.000    0.000    0.000 compat.py:62(with_metaclass)
        1    0.000    0.000    0.000    0.000 polynomialring.py:10(PolynomialRing)
        1    0.000    0.000    0.000    0.000 numbers.py:2955(motzkin)
       36    0.000    0.000    0.000    0.000 symbol.py:410(_hashable_content)
        1    0.000    0.000    0.000    0.000 modular.py:1(<module>)
        1    0.000    0.000    0.000    0.000 multinomial.py:11(Multinomial)
        1    0.000    0.000    0.000    0.000 sites.py:289(PeriodicSite)
        1    0.000    0.000    0.000    0.000 collections.py:1233(RegularPolyCollection)
        1    0.000    0.000    0.000    0.000 linalg.py:47(QRResult)
        1    0.000    0.000    0.000    0.000 _node.py:17(Node)
        1    0.000    0.000    0.000    0.000 core.py:87(Magmom)
        1    0.000    0.000    0.000    0.000 legend_handler.py:545(__init__)
        1    0.000    0.000    0.000    0.000 independent.py:9(Independent)
        1    0.000    0.000    0.000    0.000 generators.py:1(<module>)
       16    0.000    0.000    0.000    0.000 _collections.py:23(freeze)
        1    0.000    0.000    0.000    0.000 resolver.py:106(BaseResolver)
        1    0.000    0.000    0.000    0.000 approximation.py:1(<module>)
        8    0.000    0.000    0.000    0.000 {method 'transpose' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.000    0.000 theta.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _run_automation_details.py:12(RunAutomationDetails)
        1    0.000    0.000    0.000    0.000 _sarif_log.py:16(SarifLog)
        1    0.000    0.000    0.000    0.000 _memory_viz.py:119(__repr__)
        3    0.000    0.000    0.000    0.000 __init__.py:4998(_make_r_binary_op)
        1    0.000    0.000    0.000    0.000 single.py:42(SingleODEProblem)
        1    0.000    0.000    0.000    0.000 ImageChops.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _decomposition_utils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 hermite_e.py:1650(HermiteE)
        5    0.000    0.000    0.000    0.000 _torch_docs.py:27(merge_dicts)
        1    0.000    0.000    0.000    0.000 sparse.py:13(Embedding)
        1    0.000    0.000    0.000    0.000 _lil.py:20(_lil_base)
        2    0.000    0.000    0.000    0.000 charset.py:211(__init__)
        1    0.000    0.000    0.000    0.000 _thread_flow.py:16(ThreadFlow)
        1    0.000    0.000    0.000    0.000 _spfun_stats.py:1(<module>)
        7    0.000    0.000    0.000    0.000 {method 'read' of '_io.StringIO' objects}
        1    0.000    0.000    0.000    0.000 _edge.py:12(Edge)
        1    0.000    0.000    0.000    0.000 setupcfg.py:228(ConfigHandler)
        4    0.000    0.000    0.000    0.000 function_base.py:1804(trim_zeros)
        1    0.000    0.000    0.000    0.000 __init__.py:142(CudnnModule)
        1    0.000    0.000    0.000    0.000 context.py:79(_compose)
        3    0.000    0.000    0.000    0.000 numbers.py:1397(from_coprime_ints)
        2    0.000    0.000    0.000    0.000 __init__.py:12(<listcomp>)
        7    0.000    0.000    0.000    0.000 dev.py:20(deprecated)
        1    0.000    0.000    0.000    0.000 sets.py:1819(EmptySet)
       16    0.000    0.000    0.000    0.000 {method 'popitem' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 _physical_location.py:17(PhysicalLocation)
        1    0.000    0.000    0.000    0.000 symbolic_opset13.py:26(_apply)
        1    0.000    0.000    0.000    0.000 facts.py:95(deduce_alpha_implications)
        1    0.000    0.000    0.000    0.000 art3d.py:74(Text3D)
        6    0.000    0.000    0.000    0.000 ctx_mp_python.py:82(mpf_convert_arg)
       85    0.000    0.000    0.000    0.000 _compat_pickle.py:167(<genexpr>)
        1    0.000    0.000    0.000    0.000 _reduction.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dviread.py:789(PsfontsMap)
        1    0.000    0.000    0.000    0.000 polynomial.py:1077(poly1d)
        1    0.000    0.000    0.000    0.000 __init__.py:221(<dictcomp>)
        1    0.000    0.000    0.000    0.000 octave.py:65(OctaveCodePrinter)
        2    0.000    0.000    0.000    0.000 _helpers.py:310(is_numpy_namespace)
        1    0.000    0.000    0.000    0.000 linear.py:99(Linear)
        1    0.000    0.000    0.000    0.000 _stack_frame.py:12(StackFrame)
        1    0.000    0.000    0.000    0.000 random.py:284(randrange)
        1    0.000    0.000    0.000    0.000 case.py:44(_Outcome)
        1    0.000    0.000    0.000    0.000 core.py:5959(__init__)
        1    0.000    0.000    0.000    0.000 legendre.py:1619(Legendre)
        1    0.000    0.000    0.000    0.000 operations.py:29(SymmOp)
        7    0.000    0.000    0.000    0.000 core.py:2544(_arraymethod)
       12    0.000    0.000    0.000    0.000 typing.py:389(<genexpr>)
       57    0.000    0.000    0.000    0.000 <frozen _collections_abc>:315(__subclasshook__)
        1    0.000    0.000    0.000    0.000 linear.py:9(LinearPackedParams)
       32    0.000    0.000    0.000    0.000 arraypad.py:33(_slice_at_axis)
        1    0.000    0.000    0.000    0.000 julia.py:48(JuliaCodePrinter)
        1    0.000    0.000    0.000    0.000 pythonrational.py:1(<module>)
        3    0.000    0.000    0.000    0.000 six.py:194(find_spec)
       16    0.000    0.000    0.000    0.000 doccer.py:82(inherit_docstring_from)
        1    0.000    0.000    0.000    0.000 rk.py:183(RK23)
        1    0.000    0.000    0.000    0.000 {built-in method torch._C._cuda_isInBadFork}
        1    0.000    0.000    0.000    0.000 __init__.py:939(ByteStorage)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2067(_num_parameters)
        1    0.000    0.000    0.000    0.000 datetime.py:893(date)
        1    0.000    0.000    0.000    0.000 laguerre.py:1606(Laguerre)
        1    0.000    0.000    0.000    0.000 _survival.py:17(EmpiricalDistributionFunction)
       32    0.000    0.000    0.000    0.000 arraypad.py:120(<genexpr>)
        1    0.000    0.000    0.000    0.000 glsl.py:30(GLSLPrinter)
        1    0.000    0.000    0.000    0.000 _dtype_ctypes.py:1(<module>)
        1    0.000    0.000    0.000    0.000 std.py:76(TqdmDefaultWriteLock)
        1    0.000    0.000    0.000    0.000 qp_subproblem.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:2420(__init__)
        1    0.000    0.000    0.000    0.000 lsmr.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _crash_handler.py:1(<module>)
        1    0.000    0.000    0.000    0.000 numbers.py:32(Complex)
        1    0.000    0.000    0.000    0.000 gzip.py:529(_read_eof)
        1    0.000    0.000    0.000    0.000 core.py:4918(__init__)
        6    0.000    0.000    0.000    0.000 monkey.py:60(<genexpr>)
       59    0.000    0.000    0.000    0.000 {function FreezableDefaultDict.__missing__ at 0x151ae1235c60}
       41    0.000    0.000    0.000    0.000 typing.py:2835(<listcomp>)
        6    0.000    0.000    0.000    0.000 parse.py:786(__getattr__)
       13    0.000    0.000    0.000    0.000 _conversions.py:38(_make_conversion_method)
        1    0.000    0.000    0.000    0.000 _edge_traversal.py:12(EdgeTraversal)
        1    0.000    0.000    0.000    0.000 _reporting_descriptor_relationship.py:16(ReportingDescriptorRelationship)
        1    0.000    0.000    0.000    0.000 parameter.py:81(UninitializedTensorMixin)
        1    0.000    0.000    0.000    0.000 rref.py:1(<module>)
        2    0.000    0.000    0.000    0.000 integerring.py:54(__eq__)
        1    0.000    0.000    0.000    0.000 trajectory.py:42(Trajectory)
        1    0.000    0.000    0.000    0.000 _reporting_configuration.py:12(ReportingConfiguration)
       40    0.000    0.000    0.000    0.000 typing_extensions.py:723(__hash__)
        6    0.000    0.000    0.000    0.000 libmpf.py:653(mpf_pos)
        1    0.000    0.000    0.000    0.000 hb.py:354(HBMatrixType)
        1    0.000    0.000    0.000    0.000 formal.py:968(FormalPowerSeries)
        1    0.000    0.000    0.000    0.000 libmpc.py:205(mpc_div_mpf)
        1    0.000    0.000    0.000    0.000 _location_relationship.py:12(LocationRelationship)
        1    0.000    0.000    0.000    0.000 repmatrix.py:23(RepMatrix)
        1    0.000    0.000    0.000    0.000 _tzpath.py:31(_parse_python_tzpath)
        1    0.000    0.000    0.000    0.000 _stats_py.py:9096(QuantileTestResult)
        1    0.000    0.000    0.000    0.000 conv.py:36(_ConvNd)
        6    0.000    0.000    0.000    0.000 deprecation.py:269(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:353(get_device_name)
        1    0.000    0.000    0.000    0.000 proxy_tensor.py:397(PythonKeyTracer)
        1    0.000    0.000    0.000    0.000 selector_events.py:43(BaseSelectorEventLoop)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:122(<listcomp>)
        1    0.000    0.000    0.000    0.000 _trace.py:1215(_script_if_tracing)
        1    0.000    0.000    0.000    0.000 __init__.py:192(<dictcomp>)
       30    0.000    0.000    0.000    0.000 _array_api.py:525(<listcomp>)
        1    0.000    0.000    0.000    0.000 argparse.py:1142(_SubParsersAction)
       15    0.000    0.000    0.000    0.000 ssl.py:1000(_sslcopydoc)
        1    0.000    0.000    0.000    0.000 testing.py:126(TestParseResultsAsserts)
        1    0.000    0.000    0.000    0.000 _util.py:671(_workers_wrapper)
       36    0.000    0.000    0.000    0.000 {method 'issuperset' of 'set' objects}
        8    0.000    0.000    0.000    0.000 __init__.py:150(<genexpr>)
       16    0.000    0.000    0.000    0.000 ctx_mp_python.py:597(make_mpf)
        1    0.000    0.000    0.000    0.000 _linprog_simplex.py:1(<module>)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_md5}
        1    0.000    0.000    0.000    0.000 polyclasses.py:2448(DMF)
        1    0.000    0.000    0.000    0.000 sparse.py:9(Embedding)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:282(define_parameters)
        1    0.000    0.000    0.000    0.000 transformer.py:370(TransformerEncoderLayer)
        1    0.000    0.000    0.000    0.000 dev.py:159(__call__)
       12    0.000    0.000    0.000    0.000 fake_tensor.py:327(register_op_impl)
        3    0.000    0.000    0.000    0.000 blas.py:270(find_best_blas_type)
        1    0.000    0.000    0.000    0.000 debug.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _pade.py:1(<module>)
        1    0.000    0.000    0.000    0.000 rk.py:74(RungeKutta)
        1    0.000    0.000    0.000    0.000 ctx_mp_python.py:39(_mpf)
        1    0.000    0.000    0.000    0.000 transforms.py:687(AffineTransform)
        8    0.000    0.000    0.000    0.000 fontconfig_pattern.py:144(_name)
        1    0.000    0.000    0.000    0.000 fake_quantize.py:60(FakeQuantizeBase)
        2    0.000    0.000    0.000    0.000 {method 'newbyteorder' of 'numpy.generic' objects}
        1    0.000    0.000    0.000    0.000 _new_distributions.py:117(_sample_formula)
        1    0.000    0.000    0.000    0.000 representer.py:238(SafeRepresenter)
        1    0.000    0.000    0.000    0.000 expressionrawdomain.py:12(ExpressionRawDomain)
        1    0.000    0.000    0.000    0.000 _script.py:562(RecursiveScriptModule)
       13    0.000    0.000    0.000    0.000 enum.py:775(__iter__)
        1    0.000    0.000    0.000    0.000 pickle.py:407(_Pickler)
        1    0.000    0.000    0.000    0.000 _attachment.py:18(Attachment)
        1    0.000    0.000    0.000    0.000 euler.py:1(<module>)
       14    0.000    0.000    0.000    0.000 util.py:30(__init__)
        1    0.000    0.000    0.000    0.000 _memory_viz.py:104(_format_size)
        1    0.000    0.000    0.000    0.000 _cobyla_py.py:1(<module>)
       14    0.000    0.000    0.000    0.000 libmpf.py:153(_normalize)
        9    0.000    0.000    0.000    0.000 _apply_pyprojecttoml.py:388(_attrgetter)
        1    0.000    0.000    0.000    0.000 tensor.py:416(_TensorDataLazyEvaluator)
        1    0.000    0.000    0.000    0.000 _tool_component_reference.py:12(ToolComponentReference)
        5    0.000    0.000    0.000    0.000 __init__.py:750(__init__)
        1    0.000    0.000    0.000    0.000 _type_aliases.py:151(_set_up_aliases)
       13    0.000    0.000    0.000    0.000 {method 'index' of 'tuple' objects}
        1    0.000    0.000    0.000    0.000 defchararray.py:1922(chararray)
        1    0.000    0.000    0.000    0.000 subsets.py:6(Subset)
        1    0.000    0.000    0.000    0.000 animation.py:256(MovieWriter)
        1    0.000    0.000    0.000    0.000 _artifact_location.py:12(ArtifactLocation)
       59    0.000    0.000    0.000    0.000 {method 'pop' of 'set' objects}
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:10826(uniform_gen)
        8    0.000    0.000    0.000    0.000 __init__.py:56(__init_subclass__)
       36    0.000    0.000    0.000    0.000 discovery.py:252(<genexpr>)
       17    0.000    0.000    0.000    0.000 __init__.py:438(<dictcomp>)
        2    0.000    0.000    0.000    0.000 _adapters.py:165(wrap_spec)
        1    0.000    0.000    0.000    0.000 unicode.py:31(unicode_set)
       36    0.000    0.000    0.000    0.000 __init__.py:888(__bool__)
        1    0.000    0.000    0.000    0.000 tempfile.py:665(SpooledTemporaryFile)
        4    0.000    0.000    0.000    0.000 libmpf.py:631(mpf_le)
        1    0.000    0.000    0.000    0.000 polyhedron.py:1013(<listcomp>)
        1    0.000    0.000    0.000    0.000 hermite.py:1658(Hermite)
        9    0.000    0.000    0.000    0.000 __init__.py:163(__new__)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1692(reset_cache)
        1    0.000    0.000    0.000    0.000 constructor.py:62(BaseConstructor)
        1    0.000    0.000    0.000    0.000 queue.py:28(Queue)
       11    0.000    0.000    0.000    0.000 legend_handler.py:59(__init__)
        1    0.000    0.000    0.000    0.000 {built-in method time.localtime}
        1    0.000    0.000    0.000    0.000 linalg.py:51(SlogdetResult)
        2    0.000    0.000    0.000    0.000 {built-in method posix.access}
        1    0.000    0.000    0.000    0.000 function.py:517(once_differentiable)
        1    0.000    0.000    0.000    0.000 pycode.py:664(CmathPrinter)
        1    0.000    0.000    0.000    0.000 transformer.py:593(TransformerDecoderLayer)
        1    0.000    0.000    0.000    0.000 mathematica.py:122(MCodePrinter)
        1    0.000    0.000    0.000    0.000 ast.py:74(_convert_signed_num)
        1    0.000    0.000    0.000    0.000 miscellaneous.py:379(MinMaxBase)
        1    0.000    0.000    0.000    0.000 _property_bag.py:10(PropertyBag)
        1    0.000    0.000    0.000    0.000 client.py:239(HTTPResponse)
        6    0.000    0.000    0.000    0.000 glob.py:222(has_magic)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:5028(Mixture)
        1    0.000    0.000    0.000    0.000 _external_property_file_reference.py:15(ExternalPropertyFileReference)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3635(_pdf_formula)
        1    0.000    0.000    0.000    0.000 inputs.py:791(Incar)
        1    0.000    0.000    0.000    0.000 _dia.py:20(_dia_base)
       33    0.000    0.000    0.000    0.000 _collections.py:24(<lambda>)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1832(tol)
        1    0.000    0.000    0.000    0.000 dos.py:171(Dos)
        1    0.000    0.000    0.000    0.000 mathtext.py:642(BakomaFonts)
        1    0.000    0.000    0.000    0.000 defmatrix.py:73(matrix)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3121(_one)
        1    0.000    0.000    0.000    0.000 conditionset.py:19(ConditionSet)
        1    0.000    0.000    0.000    0.000 numpy.py:37(NumPyPrinter)
        1    0.000    0.000    0.000    0.000 _script.py:486(ScriptModule)
        1    0.000    0.000    0.000    0.000 client.py:108(<dictcomp>)
        1    0.000    0.000    0.000    0.000 session.py:1(<module>)
        1    0.000    0.000    0.000    0.000 client.py:789(HTTPConnection)
        3    0.000    0.000    0.000    0.000 message.py:150(__init__)
        1    0.000    0.000    0.000    0.000 symbolic_opset13.py:425(_reduce_with_dtype)
        1    0.000    0.000    0.000    0.000 memory_format.py:1(<module>)
        1    0.000    0.000    0.000    0.000 array_comprehension.py:10(ArrayComprehension)
        1    0.000    0.000    0.000    0.000 repr.py:18(ReprPrinter)
       18    0.000    0.000    0.000    0.000 _data.py:142(_create_method)
        2    0.000    0.000    0.000    0.000 matexpr.py:81(__new__)
       13    0.000    0.000    0.000    0.000 enum.py:116(_iter_bits_lsb)
        1    0.000    0.000    0.000    0.000 shape_prop.py:11(TensorMetadata)
        1    0.000    0.000    0.000    0.000 core.py:3750(__init__)
        1    0.000    0.000    0.000    0.000 _conversion.py:17(Conversion)
        1    0.000    0.000    0.000    0.000 tasks.py:78(Task)
        1    0.000    0.000    0.000    0.000 finite_diff.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _qmc.py:2486(MultinomialQMC)
       15    0.000    0.000    0.000    0.000 weakref.py:427(__setitem__)
        1    0.000    0.000    0.000    0.000 parser.py:102(Parser)
        1    0.000    0.000    0.000    0.000 operations.py:516(MagSymmOp)
        5    0.000    0.000    0.000    0.000 __init__.py:10(set_module)
        1    0.000    0.000    0.000    0.000 dataclasses.py:1224(fields)
        6    0.000    0.000    0.000    0.000 {method 'copy' of 'numpy.generic' objects}
        3    0.000    0.000    0.000    0.000 core.py:5093(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 _artifact_content.py:15(ArtifactContent)
        1    0.000    0.000    0.000    0.000 tz.py:132(tzoffset)
        1    0.000    0.000    0.000    0.000 complexfield.py:16(ComplexField)
        1    0.000    0.000    0.000    0.000 threading.py:389(notify_all)
        1    0.000    0.000    0.000    0.000 sparse.py:226(EmbeddingBag)
        1    0.000    0.000    0.000    0.000 stringpict.py:22(stringPict)
        1    0.000    0.000    0.000    0.000 _text.py:7(FoldedCase)
        1    0.000    0.000    0.000    0.000 integerring.py:20(IntegerRing)
        1    0.000    0.000    0.000    0.000 conv.py:675(ConvTranspose1d)
        4    0.000    0.000    0.000    0.000 pretty_symbology.py:232(<lambda>)
       12    0.000    0.000    0.000    0.000 patches.py:1883(<genexpr>)
        1    0.000    0.000    0.000    0.000 ctx_mp_python.py:359(_mpc)
       10    0.000    0.000    0.000    0.000 version.py:319(<listcomp>)
       11    0.000    0.000    0.000    0.000 eigen.py:41(defun)
        1    0.000    0.000    0.000    0.000 qmc.py:1(<module>)
        4    0.000    0.000    0.000    0.000 results.py:224(__setitem__)
       29    0.000    0.000    0.000    0.000 {method 'rsplit' of 'str' objects}
        1    0.000    0.000    0.000    0.000 _lobpcg.py:695(LOBPCG)
       10    0.000    0.000    0.000    0.000 symbol.py:798(<listcomp>)
        1    0.000    0.000    0.000    0.000 _multiformat_message_string.py:12(MultiformatMessageString)
        1    0.000    0.000    0.000    0.000 ctx_mp.py:58(MPContext)
        1    0.000    0.000    0.000    0.000 __init__.py:21(__deprecated_private_func)
        1    0.000    0.000    0.000    0.000 sets.py:1035(Interval)
        1    0.000    0.000    0.000    0.000 tight_layout.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _matrix.py:1(spmatrix)
        1    0.000    0.000    0.000    0.000 random.py:103(Random)
        1    0.000    0.000    0.000    0.000 cse_opts.py:1(<module>)
        3    0.000    0.000    0.000    0.000 domainmatrix.py:225(from_rep)
        2    0.000    0.000    0.000    0.000 ctx_mp_python.py:145(__float__)
        1    0.000    0.000    0.000    0.000 tripcolor.py:1(<module>)
        1    0.000    0.000    0.000    0.000 base64mime.py:1(<module>)
       58    0.000    0.000    0.000    0.000 _utils.py:770(__init__)
        1    0.000    0.000    0.000    0.000 dir_util.py:30(wrap)
        1    0.000    0.000    0.000    0.000 _version.py:136(__lt__)
        1    0.000    0.000    0.000    0.000 _bsplines.py:69(BSpline)
        1    0.000    0.000    0.000    0.000 art3d.py:128(Line3D)
        8    0.000    0.000    0.000    0.000 mock.py:322(_delegating_property)
        1    0.000    0.000    0.000    0.000 datapipe.py:212(MapDataPipe)
        1    0.000    0.000    0.000    0.000 __init__.py:527(Distribution)
        1    0.000    0.000    0.000    0.000 _finite_differences.py:1(<module>)
        4    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:254(_requires_builtin_wrapper)
       38    0.000    0.000    0.000    0.000 ops.py:33(set_doc_string)
        1    0.000    0.000    0.000    0.000 matrices.py:9(_matrix)
        1    0.000    0.000    0.000    0.000 axis.py:1965(XAxis)
        1    0.000    0.000    0.000    0.000 exponential.py:10(Exponential)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:1657(rv_continuous)
        1    0.000    0.000    0.000    0.000 polygon.py:28(Polygon)
        1    0.000    0.000    0.000    0.000 analyzer.py:84(SpacegroupAnalyzer)
        1    0.000    0.000    0.000    0.000 fusion.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _internal.py:240(_missing_ctypes)
       38    0.000    0.000    0.000    0.000 ops.py:25(set_doc)
        1    0.000    0.000    0.000    0.000 loss.py:1498(TripletMarginWithDistanceLoss)
        1    0.000    0.000    0.000    0.000 structure.py:3439(IMolecule)
       44    0.000    0.000    0.000    0.000 core.py:4405(<genexpr>)
        1    0.000    0.000    0.000    0.000 image.py:1010(NonUniformImage)
        1    0.000    0.000    0.000    0.000 __init__.py:869(ByteStorage)
        4    0.000    0.000    0.000    0.000 kind.py:75(__new__)
       14    0.000    0.000    0.000    0.000 {method 'seek' of '_io.BufferedReader' objects}
       20    0.000    0.000    0.000    0.000 enum.py:1609(_simple_enum)
        1    0.000    0.000    0.000    0.000 polytools.py:7556(GroebnerBasis)
        1    0.000    0.000    0.000    0.000 base_backend.py:49(Plot)
       10    0.000    0.000    0.000    0.000 _text.py:90(lower)
        1    0.000    0.000    0.000    0.000 _csr.py:18(_csr_base)
       59    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1846(cache_policy)
        1    0.000    0.000    0.000    0.000 _diagnostic.py:99(__init__)
        1    0.000    0.000    0.000    0.000 queues.py:21(Queue)
        1    0.000    0.000    0.000    0.000 socket.py:214(socket)
        1    0.000    0.000    0.000    0.000 computed_entries.py:287(ComputedEntry)
        1    0.000    0.000    0.000    0.000 jscode.py:46(JavascriptCodePrinter)
        1    0.000    0.000    0.000    0.000 patches.py:2415(_Base)
       10    0.000    0.000    0.000    0.000 dataclasses.py:847(<listcomp>)
        1    0.000    0.000    0.000    0.000 free_groups.py:350(FreeGroupElement)
       24    0.000    0.000    0.000    0.000 dviread.py:168(<listcomp>)
        2    0.000    0.000    0.000    0.000 polyclasses.py:1241(_new)
        1    0.000    0.000    0.000    0.000 structure.py:4137(Structure)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:71(_export_c_types)
        1    0.000    0.000    0.000    0.000 context.py:297(passes)
        1    0.000    0.000    0.000    0.000 _graph.py:17(Graph)
        1    0.000    0.000    0.000    0.000 _ltisys.py:490(TransferFunction)
        1    0.000    0.000    0.000    0.000 kronecker.py:86(KroneckerProduct)
        1    0.000    0.000    0.000    0.000 ctx_iv.py:304(MPIntervalContext)
        1    0.000    0.000    0.000    0.000 subspaces.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _weakrefset.py:85(add)
       37    0.000    0.000    0.000    0.000 numbers.py:1761(as_coeff_Mul)
        1    0.000    0.000    0.000    0.000 finitefield.py:108(FiniteField)
        2    0.000    0.000    0.000    0.000 <frozen _collections_abc>:790(items)
        1    0.000    0.000    0.000    0.000 printer.py:235(Printer)
        2    0.000    0.000    0.000    0.000 pathlib.py:777(parent)
       14    0.000    0.000    0.000    0.000 libelefun.py:85(constant_memo)
        1    0.000    0.000    0.000    0.000 _aliases.py:122(ones)
        1    0.000    0.000    0.000    0.000 _bracket.py:1(<module>)
        7    0.000    0.000    0.000    0.000 getlimits.py:709(max)
        1    0.000    0.000    0.000    0.000 digits.py:1(<module>)
       18    0.000    0.000    0.000    0.000 __init__.py:788(__init__)
       11    0.000    0.000    0.000    0.000 windows.py:53(decorator)
       38    0.000    0.000    0.000    0.000 observer.py:53(__init__)
        1    0.000    0.000    0.000    0.000 datetime.py:573(timedelta)
        1    0.000    0.000    0.000    0.000 _ltisys.py:1221(StateSpace)
        1    0.000    0.000    0.000    0.000 index_tricks.py:310(AxisConcatenator)
       58    0.000    0.000    0.000    0.000 units.py:138(<genexpr>)
        1    0.000    0.000    0.000    0.000 ctx_mp_python.py:623(convert)
        1    0.000    0.000    0.000    0.000 _factories.py:56(__init__)
        1    0.000    0.000    0.000    0.000 function.py:2101(Subs)
        1    0.000    0.000    0.000    0.000 remote_device.py:6(_remote_device)
        1    0.000    0.000    0.000    0.000 _fix.py:16(Fix)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:307(_pdf_formula)
        1    0.000    0.000    0.000    0.000 _stdlib.py:1(<module>)
        6    0.000    0.000    0.000    0.000 basic.py:149(<genexpr>)
        1    0.000    0.000    0.000    0.000 zipfile.py:1216(ZipFile)
        1    0.000    0.000    0.000    0.000 modules.py:1280(ModuleElement)
        1    0.000    0.000    0.000    0.000 bessel.py:1207(hn2)
       37    0.000    0.000    0.000    0.000 function_base.py:19(_linspace_dispatcher)
       14    0.000    0.000    0.000    0.000 pathlib.py:94(join_parsed_parts)
        9    0.000    0.000    0.000    0.000 core.py:3771(parseImpl)
       13    0.000    0.000    0.000    0.000 basic.py:539(__ne__)
        1    0.000    0.000    0.000    0.000 ssl.py:845(SSLObject)
        1    0.000    0.000    0.000    0.000 rnn.py:111(RNNCell)
        1    0.000    0.000    0.000    0.000 polygon.py:1420(RegularPolygon)
        1    0.000    0.000    0.000    0.000 file_util.py:1(<module>)
       74    0.000    0.000    0.000    0.000 util.py:245(no_escape_re_range_char)
       32    0.000    0.000    0.000    0.000 decorators.py:196(sympify_return)
       12    0.000    0.000    0.000    0.000 doccer.py:139(extend_notes_in_docstring)
        1    0.000    0.000    0.000    0.000 _extract.py:1(<module>)
        1    0.000    0.000    0.000    0.000 conv.py:806(ConvTranspose2d)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2331(_median_dispatch)
        1    0.000    0.000    0.000    0.000 reductions.py:52(__init__)
        1    0.000    0.000    0.000    0.000 re.py:1(<module>)
        2    0.000    0.000    0.000    0.000 {method 'cache_clear' of 'functools._lru_cache_wrapper' objects}
       55    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1867(validation_policy)
        1    0.000    0.000    0.000    0.000 normal.py:12(Normal)
       28    0.000    0.000    0.000    0.000 _decorator.py:14(__init__)
        1    0.000    0.000    0.000    0.000 coroutines.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _policybase.py:281(_sanitize_header)
        5    0.000    0.000    0.000    0.000 pretty_symbology.py:170(<lambda>)
        6    0.000    0.000    0.000    0.000 {built-in method math.frexp}
        7    0.000    0.000    0.000    0.000 fractions.py:277(_operator_fallbacks)
        2    0.000    0.000    0.000    0.000 <frozen _collections_abc>:444(<listcomp>)
        1    0.000    0.000    0.000    0.000 line.py:50(LinearEntity)
        1    0.000    0.000    0.000    0.000 typing.py:1569(<listcomp>)
        1    0.000    0.000    0.000    0.000 _symbolic_trace.py:994(wrap)
        1    0.000    0.000    0.000    0.000 _ops.py:597(__init__)
        5    0.000    0.000    0.000    0.000 _torch_docs.py:28(<dictcomp>)
        1    0.000    0.000    0.000    0.000 ast.py:70(_convert_num)
        1    0.000    0.000    0.000    0.000 rcode.py:78(RCodePrinter)
        1    0.000    0.000    0.000    0.000 optimizer.py:154(Optimizer)
        1    0.000    0.000    0.000    0.000 comments.py:88(Comment)
        1    0.000    0.000    0.000    0.000 threading.py:838(Thread)
        1    0.000    0.000    0.000    0.000 {method 'view' of 'numpy.generic' objects}
        1    0.000    0.000    0.000    0.000 numbers.py:294(Integral)
        1    0.000    0.000    0.000    0.000 band.py:16(Band)
        3    0.000    0.000    0.000    0.000 core.py:714(<listcomp>)
        1    0.000    0.000    0.000    0.000 _code_flow.py:16(CodeFlow)
        1    0.000    0.000    0.000    0.000 _data.py:20(_data_matrix)
        1    0.000    0.000    0.000    0.000 residues.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _bunch.py:1(<module>)
        1    0.000    0.000    0.000    0.000 embedding_ops.py:195(EmbeddingBag)
        1    0.000    0.000    0.000    0.000 backend_registry.py:43(backend_registered)
       77    0.000    0.000    0.000    0.000 signal.py:16(<lambda>)
        1    0.000    0.000    0.000    0.000 fourier.py:127(FourierSeries)
        1    0.000    0.000    0.000    0.000 utils.py:17(LinearBlockSparsePattern)
        1    0.000    0.000    0.000    0.000 pythonmpq.py:46(PythonMPQ)
        1    0.000    0.000    0.000    0.000 gamma.py:14(Gamma)
        1    0.000    0.000    0.000    0.000 deutils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 mock.py:2158(AsyncMockMixin)
        1    0.000    0.000    0.000    0.000 rnn.py:178(LSTMCell)
        1    0.000    0.000    0.000    0.000 threading.py:555(__init__)
        1    0.000    0.000    0.000    0.000 ctx_iv.py:386(_set_prec)
        1    0.000    0.000    0.000    0.000 _pylab_helpers.py:10(Gcf)
        1    0.000    0.000    0.000    0.000 numpy.py:9(<listcomp>)
        1    0.000    0.000    0.000    0.000 _interpolate.py:1279(BPoly)
       32    0.000    0.000    0.000    0.000 decorators.py:210(__init__)
        2    0.000    0.000    0.000    0.000 operations.py:613(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:637(RcParams)
        1    0.000    0.000    0.000    0.000 _lebedev.py:1(<module>)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1759(<listcomp>)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:348(_sample_formula)
        1    0.000    0.000    0.000    0.000 prufer.py:11(Prufer)
        1    0.000    0.000    0.000    0.000 _shgo.py:488(SHGO)
        1    0.000    0.000    0.000    0.000 conv.py:16(_ConvNd)
        1    0.000    0.000    0.000    0.000 difflib.py:44(SequenceMatcher)
        2    0.000    0.000    0.000    0.000 {method 'replace' of 'code' objects}
        1    0.000    0.000    0.000    0.000 exponential.py:35(ExpBase)
       14    0.000    0.000    0.000    0.000 mixins.py:26(_reflected_binary_method)
        1    0.000    0.000    0.000    0.000 polyhedron.py:1011(<listcomp>)
        2    0.000    0.000    0.000    0.000 sysconfig.py:311(get_default_scheme)
        1    0.000    0.000    0.000    0.000 qfunctions.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _tool.py:12(Tool)
        5    0.000    0.000    0.000    0.000 <frozen _collections_abc>:489(_type_repr)
        5    0.000    0.000    0.000    0.000 {built-in method posix.register_at_fork}
        1    0.000    0.000    0.000    0.000 factor_.py:665(FactorCache)
        1    0.000    0.000    0.000    0.000 _infra.py:272(<setcomp>)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:816(matches)
        1    0.000    0.000    0.000    0.000 _trustregion_exact.py:185(IterativeSubproblem)
        1    0.000    0.000    0.000    0.000 modularinteger.py:15(ModularInteger)
        1    0.000    0.000    0.000    0.000 conv.py:961(ConvTranspose3d)
       52    0.000    0.000    0.000    0.000 pathlib.py:327(_select_from)
        1    0.000    0.000    0.000    0.000 poisson.py:10(Poisson)
        1    0.000    0.000    0.000    0.000 is_from_package.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:506(rv_frozen)
        7    0.000    0.000    0.000    0.000 graph.py:57(_register_custom_builtin)
       36    0.000    0.000    0.000    0.000 _pytree.py:56(_list_flatten)
        1    0.000    0.000    0.000    0.000 __init__.py:1803(LoggerAdapter)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:418(_mode_formula)
       10    0.000    0.000    0.000    0.000 axis.py:1935(_make_getset_interval)
        1    0.000    0.000    0.000    0.000 entity.py:71(GeometryEntity)
        1    0.000    0.000    0.000    0.000 core.py:3039(Regex)
        1    0.000    0.000    0.000    0.000 observer.py:1365(RecordingObserver)
        1    0.000    0.000    0.000    0.000 extensions.py:219(MonogenicFiniteExtension)
        1    0.000    0.000    0.000    0.000 _differentialevolution.py:507(DifferentialEvolutionSolver)
        1    0.000    0.000    0.000    0.000 _base.py:352(ProductNestedFixed)
        1    0.000    0.000    0.000    0.000 _policybase.py:112(Policy)
        1    0.000    0.000    0.000    0.000 _chandrupatla.py:1(<module>)
        5    0.000    0.000    0.000    0.000 core.py:6175(token_map)
        1    0.000    0.000    0.000    0.000 _array_api.py:659(_XPSphinxCapability)
        1    0.000    0.000    0.000    0.000 _replacement.py:16(Replacement)
        1    0.000    0.000    0.000    0.000 _configuration_override.py:16(ConfigurationOverride)
        1    0.000    0.000    0.000    0.000 tensor.py:98(_IndexStructure)
        1    0.000    0.000    0.000    0.000 rk.py:407(DOP853)
       45    0.000    0.000    0.000    0.000 fromnumeric.py:3172(_ndim_dispatcher)
        1    0.000    0.000    0.000    0.000 io_utils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dispatcher.py:89(Dispatcher)
        1    0.000    0.000    0.000    0.000 distance.py:1984(<dictcomp>)
        1    0.000    0.000    0.000    0.000 {method 'normal' of 'numpy.random._generator.Generator' objects}
        1    0.000    0.000    0.000    0.000 linear.py:17(LinearPackedParams)
        1    0.000    0.000    0.000    0.000 decorator.py:85(conserve_mpmath_dps)
        1    0.000    0.000    0.000    0.000 ctx_mp_python.py:583(PythonMPContext)
        1    0.000    0.000    0.000    0.000 message.py:972(MIMEPart)
        1    0.000    0.000    0.000    0.000 transforms.py:391(IndependentTransform)
       48    0.000    0.000    0.000    0.000 periodic_table.py:1531(symbol)
        1    0.000    0.000    0.000    0.000 embedding_ops.py:70(Embedding)
        1    0.000    0.000    0.000    0.000 bz2.py:131(seekable)
        1    0.000    0.000    0.000    0.000 pydoc.py:1159(TextDoc)
        1    0.000    0.000    0.000    0.000 pooling.py:16(_MaxPoolNd)
        1    0.000    0.000    0.000    0.000 gammazeta.py:394(bernoulli_size)
       23    0.000    0.000    0.000    0.000 functools.py:972(__set_name__)
        1    0.000    0.000    0.000    0.000 collections.py:1824(TriMesh)
        1    0.000    0.000    0.000    0.000 _deprecate.py:1(<module>)
        4    0.000    0.000    0.000    0.000 assumptions.py:484(generator)
        1    0.000    0.000    0.000    0.000 transforms.py:2266(CompositeGenericTransform)
       45    0.000    0.000    0.000    0.000 ctx_iv.py:394(<lambda>)
        1    0.000    0.000    0.000    0.000 curve.py:22(Curve)
        1    0.000    0.000    0.000    0.000 dist.py:1109(DistributionMetadata)
        1    0.000    0.000    0.000    0.000 bessel.py:1151(hn1)
        1    0.000    0.000    0.000    0.000 _builtins.py:114(_gen_torch_functional_registered_ops)
        1    0.000    0.000    0.000    0.000 fractionfield.py:9(FractionField)
        7    0.000    0.000    0.000    0.000 {method 'extend' of 'collections.deque' objects}
        1    0.000    0.000    0.000    0.000 tfqmr.py:1(<module>)
        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:1037(_resolve_name)
        1    0.000    0.000    0.000    0.000 representer.py:52(BaseRepresenter)
        1    0.000    0.000    0.000    0.000 _cobyqa_py.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pycode.py:763(<listcomp>)
        1    0.000    0.000    0.000    0.000 collections.py:887(_CollectionWithSizes)
       30    0.000    0.000    0.000    0.000 symbolic_opset9.py:289(_apply_params)
        1    0.000    0.000    0.000    0.000 specifiers.py:44(BaseSpecifier)
        4    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3125(_constants)
       31    0.000    0.000    0.000    0.000 laplace.py:48(DEBUG_WRAP)
        1    0.000    0.000    0.000    0.000 algebraicfield.py:15(AlgebraicField)
        1    0.000    0.000    0.000    0.000 collections.py:1684(EllipseCollection)
        1    0.000    0.000    0.000    0.000 ImagePalette.py:31(ImagePalette)
       13    0.000    0.000    0.000    0.000 _internal.py:920(npy_ctypes_check)
        1    0.000    0.000    0.000    0.000 tensor.py:812(__init__)
        1    0.000    0.000    0.000    0.000 collections.py:1888(QuadMesh)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1052(TimerBase)
        1    0.000    0.000    0.000    0.000 relational.py:65(Relational)
        1    0.000    0.000    0.000    0.000 dirichlet.py:30(Dirichlet)
        1    0.000    0.000    0.000    0.000 __init__.py:1327(_TorchCompileInductorWrapper)
        1    0.000    0.000    0.000    0.000 font_manager.py:618(FontProperties)
        6    0.000    0.000    0.000    0.000 {method 'union' of 'set' objects}
       78    0.000    0.000    0.000    0.000 signal.py:21(<lambda>)
        1    0.000    0.000    0.000    0.000 request.py:1694(URLopener)
       29    0.000    0.000    0.000    0.000 core.py:4695(recurse)
        1    0.000    0.000    0.000    0.000 subprocess.py:126(CalledProcessError)
        6    0.000    0.000    0.000    0.000 symbolic_opset8.py:70(_apply)
        1    0.000    0.000    0.000    0.000 units.py:141(<dictcomp>)
        1    0.000    0.000    0.000    0.000 __init__.py:98(<listcomp>)
        6    0.000    0.000    0.000    0.000 utils.py:51(_has_surrogates)
        1    0.000    0.000    0.000    0.000 _covariance.py:11(Covariance)
        1    0.000    0.000    0.000    0.000 canonical_constraint.py:5(CanonicalConstraint)
        5    0.000    0.000    0.000    0.000 datetime.py:528(_check_time_fields)
        1    0.000    0.000    0.000    0.000 core.py:1329(make_mask_descr)
        1    0.000    0.000    0.000    0.000 fontconfig_pattern.py:27(FontconfigPatternParser)
        1    0.000    0.000    0.000    0.000 _interpolate.py:173(interp1d)
       31    0.000    0.000    0.000    0.000 _base.py:51(__init__)
        1    0.000    0.000    0.000    0.000 comments.py:706(CommentedMap)
        1    0.000    0.000    0.000    0.000 distance.py:1796(MetricInfo)
        1    0.000    0.000    0.000    0.000 __init__.py:37(FoldedCase)
        1    0.000    0.000    0.000    0.000 std.py:131(Bar)
        1    0.000    0.000    0.000    0.000 numbers.py:2231(AlgebraicNumber)
        7    0.000    0.000    0.000    0.000 rrule.py:70(__init__)
       24    0.000    0.000    0.000    0.000 sympify.py:84(<genexpr>)
        1    0.000    0.000    0.000    0.000 parse.py:143(_NetlocResultMixinBase)
        1    0.000    0.000    0.000    0.000 _digraph.py:5(DiGraph)
        1    0.000    0.000    0.000    0.000 connection.py:114(_ConnectionBase)
       13    0.000    0.000    0.000    0.000 mixins.py:36(_inplace_binary_method)
        1    0.000    0.000    0.000    0.000 abc.py:14(ResourceReader)
        1    0.000    0.000    0.000    0.000 maple.py:84(MapleCodePrinter)
        1    0.000    0.000    0.000    0.000 backend_bases.py:733(GraphicsContextBase)
        1    0.000    0.000    0.000    0.000 _artifact_change.py:16(ArtifactChange)
        1    0.000    0.000    0.000    0.000 csv.py:80(DictReader)
        1    0.000    0.000    0.000    0.000 _kde.py:36(gaussian_kde)
        1    0.000    0.000    0.000    0.000 art3d.py:246(Line3DCollection)
        1    0.000    0.000    0.000    0.000 _csc.py:17(_csc_base)
        2    0.000    0.000    0.000    0.000 core.py:3613(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 pycode.py:87(<listcomp>)
        7    0.000    0.000    0.000    0.000 {method 'deleter' of 'property' objects}
        1    0.000    0.000    0.000    0.000 dataframe_wrapper.py:23(PandasWrapper)
        1    0.000    0.000    0.000    0.000 bandstructure.py:38(Kpoint)
        1    0.000    0.000    0.000    0.000 core.py:80(__compat__)
        1    0.000    0.000    0.000    0.000 homomorphisms.py:18(ModuleHomomorphism)
       18    0.000    0.000    0.000    0.000 ops.py:312(__init__)
        1    0.000    0.000    0.000    0.000 error_functions.py:1828(Si)
        1    0.000    0.000    0.000    0.000 settings.py:27(JonesFaithfulTransformation)
        1    0.000    0.000    0.000    0.000 trigonometric.py:1572(ReciprocalTrigonometricFunction)
        1    0.000    0.000    0.000    0.000 coord.py:362(Simplex)
        1    0.000    0.000    0.000    0.000 context.py:99(compose_two)
        1    0.000    0.000    0.000    0.000 _resampling.py:2261(BootstrapMethod)
        1    0.000    0.000    0.000    0.000 plane.py:30(Plane)
       11    0.000    0.000    0.000    0.000 optimizer.py:28(_use_grad_for_differentiable)
        1    0.000    0.000    0.000    0.000 realfield.py:54(RealField)
        1    0.000    0.000    0.000    0.000 iterators.py:1(<module>)
        5    0.000    0.000    0.000    0.000 _new_distributions.py:339(_moment_raw_formula)
        1    0.000    0.000    0.000    0.000 named_groups.py:1(<module>)
        1    0.000    0.000    0.000    0.000 special.py:181(__new__)
        1    0.000    0.000    0.000    0.000 logic.py:221(Logic)
        1    0.000    0.000    0.000    0.000 products.py:17(Product)
        1    0.000    0.000    0.000    0.000 inputs.py:3075(VaspInput)
        1    0.000    0.000    0.000    0.000 linear.py:12(Linear)
        5    0.000    0.000    0.000    0.000 _basic.py:3031(<listcomp>)
        1    0.000    0.000    0.000    0.000 blockmatrix.py:24(BlockMatrix)
        1    0.000    0.000    0.000    0.000 __init__.py:17(Future)
       43    0.000    0.000    0.000    0.000 _compat_pickle.py:165(<genexpr>)
        2    0.000    0.000    0.000    0.000 _aliases.py:116(astype)
        1    0.000    0.000    0.000    0.000 _polyutils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 domainscalar.py:17(DomainScalar)
        1    0.000    0.000    0.000    0.000 context.py:270(raises)
       20    0.000    0.000    0.000    0.000 _parser.py:160(__delitem__)
        4    0.000    0.000    0.000    0.000 serialization.py:90(register_package)
        1    0.000    0.000    0.000    0.000 bz2.py:26(BZ2File)
        1    0.000    0.000    0.000    0.000 transforms.py:1080(LockableBbox)
       25    0.000    0.000    0.000    0.000 {method 'discard' of 'set' objects}
       11    0.000    0.000    0.000    0.000 results.py:272(__iter__)
        1    0.000    0.000    0.000    0.000 _vertex.py:165(VertexVectorField)
        1    0.000    0.000    0.000    0.000 _special_locations.py:15(SpecialLocations)
        2    0.000    0.000    0.000    0.000 gzip.py:463(_init_read)
        1    0.000    0.000    0.000    0.000 numpy.py:503(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _testutils.py:138(_TestPythranFunc)
        1    0.000    0.000    0.000    0.000 _genz_malik.py:11(GenzMalikCubature)
        1    0.000    0.000    0.000    0.000 special.py:75(__new__)
        6    0.000    0.000    0.000    0.000 six.py:131(__init__)
        5    0.000    0.000    0.000    0.000 _compression.py:12(_check_not_closed)
        1    0.000    0.000    0.000    0.000 wannier90.py:24(Unk)
        1    0.000    0.000    0.000    0.000 ideals.py:7(Ideal)
        1    0.000    0.000    0.000    0.000 linear.py:67(Linear)
        1    0.000    0.000    0.000    0.000 sparse.py:49(EmbeddingBag)
        1    0.000    0.000    0.000    0.000 profiler_util.py:385(FunctionEvent)
        1    0.000    0.000    0.000    0.000 textplot.py:1(<module>)
        1    0.000    0.000    0.000    0.000 adaptive.py:19(AdaptiveLogSoftmaxWithLoss)
        5    0.000    0.000    0.000    0.000 rszeta.py:54(__init__)
        1    0.000    0.000    0.000    0.000 sysconfig.py:456(_get_sysconfigdata_name)
        1    0.000    0.000    0.000    0.000 _binary.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _globals.py:17(_InternalGlobals)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2342(_median_icdf)
        1    0.000    0.000    0.000    0.000 assume.py:224(Predicate)
        1    0.000    0.000    0.000    0.000 unary.py:75(<listcomp>)
        1    0.000    0.000    0.000    0.000 error_functions.py:1502(li)
        1    0.000    0.000    0.000    0.000 binrel.py:15(BinaryRelation)
        1    0.000    0.000    0.000    0.000 modules.py:204(Module)
        1    0.000    0.000    0.000    0.000 hyper.py:391(meijerg)
        1    0.000    0.000    0.000    0.000 __init__.py:283(SymFloat)
        3    0.000    0.000    0.000    0.000 bz2.py:135(readable)
        3    0.000    0.000    0.000    0.000 __init__.py:590(_discover_resolvers)
        2    0.000    0.000    0.000    0.000 <frozen _collections_abc>:262(__subclasshook__)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2461(_pdf_dispatch)
        1    0.000    0.000    0.000    0.000 _namedtensor_internals.py:1(<module>)
        1    0.000    0.000    0.000    0.000 activation.py:175(Hardtanh)
       32    0.000    0.000    0.000    0.000 expr.py:185(_hashable_content)
        1    0.000    0.000    0.000    0.000 tensor.py:1695(TensorHead)
        3    0.000    0.000    0.000    0.000 arrayprint.py:1415(dtype_is_implied)
        1    0.000    0.000    0.000    0.000 __init__.py:909(LongStorage)
        1    0.000    0.000    0.000    0.000 hyper.py:90(hyper)
        1    0.000    0.000    0.000    0.000 zipfile.py:2290(Path)
       21    0.000    0.000    0.000    0.000 symbolic_opset9.py:298(_export)
        1    0.000    0.000    0.000    0.000 selectors.py:80(BaseSelector)
        1    0.000    0.000    0.000    0.000 series.py:1861(SurfaceOver2DRangeSeries)
        1    0.000    0.000    0.000    0.000 <frozen genericpath>:39(isdir)
        1    0.000    0.000    0.000    0.000 rnn.py:334(LSTM)
        1    0.000    0.000    0.000    0.000 upsampling.py:168(UpsamplingNearest2d)
        6    0.000    0.000    0.000    0.000 _version.py:62(<listcomp>)
        1    0.000    0.000    0.000    0.000 profiler_util.py:352(FormattedTimesMixin)
        1    0.000    0.000    0.000    0.000 _netcdf.py:98(netcdf_file)
        1    0.000    0.000    0.000    0.000 pydoc.py:525(__init__)
        8    0.000    0.000    0.000    0.000 __init__.py:463(_asdict)
        1    0.000    0.000    0.000    0.000 nadam.py:10(NAdam)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:382(PngStream)
        1    0.000    0.000    0.000    0.000 units.py:277(FloatWithUnit)
        1    0.000    0.000    0.000    0.000 matexpr.py:739(_LeftRightArgs)
        2    0.000    0.000    0.000    0.000 reprlib.py:12(decorating_function)
        3    0.000    0.000    0.000    0.000 {method 'clear' of 'collections.OrderedDict' objects}
        1    0.000    0.000    0.000    0.000 spectral_norm.py:12(SpectralNorm)
        1    0.000    0.000    0.000    0.000 sets.py:1496(Intersection)
        1    0.000    0.000    0.000    0.000 conv.py:617(_ConvTransposeNd)
        1    0.000    0.000    0.000    0.000 _multivariate.py:295(multivariate_normal_gen)
        1    0.000    0.000    0.000    0.000 contour.py:48(ContourLabeler)
        1    0.000    0.000    0.000    0.000 version.py:280(LooseVersion)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2349(_mode_dispatch)
       10    0.000    0.000    0.000    0.000 rcsetup.py:765(_validate_greaterequal0_lessthan1)
        1    0.000    0.000    0.000    0.000 cnf.py:270(CNF)
        1    0.000    0.000    0.000    0.000 polyquinticconst.py:22(PolyQuintic)
        1    0.000    0.000    0.000    0.000 _resampling.py:2175(PermutationMethod)
        1    0.000    0.000    0.000    0.000 proxy.py:455(Attribute)
        1    0.000    0.000    0.000    0.000 formatting.py:112(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _log.py:1(<module>)
        1    0.000    0.000    0.000    0.000 main.py:56(TestProgram)
       31    0.000    0.000    0.000    0.000 singleton.py:192(<lambda>)
        5    0.000    0.000    0.000    0.000 decorator.py:152(<listcomp>)
       23    0.000    0.000    0.000    0.000 _support_alternative_backends.py:35(name)
       70    0.000    0.000    0.000    0.000 _jit_internal.py:1091(__getitem__)
        1    0.000    0.000    0.000    0.000 summations.py:42(Sum)
        1    0.000    0.000    0.000    0.000 tight_binding_hamiltonian.py:18(TBHamiltonian)
       20    0.000    0.000    0.000    0.000 inverselaplace.py:17(__init__)
        1    0.000    0.000    0.000    0.000 process.py:399(__init__)
       10    0.000    0.000    0.000    0.000 bz2.py:121(closed)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4981(invgauss_gen)
        1    0.000    0.000    0.000    0.000 core.py:6540(MaskedConstant)
        8    0.000    0.000    0.000    0.000 relativedelta.py:13(<genexpr>)
        1    0.000    0.000    0.000    0.000 _trace.py:1202(TopLevelTracedModule)
        5    0.000    0.000    0.000    0.000 pretty_symbology.py:172(<lambda>)
        1    0.000    0.000    0.000    0.000 numpy.py:480(<dictcomp>)
        1    0.000    0.000    0.000    0.000 tensor.py:1392(TensorSymmetry)
       16    0.000    0.000    0.000    0.000 _pep440.py:301(<genexpr>)
        1    0.000    0.000    0.000    0.000 fglmtools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 modules.py:840(Submodule)
        2    0.000    0.000    0.000    0.000 _helpers.py:305(_compat_module_name)
        1    0.000    0.000    0.000    0.000 integrals.py:35(Integral)
       10    0.000    0.000    0.000    0.000 _policybase.py:104(<genexpr>)
        1    0.000    0.000    0.000    0.000 wavelets.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _layoutbox.py:46(LayoutBox)
        5    0.000    0.000    0.000    0.000 datapipe.py:265(register_datapipe_as_function)
        1    0.000    0.000    0.000    0.000 comments.py:273(CommentedBase)
        1    0.000    0.000    0.000    0.000 rootoftools.py:1101(RootSum)
        1    0.000    0.000    0.000    0.000 _builtins.py:120(<setcomp>)
        1    0.000    0.000    0.000    0.000 axis.py:2253(YAxis)
        2    0.000    0.000    0.000    0.000 {built-in method _sqlite3.register_adapter}
        1    0.000    0.000    0.000    0.000 transforms.py:1098(StackTransform)
        1    0.000    0.000    0.000    0.000 quasirandom.py:5(SobolEngine)
        2    0.000    0.000    0.000    0.000 typing.py:3089(__init__)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:117(<listcomp>)
        1    0.000    0.000    0.000    0.000 periodic_table.py:1413(DummySpecies)
        1    0.000    0.000    0.000    0.000 _text_layout.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _header_value_parser.py:876(__new__)
        1    0.000    0.000    0.000    0.000 series.py:2180(ImplicitSeries)
       15    0.000    0.000    0.000    0.000 arrayprint.py:993(<genexpr>)
        1    0.000    0.000    0.000    0.000 stats.py:1(<module>)
        1    0.000    0.000    0.000    0.000 compositedomain.py:9(CompositeDomain)
        2    0.000    0.000    0.000    0.000 {built-in method _struct.unpack}
        3    0.000    0.000    0.000    0.000 legend_handler.py:212(__init__)
        2    0.000    0.000    0.000    0.000 _functools.py:6(method_cache)
        1    0.000    0.000    0.000    0.000 __init__.py:236(SymInt)
        9    0.000    0.000    0.000    0.000 typing_extensions.py:712(__eq__)
        1    0.000    0.000    0.000    0.000 transforms.py:1827(Affine2D)
        1    0.000    0.000    0.000    0.000 Image.py:3915(Exif)
        1    0.000    0.000    0.000    0.000 constructor.py:664(Constructor)
        1    0.000    0.000    0.000    0.000 sets.py:1947(FiniteSet)
        1    0.000    0.000    0.000    0.000 rational.py:24(mpq)
        1    0.000    0.000    0.000    0.000 fake_quantize.py:290(FusedMovingAvgObsFakeQuantize)
        1    0.000    0.000    0.000    0.000 conv.py:39(Conv1d)
        1    0.000    0.000    0.000    0.000 kind.py:64(__new__)
        1    0.000    0.000    0.000    0.000 polyoptions.py:18(Option)
        1    0.000    0.000    0.000    0.000 tokens.py:13(Token)
        1    0.000    0.000    0.000    0.000 numbers.py:147(Real)
        1    0.000    0.000    0.000    0.000 patches.py:1824(_simpleprint_styles)
        3    0.000    0.000    0.000    0.000 rcsetup.py:459(_validate_mathtext_fallback)
        1    0.000    0.000    0.000    0.000 report.py:3(ReportBase)
        1    0.000    0.000    0.000    0.000 ordinals.py:273(__new__)
        1    0.000    0.000    0.000    0.000 __init__.py:165(<listcomp>)
        1    0.000    0.000    0.000    0.000 laplace.py:9(Laplace)
        1    0.000    0.000    0.000    0.000 functions.py:3(SpecialFunctions)
        1    0.000    0.000    0.000    0.000 transforms.py:41(Transform)
        1    0.000    0.000    0.000    0.000 rnn.py:1000(LSTMCell)
        1    0.000    0.000    0.000    0.000 _inspect.py:1(<module>)
        1    0.000    0.000    0.000    0.000 gmpyintegerring.py:14(GMPYIntegerRing)
        1    0.000    0.000    0.000    0.000 profiler.py:59(profile)
        5    0.000    0.000    0.000    0.000 pretty_symbology.py:176(<lambda>)
        1    0.000    0.000    0.000    0.000 linear_relu.py:12(LinearReLU)
        5    0.000    0.000    0.000    0.000 {method 'write' of '_io.StringIO' objects}
        1    0.000    0.000    0.000    0.000 complexes.py:446(Abs)
        2    0.000    0.000    0.000    0.000 {built-in method numpy.core._multiarray_umath.normalize_axis_index}
        1    0.000    0.000    0.000    0.000 sparse.py:21(SparseRepMatrix)
        1    0.000    0.000    0.000    0.000 offsetbox.py:179(OffsetBox)
        1    0.000    0.000    0.000    0.000 operator_support.py:27(OperatorSupportBase)
        1    0.000    0.000    0.000    0.000 constructor.py:348(SafeConstructor)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1879(validation_policy)
        1    0.000    0.000    0.000    0.000 _ltisys.py:299(dlti)
        1    0.000    0.000    0.000    0.000 traceback.py:636(TracebackException)
        1    0.000    0.000    0.000    0.000 conv.py:588(_ConvTransposeNd)
        1    0.000    0.000    0.000    0.000 polygon.py:2053(Triangle)
        1    0.000    0.000    0.000    0.000 free_groups.py:114(FreeGroup)
        1    0.000    0.000    0.000    0.000 core.py:1315(_replace_dtype_fields)
        1    0.000    0.000    0.000    0.000 ticker.py:468(ScalarFormatter)
        4    0.000    0.000    0.000    0.000 core.py:5236(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 interval_arithmetic.py:42(interval)
        2    0.000    0.000    0.000    0.000 sysconfig.py:299(get_preferred_scheme)
        2    0.000    0.000    0.000    0.000 kind.py:266(register)
        1    0.000    0.000    0.000    0.000 sdm.py:186(new)
        1    0.000    0.000    0.000    0.000 ctx_iv.py:38(ivmpf)
        1    0.000    0.000    0.000    0.000 studentT.py:11(StudentT)
        1    0.000    0.000    0.000    0.000 one_hot_categorical.py:8(OneHotCategorical)
        1    0.000    0.000    0.000    0.000 six.py:498(Module_six_moves_urllib)
        5    0.000    0.000    0.000    0.000 typing.py:2191(runtime_checkable)
        2    0.000    0.000    0.000    0.000 reprlib.py:38(__init__)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:73(UnivariateSpline)
        1    0.000    0.000    0.000    0.000 readers.py:53(MultiplexedPath)
        2    0.000    0.000    0.000    0.000 results.py:462(<listcomp>)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1364(<listcomp>)
       21    0.000    0.000    0.000    0.000 _script.py:940(_make_fail)
       23    0.000    0.000    0.000    0.000 overrides.py:173(array_function_from_dispatcher)
        1    0.000    0.000    0.000    0.000 _ltisys.py:46(LinearTimeInvariant)
        1    0.000    0.000    0.000    0.000 error_functions.py:674(erf2)
        2    0.000    0.000    0.000    0.000 __init__.py:2356(_backend_module_name)
        1    0.000    0.000    0.000    0.000 _imp.py:1(<module>)
        1    0.000    0.000    0.000    0.000 depends.py:20(Require)
        2    0.000    0.000    0.000    0.000 decorator.py:319(wrapper)
        1    0.000    0.000    0.000    0.000 modules.py:698(PowerBasis)
        1    0.000    0.000    0.000    0.000 series.py:989(Line2DBaseSeries)
       15    0.000    0.000    0.000    0.000 libelefun.py:106(def_mpf_constant)
        1    0.000    0.000    0.000    0.000 _multivariate.py:1897(wishart_gen)
        1    0.000    0.000    0.000    0.000 {built-in method numpy.core._multiarray_umath.set_typeDict}
        1    0.000    0.000    0.000    0.000 rcsetup.py:1407(<listcomp>)
        1    0.000    0.000    0.000    0.000 lambdarepr.py:75(NumExprPrinter)
        1    0.000    0.000    0.000    0.000 data.py:1(<module>)
        1    0.000    0.000    0.000    0.000 decorator.py:65(FunctionMaker)
        2    0.000    0.000    0.000    0.000 _parser.py:1006(addgroup)
       15    0.000    0.000    0.000    0.000 math2.py:27(_mathfun_real)
        6    0.000    0.000    0.000    0.000 _exceptions.py:17(_display_as_base)
       41    0.000    0.000    0.000    0.000 numbers.py:438(class_key)
        1    0.000    0.000    0.000    0.000 cpp_backtrace.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pycode.py:707(<listcomp>)
        1    0.000    0.000    0.000    0.000 random.py:235(_randbelow_with_getrandbits)
        1    0.000    0.000    0.000    0.000 group_constructs.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sympy_parser.py:1105(EvaluateFalseTransformer)
        1    0.000    0.000    0.000    0.000 _netcdf.py:811(netcdf_variable)
        1    0.000    0.000    0.000    0.000 ast.py:65(_raise_malformed_node)
        1    0.000    0.000    0.000    0.000 conv.py:232(ConvTranspose2d)
        1    0.000    0.000    0.000    0.000 tempfile.py:840(TemporaryDirectory)
        1    0.000    0.000    0.000    0.000 outputs.py:5666(Waveder)
        1    0.000    0.000    0.000    0.000 _add_newdocs_scalars.py:54(_get_platform_and_machine)
       24    0.000    0.000    0.000    0.000 dviread.py:135(_dispatch)
        1    0.000    0.000    0.000    0.000 _base.py:325(Future)
        1    0.000    0.000    0.000    0.000 __init__.py:1792(__init__)
        1    0.000    0.000    0.000    0.000 outputs.py:4448(Oszicar)
        1    0.000    0.000    0.000    0.000 bandstructure.py:157(BandStructure)
        1    0.000    0.000    0.000    0.000 rootisolation.py:1881(ComplexInterval)
        1    0.000    0.000    0.000    0.000 fancysets.py:291(ImageSet)
        1    0.000    0.000    0.000    0.000 factorials.py:36(factorial)
        4    0.000    0.000    0.000    0.000 libmpf.py:1313(from_str)
        1    0.000    0.000    0.000    0.000 sequences.py:726(RecursiveSeq)
       24    0.000    0.000    0.000    0.000 expr.py:2053(as_base_exp)
        1    0.000    0.000    0.000    0.000 _infra.py:309(DiagnosticOptions)
        1    0.000    0.000    0.000    0.000 _kdtree.py:287(node)
        1    0.000    0.000    0.000    0.000 computed_entries.py:47(EnergyAdjustment)
        4    0.000    0.000    0.000    0.000 __init__.py:798(__init__)
        1    0.000    0.000    0.000    0.000 mstats_extras.py:1(<module>)
       17    0.000    0.000    0.000    0.000 ctx_fp.py:28(<lambda>)
        1    0.000    0.000    0.000    0.000 complexes.py:265(sign)
        1    0.000    0.000    0.000    0.000 exprtools.py:288(Factors)
        1    0.000    0.000    0.000    0.000 _lambertw.py:1(<module>)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:996(ReciprocalHyperbolicFunction)
        2    0.000    0.000    0.000    0.000 _aliases.py:51(empty_like)
        1    0.000    0.000    0.000    0.000 _helpers.py:487(_AutoJITWrapper)
        1    0.000    0.000    0.000    0.000 assume.py:358(UndefinedPredicate)
        1    0.000    0.000    0.000    0.000 _matfuncs.py:337(_ExpmPadeHelper)
        1    0.000    0.000    0.000    0.000 case.py:243(_AssertRaisesContext)
        1    0.000    0.000    0.000    0.000 _nonlin.py:615(LowRankMatrix)
       14    0.000    0.000    0.000    0.000 mock.py:1936(<genexpr>)
        1    0.000    0.000    0.000    0.000 _aliases.py:536(floor)
        1    0.000    0.000    0.000    0.000 embedding_ops.py:11(EmbeddingPackedParams)
        1    0.000    0.000    0.000    0.000 observer.py:383(MinMaxObserver)
        1    0.000    0.000    0.000    0.000 axis.py:30(<listcomp>)
        1    0.000    0.000    0.000    0.000 _ltisys.py:879(ZerosPolesGain)
        1    0.000    0.000    0.000    0.000 heuristicgcd.py:1(<module>)
        2    0.000    0.000    0.000    0.000 domain.py:846(__eq__)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1612(<dictcomp>)
        1    0.000    0.000    0.000    0.000 loader.py:66(TestLoader)
       17    0.000    0.000    0.000    0.000 __init__.py:190(change_key)
        1    0.000    0.000    0.000    0.000 factor_.py:700(__init__)
        1    0.000    0.000    0.000    0.000 numpy.py:348(SciPyPrinter)
        1    0.000    0.000    0.000    0.000 {built-in method math.exp}
        1    0.000    0.000    0.000    0.000 rnn.py:261(LSTM)
        1    0.000    0.000    0.000    0.000 types.py:39(Storage)
        1    0.000    0.000    0.000    0.000 base_subprocess.py:10(BaseSubprocessTransport)
        8    0.000    0.000    0.000    0.000 {method 'removeprefix' of 'str' objects}
        1    0.000    0.000    0.000    0.000 _fortran_format_parser.py:36(IntFormat)
        1    0.000    0.000    0.000    0.000 annotations.py:41(EvalEnv)
        1    0.000    0.000    0.000    0.000 _ni_support.py:1(<module>)
        1    0.000    0.000    0.000    0.000 repmatrix.py:555(MutableRepMatrix)
        1    0.000    0.000    0.000    0.000 six.py:236(create_module)
        1    0.000    0.000    0.000    0.000 lkj_cholesky.py:19(LKJCholesky)
        2    0.000    0.000    0.000    0.000 __init__.py:1646(addHandler)
       13    0.000    0.000    0.000    0.000 utils.py:34(exposed_in)
        1    0.000    0.000    0.000    0.000 constructor.py:932(RoundTripConstructor)
        1    0.000    0.000    0.000    0.000 rnn.py:163(_LSTMLayer)
        1    0.000    0.000    0.000    0.000 mathml.py:84(MathMLContentPrinter)
        1    0.000    0.000    0.000    0.000 gmpyrationalfield.py:12(GMPYRationalField)
        1    0.000    0.000    0.000    0.000 conv_fused.py:25(_ConvBnNd)
        1    0.000    0.000    0.000    0.000 observer.py:124(ObserverBase)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:12328(rel_breitwigner_gen)
       15    0.000    0.000    0.000    0.000 _jit_internal.py:747(_copy_to_script_wrapper)
        1    0.000    0.000    0.000    0.000 ElementTree.py:125(Element)
        1    0.000    0.000    0.000    0.000 distance.py:1990(<dictcomp>)
        3    0.000    0.000    0.000    0.000 six.py:85(_import_module)
        1    0.000    0.000    0.000    0.000 half_normal.py:12(HalfNormal)
        1    0.000    0.000    0.000    0.000 num.py:1(<module>)
        1    0.000    0.000    0.000    0.000 outputs.py:4596(Xdatcar)
        5    0.000    0.000    0.000    0.000 __init__.py:20(is_available)
        1    0.000    0.000    0.000    0.000 {built-in method math.log2}
        1    0.000    0.000    0.000    0.000 fields.py:103(FracField)
        3    0.000    0.000    0.000    0.000 ctx_mp_python.py:607(default)
        6    0.000    0.000    0.000    0.000 signal.py:49(decorator)
        1    0.000    0.000    0.000    0.000 byteordercodes.py:1(<module>)
        1    0.000    0.000    0.000    0.000 containers.py:219(Dict)
        1    0.000    0.000    0.000    0.000 __init__.py:545(Stack)
        1    0.000    0.000    0.000    0.000 ctx_iv.py:145(__neg__)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:3161(rv_discrete)
        1    0.000    0.000    0.000    0.000 __init__.py:959(FloatStorage)
        2    0.000    0.000    0.000    0.000 {built-in method posix.getcwd}
        3    0.000    0.000    0.000    0.000 __init__.py:42(__init__)
       20    0.000    0.000    0.000    0.000 core.py:3915(recurse)
        1    0.000    0.000    0.000    0.000 adadelta.py:12(Adadelta)
       21    0.000    0.000    0.000    0.000 multiarray.py:153(concatenate)
        1    0.000    0.000    0.000    0.000 serializer.py:33(Serializer)
        1    0.000    0.000    0.000    0.000 more.py:3665(callback_iter)
        1    0.000    0.000    0.000    0.000 tz.py:1545(__init__)
        1    0.000    0.000    0.000    0.000 overrides.py:1786(TorchFunctionMode)
        1    0.000    0.000    0.000    0.000 join.py:43(Joinable)
        2    0.000    0.000    0.000    0.000 _distn_infrastructure.py:841(<genexpr>)
        1    0.000    0.000    0.000    0.000 base_events.py:274(Server)
        1    0.000    0.000    0.000    0.000 sets.py:1319(Union)
        1    0.000    0.000    0.000    0.000 quiver.py:904(Barbs)
        1    0.000    0.000    0.000    0.000 __init__.py:949(DoubleStorage)
        1    0.000    0.000    0.000    0.000 bonds.py:58(CovalentBond)
        1    0.000    0.000    0.000    0.000 _threadsafety.py:25(__init__)
        1    0.000    0.000    0.000    0.000 widgets.py:1893(RectangleSelector)
        1    0.000    0.000    0.000    0.000 __init__.py:1067(StreamHandler)
        6    0.000    0.000    0.000    0.000 _parser.py:286(seek)
        2    0.000    0.000    0.000    0.000 <frozen posixpath>:100(split)
       22    0.000    0.000    0.000    0.000 reductions.py:123(_torch_grad_reduce)
        1    0.000    0.000    0.000    0.000 _infra.py:266(RuleCollection)
        6    0.000    0.000    0.000    0.000 __init__.py:784(__new__)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:11322(wrapcauchy_gen)
        1    0.000    0.000    0.000    0.000 _disjoint_set.py:6(DisjointSet)
        4    0.000    0.000    0.000    0.000 {method '__exit__' of 'numpy.nditer' objects}
        1    0.000    0.000    0.000    0.000 creation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:219(__enter__)
        1    0.000    0.000    0.000    0.000 zipfile.py:344(ZipInfo)
        9    0.000    0.000    0.000    0.000 core.py:4246(<genexpr>)
        2    0.000    0.000    0.000    0.000 math2.py:53(_mathfun_n)
        1    0.000    0.000    0.000    0.000 gzip.py:121(GzipFile)
        1    0.000    0.000    0.000    0.000 special_matrices.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _ccallback.py:26(LowLevelCallable)
        1    0.000    0.000    0.000    0.000 single.py:211(SingleODESolver)
       29    0.000    0.000    0.000    0.000 {method 'groupdict' of 're.Match' objects}
        1    0.000    0.000    0.000    0.000 fields.py:292(FracElement)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:190(_Domain)
        1    0.000    0.000    0.000    0.000 _storage_docs.py:12(add_docstr_all)
        1    0.000    0.000    0.000    0.000 glob.py:31(iglob)
        1    0.000    0.000    0.000    0.000 core.py:51(InputFile)
        1    0.000    0.000    0.000    0.000 __init__.py:37(cuFFTPlanCache)
        1    0.000    0.000    0.000    0.000 gamma_functions.py:1060(digamma)
        8    0.000    0.000    0.000    0.000 core.py:5113(stopOn)
        1    0.000    0.000    0.000    0.000 indexed.py:362(IndexedBase)
        1    0.000    0.000    0.000    0.000 tz.py:386(tzfile)
        1    0.000    0.000    0.000    0.000 __init__.py:273(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:282(nbinom_gen)
        3    0.000    0.000    0.000    0.000 mock.py:298(__getattr__)
        1    0.000    0.000    0.000    0.000 _atfork.py:1(<module>)
        1    0.000    0.000    0.000    0.000 rnn.py:1159(LSTMCell)
        1    0.000    0.000    0.000    0.000 facts.py:75(transitive_closure)
        1    0.000    0.000    0.000    0.000 __init__.py:83(OptEinsumModule)
        1    0.000    0.000    0.000    0.000 cauchy.py:12(Cauchy)
        1    0.000    0.000    0.000    0.000 quopri.py:1(<module>)
        1    0.000    0.000    0.000    0.000 miobase.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:104(CallbackRegistry)
        1    0.000    0.000    0.000    0.000 std.py:67(TRLock)
        1    0.000    0.000    0.000    0.000 reduction.py:33(ForkingPickler)
        1    0.000    0.000    0.000    0.000 _interpolate.py:1836(NdPPoly)
        1    0.000    0.000    0.000    0.000 numbers.py:4083(ImaginaryUnit)
        9    0.000    0.000    0.000    0.000 fontconfig_pattern.py:151(<listcomp>)
        1    0.000    0.000    0.000    0.000 _aliases.py:665(finfo)
        1    0.000    0.000    0.000    0.000 pooling.py:564(AvgPool2d)
        1    0.000    0.000    0.000    0.000 {built-in method posix.confstr}
       15    0.000    0.000    0.000    0.000 serialization.py:59(<genexpr>)
        1    0.000    0.000    0.000    0.000 backend_bases.py:3460(_Backend)
        1    0.000    0.000    0.000    0.000 __init__.py:33(Entry)
        1    0.000    0.000    0.000    0.000 integers.py:496(frac)
        1    0.000    0.000    0.000    0.000 functional_modules.py:9(FloatFunctional)
        1    0.000    0.000    0.000    0.000 conv.py:856(ConvTranspose3d)
       25    0.000    0.000    0.000    0.000 symbolic_helper.py:664(_block_list_in_opset)
        1    0.000    0.000    0.000    0.000 numpy.py:34(<dictcomp>)
        1    0.000    0.000    0.000    0.000 matrix_element.py:5(Matrix_Ele)
        7    0.000    0.000    0.000    0.000 _nonlin.py:1599(<listcomp>)
        1    0.000    0.000    0.000    0.000 profiler_legacy.py:18(profile)
       13    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:808(<dictcomp>)
        2    0.000    0.000    0.000    0.000 {method 'difference_update' of 'set' objects}
        1    0.000    0.000    0.000    0.000 comments.py:1089(CommentedSet)
        1    0.000    0.000    0.000    0.000 discovery.py:132(PackageFinder)
        1    0.000    0.000    0.000    0.000 textpath.py:336(TextPath)
       26    0.000    0.000    0.000    0.000 core.py:4415(<genexpr>)
        1    0.000    0.000    0.000    0.000 _covariance.py:463(CovViaPrecision)
        2    0.000    0.000    0.000    0.000 six.py:119(_resolve)
        8    0.000    0.000    0.000    0.000 version.py:207(<genexpr>)
        1    0.000    0.000    0.000    0.000 adamw.py:12(AdamW)
        1    0.000    0.000    0.000    0.000 _censored_data.py:60(CensoredData)
       12    0.000    0.000    0.000    0.000 rcsetup.py:424(validate_fontweight)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:30(binom_gen)
        1    0.000    0.000    0.000    0.000 graph_module.py:230(_WrappedCall)
        1    0.000    0.000    0.000    0.000 pyprojecttoml.py:172(_ConfigExpander)
        1    0.000    0.000    0.000    0.000 util.py:15(__config_flags)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1257(burr12_gen)
        1    0.000    0.000    0.000    0.000 sgd.py:10(SGD)
        1    0.000    0.000    0.000    0.000 figure.py:47(_AxesStack)
        1    0.000    0.000    0.000    0.000 common.py:32(VolumetricData)
        2    0.000    0.000    0.000    0.000 numerictypes.py:229(obj2sctype)
        1    0.000    0.000    0.000    0.000 radam.py:13(RAdam)
        1    0.000    0.000    0.000    0.000 numbers.py:1204(catalan)
        1    0.000    0.000    0.000    0.000 mio5_utils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 error_functions.py:1092(Ei)
        1    0.000    0.000    0.000    0.000 threading.py:236(__init__)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2498(_pmf_dispatch)
        1    0.000    0.000    0.000    0.000 beta.py:11(Beta)
        2    0.000    0.000    0.000    0.000 _jit_internal.py:576(unused)
       18    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1761(<genexpr>)
        1    0.000    0.000    0.000    0.000 mathtext.py:1444(Char)
        1    0.000    0.000    0.000    0.000 __init__.py:873(Handler)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:1632(TypeVar)
       11    0.000    0.000    0.000    0.000 ctx_iv.py:293(__new__)
        1    0.000    0.000    0.000    0.000 error.py:35(HTTPError)
        1    0.000    0.000    0.000    0.000 lzma.py:38(LZMAFile)
        1    0.000    0.000    0.000    0.000 bdist.py:37(ListCompat)
        2    0.000    0.000    0.000    0.000 Files_in.py:4(__init__)
        1    0.000    0.000    0.000    0.000 functional_modules.py:82(FXFloatFunctional)
        1    0.000    0.000    0.000    0.000 locks.py:446(Barrier)
        1    0.000    0.000    0.000    0.000 unix_events.py:57(_UnixSelectorEventLoop)
        1    0.000    0.000    0.000    0.000 utilities.py:8(__init__)
        2    0.000    0.000    0.000    0.000 matfuncs.py:1(<module>)
        1    0.000    0.000    0.000    0.000 band.py:17(__init__)
        1    0.000    0.000    0.000    0.000 bessel.py:438(besseli)
        1    0.000    0.000    0.000    0.000 upsampling.py:213(UpsamplingBilinear2d)
       21    0.000    0.000    0.000    0.000 _codata.py:2121(_check_obsolete)
        1    0.000    0.000    0.000    0.000 _index.py:25(IndexMixin)
        1    0.000    0.000    0.000    0.000 fishersnedecor.py:11(FisherSnedecor)
        1    0.000    0.000    0.000    0.000 tensor.py:815(_comm_init)
        1    0.000    0.000    0.000    0.000 expressiondomain.py:21(Expression)
        3    0.000    0.000    0.000    0.000 __init__.py:753(path)
        1    0.000    0.000    0.000    0.000 Orbit.py:2(orbit)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3621(DiscreteDistribution)
        1    0.000    0.000    0.000    0.000 lambdify.py:1123(_EvaluatorPrinter)
       12    0.000    0.000    0.000    0.000 {method 'islower' of 'str' objects}
        1    0.000    0.000    0.000    0.000 transforms.py:80(TransformNode)
        1    0.000    0.000    0.000    0.000 qconfig_mapping.py:157(QConfigMapping)
        1    0.000    0.000    0.000    0.000 dfm.py:18(DFM_dummy)
        1    0.000    0.000    0.000    0.000 rrule.py:1418(_rrulestr)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha224}
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:10191(truncnorm_gen)
        1    0.000    0.000    0.000    0.000 comments.py:467(CommentedSeq)
        1    0.000    0.000    0.000    0.000 __init__.py:855(_CudaLegacyStorage)
        1    0.000    0.000    0.000    0.000 polar.py:17(PolarTransform)
        1    0.000    0.000    0.000    0.000 pathlib.py:128(<setcomp>)
        1    0.000    0.000    0.000    0.000 __init__.py:71(MkldnnModule)
        1    0.000    0.000    0.000    0.000 backend_tools.py:40(ToolBase)
        1    0.000    0.000    0.000    0.000 _ufunc_config.py:441(_setdef)
        1    0.000    0.000    0.000    0.000 _aliases.py:24(arange)
        1    0.000    0.000    0.000    0.000 _ndbspline.py:26(NdBSpline)
       27    0.000    0.000    0.000    0.000 singleton.py:152(__repr__)
        1    0.000    0.000    0.000    0.000 _ops.py:589(__init__)
        1    0.000    0.000    0.000    0.000 _differentiable_functions.py:119(ScalarFunction)
        1    0.000    0.000    0.000    0.000 conv.py:82(Conv2d)
        1    0.000    0.000    0.000    0.000 __init__.py:531(Formatter)
        1    0.000    0.000    0.000    0.000 proj3d.py:1(<module>)
        1    0.000    0.000    0.000    0.000 idl.py:1(<module>)
        1    0.000    0.000    0.000    0.000 axis3d.py:470(XAxis)
        1    0.000    0.000    0.000    0.000 Image.py:3765(register_extensions)
        1    0.000    0.000    0.000    0.000 fromnumeric.py:588(transpose)
        1    0.000    0.000    0.000    0.000 _infra.py:55(Rule)
        1    0.000    0.000    0.000    0.000 connection.py:431(Listener)
        1    0.000    0.000    0.000    0.000 extract.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:1432(Logger)
       35    0.000    0.000    0.000    0.000 core.py:1967(recurse)
        1    0.000    0.000    0.000    0.000 numbers.py:2771(Zero)
        1    0.000    0.000    0.000    0.000 gridspec.py:26(GridSpecBase)
        1    0.000    0.000    0.000    0.000 typing.py:1(<module>)
        1    0.000    0.000    0.000    0.000 join.py:88(_JoinConfig)
        1    0.000    0.000    0.000    0.000 dop.py:1(<module>)
       24    0.000    0.000    0.000    0.000 traceback.py:307(__len__)
        1    0.000    0.000    0.000    0.000 __init__.py:439(LibraryLoader)
        1    0.000    0.000    0.000    0.000 linear_fused.py:13(LinearBn1d)
        1    0.000    0.000    0.000    0.000 matplotlib.py:43(MatplotlibBackend)
        1    0.000    0.000    0.000    0.000 streams.py:140(Event)
        1    0.000    0.000    0.000    0.000 __init__.py:989(IntStorage)
        1    0.000    0.000    0.000    0.000 composer.py:31(Composer)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:129(bernoulli_gen)
        1    0.000    0.000    0.000    0.000 rootisolation.py:1728(RealInterval)
        1    0.000    0.000    0.000    0.000 <frozen _collections_abc>:362(__subclasshook__)
        1    0.000    0.000    0.000    0.000 npyio.py:106(NpzFile)
        3    0.000    0.000    0.000    0.000 __init__.py:7(is_available)
        3    0.000    0.000    0.000    0.000 message.py:330(set_payload)
        1    0.000    0.000    0.000    0.000 padding.py:15(_ConstantPadNd)
        1    0.000    0.000    0.000    0.000 internal.py:30(_InternalRPCPickler)
        1    0.000    0.000    0.000    0.000 file_structure_representation.py:9(Directory)
        1    0.000    0.000    0.000    0.000 dataframes.py:60(Capture)
        1    0.000    0.000    0.000    0.000 _type_aliases.py:41(<setcomp>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1595(chi2_gen)
        1    0.000    0.000    0.000    0.000 trsock.py:4(TransportSocket)
       22    0.000    0.000    0.000    0.000 symbol.py:799(<genexpr>)
        1    0.000    0.000    0.000    0.000 _ops.py:238(OpOverload)
        1    0.000    0.000    0.000    0.000 units.py:153(DecimalConverter)
        3    0.000    0.000    0.000    0.000 arrayprint.py:72(<dictcomp>)
        1    0.000    0.000    0.000    0.000 util.py:103(__init__)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:8859(powerlognorm_gen)
        1    0.000    0.000    0.000    0.000 __init__.py:979(LongStorage)
        1    0.000    0.000    0.000    0.000 __init__.py:1039(ComplexDoubleStorage)
        1    0.000    0.000    0.000    0.000 _data.py:168(_minmax_mixin)
        1    0.000    0.000    0.000    0.000 sputils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1824(dpareto_lognorm_gen)
        1    0.000    0.000    0.000    0.000 tensor_functions.py:90(KroneckerDelta)
        1    0.000    0.000    0.000    0.000 dos.py:395(FermiDos)
        1    0.000    0.000    0.000    0.000 collections.py:1464(EventCollection)
        1    0.000    0.000    0.000    0.000 pooling.py:643(AvgPool3d)
        1    0.000    0.000    0.000    0.000 tags.py:42(Tag)
        1    0.000    0.000    0.000    0.000 axis.py:553(Ticker)
        1    0.000    0.000    0.000    0.000 structure.py:25(SymmetrizedStructure)
        2    0.000    0.000    0.000    0.000 gzip.py:402(_read_exact)
        1    0.000    0.000    0.000    0.000 weight_norm.py:11(WeightNorm)
        1    0.000    0.000    0.000    0.000 boolalg.py:741(Or)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:11558(crystalball_gen)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1857(cache_policy)
        1    0.000    0.000    0.000    0.000 glob_group.py:7(GlobGroup)
        1    0.000    0.000    0.000    0.000 log_normal.py:8(LogNormal)
        1    0.000    0.000    0.000    0.000 relaxed_categorical.py:11(ExpRelaxedCategorical)
       24    0.000    0.000    0.000    0.000 {method 'squeeze' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.000    0.000 request.py:2139(FancyURLopener)
        1    0.000    0.000    0.000    0.000 spawn.py:39(ProcessExitedException)
       15    0.000    0.000    0.000    0.000 symbolic_opset10.py:64(_apply_params)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2861(truncweibull_min_gen)
        1    0.000    0.000    0.000    0.000 numbers.py:59(carmichael)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:118(<listcomp>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:10074(truncexpon_gen)
        4    0.000    0.000    0.000    0.000 core.py:3536(parseImpl)
        1    0.000    0.000    0.000    0.000 activation.py:14(ReLU6)
        1    0.000    0.000    0.000    0.000 warnings.py:25(SetuptoolsWarning)
        1    0.000    0.000    0.000    0.000 units.py:494(ArrayWithUnit)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:11392(gennorm_gen)
        1    0.000    0.000    0.000    0.000 transforms.py:1203(Transform)
        3    0.000    0.000    0.000    0.000 ctx_mp_python.py:602(make_mpc)
        1    0.000    0.000    0.000    0.000 core.py:5478(_update_ignorer)
        1    0.000    0.000    0.000    0.000 backend_tools.py:394(ToolQuit)
        1    0.000    0.000    0.000    0.000 _ode.py:843(vode)
        1    0.000    0.000    0.000    0.000 numbers.py:3602(Exp1)
        1    0.000    0.000    0.000    0.000 operator_schemas.py:19(ArgsKwargsPair)
        1    0.000    0.000    0.000    0.000 context.py:206(ExceptionTrap)
        1    0.000    0.000    0.000    0.000 _common.py:127(_TZifHeader)
        3    0.000    0.000    0.000    0.000 rcsetup.py:990(validate_hist_bins)
        1    0.000    0.000    0.000    0.000 rnn.py:135(_LSTMSingleLayer)
        1    0.000    0.000    0.000    0.000 biasedurn.py:1(<module>)
        1    0.000    0.000    0.000    0.000 netcdf.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:191(<listcomp>)
        1    0.000    0.000    0.000    0.000 adagrad.py:12(Adagrad)
        1    0.000    0.000    0.000    0.000 conv.py:10(_ConvNd)
        1    0.000    0.000    0.000    0.000 subprocess.py:469(CompletedProcess)
        1    0.000    0.000    0.000    0.000 transforms.py:1613(TransformWrapper)
        1    0.000    0.000    0.000    0.000 gumbel.py:12(Gumbel)
       16    0.000    0.000    0.000    0.000 _dtype.py:24(_kind_name)
       15    0.000    0.000    0.000    0.000 arrayprint.py:994(<genexpr>)
        1    0.000    0.000    0.000    0.000 representer.py:492(RoundTripRepresenter)
        5    0.000    0.000    0.000    0.000 cache.py:155(cached_property)
        1    0.000    0.000    0.000    0.000 _mannwhitneyu.py:21(_MWU)
        1    0.000    0.000    0.000    0.000 boolalg.py:483(BooleanFunction)
        1    0.000    0.000    0.000    0.000 vode.py:1(<module>)
        1    0.000    0.000    0.000    0.000 numpy.py:345(<dictcomp>)
        4    0.000    0.000    0.000    0.000 pythonmpq.py:194(__neg__)
        1    0.000    0.000    0.000    0.000 unix_events.py:457(_UnixReadPipeTransport)
        1    0.000    0.000    0.000    0.000 _interpolate.py:592(_PPolyBase)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:123(<listcomp>)
        1    0.000    0.000    0.000    0.000 point.py:1073(Point3D)
        1    0.000    0.000    0.000    0.000 textpath.py:24(__init__)
        1    0.000    0.000    0.000    0.000 combining.py:117(_ForkerIterDataPipe)
        1    0.000    0.000    0.000    0.000 series.py:1978(ParametricSurfaceSeries)
       22    0.000    0.000    0.000    0.000 core.py:3595(<genexpr>)
        1    0.000    0.000    0.000    0.000 animation.py:895(Animation)
        1    0.000    0.000    0.000    0.000 functional_modules.py:129(QFunctional)
        1    0.000    0.000    0.000    0.000 gaussiandomains.py:246(GaussianDomain)
       51    0.000    0.000    0.000    0.000 iterables.py:861(key)
       13    0.000    0.000    0.000    0.000 _deprecation.py:8(deprecated)
        1    0.000    0.000    0.000    0.000 _vertex.py:9(VertexBase)
        1    0.000    0.000    0.000    0.000 spline.py:1(<module>)
        1    0.000    0.000    0.000    0.000 linear_relu.py:9(LinearReLU)
        1    0.000    0.000    0.000    0.000 funcmatrix.py:9(FunctionMatrix)
        1    0.000    0.000    0.000    0.000 __init__.py:70(__init__)
        1    0.000    0.000    0.000    0.000 {built-in method numpy._using_numpy2_behavior}
        1    0.000    0.000    0.000    0.000 fancysets.py:1110(ComplexRegion)
        1    0.000    0.000    0.000    0.000 _multivariate.py:2578(invwishart_gen)
        1    0.000    0.000    0.000    0.000 pooling.py:874(_LPPoolNd)
       39    0.000    0.000    0.000    0.000 {built-in method _ctypes.sizeof}
        1    0.000    0.000    0.000    0.000 zipfile.py:782(_Tellable)
        1    0.000    0.000    0.000    0.000 typing.py:1258(__mro_entries__)
        1    0.000    0.000    0.000    0.000 tag.py:20(Tag)
        1    0.000    0.000    0.000    0.000 __init__.py:282(Throttler)
        1    0.000    0.000    0.000    0.000 _interpolate.py:816(PPoly)
        2    0.000    0.000    0.000    0.000 {built-in method posix.unsetenv}
        1    0.000    0.000    0.000    0.000 galois_resolvents.py:47(Resolvent)
        1    0.000    0.000    0.000    0.000 abc.py:131(TraversableResources)
        1    0.000    0.000    0.000    0.000 argparse.py:1708(ArgumentParser)
        1    0.000    0.000    0.000    0.000 batchnorm.py:552(SyncBatchNorm)
        1    0.000    0.000    0.000    0.000 __init__.py:899(HalfStorage)
        2    0.000    0.000    0.000    0.000 constraints.py:126(__call__)
        1    0.000    0.000    0.000    0.000 _iotools.py:229(NameValidator)
        1    0.000    0.000    0.000    0.000 extensions.py:11(ExtensionElement)
        1    0.000    0.000    0.000    0.000 calendar.py:71(_localized_day)
        1    0.000    0.000    0.000    0.000 adamax.py:12(Adamax)
        3    0.000    0.000    0.000    0.000 zipfile.py:1872(close)
        1    0.000    0.000    0.000    0.000 Orbit_spd_without_spin.py:15(orbit_spd_without_spin)
        1    0.000    0.000    0.000    0.000 _infra.py:180(Stack)
        1    0.000    0.000    0.000    0.000 linear.py:11(Linear)
        1    0.000    0.000    0.000    0.000 util.py:182(Finalize)
        1    0.000    0.000    0.000    0.000 modules.py:44(Module)
        1    0.000    0.000    0.000    0.000 conv.py:277(ConvTranspose3d)
        1    0.000    0.000    0.000    0.000 __init__.py:385(check_sparse_tensor_invariants)
        1    0.000    0.000    0.000    0.000 bessel.py:607(besselk)
        1    0.000    0.000    0.000    0.000 bessel.py:36(BesselBase)
        1    0.000    0.000    0.000    0.000 proxy.py:53(ScopeContextManager)
        1    0.000    0.000    0.000    0.000 dataloader.py:684(_MultiProcessingDataLoaderIter)
        1    0.000    0.000    0.000    0.000 core.py:726(Variable)
        1    0.000    0.000    0.000    0.000 hierarchy.py:1074(ClusterNode)
        1    0.000    0.000    0.000    0.000 modules.py:1339(QuotientModule)
       18    0.000    0.000    0.000    0.000 multiarray.py:1080(copyto)
        1    0.000    0.000    0.000    0.000 zipfile.py:802(ZipExtFile)
        1    0.000    0.000    0.000    0.000 maggroups.py:33(MagneticSpaceGroup)
        1    0.000    0.000    0.000    0.000 indexed.py:124(Indexed)
        1    0.000    0.000    0.000    0.000 primes.py:41(PrimeIdeal)
        1    0.000    0.000    0.000    0.000 _tensor_str.py:9(__PrinterOptions)
        2    0.000    0.000    0.000    0.000 _adapters.py:12(__init__)
        1    0.000    0.000    0.000    0.000 pathlib.py:971(absolute)
       10    0.000    0.000    0.000    0.000 __init__.py:318(_wrap_deprecated_method)
        1    0.000    0.000    0.000    0.000 integers.py:21(RoundFunction)
        1    0.000    0.000    0.000    0.000 abc.py:177(InspectLoader)
        1    0.000    0.000    0.000    0.000 delta_functions.py:393(Heaviside)
        4    0.000    0.000    0.000    0.000 libmpf.py:574(mpf_cmp)
        1    0.000    0.000    0.000    0.000 operator_support.py:177(OpSupports)
        1    0.000    0.000    0.000    0.000 _multivariate.py:6257(vonmises_fisher_gen)
        1    0.000    0.000    0.000    0.000 rmsprop.py:11(RMSprop)
        1    0.000    0.000    0.000    0.000 _base.py:174(_process_plot_var_args)
        1    0.000    0.000    0.000    0.000 core.py:109(InputSet)
        3    0.000    0.000    0.000    0.000 glob.py:213(_join)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2301(_entropy_dispatch)
        1    0.000    0.000    0.000    0.000 spherical_harmonics.py:15(Ynm)
        1    0.000    0.000    0.000    0.000 hyper.py:796(HyperRep)
        1    0.000    0.000    0.000    0.000 _util.py:13(DeferredError)
        1    0.000    0.000    0.000    0.000 importer.py:170(_SysImporter)
        1    0.000    0.000    0.000    0.000 kind.py:257(__init__)
        1    0.000    0.000    0.000    0.000 _covariance.py:562(CovViaEigendecomposition)
        1    0.000    0.000    0.000    0.000 __init__.py:72(__init__)
        1    0.000    0.000    0.000    0.000 core.py:115(<listcomp>)
        1    0.000    0.000    0.000    0.000 sampler.py:82(RandomSampler)
        1    0.000    0.000    0.000    0.000 warnings.py:403(__init__)
        1    0.000    0.000    0.000    0.000 markers.py:274(Marker)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:961(poisson_gen)
        2    0.000    0.000    0.000    0.000 _new_distributions.py:324(_icdf_formula)
        1    0.000    0.000    0.000    0.000 traceback.py:247(FrameSummary)
        1    0.000    0.000    0.000    0.000 setupcfg.py:603(ConfigOptionsHandler)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3046(genlogistic_gen)
        1    0.000    0.000    0.000    0.000 containers.py:23(Tuple)
        3    0.000    0.000    0.000    0.000 typing_extensions.py:2877(__init__)
        6    0.000    0.000    0.000    0.000 ops.py:752(force_aff_func_args)
        1    0.000    0.000    0.000    0.000 __init__.py:106(__version__)
        5    0.000    0.000    0.000    0.000 sets.py:2010(__iter__)
        1    0.000    0.000    0.000    0.000 __init__.py:969(HalfStorage)
        1    0.000    0.000    0.000    0.000 _kdtree.py:98(Rectangle)
        1    0.000    0.000    0.000    0.000 function.py:1941(Lambda)
        1    0.000    0.000    0.000    0.000 __init__.py:6(HTTPStatus)
        1    0.000    0.000    0.000    0.000 taskgroups.py:12(TaskGroup)
        1    0.000    0.000    0.000    0.000 fancysets.py:519(Range)
        1    0.000    0.000    0.000    0.000 sets.py:10(MatrixSet)
        1    0.000    0.000    0.000    0.000 _common.py:267(tzrangebase)
       20    0.000    0.000    0.000    0.000 mul.py:571(<listcomp>)
        1    0.000    0.000    0.000    0.000 _multivariate.py:1027(matrix_normal_gen)
       18    0.000    0.000    0.000    0.000 typing_extensions.py:762(<genexpr>)
        1    0.000    0.000    0.000    0.000 trace.py:11(Trace)
        1    0.000    0.000    0.000    0.000 tz.py:201(tzlocal)
       10    0.000    0.000    0.000    0.000 case.py:1366(_deprecate)
        3    0.000    0.000    0.000    0.000 __init__.py:880(legacy_normalize)
        1    0.000    0.000    0.000    0.000 argparse.py:1328(_ActionsContainer)
        1    0.000    0.000    0.000    0.000 image.py:1288(FigureImage)
        1    0.000    0.000    0.000    0.000 series.py:1496(ParametricLineBaseSeries)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:287(CubicTriInterpolator)
       10    0.000    0.000    0.000    0.000 _pytesttester.py:76(__init__)
        1    0.000    0.000    0.000    0.000 dos.py:37(DOS)
        1    0.000    0.000    0.000    0.000 extras.py:1607(MAxisConcatenator)
        1    0.000    0.000    0.000    0.000 __init__.py:434(Stripper)
        1    0.000    0.000    0.000    0.000 kind.py:97(__new__)
        1    0.000    0.000    0.000    0.000 stringpict.py:354(prettyForm)
        9    0.000    0.000    0.000    0.000 _util.py:949(_rename_parameter)
        1    0.000    0.000    0.000    0.000 activation.py:140(Sigmoid)
        3    0.000    0.000    0.000    0.000 _new_distributions.py:433(_moment_central_formula)
        9    0.000    0.000    0.000    0.000 timeutils.py:54(decorator)
        1    0.000    0.000    0.000    0.000 _multiufuncs.py:24(MultiUFunc)
       19    0.000    0.000    0.000    0.000 fromnumeric.py:3265(_round_dispatcher)
        1    0.000    0.000    0.000    0.000 afm.py:358(AFM)
        1    0.000    0.000    0.000    0.000 conv_add.py:52(ConvAddReLU2d)
        1    0.000    0.000    0.000    0.000 integers.py:297(ceiling)
        1    0.000    0.000    0.000    0.000 threading.py:822(_maintain_shutdown_locks)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:4158(Sentinel)
        1    0.000    0.000    0.000    0.000 transforms.py:1012(TransformedBbox)
        1    0.000    0.000    0.000    0.000 rnn.py:230(GRUCell)
        1    0.000    0.000    0.000    0.000 normalization.py:87(LayerNorm)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1007(AnchoredOffsetbox)
        1    0.000    0.000    0.000    0.000 _docscrape.py:25(Reader)
        7    0.000    0.000    0.000    0.000 __init__.py:101(CFunctionType)
        1    0.000    0.000    0.000    0.000 _interpolate.py:151(_check_broadcast_up_to)
        1    0.000    0.000    0.000    0.000 Periodicity_System.py:12(PeriodicityPhysicsSystem)
       14    0.000    0.000    0.000    0.000 _common.py:9(__init__)
        1    0.000    0.000    0.000    0.000 utils.py:163(SimpleTextIOWrapper)
       11    0.000    0.000    0.000    0.000 _color_data.py:31(<genexpr>)
        1    0.000    0.000    0.000    0.000 traceback.py:372(StackSummary)
        1    0.000    0.000    0.000    0.000 log.py:41(Log)
        1    0.000    0.000    0.000    0.000 tarfile.py:328(_Stream)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:3579(TypeAliasType)
        1    0.000    0.000    0.000    0.000 specifiers.py:690(SpecifierSet)
        1    0.000    0.000    0.000    0.000 resource_sharer.py:61(_ResourceSharer)
        1    0.000    0.000    0.000    0.000 core.py:6345(mvoid)
        1    0.000    0.000    0.000    0.000 ticker.py:1909(LinearLocator)
        1    0.000    0.000    0.000    0.000 asgd.py:18(ASGD)
        1    0.000    0.000    0.000    0.000 generate.py:26(Sieve)
        1    0.000    0.000    0.000    0.000 contour.py:1388(QuadContourSet)
        1    0.000    0.000    0.000    0.000 transforms.py:1702(__init__)
        1    0.000    0.000    0.000    0.000 _package_unpickler.py:7(PackageUnpickler)
        1    0.000    0.000    0.000    0.000 core.py:3237(QuotedString)
        1    0.000    0.000    0.000    0.000 numbers.py:3465(ComplexInfinity)
        1    0.000    0.000    0.000    0.000 error_functions.py:2210(Chi)
        1    0.000    0.000    0.000    0.000 internal.py:41(__init__)
        1    0.000    0.000    0.000    0.000 discovery.py:298(ConfigDiscovery)
        1    0.000    0.000    0.000    0.000 fancysets.py:166(Integers)
        1    0.000    0.000    0.000    0.000 error_functions.py:1964(Ci)
        1    0.000    0.000    0.000    0.000 rprop.py:11(Rprop)
        1    0.000    0.000    0.000    0.000 sets.py:854(ProductSet)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1767(yulesimon_gen)
       10    0.000    0.000    0.000    0.000 symbolic_opset11.py:84(_apply_params)
        1    0.000    0.000    0.000    0.000 transforms.py:2380(CompositeAffine2D)
        1    0.000    0.000    0.000    0.000 __init__.py:889(FloatStorage)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7648(nakagami_gen)
        4    0.000    0.000    0.000    0.000 mixins.py:51(_unary_method)
        3    0.000    0.000    0.000    0.000 message.py:211(is_multipart)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1432(cauchy_gen)
        1    0.000    0.000    0.000    0.000 __init__.py:918(PathDistribution)
        1    0.000    0.000    0.000    0.000 _wavelets.py:1(<module>)
        1    0.000    0.000    0.000    0.000 function_base.py:2117(vectorize)
        1    0.000    0.000    0.000    0.000 isolve.py:1(<module>)
        1    0.000    0.000    0.000    0.000 graphs.py:40(CUDAGraph)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:115(TokenList)
        1    0.000    0.000    0.000    0.000 transforms.py:955(LowerCholeskyTransform)
        1    0.000    0.000    0.000    0.000 swa_utils.py:200(SWALR)
        1    0.000    0.000    0.000    0.000 _multivariate.py:1547(dirichlet_gen)
        2    0.000    0.000    0.000    0.000 results.py:441(__getattr__)
        1    0.000    0.000    0.000    0.000 main.py:1477(YAMLObjectMetaclass)
        1    0.000    0.000    0.000    0.000 error_functions.py:2104(Shi)
        1    0.000    0.000    0.000    0.000 _parser.py:241(parserinfo)
        1    0.000    0.000    0.000    0.000 legend_handler.py:436(__init__)
        1    0.000    0.000    0.000    0.000 _ode.py:110(ode)
        1    0.000    0.000    0.000    0.000 add_newdocs.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _differentiable_functions.py:516(VectorFunction)
        1    0.000    0.000    0.000    0.000 conv_relu.py:19(ConvReLU1d)
        1    0.000    0.000    0.000    0.000 activation.py:1492(LogSoftmax)
        1    0.000    0.000    0.000    0.000 inference.py:252(KB)
        1    0.000    0.000    0.000    0.000 __init__.py:879(DoubleStorage)
        4    0.000    0.000    0.000    0.000 pretty_symbology.py:236(<lambda>)
        1    0.000    0.000    0.000    0.000 triangulation.py:4(Triangulation)
        1    0.000    0.000    0.000    0.000 bessel.py:106(besselj)
        1    0.000    0.000    0.000    0.000 singleton.py:24(SingletonRegistry)
        1    0.000    0.000    0.000    0.000 graph_module.py:27(_EvalCacheLoader)
        1    0.000    0.000    0.000    0.000 bn_relu.py:12(BNReLU2d)
        1    0.000    0.000    0.000    0.000 _sensitivity_analysis.py:161(SobolResult)
        1    0.000    0.000    0.000    0.000 _special_sparse_arrays.py:10(LaplacianNd)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:8315(lomax_gen)
        1    0.000    0.000    0.000    0.000 _ode.py:1121(dopri5)
        1    0.000    0.000    0.000    0.000 numbers.py:762(harmonic)
        1    0.000    0.000    0.000    0.000 queue.py:258(_PySimpleQueue)
        1    0.000    0.000    0.000    0.000 tight_bbox.py:1(<module>)
        1    0.000    0.000    0.000    0.000 diophantine.py:1213(<setcomp>)
        1    0.000    0.000    0.000    0.000 filters.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:347(EntryPoints)
        1    0.000    0.000    0.000    0.000 zeta_functions.py:25(lerchphi)
        1    0.000    0.000    0.000    0.000 special.py:213(OneMatrix)
        1    0.000    0.000    0.000    0.000 __init__.py:331(_Stream)
        1    0.000    0.000    0.000    0.000 ideals.py:282(ModuleImplementedIdeal)
        1    0.000    0.000    0.000    0.000 binary.py:48(<listcomp>)
        1    0.000    0.000    0.000    0.000 image.py:1134(PcolorImage)
        1    0.000    0.000    0.000    0.000 nodes.py:11(Node)
        1    0.000    0.000    0.000    0.000 polyhedron.py:11(Polyhedron)
        1    0.000    0.000    0.000    0.000 fake_quantize.py:114(FakeQuantize)
        3    0.000    0.000    0.000    0.000 __init__.py:1720(getEffectiveLevel)
        2    0.000    0.000    0.000    0.000 util.py:289(<listcomp>)
        3    0.000    0.000    0.000    0.000 __init__.py:370(_FuncPtr)
        1    0.000    0.000    0.000    0.000 __init__.py:222(__exit__)
        3    0.000    0.000    0.000    0.000 feedparser.py:210(_pop_message)
        1    0.000    0.000    0.000    0.000 main.py:1489(YAMLObject)
        1    0.000    0.000    0.000    0.000 ctx_iv.py:151(ivmpc)
        1    0.000    0.000    0.000    0.000 {built-in method torch._C._tracer_warn_use_python}
        4    0.000    0.000    0.000    0.000 libmpf.py:454(to_float)
        4    0.000    0.000    0.000    0.000 pretty_symbology.py:237(<lambda>)
       30    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1363(exec_module)
        3    0.000    0.000    0.000    0.000 constraints.py:109(__init__)
        1    0.000    0.000    0.000    0.000 tensor.py:4928(_WildTensExpr)
        1    0.000    0.000    0.000    0.000 axis.py:29(<listcomp>)
        1    0.000    0.000    0.000    0.000 _atfork.py:18(register_after_fork)
        1    0.000    0.000    0.000    0.000 splitter_base.py:81(FxNetAccNodesFinder)
        1    0.000    0.000    0.000    0.000 _docscrape.py:623(ClassDoc)
        1    0.000    0.000    0.000    0.000 mio4.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4780(hypsecant_gen)
        1    0.000    0.000    0.000    0.000 transforms.py:459(ReshapeTransform)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:553(_Parameter)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:476(Hyper_Function)
        1    0.000    0.000    0.000    0.000 scalarint.py:12(ScalarInt)
        1    0.000    0.000    0.000    0.000 ticker.py:1413(EngFormatter)
        1    0.000    0.000    0.000    0.000 __init__.py:999(ShortStorage)
       10    0.000    0.000    0.000    0.000 wrappers.py:198(<genexpr>)
        1    0.000    0.000    0.000    0.000 rnn.py:749(RNNCellBase)
        1    0.000    0.000    0.000    0.000 worker.py:64(WorkerInfo)
        1    0.000    0.000    0.000    0.000 matexpr.py:666(MatrixSymbol)
        1    0.000    0.000    0.000    0.000 numbers.py:2839(One)
        1    0.000    0.000    0.000    0.000 __init__.py:13(register)
       10    0.000    0.000    0.000    0.000 decorator.py:195(<genexpr>)
        1    0.000    0.000    0.000    0.000 transforms.py:280(__init__)
        1    0.000    0.000    0.000    0.000 locks.py:158(Event)
        1    0.000    0.000    0.000    0.000 colors.py:371(ColorConverter)
        1    0.000    0.000    0.000    0.000 hadamard.py:313(HadamardPower)
        1    0.000    0.000    0.000    0.000 boolalg.py:230(BooleanAtom)
        1    0.000    0.000    0.000    0.000 conv.py:382(Conv2d)
        1    0.000    0.000    0.000    0.000 outputs.py:5824(WSWQ)
        1    0.000    0.000    0.000    0.000 para4tb.py:12(ParaTB)
        1    0.000    0.000    0.000    0.000 hyper.py:1087(HyperRep_cosasin)
        1    0.000    0.000    0.000    0.000 backend_tools.py:992(ToolHelpBase)
        1    0.000    0.000    0.000    0.000 elliptic_integrals.py:13(elliptic_k)
        1    0.000    0.000    0.000    0.000 _utils.py:93(BasicEvaluation)
        1    0.000    0.000    0.000    0.000 blocking_input.py:101(BlockingMouseInput)
        1    0.000    0.000    0.000    0.000 batchnorm.py:17(_NormBase)
        1    0.000    0.000    0.000    0.000 _ltisys.py:132(lti)
        1    0.000    0.000    0.000    0.000 _datasource.py:196(DataSource)
        1    0.000    0.000    0.000    0.000 outputs.py:4975(Wavecar)
        4    0.000    0.000    0.000    0.000 pretty_symbology.py:233(<lambda>)
        1    0.000    0.000    0.000    0.000 ticker.py:2084(MaxNLocator)
        1    0.000    0.000    0.000    0.000 _cubic.py:160(PchipInterpolator)
        1    0.000    0.000    0.000    0.000 _zeros_py.py:1122(TOMS748Solver)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:11258(wald_gen)
        1    0.000    0.000    0.000    0.000 __init__.py:84(__init__)
        1    0.000    0.000    0.000    0.000 _internal.py:217(_getintp_ctype)
        1    0.000    0.000    0.000    0.000 partitions.py:15(Partition)
        3    0.000    0.000    0.000    0.000 typing.py:900(__repr__)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1744(dgamma_gen)
        1    0.000    0.000    0.000    0.000 relational.py:549(Equality)
        1    0.000    0.000    0.000    0.000 collections.py:1190(BrokenBarHCollection)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2479(_logpmf_dispatch)
        1    0.000    0.000    0.000    0.000 _support_alternative_backends.py:295(<listcomp>)
        1    0.000    0.000    0.000    0.000 selector_events.py:744(_SelectorTransport)
        1    0.000    0.000    0.000    0.000 pg_operation.py:10(PointGroupOp)
        1    0.000    0.000    0.000    0.000 headerregistry.py:468(ContentTypeHeader)
        1    0.000    0.000    0.000    0.000 autograd_function.py:30(__init__)
        1    0.000    0.000    0.000    0.000 container.py:5(Container)
        1    0.000    0.000    0.000    0.000 interval_membership.py:4(intervalMembership)
        1    0.000    0.000    0.000    0.000 expr.py:3989(AtomicExpr)
        1    0.000    0.000    0.000    0.000 _byteordercodes.py:1(<module>)
        1    0.000    0.000    0.000    0.000 structure.py:5062(Molecule)
        1    0.000    0.000    0.000    0.000 __init__.py:929(ShortStorage)
        1    0.000    0.000    0.000    0.000 widgets.py:1417(_SelectorWidget)
        1    0.000    0.000    0.000    0.000 loss.py:622(BCEWithLogitsLoss)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1074(bradford_gen)
        1    0.000    0.000    0.000    0.000 _weights_only_unpickler.py:113(Unpickler)
        1    0.000    0.000    0.000    0.000 getlimits.py:378(finfo)
        1    0.000    0.000    0.000    0.000 spglib.py:108(SpglibDataset)
        1    0.000    0.000    0.000    0.000 integers.py:97(floor)
        1    0.000    0.000    0.000    0.000 gamma_functions.py:398(uppergamma)
        1    0.000    0.000    0.000    0.000 socket.py:662(SocketIO)
        1    0.000    0.000    0.000    0.000 minpack2.py:1(<module>)
       16    0.000    0.000    0.000    0.000 _add_newdocs_scalars.py:79(<genexpr>)
        1    0.000    0.000    0.000    0.000 sets.py:1893(UniversalSet)
        1    0.000    0.000    0.000    0.000 exceptions.py:11(SymPyDeprecationWarning)
        1    0.000    0.000    0.000    0.000 patches.py:1833(_Style)
        1    0.000    0.000    0.000    0.000 art3d.py:557(Poly3DCollection)
        1    0.000    0.000    0.000    0.000 __init__.py:143(__init__)
        1    0.000    0.000    0.000    0.000 core.py:3553(White)
        6    0.000    0.000    0.000    0.000 rcsetup.py:177(_validate_tex_preamble)
        1    0.000    0.000    0.000    0.000 __init__.py:35(_SupportedQEnginesProp)
        1    0.000    0.000    0.000    0.000 __init__.py:919(IntStorage)
        1    0.000    0.000    0.000    0.000 _matrix_io.py:1(<module>)
        1    0.000    0.000    0.000    0.000 elliptic_integrals.py:103(elliptic_f)
        1    0.000    0.000    0.000    0.000 functions.py:11(TensorProduct)
        1    0.000    0.000    0.000    0.000 activation.py:1249(PReLU)
        1    0.000    0.000    0.000    0.000 __config__.py:95(<listcomp>)
        1    0.000    0.000    0.000    0.000 configparser.py:297(ParsingError)
        1    0.000    0.000    0.000    0.000 fileopener.py:13(FileOpenerIterDataPipe)
        1    0.000    0.000    0.000    0.000 property.py:3(Property)
        1    0.000    0.000    0.000    0.000 decomp.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fancy_getopt.py:37(FancyGetopt)
        1    0.000    0.000    0.000    0.000 _at.py:61(at)
       16    0.000    0.000    0.000    0.000 dataclasses.py:1239(<genexpr>)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:886(SupportsAbs)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:428(FloorDiv)
        1    0.000    0.000    0.000    0.000 conv.py:672(ConvTranspose1d)
       11    0.000    0.000    0.000    0.000 api.py:488(method_factory)
        2    0.000    0.000    0.000    0.000 _new_distributions.py:299(_process_parameters)
        1    0.000    0.000    0.000    0.000 numpy.py:506(JaxPrinter)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:753(PngImageFile)
        1    0.000    0.000    0.000    0.000 selector_events.py:888(_SelectorSocketTransport)
        1    0.000    0.000    0.000    0.000 discovery.py:84(_Finder)
        1    0.000    0.000    0.000    0.000 combining.py:93(_ContainerTemplate)
       20    0.000    0.000    0.000    0.000 mul.py:672(<listcomp>)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3162(multinomial_gen)
        1    0.000    0.000    0.000    0.000 blockmatrix.py:560(BlockDiagMatrix)
        1    0.000    0.000    0.000    0.000 ctx_mp_python.py:163(__neg__)
        1    0.000    0.000    0.000    0.000 _functions.py:6(SyncBatchNorm)
        1    0.000    0.000    0.000    0.000 ops.py:153(<listcomp>)
       14    0.000    0.000    0.000    0.000 {method 'seek' of '_io.StringIO' objects}
        1    0.000    0.000    0.000    0.000 utils.py:11(WeightedQuantizedModule)
        1    0.000    0.000    0.000    0.000 configparser.py:1210(ConfigParser)
        1    0.000    0.000    0.000    0.000 factorials.py:828(binomial)
        1    0.000    0.000    0.000    0.000 mvn.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _pep440.py:140(__lt__)
        1    0.000    0.000    0.000    0.000 splitter_base.py:193(SplitResult)
        1    0.000    0.000    0.000    0.000 linear.py:48(Linear)
        1    0.000    0.000    0.000    0.000 function_base.py:2314(<listcomp>)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1347(ReduceOrder)
        1    0.000    0.000    0.000    0.000 header.py:413(_ValueFormatter)
        1    0.000    0.000    0.000    0.000 core.py:2766(Word)
        1    0.000    0.000    0.000    0.000 __init__.py:1079(QInt32Storage)
        1    0.000    0.000    0.000    0.000 pycode.py:552(PythonCodePrinter)
        1    0.000    0.000    0.000    0.000 units.py:110(ConversionInterface)
        2    0.000    0.000    0.000    0.000 _pep440.py:158(_compare)
        1    0.000    0.000    0.000    0.000 streams.py:301(StreamWriter)
        2    0.000    0.000    0.000    0.000 facts.py:305(rules_beta)
        1    0.000    0.000    0.000    0.000 arrayterator.py:16(Arrayterator)
        1    0.000    0.000    0.000    0.000 proxy_tensor.py:579(DecompositionInterpreter)
        1    0.000    0.000    0.000    0.000 _structures.py:6(InfinityType)
        1    0.000    0.000    0.000    0.000 connection.py:347(Connection)
        1    0.000    0.000    0.000    0.000 adjoint.py:6(Adjoint)
        1    0.000    0.000    0.000    0.000 __init__.py:1009(CharStorage)
        1    0.000    0.000    0.000    0.000 __init__.py:1224(levy_stable_frozen)
        1    0.000    0.000    0.000    0.000 difflib.py:724(Differ)
        1    0.000    0.000    0.000    0.000 dense_ndim_array.py:132(ImmutableDenseNDimArray)
        1    0.000    0.000    0.000    0.000 decoder.py:269(Decoder)
        1    0.000    0.000    0.000    0.000 subprocess.py:17(SubprocessStreamProtocol)
        2    0.000    0.000    0.000    0.000 core.py:6643(__setattr__)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:674(Formula)
        1    0.000    0.000    0.000    0.000 decoder.py:254(JSONDecoder)
        1    0.000    0.000    0.000    0.000 discovery.py:185(ModuleFinder)
        1    0.000    0.000    0.000    0.000 half_cauchy.py:12(HalfCauchy)
        9    0.000    0.000    0.000    0.000 typing.py:3026(<lambda>)
        1    0.000    0.000    0.000    0.000 perm_groups.py:5342(Coset)
        1    0.000    0.000    0.000    0.000 tritools.py:11(TriAnalyzer)
        1    0.000    0.000    0.000    0.000 mock.py:2422(_Call)
       20    0.000    0.000    0.000    0.000 numbers.py:2835(__bool__)
        1    0.000    0.000    0.000    0.000 dataset.py:280(Subset)
        1    0.000    0.000    0.000    0.000 pyfunctorch.py:83(VmapInterpreter)
        1    0.000    0.000    0.000    0.000 dense.py:28(DenseMatrix)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:740(nhypergeom_gen)
        1    0.000    0.000    0.000    0.000 transforms.py:521(ExpTransform)
       32    0.000    0.000    0.000    0.000 {method 'is_dir' of 'posix.DirEntry' objects}
        1    0.000    0.000    0.000    0.000 point.py:860(Point2D)
        1    0.000    0.000    0.000    0.000 _aliases.py:147(zeros)
        1    0.000    0.000    0.000    0.000 __init__.py:1402(_fixupChildren)
       12    0.000    0.000    0.000    0.000 patches.py:1879(<genexpr>)
        1    0.000    0.000    0.000    0.000 pythonintegerring.py:13(PythonIntegerRing)
        1    0.000    0.000    0.000    0.000 groups.py:139(PointGroup)
        1    0.000    0.000    0.000    0.000 polyoptions.py:76(Options)
        1    0.000    0.000    0.000    0.000 frontend.py:519(WithItemBuilder)
        1    0.000    0.000    0.000    0.000 gamma_functions.py:34(gamma)
        3    0.000    0.000    0.000    0.000 zipfile.py:689(_check_compression)
        1    0.000    0.000    0.000    0.000 six.py:205(load_module)
        1    0.000    0.000    0.000    0.000 __init__.py:79(method_cache)
        1    0.000    0.000    0.000    0.000 _symbolic_trace.py:900(_Patcher)
        1    0.000    0.000    0.000    0.000 _internal.py:249(_ctypes)
        1    0.000    0.000    0.000    0.000 feedparser.py:136(FeedParser)
        1    0.000    0.000    0.000    0.000 conv_add.py:9(ConvAdd2d)
        1    0.000    0.000    0.000    0.000 __init__.py:1019(BoolStorage)
        1    0.000    0.000    0.000    0.000 __init__.py:1303(Manager)
        8    0.000    0.000    0.000    0.000 mathtext.py:1903(__init__)
        1    0.000    0.000    0.000    0.000 orderings.py:63(ProductOrder)
        2    0.000    0.000    0.000    0.000 _new_distributions.py:44(__new__)
        1    0.000    0.000    0.000    0.000 outputs.py:177(KpointOptProps)
        1    0.000    0.000    0.000    0.000 partitions.py:308(IntegerPartition)
        1    0.000    0.000    0.000    0.000 ticker.py:232(Formatter)
        1    0.000    0.000    0.000    0.000 events.py:24(Handle)
        1    0.000    0.000    0.000    0.000 six.py:219(is_package)
        1    0.000    0.000    0.000    0.000 _deprecation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 loss.py:228(PoissonNLLLoss)
        1    0.000    0.000    0.000    0.000 memoization.py:1(<module>)
        1    0.000    0.000    0.000    0.000 conv_relu.py:119(ConvReLU3d)
        1    0.000    0.000    0.000    0.000 {method 'close' of 'select.epoll' objects}
        4    0.000    0.000    0.000    0.000 doccer.py:180(replace_notes_in_docstring)
       30    0.000    0.000    0.000    0.000 polyoptions.py:196(<genexpr>)
        1    0.000    0.000    0.000    0.000 enumerative.py:368(MultisetPartitionTraverser)
        1    0.000    0.000    0.000    0.000 profiler_util.py:16(EventList)
        1    0.000    0.000    0.000    0.000 rnn.py:1061(RNNCell)
        2    0.000    0.000    0.000    0.000 cache.py:190(LazyFunction)
        1    0.000    0.000    0.000    0.000 lazy.py:10(_LazyProtocol)
        1    0.000    0.000    0.000    0.000 error_functions.py:2710(_erfs)
       11    0.000    0.000    0.000    0.000 reductions.py:110(_torch_reduce)
        1    0.000    0.000    0.000    0.000 blocking_input.py:32(BlockingInput)
        1    0.000    0.000    0.000    0.000 hmac.py:27(HMAC)
        1    0.000    0.000    0.000    0.000 exprtools.py:809(Term)
        1    0.000    0.000    0.000    0.000 normalization.py:5(LayerNorm)
        1    0.000    0.000    0.000    0.000 __init__.py:969(ComplexDoubleStorage)
        5    0.000    0.000    0.000    0.000 {built-in method atexit.register}
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2460(foldcauchy_gen)
        1    0.000    0.000    0.000    0.000 __init__.py:939(CharStorage)
        2    0.000    0.000    0.000    0.000 distributed_c10d.py:393(WORLD)
        1    0.000    0.000    0.000    0.000 complexes.py:142(im)
        2    0.000    0.000    0.000    0.000 weakref.py:347(__new__)
        1    0.000    0.000    0.000    0.000 __init__.py:1099(QUInt2x4Storage)
        1    0.000    0.000    0.000    0.000 series.py:1289(LineOver1DRangeSeries)
        1    0.000    0.000    0.000    0.000 tensor.py:4488(TensorElement)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1347(fisk_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:11948(rv_histogram)
        1    0.000    0.000    0.000    0.000 para4band.py:53(Stiefel_Frame_Function)
        1    0.000    0.000    0.000    0.000 batchnorm.py:9(_BatchNorm)
        1    0.000    0.000    0.000    0.000 __init__.py:1049(ComplexFloatStorage)
        1    0.000    0.000    0.000    0.000 kumaraswamy.py:20(Kumaraswamy)
        1    0.000    0.000    0.000    0.000 storage.py:981(_LegacyStorage)
        1    0.000    0.000    0.000    0.000 _cubature.py:48(CubatureResult)
        1    0.000    0.000    0.000    0.000 delta_functions.py:17(DiracDelta)
        1    0.000    0.000    0.000    0.000 calculus.py:5(MatrixCalculusMethods)
        1    0.000    0.000    0.000    0.000 colors.py:1238(SymLogNorm)
        1    0.000    0.000    0.000    0.000 conv.py:1141(_LazyConvXdMixin)
        2    0.000    0.000    0.000    0.000 {method 'tobytes' of 'numpy.generic' objects}
        1    0.000    0.000    0.000    0.000 scale.py:686(<listcomp>)
        1    0.000    0.000    0.000    0.000 rnn.py:282(RNNBase)
        1    0.000    0.000    0.000    0.000 gridspec.py:362(GridSpec)
        1    0.000    0.000    0.000    0.000 __init__.py:959(BFloat16Storage)
        1    0.000    0.000    0.000    0.000 dates.py:1052(DateLocator)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha3_224}
        1    0.000    0.000    0.000    0.000 six.py:164(_resolve)
        1    0.000    0.000    0.000    0.000 arffread.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ase.py:86(AseAtomsAdaptor)
        1    0.000    0.000    0.000    0.000 complexes.py:20(re)
       15    0.000    0.000    0.000    0.000 fromnumeric.py:2974(_prod_dispatcher)
        1    0.000    0.000    0.000    0.000 scanner.py:2211(RoundTripScannerSC)
       13    0.000    0.000    0.000    0.000 utils.py:35(wrapper)
        1    0.000    0.000    0.000    0.000 difflib.py:1666(HtmlDiff)
        1    0.000    0.000    0.000    0.000 parabola.py:20(Parabola)
        1    0.000    0.000    0.000    0.000 msgpack.py:1(<module>)
        1    0.000    0.000    0.000    0.000 activation.py:1408(Softmax)
        1    0.000    0.000    0.000    0.000 modules.py:1647(PowerBasisElement)
        1    0.000    0.000    0.000    0.000 singleton.py:114(__init__)
        1    0.000    0.000    0.000    0.000 hyper.py:866(HyperRep_power1)
        1    0.000    0.000    0.000    0.000 _multivariate.py:5835(__init__)
        1    0.000    0.000    0.000    0.000 core.py:2430(Literal)
        1    0.000    0.000    0.000    0.000 _compression.py:9(BaseStream)
        1    0.000    0.000    0.000    0.000 engine.py:342(DiagnosticEngine)
        1    0.000    0.000    0.000    0.000 core.py:6004(Suppress)
        1    0.000    0.000    0.000    0.000 _script.py:179(OrderedDictWrapper)
        5    0.000    0.000    0.000    0.000 typing.py:2588(final)
        1    0.000    0.000    0.000    0.000 wrappers.py:78(elementwise_type_promotion_wrapper)
       16    0.000    0.000    0.000    0.000 arraypad.py:525(_pad_dispatcher)
        1    0.000    0.000    0.000    0.000 repmatrix.py:585(_fromrep)
        1    0.000    0.000    0.000    0.000 response.py:68(addinfourl)
        8    0.000    0.000    0.000    0.000 unicode.py:9(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:949(BoolStorage)
        1    0.000    0.000    0.000    0.000 pkgutil.py:269(ImpLoader)
        1    0.000    0.000    0.000    0.000 _globals.py:52(__new__)
        1    0.000    0.000    0.000    0.000 function.py:155(FunctionClass)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:379(DataFlowEdge)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:5836(johnsonsu_gen)
        4    0.000    0.000    0.000    0.000 generate.py:67(<genexpr>)
        3    0.000    0.000    0.000    0.000 rcsetup.py:740(validate_bbox)
        2    0.000    0.000    0.000    0.000 deprecation.py:184(_deprecate_positional_args)
        1    0.000    0.000    0.000    0.000 codata.py:1(<module>)
        4    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:4367(_shift_scale_inverse_function)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3254(genexpon_gen)
        1    0.000    0.000    0.000    0.000 band_data_in.py:12(BandDataIn)
        1    0.000    0.000    0.000    0.000 sequences.py:962(SeqExprOp)
        1    0.000    0.000    0.000    0.000 base_events.py:206(_SendfileFallbackProtocol)
        1    0.000    0.000    0.000    0.000 function.py:674(NestedIOFunction)
        1    0.000    0.000    0.000    0.000 colors.py:509(Colormap)
        1    0.000    0.000    0.000    0.000 fitpack.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fft.py:250(_ShapeAndDims)
        1    0.000    0.000    0.000    0.000 dos.py:1413(LobsterCompleteDos)
        1    0.000    0.000    0.000    0.000 polar.py:666(RadialAxis)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3629(__init__)
        1    0.000    0.000    0.000    0.000 _script.py:1478(_ScriptProfileColumn)
        2    0.000    0.000    0.000    0.000 scale.py:634(get_scale_names)
        1    0.000    0.000    0.000    0.000 line.py:1343(Ray)
        1    0.000    0.000    0.000    0.000 _version.py:14(NumpyVersion)
        1    0.000    0.000    0.000    0.000 io.py:344(FileLock)
        1    0.000    0.000    0.000    0.000 mod.py:12(Mod)
        1    0.000    0.000    0.000    0.000 _functions.py:10(Broadcast)
        1    0.000    0.000    0.000    0.000 cobyla.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fancysets.py:24(Rationals)
        1    0.000    0.000    0.000    0.000 filter_design.py:1(<module>)
        1    0.000    0.000    0.000    0.000 linear_relu.py:50(LinearLeakyReLU)
        1    0.000    0.000    0.000    0.000 relaxed_categorical.py:88(RelaxedOneHotCategorical)
        1    0.000    0.000    0.000    0.000 __init__.py:1069(QInt8Storage)
        1    0.000    0.000    0.000    0.000 rbf.py:1(<module>)
        1    0.000    0.000    0.000    0.000 headerregistry.py:260(UnstructuredHeader)
        1    0.000    0.000    0.000    0.000 mio_utils.py:1(<module>)
        2    0.000    0.000    0.000    0.000 pretty_symbology.py:174(<lambda>)
        1    0.000    0.000    0.000    0.000 datetime.py:1280(IsoCalendarDate)
        1    0.000    0.000    0.000    0.000 facts.py:135(apply_beta_to_alpha_route)
        1    0.000    0.000    0.000    0.000 __init__.py:1089(QUInt4x2Storage)
        7    0.000    0.000    0.000    0.000 memoization.py:4(recurrence_memo)
       17    0.000    0.000    0.000    0.000 stride_tricks.py:476(_broadcast_arrays_dispatcher)
        1    0.000    0.000    0.000    0.000 mathtext.py:2632(State)
        7    0.000    0.000    0.000    0.000 __init__.py:27(__init__)
        1    0.000    0.000    0.000    0.000 ElementTree.py:1767(C14NWriterTarget)
        1    0.000    0.000    0.000    0.000 distributed.py:164(_DDPSink)
        1    0.000    0.000    0.000    0.000 ticker.py:1218(LogitFormatter)
        1    0.000    0.000    0.000    0.000 conv_fused.py:695(ConvBnReLU3d)
        1    0.000    0.000    0.000    0.000 pycode.py:416(ArrayPrinter)
        1    0.000    0.000    0.000    0.000 __init__.py:1308(__init__)
        1    0.000    0.000    0.000    0.000 singularity_functions.py:14(SingularityFunction)
        1    0.000    0.000    0.000    0.000 threading.py:224(Condition)
        1    0.000    0.000    0.000    0.000 transformer.py:166(TransformerEncoder)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:565(anglit_gen)
        1    0.000    0.000    0.000    0.000 rnn.py:1018(RNNCellBase)
        1    0.000    0.000    0.000    0.000 hyper.py:890(HyperRep_power2)
        1    0.000    0.000    0.000    0.000 single.py:341(NthAlgebraic)
        1    0.000    0.000    0.000    0.000 boolalg.py:572(And)
        1    0.000    0.000    0.000    0.000 moduleTNC.py:1(<module>)
        1    0.000    0.000    0.000    0.000 numbers.py:1350(genocchi)
        1    0.000    0.000    0.000    0.000 contains.py:10(Contains)
        1    0.000    0.000    0.000    0.000 sampler.py:139(SubsetRandomSampler)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:3789(Doc)
        1    0.000    0.000    0.000    0.000 _multivariate.py:211(multi_rv_generic)
        1    0.000    0.000    0.000    0.000 mathtext.py:535(TruetypeFonts)
        1    0.000    0.000    0.000    0.000 mock.py:1761(_patch_dict)
        1    0.000    0.000    0.000    0.000 graph.py:113(_Namespace)
        1    0.000    0.000    0.000    0.000 proxy_tensor.py:215(_ProxyTensor)
        1    0.000    0.000    0.000    0.000 ndim_array.py:15(ArrayKind)
        1    0.000    0.000    0.000    0.000 operations.py:38(__init__)
       12    0.000    0.000    0.000    0.000 symbol.py:784(literal)
        1    0.000    0.000    0.000    0.000 subgraph_rewriter.py:14(Match)
        1    0.000    0.000    0.000    0.000 fft.py:409(_CanonicalizeC2rReturn)
        1    0.000    0.000    0.000    0.000 core.py:2372(_MaskedPrintOption)
        1    0.000    0.000    0.000    0.000 core.py:97(<listcomp>)
        1    0.000    0.000    0.000    0.000 __init__.py:99(version_info)
        1    0.000    0.000    0.000    0.000 __init__.py:606(_FileInFile)
        1    0.000    0.000    0.000    0.000 diophantine.py:40(DiophantineSolutionSet)
        1    0.000    0.000    0.000    0.000 embedding_ops.py:8(Embedding)
        1    0.000    0.000    0.000    0.000 structure.py:83(Neighbor)
        1    0.000    0.000    0.000    0.000 polyoptions.py:349(Order)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:913(ReduceLROnPlateau)
        1    0.000    0.000    0.000    0.000 unix_events.py:1337(ThreadedChildWatcher)
        7    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:30(_isnull)
        1    0.000    0.000    0.000    0.000 _ode.py:600(complex_ode)
        1    0.000    0.000    0.000    0.000 distance.py:1983(<dictcomp>)
        1    0.000    0.000    0.000    0.000 sets.py:1726(Complement)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1132(burr_gen)
        1    0.000    0.000    0.000    0.000 error_functions.py:1275(expint)
        1    0.000    0.000    0.000    0.000 mathtext.py:1557(List)
        1    0.000    0.000    0.000    0.000 _trustregion.py:30(BaseQuadraticSubproblem)
        1    0.000    0.000    0.000    0.000 __init__.py:1059(QUInt8Storage)
        1    0.000    0.000    0.000    0.000 decomp_cholesky.py:1(<module>)
        1    0.000    0.000    0.000    0.000 normalization.py:14(LocalResponseNorm)
        1    0.000    0.000    0.000    0.000 _type_utils.py:270(<dictcomp>)
        1    0.000    0.000    0.000    0.000 transforms.py:60(IntegralTransform)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1235(_kwargs2args)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3772(__init__)
        6    0.000    0.000    0.000    0.000 docstring.py:33(__init__)
        1    0.000    0.000    0.000    0.000 conv.py:483(Conv3d)
        1    0.000    0.000    0.000    0.000 loss.py:1414(TripletMarginLoss)
        1    0.000    0.000    0.000    0.000 _nbit.py:1(<module>)
        1    0.000    0.000    0.000    0.000 bessel.py:282(bessely)
        1    0.000    0.000    0.000    0.000 patches.py:2923(_Curve)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1030(planck_gen)
        1    0.000    0.000    0.000    0.000 core.py:116(<listcomp>)
       15    0.000    0.000    0.000    0.000 dataclasses.py:179(__repr__)
        1    0.000    0.000    0.000    0.000 rnn.py:30(PackedSequence)
        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:897(_resolve_filename)
        2    0.000    0.000    0.000    0.000 legend_handler.py:264(__init__)
        1    0.000    0.000    0.000    0.000 dviread.py:516(DviFont)
        1    0.000    0.000    0.000    0.000 decomp_qr.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:1029(BFloat16Storage)
        1    0.000    0.000    0.000    0.000 ElementTree.py:525(ElementTree)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:4006(rv_sample)
        1    0.000    0.000    0.000    0.000 configparser.py:1255(SectionProxy)
        1    0.000    0.000    0.000    0.000 ckdtree.py:1(<module>)
       14    0.000    0.000    0.000    0.000 mock.py:1937(<genexpr>)
        1    0.000    0.000    0.000    0.000 throughput_benchmark.py:27(ExecutionStats)
        1    0.000    0.000    0.000    0.000 _datasource.py:536(Repository)
        1    0.000    0.000    0.000    0.000 transforms.py:2503(BboxTransformTo)
        1    0.000    0.000    0.000    0.000 structure.py:142(PeriodicNeighbor)
        1    0.000    0.000    0.000    0.000 __init__.py:503(PackagePath)
        1    0.000    0.000    0.000    0.000 inverse.py:8(Inverse)
        1    0.000    0.000    0.000    0.000 mio.py:1(<module>)
        1    0.000    0.000    0.000    0.000 rotation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 kdtree.py:1(<module>)
       12    0.000    0.000    0.000    0.000 matexpr.py:21(_sympifyit)
        3    0.000    0.000    0.000    0.000 datetime.py:2313(_create)
        1    0.000    0.000    0.000    0.000 __init__.py:1148(<listcomp>)
        1    0.000    0.000    0.000    0.000 _sources.py:111(ParsedDef)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:582(hypergeom_gen)
        1    0.000    0.000    0.000    0.000 _gauss_legendre.py:10(GaussLegendreQuadrature)
        1    0.000    0.000    0.000    0.000 streams.py:12(Stream)
        1    0.000    0.000    0.000    0.000 periodic_table.py:637(is_valid_symbol)
        9    0.000    0.000    0.000    0.000 enum.py:1354(<lambda>)
        1    0.000    0.000    0.000    0.000 beta_functions.py:20(beta)
        1    0.000    0.000    0.000    0.000 <frozen _collections_abc>:786(keys)
       11    0.000    0.000    0.000    0.000 windows.py:41(_add_docstr)
        1    0.000    0.000    0.000    0.000 interface.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ticker.py:333(FixedFormatter)
        1    0.000    0.000    0.000    0.000 suite.py:16(BaseTestSuite)
        1    0.000    0.000    0.000    0.000 core.py:237(LinearCombination)
        1    0.000    0.000    0.000    0.000 _guards.py:238(Checkpointable)
        1    0.000    0.000    0.000    0.000 case.py:1388(FunctionTestCase)
        1    0.000    0.000    0.000    0.000 zipfile.py:2222(CompleteDirs)
        7    0.000    0.000    0.000    0.000 getlimits.py:157(_register_type)
        1    0.000    0.000    0.000    0.000 mathtext.py:291(MathtextBackendSvg)
        3    0.000    0.000    0.000    0.000 __init__.py:6(is_available)
        1    0.000    0.000    0.000    0.000 numbers.py:3888(TribonacciConstant)
        1    0.000    0.000    0.000    0.000 _multivariate.py:6468(__init__)
       10    0.000    0.000    0.000    0.000 __future__.py:83(__init__)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha1}
        1    0.000    0.000    0.000    0.000 _nested_sequence.py:18(_NestedSequence)
       18    0.000    0.000    0.000    0.000 {built-in method _stat.S_ISLNK}
        4    0.000    0.000    0.000    0.000 _apply_pyprojecttoml.py:403(_some_attrgetter)
        1    0.000    0.000    0.000    0.000 <frozen _collections_abc>:381(__subclasshook__)
        1    0.000    0.000    0.000    0.000 _machar.py:17(MachAr)
        1    0.000    0.000    0.000    0.000 odepack.py:1(<module>)
        1    0.000    0.000    0.000    0.000 transforms.py:634(TanhTransform)
        1    0.000    0.000    0.000    0.000 spectrum.py:38(Spectrum)
        1    0.000    0.000    0.000    0.000 axis3d.py:477(YAxis)
       16    0.000    0.000    0.000    0.000 structure.py:3559(charge)
        1    0.000    0.000    0.000    0.000 hyper.py:1002(HyperRep_sqrts1)
        1    0.000    0.000    0.000    0.000 outputs.py:4024(Procar)
        1    0.000    0.000    0.000    0.000 para4tb.py:132(ParaTB_train)
        1    0.000    0.000    0.000    0.000 utils.py:8(ReferenceQuantizedModule)
        1    0.000    0.000    0.000    0.000 numbers.py:3545(NumberSymbol)
        1    0.000    0.000    0.000    0.000 dbapi2.py:48(<listcomp>)
        1    0.000    0.000    0.000    0.000 outputs.py:4849(Dynmat)
        1    0.000    0.000    0.000    0.000 Orbit_spd_with_spin.py:19(orbit_spd_with_spin)
       16    0.000    0.000    0.000    0.000 structure.py:244(sites)
        1    0.000    0.000    0.000    0.000 autocast_mode.py:6(autocast)
        1    0.000    0.000    0.000    0.000 constraints.py:96(_Dependent)
        1    0.000    0.000    0.000    0.000 contextlib.py:344(__exit__)
        3    0.000    0.000    0.000    0.000 rcsetup.py:754(validate_sketch)
        1    0.000    0.000    0.000    0.000 more.py:2733(seekable)
        1    0.000    0.000    0.000    0.000 slice.py:31(MatrixSlice)
        1    0.000    0.000    0.000    0.000 conv.py:118(Conv3d)
        1    0.000    0.000    0.000    0.000 animation.py:696(ImageMagickBase)
        1    0.000    0.000    0.000    0.000 special.py:104(Identity)
        1    0.000    0.000    0.000    0.000 compat.py:187(MutableSliceableSequence)
        1    0.000    0.000    0.000    0.000 backend_registration.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fir_filter_design.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3599(ContinuousDistribution)
        1    0.000    0.000    0.000    0.000 pretty_symbology.py:191(<listcomp>)
        1    0.000    0.000    0.000    0.000 matexpr.py:597(MatrixElement)
        1    0.000    0.000    0.000    0.000 zeta_functions.py:395(zeta)
        1    0.000    0.000    0.000    0.000 weibull.py:11(Weibull)
        1    0.000    0.000    0.000    0.000 libmpi.py:96(mpi_neg)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3858(random_correlation_gen)
        1    0.000    0.000    0.000    0.000 backend_tools.py:728(SaveFigureBase)
        5    0.000    0.000    0.000    0.000 due.py:28(dcite)
        1    0.000    0.000    0.000    0.000 distance.py:8(PairwiseDistance)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:508(alpha_gen)
        1    0.000    0.000    0.000    0.000 pyfunctorch.py:51(FuncTorchInterpreter)
        2    0.000    0.000    0.000    0.000 _jit_internal.py:639(ignore)
        1    0.000    0.000    0.000    0.000 tz.py:1475(GettzFunc)
        1    0.000    0.000    0.000    0.000 ElementTree.py:1506(XMLParser)
        6    0.000    0.000    0.000    0.000 sdm.py:85(<genexpr>)
        1    0.000    0.000    0.000    0.000 spglib.py:254(SpglibMagneticDataset)
        1    0.000    0.000    0.000    0.000 lti_conversion.py:1(<module>)
        1    0.000    0.000    0.000    0.000 colors.py:1681(LightSource)
        1    0.000    0.000    0.000    0.000 special.py:10(ZeroMatrix)
        1    0.000    0.000    0.000    0.000 ssl.py:456(_ASN1Object)
        1    0.000    0.000    0.000    0.000 activation.py:161(Softmax)
       12    0.000    0.000    0.000    0.000 _pep440.py:392(_parse_letter_version)
        1    0.000    0.000    0.000    0.000 trigonometric.py:1905(sinc)
        1    0.000    0.000    0.000    0.000 backend_tools.py:926(ToolPan)
        1    0.000    0.000    0.000    0.000 linear.py:134(Bilinear)
        1    0.000    0.000    0.000    0.000 pydoc.py:1129(__init__)
        1    0.000    0.000    0.000    0.000 backend_tools.py:800(ToolZoom)
        1    0.000    0.000    0.000    0.000 requirements.py:21(Requirement)
        1    0.000    0.000    0.000    0.000 decomp_lu.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:4491(Each)
        1    0.000    0.000    0.000    0.000 activation.py:18(Threshold)
        1    0.000    0.000    0.000    0.000 rrule.py:1112(_iterinfo)
        1    0.000    0.000    0.000    0.000 __init__.py:43(QuantizedEngine)
        1    0.000    0.000    0.000    0.000 offsetbox.py:651(DrawingArea)
        1    0.000    0.000    0.000    0.000 colors.py:695(LinearSegmentedColormap)
        1    0.000    0.000    0.000    0.000 gzip.py:455(_GzipReader)
        1    0.000    0.000    0.000    0.000 _multivariate.py:6001(dirichlet_multinomial_gen)
        1    0.000    0.000    0.000    0.000 rnn.py:7(LSTM)
        1    0.000    0.000    0.000    0.000 six.py:108(MovedModule)
        1    0.000    0.000    0.000    0.000 tr_interior_point.py:23(BarrierSubproblem)
        1    0.000    0.000    0.000    0.000 dsolve.py:1(<module>)
        1    0.000    0.000    0.000    0.000 tempfile.py:459(_TemporaryFileWrapper)
        1    0.000    0.000    0.000    0.000 zeta_functions.py:223(polylog)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:498(geom_gen)
        1    0.000    0.000    0.000    0.000 base.py:28(OdeSolver)
        1    0.000    0.000    0.000    0.000 polyint.py:1(<module>)
        1    0.000    0.000    0.000    0.000 linear.py:15(Linear)
        1    0.000    0.000    0.000    0.000 optimize.py:1(<module>)
        1    0.000    0.000    0.000    0.000 headerregistry.py:12(Address)
        1    0.000    0.000    0.000    0.000 {built-in method posix.sysconf}
        1    0.000    0.000    0.000    0.000 headerregistry.py:525(MessageIDHeader)
        1    0.000    0.000    0.000    0.000 colors.py:861(ListedColormap)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3321(genextreme_gen)
        1    0.000    0.000    0.000    0.000 gamma_functions.py:222(lowergamma)
        1    0.000    0.000    0.000    0.000 unix_events.py:823(AbstractChildWatcher)
        5    0.000    0.000    0.000    0.000 constructor.py:331(add_multi_constructor)
        1    0.000    0.000    0.000    0.000 _tqdm_pandas.py:1(<module>)
        1    0.000    0.000    0.000    0.000 polynomials.py:443(chebyshevt)
        1    0.000    0.000    0.000    0.000 hyper.py:918(HyperRep_log1)
        1    0.000    0.000    0.000    0.000 mathtext.py:378(Fonts)
        1    0.000    0.000    0.000    0.000 assume.py:80(AppliedPredicate)
        1    0.000    0.000    0.000    0.000 core.py:8376(_convert2ma)
        1    0.000    0.000    0.000    0.000 tz.py:1167(_tzicalvtz)
        1    0.000    0.000    0.000    0.000 para4band.py:330(<listcomp>)
        6    0.000    0.000    0.000    0.000 symbolic_opset8.py:67(_apply_params)
        1    0.000    0.000    0.000    0.000 _exceptions.py:116(_ArrayMemoryError)
        1    0.000    0.000    0.000    0.000 _VF.py:22(__init__)
        1    0.000    0.000    0.000    0.000 ltisys.py:1(<module>)
        1    0.000    0.000    0.000    0.000 quadpack.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7199(kappa4_gen)
        1    0.000    0.000    0.000    0.000 __init__.py:2401(_CustomTextWrap)
       12    0.000    0.000    0.000    0.000 comments.py:55(__call__)
        1    0.000    0.000    0.000    0.000 _script.py:413(RecursiveScriptClass)
        1    0.000    0.000    0.000    0.000 ctypeslib.py:202(_concrete_ndptr)
        1    0.000    0.000    0.000    0.000 __init__.py:60(Quantize)
        1    0.000    0.000    0.000    0.000 harwell_boeing.py:1(<module>)
        1    0.000    0.000    0.000    0.000 computed_entries.py:549(ComputedStructureEntry)
        1    0.000    0.000    0.000    0.000 gamma_functions.py:865(loggamma)
        1    0.000    0.000    0.000    0.000 py38.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:5454(norminvgauss_gen)
        2    0.000    0.000    0.000    0.000 traceback.py:297(__getitem__)
        1    0.000    0.000    0.000    0.000 string.py:57(Template)
        1    0.000    0.000    0.000    0.000 constraints.py:515(_Cat)
        3    0.000    0.000    0.000    0.000 index_tricks.py:320(__init__)
        1    0.000    0.000    0.000    0.000 bandstructure.py:909(LobsterBandStructureSymmLine)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:253(iTXt)
        1    0.000    0.000    0.000    0.000 nonlin.py:1(<module>)
        1    0.000    0.000    0.000    0.000 transformer.py:317(TransformerDecoder)
        1    0.000    0.000    0.000    0.000 index_tricks.py:717(IndexExpression)
        1    0.000    0.000    0.000    0.000 _windows.py:2509(<listcomp>)
        1    0.000    0.000    0.000    0.000 plotgrid.py:16(PlotGrid)
        1    0.000    0.000    0.000    0.000 _arffread.py:65(Attribute)
        9    0.000    0.000    0.000    0.000 core.py:1550(<genexpr>)
        1    0.000    0.000    0.000    0.000 function.py:882(UndefinedFunction)
        1    0.000    0.000    0.000    0.000 calendar.py:150(Calendar)
        1    0.000    0.000    0.000    0.000 headerregistry.py:327(AddressHeader)
        1    0.000    0.000    0.000    0.000 diophantine.py:146(DiophantineEquationType)
        1    0.000    0.000    0.000    0.000 indexed.py:580(Idx)
        1    0.000    0.000    0.000    0.000 gamma_functions.py:564(polygamma)
        1    0.000    0.000    0.000    0.000 mathml.py:21(MathMLPrinterBase)
        1    0.000    0.000    0.000    0.000 _ode.py:1250(lsoda)
        1    0.000    0.000    0.000    0.000 single.py:1297(SeparableReduced)
        1    0.000    0.000    0.000    0.000 headerregistry.py:156(BaseHeader)
        1    0.000    0.000    0.000    0.000 minpack.py:1(<module>)
        1    0.000    0.000    0.000    0.000 permutation.py:9(PermutationMatrix)
        1    0.000    0.000    0.000    0.000 conv.py:765(ConvTranspose2d)
       16    0.000    0.000    0.000    0.000 results.py:29(__getitem__)
        1    0.000    0.000    0.000    0.000 cnf.py:15(Literal)
        1    0.000    0.000    0.000    0.000 gamma_functions.py:1154(trigamma)
        1    0.000    0.000    0.000    0.000 events.py:98(TimerHandle)
        1    0.000    0.000    0.000    0.000 __init__.py:858(Prepared)
        1    0.000    0.000    0.000    0.000 mock.py:293(_Sentinel)
        1    0.000    0.000    0.000    0.000 _python_dispatch.py:14(TorchDispatchMode)
        1    0.000    0.000    0.000    0.000 _structures.py:35(NegativeInfinityType)
        1    0.000    0.000    0.000    0.000 autocast_mode.py:13(autocast)
        1    0.000    0.000    0.000    0.000 padding.py:31(ConstantPad1d)
        1    0.000    0.000    0.000    0.000 dir_util.py:15(SkipRepeatAbsolutePaths)
        1    0.000    0.000    0.000    0.000 lbfgsb.py:1(<module>)
        1    0.000    0.000    0.000    0.000 compressed.py:1(<module>)
        1    0.000    0.000    0.000    0.000 worker.py:124(_ResumeIteration)
        1    0.000    0.000    0.000    0.000 morestats.py:1(<module>)
        1    0.000    0.000    0.000    0.000 activation.py:1361(Softmin)
        1    0.000    0.000    0.000    0.000 tarfile.py:600(_FileInFile)
        1    0.000    0.000    0.000    0.000 error_functions.py:1669(Li)
        1    0.000    0.000    0.000    0.000 kind.py:156(__new__)
        1    0.000    0.000    0.000    0.000 ImageFile.py:113(ImageFile)
        1    0.000    0.000    0.000    0.000 scalarfloat.py:13(ScalarFloat)
        1    0.000    0.000    0.000    0.000 __init__.py:329(SymBool)
        1    0.000    0.000    0.000    0.000 _typing.py:36(JustInt)
        1    0.000    0.000    0.000    0.000 formal.py:1492(FiniteFormalPowerSeries)
        1    0.000    0.000    0.000    0.000 _bary_rational.py:196(AAA)
        1    0.000    0.000    0.000    0.000 hadamard.py:41(HadamardProduct)
        1    0.000    0.000    0.000    0.000 loss.py:1614(CTCLoss)
       13    0.000    0.000    0.000    0.000 fromnumeric.py:195(_reshape_dispatcher)
        1    0.000    0.000    0.000    0.000 ssl.py:159(TLSVersion)
        4    0.000    0.000    0.000    0.000 typing.py:442(__init__)
        1    0.000    0.000    0.000    0.000 kde.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:11743(argus_gen)
        1    0.000    0.000    0.000    0.000 sg_operation.py:11(SpaceGroupOp)
        1    0.000    0.000    0.000    0.000 mio5.py:1(<module>)
        1    0.000    0.000    0.000    0.000 scanner.py:1979(CommentBase)
        1    0.000    0.000    0.000    0.000 stackplot.py:1(<module>)
        1    0.000    0.000    0.000    0.000 numbers.py:2890(NegativeOne)
        1    0.000    0.000    0.000    0.000 extrapolation.py:266(levin_class)
        2    0.000    0.000    0.000    0.000 Image.py:3754(register_extension)
        1    0.000    0.000    0.000    0.000 activation.py:241(PReLU)
        1    0.000    0.000    0.000    0.000 _arffread.py:339(RelationalAttribute)
        1    0.000    0.000    0.000    0.000 special.py:68(GenericZeroMatrix)
        1    0.000    0.000    0.000    0.000 measurements.py:1(<module>)
        1    0.000    0.000    0.000    0.000 extras.py:1655(__init__)
        1    0.000    0.000    0.000    0.000 fancy_getopt.py:386(<dictcomp>)
        1    0.000    0.000    0.000    0.000 morphology.py:1(<module>)
        1    0.000    0.000    0.000    0.000 batchnorm.py:519(LazyBatchNorm3d)
        1    0.000    0.000    0.000    0.000 bezier.py:182(BezierSegment)
        1    0.000    0.000    0.000    0.000 shlex.py:19(shlex)
        1    0.000    0.000    0.000    0.000 ticker.py:1564(PercentFormatter)
        3    0.000    0.000    0.000    0.000 parser.py:17(__init__)
        1    0.000    0.000    0.000    0.000 flatten.py:9(Flatten)
        4    0.000    0.000    0.000    0.000 dataclasses.py:566(<genexpr>)
        1    0.000    0.000    0.000    0.000 hyper.py:959(HyperRep_asin1)
        1    0.000    0.000    0.000    0.000 utils.py:8(IterableWrapperIterDataPipe)
        1    0.000    0.000    0.000    0.000 text.py:1326(_AnnotationBase)
        1    0.000    0.000    0.000    0.000 ImageFile.py:458(StubImageFile)
        1    0.000    0.000    0.000    0.000 events.py:189(ScalarEvent)
        3    0.000    0.000    0.000    0.000 {built-in method time.time}
        1    0.000    0.000    0.000    0.000 conv_fused.py:407(ConvBnReLU1d)
        1    0.000    0.000    0.000    0.000 _atfork.py:15(_register)
        1    0.000    0.000    0.000    0.000 immutable.py:82(ImmutableDenseMatrix)
        1    0.000    0.000    0.000    0.000 complexes.py:820(conjugate)
        1    0.000    0.000    0.000    0.000 csr.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:5604(invweibull_gen)
        1    0.000    0.000    0.000    0.000 numbers.py:1490(andre)
        1    0.000    0.000    0.000    0.000 decomp_schur.py:1(<module>)
        1    0.000    0.000    0.000    0.000 json.py:713(MontyDecoder)
        1    0.000    0.000    0.000    0.000 ndgriddata.py:1(<module>)
        1    0.000    0.000    0.000    0.000 constraints.py:550(_Stack)
        1    0.000    0.000    0.000    0.000 fancysets.py:73(Naturals)
        1    0.000    0.000    0.000    0.000 dataloader.py:661(_SingleProcessDataLoaderIter)
      2/1    0.000    0.000    0.000    0.000 {method 'seekable' of '_io.BufferedReader' objects}
        1    0.000    0.000    0.000    0.000 bsr.py:1(<module>)
        9    0.000    0.000    0.000    0.000 multiarray.py:346(where)
        1    0.000    0.000    0.000    0.000 unix_events.py:1033(SafeChildWatcher)
        1    0.000    0.000    0.000    0.000 runner.py:30(TextTestResult)
        1    0.000    0.000    0.000    0.000 conv.py:19(Conv1d)
        4    0.000    0.000    0.000    0.000 polynomial.py:1218(_coeffs)
        1    0.000    0.000    0.000    0.000 _parser.py:394(_ymd)
        1    0.000    0.000    0.000    0.000 dropout.py:5(Dropout)
        1    0.000    0.000    0.000    0.000 parse.py:353(_fix_result_transcoding)
        1    0.000    0.000    0.000    0.000 tensor.py:792(_TensorManager)
        1    0.000    0.000    0.000    0.000 mstats_basic.py:1(<module>)
        1    0.000    0.000    0.000    0.000 GimpPaletteFile.py:23(GimpPaletteFile)
        1    0.000    0.000    0.000    0.000 fold.py:10(Fold)
        1    0.000    0.000    0.000    0.000 interpnd.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _encoded_words.py:73(_QByteMap)
        1    0.000    0.000    0.000    0.000 _backend.py:7(_ScipyBackend)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1962(dweibull_gen)
        1    0.000    0.000    0.000    0.000 calendar.py:295(TextCalendar)
        1    0.000    0.000    0.000    0.000 headerregistry.py:276(DateHeader)
        1    0.000    0.000    0.000    0.000 fitpack2.py:1(<module>)
        1    0.000    0.000    0.000    0.000 units.py:148(Unit)
        1    0.000    0.000    0.000    0.000 function.py:263(BackwardCFunction)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:302(<dictcomp>)
        3    0.000    0.000    0.000    0.000 __init__.py:43(private_class)
        1    0.000    0.000    0.000    0.000 _typing.py:210(_DataPipeType)
        1    0.000    0.000    0.000    0.000 _multivariate.py:4308(multivariate_t_gen)
        1    0.000    0.000    0.000    0.000 _ode.py:781(IntegratorBase)
        1    0.000    0.000    0.000    0.000 ctx_mp_python.py:330(_constant)
        2    0.000    0.000    0.000    0.000 weakref.py:352(__init__)
        1    0.000    0.000    0.000    0.000 threading.py:637(Barrier)
        1    0.000    0.000    0.000    0.000 core.py:117(<listcomp>)
        8    0.000    0.000    0.000    0.000 animation.py:116(wrapper)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:960(betaprime_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4888(invgamma_gen)
        1    0.000    0.000    0.000    0.000 composition.py:1400(ChemicalPotential)
        1    0.000    0.000    0.000    0.000 polar.py:111(PolarAffine)
        1    0.000    0.000    0.000    0.000 spectral.py:1(<module>)
        1    0.000    0.000    0.000    0.000 waveforms.py:1(<module>)
        1    0.000    0.000    0.000    0.000 decomp_svd.py:1(<module>)
        1    0.000    0.000    0.000    0.000 context.py:283(SpawnProcess)
        1    0.000    0.000    0.000    0.000 _typing.py:72(HasShape)
        1    0.000    0.000    0.000    0.000 _fit.py:41(FitResult)
        1    0.000    0.000    0.000    0.000 dates.py:1872(DateConverter)
        1    0.000    0.000    0.000    0.000 solvers.py:23(RawMatrix)
        1    0.000    0.000    0.000    0.000 _rules.py:346(_ArgFormatTooVerbose)
        1    0.000    0.000    0.000    0.000 csc.py:1(<module>)
        1    0.000    0.000    0.000    0.000 outputs.py:3920(Chgcar)
        1    0.000    0.000    0.000    0.000 _dok.py:589(dok_matrix)
        3    0.000    0.000    0.000    0.000 rcsetup.py:541(validate_ps_distiller)
        1    0.000    0.000    0.000    0.000 activation.py:52(Hardswish)
        1    0.000    0.000    0.000    0.000 _type_utils.py:338(<dictcomp>)
        1    0.000    0.000    0.000    0.000 index_tricks.py:530(__init__)
        6    0.000    0.000    0.000    0.000 printer.py:422(print_function)
        6    0.000    0.000    0.000    0.000 core.py:3614(<genexpr>)
        1    0.000    0.000    0.000    0.000 transpose.py:5(Transpose)
       25    0.000    0.000    0.000    0.000 polyoptions.py:198(<genexpr>)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:5508(FoldedDistribution)
        1    0.000    0.000    0.000    0.000 ctypeslib.py:181(_ndptr)
        1    0.000    0.000    0.000    0.000 zeros.py:1(<module>)
        1    0.000    0.000    0.000    0.000 utils.py:183(DisableOnWriteError)
        1    0.000    0.000    0.000    0.000 rnn.py:948(RNNCell)
        3    0.000    0.000    0.000    0.000 __init__.py:428(__init__)
        6    0.000    0.000    0.000    0.000 deprecation.py:81(_deprecated)
        1    0.000    0.000    0.000    0.000 triplot.py:1(<module>)
       12    0.000    0.000    0.000    0.000 message.py:633(get_default_type)
        1    0.000    0.000    0.000    0.000 slsqp.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ssl.py:185(_TLSAlertType)
        3    0.000    0.000    0.000    0.000 <frozen _collections_abc>:812(__init__)
        1    0.000    0.000    0.000    0.000 unix_events.py:593(_UnixWritePipeTransport)
        1    0.000    0.000    0.000    0.000 bessel.py:940(jn)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1511(chi_gen)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3112(_moment_methods)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7864(ncf_gen)
        1    0.000    0.000    0.000    0.000 qhull.py:1(<module>)
        1    0.000    0.000    0.000    0.000 mmio.py:1(<module>)
        1    0.000    0.000    0.000    0.000 transforms.py:900(StickBreakingTransform)
        1    0.000    0.000    0.000    0.000 _parser.py:219(_resultbase)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2062(_num_parameterizations)
        1    0.000    0.000    0.000    0.000 numbers.py:3757(Pi)
        1    0.000    0.000    0.000    0.000 _check.py:8(AttributeTypeIsSupportedChecker)
        1    0.000    0.000    0.000    0.000 permutations.py:244(Cycle)
        1    0.000    0.000    0.000    0.000 colors.py:102(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _multivariate.py:877(multivariate_normal_frozen)
        1    0.000    0.000    0.000    0.000 Image.py:3689(register_open)
        1    0.000    0.000    0.000    0.000 interpolation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 binrel.py:135(AppliedBinaryRelation)
        1    0.000    0.000    0.000    0.000 conv.py:1470(LazyConvTranspose2d)
        1    0.000    0.000    0.000    0.000 random.py:215(__init_subclass__)
        1    0.000    0.000    0.000    0.000 platform.py:739(_Processor)
        1    0.000    0.000    0.000    0.000 transports.py:197(SubprocessTransport)
        1    0.000    0.000    0.000    0.000 axis3d.py:484(ZAxis)
        1    0.000    0.000    0.000    0.000 hb.py:44(HBInfo)
        1    0.000    0.000    0.000    0.000 setupcfg.py:520(ConfigMetadataHandler)
        1    0.000    0.000    0.000    0.000 ase.py:55(MSONAtoms)
        1    0.000    0.000    0.000    0.000 signaltools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 linesearch.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _rules.py:42(_MissingCustomSymbolicFunction)
        1    0.000    0.000    0.000    0.000 complexes.py:696(arg)
        1    0.000    0.000    0.000    0.000 instancenorm.py:9(_InstanceNorm)
        6    0.000    0.000    0.000    0.000 conflict.py:37(<genexpr>)
        1    0.000    0.000    0.000    0.000 expr.py:4134(ExprBuilder)
        1    0.000    0.000    0.000    0.000 logistic_normal.py:8(LogisticNormal)
        1    0.000    0.000    0.000    0.000 sf_error.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pydoc.py:1855(<listcomp>)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:159(ChunkStream)
        1    0.000    0.000    0.000    0.000 more.py:2880(run_length)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7963(t_gen)
        3    0.000    0.000    0.000    0.000 units.py:808(wrap)
        1    0.000    0.000    0.000    0.000 mio5_params.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dia.py:1(<module>)
        4    0.000    0.000    0.000    0.000 sympify.py:28(__init__)
        1    0.000    0.000    0.000    0.000 lazy.py:53(LazyModuleMixin)
        1    0.000    0.000    0.000    0.000 dok.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:5097(_MultipleMatch)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7768(ncx2_gen)
        1    0.000    0.000    0.000    0.000 zeta_functions.py:584(dirichlet_eta)
        1    0.000    0.000    0.000    0.000 padding.py:341(ReplicationPad1d)
        1    0.000    0.000    0.000    0.000 _gauss_kronrod.py:9(GaussKronrodQuadrature)
        1    0.000    0.000    0.000    0.000 pycode.py:673(<dictcomp>)
        1    0.000    0.000    0.000    0.000 fake_quantize.py:261(FixedQParamsFakeQuantize)
        1    0.000    0.000    0.000    0.000 mg_operation.py:10(MagneticGroupOp)
        1    0.000    0.000    0.000    0.000 _arffread.py:95(NominalAttribute)
        7    0.000    0.000    0.000    0.000 {built-in method _stat.S_ISDIR}
        1    0.000    0.000    0.000    0.000 __init__.py:463(SelectableGroups)
        1    0.000    0.000    0.000    0.000 events.py:610(AbstractEventLoopPolicy)
        1    0.000    0.000    0.000    0.000 piecewise.py:19(ExprCondPair)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha512}
        1    0.000    0.000    0.000    0.000 _utils.py:25(EventMetrics)
        1    0.000    0.000    0.000    0.000 polynomials.py:1108(hermite_prob)
        1    0.000    0.000    0.000    0.000 request.py:426(OpenerDirector)
        1    0.000    0.000    0.000    0.000 miscellaneous.py:683(Max)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:412(AngleAddr)
        1    0.000    0.000    0.000    0.000 _covariance.py:538(CovViaCholesky)
        1    0.000    0.000    0.000    0.000 _apply_pyprojecttoml.py:503(_MissingDynamic)
        1    0.000    0.000    0.000    0.000 profiler.py:553(ExecutionGraphObserver)
        1    0.000    0.000    0.000    0.000 numbers.py:267(Rational)
        1    0.000    0.000    0.000    0.000 version.py:69(_BaseVersion)
        1    0.000    0.000    0.000    0.000 activation.py:568(SELU)
        1    0.000    0.000    0.000    0.000 construct.py:1(<module>)
        1    0.000    0.000    0.000    0.000 monomials.py:512(Monomial)
        1    0.000    0.000    0.000    0.000 calendar.py:74(<listcomp>)
        1    0.000    0.000    0.000    0.000 coo.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dviread.py:955(Encoding)
        1    0.000    0.000    0.000    0.000 hyper.py:1109(HyperRep_sinasin)
        1    0.000    0.000    0.000    0.000 elliptic_integrals.py:188(elliptic_e)
        1    0.000    0.000    0.000    0.000 outputs.py:3699(VolumetricData)
        1    0.000    0.000    0.000    0.000 _base.py:569(Executor)
        1    0.000    0.000    0.000    0.000 gammasimp.py:463(_rf)
        1    0.000    0.000    0.000    0.000 linalg.py:108(LinearAlgebraMethods)
        1    0.000    0.000    0.000    0.000 loss.py:28(_WeightedLoss)
        1    0.000    0.000    0.000    0.000 sets.py:2261(DisjointUnion)
        1    0.000    0.000    0.000    0.000 lil.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:10754(tukeylambda_gen)
        4    0.000    0.000    0.000    0.000 timeutils.py:53(timethis)
        1    0.000    0.000    0.000    0.000 _infra.py:129(Location)
       10    0.000    0.000    0.000    0.000 ctx_iv.py:355(_wrap_mpi_function)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3134(genpareto_gen)
        1    0.000    0.000    0.000    0.000 observer.py:1273(FixedQParamsObserver)
        1    0.000    0.000    0.000    0.000 headerregistry.py:402(MIMEVersionHeader)
        1    0.000    0.000    0.000    0.000 specfun.py:1(<module>)
        1    0.000    0.000    0.000    0.000 compat.py:38(ordereddict)
        1    0.000    0.000    0.000    0.000 test.py:56(<listcomp>)
        1    0.000    0.000    0.000    0.000 threading.py:544(Event)
        1    0.000    0.000    0.000    0.000 streamplot.py:365(StreamMask)
        1    0.000    0.000    0.000    0.000 _fortran.py:33(FortranFile)
        1    0.000    0.000    0.000    0.000 _parseaddr.py:512(AddressList)
        1    0.000    0.000    0.000    0.000 threading.py:1005(_set_native_id)
        1    0.000    0.000    0.000    0.000 ElementTree.py:477(QName)
        1    0.000    0.000    0.000    0.000 docinfo.py:25(Version)
        1    0.000    0.000    0.000    0.000 ellipse.py:1477(Circle)
        1    0.000    0.000    0.000    0.000 modules.py:260(FreeModuleElement)
        1    0.000    0.000    0.000    0.000 charset.py:167(Charset)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7473(kappa3_gen)
        1    0.000    0.000    0.000    0.000 streams.py:181(StreamReaderProtocol)
        1    0.000    0.000    0.000    0.000 batchnorm.py:48(BatchNorm2d)
        1    0.000    0.000    0.000    0.000 activation.py:617(GLU)
        2    0.000    0.000    0.000    0.000 constraints.py:315(__init__)
        1    0.000    0.000    0.000    0.000 _resampling.py:740(MonteCarloTestResult)
        1    0.000    0.000    0.000    0.000 outputs.py:194(BandgapProps)
        1    0.000    0.000    0.000    0.000 single.py:646(AlmostLinear)
        1    0.000    0.000    0.000    0.000 tnc.py:1(<module>)
        1    0.000    0.000    0.000    0.000 transforms.py:976(PositiveDefiniteTransform)
        1    0.000    0.000    0.000    0.000 diophantine.py:1029(GeneralPythagorean)
        1    0.000    0.000    0.000    0.000 hierarchy.py:1105(__init__)
        1    0.000    0.000    0.000    0.000 ImageFile.py:449(StubHandler)
        1    0.000    0.000    0.000    0.000 Image.py:468(ImagePointTransform)
        1    0.000    0.000    0.000    0.000 single.py:1046(SecondNonlinearAutonomousConserved)
        1    0.000    0.000    0.000    0.000 dataloader.py:71(_DatasetKind)
        1    0.000    0.000    0.000    0.000 scale.py:26(ScaleBase)
        1    0.000    0.000    0.000    0.000 core.py:5392(SkipTo)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha384}
        1    0.000    0.000    0.000    0.000 tensor.py:1270(TensorIndex)
        3    0.000    0.000    0.000    0.000 rcsetup.py:520(_update_savefig_format)
        1    0.000    0.000    0.000    0.000 comments.py:654(CommentedMapKeysView)
        1    0.000    0.000    0.000    0.000 hyper.py:978(HyperRep_asin2)
        1    0.000    0.000    0.000    0.000 Orbit_spd.py:16(orbit_spd)
        1    0.000    0.000    0.000    0.000 tensor.py:1597(TensorType)
        1    0.000    0.000    0.000    0.000 sparse_ndim_array.py:11(SparseNDimArray)
        1    0.000    0.000    0.000    0.000 _rbf.py:55(Rbf)
        1    0.000    0.000    0.000    0.000 factorials.py:664(FallingFactorial)
        1    0.000    0.000    0.000    0.000 activation.py:109(LeakyReLU)
        1    0.000    0.000    0.000    0.000 pc_groups.py:42(Collector)
        1    0.000    0.000    0.000    0.000 gzip.py:75(_PaddedFile)
        1    0.000    0.000    0.000    0.000 trigonometric.py:3448(atan2)
        1    0.000    0.000    0.000    0.000 context.py:276(ForkProcess)
        1    0.000    0.000    0.000    0.000 pathlib.py:129(<setcomp>)
        1    0.000    0.000    0.000    0.000 polynomials.py:1006(hermite)
        1    0.000    0.000    0.000    0.000 threading.py:359(notify)
        1    0.000    0.000    0.000    0.000 backend_tools.py:694(ToolHome)
        1    0.000    0.000    0.000    0.000 _type_utils.py:293(<dictcomp>)
        1    0.000    0.000    0.000    0.000 special.py:174(GenericIdentity)
        1    0.000    0.000    0.000    0.000 outputs.py:3894(Locpot)
        1    0.000    0.000    0.000    0.000 facts.py:257(Prover)
        1    0.000    0.000    0.000    0.000 hyper.py:1031(HyperRep_sqrts2)
        1    0.000    0.000    0.000    0.000 formal.py:958(Coeff)
        1    0.000    0.000    0.000    0.000 callable.py:18(MapperMapDataPipe)
        1    0.000    0.000    0.000    0.000 operations.py:487(LatticeOp)
        1    0.000    0.000    0.000    0.000 function.py:410(Function)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1783(DraggableOffsetBox)
        1    0.000    0.000    0.000    0.000 tricontour.py:8(TriContourSet)
        1    0.000    0.000    0.000    0.000 transforms.py:2106(BlendedGenericTransform)
        1    0.000    0.000    0.000    0.000 batchnorm.py:78(BatchNorm3d)
        1    0.000    0.000    0.000    0.000 backend_tools.py:444(ToolGrid)
        1    0.000    0.000    0.000    0.000 grad_mode.py:258(_force_original_view_tracking)
        1    0.000    0.000    0.000    0.000 __init__.py:7(ProjectionRegistry)
        1    0.000    0.000    0.000    0.000 more.py:270(peekable)
        5    0.000    0.000    0.000    0.000 core.py:3142(re_match)
        1    0.000    0.000    0.000    0.000 dense_ndim_array.py:160(MutableDenseNDimArray)
        1    0.000    0.000    0.000    0.000 bn_relu.py:48(BNReLU3d)
        1    0.000    0.000    0.000    0.000 function.py:252(_HookMixin)
        1    0.000    0.000    0.000    0.000 backend_tools.py:319(ToolCursorPosition)
        1    0.000    0.000    0.000    0.000 colors.py:956(Normalize)
        1    0.000    0.000    0.000    0.000 dataframes.py:371(CaptureDataFrameWithDataPipeOps)
        1    0.000    0.000    0.000    0.000 _polyint.py:19(_Interpolator1D)
        2    0.000    0.000    0.000    0.000 main.py:1482(__init__)
        1    0.000    0.000    0.000    0.000 polynomials.py:889(assoc_legendre)
        1    0.000    0.000    0.000    0.000 conv_relu.py:69(ConvReLU2d)
        1    0.000    0.000    0.000    0.000 spfun_stats.py:1(<module>)
        2    0.000    0.000    0.000    0.000 multidimensional.py:81(__init__)
        4    0.000    0.000    0.000    0.000 ops.py:52(nan_if_exception)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1104(boltzmann_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7553(moyal_gen)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:608(G_Function)
        1    0.000    0.000    0.000    0.000 _multivariate.py:4776(multivariate_t_frozen)
        1    0.000    0.000    0.000    0.000 polynomials.py:1210(laguerre)
        1    0.000    0.000    0.000    0.000 sets.py:2192(SymmetricDifference)
        1    0.000    0.000    0.000    0.000 _multivariate.py:4186(__init__)
        1    0.000    0.000    0.000    0.000 _special_sparse_arrays.py:518(Sakurai)
        1    0.000    0.000    0.000    0.000 category.py:26(StrCategoryConverter)
        3    0.000    0.000    0.000    0.000 _utils.py:7(_get_device_index)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:6247(levy_gen)
        1    0.000    0.000    0.000    0.000 immutable.py:140(ImmutableSparseMatrix)
        1    0.000    0.000    0.000    0.000 ElementTree.py:1384(TreeBuilder)
        1    0.000    0.000    0.000    0.000 __init__.py:79(_TextToBytesWrapper)
        1    0.000    0.000    0.000    0.000 line.py:2362(Segment2D)
        6    0.000    0.000    0.000    0.000 profiler_util.py:348(_attr_formatter)
        1    0.000    0.000    0.000    0.000 getlimits.py:32(MachArLike)
        1    0.000    0.000    0.000    0.000 scalarstring.py:23(ScalarString)
        1    0.000    0.000    0.000    0.000 _spherical_voronoi.py:36(SphericalVoronoi)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7002(gibrat_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:6574(loggamma_gen)
        2    0.000    0.000    0.000    0.000 pretty_symbology.py:234(<lambda>)
        1    0.000    0.000    0.000    0.000 computed_entries.py:112(ConstantEnergyAdjustment)
        1    0.000    0.000    0.000    0.000 bessel.py:1723(airyaiprime)
        1    0.000    0.000    0.000    0.000 polar.py:464(_ThetaShift)
        1    0.000    0.000    0.000    0.000 dataframes.py:282(CaptureSetItem)
        7    0.000    0.000    0.000    0.000 {method 'truncate' of '_io.StringIO' objects}
        1    0.000    0.000    0.000    0.000 __init__.py:408(Deprecated)
        9    0.000    0.000    0.000    0.000 fromnumeric.py:2172(_sum_dispatcher)
        1    0.000    0.000    0.000    0.000 dropout.py:8(_DropoutNd)
        1    0.000    0.000    0.000    0.000 outputs.py:3969(Elfcar)
        1    0.000    0.000    0.000    0.000 boolalg.py:281(BooleanTrue)
        1    0.000    0.000    0.000    0.000 loss.py:104(NLLLoss)
        1    0.000    0.000    0.000    0.000 index_tricks.py:255(__init__)
        1    0.000    0.000    0.000    0.000 image.py:841(AxesImage)
        3    0.000    0.000    0.000    0.000 __init__.py:421(<genexpr>)
        1    0.000    0.000    0.000    0.000 polynomials.py:290(gegenbauer)
        1    0.000    0.000    0.000    0.000 trirefine.py:47(UniformTriRefiner)
        1    0.000    0.000    0.000    0.000 dataframes.py:417(DataFrameTracer)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2380(fatiguelife_gen)
        1    0.000    0.000    0.000    0.000 animation.py:534(PillowWriter)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3936(__init__)
        1    0.000    0.000    0.000    0.000 trigonometric.py:45(TrigonometricFunction)
        1    0.000    0.000    0.000    0.000 loss.py:1032(CrossEntropyLoss)
        1    0.000    0.000    0.000    0.000 polynomials.py:773(legendre)
        1    0.000    0.000    0.000    0.000 function.py:16(FunctionCtx)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4200(gompertz_gen)
        1    0.000    0.000    0.000    0.000 observer.py:52(_PartialWrapper)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:54(_Storage)
        1    0.000    0.000    0.000    0.000 serialization.py:294(_open_zipfile_writer_buffer)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2511(f_gen)
        1    0.000    0.000    0.000    0.000 backend_bases.py:3282(ToolContainerBase)
        1    0.000    0.000    0.000    0.000 complexes.py:954(adjoint)
        8    0.000    0.000    0.000    0.000 animation.py:106(register)
        1    0.000    0.000    0.000    0.000 error_functions.py:912(erfcinv)
        1    0.000    0.000    0.000    0.000 factorials.py:383(factorial2)
        1    0.000    0.000    0.000    0.000 dataset.py:181(TensorDataset)
        1    0.000    0.000    0.000    0.000 backend_tools.py:404(ToolQuitAll)
        1    0.000    0.000    0.000    0.000 polyoptions.py:327(Sort)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:8080(nct_gen)
        1    0.000    0.000    0.000    0.000 polynomials.py:561(chebyshevu)
        1    0.000    0.000    0.000    0.000 puiseux.py:59(PuiseuxRing)
        1    0.000    0.000    0.000    0.000 factorials.py:503(RisingFactorial)
        1    0.000    0.000    0.000    0.000 animation.py:657(AVConvBase)
        1    0.000    0.000    0.000    0.000 hb.py:414(HBFile)
        1    0.000    0.000    0.000    0.000 lsoda.py:7(LSODA)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:103(ksone_gen)
        1    0.000    0.000    0.000    0.000 complexes.py:1105(periodic_argument)
        1    0.000    0.000    0.000    0.000 orderings.py:10(MonomialOrder)
        1    0.000    0.000    0.000    0.000 animation.py:1452(ArtistAnimation)
        2    0.000    0.000    0.000    0.000 __init__.py:132(DistutilsLoader)
        1    0.000    0.000    0.000    0.000 representer.py:383(Representer)
        1    0.000    0.000    0.000    0.000 widgets.py:63(Widget)
        1    0.000    0.000    0.000    0.000 conv.py:155(Conv3d)
        1    0.000    0.000    0.000    0.000 fourier.py:475(FiniteFourierSeries)
        1    0.000    0.000    0.000    0.000 _resampling.py:257(BootstrapResult)
        1    0.000    0.000    0.000    0.000 _svdp.py:50(_AProd)
        1    0.000    0.000    0.000    0.000 _bary_rational.py:36(_BarycentricRational)
        3    0.000    0.000    0.000    0.000 tag.py:25(__init__)
        1    0.000    0.000    0.000    0.000 linear_relu.py:116(LinearTanh)
        1    0.000    0.000    0.000    0.000 _diagnostic.py:40(ExportDiagnostic)
        1    0.000    0.000    0.000    0.000 polynomials.py:28(OrthogonalPolynomial)
        1    0.000    0.000    0.000    0.000 functions.py:89(defun_static)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1367(StructuredVoidFormat)
       11    0.000    0.000    0.000    0.000 {built-in method io.text_encoding}
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:5135(geninvgauss_gen)
        1    0.000    0.000    0.000    0.000 tensor_functions.py:42(LeviCivita)
        1    0.000    0.000    0.000    0.000 _mio4.py:601(MatFile4Writer)
        1    0.000    0.000    0.000    0.000 polyoptions.py:602(Symmetric)
        1    0.000    0.000    0.000    0.000 _multivariate.py:6964(normal_inverse_gamma_gen)
        1    0.000    0.000    0.000    0.000 _multivariate.py:5401(__init__)
        1    0.000    0.000    0.000    0.000 quadrature.py:5(QuadratureRule)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9998(triang_gen)
        4    0.000    0.000    0.000    0.000 results.py:266(__len__)
        1    0.000    0.000    0.000    0.000 polynomials.py:45(jacobi)
        1    0.000    0.000    0.000    0.000 error_functions.py:2327(FresnelIntegral)
        1    0.000    0.000    0.000    0.000 pixelshuffle.py:8(PixelShuffle)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:5932(landau_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9528(semicircular_gen)
        1    0.000    0.000    0.000    0.000 para4band.py:331(<listcomp>)
        1    0.000    0.000    0.000    0.000 modules.py:160(ModuleElement)
        1    0.000    0.000    0.000    0.000 relational.py:752(Unequality)
        1    0.000    0.000    0.000    0.000 constraints.py:328(_GreaterThanEq)
        1    0.000    0.000    0.000    0.000 backend_tools.py:160(ToolToggleBase)
        1    0.000    0.000    0.000    0.000 Image.py:3018(ImagePointHandler)
        6    0.000    0.000    0.000    0.000 sdm.py:83(<genexpr>)
        1    0.000    0.000    0.000    0.000 decoder.py:236(MatHandler)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3816(gengamma_gen)
        1    0.000    0.000    0.000    0.000 comments.py:692(CommentedMapValuesView)
        1    0.000    0.000    0.000    0.000 _tanhsinh.py:1197(<listcomp>)
        1    0.000    0.000    0.000    0.000 _arraytools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 linear_relu.py:6(LinearReLU)
        1    0.000    0.000    0.000    0.000 backend_tools.py:459(ToolMinorGrid)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7066(maxwell_gen)
        1    0.000    0.000    0.000    0.000 bessel.py:1880(airybiprime)
        1    0.000    0.000    0.000    0.000 numbers.py:1604(partition)
        1    0.000    0.000    0.000    0.000 autograd_function.py:536(CtxWithSavedTensors)
        1    0.000    0.000    0.000    0.000 mathtext.py:2107(Ship)
        3    0.000    0.000    0.000    0.000 datetime.py:46(_days_before_year)
        1    0.000    0.000    0.000    0.000 channelshuffle.py:8(ChannelShuffle)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:6099(laplace_asymmetric_gen)
        1    0.000    0.000    0.000    0.000 _stats_py.py:4297(PearsonRResult)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha256}
        1    0.000    0.000    0.000    0.000 timeit.py:84(Timer)
        1    0.000    0.000    0.000    0.000 radau.py:179(Radau)
        1    0.000    0.000    0.000    0.000 utils.py:104(_Deprecate)
        1    0.000    0.000    0.000    0.000 {built-in method torch._C._jit_init}
        1    0.000    0.000    0.000    0.000 sequences.py:1020(SeqAdd)
        1    0.000    0.000    0.000    0.000 permutation.py:168(MatrixPermute)
        1    0.000    0.000    0.000    0.000 spglib.py:365(SpaceGroupType)
        1    0.000    0.000    0.000    0.000 epathtools.py:6(EPath)
        1    0.000    0.000    0.000    0.000 reduction.py:251(AbstractReducer)
        1    0.000    0.000    0.000    0.000 perm_groups.py:5258(SymmetricPermutationGroup)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:842(SupportsInt)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:965(__new__)
        3    0.000    0.000    0.000    0.000 units.py:791(unitized)
        1    0.000    0.000    0.000    0.000 _vertex.py:75(VertexScalarField)
        1    0.000    0.000    0.000    0.000 gamma_functions.py:1255(multigamma)
        7    0.000    0.000    0.000    0.000 __init__.py:176(is_initialized)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1490(KeyEvent)
        1    0.000    0.000    0.000    0.000 mathtext.py:1899(GlueSpec)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:197(betabinom_gen)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:282(<listcomp>)
        1    0.000    0.000    0.000    0.000 ring.py:9(Ring)
        1    0.000    0.000    0.000    0.000 __init__.py:61(get_calls)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:238(_Interval)
        1    0.000    0.000    0.000    0.000 linear.py:208(LazyLinear)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1171(randint_gen)
        1    0.000    0.000    0.000    0.000 polyoptions.py:512(Split)
        1    0.000    0.000    0.000    0.000 feedparser.py:45(BufferedSubFile)
        1    0.000    0.000    0.000    0.000 mathtext.py:755(UnicodeFonts)
        1    0.000    0.000    0.000    0.000 _pep440.py:165(LegacyVersion)
        5    0.000    0.000    0.000    0.000 datetime.py:51(_days_in_month)
        1    0.000    0.000    0.000    0.000 __init__.py:732(Context)
        1    0.000    0.000    0.000    0.000 relaxed_bernoulli.py:94(RelaxedBernoulli)
        1    0.000    0.000    0.000    0.000 function.py:826(AppliedUndef)
        1    0.000    0.000    0.000    0.000 _arffread.py:256(DateAttribute)
        1    0.000    0.000    0.000    0.000 dataloader.py:567(_BaseDataLoaderIter)
        1    0.000    0.000    0.000    0.000 utils.py:97(lazy_property)
        6    0.000    0.000    0.000    0.000 expr.py:1021(_eval_power)
        1    0.000    0.000    0.000    0.000 widgets.py:91(AxesWidget)
        1    0.000    0.000    0.000    0.000 Image.py:521(SupportsGetData)
        1    0.000    0.000    0.000    0.000 _interface.py:593(_CustomLinearOperator)
        1    0.000    0.000    0.000    0.000 filelist.py:335(_UniqueDirs)
        1    0.000    0.000    0.000    0.000 boolalg.py:1370(ITE)
        1    0.000    0.000    0.000    0.000 _linprog_doc.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:6351(levy_l_gen)
        1    0.000    0.000    0.000    0.000 pycode.py:765(<dictcomp>)
       12    0.000    0.000    0.000    0.000 distance.py:1814(<lambda>)
        1    0.000    0.000    0.000    0.000 _kdtree.py:327(innernode)
        1    0.000    0.000    0.000    0.000 collections.py:934(PathCollection)
        1    0.000    0.000    0.000    0.000 collections.py:1769(PatchCollection)
        1    0.000    0.000    0.000    0.000 polyoptions.py:648(Formal)
        1    0.000    0.000    0.000    0.000 _multivariate.py:123(_PSD)
        1    0.000    0.000    0.000    0.000 {built-in method _ctypes.byref}
        1    0.000    0.000    0.000    0.000 core.py:3782(WordStart)
        1    0.000    0.000    0.000    0.000 numbers.py:1037(euler)
        1    0.000    0.000    0.000    0.000 __init__.py:23(get_projection_names)
        2    0.000    0.000    0.000    0.000 __init__.py:87(__setattr__)
        1    0.000    0.000    0.000    0.000 runners.py:21(Runner)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:8974(rdist_gen)
        1    0.000    0.000    0.000    0.000 mock.py:2441(__new__)
        1    0.000    0.000    0.000    0.000 polar.py:144(InvertedPolarTransform)
        1    0.000    0.000    0.000    0.000 __init__.py:758(is_url)
        1    0.000    0.000    0.000    0.000 hyper.py:1062(HyperRep_log2)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1384(<listcomp>)
        1    0.000    0.000    0.000    0.000 _mio4.py:107(VarReader4)
        3    0.000    0.000    0.000    0.000 wrappers.py:204(<listcomp>)
        1    0.000    0.000    0.000    0.000 blocking_input.py:330(BlockingKeyMouseInput)
        1    0.000    0.000    0.000    0.000 _parseaddr.py:211(AddrlistClass)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1686(cosine_gen)
        3    0.000    0.000    0.000    0.000 _add_docstring.py:11(add_newdoc)
        1    0.000    0.000    0.000    0.000 _multivariate.py:4881(multivariate_hypergeom_gen)
        1    0.000    0.000    0.000    0.000 subprocess.py:115(Process)
        1    0.000    0.000    0.000    0.000 activation.py:199(MultiheadAttention)
        1    0.000    0.000    0.000    0.000 __init__.py:321(CDLL)
        1    0.000    0.000    0.000    0.000 client.py:1398(HTTPSConnection)
        1    0.000    0.000    0.000    0.000 rnn.py:1043(GRUCell)
        1    0.000    0.000    0.000    0.000 tensor.py:5253(get_postprocessor)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:408(Pow)
        1    0.000    0.000    0.000    0.000 normalization.py:63(CrossMapLRN2d)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:196(kstwo_gen)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1295(zipf_gen)
        3    0.000    0.000    0.000    0.000 utils.py:16(<genexpr>)
        1    0.000    0.000    0.000    0.000 _pep440.py:149(__ge__)
        1    0.000    0.000    0.000    0.000 loss.py:1336(MultiMarginLoss)
        1    0.000    0.000    0.000    0.000 backend_tools.py:414(_ToolEnableAllNavigation)
        6    0.000    0.000    0.000    0.000 _type_aliases.py:92(<genexpr>)
        1    0.000    0.000    0.000    0.000 error_functions.py:1765(TrigonometricIntegral)
        1    0.000    0.000    0.000    0.000 normalization.py:198(GroupNorm)
        1    0.000    0.000    0.000    0.000 backend_tools.py:474(ToolFullScreen)
        1    0.000    0.000    0.000    0.000 backend_tools.py:504(ToolYScale)
        1    0.000    0.000    0.000    0.000 sequences.py:415(SeqExpr)
        1    0.000    0.000    0.000    0.000 boolalg.py:856(Not)
        1    0.000    0.000    0.000    0.000 _typing.py:7(RingElement)
        1    0.000    0.000    0.000    0.000 miscellaneous.py:864(Rem)
        1    0.000    0.000    0.000    0.000 _ops.py:44(PyOperatorABC)
        2    0.000    0.000    0.000    0.000 pyplot.py:211(_get_required_interactive_framework)
        1    0.000    0.000    0.000    0.000 line.py:1578(Segment)
        1    0.000    0.000    0.000    0.000 _compression.py:33(DecompressReader)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:5777(johnsonsb_gen)
        1    0.000    0.000    0.000    0.000 mock.py:2891(PropertyMock)
        1    0.000    0.000    0.000    0.000 __init__.py:230(_remove_shim)
        1    0.000    0.000    0.000    0.000 field.py:8(Field)
        1    0.000    0.000    0.000    0.000 widgets.py:2647(Lasso)
        1    0.000    0.000    0.000    0.000 _elffile.py:41(ELFFile)
        1    0.000    0.000    0.000    0.000 observer.py:1393(NoopObserver)
        1    0.000    0.000    0.000    0.000 _symbolic_trace.py:895(_PatchedFnSetAttr)
        1    0.000    0.000    0.000    0.000 ticker.py:2735(LogitLocator)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1567(poisson_binom_gen)
        1    0.000    0.000    0.000    0.000 observer.py:1311(PlaceholderObserver)
        1    0.000    0.000    0.000    0.000 band_data_out.py:9(BandDataOut)
        1    0.000    0.000    0.000    0.000 ImageFile.py:488(Parser)
        1    0.000    0.000    0.000    0.000 _ode.py:1209(dop853)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1390(zipfian_gen)
        1    0.000    0.000    0.000    0.000 activation.py:110(RReLU)
        7    0.000    0.000    0.000    0.000 numeric.py:1455(<listcomp>)
        1    0.000    0.000    0.000    0.000 _relative_risk.py:19(RelativeRiskResult)
        1    0.000    0.000    0.000    0.000 polar.py:720(_WedgeBbox)
        1    0.000    0.000    0.000    0.000 _tensor_str.py:99(_Formatter)
        1    0.000    0.000    0.000    0.000 observer.py:520(MovingAverageMinMaxObserver)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:402(betanbinom_gen)
        1    0.000    0.000    0.000    0.000 elliptic_integrals.py:310(elliptic_pi)
        2    0.000    0.000    0.000    0.000 cache.py:183(LazyFunctionMeta)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:1087(CyclicLR)
        1    0.000    0.000    0.000    0.000 mock.py:1084(CallableMixin)
        1    0.000    0.000    0.000    0.000 core.py:1283(_replace_dtype_fields_recursive)
        1    0.000    0.000    0.000    0.000 bz2.py:140(writable)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:913(WhiteSpaceTerminal)
        1    0.000    0.000    0.000    0.000 cnf.py:77(OR)
        1    0.000    0.000    0.000    0.000 instancenorm.py:385(LazyInstanceNorm3d)
        6    0.000    0.000    0.000    0.000 core.py:5906(postParse)
        1    0.000    0.000    0.000    0.000 units.py:682(_my_partial)
        1    0.000    0.000    0.000    0.000 expand.py:379(EnsurePackagesDiscovered)
        1    0.000    0.000    0.000    0.000 polyoptions.py:543(Extension)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:810(__len__)
        1    0.000    0.000    0.000    0.000 _util.py:1062(_RichResult)
        1    0.000    0.000    0.000    0.000 markers.py:52(Environment)
        1    0.000    0.000    0.000    0.000 mathieu_functions.py:24(mathieus)
        1    0.000    0.000    0.000    0.000 graph.py:214(PythonCode)
        1    0.000    0.000    0.000    0.000 string.py:188(Formatter)
        1    0.000    0.000    0.000    0.000 error_functions.py:819(erfinv)
        1    0.000    0.000    0.000    0.000 pyplot.py:92(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:4387(TransformedDistribution)
        1    0.000    0.000    0.000    0.000 _info.py:33(__array_namespace_info__)
        1    0.000    0.000    0.000    0.000 pooling.py:497(AvgPool1d)
        1    0.000    0.000    0.000    0.000 ordinals.py:5(OmegaPower)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:8917(powernorm_gen)
        1    0.000    0.000    0.000    0.000 _cubature.py:535(_VariableTransform)
        1    0.000    0.000    0.000    0.000 relational.py:1150(LessThan)
        2    0.000    0.000    0.000    0.000 {method 'title' of 'str' objects}
        1    0.000    0.000    0.000    0.000 dos.py:622(DosFingerprint)
        1    0.000    0.000    0.000    0.000 header.py:541(_Accumulator)
        1    0.000    0.000    0.000    0.000 limits.py:132(Limit)
        1    0.000    0.000    0.000    0.000 ticker.py:2903(AutoMinorLocator)
        4    0.000    0.000    0.000    0.000 numbers.py:2871(__neg__)
        1    0.000    0.000    0.000    0.000 bessel.py:2044(marcumq)
        1    0.000    0.000    0.000    0.000 graph.py:607(_PyTreeCodeGen)
        1    0.000    0.000    0.000    0.000 cm.py:75(_DeprecatedCmapDictWrapper)
        1    0.000    0.000    0.000    0.000 backend_tools.py:1030(ToolCopyToClipboardBase)
        1    0.000    0.000    0.000    0.000 _morestats.py:2625(_ABW)
        1    0.000    0.000    0.000    0.000 _trace.py:565(TracerWarning)
        1    0.000    0.000    0.000    0.000 context.py:220(Process)
        1    0.000    0.000    0.000    0.000 dist.py:75(__getattr__)
        1    0.000    0.000    0.000    0.000 _guards.py:354(Source)
        1    0.000    0.000    0.000    0.000 conv_fused.py:458(ConvReLU1d)
        3    0.000    0.000    0.000    0.000 symbolic_opset9.py:765(_reduce_op_symbolic)
        1    0.000    0.000    0.000    0.000 _wilcoxon.py:12(WilcoxonDistribution)
        1    0.000    0.000    0.000    0.000 shape_prop.py:68(ShapeProp)
        1    0.000    0.000    0.000    0.000 mock.py:2069(MagicMixin)
        2    0.000    0.000    0.000    0.000 _parser.py:96(checkgroup)
        1    0.000    0.000    0.000    0.000 complexes.py:1020(polar_lift)
        1    0.000    0.000    0.000    0.000 activation.py:80(ELU)
        1    0.000    0.000    0.000    0.000 __init__.py:764(Grouper)
        1    0.000    0.000    0.000    0.000 _infra.py:203(ThreadFlowLocation)
        4    0.000    0.000    0.000    0.000 _array_api.py:131(array_namespace)
        1    0.000    0.000    0.000    0.000 single.py:2012(SecondHypergeometric)
        1    0.000    0.000    0.000    0.000 extension.py:38(Extension)
        1    0.000    0.000    0.000    0.000 core.py:376(dtype)
        1    0.000    0.000    0.000    0.000 __init__.py:44(__init__)
        1    0.000    0.000    0.000    0.000 threading.py:1421(_DummyThread)
        1    0.000    0.000    0.000    0.000 _matfuncs.py:171(MatrixPowerOperator)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:870(Terminal)
        1    0.000    0.000    0.000    0.000 parser.py:818(RoundTripParserSC)
        1    0.000    0.000    0.000    0.000 ssl.py:227(_TLSMessageType)
        1    0.000    0.000    0.000    0.000 _cubature.py:589(_InfiniteLimitsTransform)
        1    0.000    0.000    0.000    0.000 computed_entries.py:168(CompositionEnergyAdjustment)
        4    0.000    0.000    0.000    0.000 math2.py:42(_mathfun)
        2    0.000    0.000    0.000    0.000 <frozen posixpath>:52(normcase)
        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:964(create_module)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9274(rice_gen)
        1    0.000    0.000    0.000    0.000 _special_sparse_arrays.py:757(MikotaK)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1483(dlaplace_gen)
        1    0.000    0.000    0.000    0.000 text.py:1243(OffsetFrom)
        1    0.000    0.000    0.000    0.000 complexes.py:897(transpose)
        2    0.000    0.000    0.000    0.000 glob.py:108(<genexpr>)
        1    0.000    0.000    0.000    0.000 _adapters.py:48(SpecPath)
        1    0.000    0.000    0.000    0.000 modules.py:1847(ModuleEndomorphism)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:509(LinearLR)
        1    0.000    0.000    0.000    0.000 _lbfgsb_py.py:513(LbfgsInvHessProduct)
        1    0.000    0.000    0.000    0.000 core.py:2589(MaskedIterator)
        1    0.000    0.000    0.000    0.000 mathtext.py:82(MathtextBackend)
        1    0.000    0.000    0.000    0.000 lambdarepr.py:20(LambdaPrinter)
        1    0.000    0.000    0.000    0.000 miscellaneous.py:801(Min)
        1    0.000    0.000    0.000    0.000 _diagnostic.py:81(ExportDiagnosticEngine)
        1    0.000    0.000    0.000    0.000 padding.py:173(_ReflectionPadNd)
        1    0.000    0.000    0.000    0.000 core.py:4862(AtLineStart)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:12129(studentized_range_gen)
        1    0.000    0.000    0.000    0.000 _fortran_format_parser.py:96(ExpFormat)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9591(skewcauchy_gen)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3117(_zero)
        1    0.000    0.000    0.000    0.000 gruntz.py:155(SubsSet)
        1    0.000    0.000    0.000    0.000 threading.py:103(_RLock)
        1    0.000    0.000    0.000    0.000 determinant.py:9(Determinant)
        1    0.000    0.000    0.000    0.000 numbers.py:1662(divisor_sigma)
        1    0.000    0.000    0.000    0.000 gzip.py:80(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:169(<listcomp>)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:782(_make_node_sizes_strides)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:402(MultiStepLR)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:11491(halfgennorm_gen)
        1    0.000    0.000    0.000    0.000 equality.py:25(EqualityPredicate)
        4    0.000    0.000    0.000    0.000 {built-in method from_iterable}
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:611(arcsine_gen)
        1    0.000    0.000    0.000    0.000 csv.py:23(Dialect)
        2    0.000    0.000    0.000    0.000 constraints.py:366(__init__)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:721(MimeParameters)
        1    0.000    0.000    0.000    0.000 polynomials.py:1320(assoc_laguerre)
        1    0.000    0.000    0.000    0.000 numbers.py:2039(primenu)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1849(_nchypergeom_gen)
        1    0.000    0.000    0.000    0.000 _pep440.py:45(Infinity)
        4    0.000    0.000    0.000    0.000 _multiufuncs.py:72(_override_resolve_out_shapes)
        1    0.000    0.000    0.000    0.000 _globals.py:32(_NoValueType)
        1    0.000    0.000    0.000    0.000 _base.py:154(FixedRule)
        1    0.000    0.000    0.000    0.000 rrule.py:94(rrulebase)
        1    0.000    0.000    0.000    0.000 normalization.py:46(GroupNorm)
        1    0.000    0.000    0.000    0.000 numbers.py:1959(mobius)
        1    0.000    0.000    0.000    0.000 _resampling.py:2105(MonteCarloMethod)
        4    0.000    0.000    0.000    0.000 core.py:3417(dtype)
        1    0.000    0.000    0.000    0.000 abc.py:43(Finder)
        1    0.000    0.000    0.000    0.000 _docs.py:1(<module>)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:232(LinearTriInterpolator)
        1    0.000    0.000    0.000    0.000 selectors.py:290(SelectSelector)
        9    0.000    0.000    0.000    0.000 core.py:4247(<genexpr>)
        1    0.000    0.000    0.000    0.000 datapipes.py:42(ConcatDataFramesPipe)
        2    0.000    0.000    0.000    0.000 constraints.py:332(__init__)
        1    0.000    0.000    0.000    0.000 transforms.py:2460(BboxTransform)
        1    0.000    0.000    0.000    0.000 patches.py:2349(Roundtooth)
        3    0.000    0.000    0.000    0.000 core.py:1362(getmask)
        1    0.000    0.000    0.000    0.000 normalization.py:81(InstanceNorm1d)
        1    0.000    0.000    0.000    0.000 _contextlib.py:120(_DecoratorContextManager)
        1    0.000    0.000    0.000    0.000 rnn.py:40(RNNCellBase)
        1    0.000    0.000    0.000    0.000 relational.py:909(GreaterThan)
        1    0.000    0.000    0.000    0.000 sequences.py:1126(SeqMul)
        1    0.000    0.000    0.000    0.000 axis.py:409(XTick)
        1    0.000    0.000    0.000    0.000 pickle.py:200(_Framer)
        1    0.000    0.000    0.000    0.000 argparse.py:691(ArgumentDefaultsHelpFormatter)
        1    0.000    0.000    0.000    0.000 header.py:179(Header)
        1    0.000    0.000    0.000    0.000 animation.py:561(FFMpegBase)
        1    0.000    0.000    0.000    0.000 unix_events.py:1212(MultiLoopChildWatcher)
        1    0.000    0.000    0.000    0.000 net_min_base.py:58(_MinimizerSettingBase)
        1    0.000    0.000    0.000    0.000 evalf.py:1560(EvalfMixin)
        1    0.000    0.000    0.000    0.000 backend_registry.py:74(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2972(weibull_max_gen)
        1    0.000    0.000    0.000    0.000 docinfo.py:112(DocInfo)
        1    0.000    0.000    0.000    0.000 modules.py:286(FreeModule)
        1    0.000    0.000    0.000    0.000 observer.py:804(MovingAveragePerChannelMinMaxObserver)
        1    0.000    0.000    0.000    0.000 headerregistry.py:504(ContentTransferEncodingHeader)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3915(genhalflogistic_gen)
        1    0.000    0.000    0.000    0.000 _ufunc_config.py:30(<dictcomp>)
        1    0.000    0.000    0.000    0.000 beta_functions.py:282(betainc_regularized)
        1    0.000    0.000    0.000    0.000 cnf.py:394(EncodedCNF)
        8    0.000    0.000    0.000    0.000 _multiufuncs.py:61(_override_key)
        1    0.000    0.000    0.000    0.000 distance.py:56(CosineSimilarity)
        1    0.000    0.000    0.000    0.000 _jit_internal.py:1395(_TensorExtractor)
        1    0.000    0.000    0.000    0.000 periodic_table.py:852(_ElementMeta)
        1    0.000    0.000    0.000    0.000 _functions.py:180(CrossMapLRN2d)
        1    0.000    0.000    0.000    0.000 optimization.py:7(OptimizationMethods)
        1    0.000    0.000    0.000    0.000 numbers.py:1729(udivisor_sigma)
        5    0.000    0.000    0.000    0.000 six.py:186(_get_module)
        1    0.000    0.000    0.000    0.000 __config__.py:98(<listcomp>)
        1    0.000    0.000    0.000    0.000 blas.py:249(<dictcomp>)
        1    0.000    0.000    0.000    0.000 companion.py:8(CompanionMatrix)
        1    0.000    0.000    0.000    0.000 polyoptions.py:621(Auto)
        1    0.000    0.000    0.000    0.000 _functions.py:37(ReduceAddCoalesced)
        1    0.000    0.000    0.000    0.000 _differentiable_functions.py:53(_ScalarHessWrapper)
        1    0.000    0.000    0.000    0.000 weak.py:37(WeakIdRef)
        1    0.000    0.000    0.000    0.000 equality.py:69(UnequalityPredicate)
        1    0.000    0.000    0.000    0.000 memmap.py:22(memmap)
        1    0.000    0.000    0.000    0.000 __init__.py:226(insert_shim)
        1    0.000    0.000    0.000    0.000 collections.py:1102(PolyCollection)
        1    0.000    0.000    0.000    0.000 _cm.py:66(cubehelix)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:2443(__init__)
        1    0.000    0.000    0.000    0.000 polyoptions.py:576(Modulus)
        1    0.000    0.000    0.000    0.000 _stats_py.py:5955(TtestResult)
        1    0.000    0.000    0.000    0.000 assumptions.py:464(StdFactKB)
        1    0.000    0.000    0.000    0.000 events.py:161(AbstractServer)
        6    0.000    0.000    0.000    0.000 version.py:471(_parse_letter_version)
        1    0.000    0.000    0.000    0.000 json.py:552(MontyEncoder)
        1    0.000    0.000    0.000    0.000 _hypotests.py:705(SomersDResult)
        1    0.000    0.000    0.000    0.000 _cubic.py:569(CubicSpline)
        1    0.000    0.000    0.000    0.000 series.py:1229(List2DSeries)
        1    0.000    0.000    0.000    0.000 _expm_multiply.py:396(LazyOperatorNormInfo)
        1    0.000    0.000    0.000    0.000 expr_with_intlimits.py:13(ExprWithIntLimits)
        1    0.000    0.000    0.000    0.000 request.py:645(HTTPRedirectHandler)
        1    0.000    0.000    0.000    0.000 __init__.py:7(Warning)
        1    0.000    0.000    0.000    0.000 records.py:223(record)
        1    0.000    0.000    0.000    0.000 polyoptions.py:271(Gens)
        1    0.000    0.000    0.000    0.000 numbers.py:2194(reduced_totient)
        1    0.000    0.000    0.000    0.000 _nonlin.py:843(BroydenFirst)
        1    0.000    0.000    0.000    0.000 sequences.py:378(EmptySequence)
        1    0.000    0.000    0.000    0.000 polyoptions.py:258(Expand)
        1    0.000    0.000    0.000    0.000 tempfile.py:132(_RandomNameSequence)
        1    0.000    0.000    0.000    0.000 comments.py:671(CommentedMapItemsView)
        9    0.000    0.000    0.000    0.000 typing.py:495(__repr__)
        1    0.000    0.000    0.000    0.000 padding.py:184(ReflectionPad1d)
        1    0.000    0.000    0.000    0.000 diagonal.py:9(DiagonalMatrix)
        1    0.000    0.000    0.000    0.000 sequences.py:466(SeqPer)
        1    0.000    0.000    0.000    0.000 numbers.py:2091(primeomega)
        1    0.000    0.000    0.000    0.000 transforms.py:2088(_BlendedMixin)
        1    0.000    0.000    0.000    0.000 __init__.py:531(__init__)
        1    0.000    0.000    0.000    0.000 dataset.py:252(ChainDataset)
        1    0.000    0.000    0.000    0.000 numbers.py:1920(kronecker_symbol)
        1    0.000    0.000    0.000    0.000 six.py:169(_SixMetaPathImporter)
        1    0.000    0.000    0.000    0.000 _vertex.py:247(VertexCacheField)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2324(exponpow_gen)
        1    0.000    0.000    0.000    0.000 __init__.py:1198(is_interactive)
        1    0.000    0.000    0.000    0.000 conv_fused.py:539(ConvBnReLU2d)
        1    0.000    0.000    0.000    0.000 _nonlin.py:1175(DiagBroyden)
        1    0.000    0.000    0.000    0.000 _functools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2249(exponweib_gen)
        1    0.000    0.000    0.000    0.000 selector_events.py:1126(_SelectorDatagramTransport)
        1    0.000    0.000    0.000    0.000 pooling.py:249(_MaxUnpoolNd)
        3    0.000    0.000    0.000    0.000 __init__.py:1319(disable)
        7    0.000    0.000    0.000    0.000 typing.py:406(__init_subclass__)
        1    0.000    0.000    0.000    0.000 tableform.py:9(TableForm)
        1    0.000    0.000    0.000    0.000 pathlib.py:231(_PosixFlavour)
        1    0.000    0.000    0.000    0.000 _multivariate.py:245(multi_rv_frozen)
        1    0.000    0.000    0.000    0.000 relational.py:827(_Inequality)
        4    0.000    0.000    0.000    0.000 stride_tricks.py:25(_maybe_view_as_subclass)
        1    0.000    0.000    0.000    0.000 _ode.py:1049(zvode)
        1    0.000    0.000    0.000    0.000 ticker.py:183(_DummyAxis)
        1    0.000    0.000    0.000    0.000 fancysets.py:239(Reals)
        1    0.000    0.000    0.000    0.000 resolver.py:303(VersionedResolver)
        1    0.000    0.000    0.000    0.000 encoder.py:74(JSONEncoder)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:1140(_fdat)
        1    0.000    0.000    0.000    0.000 loader.py:77(__init__)
        1    0.000    0.000    0.000    0.000 core.py:877(_DomainGreaterEqual)
        1    0.000    0.000    0.000    0.000 logic.py:320(AndOr_Base)
        1    0.000    0.000    0.000    0.000 cnf.py:109(AND)
        1    0.000    0.000    0.000    0.000 _nonlin.py:454(InverseJacobian)
        1    0.000    0.000    0.000    0.000 transports.py:9(BaseTransport)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:505(IsNonOverlappingAndDenseIndicator)
        1    0.000    0.000    0.000    0.000 kind.py:165(_BooleanKind)
        1    0.000    0.000    0.000    0.000 padding.py:225(ReflectionPad2d)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7134(mielke_gen)
        1    0.000    0.000    0.000    0.000 category.py:133(StrCategoryFormatter)
        1    0.000    0.000    0.000    0.000 fused.py:113(BNReLU3d)
        5    0.000    0.000    0.000    0.000 transforms.py:224(_noconds_)
        1    0.000    0.000    0.000    0.000 _ops.py:418(OpOverloadPacket)
        1    0.000    0.000    0.000    0.000 _optimize.py:2439(Brent)
        1    0.000    0.000    0.000    0.000 __init__.py:123(DeprecatedTuple)
        1    0.000    0.000    0.000    0.000 _comparison.py:74(<dictcomp>)
        1    0.000    0.000    0.000    0.000 scanner.py:2044(ScannedComments)
        1    0.000    0.000    0.000    0.000 tools.py:38(typed)
        1    0.000    0.000    0.000    0.000 _infra.py:230(Graph)
        1    0.000    0.000    0.000    0.000 core.py:6735(_extrema_operation)
        1    0.000    0.000    0.000    0.000 sdm.py:1447(unop_dict)
        1    0.000    0.000    0.000    0.000 bandstructure.py:707(BandStructureSymmLine)
        1    0.000    0.000    0.000    0.000 dropout.py:62(Dropout1d)
        1    0.000    0.000    0.000    0.000 core.py:190(<listcomp>)
        1    0.000    0.000    0.000    0.000 sharding.py:25(ShardingFilterIterDataPipe)
        1    0.000    0.000    0.000    0.000 __init__.py:936(setLevel)
        1    0.000    0.000    0.000    0.000 _mio4.py:461(VarWriter4)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:1001(_DOF_estimator)
        1    0.000    0.000    0.000    0.000 rnn.py:1248(GRUCell)
        1    0.000    0.000    0.000    0.000 widgets.py:1836(ToolHandles)
        1    0.000    0.000    0.000    0.000 threading.py:264(__enter__)
        1    0.000    0.000    0.000    0.000 ecm.py:17(Point)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:2447(_UnpackAlias)
        1    0.000    0.000    0.000    0.000 core.py:2362(_PendingSkip)
        1    0.000    0.000    0.000    0.000 art3d.py:293(Patch3D)
        1    0.000    0.000    0.000    0.000 records.py:308(recarray)
        1    0.000    0.000    0.000    0.000 arpack.py:990(IterOpInv)
        4    0.000    0.000    0.000    0.000 numbers.py:1444(_eval_is_zero)
        1    0.000    0.000    0.000    0.000 backend_tools.py:514(ToolXScale)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:1189(BivariateSpline)
        1    0.000    0.000    0.000    0.000 complexes.py:1233(principal_branch)
        1    0.000    0.000    0.000    0.000 transforms.py:2624(AffineDeltaTransform)
        1    0.000    0.000    0.000    0.000 graph_drawer.py:322(FxGraphDrawer)
        1    0.000    0.000    0.000    0.000 loss.py:301(GaussianNLLLoss)
        1    0.000    0.000    0.000    0.000 backend_tools.py:703(ToolBack)
        6    0.000    0.000    0.000    0.000 symbolic_opset8.py:76(_interpolate)
        1    0.000    0.000    0.000    0.000 ticker.py:923(LogFormatter)
        1    0.000    0.000    0.000    0.000 _hessian_update_strategy.py:11(HessianUpdateStrategy)
        1    0.000    0.000    0.000    0.000 argparse.py:1047(_AppendConstAction)
        1    0.000    0.000    0.000    0.000 _classes.py:18(_Classes)
        1    0.000    0.000    0.000    0.000 series.py:1608(Parametric2DLineSeries)
        1    0.000    0.000    0.000    0.000 _typing.py:44(JustFloat)
        1    0.000    0.000    0.000    0.000 subprocess.py:163(TimeoutExpired)
        1    0.000    0.000    0.000    0.000 _rules.py:92(_OperatorSupportedInNewerOpsetVersion)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1304(OffsetImage)
        1    0.000    0.000    0.000    0.000 _special_sparse_arrays.py:688(MikotaM)
        1    0.000    0.000    0.000    0.000 rnn.py:492(GRU)
        1    0.000    0.000    0.000    0.000 _ops.py:116(__init__)
        1    0.000    0.000    0.000    0.000 beta_functions.py:173(betainc)
        1    0.000    0.000    0.000    0.000 scanner.py:1730(RoundTripScanner)
        1    0.000    0.000    0.000    0.000 single.py:443(FirstExact)
        3    0.000    0.000    0.000    0.000 utils.py:17(<genexpr>)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:26(LRScheduler)
        1    0.000    0.000    0.000    0.000 core.py:5202(_generateDefaultName)
        6    0.000    0.000    0.000    0.000 fuser_method_mappings.py:153(_sequential_wrapper2)
        6    0.000    0.000    0.000    0.000 symbolic_opset9.py:1997(_interpolate)
        1    0.000    0.000    0.000    0.000 wavfile.py:31(SeekEmulatingReader)
        1    0.000    0.000    0.000    0.000 TiffTags.py:32(TagInfo)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:902(logser_gen)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1162(MeijerUnShiftA)
        1    0.000    0.000    0.000    0.000 mathtext.py:1618(Hlist)
        1    0.000    0.000    0.000    0.000 dates.py:947(rrulewrapper)
        1    0.000    0.000    0.000    0.000 backend_tools.py:248(SetCursorBase)
        1    0.000    0.000    0.000    0.000 _adapters.py:83(ChildPath)
        1    0.000    0.000    0.000    0.000 numbers.py:3825(GoldenRatio)
        1    0.000    0.000    0.000    0.000 chi2.py:6(Chi2)
        1    0.000    0.000    0.000    0.000 _constraints.py:127(LinearConstraint)
        1    0.000    0.000    0.000    0.000 numbers.py:1849(jacobi_symbol)
        1    0.000    0.000    0.000    0.000 formal.py:1690(FormalPowerSeriesInverse)
        1    0.000    0.000    0.000    0.000 gui.py:24(tqdm_gui)
        3    0.000    0.000    0.000    0.000 _version.py:78(_compare_version)
        1    0.000    0.000    0.000    0.000 _compression.py:16(_check_can_read)
        1    0.000    0.000    0.000    0.000 embedding_ops.py:75(EmbeddingBag)
        1    0.000    0.000    0.000    0.000 matrices.py:747(MatrixMethods)
        2    0.000    0.000    0.000    0.000 constraint_registry.py:83(__init__)
        3    0.000    0.000    0.000    0.000 <frozen _collections_abc>:98(__subclasshook__)
        1    0.000    0.000    0.000    0.000 fold.py:156(Unfold)
        1    0.000    0.000    0.000    0.000 _rbfinterp.py:134(RBFInterpolator)
        1    0.000    0.000    0.000    0.000 headerregistry.py:104(Group)
        1    0.000    0.000    0.000    0.000 due.py:22(InactiveDueCreditCollector)
        1    0.000    0.000    0.000    0.000 linear.py:21(Identity)
        8    0.000    0.000    0.000    0.000 six.py:80(_add_doc)
        1    0.000    0.000    0.000    0.000 colorbar.py:229(_ColorbarAutoLocator)
        1    0.000    0.000    0.000    0.000 spawn.py:12(ProcessException)
        1    0.000    0.000    0.000    0.000 __init__.py:488(StringTemplateStyle)
        1    0.000    0.000    0.000    0.000 _common.py:6(weekday)
        4    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:4346(_shift_scale_distribution_function)
        1    0.000    0.000    0.000    0.000 _parser.py:661(_result)
        1    0.000    0.000    0.000    0.000 boolalg.py:1108(Nand)
        1    0.000    0.000    0.000    0.000 numbers.py:2954(Half)
        1    0.000    0.000    0.000    0.000 exp_family.py:6(ExponentialFamily)
        1    0.000    0.000    0.000    0.000 combining.py:238(_ChildDataPipe)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:420(TrueDiv)
        1    0.000    0.000    0.000    0.000 numbers.py:2252(primepi)
        1    0.000    0.000    0.000    0.000 transforms.py:1169(CumulativeDistributionTransform)
        1    0.000    0.000    0.000    0.000 conv.py:1264(LazyConv2d)
        1    0.000    0.000    0.000    0.000 _policybase.py:18(_PolicyBase)
        1    0.000    0.000    0.000    0.000 patches.py:2850(_Base)
        1    0.000    0.000    0.000    0.000 outputs.py:1766(BSVasprun)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:897(SupportsRound)
        1    0.000    0.000    0.000    0.000 transforms.py:1696(AffineBase)
        1    0.000    0.000    0.000    0.000 colorsys.py:1(<module>)
        1    0.000    0.000    0.000    0.000 results.py:22(_ParseResultsWithOffset)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9889(trapezoid_gen)
        1    0.000    0.000    0.000    0.000 _decorator.py:11(functional_datapipe)
        1    0.000    0.000    0.000    0.000 ElementTree.py:1105(_ListDataStream)
        1    0.000    0.000    0.000    0.000 error_functions.py:2759(_eis)
        1    0.000    0.000    0.000    0.000 numbers.py:1801(legendre_symbol)
        1    0.000    0.000    0.000    0.000 getlimits.py:630(iinfo)
        1    0.000    0.000    0.000    0.000 line.py:2670(Ray3D)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9471(recipinvgauss_gen)
        6    0.000    0.000    0.000    0.000 fromnumeric.py:2317(_any_dispatcher)
        1    0.000    0.000    0.000    0.000 bdf.py:72(BDF)
        1    0.000    0.000    0.000    0.000 pycode.py:837(SymPyPrinter)
        1    0.000    0.000    0.000    0.000 homomorphisms.py:444(MatrixHomomorphism)
        1    0.000    0.000    0.000    0.000 queues.py:218(PriorityQueue)
        1    0.000    0.000    0.000    0.000 cse_main.py:345(Unevaluated)
        1    0.000    0.000    0.000    0.000 stubs.py:38(QuantWrapper)
        1    0.000    0.000    0.000    0.000 _input_validation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _root_scalar.py:20(MemoizeDer)
        1    0.000    0.000    0.000    0.000 factor_.py:740(maxsize)
        1    0.000    0.000    0.000    0.000 _VF.py:19(VFModule)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:751(Protocol)
        1    0.000    0.000    0.000    0.000 error_functions.py:995(erf2inv)
        1    0.000    0.000    0.000    0.000 offsetbox.py:770(TextArea)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2632(foldnorm_gen)
        1    0.000    0.000    0.000    0.000 padding.py:277(ReflectionPad3d)
        2    0.000    0.000    0.000    0.000 reprlib.py:9(recursive_repr)
        1    0.000    0.000    0.000    0.000 _resampling.py:981(PowerResult)
        1    0.000    0.000    0.000    0.000 _mangling.py:9(PackageMangler)
        1    0.000    0.000    0.000    0.000 numbers.py:4020(Catalan)
        1    0.000    0.000    0.000    0.000 _stats_py.py:11053(_SimpleBeta)
        1    0.000    0.000    0.000    0.000 hyper.py:937(HyperRep_atanh)
        1    0.000    0.000    0.000    0.000 _policybase.py:271(Compat32)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:293(kstwobign_gen)
        1    0.000    0.000    0.000    0.000 boolalg.py:397(BooleanFalse)
        1    0.000    0.000    0.000    0.000 conv_fused.py:590(ConvReLU2d)
        1    0.000    0.000    0.000    0.000 boolalg.py:1202(Implies)
        1    0.000    0.000    0.000    0.000 pycode.py:89(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:5674(jf_skew_t_gen)
        1    0.000    0.000    0.000    0.000 Bravais_Lattice.py:10(bravaislattice)
        1    0.000    0.000    0.000    0.000 widgets.py:2443(PolygonSelector)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:928(_BivariateSplineBase)
        1    0.000    0.000    0.000    0.000 relational.py:873(_Greater)
        1    0.000    0.000    0.000    0.000 scalarfloat.py:103(ExponentialCapsFloat)
        1    0.000    0.000    0.000    0.000 single.py:1203(Separable)
        1    0.000    0.000    0.000    0.000 numbers.py:277(lucas)
        1    0.000    0.000    0.000    0.000 {method 'getrandbits' of '_random.Random' objects}
        1    0.000    0.000    0.000    0.000 csv.py:165(Sniffer)
        1    0.000    0.000    0.000    0.000 __init__.py:199(strict_fusion)
        1    0.000    0.000    0.000    0.000 mathtext.py:1262(FontConstantsBase)
        1    0.000    0.000    0.000    0.000 _backend.py:36(_backend_from_arg)
        1    0.000    0.000    0.000    0.000 observer.py:1419(ReuseInputObserver)
        1    0.000    0.000    0.000    0.000 transports.py:251(_FlowControlMixin)
       10    0.000    0.000    0.000    0.000 contextlib.py:65(_recreate_cm)
        1    0.000    0.000    0.000    0.000 loader.py:71(RoundTripLoader)
        1    0.000    0.000    0.000    0.000 torch_version.py:41(TorchVersion)
        1    0.000    0.000    0.000    0.000 conv.py:90(Conv2d)
        1    0.000    0.000    0.000    0.000 distributed.py:194(_DDPJoinHook)
        1    0.000    0.000    0.000    0.000 loss.py:539(BCELoss)
        1    0.000    0.000    0.000    0.000 __init__.py:2317(JupyterHTMLStr)
        1    0.000    0.000    0.000    0.000 diagonal.py:157(DiagMatrix)
        1    0.000    0.000    0.000    0.000 suite.py:92(TestSuite)
        1    0.000    0.000    0.000    0.000 request.py:2399(ftpwrapper)
        1    0.000    0.000    0.000    0.000 transforms.py:2598(ScaledTranslation)
        1    0.000    0.000    0.000    0.000 numbers.py:2144(totient)
        6    0.000    0.000    0.000    0.000 iterables.py:858(<genexpr>)
        1    0.000    0.000    0.000    0.000 _stats_py.py:11024(_SimpleNormal)
        1    0.000    0.000    0.000    0.000 mathtext.py:137(MathtextBackendAgg)
        1    0.000    0.000    0.000    0.000 pythonmpq.py:122(__bool__)
        1    0.000    0.000    0.000    0.000 package_importer.py:662(_PackageNode)
        1    0.000    0.000    0.000    0.000 enumerative.py:92(PartComponent)
        1    0.000    0.000    0.000    0.000 _resampling.py:1314(PermutationTestResult)
        1    0.000    0.000    0.000    0.000 _factories.py:13(__call__)
        1    0.000    0.000    0.000    0.000 transforms.py:2562(BboxTransformFrom)
        1    0.000    0.000    0.000    0.000 comments.py:230(LineCol)
        1    0.000    0.000    0.000    0.000 diagonal.py:86(DiagonalOf)
        1    0.000    0.000    0.000    0.000 modules.py:1106(SubModulePolyRing)
        1    0.000    0.000    0.000    0.000 zipfile.py:1131(_ZipWriteFile)
        1    0.000    0.000    0.000    0.000 _collections.py:27(Pair)
        1    0.000    0.000    0.000    0.000 sym_operation.py:4(SymOp)
        1    0.000    0.000    0.000    0.000 expand.py:422(LazyMappingProxy)
        1    0.000    0.000    0.000    0.000 normalization.py:121(InstanceNorm2d)
        1    0.000    0.000    0.000    0.000 normalization.py:161(InstanceNorm3d)
        1    0.000    0.000    0.000    0.000 pathlib.py:304(__init__)
        1    0.000    0.000    0.000    0.000 _factories.py:9(__init__)
        1    0.000    0.000    0.000    0.000 pixelshuffle.py:60(PixelUnshuffle)
        1    0.000    0.000    0.000    0.000 relational.py:1185(StrictLessThan)
        1    0.000    0.000    0.000    0.000 cse_main.py:218(FuncArgTracker)
        1    0.000    0.000    0.000    0.000 containers.py:339(OrderedSet)
        4    0.000    0.000    0.000    0.000 expr.py:3570(as_coeff_Mul)
        1    0.000    0.000    0.000    0.000 padding.py:475(ZeroPad2d)
        1    0.000    0.000    0.000    0.000 single.py:294(SinglePatternODESolver)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:913(Reader)
        1    0.000    0.000    0.000    0.000 loss.py:1179(MultiLabelSoftMarginLoss)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:626(_ProtocolMeta)
        1    0.000    0.000    0.000    0.000 _basinhopping.py:18(Storage)
        1    0.000    0.000    0.000    0.000 selectors.py:442(EpollSelector)
        1    0.000    0.000    0.000    0.000 _resampling.py:2082(ResamplingMethod)
        1    0.000    0.000    0.000    0.000 context.py:230(DefaultContext)
        1    0.000    0.000    0.000    0.000 python.py:10(PythonPrinter)
        1    0.000    0.000    0.000    0.000 formal.py:1543(FormalPowerSeriesProduct)
        1    0.000    0.000    0.000    0.000 transforms.py:107(__init__)
        1    0.000    0.000    0.000    0.000 version.py:38(_Version)
        1    0.000    0.000    0.000    0.000 __init__.py:840(_CudaBase)
        1    0.000    0.000    0.000    0.000 Files_in.py:3(FilesIn)
        1    0.000    0.000    0.000    0.000 _rules.py:126(_FxTracerSuccess)
        1    0.000    0.000    0.000    0.000 relational.py:1167(StrictGreaterThan)
        1    0.000    0.000    0.000    0.000 selectors.py:206(_BaseSelectorImpl)
        1    0.000    0.000    0.000    0.000 para4tb.py:133(__init__)
        1    0.000    0.000    0.000    0.000 conv_fused.py:763(ConvReLU3d)
        1    0.000    0.000    0.000    0.000 qconfig.py:106(QConfigDynamic)
        1    0.000    0.000    0.000    0.000 index_tricks.py:562(__init__)
        1    0.000    0.000    0.000    0.000 zeta_functions.py:667(riemann_xi)
        1    0.000    0.000    0.000    0.000 boolalg.py:1487(Exclusive)
        1    0.000    0.000    0.000    0.000 _odds_ratio.py:174(OddsRatioResult)
        1    0.000    0.000    0.000    0.000 batchnorm.py:186(_LazyNormBase)
        1    0.000    0.000    0.000    0.000 equality.py:113(StrictGreaterThanPredicate)
        6    0.000    0.000    0.000    0.000 feedparser.py:125(__iter__)
        1    0.000    0.000    0.000    0.000 more.py:941(bucket)
        3    0.000    0.000    0.000    0.000 _new_distributions.py:343(_moment_central_formula)
        1    0.000    0.000    0.000    0.000 rules.py:5(Transform)
        1    0.000    0.000    0.000    0.000 _guards.py:216(DuplicateInputs)
        1    0.000    0.000    0.000    0.000 _threadsafety.py:13(ReentrancyLock)
        1    0.000    0.000    0.000    0.000 ImageMode.py:24(ModeDescriptor)
        1    0.000    0.000    0.000    0.000 single.py:1748(LinearCoefficients)
        1    0.000    0.000    0.000    0.000 data_parallel.py:42(DataParallel)
        1    0.000    0.000    0.000    0.000 _kdtree.py:318(leafnode)
        1    0.000    0.000    0.000    0.000 library.py:18(Library)
        1    0.000    0.000    0.000    0.000 _matfuncs.py:207(ProductOperator)
        1    0.000    0.000    0.000    0.000 pydoc.py:523(HTMLRepr)
        3    0.000    0.000    0.000    0.000 rcsetup.py:217(validate_dpi)
        1    0.000    0.000    0.000    0.000 _script.py:1534(_ScriptProfile)
        6    0.000    0.000    0.000    0.000 core.py:846(__init__)
        3    0.000    0.000    0.000    0.000 __init__.py:504(CFunctionType)
        1    0.000    0.000    0.000    0.000 figure.py:159(SubplotParams)
        1    0.000    0.000    0.000    0.000 _dual_annealing.py:20(VisitingDistribution)
        1    0.000    0.000    0.000    0.000 tempfile.py:416(_TemporaryFileCloser)
        1    0.000    0.000    0.000    0.000 tz.py:328(_ttinfo)
        1    0.000    0.000    0.000    0.000 ElementTree.py:1272(XMLPullParser)
        1    0.000    0.000    0.000    0.000 _base.py:245(NestedFixedRule)
        1    0.000    0.000    0.000    0.000 _functions.py:273(BackwardHookFunction)
        1    0.000    0.000    0.000    0.000 _dtype_like.py:81(_SupportsDType)
        1    0.000    0.000    0.000    0.000 tz.py:874(tzrange)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:775(_Parameterization)
        1    0.000    0.000    0.000    0.000 sequences.py:611(SeqFormula)
        1    0.000    0.000    0.000    0.000 unix_events.py:902(PidfdChildWatcher)
        1    0.000    0.000    0.000    0.000 dispatcher.py:366(MethodDispatcher)
        1    0.000    0.000    0.000    0.000 grad_scaler.py:13(_MultiDeviceReplicator)
       12    0.000    0.000    0.000    0.000 core.py:970(clear)
        1    0.000    0.000    0.000    0.000 locks.py:24(Lock)
        1    0.000    0.000    0.000    0.000 _page_trend_test.py:417(_PageL)
        1    0.000    0.000    0.000    0.000 encoder.py:105(__init__)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:385(NameAddr)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:1232(_Sparse_Matrix_coo)
        6    0.000    0.000    0.000    0.000 _common.py:13(tzname_in_python2)
        1    0.000    0.000    0.000    0.000 parameter.py:13(Parameter)
        2    0.000    0.000    0.000    0.000 compat.py:113(__init__)
        1    0.000    0.000    0.000    0.000 _sensitivity_analysis.py:155(BootstrapSobolResult)
        1    0.000    0.000    0.000    0.000 Files_out.py:2(FilesOut)
        1    0.000    0.000    0.000    0.000 image.py:1351(BboxImage)
        1    0.000    0.000    0.000    0.000 calendar.py:156(__init__)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:930(Writer)
        1    0.000    0.000    0.000    0.000 __init__.py:154(HTTPMethod)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4829(gausshyper_gen)
        2    0.000    0.000    0.000    0.000 {built-in method _sqlite3.register_converter}
        1    0.000    0.000    0.000    0.000 loss.py:726(HingeEmbeddingLoss)
        1    0.000    0.000    0.000    0.000 abc.py:230(ExecutionLoader)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2149(exponnorm_gen)
        1    0.000    0.000    0.000    0.000 random.py:784(SystemRandom)
        1    0.000    0.000    0.000    0.000 spglib.py:402(MagneticSpaceGroupType)
        2    0.000    0.000    0.000    0.000 _adapters.py:16(__getattr__)
        1    0.000    0.000    0.000    0.000 _hessian_update_strategy.py:285(BFGS)
        1    0.000    0.000    0.000    0.000 parameters.py:60(__init__)
        1    0.000    0.000    0.000    0.000 calendar.py:412(HTMLCalendar)
        3    0.000    0.000    0.000    0.000 {method 'toordinal' of 'datetime.date' objects}
        1    0.000    0.000    0.000    0.000 _arffread.py:170(NumericAttribute)
        1    0.000    0.000    0.000    0.000 setupcfg.py:759(_AmbiguousMarker)
        5    0.000    0.000    0.000    0.000 _inspect.py:143(<lambda>)
        1    0.000    0.000    0.000    0.000 mathieu_functions.py:86(mathieuc)
        1    0.000    0.000    0.000    0.000 __init__.py:58(cuFFTPlanCacheManager)
        1    0.000    0.000    0.000    0.000 __init__.py:790(Filterer)
        9    0.000    0.000    0.000    0.000 _globals.py:58(__repr__)
        1    0.000    0.000    0.000    0.000 ImageFile.py:812(PyDecoder)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:860(SupportsComplex)
        1    0.000    0.000    0.000    0.000 legend_handler.py:652(__init__)
        1    0.000    0.000    0.000    0.000 distance.py:1744(CDistMetricWrapper)
        1    0.000    0.000    0.000    0.000 reductions.py:22(StorageWeakRef)
        1    0.000    0.000    0.000    0.000 request.py:1588(CacheFTPHandler)
        1    0.000    0.000    0.000    0.000 _rules.py:182(_FxFrontendAotautograd)
        1    0.000    0.000    0.000    0.000 _differentiable_functions.py:463(_VectorHessWrapper)
        1    0.000    0.000    0.000    0.000 outputs.py:5528(Eigenval)
        2    0.000    0.000    0.000    0.000 constraints.py:290(__init__)
        1    0.000    0.000    0.000    0.000 loss.py:35(L1Loss)
        1    0.000    0.000    0.000    0.000 package_exporter.py:103(_PatternInfo)
        1    0.000    0.000    0.000    0.000 grouping.py:19(__getattr__)
        1    0.000    0.000    0.000    0.000 mlab.py:962(GaussianKDE)
        1    0.000    0.000    0.000    0.000 colors.py:1174(LogNorm)
        8    0.000    0.000    0.000    0.000 _pep440.py:70(__neg__)
        1    0.000    0.000    0.000    0.000 _rules.py:300(_FxNodeToOnnx)
        1    0.000    0.000    0.000    0.000 _survival.py:469(LogRankResult)
        1    0.000    0.000    0.000    0.000 activation.py:68(ReLU)
        1    0.000    0.000    0.000    0.000 headerregistry.py:439(ParameterizedMIMEHeader)
        4    0.000    0.000    0.000    0.000 utils.py:8(_ntuple)
        2    0.000    0.000    0.000    0.000 representer.py:137(add_multi_representer)
        1    0.000    0.000    0.000    0.000 _decorator.py:47(guaranteed_datapipes_determinism)
        1    0.000    0.000    0.000    0.000 polyoptions.py:711(Symbols)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:851(SupportsFloat)
        1    0.000    0.000    0.000    0.000 unix_events.py:1107(FastChildWatcher)
        1    0.000    0.000    0.000    0.000 discovery.py:179(PEP420PackageFinder)
        1    0.000    0.000    0.000    0.000 _trace.py:1111(TracedModule)
        1    0.000    0.000    0.000    0.000 pooling.py:990(_AdaptiveMaxPoolNd)
        1    0.000    0.000    0.000    0.000 scalarbool.py:21(ScalarBoolean)
        1    0.000    0.000    0.000    0.000 mathieu_functions.py:210(mathieucprime)
        1    0.000    0.000    0.000    0.000 symbol.py:26(Str)
        1    0.000    0.000    0.000    0.000 mathtext.py:1374(Node)
        1    0.000    0.000    0.000    0.000 autograd_function.py:547(CtxCustomSave)
        1    0.000    0.000    0.000    0.000 equality.py:161(GreaterThanPredicate)
        1    0.000    0.000    0.000    0.000 zeta_functions.py:706(stieltjes)
        1    0.000    0.000    0.000    0.000 graph.py:247(_node_list)
        1    0.000    0.000    0.000    0.000 constraints.py:186(_IndependentConstraint)
        1    0.000    0.000    0.000    0.000 process.py:364(_ParentProcess)
        1    0.000    0.000    0.000    0.000 polyoptions.py:384(Composite)
        1    0.000    0.000    0.000    0.000 unix_events.py:1426(_UnixDefaultEventLoopPolicy)
        1    0.000    0.000    0.000    0.000 polyoptions.py:684(Gen)
        1    0.000    0.000    0.000    0.000 batchnorm.py:121(_BatchNorm)
        1    0.000    0.000    0.000    0.000 transforms.py:89(__init__)
        1    0.000    0.000    0.000    0.000 colorbar.py:262(_ColorbarAutoMinorLocator)
        1    0.000    0.000    0.000    0.000 _script.py:215(OrderedModuleDict)
        1    0.000    0.000    0.000    0.000 line.py:1872(LinearEntity2D)
        1    0.000    0.000    0.000    0.000 expr_with_limits.py:538(AddWithLimits)
        1    0.000    0.000    0.000    0.000 transforms.py:1428(HankelTypeTransform)
        1    0.000    0.000    0.000    0.000 fnmatch.py:12(WildCard)
        1    0.000    0.000    0.000    0.000 determinant.py:72(Permanent)
        1    0.000    0.000    0.000    0.000 transforms.py:783(CorrCholeskyTransform)
        1    0.000    0.000    0.000    0.000 tensor.py:4849(WildTensorIndex)
        1    0.000    0.000    0.000    0.000 _multivariate.py:1832(dirichlet_frozen)
        1    0.000    0.000    0.000    0.000 ssl.py:154(<dictcomp>)
        3    0.000    0.000    0.000    0.000 libmpf.py:663(mpf_neg)
        1    0.000    0.000    0.000    0.000 activation.py:478(ELU)
        1    0.000    0.000    0.000    0.000 dates.py:1697(MicrosecondLocator)
        1    0.000    0.000    0.000    0.000 utils.py:8(SequenceWrapperMapDataPipe)
        1    0.000    0.000    0.000    0.000 _functions.py:52(Gather)
        1    0.000    0.000    0.000    0.000 tz.py:1253(tzical)
        1    0.000    0.000    0.000    0.000 mathtext.py:1731(Vlist)
        1    0.000    0.000    0.000    0.000 mathtext.py:3324(__init__)
        1    0.000    0.000    0.000    0.000 transports.py:72(WriteTransport)
        1    0.000    0.000    0.000    0.000 text.py:6(TextBackend)
        1    0.000    0.000    0.000    0.000 kl.py:80(_Match)
        1    0.000    0.000    0.000    0.000 para4band.py:82(Para4Band)
        1    0.000    0.000    0.000    0.000 colors.py:80(_ColorMapping)
        1    0.000    0.000    0.000    0.000 _rules.py:62(_MissingStandardSymbolicFunction)
        1    0.000    0.000    0.000    0.000 _multivariate.py:2512(wishart_frozen)
        1    0.000    0.000    0.000    0.000 analyzer.py:1691(SpacegroupOperations)
        1    0.000    0.000    0.000    0.000 single.py:572(FirstLinear)
        1    0.000    0.000    0.000    0.000 mathieu_functions.py:148(mathieusprime)
        1    0.000    0.000    0.000    0.000 response.py:14(addbase)
        1    0.000    0.000    0.000    0.000 grad_mode.py:9(no_grad)
        1    0.000    0.000    0.000    0.000 streamplot.py:249(DomainMap)
        1    0.000    0.000    0.000    0.000 _trustregion_dogleg.py:38(DoglegSubproblem)
        1    0.000    0.000    0.000    0.000 version.py:45(Version)
        1    0.000    0.000    0.000    0.000 _typing.py:52(JustComplex)
        1    0.000    0.000    0.000    0.000 __init__.py:280(LogRecord)
        1    0.000    0.000    0.000    0.000 comments.py:204(Format)
        2    0.000    0.000    0.000    0.000 {built-in method sys.getfilesystemencoding}
        1    0.000    0.000    0.000    0.000 widgets.py:25(LockDraw)
        1    0.000    0.000    0.000    0.000 core.py:451(DebugActions)
        1    0.000    0.000    0.000    0.000 pyplot.py:514(_xkcd)
        1    0.000    0.000    0.000    0.000 line.py:1109(Line)
        1    0.000    0.000    0.000    0.000 _rules.py:152(_FxTracerFailure)
        1    0.000    0.000    0.000    0.000 _czt.py:115(CZT)
        1    0.000    0.000    0.000    0.000 headerregistry.py:490(ContentDispositionHeader)
        1    0.000    0.000    0.000    0.000 proxy.py:22(Scope)
        1    0.000    0.000    0.000    0.000 kind.py:181(__new__)
        1    0.000    0.000    0.000    0.000 ticker.py:2372(LogLocator)
        1    0.000    0.000    0.000    0.000 lines.py:1399(_AxLine)
        1    0.000    0.000    0.000    0.000 padding.py:434(ReplicationPad3d)
        3    0.000    0.000    0.000    0.000 __init__.py:919(__init__)
        1    0.000    0.000    0.000    0.000 anomaly_mode.py:9(detect_anomaly)
        1    0.000    0.000    0.000    0.000 printer.py:388(_PrintFunction)
        1    0.000    0.000    0.000    0.000 _ufunc_config.py:367(errstate)
        1    0.000    0.000    0.000    0.000 configparser.py:168(Error)
        1    0.000    0.000    0.000    0.000 _utils.py:39(Interval)
        1    0.000    0.000    0.000    0.000 axis.py:482(YTick)
        1    0.000    0.000    0.000    0.000 padding.py:330(_ReplicationPadNd)
        1    0.000    0.000    0.000    0.000 core.py:4223(Or)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1701(skellam_gen)
        1    0.000    0.000    0.000    0.000 _hypotests.py:1702(TukeyHSDResult)
        1    0.000    0.000    0.000    0.000 padding.py:382(ReplicationPad2d)
        1    0.000    0.000    0.000    0.000 _print_helpers.py:8(Printable)
        2    0.000    0.000    0.000    0.000 glob.py:229(_ishidden)
        1    0.000    0.000    0.000    0.000 main.py:882(YAMLContextManager)
        1    0.000    0.000    0.000    0.000 utilities.py:166(AlgIntPowers)
        1    0.000    0.000    0.000    0.000 _docscrape.py:578(FunctionDoc)
        1    0.000    0.000    0.000    0.000 _rules.py:323(_FxFrontendDynamoMakeFx)
        1    0.000    0.000    0.000    0.000 grad_mode.py:164(inference_mode)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:1044(_TypedDictMeta)
        1    0.000    0.000    0.000    0.000 _iotools.py:133(LineSplitter)
        1    0.000    0.000    0.000    0.000 backend_tools.py:712(ToolForward)
        1    0.000    0.000    0.000    0.000 fake_tensor.py:1398(FakeCopyMode)
        1    0.000    0.000    0.000    0.000 core.py:957(NullCache)
        1    0.000    0.000    0.000    0.000 assume.py:174(PredicateMeta)
        1    0.000    0.000    0.000    0.000 _internal.py:205(dummy_ctype)
        1    0.000    0.000    0.000    0.000 conv_fused.py:363(ConvBn1d)
        1    0.000    0.000    0.000    0.000 polyoptions.py:527(Gaussian)
        1    0.000    0.000    0.000    0.000 _decorator.py:148(runtime_validation_disabled)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3061(invwishart_frozen)
        1    0.000    0.000    0.000    0.000 line.py:2429(LinearEntity3D)
        1    0.000    0.000    0.000    0.000 torch_version.py:6(_LazyImport)
        3    0.000    0.000    0.000    0.000 rcsetup.py:391(validate_aspect)
        1    0.000    0.000    0.000    0.000 timeutils.py:40(<listcomp>)
        1    0.000    0.000    0.000    0.000 request.py:908(HTTPPasswordMgrWithPriorAuth)
        1    0.000    0.000    0.000    0.000 offsetbox.py:918(AuxTransformBox)
        1    0.000    0.000    0.000    0.000 rnn.py:46(PackedParameter)
        1    0.000    0.000    0.000    0.000 sparse_ndim_array.py:138(MutableSparseNDimArray)
        8    0.000    0.000    0.000    0.000 _multiufuncs.py:80(_override_finalize_out)
        1    0.000    0.000    0.000    0.000 _backend.py:412(Dispatchable)
        1    0.000    0.000    0.000    0.000 kind.py:7(MatrixKind)
        5    0.000    0.000    0.000    0.000 datetime.py:545(_check_tzinfo_arg)
        1    0.000    0.000    0.000    0.000 _dcsrch.py:17(DCSRCH)
        1    0.000    0.000    0.000    0.000 package_importer.py:697(_PackageResourceReader)
        1    0.000    0.000    0.000    0.000 _trace.py:75(ONNXTracedModule)
        2    0.000    0.000    0.000    0.000 gzip.py:323(closed)
        1    0.000    0.000    0.000    0.000 arrayprint.py:905(FloatingFormat)
        1    0.000    0.000    0.000    0.000 constraints.py:146(_DependentProperty)
        1    0.000    0.000    0.000    0.000 parser.py:16(Parser)
        1    0.000    0.000    0.000    0.000 distributed.py:153(_BufferCommHook)
        1    0.000    0.000    0.000    0.000 expand.py:53(StaticModule)
        1    0.000    0.000    0.000    0.000 _bary_rational.py:599(FloaterHormannInterpolator)
        1    0.000    0.000    0.000    0.000 _guards.py:78(ShapeGuard)
        1    0.000    0.000    0.000    0.000 events.py:17(Event)
        1    0.000    0.000    0.000    0.000 loss.py:1226(CosineEmbeddingLoss)
        1    0.000    0.000    0.000    0.000 mock.py:2473(__init__)
        1    0.000    0.000    0.000    0.000 _jit_internal.py:67(SourceLoader)
        3    0.000    0.000    0.000    0.000 {method 'copy' of 'mappingproxy' objects}
        1    0.000    0.000    0.000    0.000 hb.py:375(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _aliases.py:182(UniqueAllResult)
        1    0.000    0.000    0.000    0.000 spherical_harmonics.py:267(Znm)
        1    0.000    0.000    0.000    0.000 dates.py:648(ConciseDateFormatter)
        4    0.000    0.000    0.000    0.000 _pytree.py:8(register_pytree_flatten_spec)
        1    0.000    0.000    0.000    0.000 pc_groups.py:7(PolycyclicGroup)
        1    0.000    0.000    0.000    0.000 hooks.py:92(BackwardHook)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:985(__new__)
        1    0.000    0.000    0.000    0.000 scale.py:91(LinearScale)
        1    0.000    0.000    0.000    0.000 streamplot.py:313(Grid)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:224(QuotedString)
        1    0.000    0.000    0.000    0.000 common.py:137(OdeSolution)
        4    0.000    0.000    0.000    0.000 _spherical_bessel.py:9(use_reflection)
        1    0.000    0.000    0.000    0.000 activation.py:807(Softplus)
        1    0.000    0.000    0.000    0.000 throughput_benchmark.py:61(ThroughputBenchmark)
        1    0.000    0.000    0.000    0.000 core.py:5313(Opt)
        1    0.000    0.000    0.000    0.000 locks.py:219(Condition)
        1    0.000    0.000    0.000    0.000 _quad_vec.py:12(LRUDict)
        1    0.000    0.000    0.000    0.000 sympy_parser.py:1251(__init__)
        1    0.000    0.000    0.000    0.000 _page_trend_test.py:12(PageTrendTestResult)
        1    0.000    0.000    0.000    0.000 Lattice.py:7(lattice)
        1    0.000    0.000    0.000    0.000 anomaly_mode.py:91(set_detect_anomaly)
        1    0.000    0.000    0.000    0.000 importer.py:183(OrderedImporter)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:289(AddressList)
        1    0.000    0.000    0.000    0.000 _classes.py:21(__init__)
        1    0.000    0.000    0.000    0.000 _binomtest.py:10(BinomTestResult)
        1    0.000    0.000    0.000    0.000 error.py:24(StreamMark)
        1    0.000    0.000    0.000    0.000 computed_entries.py:226(TemperatureEnergyAdjustment)
        1    0.000    0.000    0.000    0.000 numbers.py:3961(EulerGamma)
        1    0.000    0.000    0.000    0.000 tensor.py:4578(WildTensorHead)
        1    0.000    0.000    0.000    0.000 bdf.py:456(BdfDenseOutput)
        1    0.000    0.000    0.000    0.000 conv.py:1538(LazyConvTranspose3d)
        1    0.000    0.000    0.000    0.000 _internal.py:616(_Stream)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:885(MeijerFormula)
        1    0.000    0.000    0.000    0.000 function.py:966(WildFunction)
        1    0.000    0.000    0.000    0.000 core.py:255(InputGenerator)
        1    0.000    0.000    0.000    0.000 polar.py:362(ThetaAxis)
        1    0.000    0.000    0.000    0.000 _interface.py:846(IdentityOperator)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:1615(_ShapeInfo)
        1    0.000    0.000    0.000    0.000 orderings.py:137(InverseOrder)
        1    0.000    0.000    0.000    0.000 art3d.py:375(Patch3DCollection)
        1    0.000    0.000    0.000    0.000 _idl.py:629(AttrDict)
        1    0.000    0.000    0.000    0.000 _util.py:597(MapWrapper)
        1    0.000    0.000    0.000    0.000 _rules.py:208(_FxPassConvertNegToSigmoid)
        1    0.000    0.000    0.000    0.000 polar.py:269(ThetaTick)
        1    0.000    0.000    0.000    0.000 _stats_py.py:4063(AlexanderGovernResult)
        1    0.000    0.000    0.000    0.000 mock.py:281(_SentinelObject)
        1    0.000    0.000    0.000    0.000 request.py:1080(AbstractDigestAuthHandler)
        1    0.000    0.000    0.000    0.000 pprint.py:80(_safe_key)
        1    0.000    0.000    0.000    0.000 typing.py:951(__repr__)
        1    0.000    0.000    0.000    0.000 abc.py:161(ResourceLoader)
        1    0.000    0.000    0.000    0.000 __init__.py:110(DeQuantize)
        1    0.000    0.000    0.000    0.000 extras.py:213(_fromnxfunction)
        1    0.000    0.000    0.000    0.000 line.py:2160(Ray2D)
        1    0.000    0.000    0.000    0.000 transforms.py:1137(SineCosineTypeTransform)
        2    0.000    0.000    0.000    0.000 pathlib.py:53(__init__)
        1    0.000    0.000    0.000    0.000 {built-in method posix.cpu_count}
        1    0.000    0.000    0.000    0.000 _stats_py.py:11039(_SimpleChi2)
        1    0.000    0.000    0.000    0.000 _optimize.py:61(MemoizeJac)
        1    0.000    0.000    0.000    0.000 inputs.py:1927(OrbitalDescription)
        1    0.000    0.000    0.000    0.000 laplace.py:1267(LaplaceTransform)
        1    0.000    0.000    0.000    0.000 pooling.py:38(MaxPool1d)
        1    0.000    0.000    0.000    0.000 _comparison.py:414(NonePair)
        1    0.000    0.000    0.000    0.000 _base.py:1554(sparray)
        1    0.000    0.000    0.000    0.000 version.py:78(__lt__)
        1    0.000    0.000    0.000    0.000 util.py:6(assoc)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:869(SupportsBytes)
        1    0.000    0.000    0.000    0.000 selectors.py:60(_SelectorMapping)
        1    0.000    0.000    0.000    0.000 widgets.py:238(Slider)
        1    0.000    0.000    0.000    0.000 rrule.py:305(rrule)
        1    0.000    0.000    0.000    0.000 pyprojecttoml.py:413(_EnsurePackagesDiscovered)
        1    0.000    0.000    0.000    0.000 conv.py:1402(LazyConvTranspose1d)
        1    0.000    0.000    0.000    0.000 legend_handler.py:43(HandlerBase)
        1    0.000    0.000    0.000    0.000 loss.py:219(NLLLoss2d)
        1    0.000    0.000    0.000    0.000 equality.py:257(LessThanPredicate)
        1    0.000    0.000    0.000    0.000 pyfunctorch.py:118(GradInterpreter)
        1    0.000    0.000    0.000    0.000 tools_common.py:90(FusionGroup)
        1    0.000    0.000    0.000    0.000 boolalg.py:1137(Nor)
        1    0.000    0.000    0.000    0.000 _infra.py:167(StackFrame)
        1    0.000    0.000    0.000    0.000 _ops.py:115(PyOperator)
        1    0.000    0.000    0.000    0.000 _arffread.py:655(MetaData)
        1    0.000    0.000    0.000    0.000 mock.py:341(_CallList)
        1    0.000    0.000    0.000    0.000 hub.py:20(_Faketqdm)
        1    0.000    0.000    0.000    0.000 equality.py:209(StrictLessThanPredicate)
        1    0.000    0.000    0.000    0.000 constraints.py:384(__init__)
        1    0.000    0.000    0.000    0.000 ctx_iv.py:292(ivmpf_constant)
        1    0.000    0.000    0.000    0.000 threading.py:1317(_make_invoke_excepthook)
        3    0.000    0.000    0.000    0.000 facts.py:290(split_alpha_beta)
        1    0.000    0.000    0.000    0.000 _vertex.py:179(VertexCacheBase)
        1    0.000    0.000    0.000    0.000 _nonlin.py:318(TerminationCondition)
        1    0.000    0.000    0.000    0.000 __init__.py:115(<dictcomp>)
        1    0.000    0.000    0.000    0.000 ImageFile.py:734(PyCodec)
        1    0.000    0.000    0.000    0.000 argparse.py:109(_AttributeHolder)
        1    0.000    0.000    0.000    0.000 polynomials.py:687(chebyshevt_root)
        1    0.000    0.000    0.000    0.000 _pytree.py:135(LeafSpec)
        1    0.000    0.000    0.000    0.000 facts.py:286(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:303(device)
        1    0.000    0.000    0.000    0.000 __init__.py:41(_LazySeedTracker)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:455(Mailbox)
        1    0.000    0.000    0.000    0.000 _pep440.py:77(NegativeInfinity)
        1    0.000    0.000    0.000    0.000 tensor.py:4666(WildTensor)
        1    0.000    0.000    0.000    0.000 emitter.py:57(Indents)
        1    0.000    0.000    0.000    0.000 _parser.py:15(Node)
        1    0.000    0.000    0.000    0.000 scale.py:334(FuncScaleLog)
        1    0.000    0.000    0.000    0.000 __init__.py:86(_StrongRef)
        1    0.000    0.000    0.000    0.000 traversal.py:68(preorder_traversal)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:878(SupportsIndex)
        1    0.000    0.000    0.000    0.000 gridspec.py:545(GridSpecFromSubplotSpec)
        1    0.000    0.000    0.000    0.000 core.py:977(_MaskedBinaryOperation)
        1    0.000    0.000    0.000    0.000 base.py:233(DenseOutput)
        1    0.000    0.000    0.000    0.000 distance.py:1771(PDistMetricWrapper)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:280(PngInfo)
        1    0.000    0.000    0.000    0.000 __init__.py:46(PackageNotFoundError)
        1    0.000    0.000    0.000    0.000 _parser.py:50(ParsedRequirement)
        1    0.000    0.000    0.000    0.000 docinfo.py:95(Tag)
        1    0.000    0.000    0.000    0.000 streams.py:117(FlowControlMixin)
        1    0.000    0.000    0.000    0.000 graph.py:42(_CustomBuiltin)
        4    0.000    0.000    0.000    0.000 _ops.py:129(py_impl)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:485(_IntegerInterval)
        1    0.000    0.000    0.000    0.000 sympy_parser.py:91(AppliedFunction)
        1    0.000    0.000    0.000    0.000 reinplace.py:53(_FunctionalizationMetadataProp)
        1    0.000    0.000    0.000    0.000 mathtext.py:349(MathtextBackendCairo)
        1    0.000    0.000    0.000    0.000 __future__.py:81(_Feature)
        1    0.000    0.000    0.000    0.000 _rules.py:231(_FxIrAddNode)
        1    0.000    0.000    0.000    0.000 headerregistry.py:562(HeaderRegistry)
        1    0.000    0.000    0.000    0.000 server_process_global_profiler.py:16(_server_process_global_profile)
        1    0.000    0.000    0.000    0.000 core.py:4381(MatchFirst)
        2    0.000    0.000    0.000    0.000 _onenormest.py:121(_blocked_elementwise)
        1    0.000    0.000    0.000    0.000 _creation.py:17(<dictcomp>)
        3    0.000    0.000    0.000    0.000 core.py:806(__init__)
        7    0.000    0.000    0.000    0.000 _pep440.py:446(<lambda>)
        1    0.000    0.000    0.000    0.000 _tokenizer.py:18(ParserSyntaxError)
        1    0.000    0.000    0.000    0.000 comments.py:591(CommentedKeySeq)
        1    0.000    0.000    0.000    0.000 _symbolic_trace.py:876(_PatchedFn)
        2    0.000    0.000    0.000    0.000 {built-in method maketrans}
        1    0.000    0.000    0.000    0.000 _pep440.py:135(_BaseVersion)
        1    0.000    0.000    0.000    0.000 join.py:11(JoinHook)
        1    0.000    0.000    0.000    0.000 string.py:54(Stringify)
        1    0.000    0.000    0.000    0.000 grouping.py:89(UnBatcherIterDataPipe)
        1    0.000    0.000    0.000    0.000 boolalg.py:1171(Xnor)
        1    0.000    0.000    0.000    0.000 combining.py:496(MultiplexerIterDataPipe)
        1    0.000    0.000    0.000    0.000 assume.py:14(AssumptionsContext)
        1    0.000    0.000    0.000    0.000 _rules.py:277(_AtenlibFxToOnnx)
        1    0.000    0.000    0.000    0.000 __init__.py:1323(disable)
        4    0.000    0.000    0.000    0.000 stride_tricks.py:345(<genexpr>)
        1    0.000    0.000    0.000    0.000 Image.py:3029(ImageTransformHandler)
        1    0.000    0.000    0.000    0.000 protocols.py:9(BaseProtocol)
        1    0.000    0.000    0.000    0.000 constraints.py:68(Constraint)
        1    0.000    0.000    0.000    0.000 category.py:163(UnitData)
        1    0.000    0.000    0.000    0.000 exponential.py:139(exp_polar)
        1    0.000    0.000    0.000    0.000 threading.py:279(_is_owned)
        1    0.000    0.000    0.000    0.000 request.py:834(HTTPPasswordMgr)
        1    0.000    0.000    0.000    0.000 _state.py:12(EnabledProxy)
        1    0.000    0.000    0.000    0.000 activation.py:298(Hardsigmoid)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:517(AddrSpec)
        1    0.000    0.000    0.000    0.000 mathtext.py:1527(Accent)
        1    0.000    0.000    0.000    0.000 colorbar.py:289(_ColorbarLogLocator)
        1    0.000    0.000    0.000    0.000 core.py:943(_CacheType)
        1    0.000    0.000    0.000    0.000 locks.py:331(Semaphore)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:2500(TypeVarTuple)
        4    0.000    0.000    0.000    0.000 core.py:6544(__has_singleton)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3562(special_ortho_group_gen)
        1    0.000    0.000    0.000    0.000 _quadpack_py.py:1213(_RangeFunc)
        1    0.000    0.000    0.000    0.000 _functions.py:85(Scatter)
        1    0.000    0.000    0.000    0.000 ImageFile.py:101(_Tile)
        1    0.000    0.000    0.000    0.000 _basinhopping.py:41(BasinHoppingRunner)
        1    0.000    0.000    0.000    0.000 relational.py:891(_Less)
        1    0.000    0.000    0.000    0.000 _rotation_spline.py:251(RotationSpline)
        1    0.000    0.000    0.000    0.000 lines.py:1440(VertexSelector)
        1    0.000    0.000    0.000    0.000 runner.py:161(TextTestRunner)
        6    0.000    0.000    0.000    0.000 signal.py:48(_wraps)
        1    0.000    0.000    0.000    0.000 _rules.py:254(_AtenlibSymbolicFunction)
        1    0.000    0.000    0.000    0.000 _constraints.py:227(Bounds)
        1    0.000    0.000    0.000    0.000 parse.py:795(_Quoter)
        1    0.000    0.000    0.000    0.000 _meta.py:32(SimplePath)
        1    0.000    0.000    0.000    0.000 abc.py:112(PathEntryFinder)
        1    0.000    0.000    0.000    0.000 grad_mode.py:108(set_grad_enabled)
        4    0.000    0.000    0.000    0.000 results.py:26(__init__)
        1    0.000    0.000    0.000    0.000 utils.py:117(Comparable)
        1    0.000    0.000    0.000    0.000 polynomials.py:728(chebyshevu_root)
        1    0.000    0.000    0.000    0.000 _ops.py:594(_Ops)
        1    0.000    0.000    0.000    0.000 ops.py:294(IndexableIter)
        1    0.000    0.000    0.000    0.000 activation.py:244(ReLU6)
        1    0.000    0.000    0.000    0.000 numpy.py:35(<dictcomp>)
        1    0.000    0.000    0.000    0.000 hyper.py:1129(appellf1)
        1    0.000    0.000    0.000    0.000 _package_pickler.py:21(PackagePickler)
        1    0.000    0.000    0.000    0.000 records.py:87(format_parser)
        1    0.000    0.000    0.000    0.000 loader.py:23(_FailedTest)
        1    0.000    0.000    0.000    0.000 storage.py:230(UntypedStorage)
        1    0.000    0.000    0.000    0.000 line.py:1987(Line2D)
        1    0.000    0.000    0.000    0.000 selectors.py:433(PollSelector)
        1    0.000    0.000    0.000    0.000 graphs.py:118(graph)
        1    0.000    0.000    0.000    0.000 _numdiff.py:863(_Fun_Wrapper)
        1    0.000    0.000    0.000    0.000 __init__.py:275(cudaStatus)
        5    0.000    0.000    0.000    0.000 due.py:43(_donothing_func)
        1    0.000    0.000    0.000    0.000 _pytree.py:41(NodeDef)
        1    0.000    0.000    0.000    0.000 _multivariate.py:5288(multivariate_hypergeom_frozen)
        1    0.000    0.000    0.000    0.000 loss.py:17(_Loss)
        1    0.000    0.000    0.000    0.000 deprecation.py:101(_DeprecationHelperStr)
        7    0.000    0.000    0.000    0.000 due.py:31(non_decorating_decorator)
        1    0.000    0.000    0.000    0.000 anchor.py:10(Anchor)
        1    0.000    0.000    0.000    0.000 graph.py:494(_AllowMutationOnSavedContext)
        1    0.000    0.000    0.000    0.000 bessel.py:901(SphericalBesselBase)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:186(LambdaLR)
        1    0.000    0.000    0.000    0.000 _spdx.py:6(SPDXLicense)
        1    0.000    0.000    0.000    0.000 _codata.py:142(exact2002)
        1    0.000    0.000    0.000    0.000 pyfunctorch.py:147(JvpInterpreter)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:15(TriInterpolator)
        1    0.000    0.000    0.000    0.000 TiffTags.py:24(_TagInfo)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3505(multinomial_frozen)
        1    0.000    0.000    0.000    0.000 collections.py:1664(CircleCollection)
        1    0.000    0.000    0.000    0.000 case.py:282(_AssertWarnsContext)
        2    0.000    0.000    0.000    0.000 {method 'acquire' of '_thread.lock' objects}
        1    0.000    0.000    0.000    0.000 ImageFile.py:866(PyEncoder)
        1    0.000    0.000    0.000    0.000 mathtext.py:932(DejaVuSerifFonts)
        5    0.000    0.000    0.000    0.000 version.py:537(<lambda>)
        1    0.000    0.000    0.000    0.000 compat.py:112(Nprint)
        1    0.000    0.000    0.000    0.000 ops.py:156(<listcomp>)
        1    0.000    0.000    0.000    0.000 _polyint.py:245(KroghInterpolator)
        1    0.000    0.000    0.000    0.000 timestamp.py:16(TimeStamp)
        1    0.000    0.000    0.000    0.000 swa_utils.py:13(AveragedModel)
        4    0.000    0.000    0.000    0.000 function.py:613(_iter_filter)
        1    0.000    0.000    0.000    0.000 font_manager.py:338(FontEntry)
        1    0.000    0.000    0.000    0.000 split_module.py:11(Partition)
        1    0.000    0.000    0.000    0.000 grad_mode.py:293(_unsafe_preserve_version_counter)
        3    0.000    0.000    0.000    0.000 six.py:885(add_metaclass)
        1    0.000    0.000    0.000    0.000 runner.py:14(_WritelnDecorator)
        1    0.000    0.000    0.000    0.000 reductions.py:62(_after_fork)
        1    0.000    0.000    0.000    0.000 csv.py:130(DictWriter)
        1    0.000    0.000    0.000    0.000 _datasource.py:99(__init__)
        1    0.000    0.000    0.000    0.000 legend.py:50(DraggableLegend)
        1    0.000    0.000    0.000    0.000 mathtext.py:1994(Kern)
        1    0.000    0.000    0.000    0.000 sets.py:2759(SetKind)
        1    0.000    0.000    0.000    0.000 pathlib.py:422(_PathParents)
        1    0.000    0.000    0.000    0.000 _compression.py:63(seekable)
        1    0.000    0.000    0.000    0.000 arpack.py:315(_ArpackParams)
        1    0.000    0.000    0.000    0.000 conv.py:220(ConvTranspose1d)
        1    0.000    0.000    0.000    0.000 _tanhsinh.py:1285(<listcomp>)
        1    0.000    0.000    0.000    0.000 _base.py:33(_axis_method_wrapper)
        3    0.000    0.000    0.000    0.000 core.py:104(do_one)
        1    0.000    0.000    0.000    0.000 linear.py:127(NonDynamicallyQuantizableLinear)
        1    0.000    0.000    0.000    0.000 activation.py:733(LeakyReLU)
        2    0.000    0.000    0.000    0.000 {function DecompressReader.close at 0x151bc49613a0}
        2    0.000    0.000    0.000    0.000 six.py:199(__get_module)
        1    0.000    0.000    0.000    0.000 _constraints.py:309(PreparedConstraint)
        1    0.000    0.000    0.000    0.000 bessel.py:2149(_besseli)
        1    0.000    0.000    0.000    0.000 conv.py:154(_ConvTransposeNd)
        1    0.000    0.000    0.000    0.000 _fitpack_repro.py:416(F)
        1    0.000    0.000    0.000    0.000 visualization.py:9(VisualizationMethods)
        1    0.000    0.000    0.000    0.000 __init__.py:1152(FileHandler)
        1    0.000    0.000    0.000    0.000 _multivariate.py:1385(matrix_normal_frozen)
        1    0.000    0.000    0.000    0.000 _adapters.py:7(SpecLoaderAdapter)
        1    0.000    0.000    0.000    0.000 core.py:3473(CharsNotIn)
        1    0.000    0.000    0.000    0.000 memory.py:673(_CUDAAllocator)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_shake_128}
        1    0.000    0.000    0.000    0.000 case.py:1446(_SubTest)
        1    0.000    0.000    0.000    0.000 arrayop.py:458(Flatten)
        1    0.000    0.000    0.000    0.000 context.py:203(reducer)
        1    0.000    0.000    0.000    0.000 graph_manipulation.py:43(size_bytes)
        1    0.000    0.000    0.000    0.000 single.py:1436(HomogeneousCoeffSubsDepDivIndep)
        1    0.000    0.000    0.000    0.000 core.py:195(<listcomp>)
        1    0.000    0.000    0.000    0.000 _survival.py:219(ECDFResult)
        1    0.000    0.000    0.000    0.000 loss.py:1279(MarginRankingLoss)
        1    0.000    0.000    0.000    0.000 _datasource.py:74(_FileOpeners)
        1    0.000    0.000    0.000    0.000 _adapters.py:114(OrphanPath)
        1    0.000    0.000    0.000    0.000 _convertions.py:1(<module>)
        1    0.000    0.000    0.000    0.000 modules.py:504(FreeModuleQuotientRing)
        1    0.000    0.000    0.000    0.000 __init__.py:1237(_StderrHandler)
        1    0.000    0.000    0.000    0.000 widgets.py:1621(SpanSelector)
        1    0.000    0.000    0.000    0.000 _nonlin.py:382(Jacobian)
        1    0.000    0.000    0.000    0.000 rootoftools.py:38(_pure_key_dict)
        1    0.000    0.000    0.000    0.000 __init__.py:290(_DeviceGuard)
        1    0.000    0.000    0.000    0.000 getopt.py:43(GetoptError)
        1    0.000    0.000    0.000    0.000 _monitor.py:15(TMonitor)
        1    0.000    0.000    0.000    0.000 transports.py:46(ReadTransport)
        1    0.000    0.000    0.000    0.000 __init__.py:28(_QEngineProp)
        1    0.000    0.000    0.000    0.000 index_tricks.py:303(__init__)
        1    0.000    0.000    0.000    0.000 pythonfinitefield.py:9(PythonFiniteField)
        1    0.000    0.000    0.000    0.000 autograd_function.py:251(VmapInfo)
        1    0.000    0.000    0.000    0.000 __init__.py:2111(_OrderedSet)
        1    0.000    0.000    0.000    0.000 _interface.py:719(_ProductLinearOperator)
        1    0.000    0.000    0.000    0.000 _hessian_update_strategy.py:425(SR1)
        1    0.000    0.000    0.000    0.000 activation.py:524(CELU)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1304(DatetimeFormat)
        1    0.000    0.000    0.000    0.000 ImageSequence.py:24(Iterator)
        1    0.000    0.000    0.000    0.000 transforms.py:2654(TransformedPath)
        1    0.000    0.000    0.000    0.000 rcsetup.py:50(ValidateInStrings)
        1    0.000    0.000    0.000    0.000 activation.py:361(SiLU)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3705(ortho_group_gen)
        1    0.000    0.000    0.000    0.000 calendar.py:573(LocaleTextCalendar)
        1    0.000    0.000    0.000    0.000 serialization.py:250(_open_file)
        1    0.000    0.000    0.000    0.000 GimpGradientFile.py:67(GradientFile)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha3_256}
        1    0.000    0.000    0.000    0.000 _shgo.py:1538(LMapCache)
        1    0.000    0.000    0.000    0.000 facts.py:301(rules_alpha)
        1    0.000    0.000    0.000    0.000 conv.py:1333(LazyConv3d)
        1    0.000    0.000    0.000    0.000 readers.py:31(ZipReader)
        1    0.000    0.000    0.000    0.000 inverselaplace.py:667(LaplaceTransformInversionMethods)
        1    0.000    0.000    0.000    0.000 zipfile.py:618(LZMACompressor)
        1    0.000    0.000    0.000    0.000 scale.py:126(FuncTransform)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:900(ShapeGuardPrinter)
        1    0.000    0.000    0.000    0.000 matrixbase.py:5400(DeferredVector)
        1    0.000    0.000    0.000    0.000 pathlib.py:49(_Flavour)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:263(Comment)
        1    0.000    0.000    0.000    0.000 modules.py:1005(SubQuotientModule)
        1    0.000    0.000    0.000    0.000 stubs.py:4(QuantStub)
        1    0.000    0.000    0.000    0.000 _interpolate.py:125(interp2d)
        1    0.000    0.000    0.000    0.000 _base.py:74(_AsCompletedWaiter)
        1    0.000    0.000    0.000    0.000 gzip.py:99(prepend)
        1    0.000    0.000    0.000    0.000 _jit_internal.py:514(FunctionModifiers)
        1    0.000    0.000    0.000    0.000 {built-in method torch._C._cuda_getCompiledVersion}
        7    0.000    0.000    0.000    0.000 numeric.py:1389(_moveaxis_dispatcher)
        1    0.000    0.000    0.000    0.000 analyzer.py:1751(PointGroupOperations)
        1    0.000    0.000    0.000    0.000 pooling.py:1121(_AdaptiveAvgPoolNd)
        1    0.000    0.000    0.000    0.000 blocking_input.py:271(BlockingContourLabeler)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:1328(_DerivedBivariateSpline)
        1    0.000    0.000    0.000    0.000 transforms.py:865(SoftmaxTransform)
        1    0.000    0.000    0.000    0.000 _nonlin.py:1243(LinearMixing)
        1    0.000    0.000    0.000    0.000 line.py:2504(Line3D)
        1    0.000    0.000    0.000    0.000 loss.py:380(KLDivLoss)
        1    0.000    0.000    0.000    0.000 transforms.py:587(SigmoidTransform)
        1    0.000    0.000    0.000    0.000 lambdarepr.py:228(IntervalPrinter)
        4    0.000    0.000    0.000    0.000 fromnumeric.py:2687(_max_dispatcher)
        1    0.000    0.000    0.000    0.000 _interface.py:832(_AdjointMatrixOperator)
        1    0.000    0.000    0.000    0.000 pathlib.py:792(is_absolute)
        1    0.000    0.000    0.000    0.000 core.py:2679(CloseMatch)
        1    0.000    0.000    0.000    0.000 discovery.py:68(_Filter)
        1    0.000    0.000    0.000    0.000 datetime.py:1219(tzinfo)
        1    0.000    0.000    0.000    0.000 core.py:5823(Combine)
        1    0.000    0.000    0.000    0.000 _multivariate.py:6860(vonmises_fisher_frozen)
        1    0.000    0.000    0.000    0.000 gmpyfinitefield.py:9(GMPYFiniteField)
        1    0.000    0.000    0.000    0.000 _recursive.py:358(__init__)
        1    0.000    0.000    0.000    0.000 _upfirdn.py:73(_UpFIRDn)
        1    0.000    0.000    0.000    0.000 __init__.py:46(__getattr__)
        1    0.000    0.000    0.000    0.000 polar.py:202(_AxisWrapper)
        1    0.000    0.000    0.000    0.000 numpy.py:481(<dictcomp>)
        1    0.000    0.000    0.000    0.000 polyoptions.py:611(Strict)
        1    0.000    0.000    0.000    0.000 _interface.py:639(_AdjointLinearOperator)
        1    0.000    0.000    0.000    0.000 _multivariate.py:5769(uniform_direction_gen)
        1    0.000    0.000    0.000    0.000 npyio.py:42(BagObj)
        1    0.000    0.000    0.000    0.000 widgets.py:133(Button)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:308(Address)
        2    0.000    0.000    0.000    0.000 core.py:3433(shape)
        4    0.000    0.000    0.000    0.000 _inspect.py:142(<lambda>)
        1    0.000    0.000    0.000    0.000 codeprinter.py:18(requires)
        3    0.000    0.000    0.000    0.000 rendezvous.py:22(register_rendezvous_handler)
        1    0.000    0.000    0.000    0.000 _warnings_errors.py:12(ConstantInputWarning)
        1    0.000    0.000    0.000    0.000 numpy.py:483(CuPyPrinter)
        1    0.000    0.000    0.000    0.000 single.py:1560(HomogeneousCoeffSubsIndepDivDep)
        1    0.000    0.000    0.000    0.000 __init__.py:9(verbose)
        1    0.000    0.000    0.000    0.000 csv.py:54(excel)
        1    0.000    0.000    0.000    0.000 single.py:912(RiccatiSpecial)
        1    0.000    0.000    0.000    0.000 _basinhopping.py:196(AdaptiveStepsize)
        1    0.000    0.000    0.000    0.000 abc.py:75(MetaPathFinder)
        1    0.000    0.000    0.000    0.000 inputs.py:1919(Orbital)
        2    0.000    0.000    0.000    0.000 sysconfig.py:279(_get_preferred_schemes)
        1    0.000    0.000    0.000    0.000 tarfile.py:304(_LowLevelFile)
        1    0.000    0.000    0.000    0.000 dev.py:147(__init__)
        1    0.000    0.000    0.000    0.000 single.py:976(RationalRiccati)
        3    0.000    0.000    0.000    0.000 core.py:16(exhaust)
        1    0.000    0.000    0.000    0.000 activation.py:650(GELU)
        1    0.000    0.000    0.000    0.000 colors.py:1099(TwoSlopeNorm)
        1    0.000    0.000    0.000    0.000 conv_fused.py:495(ConvBn2d)
        1    0.000    0.000    0.000    0.000 _vertex.py:205(VertexCube)
        1    0.000    0.000    0.000    0.000 _collections.py:5(FreezableDefaultDict)
        1    0.000    0.000    0.000    0.000 fancysets.py:139(Naturals0)
        1    0.000    0.000    0.000    0.000 _memory_viz.py:112(Bytes)
        1    0.000    0.000    0.000    0.000 _factories.py:8(_TzSingleton)
        1    0.000    0.000    0.000    0.000 pydoc.py:1127(TextRepr)
        1    0.000    0.000    0.000    0.000 fancysets.py:1493(Complexes)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3305(_moment_standardized_formula)
        1    0.000    0.000    0.000    0.000 _aliases.py:189(UniqueCountsResult)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:493(Domain)
        1    0.000    0.000    0.000    0.000 polyoptions.py:638(Frac)
        1    0.000    0.000    0.000    0.000 least_squares.py:255(_WrapArgsKwargs)
        1    0.000    0.000    0.000    0.000 tasks.py:689(_GatheringFuture)
        1    0.000    0.000    0.000    0.000 polyoptions.py:50(BooleanOption)
        1    0.000    0.000    0.000    0.000 abc.py:276(SourceLoader)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:1740(ParamSpec)
        1    0.000    0.000    0.000    0.000 {built-in method _thread.get_native_id}
        1    0.000    0.000    0.000    0.000 ticker.py:211(TickHelper)
        1    0.000    0.000    0.000    0.000 animation.py:1521(FuncAnimation)
        1    0.000    0.000    0.000    0.000 formal.py:1613(FormalPowerSeriesCompose)
        1    0.000    0.000    0.000    0.000 batchnorm.py:413(LazyBatchNorm2d)
        1    0.000    0.000    0.000    0.000 PaletteFile.py:22(PaletteFile)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:556(DisplayName)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:657(Parameter)
        1    0.000    0.000    0.000    0.000 _differentiable_functions.py:760(LinearVectorFunction)
        1    0.000    0.000    0.000    0.000 array_comprehension.py:344(ArrayComprehensionMap)
        1    0.000    0.000    0.000    0.000 fake_tensor.py:49(IncrementRecursionCount)
        1    0.000    0.000    0.000    0.000 dviread.py:607(Vf)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:443(_RealInterval)
        1    0.000    0.000    0.000    0.000 _infra.py:40(PatchedPropertyBag)
        1    0.000    0.000    0.000    0.000 report.py:28(BasicReport)
        1    0.000    0.000    0.000    0.000 argparse.py:1638(_ArgumentGroup)
        1    0.000    0.000    0.000    0.000 parameter.py:165(UninitializedParameter)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:634(DomainLiteral)
        1    0.000    0.000    0.000    0.000 parameters.py:7(_global_parameters)
        1    0.000    0.000    0.000    0.000 _orthogonal.py:115(orthopoly1d)
        1    0.000    0.000    0.000    0.000 offsetbox.py:577(PaddedBox)
        1    0.000    0.000    0.000    0.000 _directory_reader.py:17(DirectoryReader)
        1    0.000    0.000    0.000    0.000 forward_ad.py:190(_set_fwd_grad_enabled)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:1274(_TypedDictSpecialForm)
        1    0.000    0.000    0.000    0.000 _interface.py:781(_PowerLinearOperator)
        1    0.000    0.000    0.000    0.000 core.py:5(Registry)
        1    0.000    0.000    0.000    0.000 __init__.py:156(py_object)
        1    0.000    0.000    0.000    0.000 version.py:454(_TrimmedRelease)
        5    0.000    0.000    0.000    0.000 multiarray.py:85(empty_like)
        1    0.000    0.000    0.000    0.000 _guards.py:284(GuardsContext)
        2    0.000    0.000    0.000    0.000 annotations.py:30(__init__)
        1    0.000    0.000    0.000    0.000 geo.py:229(_GeoTransform)
        1    0.000    0.000    0.000    0.000 _linalg.py:33(EighResult)
        1    0.000    0.000    0.000    0.000 combining.py:62(ForkerIterDataPipe)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1374(MouseEvent)
        1    0.000    0.000    0.000    0.000 Manager.py:1(manager)
        1    0.000    0.000    0.000    0.000 reductions.py:49(SharedCache)
        1    0.000    0.000    0.000    0.000 _base.py:6(Rule)
        1    0.000    0.000    0.000    0.000 _jit_internal.py:631(_IgnoreContextManager)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:364(Group)
        4    0.000    0.000    0.000    0.000 __init__.py:799(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _dual_annealing.py:129(EnergyState)
        1    0.000    0.000    0.000    0.000 bessel.py:2180(_besselk)
        1    0.000    0.000    0.000    0.000 pkgutil.py:194(ImpImporter)
        1    0.000    0.000    0.000    0.000 package_exporter.py:128(PackagingError)
        1    0.000    0.000    0.000    0.000 _cubic.py:72(CubicHermiteSpline)
        1    0.000    0.000    0.000    0.000 report.py:44(IPReport)
        1    0.000    0.000    0.000    0.000 unix_events.py:980(BaseChildWatcher)
        1    0.000    0.000    0.000    0.000 constraint_registry.py:79(ConstraintRegistry)
        1    0.000    0.000    0.000    0.000 diophantine.py:224(Univariate)
        1    0.000    0.000    0.000    0.000 singleton.py:158(Singleton)
        2    0.000    0.000    0.000    0.000 decorator.py:120(__init__)
        1    0.000    0.000    0.000    0.000 widgets.py:1209(Cursor)
        1    0.000    0.000    0.000    0.000 _multivariate.py:6223(dirichlet_multinomial_frozen)
        1    0.000    0.000    0.000    0.000 ctx_mp.py:1301(PrecisionManager)
        2    0.000    0.000    0.000    0.000 __init__.py:109(<genexpr>)
        1    0.000    0.000    0.000    0.000 request.py:1256(AbstractHTTPHandler)
        1    0.000    0.000    0.000    0.000 core.py:5206(ZeroOrMore)
        1    0.000    0.000    0.000    0.000 exceptions.py:98(AxisError)
        1    0.000    0.000    0.000    0.000 _static.py:9(Static)
        1    0.000    0.000    0.000    0.000 gaussiandomains.py:171(GaussianInteger)
        1    0.000    0.000    0.000    0.000 widgets.py:1303(MultiCursor)
        1    0.000    0.000    0.000    0.000 dev.py:125(requires)
        1    0.000    0.000    0.000    0.000 bessel.py:1347(AiryBase)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:69(SymDispatchMode)
        1    0.000    0.000    0.000    0.000 _nonlin.py:1289(ExcitingMixing)
        1    0.000    0.000    0.000    0.000 _interpolate.py:167(_do_extrapolate)
        1    0.000    0.000    0.000    0.000 ordinals.py:261(OrdinalOmega)
        1    0.000    0.000    0.000    0.000 widgets.py:517(CheckButtons)
        1    0.000    0.000    0.000    0.000 actions.py:19(OnlyOnce)
        1    0.000    0.000    0.000    0.000 transforms.py:964(FourierTypeTransform)
        1    0.000    0.000    0.000    0.000 _multivariate.py:5689(random_table_frozen)
        1    0.000    0.000    0.000    0.000 scale.py:246(InvertedLogTransform)
        1    0.000    0.000    0.000    0.000 overrides.py:1872(enable_reentrant_dispatch)
        1    0.000    0.000    0.000    0.000 _nonlin.py:1352(KrylovJacobian)
        1    0.000    0.000    0.000    0.000 hyper.py:29(TupleArg)
        1    0.000    0.000    0.000    0.000 pickle.py:263(_Unframer)
        1    0.000    0.000    0.000    0.000 _hypotests.py:917(BarnardExactResult)
        1    0.000    0.000    0.000    0.000 events.py:76(CollectionStartEvent)
        1    0.000    0.000    0.000    0.000 core.py:2403(Token)
        1    0.000    0.000    0.000    0.000 __init__.py:307(_LowLevelFile)
        1    0.000    0.000    0.000    0.000 activation.py:691(Hardshrink)
        1    0.000    0.000    0.000    0.000 tarfile.py:570(_StreamProxy)
        1    0.000    0.000    0.000    0.000 _exceptions.py:38(_UFuncNoLoopError)
        1    0.000    0.000    0.000    0.000 backend_tools.py:736(ZoomPanBase)
        1    0.000    0.000    0.000    0.000 _arffread.py:232(StringAttribute)
        1    0.000    0.000    0.000    0.000 __init__.py:2213(NullHandler)
        1    0.000    0.000    0.000    0.000 colors.py:1418(BoundaryNorm)
        1    0.000    0.000    0.000    0.000 _base.py:59(_Waiter)
        1    0.000    0.000    0.000    0.000 autograd_function.py:29(CustomFunctionPyOperator)
        1    0.000    0.000    0.000    0.000 jiterator.py:42(_JittedFunction)
        1    0.000    0.000    0.000    0.000 core.py:194(<listcomp>)
        1    0.000    0.000    0.000    0.000 __init__.py:576(_StreamProxy)
        1    0.000    0.000    0.000    0.000 comments.py:50(IDX)
        1    0.000    0.000    0.000    0.000 transforms.py:331(MellinTransform)
        1    0.000    0.000    0.000    0.000 _hypotests.py:1188(BoschlooExactResult)
        1    0.000    0.000    0.000    0.000 response.py:37(addclosehook)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:163(_Sentinel)
        1    0.000    0.000    0.000    0.000 _minimize.py:1050(_Patch_Callback_Equal_Variables)
        1    0.000    0.000    0.000    0.000 package_importer.py:668(_ModuleNode)
        1    0.000    0.000    0.000    0.000 _morestats.py:4287(DirectionalStats)
        1    0.000    0.000    0.000    0.000 hamiltonian.py:3(Hamiltonian)
        1    0.000    0.000    0.000    0.000 polyutils.py:516(IntegerPowerable)
        1    0.000    0.000    0.000    0.000 sparse.py:462(MutableSparseMatrix)
        4    0.000    0.000    0.000    0.000 bessel.py:385(c_memo)
        1    0.000    0.000    0.000    0.000 graph.py:236(_InsertPoint)
        1    0.000    0.000    0.000    0.000 activation.py:849(Softshrink)
        1    0.000    0.000    0.000    0.000 transforms.py:1165(SineTransform)
        1    0.000    0.000    0.000    0.000 readers.py:15(FileReader)
        1    0.000    0.000    0.000    0.000 radau.py:549(RadauDenseOutput)
        1    0.000    0.000    0.000    0.000 containers.py:379(TupleKind)
        1    0.000    0.000    0.000    0.000 scale.py:162(FuncScale)
        3    0.000    0.000    0.000    0.000 arrayprint.py:898(_none_or_positive_arg)
        4    0.000    0.000    0.000    0.000 {method 'count' of 'list' objects}
        1    0.000    0.000    0.000    0.000 inputs.py:1943(PmgVaspPspDirError)
        1    0.000    0.000    0.000    0.000 patches.py:2001(Square)
        1    0.000    0.000    0.000    0.000 numpy.py:504(<dictcomp>)
        1    0.000    0.000    0.000    0.000 dataloader.py:83(_InfiniteConstantSampler)
        1    0.000    0.000    0.000    0.000 __init__.py:1239(<dictcomp>)
        1    0.000    0.000    0.000    0.000 index_tricks.py:109(nd_grid)
        1    0.000    0.000    0.000    0.000 worker.py:51(ManagerWatchdog)
        1    0.000    0.000    0.000    0.000 __init__.py:13(verbose)
        1    0.000    0.000    0.000    0.000 pooling.py:171(MaxPool3d)
        1    0.000    0.000    0.000    0.000 argparse.py:878(BooleanOptionalAction)
        1    0.000    0.000    0.000    0.000 series.py:1800(SurfaceBaseSeries)
        1    0.000    0.000    0.000    0.000 core.py:2627(CaselessLiteral)
        1    0.000    0.000    0.000    0.000 client.py:1481(IncompleteRead)
        2    0.000    0.000    0.000    0.000 __init__.py:8(__init__)
        1    0.000    0.000    0.000    0.000 parameter.py:6(_ParameterMeta)
        1    0.000    0.000    0.000    0.000 request.py:1374(HTTPHandler)
        1    0.000    0.000    0.000    0.000 _multivariate.py:7252(normal_inverse_gamma_frozen)
        4    0.000    0.000    0.000    0.000 shape_base.py:19(_atleast_1d_dispatcher)
        1    0.000    0.000    0.000    0.000 signals.py:9(_InterruptHandler)
        1    0.000    0.000    0.000    0.000 exceptions.py:29(IncompleteReadError)
        1    0.000    0.000    0.000    0.000 core.py:2483(Empty)
        1    0.000    0.000    0.000    0.000 _miobase.py:337(MatVarReader)
        1    0.000    0.000    0.000    0.000 single.py:839(Factorable)
        1    0.000    0.000    0.000    0.000 six.py:91(_LazyDescr)
        1    0.000    0.000    0.000    0.000 util.py:127(LRUMemo)
        1    0.000    0.000    0.000    0.000 inverselaplace.py:4(InverseLaplaceTransform)
        1    0.000    0.000    0.000    0.000 sympy_parser.py:1242(_T)
        1    0.000    0.000    0.000    0.000 one_hot_categorical.py:113(OneHotCategoricalStraightThrough)
        4    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:797(is_package)
        1    0.000    0.000    0.000    0.000 more.py:2438(islice_extended)
        4    0.000    0.000    0.000    0.000 _multiufuncs.py:69(_override_ufunc_default_kwargs)
        1    0.000    0.000    0.000    0.000 utils.py:138(ObjectWrapper)
        1    0.000    0.000    0.000    0.000 permutations.py:3067(AppliedPermutation)
        1    0.000    0.000    0.000    0.000 forward_ad.py:145(dual_level)
        1    0.000    0.000    0.000    0.000 arpack.py:389(_SymmetricArpackParams)
        1    0.000    0.000    0.000    0.000 dataframes.py:241(CaptureVariable)
        1    0.000    0.000    0.000    0.000 loss.py:931(HuberLoss)
        1    0.000    0.000    0.000    0.000 __init__.py:711(BufferingFormatter)
        1    0.000    0.000    0.000    0.000 error.py:52(StringMark)
        1    0.000    0.000    0.000    0.000 datapipe.py:326(_DataPipeSerializationWrapper)
        1    0.000    0.000    0.000    0.000 rrule.py:1315(_genitem)
        1    0.000    0.000    0.000    0.000 dates.py:846(AutoDateFormatter)
        1    0.000    0.000    0.000    0.000 mathtext.py:1404(Box)
        1    0.000    0.000    0.000    0.000 _fortran_format_parser.py:224(FortranFormatParser)
        1    0.000    0.000    0.000    0.000 polyutils.py:187(<listcomp>)
        1    0.000    0.000    0.000    0.000 queue.py:223(PriorityQueue)
        1    0.000    0.000    0.000    0.000 _stats_py.py:11078(_SimpleStudentT)
        1    0.000    0.000    0.000    0.000 py3k.py:92(contextlib_nullcontext)
        1    0.000    0.000    0.000    0.000 mixins.py:9(_LoopBoundMixin)
        1    0.000    0.000    0.000    0.000 inference.py:273(PropKB)
        1    0.000    0.000    0.000    0.000 _quad_vec.py:94(_Bunch)
        3    0.000    0.000    0.000    0.000 mock.py:283(__init__)
        4    0.000    0.000    0.000    0.000 function_base.py:1800(_trim_zeros)
        1    0.000    0.000    0.000    0.000 pooling.py:893(LPPool1d)
        1    0.000    0.000    0.000    0.000 transforms.py:1284(CosineTransform)
        1    0.000    0.000    0.000    0.000 polyutils.py:444(PicklableWithSlots)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:1459(OneCycleLR)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1278(LocationEvent)
        1    0.000    0.000    0.000    0.000 module.py:27(_IncompatibleKeys)
        1    0.000    0.000    0.000    0.000 _base.py:111(_AllCompletedWaiter)
        1    0.000    0.000    0.000    0.000 container.py:31(Container)
        1    0.000    0.000    0.000    0.000 storage.py:972(_LegacyStorageMeta)
        3    0.000    0.000    0.000    0.000 orderings.py:156(__init__)
        1    0.000    0.000    0.000    0.000 backend_tools.py:429(_ToolEnableNavigation)
        1    0.000    0.000    0.000    0.000 _symbolic_trace.py:48(ProxyableClassMeta)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:182(WhiteSpaceTokenList)
        1    0.000    0.000    0.000    0.000 std.py:214(EMA)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:960(NoDefaultType)
        1    0.000    0.000    0.000    0.000 _classes.py:6(_ClassNamespace)
        1    0.000    0.000    0.000    0.000 _testutils.py:56(PytestTester)
        1    0.000    0.000    0.000    0.000 _hypotests.py:356(CramerVonMisesResult)
        1    0.000    0.000    0.000    0.000 widgets.py:2368(LassoSelector)
        1    0.000    0.000    0.000    0.000 cm.py:78(__init__)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:333(MailboxList)
        1    0.000    0.000    0.000    0.000 entity.py:540(GeometrySet)
        1    0.000    0.000    0.000    0.000 threading.py:410(Semaphore)
        1    0.000    0.000    0.000    0.000 blas.py:250(<dictcomp>)
        1    0.000    0.000    0.000    0.000 kind.py:36(KindMeta)
        1    0.000    0.000    0.000    0.000 Image.py:3712(register_mime)
        4    0.000    0.000    0.000    0.000 stride_tricks.py:363(_broadcast_to_dispatcher)
        1    0.000    0.000    0.000    0.000 extension.py:23(Extension)
        1    0.000    0.000    0.000    0.000 patches.py:2025(Circle)
        1    0.000    0.000    0.000    0.000 doccer.py:23(Decorator)
        1    0.000    0.000    0.000    0.000 _quad_vec.py:29(SemiInfiniteFunc)
        1    0.000    0.000    0.000    0.000 _ndgriddata.py:20(NearestNDInterpolator)
        1    0.000    0.000    0.000    0.000 __init__.py:1786(RootLogger)
        1    0.000    0.000    0.000    0.000 _optimize.py:3934(_Brute_Wrapper)
        1    0.000    0.000    0.000    0.000 quadrature.py:459(QuadratureMethods)
        1    0.000    0.000    0.000    0.000 expr_with_intlimits.py:5(ReorderError)
        1    0.000    0.000    0.000    0.000 zipfile.py:1995(PyZipFile)
        1    0.000    0.000    0.000    0.000 ticker.py:1816(IndexLocator)
        1    0.000    0.000    0.000    0.000 core.py:6844(_frommethod)
        1    0.000    0.000    0.000    0.000 transforms.py:40(IntegralTransformError)
        1    0.000    0.000    0.000    0.000 _tokenizer.py:11(Token)
        1    0.000    0.000    0.000    0.000 arpack.py:957(IterInv)
        2    0.000    0.000    0.000    0.000 core.py:47(condition)
        1    0.000    0.000    0.000    0.000 patches.py:2252(Sawtooth)
        1    0.000    0.000    0.000    0.000 colorbar.py:1636(ColorbarPatch)
        1    0.000    0.000    0.000    0.000 dotproduct.py:6(DotProduct)
        1    0.000    0.000    0.000    0.000 {built-in method _imp.get_frozen_object}
        1    0.000    0.000    0.000    0.000 tz.py:1036(tzstr)
        1    0.000    0.000    0.000    0.000 backend_tools.py:366(RubberbandBase)
        1    0.000    0.000    0.000    0.000 computed_entries.py:155(ManualEnergyAdjustment)
        1    0.000    0.000    0.000    0.000 polyoptions.py:728(Method)
        1    0.000    0.000    0.000    0.000 conv.py:342(ConvTranspose3d)
        1    0.000    0.000    0.000    0.000 profiler_util.py:534(FunctionEventAvg)
        1    0.000    0.000    0.000    0.000 rrule.py:66(weekday)
        1    0.000    0.000    0.000    0.000 util.py:19(LazyEval)
        1    0.000    0.000    0.000    0.000 __init__.py:21(cuFFTPlanCacheAttrContextProp)
        1    0.000    0.000    0.000    0.000 grad_mode.py:61(enable_grad)
        1    0.000    0.000    0.000    0.000 _parser.py:1589(ParserError)
        1    0.000    0.000    0.000    0.000 mul.py:25(NC_Marker)
        1    0.000    0.000    0.000    0.000 readers.py:107(NamespaceReader)
        1    0.000    0.000    0.000    0.000 _interface.py:747(_ScaledLinearOperator)
        1    0.000    0.000    0.000    0.000 logic.py:399(Not)
        1    0.000    0.000    0.000    0.000 fake_tensor.py:64(DynamicOutputShapeException)
        2    0.000    0.000    0.000    0.000 {method 'removesuffix' of 'str' objects}
        1    0.000    0.000    0.000    0.000 series.py:28(IntervalMathPrinter)
        1    0.000    0.000    0.000    0.000 connection.py:764(ConnectionWrapper)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_shake_256}
        1    0.000    0.000    0.000    0.000 dbapi2.py:49(<listcomp>)
        1    0.000    0.000    0.000    0.000 transforms.py:670(AbsTransform)
        1    0.000    0.000    0.000    0.000 activation.py:438(Hardswish)
        1    0.000    0.000    0.000    0.000 core.py:2654(CaselessKeyword)
        1    0.000    0.000    0.000    0.000 arpack.py:274(ArpackError)
        1    0.000    0.000    0.000    0.000 pydoc.py:389(ErrorDuringImport)
        1    0.000    0.000    0.000    0.000 loss.py:786(MultiLabelMarginLoss)
        1    0.000    0.000    0.000    0.000 _endian.py:23(_swapped_meta)
        1    0.000    0.000    0.000    0.000 geo.py:17(ThetaFormatter)
        1    0.000    0.000    0.000    0.000 boolalg.py:368(__hash__)
        1    0.000    0.000    0.000    0.000 linear.py:5(Linear)
        1    0.000    0.000    0.000    0.000 instancenorm.py:153(LazyInstanceNorm1d)
        1    0.000    0.000    0.000    0.000 _pytesttester.py:46(PytestTester)
        1    0.000    0.000    0.000    0.000 _musllinux.py:18(_MuslVersion)
        1    0.000    0.000    0.000    0.000 base.py:274(ConstantDenseOutput)
        1    0.000    0.000    0.000    0.000 bessel.py:800(hankel1)
        1    0.000    0.000    0.000    0.000 zipfile.py:742(_SharedFile)
        1    0.000    0.000    0.000    0.000 pooling.py:488(_AvgPoolNd)
        5    0.000    0.000    0.000    0.000 polyhedron.py:473(faces)
        1    0.000    0.000    0.000    0.000 domainelement.py:6(DomainElement)
        1    0.000    0.000    0.000    0.000 conv_fused.py:627(ConvBn3d)
        1    0.000    0.000    0.000    0.000 ssl.py:170(_TLSContentType)
        1    0.000    0.000    0.000    0.000 _ops.py:524(_OpNamespace)
        1    0.000    0.000    0.000    0.000 minimize_trustregion_constr.py:26(HessianLinearOperator)
        1    0.000    0.000    0.000    0.000 splitter_base.py:186(Subgraph)
        1    0.000    0.000    0.000    0.000 modules.py:1889(EndomorphismRing)
        1    0.000    0.000    0.000    0.000 _ltisys.py:737(TransferFunctionContinuous)
        1    0.000    0.000    0.000    0.000 comments.py:1136(TaggedScalar)
        1    0.000    0.000    0.000    0.000 __init__.py:7(is_built)
        2    0.000    0.000    0.000    0.000 __init__.py:983(setFormatter)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:251(BareQuotedString)
        1    0.000    0.000    0.000    0.000 _differentiable_functions.py:16(_ScalarGradWrapper)
        1    0.000    0.000    0.000    0.000 connection.py:578(SocketListener)
        1    0.000    0.000    0.000    0.000 six.py:129(_LazyModule)
        1    0.000    0.000    0.000    0.000 _interface.py:692(_SumLinearOperator)
        1    0.000    0.000    0.000    0.000 _util.py:1064(__getattr__)
        1    0.000    0.000    0.000    0.000 _exporter_states.py:9(ExportTypes)
        1    0.000    0.000    0.000    0.000 index_tricks.py:618(ndindex)
        1    0.000    0.000    0.000    0.000 {method 'copy' of 'set' objects}
        1    0.000    0.000    0.000    0.000 _nonlin.py:1019(Anderson)
        1    0.000    0.000    0.000    0.000 kind.py:84(_UndefinedKind)
        1    0.000    0.000    0.000    0.000 _directory_reader.py:9(_HasStorage)
        1    0.000    0.000    0.000    0.000 ctx_mp_python.py:33(mpnumeric)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        2    0.000    0.000    0.000    0.000 {built-in method torch._C._cuda_getArchFlags}
        1    0.000    0.000    0.000    0.000 transforms.py:1224(InverseSineTransform)
        1    0.000    0.000    0.000    0.000 widgets.py:2298(EllipseSelector)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:598(LocalPart)
        1    0.000    0.000    0.000    0.000 _policybase.py:41(__init__)
        1    0.000    0.000    0.000    0.000 activation.py:402(Mish)
        1    0.000    0.000    0.000    0.000 bessel.py:846(hankel2)
        1    0.000    0.000    0.000    0.000 errors.py:45(UnsupportedOperatorError)
        1    0.000    0.000    0.000    0.000 numbers.py:2751(RationalConstant)
        4    0.000    0.000    0.000    0.000 core.py:6052(postParse)
        1    0.000    0.000    0.000    0.000 recipes.py:336(UnequalIterablesError)
        1    0.000    0.000    0.000    0.000 utilities.py:7(DotProdSimpState)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1677(poisson_binomial_frozen)
        1    0.000    0.000    0.000    0.000 symbolic_opset13.py:410(_reduce_op_symbolic)
        1    0.000    0.000    0.000    0.000 configparser.py:360(Interpolation)
        1    0.000    0.000    0.000    0.000 fake_tensor.py:59(UnsupportedFakeTensorException)
        1    0.000    0.000    0.000    0.000 parsing.py:52(NotParenUncert)
        1    0.000    0.000    0.000    0.000 loss.py:850(SmoothL1Loss)
        1    0.000    0.000    0.000    0.000 pooling.py:97(MaxPool2d)
        1    0.000    0.000    0.000    0.000 qs.py:9(SievePolynomial)
        2    0.000    0.000    0.000    0.000 __init__.py:24(__init__)
        1    0.000    0.000    0.000    0.000 unicode.py:160(Greek)
        1    0.000    0.000    0.000    0.000 transforms.py:611(SoftplusTransform)
        1    0.000    0.000    0.000    0.000 trifinder.py:24(TrapezoidMapTriFinder)
        1    0.000    0.000    0.000    0.000 unicode.py:200(Cyrillic)
        1    0.000    0.000    0.000    0.000 _helpers.py:685(_dask_device)
        1    0.000    0.000    0.000    0.000 facts.py:214(rules_2prereq)
        1    0.000    0.000    0.000    0.000 __init__.py:522(maxdict)
        1    0.000    0.000    0.000    0.000 core.py:903(_MaskedUnaryOperation)
        1    0.000    0.000    0.000    0.000 __init__.py:235(Splitter)
        1    0.000    0.000    0.000    0.000 report.py:36(SQPReport)
        1    0.000    0.000    0.000    0.000 design_patterns.py:115(NullFile)
        1    0.000    0.000    0.000    0.000 _base.py:96(_FirstCompletedWaiter)
        1    0.000    0.000    0.000    0.000 series.py:1755(Parametric3DLineSeries)
        2    0.000    0.000    0.000    0.000 rootoftools.py:83(__init__)
        1    0.000    0.000    0.000    0.000 _differentialevolution.py:1851(_ConstraintWrapper)
        1    0.000    0.000    0.000    0.000 polyerrors.py:6(BasePolynomialError)
        1    0.000    0.000    0.000    0.000 colors.py:1367(PowerNorm)
        1    0.000    0.000    0.000    0.000 dist.py:1119(DistDeprecationWarning)
        1    0.000    0.000    0.000    0.000 _linalg.py:45(SVDResult)
        1    0.000    0.000    0.000    0.000 _array_like.py:44(_SupportsArrayFunc)
        1    0.000    0.000    0.000    0.000 comments.py:643(CommentedMapView)
        1    0.000    0.000    0.000    0.000 datapipes.py:18(DataFramesAsTuplesPipe)
        1    0.000    0.000    0.000    0.000 _util.py:559(_FunctionWrapper)
        1    0.000    0.000    0.000    0.000 __init__.py:41(PropModule)
        1    0.000    0.000    0.000    0.000 offsetbox.py:417(VPacker)
        1    0.000    0.000    0.000    0.000 legend_handler.py:338(HandlerRegularPolyCollection)
        1    0.000    0.000    0.000    0.000 backend_tools.py:487(AxisScaleBase)
        1    0.000    0.000    0.000    0.000 loss.py:474(MSELoss)
        3    0.000    0.000    0.000    0.000 fromnumeric.py:2831(_min_dispatcher)
        1    0.000    0.000    0.000    0.000 widgets.py:948(RadioButtons)
        1    0.000    0.000    0.000    0.000 _covariance.py:503(CovViaDiagonal)
        1    0.000    0.000    0.000    0.000 events.py:128(DocumentStartEvent)
        1    0.000    0.000    0.000    0.000 _typing.py:126(DTypesUnsigned)
        1    0.000    0.000    0.000    0.000 dataset.py:36(Dataset)
        1    0.000    0.000    0.000    0.000 zipfile.py:2271(FastLookup)
        1    0.000    0.000    0.000    0.000 backend_bases.py:3563(Show)
        1    0.000    0.000    0.000    0.000 mathtext.py:1298(ComputerModernFontConstants)
        1    0.000    0.000    0.000    0.000 _ltisys.py:1699(StateSpaceDiscrete)
        1    0.000    0.000    0.000    0.000 graph_module.py:28(__init__)
        1    0.000    0.000    0.000    0.000 _beartype.py:38(_create_beartype_decorator)
        1    0.000    0.000    0.000    0.000 __init__.py:26(ContextProp)
        1    0.000    0.000    0.000    0.000 fetch.py:7(_BaseDatasetFetcher)
        1    0.000    0.000    0.000    0.000 _recursive.py:123(SourceContext)
        1    0.000    0.000    0.000    0.000 _linalg.py:37(QRResult)
        1    0.000    0.000    0.000    0.000 _exceptions.py:32(UFuncTypeError)
        1    0.000    0.000    0.000    0.000 animation.py:1384(TimedAnimation)
        1    0.000    0.000    0.000    0.000 Orbit_spd_manager.py:11(orbit_spd_manager)
        1    0.000    0.000    0.000    0.000 category.py:113(StrCategoryLocator)
        1    0.000    0.000    0.000    0.000 _fortran_format_parser.py:169(Token)
        1    0.000    0.000    0.000    0.000 context.py:330(on_interrupt)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:230(__init__)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:659(FitDataError)
        1    0.000    0.000    0.000    0.000 fake_tensor.py:69(DataDependentOutputException)
        2    0.000    0.000    0.000    0.000 calendar.py:76(__init__)
        1    0.000    0.000    0.000    0.000 index_tricks.py:569(ndenumerate)
        1    0.000    0.000    0.000    0.000 loss.py:991(SoftMarginLoss)
        1    0.000    0.000    0.000    0.000 scale.py:372(SymmetricalLogTransform)
        1    0.000    0.000    0.000    0.000 core.py:797(_DomainCheckInterval)
        1    0.000    0.000    0.000    0.000 core.py:5917(Dict)
        1    0.000    0.000    0.000    0.000 conv.py:281(ConvTranspose2d)
        1    0.000    0.000    0.000    0.000 art3d.py:441(Path3DCollection)
        1    0.000    0.000    0.000    0.000 parse.py:182(_NetlocResultMixinStr)
        1    0.000    0.000    0.000    0.000 __init__.py:46(__init__)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:658(InterpolatedUnivariateSpline)
        1    0.000    0.000    0.000    0.000 pickletools.py:948(StackObject)
        3    0.000    0.000    0.000    0.000 _parser.py:99(checklookbehindgroup)
        2    0.000    0.000    0.000    0.000 axis.py:604(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:10(NBitBase)
        1    0.000    0.000    0.000    0.000 core.py:4841(AtStringStart)
        1    0.000    0.000    0.000    0.000 _mgc.py:17(_ParallelP)
        1    0.000    0.000    0.000    0.000 band_data_in.py:25(check)
        1    0.000    0.000    0.000    0.000 source.py:1(<module>)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:809(FormulaCollection)
        1    0.000    0.000    0.000    0.000 transforms.py:1343(InverseCosineTransform)
        1    0.000    0.000    0.000    0.000 threading.py:267(__exit__)
        1    0.000    0.000    0.000    0.000 mathtext.py:888(DejaVuFonts)
        1    0.000    0.000    0.000    0.000 unicode.py:8(_lazyclassproperty)
        1    0.000    0.000    0.000    0.000 util.py:185(_GroupConsecutive)
        1    0.000    0.000    0.000    0.000 utils.py:102(FormatReplace)
        1    0.000    0.000    0.000    0.000 argparse.py:783(Action)
        2    0.000    0.000    0.000    0.000 index_tricks.py:144(__init__)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha3_512}
        1    0.000    0.000    0.000    0.000 legend_handler.py:260(HandlerPatch)
        1    0.000    0.000    0.000    0.000 ticker.py:367(FuncFormatter)
        1    0.000    0.000    0.000    0.000 collections.py:1301(AsteriskPolygonCollection)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:424(_moment_raw_formula)
        1    0.000    0.000    0.000    0.000 _linalg.py:41(SlogdetResult)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:980(NoExtraItemsType)
        1    0.000    0.000    0.000    0.000 _interface.py:816(MatrixLinearOperator)
        1    0.000    0.000    0.000    0.000 expr.py:4076(UnevaluatedExpr)
        1    0.000    0.000    0.000    0.000 _typing.py:118(DTypesSigned)
        1    0.000    0.000    0.000    0.000 decoder.py:20(JSONDecodeError)
        1    0.000    0.000    0.000    0.000 transforms.py:986(FourierTransform)
        1    0.000    0.000    0.000    0.000 _polyint.py:145(_Interpolator1DWithDerivatives)
        1    0.000    0.000    0.000    0.000 _dual_annealing.py:384(LocalSearchWrapper)
        1    0.000    0.000    0.000    0.000 events.py:170(AliasEvent)
        1    0.000    0.000    0.000    0.000 _warnings_errors.py:4(DegenerateDataWarning)
        2    0.000    0.000    0.000    0.000 _adapters.py:25(__init__)
        1    0.000    0.000    0.000    0.000 _basic.py:2819(_range_prod)
        1    0.000    0.000    0.000    0.000 offsetbox.py:368(PackerBase)
        1    0.000    0.000    0.000    0.000 _manylinux.py:80(_GLibCVersion)
        1    0.000    0.000    0.000    0.000 fetch.py:18(_IterableDatasetFetcher)
        1    0.000    0.000    0.000    0.000 pooling.py:935(LPPool2d)
        1    0.000    0.000    0.000    0.000 jiterator.py:10(_CodeParser)
        1    0.000    0.000    0.000    0.000 collections.py:1296(StarPolygonCollection)
        1    0.000    0.000    0.000    0.000 response.py:57(addinfo)
        1    0.000    0.000    0.000    0.000 legend_handler.py:132(HandlerNpoints)
        1    0.000    0.000    0.000    0.000 transforms.py:1047(InverseFourierTransform)
        1    0.000    0.000    0.000    0.000 contour.py:35(ClabelText)
        1    0.000    0.000    0.000    0.000 _spdx.py:10(SPDXException)
        1    0.000    0.000    0.000    0.000 py39.py:28(UnequalIterablesError)
        1    0.000    0.000    0.000    0.000 modules.py:1746(ModuleHomomorphism)
        2    0.000    0.000    0.000    0.000 libmpf.py:692(mpf_sign)
        1    0.000    0.000    0.000    0.000 frontend.py:101(FrontendError)
        1    0.000    0.000    0.000    0.000 variable.py:13(Variable)
        1    0.000    0.000    0.000    0.000 polyoptions.py:701(Series)
        1    0.000    0.000    0.000    0.000 index_tricks.py:211(MGridClass)
        1    0.000    0.000    0.000    0.000 decorators.py:207(_SympifyWrapper)
        1    0.000    0.000    0.000    0.000 _ltisys.py:1625(StateSpaceContinuous)
        1    0.000    0.000    0.000    0.000 _dual_annealing.py:212(StrategyChain)
        1    0.000    0.000    0.000    0.000 fancy_getopt.py:450(OptionDummy)
        1    0.000    0.000    0.000    0.000 ndim_array.py:591(ImmutableNDimArray)
        1    0.000    0.000    0.000    0.000 characteristiczero.py:7(CharacteristicZero)
        1    0.000    0.000    0.000    0.000 errors.py:93(NonPrintableDefect)
        1    0.000    0.000    0.000    0.000 transforms.py:2199(BlendedAffine2D)
        1    0.000    0.000    0.000    0.000 _mio4.py:89(VarHeader4)
        1    0.000    0.000    0.000    0.000 legend_handler.py:541(HandlerStem)
        1    0.000    0.000    0.000    0.000 configparser.py:181(NoSectionError)
        5    0.000    0.000    0.000    0.000 libmpf.py:49(<lambda>)
        1    0.000    0.000    0.000    0.000 comments.py:52(__init__)
        1    0.000    0.000    0.000    0.000 core.py:5054(NotAny)
        1    0.000    0.000    0.000    0.000 more.py:2688(SequenceView)
        1    0.000    0.000    0.000    0.000 Physics_System.py:5(Phy_Sys)
        1    0.000    0.000    0.000    0.000 series.py:1742(Line3DBaseSeries)
        1    0.000    0.000    0.000    0.000 errors.py:33(MessageDefect)
        1    0.000    0.000    0.000    0.000 facts.py:571(FactKB)
        1    0.000    0.000    0.000    0.000 constraints.py:311(_GreaterThan)
        1    0.000    0.000    0.000    0.000 single.py:1685(HomogeneousCoeffBest)
        1    0.000    0.000    0.000    0.000 rk.py:552(RkDenseOutput)
        1    0.000    0.000    0.000    0.000 constraints.py:232(_OneHot)
        1    0.000    0.000    0.000    0.000 parser.py:79(BytesParser)
        1    0.000    0.000    0.000    0.000 calendar.py:594(LocaleHTMLCalendar)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:608(SequentialLR)
        1    0.000    0.000    0.000    0.000 {method 'close' of 'generator' objects}
        1    0.000    0.000    0.000    0.000 serialization.py:286(_open_zipfile_writer_file)
        5    0.000    0.000    0.000    0.000 platform.py:775(_unknown_as_blank)
        1    0.000    0.000    0.000    0.000 polar.py:515(RadialTick)
        1    0.000    0.000    0.000    0.000 modules.py:1286(SubModuleQuotientRing)
        1    0.000    0.000    0.000    0.000 argparse.py:1308(Namespace)
        3    0.000    0.000    0.000    0.000 {built-in method sys.audit}
        1    0.000    0.000    0.000    0.000 mathtext.py:949(DejaVuSansFonts)
        1    0.000    0.000    0.000    0.000 _minimize.py:1066(_Remove_From_Func)
        1    0.000    0.000    0.000    0.000 _aliases.py:194(UniqueInverseResult)
        1    0.000    0.000    0.000    0.000 events.py:659(_Local)
        1    0.000    0.000    0.000    0.000 ticker.py:2577(SymmetricalLogLocator)
        1    0.000    0.000    0.000    0.000 locks.py:13(_ContextManagerMixin)
        2    0.000    0.000    0.000    0.000 rl.py:10(rm_id)
        1    0.000    0.000    0.000    0.000 memory.py:683(CUDAPluggableAllocator)
        1    0.000    0.000    0.000    0.000 core.py:3639(GoToColumn)
        1    0.000    0.000    0.000    0.000 dir_util.py:23(__init__)
        1    0.000    0.000    0.000    0.000 locks.py:421(BoundedSemaphore)
        1    0.000    0.000    0.000    0.000 streamreader.py:8(StreamReaderIterDataPipe)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha3_384}
        1    0.000    0.000    0.000    0.000 _zeros_py.py:35(RootResults)
        1    0.000    0.000    0.000    0.000 core.py:1125(_DomainedBinaryOperation)
        1    0.000    0.000    0.000    0.000 simpledomain.py:7(SimpleDomain)
        1    0.000    0.000    0.000    0.000 profiler.py:552(emit_itt)
        1    0.000    0.000    0.000    0.000 para4band.py:72(Eigen_Trans)
        4    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:4330(_shift_scale_distribution_function_2arg)
        1    0.000    0.000    0.000    0.000 tokens.py:220(StreamStartToken)
        1    0.000    0.000    0.000    0.000 lsoda.py:211(LsodaDenseOutput)
        1    0.000    0.000    0.000    0.000 request.py:605(BaseHandler)
        3    0.000    0.000    0.000    0.000 symbolic_opset9.py:2106(wrap_logical_op_with_cast_to)
        1    0.000    0.000    0.000    0.000 __init__.py:279(CudaError)
        1    0.000    0.000    0.000    0.000 core.py:4073(_ErrorStop)
        1    0.000    0.000    0.000    0.000 csv.py:69(unix_dialect)
        1    0.000    0.000    0.000    0.000 protocols.py:109(BufferedProtocol)
        1    0.000    0.000    0.000    0.000 polyoptions.py:664(Include)
        1    0.000    0.000    0.000    0.000 __init__.py:29(context)
        1    0.000    0.000    0.000    0.000 six.py:178(__init__)
        1    0.000    0.000    0.000    0.000 argparse.py:1680(_MutuallyExclusiveGroup)
        1    0.000    0.000    0.000    0.000 orderings.py:35(LexOrder)
        1    0.000    0.000    0.000    0.000 cache.py:5(_cache)
        1    0.000    0.000    0.000    0.000 ticker.py:1985(MultipleLocator)
        1    0.000    0.000    0.000    0.000 exceptions.py:40(UnknownEditVariable)
        2    0.000    0.000    0.000    0.000 __init__.py:133(create_module)
        1    0.000    0.000    0.000    0.000 structures.py:7(DataChunkDF)
        1    0.000    0.000    0.000    0.000 backend_bases.py:3437(StatusbarBase)
        1    0.000    0.000    0.000    0.000 _czt.py:275(ZoomFFT)
        1    0.000    0.000    0.000    0.000 protocols.py:177(SubprocessProtocol)
        1    0.000    0.000    0.000    0.000 request.py:1474(FileHandler)
        1    0.000    0.000    0.000    0.000 _idl.py:145(Pointer)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:2011(nchypergeom_wallenius_gen)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:1330(P2POp)
        1    0.000    0.000    0.000    0.000 geo.py:419(LambertTransform)
        1    0.000    0.000    0.000    0.000 _typing.py:113(DTypesBool)
        1    0.000    0.000    0.000    0.000 polyerrors.py:13(ExactQuotientFailed)
        1    0.000    0.000    0.000    0.000 decoder.py:114(ImageHandler)
        1    0.000    0.000    0.000    0.000 util.py:368(ForkAwareThreadLock)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:376(_RewindState)
        1    0.000    0.000    0.000    0.000 ElementPath.py:350(_SelectorContext)
        1    0.000    0.000    0.000    0.000 ticker.py:2041(_Edge_integer)
        1    0.000    0.000    0.000    0.000 contextlib.py:340(__init__)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:482(InvalidMailbox)
        2    0.000    0.000    0.000    0.000 arrayprint.py:493(_recursive_guard)
        1    0.000    0.000    0.000    0.000 dates.py:1928(ConciseDateConverter)
        1    0.000    0.000    0.000    0.000 _constraints.py:21(NonlinearConstraint)
        1    0.000    0.000    0.000    0.000 core.py:5880(Group)
        1    0.000    0.000    0.000    0.000 common.py:11(HolderModule)
        1    0.000    0.000    0.000    0.000 multidimensional.py:56(vectorize)
        2    0.000    0.000    0.000    0.000 ctx_mp_python.py:620(<lambda>)
        1    0.000    0.000    0.000    0.000 error.py:19(URLError)
        1    0.000    0.000    0.000    0.000 _quadpack_py.py:1235(_NQuad)
        1    0.000    0.000    0.000    0.000 extrapolation.py:728(cohen_alt_class)
        1    0.000    0.000    0.000    0.000 stubs.py:21(DeQuantStub)
        1    0.000    0.000    0.000    0.000 ticker.py:1845(FixedLocator)
        1    0.000    0.000    0.000    0.000 configparser.py:284(InterpolationDepthError)
        1    0.000    0.000    0.000    0.000 _parser.py:29(Variable)
        1    0.000    0.000    0.000    0.000 threading.py:1370(Timer)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:1554(RectBivariateSpline)
        1    0.000    0.000    0.000    0.000 fused.py:149(ConvAdd2d)
        1    0.000    0.000    0.000    0.000 pytree_hacks.py:16(PlaceHolder)
        1    0.000    0.000    0.000    0.000 decorator.py:101(no_attrs_in_subclass)
        1    0.000    0.000    0.000    0.000 _sources.py:86(SourceContext)
        1    0.000    0.000    0.000    0.000 pydoc.py:1979(__init__)
        1    0.000    0.000    0.000    0.000 single.py:2667(SecondLinearBessel)
        1    0.000    0.000    0.000    0.000 qconfig.py:79(QConfig)
        1    0.000    0.000    0.000    0.000 parameters.py:70(evaluate)
        1    0.000    0.000    0.000    0.000 {built-in method numpy._set_promotion_state}
        1    0.000    0.000    0.000    0.000 triinterpolate.py:1088(_DOF_estimator_geom)
        1    0.000    0.000    0.000    0.000 fused.py:13(ConvReLU1d)
        1    0.000    0.000    0.000    0.000 core.py:2415(NoMatch)
        1    0.000    0.000    0.000    0.000 frontend.py:315(Builder)
        1    0.000    0.000    0.000    0.000 threading.py:498(BoundedSemaphore)
        1    0.000    0.000    0.000    0.000 single.py:2192(NthLinearConstantCoeffVariationOfParameters)
        1    0.000    0.000    0.000    0.000 pickletools.py:174(ArgumentDescriptor)
        1    0.000    0.000    0.000    0.000 grad_mode.py:226(set_multithreading_enabled)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:347(GroupList)
        1    0.000    0.000    0.000    0.000 optimizer.py:20(_RequiredParameter)
        1    0.000    0.000    0.000    0.000 parse.py:127(_ResultMixinStr)
        1    0.000    0.000    0.000    0.000 Image.py:3228(SupportsArrayInterface)
        4    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1798(_process_parameters)
        1    0.000    0.000    0.000    0.000 optimization.py:15(Newton)
        1    0.000    0.000    0.000    0.000 _interface.py:660(_TransposedLinearOperator)
        1    0.000    0.000    0.000    0.000 transports.py:172(DatagramTransport)
        1    0.000    0.000    0.000    0.000 argparse.py:1097(_HelpAction)
        1    0.000    0.000    0.000    0.000 patches.py:1945(_Base)
        1    0.000    0.000    0.000    0.000 _typing.py:139(DTypesReal)
        1    0.000    0.000    0.000    0.000 _script.py:264(ScriptMeta)
        4    0.000    0.000    0.000    0.000 {built-in method _sre.ascii_tolower}
        1    0.000    0.000    0.000    0.000 _array_api.py:585(<setcomp>)
        1    0.000    0.000    0.000    0.000 proxy.py:304(GraphAppendingTracer)
        1    0.000    0.000    0.000    0.000 core.py:3673(LineStart)
        1    0.000    0.000    0.000    0.000 core.py:5240(DelimitedList)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:672(FitSolverError)
        1    0.000    0.000    0.000    0.000 _trustregion_ncg.py:42(CGSteihaugSubproblem)
        1    0.000    0.000    0.000    0.000 groundtypes.py:21(_GMPYInteger)
        1    0.000    0.000    0.000    0.000 _fitpack_repro.py:537(Bunch)
        1    0.000    0.000    0.000    0.000 mutable_ndim_array.py:4(MutableNDimArray)
        1    0.000    0.000    0.000    0.000 typing.py:1543(__repr__)
        1    0.000    0.000    0.000    0.000 backend_managers.py:11(ToolEvent)
        1    0.000    0.000    0.000    0.000 patches.py:3165(_Bracket)
        1    0.000    0.000    0.000    0.000 deprecation.py:254(_deprecate_privatize_attribute)
        1    0.000    0.000    0.000    0.000 sympify.py:27(SympifyError)
        1    0.000    0.000    0.000    0.000 dates.py:621(IndexDateFormatter)
        1    0.000    0.000    0.000    0.000 message.py:1195(EmailMessage)
        1    0.000    0.000    0.000    0.000 animation.py:753(ImageMagickFileWriter)
        1    0.000    0.000    0.000    0.000 protocols.py:66(Protocol)
        1    0.000    0.000    0.000    0.000 spawn.py:25(ProcessRaisedException)
        1    0.000    0.000    0.000    0.000 _differentiable_functions.py:820(IdentityVectorFunction)
        2    0.000    0.000    0.000    0.000 core.py:883(__init__)
        1    0.000    0.000    0.000    0.000 _exceptions.py:56(_UFuncBinaryResolutionError)
        1    0.000    0.000    0.000    0.000 argparse.py:1116(_VersionAction)
        1    0.000    0.000    0.000    0.000 _mio5_params.py:234(MatlabObject)
        1    0.000    0.000    0.000    0.000 single.py:732(Bernoulli)
        1    0.000    0.000    0.000    0.000 exceptions.py:19(DuplicateConstraint)
        1    0.000    0.000    0.000    0.000 arpack.py:932(LuInv)
        1    0.000    0.000    0.000    0.000 resource_sharer.py:45(DupFd)
        1    0.000    0.000    0.000    0.000 hb.py:376(<dictcomp>)
        1    0.000    0.000    0.000    0.000 scanner.py:2023(EOLComment)
        1    0.000    0.000    0.000    0.000 __init__.py:250(ExecutableNotFoundError)
        1    0.000    0.000    0.000    0.000 polyoptions.py:674(All)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:1153(_Frame)
        1    0.000    0.000    0.000    0.000 core.py:241(_ParseActionIndexError)
        1    0.000    0.000    0.000    0.000 _morestats.py:1203(_BigFloat)
        1    0.000    0.000    0.000    0.000 context.py:295(ForkServerProcess)
        1    0.000    0.000    0.000    0.000 art3d.py:324(PathPatch3D)
        1    0.000    0.000    0.000    0.000 spawn.py:79(ProcessContext)
        1    0.000    0.000    0.000    0.000 spectral_norm.py:159(SpectralNormLoadStateDictPreHook)
        1    0.000    0.000    0.000    0.000 stride_tricks.py:15(DummyArray)
        1    0.000    0.000    0.000    0.000 traceback.py:613(_ExceptionPrintContext)
        1    0.000    0.000    0.000    0.000 single.py:2387(NthLinearEulerEqHomogeneous)
        1    0.000    0.000    0.000    0.000 threading.py:1001(_set_ident)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1278(_TimelikeFormat)
        1    0.000    0.000    0.000    0.000 backend_agg.py:612(_BackendAgg)
        1    0.000    0.000    0.000    0.000 constraints.py:245(_IntegerInterval)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:1336(CosineAnnealingWarmRestarts)
        1    0.000    0.000    0.000    0.000 pooling.py:1006(AdaptiveMaxPool1d)
        1    0.000    0.000    0.000    0.000 parse.py:212(_NetlocResultMixinBytes)
        1    0.000    0.000    0.000    0.000 Image.py:3727(register_save)
        1    0.000    0.000    0.000    0.000 str.py:998(StrReprPrinter)
        1    0.000    0.000    0.000    0.000 _array_like.py:39(_SupportsArray)
        1    0.000    0.000    0.000    0.000 headerregistry.py:387(SingleAddressHeader)
        1    0.000    0.000    0.000    0.000 __init__.py:714(ExFileObject)
        1    0.000    0.000    0.000    0.000 _special_sparse_arrays.py:836(MikotaPair)
        2    0.000    0.000    0.000    0.000 __init__.py:440(__init__)
        1    0.000    0.000    0.000    0.000 exceptions.py:300(RecursiveGrammarException)
        1    0.000    0.000    0.000    0.000 more.py:4171(countable)
        1    0.000    0.000    0.000    0.000 facts.py:565(InconsistentAssumptions)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:173(_enable_get_lr_call)
        1    0.000    0.000    0.000    0.000 trifinder.py:7(TriFinder)
        1    0.000    0.000    0.000    0.000 scale.py:404(InvertedSymmetricalLogTransform)
        1    0.000    0.000    0.000    0.000 __init__.py:10(__init__)
        1    0.000    0.000    0.000    0.000 _multivariate.py:4127(unitary_group_gen)
        1    0.000    0.000    0.000    0.000 core.py:3810(WordEnd)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:10816(FitUniformFixedScaleDataError)
        1    0.000    0.000    0.000    0.000 _typing.py:47(SupportsRead)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:1355(SmoothBivariateSpline)
        1    0.000    0.000    0.000    0.000 mathieu_functions.py:9(MathieuBase)
        1    0.000    0.000    0.000    0.000 context.py:233(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:10(warn_distutils_present)
        1    0.000    0.000    0.000    0.000 constraints.py:284(_IntegerGreaterThan)
        1    0.000    0.000    0.000    0.000 graph.py:203(save_on_cpu)
        4    0.000    0.000    0.000    0.000 _pep440.py:426(_parse_local_version)
        1    0.000    0.000    0.000    0.000 mock.py:388(_MockIter)
        1    0.000    0.000    0.000    0.000 std.py:40(TqdmWarning)
        1    0.000    0.000    0.000    0.000 serialization.py:239(_opener)
        1    0.000    0.000    0.000    0.000 factorials.py:17(CombinatorialFunction)
        1    0.000    0.000    0.000    0.000 usertools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 Image.py:3740(register_save_all)
        1    0.000    0.000    0.000    0.000 request.py:791(ProxyHandler)
        1    0.000    0.000    0.000    0.000 c10d_error_logger.py:30(_get_logging_handler)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:404(GroupMember)
        1    0.000    0.000    0.000    0.000 single.py:2294(NthLinearConstantCoeffUndeterminedCoefficients)
        1    0.000    0.000    0.000    0.000 argparse.py:1253(FileType)
        1    0.000    0.000    0.000    0.000 worker.py:119(_IterableDatasetStopIteration)
        1    0.000    0.000    0.000    0.000 scalarstring.py:54(LiteralScalarString)
        1    0.000    0.000    0.000    0.000 single.py:1930(NthOrderReducible)
        1    0.000    0.000    0.000    0.000 single.py:2842(LieGroup)
        2    0.000    0.000    0.000    0.000 torch_version.py:19(__init__)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:3256(_NamedTupleMeta)
        1    0.000    0.000    0.000    0.000 nodes.py:79(ScalarNode)
        1    0.000    0.000    0.000    0.000 _animation_data.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _quad_vec.py:57(DoubleInfiniteFunc)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:353(StepLR)
        1    0.000    0.000    0.000    0.000 diophantine.py:918(InhomogeneousGeneralQuadratic)
        1    0.000    0.000    0.000    0.000 frontend.py:118(UnsupportedNodeError)
        1    0.000    0.000    0.000    0.000 utils.py:34(MatchAllNode)
        1    0.000    0.000    0.000    0.000 core.py:3722(LineEnd)
        1    0.000    0.000    0.000    0.000 minimize_trustregion_constr.py:39(LagrangianHessian)
        1    0.000    0.000    0.000    0.000 kind.py:106(_NumberKind)
        1    0.000    0.000    0.000    0.000 _typing.py:340(_IterDataPipeMeta)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:272(MultiplicativeLR)
        1    0.000    0.000    0.000    0.000 _differentiable_functions.py:418(_VectorJacWrapper)
        1    0.000    0.000    0.000    0.000 error.py:120(MarkedYAMLError)
        1    0.000    0.000    0.000    0.000 dates.py:1657(MinuteLocator)
        1    0.000    0.000    0.000    0.000 parser.py:71(HeaderParser)
        1    0.000    0.000    0.000    0.000 mathtext.py:1810(Rule)
        1    0.000    0.000    0.000    0.000 more.py:3250(time_limited)
        1    0.000    0.000    0.000    0.000 _filter_design.py:38(BadCoefficients)
        1    0.000    0.000    0.000    0.000 arpack.py:606(_UnsymmetricArpackParams)
        1    0.000    0.000    0.000    0.000 animation.py:99(__init__)
        1    0.000    0.000    0.000    0.000 parser.py:804(RoundTripParser)
        1    0.000    0.000    0.000    0.000 request.py:624(HTTPErrorProcessor)
        1    0.000    0.000    0.000    0.000 numpy.py:346(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _typing.py:63(NestedSequence)
        1    0.000    0.000    0.000    0.000 rootoftools.py:152(RootOf)
        1    0.000    0.000    0.000    0.000 _monkeytype_config.py:153(JitTypeTraceStoreLogger)
        1    0.000    0.000    0.000    0.000 _python_dispatch.py:97(BaseTorchDispatchMode)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:336(_median_formula)
        1    0.000    0.000    0.000    0.000 mock.py:1053(_AnyComparer)
        1    0.000    0.000    0.000    0.000 calendar.py:26(IllegalMonthError)
        1    0.000    0.000    0.000    0.000 tensor.py:816(<listcomp>)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:99(_moment_raw_formula)
        1    0.000    0.000    0.000    0.000 mock.py:2933(_AsyncIterator)
        1    0.000    0.000    0.000    0.000 single.py:2098(NthLinearConstantCoeffHomogeneous)
        1    0.000    0.000    0.000    0.000 parameter.py:196(UninitializedBuffer)
        1    0.000    0.000    0.000    0.000 ticker.py:2964(OldAutoLocator)
        1    0.000    0.000    0.000    0.000 dropout.py:25(Dropout)
        1    0.000    0.000    0.000    0.000 configparser.py:1242(SafeConfigParser)
        1    0.000    0.000    0.000    0.000 _basinhopping.py:301(Metropolis)
        1    0.000    0.000    0.000    0.000 dispatcher.py:33(RaiseNotImplementedError)
        1    0.000    0.000    0.000    0.000 _covariance.py:618(CovViaPSD)
        1    0.000    0.000    0.000    0.000 queue.py:242(LifoQueue)
        1    0.000    0.000    0.000    0.000 ase.py:31(Atoms)
        1    0.000    0.000    0.000    0.000 copyreg.py:22(constructor)
        1    0.000    0.000    0.000    0.000 _util.py:571(_ScalarFunctionWrapper)
        1    0.000    0.000    0.000    0.000 python.py:67(Lit)
        1    0.000    0.000    0.000    0.000 mock.py:2388(_ANY)
        1    0.000    0.000    0.000    0.000 serialization.py:1096(StorageType)
        1    0.000    0.000    0.000    0.000 index_tricks.py:262(OGridClass)
        1    0.000    0.000    0.000    0.000 conv.py:1128(_ConvTransposeMixin)
        1    0.000    0.000    0.000    0.000 ticker.py:296(IndexFormatter)
        1    0.000    0.000    0.000    0.000 _typing.py:145(DTypesComplex)
        1    0.000    0.000    0.000    0.000 legend_handler.py:306(HandlerLineCollection)
        1    0.000    0.000    0.000    0.000 inputs.py:3071(UnknownPotcarWarning)
        1    0.000    0.000    0.000    0.000 series.py:2122(GenericDataSeries)
        1    0.000    0.000    0.000    0.000 parse.py:315(DefragResult)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1928(nchypergeom_fisher_gen)
        2    0.000    0.000    0.000    0.000 version.py:511(_parse_local_version)
        1    0.000    0.000    0.000    0.000 __init__.py:414(_make_alias)
        1    0.000    0.000    0.000    0.000 vq.py:84(ClusterError)
        1    0.000    0.000    0.000    0.000 reader.py:35(ReaderError)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:1454(LSQBivariateSpline)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:1623(_TypeVarLikeMeta)
        1    0.000    0.000    0.000    0.000 arpack.py:908(SpLuInv)
        1    0.000    0.000    0.000    0.000 pickletools.py:2550(_Example)
        1    0.000    0.000    0.000    0.000 exceptions.py:47(LimitOverrunError)
        1    0.000    0.000    0.000    0.000 _vertex.py:222(VertexCacheIndex)
        1    0.000    0.000    0.000    0.000 core.py:4895(FollowedBy)
        1    0.000    0.000    0.000    0.000 numbers.py:3142(_as_mpf_val)
        1    0.000    0.000    0.000    0.000 annotations.py:29(Module)
        1    0.000    0.000    0.000    0.000 _exceptions.py:80(_UFuncInputCastingError)
        1    0.000    0.000    0.000    0.000 legend_handler.py:433(HandlerErrorbar)
        1    0.000    0.000    0.000    0.000 numbers.py:12(Number)
        1    0.000    0.000    0.000    0.000 {method 'groups' of 're.Match' objects}
        1    0.000    0.000    0.000    0.000 hyperexpand.py:926(MeijerFormulaCollection)
        1    0.000    0.000    0.000    0.000 core.py:4931(PrecededBy)
        1    0.000    0.000    0.000    0.000 _nonlin.py:589(GenericBroyden)
        1    0.000    0.000    0.000    0.000 _base.py:141(_AcquireFutures)
        1    0.000    0.000    0.000    0.000 reduction.py:211(_C)
        1    0.000    0.000    0.000    0.000 font_manager.py:939(_JSONEncoder)
        1    0.000    0.000    0.000    0.000 pyfunctorch.py:176(FunctionalizeInterpreter)
        1    0.000    0.000    0.000    0.000 _version.py:70(<listcomp>)
        1    0.000    0.000    0.000    0.000 queues.py:234(LifoQueue)
        1    0.000    0.000    0.000    0.000 tz.py:373(_tzfile)
        1    0.000    0.000    0.000    0.000 comments.py:1085(CommentedOrderedMap)
        1    0.000    0.000    0.000    0.000 orderings.py:45(GradedLexOrder)
        1    0.000    0.000    0.000    0.000 pooling.py:1132(AdaptiveAvgPool1d)
        1    0.000    0.000    0.000    0.000 gaussiandomains.py:211(GaussianRational)
        1    0.000    0.000    0.000    0.000 cache.py:45(__cacheit)
        1    0.000    0.000    0.000    0.000 ticker.py:1154(LogFormatterMathtext)
        1    0.000    0.000    0.000    0.000 arpack.py:288(ArpackNoConvergence)
        1    0.000    0.000    0.000    0.000 polyoptions.py:366(Field)
        1    0.000    0.000    0.000    0.000 __init__.py:160(_special_method_cache)
        1    0.000    0.000    0.000    0.000 pooling.py:1036(AdaptiveMaxPool2d)
        1    0.000    0.000    0.000    0.000 graph.py:458(_CloneArgBeforeMutateMode)
        2    0.000    0.000    0.000    0.000 results.py:460(<lambda>)
        1    0.000    0.000    0.000    0.000 rcsetup.py:442(_validate_mathtext_fallback_to_cm)
        3    0.000    0.000    0.000    0.000 core.py:867(__init__)
        1    0.000    0.000    0.000    0.000 queues.py:11(QueueEmpty)
        1    0.000    0.000    0.000    0.000 mathtext.py:1309(STIXFontConstants)
        1    0.000    0.000    0.000    0.000 unicode.py:135(BasicMultilingualPlane)
        1    0.000    0.000    0.000    0.000 mathtext.py:321(MathtextBackendPath)
        1    0.000    0.000    0.000    0.000 series.py:2104(ContourSeries)
        1    0.000    0.000    0.000    0.000 api.py:87(AllGatherStates)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:1670(SphereBivariateSpline)
        1    0.000    0.000    0.000    0.000 _adapters.py:20(TraversableResourcesLoader)
        1    0.000    0.000    0.000    0.000 sympy_parser.py:86(ParenthesisGroup)
        1    0.000    0.000    0.000    0.000 single.py:2787(SecondLinearAiry)
        1    0.000    0.000    0.000    0.000 request.py:1398(HTTPCookieProcessor)
        1    0.000    0.000    0.000    0.000 patches.py:2080(RArrow)
        1    0.000    0.000    0.000    0.000 rszeta.py:53(RSCache)
        1    0.000    0.000    0.000    0.000 feedparser.py:532(BytesFeedParser)
        1    0.000    0.000    0.000    0.000 request.py:1050(HTTPBasicAuthHandler)
        1    0.000    0.000    0.000    0.000 numerictypes.py:425(_typedict)
        1    0.000    0.000    0.000    0.000 mock.py:2100(NonCallableMagicMock)
        1    0.000    0.000    0.000    0.000 request.py:1383(HTTPSHandler)
        1    0.000    0.000    0.000    0.000 _multivariate.py:5899(uniform_direction_frozen)
        1    0.000    0.000    0.000    0.000 splitter_base.py:37(_SplitterSettingBase)
        1    0.000    0.000    0.000    0.000 __init__.py:753(Filter)
        1    0.000    0.000    0.000    0.000 function.py:281(FunctionMeta)
        1    0.000    0.000    0.000    0.000 homomorphisms.py:537(FreeModuleHomomorphism)
        1    0.000    0.000    0.000    0.000 linalg.py:67(LinAlgError)
        1    0.000    0.000    0.000    0.000 client.py:176(HTTPMessage)
        1    0.000    0.000    0.000    0.000 utils.py:226(CallbackIOWrapper)
        1    0.000    0.000    0.000    0.000 colors.py:1525(NoNorm)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:1837(SmoothSphereBivariateSpline)
        1    0.000    0.000    0.000    0.000 dtypes.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:2332(_classproperty)
        1    0.000    0.000    0.000    0.000 mock.py:394(Base)
        1    0.000    0.000    0.000    0.000 polyoptions.py:375(Greedy)
        1    0.000    0.000    0.000    0.000 constraints.py:345(_LessThan)
        1    0.000    0.000    0.000    0.000 _memory_viz.py:313(PlotWriter)
        1    0.000    0.000    0.000    0.000 __init__.py:735(OutsideDestinationError)
        1    0.000    0.000    0.000    0.000 _jit_internal.py:1090(BroadcastingListCls)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1245(ComplexFloatingFormat)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:600(rv_continuous_frozen)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:591(rv_discrete_frozen)
        1    0.000    0.000    0.000    0.000 patches.py:2047(LArrow)
        1    0.000    0.000    0.000    0.000 _symbolic_trace.py:885(_PatchedFnSetItem)
        3    0.000    0.000    0.000    0.000 numeric.py:63(_zeros_like_dispatcher)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:1129(_idat)
        1    0.000    0.000    0.000    0.000 patches.py:3053(Curve)
        1    0.000    0.000    0.000    0.000 _ltisys.py:2295(Bunch)
        1    0.000    0.000    0.000    0.000 streams.py:117(ExternalStream)
        1    0.000    0.000    0.000    0.000 unicode.py:141(Latin1)
        1    0.000    0.000    0.000    0.000 sparse_ndim_array.py:104(ImmutableSparseNDimArray)
        1    0.000    0.000    0.000    0.000 hyper.py:71(TupleParametersBase)
        1    0.000    0.000    0.000    0.000 extras.py:263(_fromnxfunction_single)
        1    0.000    0.000    0.000    0.000 __init__.py:413(SeparatedValues)
        1    0.000    0.000    0.000    0.000 _utils.py:610(ExceptionWrapper)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1274(CloseEvent)
        1    0.000    0.000    0.000    0.000 configparser.py:276(InterpolationSyntaxError)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:114(<listcomp>)
        1    0.000    0.000    0.000    0.000 boolalg.py:443(__hash__)
        1    0.000    0.000    0.000    0.000 streamplot.py:233(StreamplotSet)
        1    0.000    0.000    0.000    0.000 tokens.py:200(DirectiveToken)
        1    0.000    0.000    0.000    0.000 modules.py:454(FreeModulePolyRing)
        1    0.000    0.000    0.000    0.000 activation.py:274(Sigmoid)
        1    0.000    0.000    0.000    0.000 orderings.py:242(_ItemGetter)
        1    0.000    0.000    0.000    0.000 random.py:811(seed)
        4    0.000    0.000    0.000    0.000 {built-in method _sre.ascii_iscased}
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:717(_RealParameter)
        1    0.000    0.000    0.000    0.000 _ode.py:767(IntegratorConcurrencyError)
        1    0.000    0.000    0.000    0.000 dumper.py:21(BaseDumper)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:840(ChainedScheduler)
        1    0.000    0.000    0.000    0.000 instancenorm.py:269(LazyInstanceNorm2d)
        1    0.000    0.000    0.000    0.000 _comparison.py:389(ObjectPair)
        1    0.000    0.000    0.000    0.000 tarfile.py:704(ExFileObject)
        1    0.000    0.000    0.000    0.000 single.py:2572(NthLinearEulerEqNonhomogeneousUndeterminedCoefficients)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:717(PolynomialLR)
        1    0.000    0.000    0.000    0.000 _infra.py:302(Invocation)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:217(EncodedWord)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:780(LSQUnivariateSpline)
        1    0.000    0.000    0.000    0.000 pretty_symbology.py:41(pretty_use_unicode)
        1    0.000    0.000    0.000    0.000 datapipe.py:207(DFIterDataPipe)
        1    0.000    0.000    0.000    0.000 core.py:3017(Char)
        1    0.000    0.000    0.000    0.000 animation.py:637(FFMpegFileWriter)
        2    0.000    0.000    0.000    0.000 {method '__exit__' of 'posix.ScandirIterator' objects}
        1    0.000    0.000    0.000    0.000 __init__.py:822(Lookup)
        1    0.000    0.000    0.000    0.000 cyaml.py:70(CBaseDumper)
        1    0.000    0.000    0.000    0.000 trirefine.py:12(TriRefiner)
        1    0.000    0.000    0.000    0.000 results.py:103(List)
        1    0.000    0.000    0.000    0.000 cyaml.py:115(CSafeDumper)
        1    0.000    0.000    0.000    0.000 mock.py:2140(MagicProxy)
        1    0.000    0.000    0.000    0.000 single.py:2483(NthLinearEulerEqNonhomogeneousVariationOfParameters)
        1    0.000    0.000    0.000    0.000 __init__.py:234(silent_list)
        1    0.000    0.000    0.000    0.000 tarfile.py:267(TarError)
        1    0.000    0.000    0.000    0.000 quadrature.py:260(TanhSinh)
        1    0.000    0.000    0.000    0.000 core.py:184(_should_enable_warnings)
        1    0.000    0.000    0.000    0.000 socket.py:211(_GiveupOnSendfile)
        1    0.000    0.000    0.000    0.000 pickletools.py:1093(OpcodeInfo)
        1    0.000    0.000    0.000    0.000 util.py:81(_UnboundedCache)
        1    0.000    0.000    0.000    0.000 <decorator-gen-0>:1(<module>)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:2442(_UnpackSpecialForm)
        1    0.000    0.000    0.000    0.000 pydoc.py:2209(ModuleScanner)
        1    0.000    0.000    0.000    0.000 numbers.py:2764(IntegerConstant)
        1    0.000    0.000    0.000    0.000 io.py:25(EncodingWarning)
        1    0.000    0.000    0.000    0.000 modules.py:1328(QuotientModuleElement)
        1    0.000    0.000    0.000    0.000 __init__.py:1261(PlaceHolder)
        1    0.000    0.000    0.000    0.000 overrides.py:1865(BaseTorchFunctionMode)
        1    0.000    0.000    0.000    0.000 configparser.py:340(MissingSectionHeaderError)
        1    0.000    0.000    0.000    0.000 polyerrors.py:57(OperationNotSupported)
        1    0.000    0.000    0.000    0.000 _guards.py:74(GuardBuilderBase)
        1    0.000    0.000    0.000    0.000 constraints.py:409(_Multinomial)
        2    0.000    0.000    0.000    0.000 _compression.py:160(tell)
        1    0.000    0.000    0.000    0.000 core.py:5813(TokenConverter)
        1    0.000    0.000    0.000    0.000 solveset.py:68(NonlinearError)
        1    0.000    0.000    0.000    0.000 traceback.py:90(_Sentinel)
        1    0.000    0.000    0.000    0.000 emitter.py:32(ScalarAnalysis)
        1    0.000    0.000    0.000    0.000 function.py:867(UndefSageHelper)
        1    0.000    0.000    0.000    0.000 function.py:576(InplaceFunction)
        1    0.000    0.000    0.000    0.000 outputs.py:5916(UnconvergedVASPWarning)
        1    0.000    0.000    0.000    0.000 constraints.py:265(_IntegerLessThan)
        1    0.000    0.000    0.000    0.000 unicode.py:148(LatinA)
        1    0.000    0.000    0.000    0.000 sharding.py:21(_ShardingIterDataPipe)
        1    0.000    0.000    0.000    0.000 enum.py:769(__getitem__)
        1    0.000    0.000    0.000    0.000 geo.py:280(InvertedAitoffTransform)
        1    0.000    0.000    0.000    0.000 ticker.py:1889(NullLocator)
        1    0.000    0.000    0.000    0.000 core.py:5305(_NullToken)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1341(SubArrayFormat)
        1    0.000    0.000    0.000    0.000 _ltisys.py:1081(ZerosPolesGainContinuous)
        1    0.000    0.000    0.000    0.000 argparse.py:204(_Section)
        1    0.000    0.000    0.000    0.000 homomorphisms.py:574(SubModuleHomomorphism)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:577(ExponentialLR)
        1    0.000    0.000    0.000    0.000 mathtext.py:1984(VCentered)
        1    0.000    0.000    0.000    0.000 _optimize.py:1152(_LineSearchError)
        1    0.000    0.000    0.000    0.000 case.py:192(_BaseTestCaseContext)
        1    0.000    0.000    0.000    0.000 offsetbox.py:495(HPacker)
        1    0.000    0.000    0.000    0.000 mathtext.py:2079(AutoWidthChar)
        1    0.000    0.000    0.000    0.000 engine.py:379(__init__)
        1    0.000    0.000    0.000    0.000 geo.py:255(AitoffTransform)
        1    0.000    0.000    0.000    0.000 units.py:74(AxisInfo)
        1    0.000    0.000    0.000    0.000 ticker.py:325(NullFormatter)
        1    0.000    0.000    0.000    0.000 _quadpack_py.py:1226(_OptFunc)
        1    0.000    0.000    0.000    0.000 decorator.py:254(ContextManager)
        1    0.000    0.000    0.000    0.000 _monkeytype_config.py:157(JitTypeTraceStore)
        1    0.000    0.000    0.000    0.000 exceptions.py:47(UnsatisfiableConstraint)
        1    0.000    0.000    0.000    0.000 _symbolic_trace.py:191(PHBase)
        2    0.000    0.000    0.000    0.000 _state.py:39(__bool__)
        1    0.000    0.000    0.000    0.000 pooling.py:1078(AdaptiveMaxPool3d)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1222(IntegerFormat)
        1    0.000    0.000    0.000    0.000 _sparse.py:6(SparseABC)
        1    0.000    0.000    0.000    0.000 qs.py:36(FactorBaseElem)
        1    0.000    0.000    0.000    0.000 variable.py:8(VariableMeta)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:268(_reduce_op)
        1    0.000    0.000    0.000    0.000 fused.py:159(ConvAddReLU2d)
        1    0.000    0.000    0.000    0.000 request.py:1226(HTTPDigestAuthHandler)
        1    0.000    0.000    0.000    0.000 _exporter_states.py:18(SymbolicContext)
        1    0.000    0.000    0.000    0.000 profiler_util.py:373(Interval)
        1    0.000    0.000    0.000    0.000 __init__.py:323(device_of)
        1    0.000    0.000    0.000    0.000 mathtext.py:1974(HCentered)
        1    0.000    0.000    0.000    0.000 spglib.py:75(SpglibError)
        1    0.000    0.000    0.000    0.000 six.py:144(MovedAttribute)
        2    0.000    0.000    0.000    0.000 rcsetup.py:400(validate_fontsize_None)
        1    0.000    0.000    0.000    0.000 profiler_util.py:622(MemRecordsAcc)
        1    0.000    0.000    0.000    0.000 serialization.py:258(_open_buffer_reader)
        1    0.000    0.000    0.000    0.000 _endian.py:48(BigEndianStructure)
        1    0.000    0.000    0.000    0.000 exceptions.py:33(UnknownConstraint)
        1    0.000    0.000    0.000    0.000 _warnings_errors.py:21(NearConstantInputWarning)
        1    0.000    0.000    0.000    0.000 uuid.py:78(SafeUUID)
        1    0.000    0.000    0.000    0.000 backend_bases.py:3571(ShowBase)
        1    0.000    0.000    0.000    0.000 registration.py:210(__init__)
        1    0.000    0.000    0.000    0.000 pathlib.py:300(_Selector)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3675(special_ortho_group_frozen)
        1    0.000    0.000    0.000    0.000 patches.py:2139(Round)
        1    0.000    0.000    0.000    0.000 diophantine.py:454(BinaryQuadratic)
        1    0.000    0.000    0.000    0.000 dense.py:115(MutableDenseMatrix)
        2    0.000    0.000    0.000    0.000 index_tricks.py:761(__init__)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:807(ParameterizedHeaderValue)
        1    0.000    0.000    0.000    0.000 _trace.py:290(TracingCheckError)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:690(Attribute)
        1    0.000    0.000    0.000    0.000 core.py:2378(__init__)
        1    0.000    0.000    0.000    0.000 tokens.py:294(AliasToken)
        1    0.000    0.000    0.000    0.000 __init__.py:270(TarError)
        1    0.000    0.000    0.000    0.000 _fortran_format_parser.py:182(Tokenizer)
        1    0.000    0.000    0.000    0.000 dataframes.py:187(CaptureLikeMock)
        1    0.000    0.000    0.000    0.000 datapipes.py:111(ExampleAggregateAsDataFrames)
        1    0.000    0.000    0.000    0.000 pooling.py:1160(AdaptiveAvgPool2d)
        1    0.000    0.000    0.000    0.000 mathtext.py:1318(STIXSansFontConstants)
        1    0.000    0.000    0.000    0.000 libmpf.py:132(h_mask_big)
        1    0.000    0.000    0.000    0.000 __init__.py:399(PyDLL)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:1078(_DOF_estimator_user)
        1    0.000    0.000    0.000    0.000 pickle.py:97(_Stop)
        1    0.000    0.000    0.000    0.000 __init__.py:730(AbsolutePathError)
        1    0.000    0.000    0.000    0.000 _mio5_params.py:256(MatlabFunction)
        1    0.000    0.000    0.000    0.000 datapipes.py:30(PerRowDataFramesPipe)
        1    0.000    0.000    0.000    0.000 patches.py:3060(CurveA)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:767(CosineAnnealingLR)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1260(AnchoredText)
        1    0.000    0.000    0.000    0.000 batchnorm.py:306(LazyBatchNorm1d)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:106(HyperbolicFunction)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:1615(_DefaultMixin)
        1    0.000    0.000    0.000    0.000 core.py:3745(StringStart)
        1    0.000    0.000    0.000    0.000 _nonlin.py:32(NoConvergence)
        1    0.000    0.000    0.000    0.000 lambdify.py:1336(_TensorflowEvaluatorPrinter)
        1    0.000    0.000    0.000    0.000 __init__.py:240(c_char_p)
        1    0.000    0.000    0.000    0.000 unicode.py:246(Hiragana)
        1    0.000    0.000    0.000    0.000 core.py:4783(_Indent)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:107(<listcomp>)
        1    0.000    0.000    0.000    0.000 argparse.py:917(_StoreAction)
        1    0.000    0.000    0.000    0.000 case.py:25(SkipTest)
        1    0.000    0.000    0.000    0.000 calendar.py:548(different_locale)
        1    0.000    0.000    0.000    0.000 request.py:1061(ProxyBasicAuthHandler)
        1    0.000    0.000    0.000    0.000 line.py:2834(Segment3D)
        1    0.000    0.000    0.000    0.000 activation.py:1315(Softsign)
        1    0.000    0.000    0.000    0.000 pooling.py:1199(AdaptiveAvgPool3d)
        1    0.000    0.000    0.000    0.000 scalarstring.py:66(FoldedScalarString)
        1    0.000    0.000    0.000    0.000 patches.py:3508(Wedge)
        1    0.000    0.000    0.000    0.000 optimization.py:357(Illinois)
        1    0.000    0.000    0.000    0.000 datapipe.py:372(_MapDataPipeSerializationWrapper)
        1    0.000    0.000    0.000    0.000 argparse.py:720(MetavarTypeHelpFormatter)
        1    0.000    0.000    0.000    0.000 mock.py:40(InvalidSpecError)
        1    0.000    0.000    0.000    0.000 diophantine.py:782(HomogeneousTernaryQuadratic)
        1    0.000    0.000    0.000    0.000 inverselaplace.py:39(FixedTalbot)
        1    0.000    0.000    0.000    0.000 queue.py:23(Full)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:451(ConstantLR)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:273(_ExtensionsSpecialForm)
        1    0.000    0.000    0.000    0.000 cyaml.py:22(CBaseLoader)
        1    0.000    0.000    0.000    0.000 magic.py:1(<module>)
        1    0.000    0.000    0.000    0.000 polyerrors.py:30(PolynomialDivisionFailed)
        1    0.000    0.000    0.000    0.000 _ops.py:588(_PyOpNamespace)
        2    0.000    0.000    0.000    0.000 ordinals.py:84(<genexpr>)
        1    0.000    0.000    0.000    0.000 _jit_internal.py:68(__init__)
        1    0.000    0.000    0.000    0.000 pathlib.py:844(PureWindowsPath)
        1    0.000    0.000    0.000    0.000 _utils.py:769(_ClassPropertyDescriptor)
        1    0.000    0.000    0.000    0.000 protocols.py:162(DatagramProtocol)
        1    0.000    0.000    0.000    0.000 _utils.py:603(KeyErrorMessage)
        1    0.000    0.000    0.000    0.000 diophantine.py:1134(GeneralSumOfEvenPowers)
        1    0.000    0.000    0.000    0.000 _factories.py:25(_TzOffsetFactory)
        1    0.000    0.000    0.000    0.000 _guards.py:205(GuardEnvExpr)
        1    0.000    0.000    0.000    0.000 _nonlin.py:955(BroydenSecond)
        1    0.000    0.000    0.000    0.000 galoisgroups.py:35(MaxTriesException)
        1    0.000    0.000    0.000    0.000 _typing.py:30(Boolean)
        1    0.000    0.000    0.000    0.000 graph.py:422(_swap_with_cloned)
        1    0.000    0.000    0.000    0.000 index_tricks.py:435(RClass)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:706(Value)
        1    0.000    0.000    0.000    0.000 logic.py:365(And)
        1    0.000    0.000    0.000    0.000 constraints.py:222(_Boolean)
        1    0.000    0.000    0.000    0.000 exceptions.py:26(DuplicateEditVariable)
        1    0.000    0.000    0.000    0.000 unicode.py:213(Chinese)
        1    0.000    0.000    0.000    0.000 inputs.py:1178(BadIncarWarning)
        1    0.000    0.000    0.000    0.000 spawn.py:163(SpawnContext)
        1    0.000    0.000    0.000    0.000 serialization.py:264(_open_buffer_writer)
        1    0.000    0.000    0.000    0.000 legend_handler.py:176(HandlerNpointsYoffsets)
        1    0.000    0.000    0.000    0.000 coreerrors.py:6(BaseCoreError)
        1    0.000    0.000    0.000    0.000 request.py:1531(FTPHandler)
        1    0.000    0.000    0.000    0.000 __init__.py:82(is_available)
        1    0.000    0.000    0.000    0.000 backend_managers.py:20(ToolTriggerEvent)
        1    0.000    0.000    0.000    0.000 ElementTree.py:106(ParseError)
        1    0.000    0.000    0.000    0.000 optimization.py:58(Secant)
        1    0.000    0.000    0.000    0.000 errors.py:33(InvalidConfigError)
        1    0.000    0.000    0.000    0.000 _exceptions.py:98(_UFuncOutputCastingError)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:923(ValueTerminal)
        1    0.000    0.000    0.000    0.000 <decorator-gen-1>:1(<module>)
        1    0.000    0.000    0.000    0.000 exceptions.py:15(NonSquareMatrixError)
        1    0.000    0.000    0.000    0.000 unicode.py:322(Hebrew)
        1    0.000    0.000    0.000    0.000 diophantine.py:256(Linear)
        1    0.000    0.000    0.000    0.000 request.py:641(HTTPDefaultErrorHandler)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1449(PickEvent)
        1    0.000    0.000    0.000    0.000 profiler.py:619(emit_nvtx)
        1    0.000    0.000    0.000    0.000 polynomial.py:29(RankWarning)
        1    0.000    0.000    0.000    0.000 {built-in method _functools.cmp_to_key}
        1    0.000    0.000    0.000    0.000 _testutils.py:51(FPUModeChangeWarning)
        1    0.000    0.000    0.000    0.000 errors.py:81(HeaderDefect)
        1    0.000    0.000    0.000    0.000 core.py:840(_DomainSafeDivide)
        1    0.000    0.000    0.000    0.000 patches.py:2428(SimpleEvent)
        1    0.000    0.000    0.000    0.000 core.py:3762(StringEnd)
        1    0.000    0.000    0.000    0.000 nodes.py:130(MappingNode)
        1    0.000    0.000    0.000    0.000 single.py:37(ODEMatchError)
        2    0.000    0.000    0.000    0.000 ordinals.py:83(<listcomp>)
        1    0.000    0.000    0.000    0.000 __init__.py:256(c_wchar_p)
        1    0.000    0.000    0.000    0.000 inputs.py:787(BadPoscarWarning)
        1    0.000    0.000    0.000    0.000 numbers.py:2315(_MultisetHistogram)
        2    0.000    0.000    0.000    0.000 calendar.py:57(__init__)
        1    0.000    0.000    0.000    0.000 gradcheck.py:18(GradcheckError)
        1    0.000    0.000    0.000    0.000 patches.py:2099(DArrow)
        1    0.000    0.000    0.000    0.000 __init__.py:50(InvalidLicenseExpression)
        1    0.000    0.000    0.000    0.000 __init__.py:25(clear_distutils)
        1    0.000    0.000    0.000    0.000 rk.py:577(Dop853DenseOutput)
        1    0.000    0.000    0.000    0.000 isoparser.py:43(__init__)
        1    0.000    0.000    0.000    0.000 cyaml.py:158(CDumper)
        1    0.000    0.000    0.000    0.000 meijerint.py:313(_CoeffExpValueError)
        1    0.000    0.000    0.000    0.000 exponential.py:212(ExpMeta)
        1    0.000    0.000    0.000    0.000 factorials.py:281(MultiFactorial)
        1    0.000    0.000    0.000    0.000 iterables.py:3015(NotIterable)
        1    0.000    0.000    0.000    0.000 _vertex.py:446(FieldWrapper)
        1    0.000    0.000    0.000    0.000 {built-in method _elementtree._set_factories}
        1    0.000    0.000    0.000    0.000 function.py:107(ArgumentIndexError)
        1    0.000    0.000    0.000    0.000 {method 'clear' of 'list' objects}
        1    0.000    0.000    0.000    0.000 exceptions.py:15(BadRequiredStrength)
        1    0.000    0.000    0.000    0.000 parser.py:126(BytesHeaderParser)
        1    0.000    0.000    0.000    0.000 batchnorm.py:233(BatchNorm1d)
        1    0.000    0.000    0.000    0.000 ticker.py:395(FormatStrFormatter)
        1    0.000    0.000    0.000    0.000 _axis_nan_policy.py:37(SmallSampleWarning)
        1    0.000    0.000    0.000    0.000 _bvp.py:515(BVPResult)
        1    0.000    0.000    0.000    0.000 context.py:310(ForkServerContext)
        1    0.000    0.000    0.000    0.000 geo.py:458(InvertedLambertTransform)
        1    0.000    0.000    0.000    0.000 suite.py:375(_DebugResult)
        2    0.000    0.000    0.000    0.000 matexpr.py:486(get_postprocessor)
        1    0.000    0.000    0.000    0.000 dataframes.py:178(CaptureA)
        1    0.000    0.000    0.000    0.000 errors.py:21(OnnxExporterWarning)
        1    0.000    0.000    0.000    0.000 events.py:151(DocumentEndEvent)
        1    0.000    0.000    0.000    0.000 unicode.py:336(Devanagari)
        2    0.000    0.000    0.000    0.000 _multiufuncs.py:66(_override_ufunc_default_args)
        1    0.000    0.000    0.000    0.000 sympy_parser.py:364(split_symbols_custom)
        1    0.000    0.000    0.000    0.000 exceptions.py:48(DMShapeError)
        1    0.000    0.000    0.000    0.000 pickle.py:73(PickleError)
        1    0.000    0.000    0.000    0.000 _factories.py:55(_TzStrFactory)
        1    0.000    0.000    0.000    0.000 container.py:46(BarContainer)
        1    0.000    0.000    0.000    0.000 _odepack_py.py:16(ODEintWarning)
        1    0.000    0.000    0.000    0.000 mock.py:295(__init__)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1009(ShiftA)
        1    0.000    0.000    0.000    0.000 instancenorm.py:77(InstanceNorm1d)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:2163(RectSphereBivariateSpline)
        1    0.000    0.000    0.000    0.000 calendar.py:33(IllegalWeekdayError)
        1    0.000    0.000    0.000    0.000 package_exporter.py:120(EmptyMatchError)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:446(ObsRoute)
        1    0.000    0.000    0.000    0.000 design_patterns.py:128(NullStream)
        1    0.000    0.000    0.000    0.000 scalarstring.py:75(SingleQuotedScalarString)
        1    0.000    0.000    0.000    0.000 _pep440.py:141(<lambda>)
        1    0.000    0.000    0.000    0.000 core.py:4789(_IndentGreater)
        3    0.000    0.000    0.000    0.000 core.py:2493(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 _base.py:45(Error)
        1    0.000    0.000    0.000    0.000 dataframes.py:43(DataFrameTracedOps)
        1    0.000    0.000    0.000    0.000 _typing.py:22(GenericMeta)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1809(DraggableAnnotation)
        1    0.000    0.000    0.000    0.000 patches.py:2496(Arc3)
        1    0.000    0.000    0.000    0.000 spectral_norm.py:205(SpectralNormStateDictHook)
        1    0.000    0.000    0.000    0.000 core.py:5174(OneOrMore)
        1    0.000    0.000    0.000    0.000 __init__.py:519(FileHash)
        1    0.000    0.000    0.000    0.000 simplex.py:77(UnboundedLPError)
        1    0.000    0.000    0.000    0.000 dataframes.py:360(CaptureInitial)
        1    0.000    0.000    0.000    0.000 polyutils.py:47(RankWarning)
        1    0.000    0.000    0.000    0.000 patches.py:2200(Round4)
        1    0.000    0.000    0.000    0.000 __init__.py:2349(__init__)
        1    0.000    0.000    0.000    0.000 error.py:176(MarkedYAMLWarning)
        1    0.000    0.000    0.000    0.000 patches.py:3340(Simple)
        1    0.000    0.000    0.000    0.000 _fortran.py:24(FortranFormattingError)
        1    0.000    0.000    0.000    0.000 diophantine.py:958(GeneralSumOfSquares)
        1    0.000    0.000    0.000    0.000 constraints.py:380(_HalfOpenInterval)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:933(EWWhiteSpaceTerminal)
        1    0.000    0.000    0.000    0.000 loader.py:23(BaseLoader)
        1    0.000    0.000    0.000    0.000 assumptions.py:680(ManagedProperties)
        1    0.000    0.000    0.000    0.000 fused.py:67(ConvBnReLU1d)
        2    0.000    0.000    0.000    0.000 distributed_c10d.py:313(default_pg)
        1    0.000    0.000    0.000    0.000 scanner.py:57(SimpleKey)
        1    0.000    0.000    0.000    0.000 core.py:84(MaskedArrayFutureWarning)
        1    0.000    0.000    0.000    0.000 legend_handler.py:689(HandlerPolyCollection)
        1    0.000    0.000    0.000    0.000 core.py:3632(PositionToken)
        1    0.000    0.000    0.000    0.000 _optimize.py:544(_MaxFuncCallError)
        1    0.000    0.000    0.000    0.000 polysys.py:35(SolveFailed)
        1    0.000    0.000    0.000    0.000 extras.py:1637(mr_class)
        1    0.000    0.000    0.000    0.000 __init__.py:742(SpecialFileError)
        1    0.000    0.000    0.000    0.000 codeprinter.py:31(AssignmentError)
        1    0.000    0.000    0.000    0.000 index_tricks.py:537(CClass)
        1    0.000    0.000    0.000    0.000 exceptions.py:85(TooHardError)
        1    0.000    0.000    0.000    0.000 error.py:278(MarkedYAMLFutureWarning)
        1    0.000    0.000    0.000    0.000 core.py:115(switch)
        1    0.000    0.000    0.000    0.000 exceptions.py:13(DMError)
        1    0.000    0.000    0.000    0.000 tz.py:1156(_tzicalvtzcomp)
        1    0.000    0.000    0.000    0.000 GimpGradientFile.py:115(GimpGradientFile)
        1    0.000    0.000    0.000    0.000 unicode.py:314(Arabic)
        1    0.000    0.000    0.000    0.000 scanner.py:2030(FullLineComment)
        1    0.000    0.000    0.000    0.000 events.py:66(NodeEvent)
        1    0.000    0.000    0.000    0.000 diophantine.py:695(HomogeneousTernaryQuadraticNormal)
        1    0.000    0.000    0.000    0.000 _factories.py:19(_TzFactory)
        1    0.000    0.000    0.000    0.000 _spectral.py:11(_NoConvergence)
        1    0.000    0.000    0.000    0.000 constraints.py:362(_Interval)
        1    0.000    0.000    0.000    0.000 solvers.py:18(PolyNonlinearError)
        1    0.000    0.000    0.000    0.000 patches.py:3242(BracketAB)
        1    0.000    0.000    0.000    0.000 inverselaplace.py:220(Stehfest)
        1    0.000    0.000    0.000    0.000 axis.py:596(_LazyTickList)
        1    0.000    0.000    0.000    0.000 ticker.py:1138(LogFormatterExponent)
        1    0.000    0.000    0.000    0.000 deprecation.py:325(_deprecated_parameter_class)
        1    0.000    0.000    0.000    0.000 composition.py:1396(CompositionError)
        1    0.000    0.000    0.000    0.000 error.py:248(MantissaNoDotYAML1_1Warning)
        1    0.000    0.000    0.000    0.000 _csc.py:179(csc_array)
        1    0.000    0.000    0.000    0.000 context.py:302(ForkContext)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:310(__init__)
        1    0.000    0.000    0.000    0.000 linsolve.py:28(MatrixRankWarning)
        1    0.000    0.000    0.000    0.000 core.py:893(_MaskedUFunc)
        1    0.000    0.000    0.000    0.000 parse.py:334(DefragResultBytes)
        1    0.000    0.000    0.000    0.000 core.py:720(NegativeStdDev)
        1    0.000    0.000    0.000    0.000 _codata.py:2116(ConstantWarning)
        1    0.000    0.000    0.000    0.000 net_min_base.py:31(FxNetMinimizerBadModuleError)
        1    0.000    0.000    0.000    0.000 dataframes.py:324(CaptureSub)
        1    0.000    0.000    0.000    0.000 utils.py:117(_lazy_property_and_property)
        1    0.000    0.000    0.000    0.000 batchnorm.py:341(BatchNorm2d)
        1    0.000    0.000    0.000    0.000 Image.py:3238(SupportsArrowArrayInterface)
        1    0.000    0.000    0.000    0.000 _typing.py:215(__init__)
        1    0.000    0.000    0.000    0.000 {built-in method _abc.get_cache_token}
        1    0.000    0.000    0.000    0.000 geo.py:390(InvertedMollweideTransform)
        1    0.000    0.000    0.000    0.000 ticker.py:434(OldScalarFormatter)
        1    0.000    0.000    0.000    0.000 argparse.py:1009(_AppendAction)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:821(ContentType)
        1    0.000    0.000    0.000    0.000 cyaml.py:38(CSafeLoader)
        1    0.000    0.000    0.000    0.000 dataframes.py:268(CaptureGetItem)
        1    0.000    0.000    0.000    0.000 request.py:1416(UnknownHandler)
        1    0.000    0.000    0.000    0.000 mathtext.py:1950(NegFil)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:333(_mode_formula)
        1    0.000    0.000    0.000    0.000 version.py:59(InvalidVersion)
        1    0.000    0.000    0.000    0.000 unix_events.py:798(_UnixSubprocessTransport)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:25(GuardOnDataDependentSymNode)
        1    0.000    0.000    0.000    0.000 operator_schemas.py:44(_FakeGlobalNamespace)
        1    0.000    0.000    0.000    0.000 dataframes.py:39(CaptureControl)
        1    0.000    0.000    0.000    0.000 unicode.py:282(Hangul)
        1    0.000    0.000    0.000    0.000 _basinhopping.py:262(RandomDisplacement)
        1    0.000    0.000    0.000    0.000 pydoc.py:1545(_PlainTextDoc)
        1    0.000    0.000    0.000    0.000 animation.py:613(FFMpegWriter)
        1    0.000    0.000    0.000    0.000 modules.py:1867(InnerEndomorphism)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:2223(_TypeFormForm)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:1173(_DOF_estimator_min_E)
        1    0.000    0.000    0.000    0.000 animation.py:735(ImageMagickWriter)
        1    0.000    0.000    0.000    0.000 __init__.py:281(sic)
        1    0.000    0.000    0.000    0.000 solveset.py:794(_SolveTrig1Error)
        1    0.000    0.000    0.000    0.000 __init__.py:94(cuBLASModule)
        1    0.000    0.000    0.000    0.000 request.py:1641(DataHandler)
        1    0.000    0.000    0.000    0.000 api.py:466(RRef)
        1    0.000    0.000    0.000    0.000 graph.py:419(_Handle)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:949(SingletonMeta)
        1    0.000    0.000    0.000    0.000 _exceptions.py:71(_UFuncCastingError)
        1    0.000    0.000    0.000    0.000 units.py:189(Registry)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1228(DrawEvent)
        1    0.000    0.000    0.000    0.000 geo.py:349(MollweideTransform)
        1    0.000    0.000    0.000    0.000 _subplots.py:218(<genexpr>)
        1    0.000    0.000    0.000    0.000 unicode.py:307(Thai)
        1    0.000    0.000    0.000    0.000 <decorator-gen-3>:1(<module>)
        1    0.000    0.000    0.000    0.000 csv.py:64(excel_tab)
        1    0.000    0.000    0.000    0.000 _docscrape.py:615(ObjDoc)
        1    0.000    0.000    0.000    0.000 _array_like.py:160(_UnknownType)
        1    0.000    0.000    0.000    0.000 errors.py:1(Error)
        1    0.000    0.000    0.000    0.000 _coo.py:1463(coo_matrix)
        1    0.000    0.000    0.000    0.000 orderings.py:54(ReversedGradedLexOrder)
        1    0.000    0.000    0.000    0.000 dataframes.py:205(CaptureCall)
        2    0.000    0.000    0.000    0.000 __init__.py:137(exec_module)
        1    0.000    0.000    0.000    0.000 <decorator-gen-2>:1(<module>)
        1    0.000    0.000    0.000    0.000 utils.py:77(_ntuple_from_first)
        1    0.000    0.000    0.000    0.000 errors.py:73(SymbolicValueError)
        1    0.000    0.000    0.000    0.000 activation.py:1338(Tanhshrink)
        1    0.000    0.000    0.000    0.000 tokens.py:321(ScalarToken)
        1    0.000    0.000    0.000    0.000 constraints.py:481(_Symmetric)
        1    0.000    0.000    0.000    0.000 mathtext.py:2040(AutoHeightChar)
        1    0.000    0.000    0.000    0.000 _quadpack_py.py:13(IntegrationWarning)
        1    0.000    0.000    0.000    0.000 backend_tools.py:682(ViewsPositionsBase)
        1    0.000    0.000    0.000    0.000 _vertex.py:430(ConstraintWrapper)
        1    0.000    0.000    0.000    0.000 _differentiable_functions.py:408(_VectorFunWrapper)
        1    0.000    0.000    0.000    0.000 case.py:201(_AssertRaisesBaseContext)
        1    0.000    0.000    0.000    0.000 argparse.py:669(RawDescriptionHelpFormatter)
        1    0.000    0.000    0.000    0.000 bezier.py:25(NonIntersectingPathException)
        1    0.000    0.000    0.000    0.000 results.py:19(<genexpr>)
        1    0.000    0.000    0.000    0.000 ImageFile.py:723(PyCodecState)
        1    0.000    0.000    0.000    0.000 __init__.py:78(UnidentifiedImageError)
        1    0.000    0.000    0.000    0.000 unicode.py:239(Kanji)
        1    0.000    0.000    0.000    0.000 mock.py:2778(_SpecState)
        1    0.000    0.000    0.000    0.000 __init__.py:2229(createLock)
        1    0.000    0.000    0.000    0.000 _comparison.py:306(UnsupportedInputs)
        1    0.000    0.000    0.000    0.000 patches.py:3314(BarAB)
        1    0.000    0.000    0.000    0.000 _parser.py:34(Value)
        1    0.000    0.000    0.000    0.000 mock.py:2118(MagicMock)
        1    0.000    0.000    0.000    0.000 dataframes.py:298(CaptureAdd)
        1    0.000    0.000    0.000    0.000 importer.py:16(ObjNotFoundError)
        1    0.000    0.000    0.000    0.000 _parser.py:1378(_attr)
        1    0.000    0.000    0.000    0.000 mathtext.py:1932(Fil)
        1    0.000    0.000    0.000    0.000 dviread.py:734(Tfm)
        1    0.000    0.000    0.000    0.000 instancenorm.py:192(InstanceNorm2d)
        1    0.000    0.000    0.000    0.000 exceptions.py:47(ComplexWarning)
        1    0.000    0.000    0.000    0.000 dumper.py:171(RoundTripDumper)
        1    0.000    0.000    0.000    0.000 error.py:48(FileMark)
        1    0.000    0.000    0.000    0.000 _misc.py:9(LinAlgWarning)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1129(MeijerShiftB)
        1    0.000    0.000    0.000    0.000 profiler.py:745(EnforceUnique)
        1    0.000    0.000    0.000    0.000 dates.py:1637(HourLocator)
        1    0.000    0.000    0.000    0.000 unicode.py:154(LatinB)
        1    0.000    0.000    0.000    0.000 markers.py:33(InvalidMarker)
        1    0.000    0.000    0.000    0.000 coreerrors.py:10(NonCommutativeExpression)
        1    0.000    0.000    0.000    0.000 patches.py:3420(Fancy)
        1    0.000    0.000    0.000    0.000 optimization.py:517(ANewton)
        1    0.000    0.000    0.000    0.000 libmpf.py:43(ComplexResult)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3828(ortho_group_frozen)
        1    0.000    0.000    0.000    0.000 exceptions.py:3(GeometryError)
        1    0.000    0.000    0.000    0.000 dispatcher.py:10(MDNotImplementedError)
        1    0.000    0.000    0.000    0.000 dataframes.py:169(CaptureF)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1336(TimedeltaFormat)
        1    0.000    0.000    0.000    0.000 deprecation.py:7(MatplotlibDeprecationWarning)
        1    0.000    0.000    0.000    0.000 argparse.py:754(ArgumentError)
        1    0.000    0.000    0.000    0.000 activation.py:1465(Softmax2d)
        1    0.000    0.000    0.000    0.000 optimization.py:159(Halley)
        1    0.000    0.000    0.000    0.000 request.py:1244(ProxyDigestAuthHandler)
        1    0.000    0.000    0.000    0.000 pathlib.py:834(PurePosixPath)
        1    0.000    0.000    0.000    0.000 optimization.py:458(Ridder)
        1    0.000    0.000    0.000    0.000 polar.py:185(ThetaFormatter)
        1    0.000    0.000    0.000    0.000 mathtext.py:1956(NegFill)
        1    0.000    0.000    0.000    0.000 activation.py:337(Tanh)
        1    0.000    0.000    0.000    0.000 ticker.py:1202(LogFormatterSciNotation)
        1    0.000    0.000    0.000    0.000 sympify.py:49(CantSympify)
        1    0.000    0.000    0.000    0.000 dataframes.py:231(CaptureVariableAssign)
        1    0.000    0.000    0.000    0.000 ticker.py:414(StrMethodFormatter)
        1    0.000    0.000    0.000    0.000 tokens.py:215(DocumentEndToken)
        1    0.000    0.000    0.000    0.000 functions.py:138(NoShapeError)
        1    0.000    0.000    0.000    0.000 numbers.py:3308(_as_mpf_val)
        1    0.000    0.000    0.000    0.000 inverselaplace.py:354(deHoog)
        1    0.000    0.000    0.000    0.000 optimization.py:602(MDNewton)
        1    0.000    0.000    0.000    0.000 connection.py:786(XmlListener)
        1    0.000    0.000    0.000    0.000 core.py:861(_DomainGreater)
        1    0.000    0.000    0.000    0.000 legend_handler.py:208(HandlerLine2D)
        1    0.000    0.000    0.000    0.000 mathtext.py:1829(Hrule)
        1    0.000    0.000    0.000    0.000 patches.py:2570(Angle)
        1    0.000    0.000    0.000    0.000 util.py:167(UnboundedMemo)
        1    0.000    0.000    0.000    0.000 _bsr.py:660(bsr_array)
        1    0.000    0.000    0.000    0.000 util.py:108(_platform_supports_abstract_sockets)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:949(Operator)
        1    0.000    0.000    0.000    0.000 __init__.py:747(AbsoluteLinkError)
        1    0.000    0.000    0.000    0.000 error.py:172(YAMLWarning)
        1    0.000    0.000    0.000    0.000 mathtext.py:1944(Filll)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1207(Event)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:845(MsgID)
        1    0.000    0.000    0.000    0.000 pyplot.py:121(_NotIPython)
        1    0.000    0.000    0.000    0.000 libhyper.py:43(NoConvergence)
        1    0.000    0.000    0.000    0.000 forward_ad.py:108(UnpackedDualTensor)
        1    0.000    0.000    0.000    0.000 parse.py:135(_ResultMixinBytes)
        1    0.000    0.000    0.000    0.000 _sf_error.py:13(SpecialFunctionError)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1200(MeijerUnShiftB)
        1    0.000    0.000    0.000    0.000 scalarint.py:82(BinaryInt)
        1    0.000    0.000    0.000    0.000 argparse.py:952(_StoreConstAction)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1022(ShiftB)
        1    0.000    0.000    0.000    0.000 index_methods.py:22(IndexConformanceException)
        1    0.000    0.000    0.000    0.000 util.py:385(ForkAwareLocal)
        1    0.000    0.000    0.000    0.000 units.py:54(ConversionError)
        1    0.000    0.000    0.000    0.000 backend_managers.py:27(ToolManagerMessageEvent)
        1    0.000    0.000    0.000    0.000 transforms.py:2542(BboxTransformToMaxOnly)
        2    0.000    0.000    0.000    0.000 _compression.py:36(readable)
        1    0.000    0.000    0.000    0.000 unicode.py:258(Katakana)
        1    0.000    0.000    0.000    0.000 _array_api.py:582(<listcomp>)
        1    0.000    0.000    0.000    0.000 optimization.py:104(MNewton)
        1    0.000    0.000    0.000    0.000 optimization.py:290(Bisection)
        1    0.000    0.000    0.000    0.000 types.py:26(SymInt)
        1    0.000    0.000    0.000    0.000 container.py:103(StemContainer)
        1    0.000    0.000    0.000    0.000 mathtext.py:1938(Fill)
        1    0.000    0.000    0.000    0.000 _linesearch.py:23(LineSearchWarning)
        1    0.000    0.000    0.000    0.000 datapipes.py:83(FilterDataFramesPipe)
        1    0.000    0.000    0.000    0.000 core.py:830(__init__)
        1    0.000    0.000    0.000    0.000 tokens.py:303(AnchorToken)
        1    0.000    0.000    0.000    0.000 events.py:709(_RunningLoop)
        1    0.000    0.000    0.000    0.000 polyerrors.py:136(ComputationFailed)
        1    0.000    0.000    0.000    0.000 dataframes.py:311(CaptureMul)
        1    0.000    0.000    0.000    0.000 _multivariate.py:4083(random_correlation_frozen)
        1    0.000    0.000    0.000    0.000 events.py:108(StreamStartEvent)
        2    0.000    0.000    0.000    0.000 groundtypes.py:22(__init__)
        1    0.000    0.000    0.000    0.000 activation.py:784(LogSigmoid)
        1    0.000    0.000    0.000    0.000 geo.py:322(InvertedHammerTransform)
        1    0.000    0.000    0.000    0.000 patches.py:3274(BracketA)
        1    0.000    0.000    0.000    0.000 rcsetup.py:1039(_ignorecase)
        1    0.000    0.000    0.000    0.000 events.py:237(SequenceStartEvent)
        1    0.000    0.000    0.000    0.000 instancenorm.py:308(InstanceNorm3d)
        1    0.000    0.000    0.000    0.000 _memory_viz.py:113(__init__)
        1    0.000    0.000    0.000    0.000 core.py:822(_DomainTan)
        1    0.000    0.000    0.000    0.000 pathlib.py:378(_RecursiveWildcardSelector)
        1    0.000    0.000    0.000    0.000 mathtext.py:1840(Vrule)
        1    0.000    0.000    0.000    0.000 polyoptions.py:61(OptionType)
        1    0.000    0.000    0.000    0.000 zipfile.py:641(LZMADecompressor)
        1    0.000    0.000    0.000    0.000 request.py:898(HTTPPasswordMgrWithDefaultRealm)
        1    0.000    0.000    0.000    0.000 _coo.py:1352(coo_array)
        1    0.000    0.000    0.000    0.000 base_subprocess.py:281(ReadSubprocessPipeProto)
        1    0.000    0.000    0.000    0.000 _mio5_params.py:225(mat_struct)
        1    0.000    0.000    0.000    0.000 analyzer.py:66(SymmetryUndeterminedError)
        1    0.000    0.000    0.000    0.000 rl.py:83(sort)
        1    0.000    0.000    0.000    0.000 kind.py:48(Kind)
        1    0.000    0.000    0.000    0.000 config.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _tzpath.py:170(InvalidTZPathWarning)
        1    0.000    0.000    0.000    0.000 errors.py:8(MessageError)
        1    0.000    0.000    0.000    0.000 geo.py:304(HammerTransform)
        1    0.000    0.000    0.000    0.000 structure.py:5574(StructureError)
        1    0.000    0.000    0.000    0.000 _internal.py:244(c_void_p)
        1    0.000    0.000    0.000    0.000 patches.py:3147(CurveFilledAB)
        1    0.000    0.000    0.000    0.000 transforms.py:2725(TransformedPatchPath)
        1    0.000    0.000    0.000    0.000 _shgo.py:1529(LMap)
        1    0.000    0.000    0.000    0.000 {built-in method _thread._set_sentinel}
        1    0.000    0.000    0.000    0.000 backend_bases.py:1255(ResizeEvent)
        1    0.000    0.000    0.000    0.000 hierarchy.py:157(ClusterWarning)
        1    0.000    0.000    0.000    0.000 transforms.py:453(MellinTransformStripError)
        1    0.000    0.000    0.000    0.000 profiler_util.py:613(StringTable)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1247(MeijerUnShiftC)
        1    0.000    0.000    0.000    0.000 optimization.py:213(Muller)
        1    0.000    0.000    0.000    0.000 __init__.py:201(DeferredCudaCallError)
        1    0.000    0.000    0.000    0.000 _fortran.py:13(FortranEOFError)
        1    0.000    0.000    0.000    0.000 _ltisys.py:814(TransferFunctionDiscrete)
        1    0.000    0.000    0.000    0.000 _typing.py:68(SupportsArrayNamespace)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1035(UnShiftA)
        1    0.000    0.000    0.000    0.000 errors.py:37(RemovedConfigError)
        1    0.000    0.000    0.000    0.000 _threadsafety.py:9(ReentrancyError)
        1    0.000    0.000    0.000    0.000 _dok.py:536(dok_array)
        1    0.000    0.000    0.000    0.000 argparse.py:1144(_ChoicesPseudoAction)
        1    0.000    0.000    0.000    0.000 client.py:1470(UnknownProtocol)
        1    0.000    0.000    0.000    0.000 calculus.py:1(CalculusMethods)
        1    0.000    0.000    0.000    0.000 serialization.py:52(SourceChangeWarning)
        1    0.000    0.000    0.000    0.000 _basinhopping.py:285(MinimizerWrapper)
        1    0.000    0.000    0.000    0.000 _lil.py:570(lil_matrix)
        1    0.000    0.000    0.000    0.000 rl.py:43(glom)
        1    0.000    0.000    0.000    0.000 operations.py:483(ShortCircuit)
        1    0.000    0.000    0.000    0.000 process.py:349(AuthenticationString)
        1    0.000    0.000    0.000    0.000 {built-in method numpy.core._multiarray_umath._reload_guard}
        1    0.000    0.000    0.000    0.000 sqrtdenest.py:216(SqrtdenestStopIteration)
        1    0.000    0.000    0.000    0.000 polyerrors.py:155(PolificationFailed)
        1    0.000    0.000    0.000    0.000 groundtypes.py:25(_GMPYRational)
        1    0.000    0.000    0.000    0.000 datapipes.py:59(ShuffleDataFramesPipe)
        1    0.000    0.000    0.000    0.000 constraints.py:493(_PositiveSemidefinite)
        1    0.000    0.000    0.000    0.000 process.py:397(_MainProcess)
        1    0.000    0.000    0.000    0.000 colors.py:1169(DivergingNorm)
        1    0.000    0.000    0.000    0.000 core.py:5012(Located)
        1    0.000    0.000    0.000    0.000 _miobase.py:20(MatReadError)
        1    0.000    0.000    0.000    0.000 _docscrape.py:101(ParseError)
        1    0.000    0.000    0.000    0.000 constraints.py:398(_Simplex)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:650(MIMEVersion)
        1    0.000    0.000    0.000    0.000 _csr.py:314(csr_array)
        1    0.000    0.000    0.000    0.000 _monkeytype_config.py:158(__init__)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1235(BoolFormat)
        1    0.000    0.000    0.000    0.000 <decorator-gen-4>:1(<module>)
        1    0.000    0.000    0.000    0.000 mock.py:2345(AsyncMock)
        1    0.000    0.000    0.000    0.000 argparse.py:1074(_CountAction)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1076(UnShiftB)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1298(MeijerUnShiftD)
        1    0.000    0.000    0.000    0.000 fused.py:22(ConvReLU2d)
        1    0.000    0.000    0.000    0.000 extras.py:281(_fromnxfunction_seq)
        1    0.000    0.000    0.000    0.000 six.py:245(_MovedItems)
        1    0.000    0.000    0.000    0.000 core.py:148(MAError)
        1    0.000    0.000    0.000    0.000 dates.py:1558(MonthLocator)
        1    0.000    0.000    0.000    0.000 legend_handler.py:637(HandlerTuple)
        1    0.000    0.000    0.000    0.000 nodes.py:107(CollectionNode)
        1    0.000    0.000    0.000    0.000 scalarint.py:109(HexCapsInt)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:1979(LSQSphereBivariateSpline)
        1    0.000    0.000    0.000    0.000 loader.py:55(Loader)
        1    0.000    0.000    0.000    0.000 mock.py:1188(Mock)
        1    0.000    0.000    0.000    0.000 exceptions.py:10(CancelledError)
        1    0.000    0.000    0.000    0.000 shutil.py:61(Error)
        1    0.000    0.000    0.000    0.000 {method '__subclasses__' of 'type' objects}
        1    0.000    0.000    0.000    0.000 dates.py:1677(SecondLocator)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1140(MeijerShiftC)
        1    0.000    0.000    0.000    0.000 exceptions.py:6(MatrixError)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:1200(InverseHyperbolicFunction)
        1    0.000    0.000    0.000    0.000 legend_handler.py:412(HandlerPathCollection)
        1    0.000    0.000    0.000    0.000 _lil.py:505(lil_array)
        1    0.000    0.000    0.000    0.000 diophantine.py:676(InhomogeneousTernaryQuadratic)
        1    0.000    0.000    0.000    0.000 figure.py:154(AxesStack)
        1    0.000    0.000    0.000    0.000 context.py:306(SpawnContext)
        1    0.000    0.000    0.000    0.000 threading.py:1400(_MainThread)
        1    0.000    0.000    0.000    0.000 _endian.py:35(_swapped_union_meta)
        1    0.000    0.000    0.000    0.000 configparser.py:190(DuplicateSectionError)
        1    0.000    0.000    0.000    0.000 main.py:773(<listcomp>)
        1    0.000    0.000    0.000    0.000 serializer.py:29(SerializerError)
        1    0.000    0.000    0.000    0.000 _monitor.py:9(TqdmSynchronisationWarning)
        1    0.000    0.000    0.000    0.000 __init__.py:165(c_short)
        1    0.000    0.000    0.000    0.000 ordinals.py:253(OrdinalZero)
        1    0.000    0.000    0.000    0.000 specifiers.py:32(InvalidSpecifier)
        1    0.000    0.000    0.000    0.000 wavfile.py:27(WavFileWarning)
        2    0.000    0.000    0.000    0.000 ops.py:173(no_complex_result)
        1    0.000    0.000    0.000    0.000 argparse.py:680(RawTextHelpFormatter)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1151(MeijerShiftD)
        1    0.000    0.000    0.000    0.000 zipfile.py:43(BadZipFile)
        1    0.000    0.000    0.000    0.000 hb.py:377(<dictcomp>)
        1    0.000    0.000    0.000    0.000 nodes.py:125(SequenceNode)
        1    0.000    0.000    0.000    0.000 case.py:334(_OrderedChainMap)
        1    0.000    0.000    0.000    0.000 __init__.py:169(c_ushort)
        1    0.000    0.000    0.000    0.000 argparse.py:1242(_ExtendAction)
        1    0.000    0.000    0.000    0.000 client.py:1507(BadStatusLine)
        1    0.000    0.000    0.000    0.000 context.py:242(__init__)
        1    0.000    0.000    0.000    0.000 units.py:144(UnitError)
        1    0.000    0.000    0.000    0.000 dumper.py:71(SafeDumper)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1118(MeijerShiftA)
        1    0.000    0.000    0.000    0.000 facts.py:252(TautologyDetected)
        1    0.000    0.000    0.000    0.000 calendar.py:162(setfirstweekday)
        1    0.000    0.000    0.000    0.000 ticker.py:2883(AutoLocator)
        1    0.000    0.000    0.000    0.000 pathlib.py:331(_PreciseSelector)
        1    0.000    0.000    0.000    0.000 __init__.py:186(c_int)
        1    0.000    0.000    0.000    0.000 patches.py:2632(Arc)
        1    0.000    0.000    0.000    0.000 _multivariate.py:4243(unitary_group_frozen)
        1    0.000    0.000    0.000    0.000 _dual_annealing.py:366(ObjectiveFunWrapper)
        1    0.000    0.000    0.000    0.000 engine.py:20(DiagnosticError)
        1    0.000    0.000    0.000    0.000 <string>:1(<module>)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:169(_LRScheduler)
        1    0.000    0.000    0.000    0.000 patches.py:2726(Bar)
        1    0.000    0.000    0.000    0.000 _static.py:108(Dict)
        1    0.000    0.000    0.000    0.000 dataframes.py:337(CaptureGetAttr)
        1    0.000    0.000    0.000    0.000 constraints.py:303(_Real)
        1    0.000    0.000    0.000    0.000 patches.py:3077(CurveB)
        1    0.000    0.000    0.000    0.000 requirements.py:15(InvalidRequirement)
        1    0.000    0.000    0.000    0.000 warnings.py:89(InformationOnly)
        1    0.000    0.000    0.000    0.000 utils.py:18(InvalidName)
        1    0.000    0.000    0.000    0.000 scanner.py:2037(BlankLineComment)
        1    0.000    0.000    0.000    0.000 mock.py:2112(AsyncMagicMixin)
        1    0.000    0.000    0.000    0.000 simplex.py:96(InfeasibleLPError)
        1    0.000    0.000    0.000    0.000 galois_resolvents.py:39(GaloisGroupException)
        1    0.000    0.000    0.000    0.000 exceptions.py:58(ModuleDeprecationWarning)
        1    0.000    0.000    0.000    0.000 _dia.py:528(dia_array)
        1    0.000    0.000    0.000    0.000 logic.py:391(Or)
        1    0.000    0.000    0.000    0.000 systems.py:32(ODEOrderError)
        1    0.000    0.000    0.000    0.000 errors.py:104(ObsoleteHeaderDefect)
        1    0.000    0.000    0.000    0.000 _script.py:352(ConstMap)
        1    0.000    0.000    0.000    0.000 pathlib.py:1398(WindowsPath)
        1    0.000    0.000    0.000    0.000 __init__.py:246(c_void_p)
        1    0.000    0.000    0.000    0.000 util.py:102(_FifoCache)
        1    0.000    0.000    0.000    0.000 loader.py:39(SafeLoader)
        1    0.000    0.000    0.000    0.000 client.py:1514(LineTooLong)
        1    0.000    0.000    0.000    0.000 pathlib.py:325(_TerminatingSelector)
        1    0.000    0.000    0.000    0.000 exceptions.py:18(DMBadInputError)
        1    0.000    0.000    0.000    0.000 facts.py:451(<setcomp>)
        1    0.000    0.000    0.000    0.000 _monkeytype_config.py:161(JitTypeTraceConfig)
        1    0.000    0.000    0.000    0.000 mathtext.py:1437(Hbox)
        1    0.000    0.000    0.000    0.000 parse.py:323(SplitResult)
        1    0.000    0.000    0.000    0.000 dates.py:1583(WeekdayLocator)
        1    0.000    0.000    0.000    0.000 Image.py:70(DecompressionBombWarning)
        1    0.000    0.000    0.000    0.000 _mio5_params.py:268(MatlabOpaque)
        1    0.000    0.000    0.000    0.000 __init__.py:310(first_invoke)
        1    0.000    0.000    0.000    0.000 scalarint.py:89(OctalInt)
        1    0.000    0.000    0.000    0.000 decorator.py:46(get_init)
        1    0.000    0.000    0.000    0.000 _sf_error.py:5(SpecialFunctionWarning)
        1    0.000    0.000    0.000    0.000 quadrature.py:389(GaussLegendre)
        1    0.000    0.000    0.000    0.000 fused.py:85(ConvBn3d)
        1    0.000    0.000    0.000    0.000 fetch.py:45(_MapDatasetFetcher)
        1    0.000    0.000    0.000    0.000 threading.py:1199(daemon)
        1    0.000    0.000    0.000    0.000 six.py:340(Module_six_moves_urllib_parse)
        1    0.000    0.000    0.000    0.000 dumper.py:121(Dumper)
        1    0.000    0.000    0.000    0.000 exceptions.py:4(ClosureFailure)
        1    0.000    0.000    0.000    0.000 fused.py:140(LinearTanh)
        1    0.000    0.000    0.000    0.000 error.py:73(ContentTooShortError)
        1    0.000    0.000    0.000    0.000 context.py:14(ProcessError)
        1    0.000    0.000    0.000    0.000 pathlib.py:347(_WildcardSelector)
        1    0.000    0.000    0.000    0.000 fused.py:131(LinearLeakyReLU)
        1    0.000    0.000    0.000    0.000 transforms.py:1516(InverseHankelTransform)
        1    0.000    0.000    0.000    0.000 evalf.py:65(PrecisionExhausted)
        1    0.000    0.000    0.000    0.000 misc.py:13(Undecidable)
        1    0.000    0.000    0.000    0.000 fused.py:10(_FusedModule)
        1    0.000    0.000    0.000    0.000 fused.py:31(ConvReLU3d)
        1    0.000    0.000    0.000    0.000 repmatrix.py:186(<genexpr>)
        1    0.000    0.000    0.000    0.000 modules.py:1096(ModuleOrder)
        1    0.000    0.000    0.000    0.000 exceptions.py:39(StructureError)
        1    0.000    0.000    0.000    0.000 _ufunc_config.py:360(_unspecified)
        1    0.000    0.000    0.000    0.000 _arffread.py:54(ArffError)
        1    0.000    0.000    0.000    0.000 argparse.py:992(_StoreFalseAction)
        1    0.000    0.000    0.000    0.000 container.py:71(ErrorbarContainer)
        1    0.000    0.000    0.000    0.000 __init__.py:260(IgnoredKeywordWarning)
        1    0.000    0.000    0.000    0.000 net_min_base.py:40(FxNetMinimizerRunFuncError)
        1    0.000    0.000    0.000    0.000 client.py:1519(RemoteDisconnected)
        1    0.000    0.000    0.000    0.000 package_importer.py:658(_PathNode)
        1    0.000    0.000    0.000    0.000 indexed.py:120(IndexException)
        1    0.000    0.000    0.000    0.000 configparser.py:264(InterpolationMissingOptionError)
        1    0.000    0.000    0.000    0.000 diophantine.py:938(HomogeneousGeneralQuadratic)
        1    0.000    0.000    0.000    0.000 fused.py:40(LinearReLU)
        1    0.000    0.000    0.000    0.000 constraints.py:427(_LowerTriangular)
        1    0.000    0.000    0.000    0.000 ivp.py:24(OdeResult)
        1    0.000    0.000    0.000    0.000 scalarstring.py:84(DoubleQuotedScalarString)
        1    0.000    0.000    0.000    0.000 function.py:118(BadArgumentsError)
        1    0.000    0.000    0.000    0.000 fused.py:58(ConvBn2d)
        1    0.000    0.000    0.000    0.000 emitter.py:1777(RoundTripEmitter)
        1    0.000    0.000    0.000    0.000 _script.py:323(_CachedForward)
        1    0.000    0.000    0.000    0.000 core.py:2500(_SingleCharLiteral)
        1    0.000    0.000    0.000    0.000 resolver.py:102(ResolverError)
        1    0.000    0.000    0.000    0.000 constraints.py:504(_PositiveDefinite)
        1    0.000    0.000    0.000    0.000 _base.py:19(SparseWarning)
        1    0.000    0.000    0.000    0.000 fused.py:76(ConvBnReLU2d)
        1    0.000    0.000    0.000    0.000 mathtext.py:212(MathtextBackendBitmap)
        1    0.000    0.000    0.000    0.000 errors.py:20(DistutilsError)
        1    0.000    0.000    0.000    0.000 tokens.py:271(KeyToken)
        1    0.000    0.000    0.000    0.000 _endian.py:55(BigEndianUnion)
        1    0.000    0.000    0.000    0.000 patches.py:2532(Angle3)
        1    0.000    0.000    0.000    0.000 _warnings_errors.py:33(FitError)
        1    0.000    0.000    0.000    0.000 io.py:340(FileLockException)
        1    0.000    0.000    0.000    0.000 fused.py:49(ConvBn1d)
        1    0.000    0.000    0.000    0.000 frontend.py:114(NotSupportedError)
        1    0.000    0.000    0.000    0.000 mathtext.py:2025(SubSuperCluster)
        1    0.000    0.000    0.000    0.000 exceptions.py:20(_ExceptionWordUnicodeSet)
        1    0.000    0.000    0.000    0.000 tokens.py:210(DocumentStartToken)
        1    0.000    0.000    0.000    0.000 diophantine.py:1107(CubicThue)
        1    0.000    0.000    0.000    0.000 scalarint.py:100(HexInt)
        1    0.000    0.000    0.000    0.000 pyprojecttoml.py:458(_ExperimentalConfiguration)
        1    0.000    0.000    0.000    0.000 _pep440.py:129(InvalidVersion)
        1    0.000    0.000    0.000    0.000 fused.py:94(ConvBnReLU3d)
        1    0.000    0.000    0.000    0.000 constraints.py:466(_Square)
        1    0.000    0.000    0.000    0.000 _iotools.py:421(ConverterError)
        1    0.000    0.000    0.000    0.000 representer.py:48(RepresenterError)
        1    0.000    0.000    0.000    0.000 codeprinter.py:37(PrintMethodNotImplementedError)
        1    0.000    0.000    0.000    0.000 inverselaplace.py:542(Cohen)
        1    0.000    0.000    0.000    0.000 fused.py:104(BNReLU2d)
        1    0.000    0.000    0.000    0.000 _fortran_format_parser.py:28(BadFortranFormat)
        1    0.000    0.000    0.000    0.000 argparse.py:975(_StoreTrueAction)
        1    0.000    0.000    0.000    0.000 conflict.py:3(AmbiguityWarning)
        1    0.000    0.000    0.000    0.000 batchnorm.py:446(BatchNorm3d)
        1    0.000    0.000    0.000    0.000 importer.py:22(ObjMismatchError)
        1    0.000    0.000    0.000    0.000 pathlib.py:43(_is_wildcard_pattern)
        1    0.000    0.000    0.000    0.000 mathtext.py:1968(SsGlue)
        1    0.000    0.000    0.000    0.000 scalarfloat.py:98(ExponentialFloat)
        1    0.000    0.000    0.000    0.000 shutil.py:77(RegistryError)
        1    0.000    0.000    0.000    0.000 _elffile.py:19(ELFInvalid)
        1    0.000    0.000    0.000    0.000 composer.py:27(ComposerError)
        1    0.000    0.000    0.000    0.000 eigen.py:38(Eigen)
        1    0.000    0.000    0.000    0.000 dropout.py:153(Dropout3d)
        1    0.000    0.000    0.000    0.000 _parser.py:39(Op)
        1    0.000    0.000    0.000    0.000 transforms.py:1454(HankelTransform)
        1    0.000    0.000    0.000    0.000 discovery.py:263(FlatLayoutModuleFinder)
        1    0.000    0.000    0.000    0.000 fused.py:123(LinearBn1d)
        1    0.000    0.000    0.000    0.000 configparser.py:254(InterpolationError)
        1    0.000    0.000    0.000    0.000 tarfile.py:270(ExtractError)
        1    0.000    0.000    0.000    0.000 periodic_table.py:1586(Specie)
        1    0.000    0.000    0.000    0.000 symbolic_opset13.py:23(_apply_params)
        1    0.000    0.000    0.000    0.000 errors.py:27(CallHintViolationWarning)
        1    0.000    0.000    0.000    0.000 _ltisys.py:1151(ZerosPolesGainDiscrete)
        1    0.000    0.000    0.000    0.000 emitter.py:28(EmitterError)
        1    0.000    0.000    0.000    0.000 tokens.py:236(BlockSequenceStartToken)
        1    0.000    0.000    0.000    0.000 _base.py:24(SparseFormatWarning)
        1    0.000    0.000    0.000    0.000 extension.py:176(Library)
        1    0.000    0.000    0.000    0.000 _typing.py:134(DTypesIntegral)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:193(UnstructuredTokenList)
        1    0.000    0.000    0.000    0.000 events.py:253(MappingStartEvent)
        1    0.000    0.000    0.000    0.000 _common.py:163(ZoneInfoNotFoundError)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1002(MultOperator)
        1    0.000    0.000    0.000    0.000 polyerrors.py:114(PolynomialError)
        1    0.000    0.000    0.000    0.000 dropout.py:195(AlphaDropout)
        1    0.000    0.000    0.000    0.000 hb.py:30(MalformedHeader)
        1    0.000    0.000    0.000    0.000 polyoptions.py:658(Polys)
        1    0.000    0.000    0.000    0.000 {method 'isdecimal' of 'str' objects}
        1    0.000    0.000    0.000    0.000 configparser.py:216(DuplicateOptionError)
        1    0.000    0.000    0.000    0.000 alphabets.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dropout.py:237(FeatureAlphaDropout)
        1    0.000    0.000    0.000    0.000 shutil.py:64(SameFileError)
        1    0.000    0.000    0.000    0.000 case.py:33(_ShouldStop)
        1    0.000    0.000    0.000    0.000 font_manager.py:957(JSONEncoder)
        1    0.000    0.000    0.000    0.000 core.py:270(ParseError)
        1    0.000    0.000    0.000    0.000 _symbolic_trace.py:890(_PatchedFnDel)
        1    0.000    0.000    0.000    0.000 shutil.py:81(_GiveupOnFastCopy)
        1    0.000    0.000    0.000    0.000 outputs.py:4533(VaspParseError)
        1    0.000    0.000    0.000    0.000 tokens.py:312(TagToken)
        1    0.000    0.000    0.000    0.000 dropout.py:104(Dropout2d)
        1    0.000    0.000    0.000    0.000 __init__.py:88(_8Bit)
        1    0.000    0.000    0.000    0.000 __init__.py:11(DeprecatedTzFormatWarning)
        1    0.000    0.000    0.000    0.000 patches.py:3111(CurveFilledA)
        1    0.000    0.000    0.000    0.000 exceptions.py:265(ParseException)
        1    0.000    0.000    0.000    0.000 exceptions.py:28(DMNotAField)
        1    0.000    0.000    0.000    0.000 odes.py:4(ODEMethods)
        1    0.000    0.000    0.000    0.000 transports.py:148(Transport)
        1    0.000    0.000    0.000    0.000 parse.py:342(SplitResultBytes)
        1    0.000    0.000    0.000    0.000 utils.py:24(InvalidWheelFilename)
        1    0.000    0.000    0.000    0.000 error.py:109(CommentMark)
        1    0.000    0.000    0.000    0.000 subprocess.py:123(SubprocessError)
        1    0.000    0.000    0.000    0.000 patches.py:3294(BracketB)
        1    0.000    0.000    0.000    0.000 identification.py:13(IdentificationMethods)
        1    0.000    0.000    0.000    0.000 scanner.py:53(ScannerError)
        1    0.000    0.000    0.000    0.000 mathtext.py:1962(NegFilll)
        1    0.000    0.000    0.000    0.000 __init__.py:727(FilterError)
        1    0.000    0.000    0.000    0.000 constraints.py:438(_LowerCholesky)
        1    0.000    0.000    0.000    0.000 errors.py:12(MessageParseError)
        1    0.000    0.000    0.000    0.000 tarfile.py:273(ReadError)
        1    0.000    0.000    0.000    0.000 _static.py:145(SpecifierSet)
        1    0.000    0.000    0.000    0.000 bdist.py:21(deprecated)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:828(ContentDisposition)
        1    0.000    0.000    0.000    0.000 configparser.py:243(NoOptionError)
        1    0.000    0.000    0.000    0.000 errors.py:53(MisplacedEnvelopeHeaderDefect)
        1    0.000    0.000    0.000    0.000 __init__.py:14(is_available)
        1    0.000    0.000    0.000    0.000 _optimize.py:112(OptimizeResult)
        1    0.000    0.000    0.000    0.000 abc.py:267(FileLoader)
        1    0.000    0.000    0.000    0.000 _script.py:328(ScriptWarning)
        1    0.000    0.000    0.000    0.000 _parser.py:1608(UnknownTimezoneWarning)
        1    0.000    0.000    0.000    0.000 backend_tools.py:721(ConfigureSubplotsBase)
        1    0.000    0.000    0.000    0.000 _optimize.py:157(OptimizeWarning)
        1    0.000    0.000    0.000    0.000 scalarstring.py:93(PlainScalarString)
        1    0.000    0.000    0.000    0.000 _dia.py:604(dia_matrix)
        1    0.000    0.000    0.000    0.000 patches.py:3094(CurveAB)
        1    0.000    0.000    0.000    0.000 _csr.py:437(csr_matrix)
        1    0.000    0.000    0.000    0.000 parse.py:328(ParseResult)
        1    0.000    0.000    0.000    0.000 exceptions.py:23(DMDomainError)
        1    0.000    0.000    0.000    0.000 __init__.py:67(_256Bit)
        1    0.000    0.000    0.000    0.000 _mio5.py:445(EmptyStructMarker)
        1    0.000    0.000    0.000    0.000 cyaml.py:54(CLoader)
        1    0.000    0.000    0.000    0.000 threading.py:832(<listcomp>)
        1    0.000    0.000    0.000    0.000 backend_bases.py:2625(NonGuiException)
        1    0.000    0.000    0.000    0.000 tokens.py:284(BlockEntryToken)
        1    0.000    0.000    0.000    0.000 _pep440.py:150(<lambda>)
        1    0.000    0.000    0.000    0.000 exceptions.py:17(InvalidStateError)
        1    0.000    0.000    0.000    0.000 __init__.py:14(_Await)
        1    0.000    0.000    0.000    0.000 function.py:583(_nested_map)
        1    0.000    0.000    0.000    0.000 tarfile.py:276(CompressionError)
        1    0.000    0.000    0.000    0.000 patches.py:3129(CurveFilledB)
        1    0.000    0.000    0.000    0.000 __init__.py:752(LinkOutsideDestinationError)
        1    0.000    0.000    0.000    0.000 errors.py:81(DistutilsPlatformError)
        1    0.000    0.000    0.000    0.000 _optimize.py:3113(BracketError)
        1    0.000    0.000    0.000    0.000 __init__.py:13(_PyFutureMeta)
        1    0.000    0.000    0.000    0.000 errors.py:20(BoundaryError)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:3403(Buffer)
        1    0.000    0.000    0.000    0.000 constructor.py:47(ConstructorError)
        1    0.000    0.000    0.000    0.000 resolver.py:135(<dictcomp>)
        1    0.000    0.000    0.000    0.000 package_importer.py:675(_ExternNode)
        1    0.000    0.000    0.000    0.000 _endian.py:34(_swapped_struct_meta)
        1    0.000    0.000    0.000    0.000 mathtext.py:1430(Vbox)
        1    0.000    0.000    0.000    0.000 polyoptions.py:44(Flag)
        1    0.000    0.000    0.000    0.000 function.py:103(PoleError)
        1    0.000    0.000    0.000    0.000 exceptions.py:189(DTypePromotionError)
        1    0.000    0.000    0.000    0.000 exceptions.py:10(ShapeError)
        1    0.000    0.000    0.000    0.000 _dist_ver.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:11(_PyAwaitMeta)
        1    0.000    0.000    0.000    0.000 {built-in method numpy.core._multiarray_umath._set_madvise_hugepage}
        1    0.000    0.000    0.000    0.000 Image.py:74(DecompressionBombError)
        1    0.000    0.000    0.000    0.000 _static.py:61(Str)
        1    0.000    0.000    0.000    0.000 events.py:123(StreamEndEvent)
        1    0.000    0.000    0.000    0.000 context.py:319(suppress)
        1    0.000    0.000    0.000    0.000 _ccallback.py:9(CData)
        1    0.000    0.000    0.000    0.000 errors.py:5(PreprocessError)
        1    0.000    0.000    0.000    0.000 _idl.py:153(ObjectPointer)
        1    0.000    0.000    0.000    0.000 _bsr.py:771(bsr_matrix)
        1    0.000    0.000    0.000    0.000 constraints.py:452(_CorrCholesky)
        1    0.000    0.000    0.000    0.000 extras.py:319(_fromnxfunction_allargs)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:93(_median_formula)
        1    0.000    0.000    0.000    0.000 six.py:459(Module_six_moves_urllib_response)
        1    0.000    0.000    0.000    0.000 unicode.py:304(CJK)
        1    0.000    0.000    0.000    0.000 six.py:382(Module_six_moves_urllib_error)
        1    0.000    0.000    0.000    0.000 splitter_base.py:182(FxNetSplitterInternalError)
        1    0.000    0.000    0.000    0.000 tarfile.py:297(SubsequentHeaderError)
        1    0.000    0.000    0.000    0.000 _iotools.py:429(ConverterLockError)
        1    0.000    0.000    0.000    0.000 queues.py:16(QueueFull)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:401(group)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:212(Token)
        1    0.000    0.000    0.000    0.000 parser.py:98(ParserError)
        2    0.000    0.000    0.000    0.000 groundtypes.py:26(__init__)
        1    0.000    0.000    0.000    0.000 fromnumeric.py:91(_take_dispatcher)
        1    0.000    0.000    0.000    0.000 _miobase.py:24(MatWriteError)
        1    0.000    0.000    0.000    0.000 net_min_base.py:49(FxNetMinimizerResultMismatchError)
        1    0.000    0.000    0.000    0.000 pickle.py:84(UnpicklingError)
        1    0.000    0.000    0.000    0.000 dates.py:1611(DayLocator)
        1    0.000    0.000    0.000    0.000 resolver.py:294(Resolver)
        1    0.000    0.000    0.000    0.000 legend_handler.py:423(HandlerCircleCollection)
        1    0.000    0.000    0.000    0.000 errors.py:16(HeaderParseError)
        1    0.000    0.000    0.000    0.000 {method 'keys' of 'mappingproxy' objects}
        1    0.000    0.000    0.000    0.000 streamplot.py:416(InvalidIndexError)
        1    0.000    0.000    0.000    0.000 context.py:17(BufferTooShort)
        1    0.000    0.000    0.000    0.000 _typing.py:151(DTypesNumeric)
        1    0.000    0.000    0.000    0.000 utils.py:79(<dictcomp>)
        1    0.000    0.000    0.000    0.000 boolalg.py:371(__eq__)
        1    0.000    0.000    0.000    0.000 {method 'isascii' of 'str' objects}
        1    0.000    0.000    0.000    0.000 warnings.py:99(SetuptoolsDeprecationWarning)
        1    0.000    0.000    0.000    0.000 ctx_base.py:21(Context)
        1    0.000    0.000    0.000    0.000 __init__.py:273(ExtractError)
        1    0.000    0.000    0.000    0.000 errors.py:23(UnknownFileType)
        1    0.000    0.000    0.000    0.000 _csc.py:274(csc_matrix)
        1    0.000    0.000    0.000    0.000 __init__.py:276(ReadError)
        1    0.000    0.000    0.000    0.000 __init__.py:173(c_long)
        1    0.000    0.000    0.000    0.000 tarfile.py:294(InvalidHeaderError)
        1    0.000    0.000    0.000    0.000 frontend.py:131(FrontendTypeError)
        1    0.000    0.000    0.000    0.000 errors.py:33(OnnxExporterError)
        1    0.000    0.000    0.000    0.000 polyerrors.py:128(GeneratorsError)
        1    0.000    0.000    0.000    0.000 _typing.py:26(Integer)
        1    0.000    0.000    0.000    0.000 shutil.py:67(SpecialFileError)
        1    0.000    0.000    0.000    0.000 _arffread.py:58(ParseArffError)
        1    0.000    0.000    0.000    0.000 __init__.py:282(StreamError)
        1    0.000    0.000    0.000    0.000 exceptions.py:33(DMFormatError)
        1    0.000    0.000    0.000    0.000 _iotools.py:437(ConversionWarning)
        1    0.000    0.000    0.000    0.000 threading.py:798(BrokenBarrierError)
        1    0.000    0.000    0.000    0.000 argparse.py:774(ArgumentTypeError)
        1    0.000    0.000    0.000    0.000 zipfile.py:47(LargeZipFile)
        1    0.000    0.000    0.000    0.000 _diagnostic.py:107(background_context)
        1    0.000    0.000    0.000    0.000 client.py:1459(HTTPException)
        1    0.000    0.000    0.000    0.000 gzip.py:117(BadGzipFile)
        1    0.000    0.000    0.000    0.000 parse.py:347(ParseResultBytes)
        1    0.000    0.000    0.000    0.000 error.py:232(UnsafeLoaderWarning)
        1    0.000    0.000    0.000    0.000 _base.py:651(BrokenExecutor)
        1    0.000    0.000    0.000    0.000 six.py:402(Module_six_moves_urllib_request)
        1    0.000    0.000    0.000    0.000 animation.py:674(AVConvWriter)
        1    0.000    0.000    0.000    0.000 errors.py:42(DistutilsGetoptError)
        1    0.000    0.000    0.000    0.000 _static.py:69(List)
        1    0.000    0.000    0.000    0.000 __init__.py:279(CompressionError)
        1    0.000    0.000    0.000    0.000 _typing.py:156(DTypesAll)
        1    0.000    0.000    0.000    0.000 case.py:38(_UnexpectedSuccess)
        1    0.000    0.000    0.000    0.000 extras.py:294(_fromnxfunction_args)
        1    0.000    0.000    0.000    0.000 setupcfg.py:779(_DeprecatedConfig)
        1    0.000    0.000    0.000    0.000 polyerrors.py:67(HeuristicGCDFailed)
        1    0.000    0.000    0.000    0.000 pathlib.py:1391(PosixPath)
        1    0.000    0.000    0.000    0.000 mathtext.py:1070(StixSansFonts)
        1    0.000    0.000    0.000    0.000 markers.py:39(UndefinedComparison)
        1    0.000    0.000    0.000    0.000 events.py:264(MappingEndEvent)
        1    0.000    0.000    0.000    0.000 function.py:113(BadSignatureError)
        1    0.000    0.000    0.000    0.000 systems.py:37(ODENonlinearError)
        1    0.000    0.000    0.000    0.000 shutil.py:74(ReadError)
        1    0.000    0.000    0.000    0.000 periodic_table.py:1592(DummySpecie)
        1    0.000    0.000    0.000    0.000 facts.py:115(<listcomp>)
        1    0.000    0.000    0.000    0.000 _static.py:65(Tuple)
        1    0.000    0.000    0.000    0.000 _miobase.py:31(MatWriteWarning)
        1    0.000    0.000    0.000    0.000 tokens.py:241(BlockMappingStartToken)
        1    0.000    0.000    0.000    0.000 _base.py:28(SparseEfficiencyWarning)
        1    0.000    0.000    0.000    0.000 _base.py:55(InvalidStateError)
        1    0.000    0.000    0.000    0.000 markers.py:45(UndefinedEnvironmentName)
        1    0.000    0.000    0.000    0.000 std.py:52(TqdmExperimentalWarning)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:700(Section)
        1    0.000    0.000    0.000    0.000 exceptions.py:61(BrokenBarrierError)
        1    0.000    0.000    0.000    0.000 __init__.py:223(c_ubyte)
        1    0.000    0.000    0.000    0.000 scalarint.py:118(DecimalInt)
        1    0.000    0.000    0.000    0.000 comments.py:200(NotNone)
        1    0.000    0.000    0.000    0.000 polyerrors.py:71(ModularGCDFailed)
        1    0.000    0.000    0.000    0.000 std.py:32(TqdmTypeError)
        1    0.000    0.000    0.000    0.000 __init__.py:70(_128Bit)
        1    0.000    0.000    0.000    0.000 __init__.py:190(c_uint)
        1    0.000    0.000    0.000    0.000 tokens.py:256(FlowMappingStartToken)
        1    0.000    0.000    0.000    0.000 _base.py:49(CancelledError)
        1    0.000    0.000    0.000    0.000 context.py:23(AuthenticationError)
        1    0.000    0.000    0.000    0.000 tarfile.py:285(EmptyHeaderError)
        1    0.000    0.000    0.000    0.000 shutil.py:71(ExecError)
        1    0.000    0.000    0.000    0.000 streamplot.py:495(OutOfBounds)
        1    0.000    0.000    0.000    0.000 ops.py:861(NotUpcast)
        1    0.000    0.000    0.000    0.000 errors.py:39(CheckerError)
        1    0.000    0.000    0.000    0.000 tarfile.py:282(HeaderError)
        1    0.000    0.000    0.000    0.000 more.py:3661(AbortThread)
        1    0.000    0.000    0.000    0.000 events.py:248(SequenceEndEvent)
        1    0.000    0.000    0.000    0.000 release.py:1(<module>)
        1    0.000    0.000    0.000    0.000 exceptions.py:53(DMNonSquareMatrixError)
        1    0.000    0.000    0.000    0.000 animation.py:685(AVConvFileWriter)
        1    0.000    0.000    0.000    0.000 errors.py:63(DistutilsOptionError)
        1    0.000    0.000    0.000    0.000 tokens.py:289(FlowEntryToken)
        1    0.000    0.000    0.000    0.000 errors.py:47(CloseBoundaryNotFoundDefect)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:507(DotAtomText)
        1    0.000    0.000    0.000    0.000 errors.py:48(DistutilsArgError)
        1    0.000    0.000    0.000    0.000 errors.py:13(LibError)
        1    0.000    0.000    0.000    0.000 events.py:101(CollectionEndEvent)
        1    0.000    0.000    0.000    0.000 exceptions.py:19(NonInvertibleMatrixError)
        1    0.000    0.000    0.000    0.000 __init__.py:177(c_ulong)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:834(ContentTransferEncoding)
        1    0.000    0.000    0.000    0.000 proxy.py:317(TraceError)
        1    0.000    0.000    0.000    0.000 {method '__enter__' of '_thread.lock' objects}
        1    0.000    0.000    0.000    0.000 context.py:20(TimeoutError)
        1    0.000    0.000    0.000    0.000 errors.py:64(InvalidMultipartContentTransferEncodingDefect)
        1    0.000    0.000    0.000    0.000 tarfile.py:279(StreamError)
        1    0.000    0.000    0.000    0.000 tarfile.py:291(EOFHeaderError)
        1    0.000    0.000    0.000    0.000 __init__.py:261(c_wchar)
        1    0.000    0.000    0.000    0.000 __init__.py:285(HeaderError)
        1    0.000    0.000    0.000    0.000 exceptions.py:47(MissingUnityError)
        1    0.000    0.000    0.000    0.000 errors.py:28(CharsetError)
        1    0.000    0.000    0.000    0.000 pyprojecttoml.py:465(_ToolsTypoInMetadata)
        1    0.000    0.000    0.000    0.000 errors.py:9(CompileError)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:550(ObsLocalPart)
        1    0.000    0.000    0.000    0.000 tokens.py:261(FlowSequenceEndToken)
        1    0.000    0.000    0.000    0.000 __init__.py:251(c_bool)
        1    0.000    0.000    0.000    0.000 __init__.py:230(c_byte)
        1    0.000    0.000    0.000    0.000 errors.py:51(PackageDiscoveryError)
        1    0.000    0.000    0.000    0.000 <string>:1(__create_fn__)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1823(tol)
        1    0.000    0.000    0.000    0.000 exceptions.py:21(SendfileNotAvailableError)
        1    0.000    0.000    0.000    0.000 repmatrix.py:202(<genexpr>)
        1    0.000    0.000    0.000    0.000 errors.py:24(MultipartConversionError)
        1    0.000    0.000    0.000    0.000 __init__.py:198(c_double)
        1    0.000    0.000    0.000    0.000 std.py:62(TqdmMonitorWarning)
        1    0.000    0.000    0.000    0.000 tarfile.py:288(TruncatedHeaderError)
        1    0.000    0.000    0.000    0.000 errors.py:41(RemovedCommandError)
        1    0.000    0.000    0.000    0.000 core.py:156(MaskError)
        1    0.000    0.000    0.000    0.000 exceptions.py:291(ParseSyntaxException)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:503(DotAtom)
        1    0.000    0.000    0.000    0.000 __init__.py:235(c_char)
        1    0.000    0.000    0.000    0.000 six.py:480(Module_six_moves_urllib_robotparser)
        1    0.000    0.000    0.000    0.000 headerregistry.py:322(UniqueDateHeader)
        1    0.000    0.000    0.000    0.000 errors.py:112(InvalidDateDefect)
        1    0.000    0.000    0.000    0.000 errors.py:107(DistutilsByteCompileError)
        1    0.000    0.000    0.000    0.000 _adapters.py:143(__init__)
        1    0.000    0.000    0.000    0.000 backend_tools.py:439(ToolEnableNavigation)
        1    0.000    0.000    0.000    0.000 errors.py:18(LinkError)
        1    0.000    0.000    0.000    0.000 client.py:1501(CannotSendHeader)
        1    0.000    0.000    0.000    0.000 _utils_internal.py:37(prepare_multiprocessing_environment)
        1    0.000    0.000    0.000    0.000 __init__.py:297(InvalidHeaderError)
        1    0.000    0.000    0.000    0.000 tokens.py:231(StreamEndToken)
        1    0.000    0.000    0.000    0.000 repmatrix.py:201(<genexpr>)
        1    0.000    0.000    0.000    0.000 exceptions.py:43(DMRankError)
        1    0.000    0.000    0.000    0.000 mathtext.py:1325(DejaVuSerifFontConstants)
        1    0.000    0.000    0.000    0.000 exceptions.py:284(ParseFatalException)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:204(CFWSList)
        1    0.000    0.000    0.000    0.000 polyerrors.py:86(EvaluationFailed)
        1    0.000    0.000    0.000    0.000 boolalg.py:446(__eq__)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:208(Atom)
        1    0.000    0.000    0.000    0.000 errors.py:74(DistutilsSetupError)
        1    0.000    0.000    0.000    0.000 errors.py:103(DistutilsTemplateError)
        1    0.000    0.000    0.000    0.000 _miobase.py:28(MatReadWarning)
        1    0.000    0.000    0.000    0.000 __init__.py:288(EmptyHeaderError)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:2055(_EllipsisDummy)
        1    0.000    0.000    0.000    0.000 __init__.py:76(_80Bit)
        1    0.000    0.000    0.000    0.000 errors.py:55(DistutilsFileError)
        1    0.000    0.000    0.000    0.000 tokens.py:251(FlowSequenceStartToken)
        1    0.000    0.000    0.000    0.000 polyerrors.py:122(UnsolvableFactorError)
        1    0.000    0.000    0.000    0.000 errors.py:50(FirstHeaderLineIsContinuationDefect)
        1    0.000    0.000    0.000    0.000 errors.py:61(MultipartInvariantViolationDefect)
        1    0.000    0.000    0.000    0.000 errors.py:96(DistutilsInternalError)
        1    0.000    0.000    0.000    0.000 polyerrors.py:110(DomainError)
        1    0.000    0.000    0.000    0.000 polyerrors.py:82(ExtraneousFactors)
        1    0.000    0.000    0.000    0.000 headerregistry.py:271(UniqueUnstructuredHeader)
        1    0.000    0.000    0.000    0.000 json.py:906(MSONError)
        1    0.000    0.000    0.000    0.000 exceptions.py:38(DMNonInvertibleMatrixError)
        1    0.000    0.000    0.000    0.000 integerring.py:51(__init__)
        1    0.000    0.000    0.000    0.000 errors.py:56(MissingHeaderBodySeparatorDefect)
        1    0.000    0.000    0.000    0.000 errors.py:89(DistutilsExecError)
        1    0.000    0.000    0.000    0.000 contextlib.py:342(__enter__)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:197(Phrase)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:200(Word)
        1    0.000    0.000    0.000    0.000 errors.py:33(DistutilsClassError)
        1    0.000    0.000    0.000    0.000 rationalfield.py:45(__init__)
        1    0.000    0.000    0.000    0.000 error.py:274(YAMLFutureWarning)
        1    0.000    0.000    0.000    0.000 tokens.py:279(ValueToken)
        1    0.000    0.000    0.000    0.000 exceptions.py:58(DMValueError)
        1    0.000    0.000    0.000    0.000 polyerrors.py:106(NotAlgebraic)
        1    0.000    0.000    0.000    0.000 exceptions.py:74(VisibleDeprecationWarning)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:840(HeaderLabel)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:943(_InvalidEwError)
        1    0.000    0.000    0.000    0.000 polyerrors.py:90(RefinementFailed)
        1    0.000    0.000    0.000    0.000 polyerrors.py:98(NotInvertible)
        1    0.000    0.000    0.000    0.000 errors.py:90(HeaderMissingRequiredValue)
        1    0.000    0.000    0.000    0.000 errors.py:70(InvalidBase64PaddingDefect)
        1    0.000    0.000    0.000    0.000 __init__.py:79(_64Bit)
        1    0.000    0.000    0.000    0.000 pickle.py:77(PicklingError)
        1    0.000    0.000    0.000    0.000 streamplot.py:420(TerminateTrajectory)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:862(Header)
        1    0.000    0.000    0.000    0.000 __init__.py:291(TruncatedHeaderError)
        1    0.000    0.000    0.000    0.000 __init__.py:300(SubsequentHeaderError)
        1    0.000    0.000    0.000    0.000 error.py:116(YAMLError)
        1    0.000    0.000    0.000    0.000 polyerrors.py:102(NotReversible)
        1    0.000    0.000    0.000    0.000 tokens.py:246(BlockEndToken)
        1    0.000    0.000    0.000    0.000 galois_resolvents.py:43(ResolventException)
        1    0.000    0.000    0.000    0.000 errors.py:41(NoBoundaryInMultipartDefect)
        1    0.000    0.000    0.000    0.000 errors.py:107(NonASCIILocalPartDefect)
        1    0.000    0.000    0.000    0.000 std.py:36(TqdmKeyError)
        1    0.000    0.000    0.000    0.000 tokens.py:266(FlowMappingEndToken)
        1    0.000    0.000    0.000    0.000 client.py:1498(CannotSendRequest)
        1    0.000    0.000    0.000    0.000 __init__.py:202(c_longdouble)
        1    0.000    0.000    0.000    0.000 bdist.py:22(<lambda>)
        1    0.000    0.000    0.000    0.000 utils.py:30(InvalidSdistFilename)
        1    0.000    0.000    0.000    0.000 hb.py:34(LineOverflow)
        1    0.000    0.000    0.000    0.000 exceptions.py:24(NonPositiveDefiniteMatrixError)
        1    0.000    0.000    0.000    0.000 __init__.py:73(_96Bit)
        1    0.000    0.000    0.000    0.000 __init__.py:294(EOFHeaderError)
        1    0.000    0.000    0.000    0.000 polyerrors.py:78(IsomorphismFailed)
        1    0.000    0.000    0.000    0.000 polyerrors.py:147(UnivariatePolynomialError)
        1    0.000    0.000    0.000    0.000 errors.py:87(InvalidHeaderDefect)
        1    0.000    0.000    0.000    0.000 __init__.py:82(_32Bit)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:685(InvalidParameter)
        1    0.000    0.000    0.000    0.000 client.py:1495(ImproperConnectionState)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:512(NoFoldLiteral)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:854(MessageID)
        1    0.000    0.000    0.000    0.000 errors.py:67(UndecodableBytesDefect)
        1    0.000    0.000    0.000    0.000 errors.py:26(DistutilsModuleError)
        1    0.000    0.000    0.000    0.000 error.py:168(YAMLStreamError)
        1    0.000    0.000    0.000    0.000 error.py:228(ReusedAnchorWarning)
        1    0.000    0.000    0.000    0.000 client.py:1504(ResponseNotReady)
        1    0.000    0.000    0.000    0.000 polyerrors.py:74(HomomorphismFailed)
        1    0.000    0.000    0.000    0.000 errors.py:44(StartBoundaryNotFoundDefect)
        1    0.000    0.000    0.000    0.000 std.py:57(TqdmDeprecationWarning)
        1    0.000    0.000    0.000    0.000 __init__.py:194(c_float)
        1    0.000    0.000    0.000    0.000 headerregistry.py:382(UniqueAddressHeader)
        1    0.000    0.000    0.000    0.000 backend_tools.py:424(ToolEnableAllNavigation)
        1    0.000    0.000    0.000    0.000 readers.py:27(files)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:858(InvalidMessageID)
        1    0.000    0.000    0.000    0.000 errors.py:73(InvalidBase64CharactersDefect)
        1    0.000    0.000    0.000    0.000 errors.py:76(InvalidBase64LengthDefect)
        1    0.000    0.000    0.000    0.000 headerregistry.py:397(UniqueSingleAddressHeader)
        1    0.000    0.000    0.000    0.000 client.py:1464(NotConnected)
        1    0.000    0.000    0.000    0.000 expressionrawdomain.py:28(__init__)
        1    0.000    0.000    0.000    0.000 dataframes.py:367(CaptureDataFrame)
        1    0.000    0.000    0.000    0.000 polyerrors.py:132(GeneratorsNeeded)
        1    0.000    0.000    0.000    0.000 __init__.py:85(_16Bit)
        1    0.000    0.000    0.000    0.000 constructor.py:51(DuplicateKeyFutureWarning)
        1    0.000    0.000    0.000    0.000 enum.py:1163(_missing_)
        1    0.000    0.000    0.000    0.000 _functools.py:83(<lambda>)
        1    0.000    0.000    0.000    0.000 client.py:1467(InvalidURL)
        1    0.000    0.000    0.000    0.000 expressiondomain.py:163(__init__)
        1    0.000    0.000    0.000    0.000 polyerrors.py:181(FlagError)
        1    0.000    0.000    0.000    0.000 mathtext.py:1370(MathTextWarning)
        1    0.000    0.000    0.000    0.000 gaussiandomains.py:647(__init__)
        1    0.000    0.000    0.000    0.000 polyerrors.py:118(UnificationFailed)
        1    0.000    0.000    0.000    0.000 polyerrors.py:94(CoercionFailed)
        1    0.000    0.000    0.000    0.000 polyerrors.py:151(MultivariatePolynomialError)
        1    0.000    0.000    0.000    0.000 mathtext.py:1329(DejaVuSansFontConstants)
        1    0.000    0.000    0.000    0.000 client.py:1475(UnknownTransferEncoding)
        1    0.000    0.000    0.000    0.000 polyerrors.py:177(OptionError)
        1    0.000    0.000    0.000    0.000 client.py:1478(UnimplementedFileMode)
        1    0.000    0.000    0.000    0.000 constructor.py:58(DuplicateKeyError)
        1    0.000    0.000    0.000    0.000 fromnumeric.py:584(_transpose_dispatcher)
        1    0.000    0.000    0.000    0.000 six.py:239(exec_module)
        1    0.000    0.000    0.000    0.000 gaussiandomains.py:442(__init__)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:96(_mode_formula)


