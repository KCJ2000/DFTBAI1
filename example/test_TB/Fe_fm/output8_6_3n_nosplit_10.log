band_index: [5, 6, 7, 8, 9]
model_index [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
mask: []
neighbour_list [3]
0 特征值优化 tensor(28.1791, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990]],
       device='cuda:0') 0
1000 特征值优化 tensor(1.7391, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0419, -0.0127,  0.0763,  0.0234, -0.0397, -0.0177, -0.0027, -0.0820,
         -0.0118, -0.0098, -0.0082, -0.0176,  0.0401,  0.1647,  0.1848,  0.1223,
          0.1662,  0.1798,  0.1345,  0.1190,  0.1337,  0.0772,  0.2380,  0.2929,
          0.2149,  0.1489,  0.3142,  0.2035,  0.0855,  0.2036,  0.1075,  0.1659,
          0.1718,  0.1127,  0.1353,  0.1204,  0.0313,  0.1298,  0.1040,  0.2634,
          0.0287,  0.1050,  0.0236,  0.1068,  0.1068,  0.0890,  0.0841,  0.0363,
          0.0577,  0.0577,  0.0858,  0.0643, -0.0208,  0.0921,  0.4303,  0.4302,
         -0.0142,  0.0976,  0.3355,  0.3355,  0.0329,  0.1153,  0.0821,  0.1260,
         -0.0426,  0.0026,  0.0453,  0.0576,  0.0401,  0.1246, -0.0375,  0.0090]],
       device='cuda:0') tensor(0.4464, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
2000 特征值优化 tensor(0.7284, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1735, -0.6065,  0.2613, -0.5084, -0.3801, -0.2812, -0.1804, -0.6610,
         -0.0949, -0.3633, -0.0924,  0.1108, -0.0255,  0.0826,  0.0015,  0.0760,
          0.2170,  0.0807,  0.1610,  0.0705,  0.1601,  0.0357, -0.0652, -0.0623,
          0.1497,  0.2552,  0.0857,  0.2812, -0.0177,  0.2353,  0.0550,  0.1087,
          0.1442,  0.0695,  0.1525,  0.0009,  0.0362,  0.0860,  0.0555,  0.3279,
         -0.0763,  0.0432, -0.0616,  0.1263,  0.1599,  0.2829,  0.0170, -0.1481,
          0.0702,  0.0701,  0.0581,  0.0326, -0.1816,  0.1406,  0.0584,  0.5163,
         -0.0893,  0.0978,  0.1618,  0.3795, -0.1978,  0.0598,  0.2372,  0.2203,
         -0.2809, -0.0024, -0.0234,  0.1021,  0.1488,  0.2444, -0.1858, -0.0094]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
3000 特征值优化 tensor(0.6685, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.5639e-01, -6.8695e-01,  2.0381e-01, -5.3955e-01, -5.2895e-01,
         -1.9991e-01, -1.0345e-01, -7.8964e-01, -2.1110e-01, -4.1054e-01,
         -1.2198e-01,  2.9698e-01, -1.4869e-02,  5.9342e-02, -1.0922e-02,
          1.1650e-01,  1.5780e-01,  6.2090e-02,  1.1318e-01,  5.5170e-02,
          1.6291e-01,  3.9082e-02, -6.7342e-02, -1.1717e-01,  1.6709e-01,
          2.3117e-01,  3.5227e-02,  2.2001e-01,  1.0441e-04,  2.3081e-01,
          2.9851e-02,  9.1081e-02,  1.4044e-01,  6.7615e-02,  1.2208e-01,
         -3.1200e-03,  5.4994e-02,  1.0225e-01,  3.5186e-02,  3.2218e-01,
         -9.7155e-02,  6.3792e-02, -6.5436e-02, -1.6624e-01,  4.4078e-01,
          3.7357e-01, -1.9884e-02, -1.5541e-01,  8.0431e-02,  7.6945e-02,
          1.0755e-01,  1.0806e-02, -1.4525e-01,  1.6756e-01,  1.4244e-01,
          4.7053e-01, -1.4860e-01,  1.0344e-01,  1.3313e-01,  3.9340e-01,
         -2.4441e-01,  1.2971e-01,  2.6437e-01,  1.9969e-01, -3.5658e-01,
         -2.1814e-02, -4.2255e-02,  1.0865e-01,  2.4412e-01,  1.5129e-01,
         -1.2808e-01, -3.2012e-03]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
4000 特征值优化 tensor(0.6065, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1574, -0.6641,  0.2264, -0.5591, -0.5722, -0.2851,  0.0343, -0.7974,
         -0.5415, -0.5740, -0.2875,  0.7840, -0.0200,  0.0971, -0.0469,  0.1121,
          0.1484,  0.1039,  0.1392,  0.0516,  0.1652,  0.0444, -0.1651, -0.0268,
          0.1960,  0.1870,  0.0493,  0.1884, -0.0068,  0.2266,  0.0441,  0.0208,
          0.1558,  0.0655,  0.0594, -0.0484,  0.0948,  0.0922, -0.0171,  0.2764,
         -0.1576,  0.1101, -0.0744, -0.1711,  0.4358,  0.3640, -0.0125, -0.1466,
          0.2702, -0.1016,  0.1280,  0.0027, -0.1927,  0.1811,  0.0854,  0.4643,
         -0.1009,  0.0957,  0.1212,  0.3830, -0.2947,  0.2399,  0.3643,  0.1403,
         -0.4435, -0.0438, -0.0711,  0.0938,  0.3150,  0.0578, -0.0699, -0.0237]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
5000 特征值优化 tensor(0.5119, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1563, -0.7013,  0.1975, -0.5766, -0.5769, -0.2232,  0.1050, -0.7898,
         -0.9632, -0.8226, -0.3104,  1.1877, -0.0262,  0.0357,  0.0526,  0.1951,
          0.1657, -0.0827,  0.0371,  0.0453,  0.1691,  0.0561, -0.2030,  0.0399,
          0.1624,  0.0604,  0.0406,  0.0714, -0.0043,  0.2178,  0.0408,  0.0346,
          0.1223,  0.0651,  0.0435, -0.0919,  0.0988,  0.0480, -0.0335,  0.1826,
         -0.1685,  0.1287, -0.0878, -0.1594,  0.4114,  0.4065, -0.0184, -0.1697,
          0.4642, -0.2985,  0.1449,  0.0120, -0.1384,  0.1738, -0.0156,  0.1981,
         -0.1204,  0.0884,  0.2216,  0.3430, -0.3611,  0.2561,  0.4976,  0.0815,
         -0.3283, -0.0989, -0.1152,  0.0249,  0.4449,  0.0263, -0.2071,  0.0748]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
6000 特征值优化 tensor(0.5229, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.3796e-01, -6.7302e-01,  1.9077e-01, -5.7570e-01, -5.5752e-01,
         -1.2435e-01,  8.5141e-02, -8.7663e-01, -1.0909e+00, -8.2951e-01,
         -3.2029e-01,  1.2137e+00, -2.8731e-02,  7.1554e-02,  1.0317e-02,
          5.1157e-02,  1.1380e-01,  6.3519e-02,  2.9127e-02,  4.2210e-02,
          1.7177e-01,  5.2539e-02, -2.3323e-01,  6.6148e-02,  1.3646e-01,
         -1.0584e-02,  7.3811e-02,  3.8484e-02, -1.1379e-02,  2.2165e-01,
          4.5256e-02,  1.0364e-02,  6.7154e-02,  6.0207e-02,  7.4160e-02,
         -4.6036e-02,  1.1074e-01,  5.2708e-02, -4.5888e-02,  1.6328e-01,
         -1.6149e-01,  1.4218e-01, -8.8893e-02, -1.4844e-01,  4.0654e-01,
          4.1462e-01, -2.3760e-02, -1.7204e-01,  4.5795e-01, -3.0605e-01,
          1.6649e-01,  4.5110e-03, -1.7606e-01,  1.9962e-01, -7.5168e-03,
          1.6979e-01, -1.7394e-01,  8.0033e-02,  2.0194e-01,  3.4382e-01,
         -3.4549e-01,  2.6747e-01,  4.6826e-01,  9.1782e-02, -2.1163e-01,
         -1.0856e-01, -1.7532e-01,  2.1007e-03,  5.1451e-01,  4.4758e-04,
         -2.7398e-01,  8.4332e-02]], device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
7000 特征值优化 tensor(0.5074, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1205, -0.6657,  0.1892, -0.5434, -0.5536, -0.1931,  0.1457, -0.9047,
         -1.1162, -0.9046, -0.3226,  1.3114, -0.0282,  0.0865,  0.0144,  0.1021,
          0.1018, -0.0153, -0.0068,  0.0472,  0.1714,  0.0534, -0.2241,  0.0505,
          0.1316,  0.0459,  0.0962,  0.1217, -0.0191,  0.2225,  0.0391,  0.0042,
          0.0780,  0.0631,  0.0225, -0.1132,  0.1193,  0.0393, -0.0241,  0.1574,
         -0.1667,  0.1178, -0.0780, -0.1528,  0.4036,  0.4005, -0.0194, -0.1747,
          0.4568, -0.2993,  0.1478,  0.0087, -0.1634,  0.1956, -0.0264,  0.1894,
         -0.1429,  0.0834,  0.2142,  0.3261, -0.3703,  0.2730,  0.5020,  0.0747,
         -0.2485, -0.1275, -0.1417,  0.0247,  0.5050, -0.0049, -0.2675,  0.1061]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
8000 特征值优化 tensor(0.5053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2683e-01, -6.7382e-01,  1.9450e-01, -5.5270e-01, -5.5380e-01,
         -2.0040e-01,  1.4286e-01, -9.1547e-01, -1.0951e+00, -8.7399e-01,
         -3.4193e-01,  1.2863e+00, -2.8351e-02,  7.2871e-02,  1.8801e-02,
          1.0145e-01,  1.2689e-01, -2.5786e-02,  9.4930e-04,  4.6991e-02,
          1.7115e-01,  5.3648e-02, -2.2859e-01,  4.9183e-02,  1.3153e-01,
          4.1257e-02,  8.7140e-02,  1.0983e-01, -1.4194e-02,  2.2220e-01,
          6.0880e-02,  8.9863e-03,  8.0412e-02,  5.3051e-02,  3.2696e-02,
         -9.7569e-02,  1.1432e-01,  3.8327e-02, -3.7339e-02,  1.6194e-01,
         -1.6834e-01,  1.3208e-01, -8.1526e-02, -1.5306e-01,  4.0303e-01,
          4.0461e-01, -1.9521e-02, -1.7742e-01,  4.5668e-01, -2.9779e-01,
          1.5237e-01,  8.1937e-03, -1.6916e-01,  2.1082e-01, -8.1671e-02,
          1.9571e-01, -1.6110e-01,  7.8947e-02,  2.1129e-01,  3.3857e-01,
         -3.4293e-01,  2.7169e-01,  5.0197e-01,  7.2959e-02, -2.3624e-01,
         -1.0998e-01, -1.5530e-01,  1.7425e-02,  5.0967e-01, -5.5463e-03,
         -2.7948e-01,  9.0004e-02]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
9000 特征值优化 tensor(0.5076, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2896e-01, -6.7506e-01,  1.9817e-01, -5.8102e-01, -5.3221e-01,
         -2.2321e-01,  1.2763e-01, -9.2912e-01, -1.0824e+00, -8.7436e-01,
         -3.5809e-01,  1.2613e+00, -2.8618e-02,  7.8655e-02,  3.0269e-02,
          5.4580e-02,  9.5168e-02,  3.8677e-02, -2.2542e-02,  4.7055e-02,
          1.7070e-01,  5.4632e-02, -2.3658e-01,  5.2985e-02,  1.2227e-01,
         -9.7793e-03,  1.0022e-01,  5.2900e-02, -1.7632e-02,  2.2135e-01,
          4.8385e-02, -1.0409e-02,  7.4359e-02,  5.4157e-02,  6.4089e-02,
         -3.7825e-02,  1.2056e-01,  3.8472e-02, -4.6525e-02,  1.6425e-01,
         -1.7137e-01,  1.4327e-01, -8.2132e-02, -1.5247e-01,  4.0347e-01,
          4.0517e-01, -1.9501e-02, -1.7802e-01,  4.5934e-01, -2.9512e-01,
          1.6449e-01,  4.8684e-03, -1.5603e-01,  2.0761e-01, -9.5271e-04,
          2.0453e-01, -1.7596e-01,  9.5971e-02,  2.0926e-01,  3.2934e-01,
         -3.5664e-01,  2.7434e-01,  4.8550e-01,  7.7819e-02, -2.0107e-01,
         -1.1618e-01, -1.9409e-01,  2.7018e-02,  5.1238e-01, -7.5824e-03,
         -2.6764e-01,  7.0675e-02]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
10000 特征值优化 tensor(0.5053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1206, -0.6664,  0.2019, -0.5848, -0.5265, -0.2140,  0.1166, -0.9247,
         -1.0856, -0.8895, -0.3475,  1.2656, -0.0286, -0.0475,  0.1187,  0.1084,
          0.0226, -0.0232, -0.1114,  0.0480,  0.1712,  0.0543, -0.2359,  0.0480,
          0.1259, -0.0100,  0.1039,  0.0529, -0.0176,  0.2217,  0.0448, -0.0216,
          0.0768,  0.0537,  0.0643, -0.0228,  0.1227,  0.0401, -0.0450,  0.1605,
         -0.1687,  0.1410, -0.0793, -0.1506,  0.4038,  0.4025, -0.0197, -0.1802,
          0.4592, -0.2951,  0.1668,  0.0052, -0.1667,  0.2049, -0.0029,  0.1956,
         -0.1826,  0.0956,  0.2094,  0.3232, -0.3529,  0.2694,  0.4724,  0.0826,
         -0.2064, -0.1139, -0.2010,  0.0338,  0.5130, -0.0034, -0.2588,  0.0714]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
11000 特征值优化 tensor(0.5092, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1092, -0.6560,  0.2111, -0.5611, -0.4928, -0.2124,  0.0986, -0.9075,
         -1.0514, -0.8601, -0.3218,  1.2640, -0.0287,  0.0026,  0.0736,  0.1140,
          0.0842, -0.0448, -0.0525,  0.0476,  0.1715,  0.0531, -0.2321,  0.0454,
          0.1458,  0.0357,  0.0748,  0.0820, -0.0167,  0.2219,  0.0532, -0.0181,
          0.0554,  0.0536,  0.0397, -0.0694,  0.1180,  0.0528, -0.0498,  0.1634,
         -0.1626,  0.1445, -0.0751, -0.1507,  0.4032,  0.4026, -0.0232, -0.1850,
          0.4602, -0.2977,  0.1576,  0.0063, -0.1726,  0.2164, -0.0327,  0.1933,
         -0.1565,  0.0799,  0.2045,  0.3365, -0.3521,  0.2637,  0.4538,  0.0892,
         -0.2313, -0.0991, -0.1924,  0.0222,  0.5207, -0.0042, -0.2843,  0.0754]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
12000 特征值优化 tensor(0.5054, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1182, -0.6616,  0.2128, -0.5730, -0.4977, -0.2151,  0.1062, -0.9263,
         -1.0437, -0.8709, -0.3431,  1.2651, -0.0289, -0.0063,  0.0796,  0.1290,
          0.1230, -0.0782, -0.0163,  0.0463,  0.1716,  0.0543, -0.2088,  0.0364,
          0.1579,  0.0684,  0.0603,  0.0997, -0.0157,  0.2200,  0.0549, -0.0285,
          0.0564,  0.0537,  0.0250, -0.1033,  0.1220,  0.0432, -0.0411,  0.1687,
         -0.1722,  0.1361, -0.0787, -0.1521,  0.4032,  0.4089, -0.0242, -0.1831,
          0.4616, -0.2970,  0.1613,  0.0062, -0.1631,  0.2103,  0.0038,  0.2058,
         -0.1640,  0.0868,  0.2149,  0.3351, -0.3486,  0.2724,  0.4592,  0.0864,
         -0.2590, -0.1040, -0.1537,  0.0235,  0.5209, -0.0124, -0.2537,  0.0753]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
13000 特征值优化 tensor(0.5098, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1125, -0.6573,  0.2075, -0.5584, -0.5017, -0.2033,  0.1142, -0.9320,
         -1.0604, -0.8696, -0.3221,  1.2671, -0.0285,  0.0039,  0.0782,  0.1064,
          0.0941, -0.0393, -0.0422,  0.0474,  0.1716,  0.0529, -0.2313,  0.0428,
          0.1268,  0.0287,  0.0852,  0.0745, -0.0173,  0.2216,  0.0565, -0.0112,
          0.0549,  0.0534,  0.0466, -0.0618,  0.1155,  0.0567, -0.0474,  0.1610,
         -0.1636,  0.1430, -0.0766, -0.1502,  0.4033,  0.4031, -0.0225, -0.1835,
          0.4603, -0.2974,  0.1570,  0.0071, -0.1715,  0.2122, -0.0377,  0.1932,
         -0.1499,  0.0731,  0.2019,  0.3397, -0.3535,  0.2667,  0.4674,  0.0793,
         -0.2340, -0.1005, -0.1825,  0.0148,  0.5228, -0.0075, -0.2945,  0.0826]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
14000 特征值优化 tensor(0.5062, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1175, -0.6606,  0.2067, -0.5651, -0.5047, -0.2173,  0.1106, -0.8976,
         -1.0421, -0.8706, -0.3420,  1.2590, -0.0286,  0.0082,  0.0716,  0.1296,
          0.1398, -0.0690,  0.0021,  0.0478,  0.1717,  0.0551, -0.2211,  0.0384,
          0.1346,  0.0579,  0.0762,  0.1122, -0.0165,  0.2207,  0.0534, -0.0060,
          0.0784,  0.0550,  0.0183, -0.1113,  0.1232,  0.0428, -0.0452,  0.1679,
         -0.1715,  0.1394, -0.0791, -0.1517,  0.4047,  0.3985, -0.0192, -0.1808,
          0.4598, -0.2975,  0.1561,  0.0059, -0.1588,  0.2069, -0.0095,  0.2003,
         -0.1572,  0.0826,  0.2107,  0.3396, -0.3548,  0.2669,  0.4670,  0.0830,
         -0.2597, -0.0995, -0.1566,  0.0214,  0.5042, -0.0022, -0.2597,  0.0751]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
15000 特征值优化 tensor(0.5074, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1141, -0.6589,  0.2075, -0.5636, -0.4857, -0.2171,  0.1115, -0.8667,
         -1.0425, -0.8779, -0.3285,  1.2546, -0.0287, -0.0084,  0.0870,  0.1310,
          0.1242, -0.0385,  0.0173,  0.0478,  0.1719,  0.0541, -0.2089,  0.0485,
          0.1688,  0.0541,  0.0679,  0.1091, -0.0165,  0.2213,  0.0519, -0.0262,
          0.0372,  0.0550,  0.0277, -0.0976,  0.1205,  0.0287, -0.0433,  0.1702,
         -0.1687,  0.1384, -0.0774, -0.1507,  0.4032,  0.4031, -0.0222, -0.1841,
          0.4609, -0.2983,  0.1579,  0.0057, -0.2003,  0.2314, -0.0111,  0.2031,
         -0.1505,  0.0785,  0.2098,  0.3394, -0.3390,  0.2678,  0.4555,  0.1006,
         -0.2667, -0.0978, -0.1468,  0.0218,  0.5396, -0.0266, -0.2516,  0.0737]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
16000 特征值优化 tensor(0.5025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1330, -0.6817,  0.2027, -0.5812, -0.5240, -0.2419,  0.1443, -0.9196,
         -1.0740, -0.9055, -0.3673,  1.2560, -0.0284,  0.0021,  0.0863,  0.1267,
          0.0392, -0.0526, -0.0933,  0.0473,  0.1711,  0.0536, -0.2423,  0.0564,
          0.1246, -0.0058,  0.0955,  0.0448, -0.0186,  0.2223,  0.0609, -0.0019,
          0.0681,  0.0533,  0.0625, -0.0275,  0.1157,  0.0366, -0.0445,  0.1576,
         -0.1690,  0.1414, -0.0846, -0.1532,  0.4028,  0.4085, -0.0196, -0.1817,
          0.4601, -0.2956,  0.1658,  0.0047, -0.2059,  0.2259, -0.1148,  0.1901,
         -0.1771,  0.1000,  0.2083,  0.3231, -0.3128,  0.2570,  0.4931,  0.0771,
         -0.1948, -0.1236, -0.2063,  0.0340,  0.5309, -0.0083, -0.2600,  0.0734]],
       device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
17000 特征值优化 tensor(0.5074, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1203, -0.6648,  0.2000, -0.5546, -0.4900, -0.2236,  0.1260, -0.9266,
         -1.0502, -0.8871, -0.3431,  1.2572, -0.0284,  0.0041,  0.0881,  0.1179,
          0.1034, -0.0075,  0.0097,  0.0480,  0.1717,  0.0535, -0.2214,  0.0472,
          0.1522,  0.0388,  0.0771,  0.0976, -0.0161,  0.2209,  0.0541, -0.0067,
          0.0499,  0.0530,  0.0310, -0.0857,  0.1236,  0.0348, -0.0446,  0.1629,
         -0.1708,  0.1390, -0.0809, -0.1505,  0.4035,  0.4048, -0.0218, -0.1787,
          0.4601, -0.2992,  0.1536,  0.0071, -0.1680,  0.2122, -0.0076,  0.2022,
         -0.1429,  0.0739,  0.2069,  0.3364, -0.3630,  0.2756,  0.4830,  0.0792,
         -0.2483, -0.1010, -0.1661,  0.0209,  0.5290, -0.0129, -0.2731,  0.0815]],
       device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
18000 特征值优化 tensor(0.5066, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1194, -0.6617,  0.2084, -0.5795, -0.5010, -0.2172,  0.1251, -0.9145,
         -1.0241, -0.8811, -0.3544,  1.2442, -0.0288, -0.0136,  0.0835,  0.1332,
          0.1651, -0.0676,  0.0394,  0.0474,  0.1719,  0.0550, -0.2025,  0.0435,
          0.1708,  0.0739,  0.0548,  0.0977, -0.0160,  0.2203,  0.0528, -0.0127,
          0.0794,  0.0550,  0.0300, -0.1035,  0.1212,  0.0444, -0.0435,  0.1725,
         -0.1739,  0.1382, -0.0795, -0.1529,  0.4043,  0.4003, -0.0199, -0.1824,
          0.4625, -0.2976,  0.1633,  0.0050, -0.1589,  0.2064,  0.0014,  0.2159,
         -0.1522,  0.0809,  0.2130,  0.3430, -0.3548,  0.2717,  0.4592,  0.0812,
         -0.2752, -0.0980, -0.1280,  0.0179,  0.4996, -0.0035, -0.2506,  0.0748]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
19000 特征值优化 tensor(0.5077, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1131, -0.6583,  0.2080, -0.5608, -0.5148, -0.2220,  0.1420, -0.8782,
         -1.0342, -0.8843, -0.3250,  1.2428, -0.0284, -0.0071,  0.0772,  0.1379,
          0.1130, -0.0343,  0.0168,  0.0476,  0.1713,  0.0539, -0.2129,  0.0469,
          0.1672,  0.0595,  0.0604,  0.1039, -0.0173,  0.2213,  0.0595, -0.0367,
          0.0323,  0.0551,  0.0338, -0.0978,  0.1147,  0.0312, -0.0456,  0.1675,
         -0.1690,  0.1417, -0.0771, -0.1507,  0.4031,  0.4035, -0.0223, -0.1833,
          0.4609, -0.2973,  0.1567,  0.0065, -0.1849,  0.2157, -0.0032,  0.2121,
         -0.1506,  0.0783,  0.2096,  0.3401, -0.3412,  0.2730,  0.4569,  0.0992,
         -0.2564, -0.0989, -0.1476,  0.0153,  0.5340, -0.0237, -0.2586,  0.0738]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
20000 特征值优化 tensor(0.5050, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2184e-01, -6.7056e-01,  1.9955e-01, -5.8213e-01, -4.9439e-01,
         -2.2866e-01,  1.1496e-01, -9.2927e-01, -1.0551e+00, -9.0679e-01,
         -3.6421e-01,  1.2355e+00, -2.8252e-02,  2.3401e-03,  7.7895e-02,
          1.0323e-01,  5.3566e-02, -2.8134e-02, -8.0839e-02,  4.7783e-02,
          1.7101e-01,  5.4113e-02, -2.3285e-01,  5.4988e-02,  1.3133e-01,
         -6.3574e-03,  9.3281e-02,  5.5254e-02, -1.7625e-02,  2.2178e-01,
          5.0666e-02,  7.7785e-05,  6.9415e-02,  5.3546e-02,  6.0862e-02,
         -3.3892e-02,  1.2256e-01,  5.4950e-02, -4.8002e-02,  1.6090e-01,
         -1.6776e-01,  1.4492e-01, -7.9510e-02, -1.5278e-01,  4.0248e-01,
          4.0289e-01, -1.9844e-02, -1.7901e-01,  4.5979e-01, -2.9605e-01,
          1.6532e-01,  5.4216e-03, -1.8826e-01,  2.2599e-01, -3.7289e-02,
          1.8463e-01, -1.7046e-01,  9.3100e-02,  2.0500e-01,  3.2875e-01,
         -3.5502e-01,  2.5535e-01,  4.8697e-01,  7.5972e-02, -2.0481e-01,
         -1.1561e-01, -1.9588e-01,  3.0699e-02,  5.4073e-01, -3.7270e-03,
         -2.6539e-01,  7.3010e-02]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
21000 特征值优化 tensor(0.5087, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1131, -0.6578,  0.2098, -0.5618, -0.5195, -0.2202,  0.1331, -0.9201,
         -1.0167, -0.8778, -0.3215,  1.2341, -0.0286,  0.0013,  0.0761,  0.1207,
          0.1234, -0.0552, -0.0052,  0.0467,  0.1718,  0.0531, -0.2243,  0.0450,
          0.1512,  0.0478,  0.0647,  0.0813, -0.0171,  0.2207,  0.0604, -0.0291,
          0.0430,  0.0552,  0.0460, -0.0766,  0.1147,  0.0488, -0.0523,  0.1670,
         -0.1660,  0.1480, -0.0760, -0.1523,  0.4034,  0.4047, -0.0237, -0.1835,
          0.4635, -0.2998,  0.1585,  0.0059, -0.1659,  0.2062, -0.0245,  0.1998,
         -0.1384,  0.0735,  0.1993,  0.3484, -0.3584,  0.2756,  0.4535,  0.0868,
         -0.2427, -0.0981, -0.1625,  0.0122,  0.5263, -0.0124, -0.2912,  0.0791]],
       device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
22000 特征值优化 tensor(23.4484, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.7411,  0.1204,  0.9885, -2.2280,  0.9156, -1.1330,  1.7034,  0.0794,
          0.1206, -0.7473, -1.6574,  0.3755, -2.3060, -0.5152, -0.4235,  0.7286,
         -0.8514, -2.5278,  0.3198,  0.1275, -0.9382, -0.7633, -0.6562, -0.2812,
          1.0499,  0.4133, -0.1080, -0.0435, -0.6194, -0.5598, -0.8719, -0.7634,
          1.2560,  0.4753,  1.4366,  0.6722,  0.2764,  0.0078, -1.3824,  0.5535,
         -0.7407,  0.3598,  1.3604,  0.4977,  0.5966, -1.0731, -1.1981,  0.2209,
         -0.8848, -0.9294,  0.2008,  0.4788,  0.2496, -1.5793, -0.5612,  0.5010,
         -0.3310,  0.6238,  0.5016,  0.3853,  0.7495, -0.0212,  0.9595,  0.8371,
          0.9502, -0.0564, -1.0809, -0.0726,  1.9989, -0.6388,  0.0881, -0.7093]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
23000 特征值优化 tensor(7.9863, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.1637e-02,  5.6919e-01,  8.0370e-02, -1.3156e+00,  1.7410e-01,
         -3.1414e-01,  7.3946e-01, -1.8766e-01, -4.0445e-01, -1.8719e-01,
         -1.5662e+00, -3.2697e-01, -1.2282e+00,  9.9477e-02,  5.1191e-02,
          3.7197e-02, -1.1377e-01, -1.3694e+00, -4.5686e-02,  9.0815e-02,
         -1.8323e-01,  4.8455e-02, -3.6557e-02, -6.7890e-02,  1.7061e-01,
          2.9194e-02, -6.6852e-02, -3.1592e-02, -1.9696e-02, -8.4888e-02,
         -2.0537e-01, -7.9201e-02,  3.8053e-01,  2.7772e-01,  5.5644e-01,
          8.5669e-02,  3.8156e-02, -4.1056e-02, -6.3185e-01,  7.7257e-02,
          6.5427e-02,  2.8526e-01,  4.9558e-01, -1.8005e-01, -7.9326e-02,
         -2.7435e-01, -3.8512e-01, -2.2382e-01,  4.3068e-02,  4.3819e-03,
          5.2254e-01, -1.1028e-01, -3.2357e-01, -6.3298e-01, -2.2656e-01,
         -6.0646e-02, -4.1638e-01,  2.6833e-01,  1.5829e-01,  1.9368e-01,
         -1.0827e-01,  3.6694e-01,  3.0420e-01, -4.7588e-05,  4.0315e-01,
         -6.0735e-02, -5.0338e-01,  1.4583e-01,  1.0344e+00, -1.4804e-01,
         -3.1023e-01,  1.3076e-02]], device='cuda:0') tensor(0.2085, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
24000 特征值优化 tensor(0.7247, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1009,  0.4261,  0.2168, -0.7513,  0.2861, -0.2246,  0.3641, -0.5072,
         -0.1998,  0.1108, -0.6479, -0.1507, -0.2578, -0.0506,  0.0946, -0.0150,
         -0.1653, -0.4040, -0.0206,  0.0649, -0.0449,  0.0982,  0.0106,  0.0285,
          0.1787,  0.1361,  0.1436,  0.0962, -0.0077, -0.0402,  0.0009, -0.0974,
          0.1347,  0.2744,  0.1128, -0.0264,  0.0215, -0.1435, -0.1587, -0.0106,
          0.0850,  0.2841,  0.1022, -0.0587,  0.0415, -0.1847, -0.1067, -0.2614,
          0.1760,  0.0555,  0.2045,  0.0059, -0.2856, -0.1551, -0.3586, -0.2070,
         -0.2282,  0.1580,  0.4444,  0.2699, -0.1010,  0.3022,  0.1568,  0.0797,
          0.0452,  0.1354, -0.2660, -0.0698,  0.4987,  0.1383, -0.7102,  0.1151]],
       device='cuda:0') tensor(0.2067, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
25000 特征值优化 tensor(0.6479, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0029,  0.4747,  0.1669, -0.6549,  0.4786, -0.3538,  0.1959, -0.2172,
          0.2119,  0.0584, -0.5879, -0.2905, -0.2415, -0.0789,  0.0487, -0.0168,
         -0.1025, -0.2523, -0.0888,  0.0841, -0.0531,  0.1050,  0.0383,  0.0203,
          0.2136,  0.1733,  0.0948,  0.1871,  0.0130, -0.0436, -0.0143, -0.1563,
          0.1025,  0.2714,  0.0977, -0.0195, -0.0463, -0.0862, -0.1061, -0.0491,
          0.1382,  0.2355,  0.0559, -0.0318,  0.0390, -0.3000, -0.0827, -0.2400,
          0.1831,  0.0495,  0.1154,  0.0345, -0.4845, -0.0654, -0.3245, -0.0994,
         -0.1860,  0.1654,  0.4348,  0.1980, -0.0710,  0.1793,  0.2554,  0.0791,
         -0.0223,  0.1745, -0.2739, -0.0839,  0.6471,  0.1722, -0.7341,  0.0791]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
26000 特征值优化 tensor(0.6434, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0232,  0.4623,  0.1681, -0.6516,  0.4862, -0.3750,  0.2455, -0.2545,
          0.2557,  0.1033, -0.6536, -0.3129, -0.2393, -0.0843,  0.0598, -0.0143,
         -0.0862, -0.2337, -0.0905,  0.0838, -0.0496,  0.1052,  0.0232,  0.0563,
          0.2091,  0.1887,  0.0896,  0.1809,  0.0492, -0.0413, -0.0149, -0.1551,
          0.1050,  0.2683,  0.1000, -0.0190, -0.0636, -0.0851, -0.1065, -0.0599,
          0.1527,  0.2430,  0.0640, -0.0336,  0.0287, -0.3092, -0.0786, -0.2323,
          0.1414,  0.0967,  0.0453,  0.0670, -0.5001, -0.0580, -0.3019, -0.1011,
         -0.1834,  0.1607,  0.4592,  0.1861, -0.0485,  0.1880,  0.2646,  0.0695,
         -0.0382,  0.1837, -0.2825, -0.0696,  0.6484,  0.1562, -0.7265,  0.0721]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
27000 特征值优化 tensor(0.6433, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0224,  0.4633,  0.1700, -0.6532,  0.4855, -0.3717,  0.2856, -0.2816,
          0.2631,  0.1488, -0.6948, -0.3239, -0.2395, -0.0877,  0.0616, -0.0115,
         -0.0811, -0.2282, -0.0988,  0.0832, -0.0501,  0.1060,  0.0248,  0.0523,
          0.2030,  0.1860,  0.0896,  0.1813,  0.0533, -0.0419, -0.0149, -0.1534,
          0.1062,  0.2681,  0.1009, -0.0188, -0.0719, -0.0861, -0.1097, -0.0682,
          0.1619,  0.2472,  0.0641, -0.0356,  0.0314, -0.3066, -0.0797, -0.2325,
          0.1393,  0.1006,  0.0395,  0.0694, -0.4994, -0.0585, -0.3048, -0.0869,
         -0.1895,  0.1638,  0.4617,  0.1896, -0.0501,  0.2009,  0.2639,  0.0636,
         -0.0448,  0.1844, -0.2947, -0.0561,  0.6500,  0.1433, -0.7146,  0.0683]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
28000 特征值优化 tensor(0.6433, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0208,  0.4635,  0.1718, -0.6541,  0.4850, -0.3687,  0.3136, -0.3037,
          0.2691,  0.1783, -0.7224, -0.3301, -0.2395, -0.0893,  0.0637, -0.0116,
         -0.0773, -0.2230, -0.1059,  0.0824, -0.0502,  0.1065,  0.0260,  0.0504,
          0.1997,  0.1839,  0.0915,  0.1817,  0.0540, -0.0424, -0.0149, -0.1519,
          0.1067,  0.2687,  0.1011, -0.0185, -0.0772, -0.0884, -0.1122, -0.0732,
          0.1668,  0.2487,  0.0640, -0.0373,  0.0347, -0.3020, -0.0821, -0.2327,
          0.1379,  0.1028,  0.0381,  0.0695, -0.4970, -0.0596, -0.3069, -0.0800,
         -0.1924,  0.1653,  0.4628,  0.1949, -0.0545,  0.2113,  0.2650,  0.0594,
         -0.0495,  0.1847, -0.3030, -0.0472,  0.6538,  0.1344, -0.7091,  0.0671]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
29000 特征值优化 tensor(0.6433, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0205,  0.4642,  0.1728, -0.6558,  0.4853, -0.3662,  0.3247, -0.3137,
          0.2757,  0.2012, -0.7325, -0.3348, -0.2397, -0.0902,  0.0637, -0.0111,
         -0.0752, -0.2205, -0.1094,  0.0817, -0.0507,  0.1066,  0.0251,  0.0475,
          0.1964,  0.1822,  0.0925,  0.1820,  0.0549, -0.0425, -0.0151, -0.1519,
          0.1065,  0.2687,  0.1011, -0.0178, -0.0785, -0.0891, -0.1136, -0.0776,
          0.1686,  0.2498,  0.0636, -0.0376,  0.0350, -0.3021, -0.0820, -0.2328,
          0.1379,  0.1038,  0.0369,  0.0698, -0.4953, -0.0608, -0.3080, -0.0778,
         -0.1937,  0.1658,  0.4648,  0.1986, -0.0586,  0.2159,  0.2645,  0.0576,
         -0.0530,  0.1841, -0.3080, -0.0420,  0.6556,  0.1307, -0.7046,  0.0673]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
30000 特征值优化 tensor(0.6432, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0207,  0.4653,  0.1734, -0.6569,  0.4858, -0.3664,  0.3279, -0.3165,
          0.2769,  0.2146, -0.7357, -0.3359, -0.2399, -0.0902,  0.0641, -0.0114,
         -0.0749, -0.2201, -0.1089,  0.0823, -0.0504,  0.1069,  0.0255,  0.0470,
          0.1966,  0.1795,  0.0938,  0.1827,  0.0544, -0.0428, -0.0146, -0.1516,
          0.1063,  0.2690,  0.1014, -0.0171, -0.0791, -0.0895, -0.1144, -0.0800,
          0.1688,  0.2501,  0.0639, -0.0376,  0.0351, -0.3020, -0.0815, -0.2330,
          0.1378,  0.1037,  0.0375,  0.0696, -0.4939, -0.0611, -0.3085, -0.0773,
         -0.1929,  0.1655,  0.4659,  0.1987, -0.0606,  0.2168,  0.2650,  0.0569,
         -0.0547,  0.1841, -0.3110, -0.0380,  0.6561,  0.1297, -0.7031,  0.0676]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
31000 特征值优化 tensor(0.6433, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0200,  0.4638,  0.1732, -0.6571,  0.4850, -0.3657,  0.3288, -0.3168,
          0.2772,  0.2216, -0.7369, -0.3374, -0.2398, -0.0908,  0.0648, -0.0111,
         -0.0736, -0.2199, -0.1104,  0.0821, -0.0501,  0.1068,  0.0263,  0.0443,
          0.1956,  0.1784,  0.0947,  0.1835,  0.0545, -0.0432, -0.0149, -0.1519,
          0.1061,  0.2691,  0.1014, -0.0171, -0.0791, -0.0894, -0.1153, -0.0809,
          0.1694,  0.2510,  0.0642, -0.0372,  0.0349, -0.3022, -0.0818, -0.2331,
          0.1377,  0.1037,  0.0370,  0.0693, -0.4928, -0.0616, -0.3075, -0.0772,
         -0.1932,  0.1659,  0.4675,  0.2004, -0.0610,  0.2179,  0.2649,  0.0570,
         -0.0562,  0.1837, -0.3118, -0.0366,  0.6570,  0.1297, -0.7020,  0.0679]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
32000 特征值优化 tensor(16.9412, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3274, -0.5095,  0.8074,  0.1463, -0.3408,  1.3588, -1.2986, -0.7742,
         -0.0247,  1.1032,  0.5367,  0.9166,  0.6198,  0.0143,  0.8337,  0.1386,
         -0.0942, -0.8980,  0.3222, -0.5612,  0.8665,  0.2004,  0.9739, -0.1699,
          0.8077, -1.1986,  0.1630, -0.7356, -1.3889,  0.0187,  0.4379,  1.5401,
          0.6165, -0.0068,  0.8895,  0.4359,  0.7427, -1.4845, -0.1131, -0.5296,
          0.3381, -0.0515,  0.1307,  0.3647,  0.5664, -0.2270,  0.6242, -0.5068,
         -0.0950,  0.8869, -1.7734,  0.6712,  0.4861,  0.5680,  0.5092,  0.1447,
         -0.0759, -0.5094, -1.0898, -0.9081, -0.1917,  0.1515,  0.2868,  0.6055,
         -0.5651,  0.2938,  1.6153,  0.2117,  0.6627,  1.4612,  1.3249, -1.1836]],
       device='cuda:0') tensor(0.2194, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
33000 特征值优化 tensor(2.2363, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 6.6493e-02, -8.6588e-02,  5.7276e-01,  9.4453e-01,  6.0529e-02,
          3.4884e-01, -9.1253e-01, -2.4072e-02,  2.0166e-01, -6.0593e-02,
         -4.0059e-01, -1.2478e-01,  9.5261e-02, -1.0598e-01,  1.8524e-01,
         -5.3026e-02,  2.4693e-02, -9.4178e-02,  1.1856e-02, -2.7800e-03,
          2.7237e-01,  8.4602e-03,  1.6498e-01, -1.3267e-01,  1.1979e-01,
         -2.0338e-01,  4.5039e-04,  5.6054e-02, -3.1618e-01,  3.5720e-02,
          1.2848e-01,  4.7501e-01, -4.5601e-03, -1.4895e-02,  5.3159e-02,
         -6.5531e-03,  5.0220e-02, -4.9196e-01, -1.0418e-01, -2.3950e-02,
          2.8550e-02, -9.8385e-03, -1.1552e-01,  1.8280e-02,  2.3797e-01,
         -1.2975e-01,  7.2807e-02, -2.2183e-01, -1.7439e-01,  5.8236e-01,
         -8.0045e-01, -1.0787e-02, -2.4860e-02,  8.6523e-02,  4.6385e-02,
         -2.3703e-01, -5.1651e-01, -1.5356e-02, -3.1836e-01, -9.3246e-02,
          7.1123e-02, -1.0308e-01,  8.3955e-02,  1.5911e-02, -2.7108e-01,
          1.7869e-01,  5.1275e-01,  4.9247e-02, -2.5319e-01,  4.5540e-01,
          1.2950e-01, -1.2341e-01]], device='cuda:0') tensor(0.2042, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
34000 特征值优化 tensor(0.6172, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1367, -0.5561,  0.0970,  0.7077,  0.1305,  0.3863, -0.4731,  0.0706,
          0.2554, -0.2620, -0.4699, -0.3650,  0.0522, -0.2200,  0.1410, -0.0518,
          0.0361, -0.0538,  0.0720, -0.0223,  0.2221,  0.0103,  0.1767, -0.1315,
          0.1759, -0.0760,  0.0451,  0.0439, -0.1655,  0.0485,  0.1467,  0.1972,
         -0.0495, -0.0125,  0.0198,  0.0144,  0.0132, -0.3189, -0.1567, -0.0074,
          0.0802,  0.0166, -0.1601, -0.2855,  0.4607,  0.1693,  0.0009,  0.0246,
         -0.0911,  0.4184, -0.6512, -0.0900, -0.1253,  0.1658,  0.0396, -0.5399,
         -0.4390, -0.0680, -0.2249, -0.0926,  0.1201,  0.0340,  0.1449, -0.0550,
         -0.1826,  0.1442,  0.4329,  0.0396, -0.2924,  0.1401,  0.0400,  0.0238]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
35000 特征值优化 tensor(0.6014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1351, -0.5922,  0.1069,  0.6735,  0.1180,  0.3133, -0.3356,  0.0061,
          0.4210, -0.3639, -0.5929, -0.5300,  0.0518, -0.2477,  0.1493,  0.0026,
          0.0693, -0.0567,  0.1046, -0.0130,  0.2221,  0.0113,  0.1609, -0.1907,
          0.1248, -0.0760, -0.0138,  0.0080, -0.1666,  0.0455,  0.1458,  0.1935,
         -0.0584, -0.0096,  0.0384,  0.0027,  0.0102, -0.3140, -0.1410,  0.0264,
          0.0852, -0.0068, -0.1584, -0.2825,  0.4567,  0.1800,  0.0055,  0.0238,
         -0.0882,  0.4113, -0.6235, -0.0993, -0.1129,  0.1607,  0.0148, -0.5282,
         -0.4163, -0.0633, -0.2213, -0.0889,  0.0982,  0.0735,  0.1820, -0.0633,
         -0.2238,  0.2115,  0.4591,  0.0344, -0.3003,  0.1033,  0.0809, -0.0544]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
36000 特征值优化 tensor(0.5948, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.4820e-01, -6.0445e-01,  1.1118e-01,  6.6082e-01,  1.2398e-01,
          3.4690e-01, -2.6982e-01,  3.1907e-02,  5.2602e-01, -4.0941e-01,
         -7.1248e-01, -6.7019e-01,  5.3916e-02, -2.5373e-01,  1.3911e-01,
          2.1429e-02,  6.1303e-02, -8.5795e-03,  9.9307e-02, -5.1194e-02,
          2.2049e-01,  1.2159e-02,  2.0789e-01, -1.2998e-01,  8.5874e-02,
         -8.3105e-02, -9.1974e-03,  3.4150e-02, -1.7127e-01,  4.3515e-02,
          1.4474e-01,  1.9076e-01, -5.4684e-02, -1.3492e-02, -2.7982e-03,
          2.3822e-02,  1.5132e-02, -3.0479e-01, -1.3967e-01,  3.1603e-02,
          7.2351e-02,  8.4964e-03, -1.5967e-01, -2.9155e-01,  4.5487e-01,
          1.8555e-01,  9.8447e-05,  2.0252e-02, -9.4204e-02,  4.2024e-01,
         -5.9830e-01, -1.1220e-01, -1.3301e-01,  1.6828e-01, -1.1404e-02,
         -5.1319e-01, -4.1781e-01, -6.6464e-02, -2.2888e-01, -6.2148e-02,
          1.2790e-01,  8.6769e-02,  1.7331e-01, -6.2380e-02, -2.1131e-01,
          1.5628e-01,  4.6987e-01, -1.9880e-02, -3.0572e-01,  8.1904e-02,
          6.4637e-02,  2.0815e-03]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
37000 特征值优化 tensor(0.5916, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.6485e-01, -6.1088e-01,  1.1199e-01,  6.5723e-01,  1.3235e-01,
          3.3443e-01, -2.3342e-01,  2.5532e-02,  6.1362e-01, -4.3878e-01,
         -7.8007e-01, -6.9914e-01,  5.3696e-02, -2.5462e-01,  1.3302e-01,
          3.0710e-02,  4.2736e-02,  1.4163e-02,  1.0982e-01, -4.2516e-02,
          2.2148e-01,  1.2130e-02,  2.2323e-01, -1.1975e-01,  7.6457e-02,
         -8.4188e-02, -2.4632e-02,  2.0988e-02, -1.6930e-01,  4.3145e-02,
          1.4487e-01,  1.9170e-01, -5.3375e-02, -1.2353e-02, -2.3917e-02,
          3.2644e-02,  1.2522e-02, -2.9980e-01, -1.4362e-01,  4.2975e-02,
          7.0172e-02,  1.6025e-02, -1.6842e-01, -2.8908e-01,  4.5711e-01,
          1.9036e-01, -3.4814e-04,  2.4839e-02, -9.8109e-02,  4.1977e-01,
         -5.8679e-01, -1.1865e-01, -1.3082e-01,  1.6520e-01, -1.7957e-02,
         -5.0871e-01, -3.9130e-01, -8.0076e-02, -2.1976e-01, -5.3291e-02,
          1.2007e-01,  9.6436e-02,  1.7563e-01, -6.0370e-02, -2.6525e-01,
          1.5834e-01,  5.2166e-01, -4.6966e-02, -2.9522e-01,  7.2699e-02,
          6.9266e-02,  2.4281e-02]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
38000 特征值优化 tensor(0.5913, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.6586e-01, -6.1221e-01,  1.1230e-01,  6.5733e-01,  1.3128e-01,
          3.3519e-01, -2.1825e-01,  2.4736e-02,  6.4252e-01, -4.6378e-01,
         -7.9957e-01, -7.3704e-01,  5.3651e-02, -2.5728e-01,  1.3103e-01,
          2.9455e-02,  4.4648e-02,  1.4560e-02,  1.0737e-01, -4.8931e-02,
          2.2178e-01,  1.2371e-02,  2.2401e-01, -1.2033e-01,  6.6063e-02,
         -8.7702e-02, -3.0077e-02,  1.6879e-02, -1.6936e-01,  4.3041e-02,
          1.4503e-01,  1.9179e-01, -5.4283e-02, -1.3104e-02, -2.7615e-02,
          3.7942e-02,  1.0791e-02, -2.9855e-01, -1.5154e-01,  5.4246e-02,
          7.1156e-02,  2.2386e-02, -1.7043e-01, -2.8679e-01,  4.5753e-01,
          1.9096e-01,  2.5283e-04,  2.4383e-02, -1.0058e-01,  4.2189e-01,
         -5.8365e-01, -1.2043e-01, -1.2610e-01,  1.6287e-01, -2.0588e-02,
         -5.0767e-01, -3.8960e-01, -8.0628e-02, -2.2179e-01, -5.0340e-02,
          1.1480e-01,  1.0311e-01,  1.7601e-01, -6.0767e-02, -2.7660e-01,
          1.4053e-01,  5.3422e-01, -6.4094e-02, -2.9184e-01,  6.7294e-02,
          7.5877e-02,  3.5696e-02]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
39000 特征值优化 tensor(0.5910, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1730, -0.6083,  0.1138,  0.6568,  0.1289,  0.3321, -0.2098,  0.0194,
          0.6530, -0.4708, -0.8044, -0.7448,  0.0533, -0.2563,  0.1300,  0.0297,
          0.0379,  0.0175,  0.1116, -0.0305,  0.2205,  0.0123,  0.2273, -0.1163,
          0.0658, -0.0845, -0.0371,  0.0123, -0.1696,  0.0432,  0.1451,  0.1915,
         -0.0536, -0.0124, -0.0288,  0.0396,  0.0101, -0.2981, -0.1558,  0.0580,
          0.0715,  0.0251, -0.1781, -0.2832,  0.4599,  0.1823,  0.0063,  0.0245,
         -0.1006,  0.4220, -0.5832, -0.1205, -0.1245,  0.1627, -0.0205, -0.5072,
         -0.3879, -0.0818, -0.2197, -0.0494,  0.1114,  0.1055,  0.1775, -0.0610,
         -0.2820,  0.1298,  0.5447, -0.0694, -0.2906,  0.0648,  0.0794,  0.0425]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
40000 特征值优化 tensor(0.5910, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1739, -0.6075,  0.1141,  0.6571,  0.1297,  0.3328, -0.2072,  0.0191,
          0.6538, -0.4714, -0.8079, -0.7454,  0.0533, -0.2566,  0.1295,  0.0293,
          0.0370,  0.0179,  0.1114, -0.0305,  0.2206,  0.0126,  0.2270, -0.1167,
          0.0659, -0.0844, -0.0377,  0.0129, -0.1694,  0.0432,  0.1456,  0.1916,
         -0.0533, -0.0125, -0.0287,  0.0396,  0.0098, -0.2975, -0.1556,  0.0582,
          0.0717,  0.0255, -0.1784, -0.2830,  0.4603,  0.1822,  0.0063,  0.0242,
         -0.1004,  0.4224, -0.5829, -0.1207, -0.1232,  0.1624, -0.0207, -0.5062,
         -0.3884, -0.0816, -0.2201, -0.0498,  0.1099,  0.1069,  0.1777, -0.0604,
         -0.2828,  0.1308,  0.5437, -0.0692, -0.2891,  0.0644,  0.0782,  0.0434]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
41000 特征值优化 tensor(0.5911, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1733, -0.6078,  0.1138,  0.6577,  0.1287,  0.3321, -0.2070,  0.0187,
          0.6539, -0.4713, -0.8098, -0.7447,  0.0533, -0.2570,  0.1286,  0.0296,
          0.0370,  0.0177,  0.1114, -0.0306,  0.2206,  0.0124,  0.2277, -0.1167,
          0.0652, -0.0840, -0.0380,  0.0121, -0.1692,  0.0432,  0.1453,  0.1917,
         -0.0541, -0.0124, -0.0289,  0.0397,  0.0093, -0.2976, -0.1553,  0.0577,
          0.0714,  0.0256, -0.1786, -0.2829,  0.4596,  0.1825,  0.0061,  0.0240,
         -0.1002,  0.4224, -0.5830, -0.1208, -0.1236,  0.1623, -0.0206, -0.5065,
         -0.3876, -0.0816, -0.2196, -0.0493,  0.1096,  0.1072,  0.1780, -0.0604,
         -0.2824,  0.1301,  0.5443, -0.0694, -0.2896,  0.0641,  0.0791,  0.0433]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
42000 特征值优化 tensor(19.7074, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5256,  0.6373,  0.5206, -1.1958, -0.7804, -0.6044,  0.9565,  0.5457,
         -1.1293,  0.2021,  0.2857, -0.6723,  0.5311, -0.8634,  0.2806,  0.5451,
          0.6987,  0.3364,  0.1275,  0.4771,  0.3877,  0.6580, -0.3041,  0.7913,
          0.6028, -1.5219,  1.1715,  0.6737, -1.2493,  0.3701, -1.2256,  1.0116,
         -0.7932,  0.6049, -1.2295,  0.8870,  0.9449,  1.1434, -0.1827,  0.2960,
          1.3609, -0.5904,  1.0434,  1.3184, -0.8381,  0.2048, -0.5919, -2.0279,
         -0.8285, -1.1157, -0.1572,  0.6497,  1.2687,  0.8751,  0.7613, -1.4750,
          1.3991, -0.7797, -0.2678,  0.3167,  2.5990, -0.5522, -0.5811,  0.0708,
         -0.2703,  2.4419, -2.2995, -1.2881, -0.5267, -0.5144,  0.0218, -0.6673]],
       device='cuda:0') tensor(0.2145, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
43000 特征值优化 tensor(3.7478, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0711, -0.0556,  0.5998, -0.4083, -1.2637, -0.6385, -0.0724,  0.0204,
          0.0514,  0.7605,  0.1060, -0.6873,  0.0214, -0.1294, -0.0741,  0.0727,
          0.0611, -0.0145,  0.0475,  0.0465,  0.1049,  0.0980, -0.0854,  0.0551,
          0.0644, -0.3462,  0.0606,  0.0845, -0.2336,  0.0712, -0.4066,  0.0932,
         -0.0581,  0.0468, -0.2668,  0.1522,  0.0825,  0.2398,  0.0074, -0.0358,
          0.4448, -0.0910,  0.0888,  0.8516, -0.6054, -0.0502, -0.0544, -1.0745,
          0.1027, -0.1802,  0.0873, -0.0915,  0.5331,  0.1420,  0.0104, -0.4860,
          0.6232, -0.2216, -0.1678,  0.1079,  1.5415,  0.0019, -0.4133, -0.1122,
         -1.1149,  1.3211, -1.1828, -0.2472, -0.4150,  0.0608, -0.3514, -0.2085]],
       device='cuda:0') tensor(0.2416, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
44000 特征值优化 tensor(0.7182, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2175, -0.1159,  0.2468, -0.2305, -0.3065, -0.5463, -0.2410, -0.3730,
          0.6858,  1.0042,  0.2809, -0.8477,  0.0249, -0.1225, -0.0646, -0.0465,
         -0.0599, -0.0638,  0.2076,  0.0242,  0.1181,  0.0319, -0.0427,  0.2291,
          0.1458, -0.1112,  0.0186, -0.0156, -0.0963,  0.0470, -0.1895,  0.0243,
         -0.0859,  0.0545,  0.0389,  0.1417,  0.0228,  0.1112,  0.0213, -0.0362,
          0.3049, -0.1058, -0.0252,  0.4367, -0.0978, -0.0237, -0.0408, -0.6178,
          0.0145, -0.0924,  0.0766, -0.0804,  0.2247,  0.1135, -0.0982, -0.3346,
          0.1589,  0.0032, -0.4741, -0.2195,  0.7631,  0.0583, -0.0516, -0.0207,
         -0.3221,  0.5623, -0.7044,  0.0327, -0.7436,  0.1187,  0.0334, -0.1609]],
       device='cuda:0') tensor(0.2044, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
45000 特征值优化 tensor(0.6607, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2349, -0.1183,  0.2022, -0.2505, -0.1092, -0.5620, -0.1406, -0.5953,
          0.5257,  0.7294,  0.1695, -0.8793,  0.0249, -0.1331, -0.1040, -0.0391,
         -0.0633, -0.0764,  0.2973,  0.0285,  0.1220,  0.0305,  0.0117,  0.2029,
          0.0457, -0.1794, -0.0256,  0.0424, -0.0871,  0.0518, -0.1839,  0.0313,
         -0.0614,  0.0644, -0.0021,  0.0985,  0.0304,  0.1221,  0.0033, -0.0435,
          0.3028, -0.1023, -0.0339,  0.3795, -0.0329, -0.0236, -0.0366, -0.6138,
         -0.0553, -0.0323,  0.1156, -0.0959,  0.1536,  0.1029, -0.1287, -0.3227,
         -0.0202,  0.1039, -0.4868, -0.0552,  0.6355,  0.0920, -0.0693,  0.0364,
         -0.2643,  0.4943, -0.7644, -0.0322, -0.6290,  0.1139,  0.2246, -0.2172]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
46000 特征值优化 tensor(0.6431, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2221, -0.1091,  0.2761, -0.2159, -0.1284, -0.5320,  0.0039, -0.9029,
          0.4250,  0.5819,  0.1724, -0.9651,  0.0244, -0.1109, -0.0624, -0.1401,
         -0.0532, -0.0406,  0.2578,  0.0243,  0.1218,  0.0307,  0.0296,  0.1905,
         -0.0149, -0.1941, -0.0254,  0.0620, -0.0772,  0.0494, -0.1832,  0.0041,
         -0.0810,  0.0605,  0.0101,  0.0772,  0.0565,  0.1522, -0.0024, -0.0391,
          0.2725, -0.0950, -0.0222,  0.3710, -0.0422, -0.0211, -0.0354, -0.6546,
         -0.0087, -0.0767,  0.1319, -0.1196,  0.1621,  0.1020, -0.1820, -0.2976,
         -0.0115,  0.1081, -0.4800, -0.0502,  0.4404,  0.1324, -0.0483,  0.0418,
         -0.2442,  0.4762, -0.7327, -0.0382, -0.5062,  0.0799,  0.2626, -0.1865]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
47000 特征值优化 tensor(0.6237, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1610, -0.0591,  0.1590, -0.2551, -0.1284, -0.4823,  0.1282, -1.1292,
          0.3692,  0.5376,  0.3059, -0.9159,  0.0184, -0.1548,  0.0043, -0.1994,
          0.0189, -0.0143,  0.1557,  0.0348,  0.1266,  0.0307,  0.0698,  0.2231,
          0.0057, -0.2174, -0.0113,  0.0893, -0.0800,  0.0511, -0.1832, -0.0128,
         -0.0933,  0.0671,  0.0155,  0.0682,  0.0906,  0.1553, -0.0031, -0.0412,
          0.2442, -0.0987,  0.0241,  0.3494, -0.0629, -0.0131, -0.0500, -0.6103,
         -0.0573, -0.0036,  0.1084, -0.0913,  0.2131,  0.0751, -0.2074, -0.2722,
         -0.0358,  0.1169, -0.4744, -0.0308,  0.2497,  0.1664,  0.0138,  0.0398,
         -0.2375,  0.4719, -0.7228, -0.0529, -0.4890,  0.0570,  0.2648, -0.1930]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
48000 特征值优化 tensor(0.6082, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1739, -0.0726,  0.1418, -0.2199, -0.1329, -0.5188,  0.1847, -1.2524,
          0.2388,  0.4297,  0.3236, -0.8344,  0.0194, -0.1521, -0.1292, -0.1455,
          0.0214,  0.1560,  0.0990,  0.0340,  0.1267,  0.0298,  0.0804,  0.1898,
         -0.0987, -0.2322,  0.0204,  0.0832, -0.0764,  0.0506, -0.1826, -0.0048,
         -0.0671,  0.0652, -0.0025,  0.0710,  0.1117,  0.1716,  0.0129, -0.0265,
          0.2235, -0.1170,  0.0163,  0.3528, -0.0584, -0.0121, -0.0456, -0.6022,
         -0.0127, -0.0440,  0.0932, -0.0955,  0.1874,  0.0883, -0.1992, -0.2673,
         -0.0312,  0.1189, -0.4613,  0.0054,  0.1791,  0.1343,  0.0341,  0.0392,
         -0.2145,  0.4511, -0.6995, -0.0822, -0.4247,  0.0804,  0.2711, -0.1821]],
       device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
49000 特征值优化 tensor(0.6127, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.5905e-01, -4.1407e-02,  1.8007e-01, -2.2745e-01, -1.2438e-01,
         -5.5707e-01,  2.0957e-01, -1.3422e+00,  1.2975e-02,  2.8033e-01,
          3.1761e-01, -6.0390e-01,  2.2031e-02, -1.5677e-01, -1.3262e-01,
         -4.6299e-02,  2.2812e-02,  1.1287e-01, -1.1617e-03,  3.4382e-02,
          1.2516e-01,  2.7498e-02,  1.2446e-02,  1.3172e-01, -1.0725e-01,
         -2.2429e-01,  7.5663e-03,  1.7634e-01, -7.9210e-02,  5.5970e-02,
         -1.8253e-01,  1.2867e-02, -6.3603e-02,  6.4567e-02,  1.1917e-02,
          6.9339e-02,  1.4133e-01,  1.7143e-01,  3.6180e-02, -2.1438e-02,
          1.9369e-01, -1.3846e-01,  2.3139e-02,  3.5052e-01, -6.2783e-02,
         -2.5925e-02, -3.7520e-02, -6.2360e-01,  1.4997e-02, -6.8466e-02,
          8.4814e-02, -9.2624e-02,  1.6852e-01,  9.6407e-02, -2.1726e-01,
         -2.5019e-01, -1.2848e-02,  1.1975e-01, -4.3390e-01,  4.2382e-02,
          9.5765e-02,  1.3980e-01,  4.0732e-02,  2.5821e-02, -2.1579e-01,
          4.0390e-01, -6.9688e-01, -1.0863e-01, -3.4819e-01,  7.0370e-02,
          2.9210e-01, -1.6623e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
50000 特征值优化 tensor(0.6123, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1519, -0.0476,  0.1790, -0.2172, -0.1233, -0.5418,  0.2107, -1.3554,
          0.0366,  0.2858,  0.3165, -0.6244,  0.0222, -0.1570, -0.1473, -0.0555,
          0.0176,  0.1049,  0.0246,  0.0350,  0.1248,  0.0273,  0.0177,  0.1498,
         -0.1420, -0.2206,  0.0300,  0.1803, -0.0795,  0.0562, -0.1826,  0.0150,
         -0.0627,  0.0646,  0.0083,  0.0757,  0.1460,  0.1745,  0.0334, -0.0210,
          0.1893, -0.1318,  0.0236,  0.3520, -0.0656, -0.0225, -0.0368, -0.6250,
          0.0149, -0.0675,  0.0802, -0.0921,  0.1619,  0.1005, -0.2130, -0.2495,
         -0.0172,  0.1177, -0.4366,  0.0361,  0.0948,  0.1244,  0.0483,  0.0250,
         -0.2189,  0.4097, -0.7018, -0.1074, -0.3397,  0.0827,  0.2959, -0.1667]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
51000 特征值优化 tensor(0.6122, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1521, -0.0458,  0.1790, -0.2176, -0.1232, -0.5421,  0.2115, -1.3539,
          0.0367,  0.2854,  0.3173, -0.6252,  0.0223, -0.1556, -0.1488, -0.0588,
          0.0185,  0.1053,  0.0259,  0.0354,  0.1248,  0.0271,  0.0179,  0.1499,
         -0.1425, -0.2209,  0.0298,  0.1804, -0.0795,  0.0563, -0.1823,  0.0163,
         -0.0614,  0.0646,  0.0083,  0.0751,  0.1452,  0.1750,  0.0335, -0.0213,
          0.1896, -0.1316,  0.0238,  0.3520, -0.0657, -0.0232, -0.0364, -0.6248,
          0.0150, -0.0671,  0.0809, -0.0921,  0.1597,  0.1011, -0.2130, -0.2501,
         -0.0171,  0.1176, -0.4362,  0.0359,  0.0987,  0.1215,  0.0482,  0.0260,
         -0.2195,  0.4098, -0.7016, -0.1069, -0.3429,  0.0838,  0.2953, -0.1671]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
52000 特征值优化 tensor(18.4390, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6539,  0.3635,  0.7118, -1.0535, -2.1145,  0.2173,  0.4636,  0.7893,
         -1.8498, -2.5043, -0.0676, -0.7054, -0.1094,  0.0680,  0.0099, -0.0182,
         -0.6763, -0.3081,  1.1018,  0.1848, -0.2426,  0.3135,  1.8242,  1.5980,
          0.5801, -2.0108, -1.9989, -0.7719,  0.6431,  0.2152,  1.1489,  0.1711,
          1.4728,  0.9575, -0.1042,  0.3912, -0.0406, -0.1525,  1.2442, -1.3408,
         -1.4432, -0.3696, -1.8005,  0.7461,  0.9333,  1.1402, -1.0380, -0.0491,
         -0.1363, -1.5923,  0.3597, -0.7121,  0.7929, -0.6678, -0.0818, -0.2080,
         -0.2947,  0.7136, -0.6054,  0.7974,  0.0591, -0.5544, -0.7074, -0.9490,
          0.2474, -0.1592, -1.7470, -0.5377,  0.7118,  0.5004,  2.1230,  0.5674]],
       device='cuda:0') tensor(0.2046, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
53000 特征值优化 tensor(4.0566, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2911e+00, -2.6884e-01, -2.0628e-01, -5.5943e-01, -1.8021e+00,
          2.7147e-01, -1.0231e-01,  5.8721e-01, -1.7240e+00, -1.4265e+00,
         -4.9617e-01, -1.6245e+00, -9.3377e-02, -6.5368e-04,  3.0478e-02,
          8.9127e-02, -6.5376e-02,  2.7422e-02,  2.1949e-01,  4.7280e-04,
         -7.1942e-02,  2.4347e-02,  7.6874e-01,  6.8197e-01, -1.7584e-01,
         -9.4711e-01, -9.2169e-01,  4.0657e-02,  5.4329e-02, -3.9026e-02,
          3.5688e-01,  1.2947e-02,  4.4608e-01,  1.7375e-01, -4.7400e-02,
         -3.6233e-03,  6.7887e-02, -8.3305e-03,  3.5093e-01, -3.5450e-01,
         -4.8576e-01, -1.3764e-01, -9.7556e-01,  3.1502e-01,  5.0199e-01,
          4.7440e-01, -3.1348e-01,  8.3874e-02,  5.6773e-01, -7.6505e-01,
          4.5489e-01, -1.6665e-01,  3.8640e-01, -1.0443e-01,  2.3860e-02,
         -7.3613e-03, -2.0236e-01,  2.2582e-01, -2.2522e-02,  1.0303e-01,
         -9.7417e-02,  4.5674e-02, -2.1418e-01, -1.2298e-01, -8.7092e-02,
         -1.4235e-01, -7.1616e-01,  2.6758e-01,  2.0672e-01,  1.2583e-01,
          1.1263e+00, -5.2287e-03]], device='cuda:0') tensor(0.2052, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
54000 特征值优化 tensor(0.7137, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.3047e+00, -2.6576e-01, -5.7664e-02, -5.4806e-01, -8.4418e-01,
         -5.3250e-02,  2.3869e-01,  4.8919e-01, -8.7853e-01, -8.6568e-01,
          1.5723e-02, -8.9279e-01, -1.0452e-01, -6.2452e-02,  1.3370e-02,
          1.2932e-01, -4.1834e-02, -1.7634e-02,  3.3487e-02,  2.4488e-02,
         -5.7748e-02,  2.3768e-02,  1.1046e-01,  7.8360e-02, -1.3887e-01,
         -2.6927e-01, -2.0058e-01,  1.0162e-01,  5.7159e-03, -4.4685e-02,
          2.3114e-01, -1.0634e-01,  1.3476e-01,  1.7433e-01,  1.5635e-02,
          1.1983e-02,  2.8633e-02, -8.1971e-02,  1.6962e-01, -5.9428e-02,
         -1.8062e-01, -7.0861e-02, -6.1402e-01,  2.0319e-02,  4.8141e-01,
          1.7487e-01, -1.8347e-01, -1.3250e-01,  3.3549e-01, -3.7989e-01,
          1.3873e-01, -1.5234e-02,  1.6229e-01,  8.7971e-02,  3.6583e-04,
         -2.4670e-01, -8.0267e-02,  2.4625e-01,  3.4642e-01, -4.1239e-02,
         -4.1574e-01,  7.6358e-02, -1.8906e-01, -2.9270e-02, -3.2237e-01,
         -5.5362e-02, -3.1622e-01, -1.7065e-02,  1.3806e-01,  5.2498e-02,
          7.1821e-01,  1.1954e-01]], device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
55000 特征值优化 tensor(0.6737, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2291e+00, -3.6647e-01, -7.3655e-02, -5.6568e-01, -9.5319e-01,
         -2.3753e-02,  1.6382e-01,  6.8929e-01, -9.6347e-01, -8.7769e-01,
          2.8997e-01, -8.9682e-01, -1.0398e-01,  3.1183e-02,  2.0640e-02,
          1.1231e-01, -1.2239e-01, -1.4513e-02,  4.2965e-02, -9.7492e-05,
         -5.8847e-02,  2.3879e-02,  6.6683e-02,  9.2210e-02, -1.3052e-01,
         -2.2968e-01, -1.2840e-01,  1.2537e-01,  3.8579e-02, -4.3891e-02,
          2.4157e-01, -1.4580e-01,  6.0915e-02,  1.7390e-01,  4.0707e-02,
          1.5006e-02, -3.3806e-02, -1.1532e-01,  1.2343e-01, -2.3250e-02,
         -1.1934e-01, -1.6284e-02, -5.7108e-01,  2.0603e-02,  4.7537e-01,
          2.3053e-01, -1.8767e-01, -1.2144e-01,  3.3974e-01, -3.8886e-01,
          1.3880e-01, -1.0325e-02,  2.4256e-01,  5.4811e-02, -8.4053e-02,
         -1.9873e-01, -1.0059e-01,  2.4815e-01,  3.2240e-01, -5.8300e-02,
         -4.5620e-01,  9.0740e-02, -1.5094e-01, -6.4728e-02, -3.2785e-01,
         -7.3418e-02, -3.0506e-01, -3.5122e-02,  6.3484e-02,  4.6829e-02,
          7.8765e-01,  1.3368e-01]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
56000 特征值优化 tensor(0.6475, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2417, -0.3490, -0.0536, -0.5380, -0.9466,  0.0031, -0.0499,  0.7291,
         -1.0570, -0.9218,  0.4277, -0.9020, -0.1057, -0.1227,  0.0254,  0.1325,
         -0.1295,  0.1492, -0.1364, -0.0297, -0.0621,  0.0271,  0.0985,  0.0652,
         -0.1407, -0.2067, -0.1428,  0.0839,  0.0017, -0.0408,  0.2404, -0.0321,
         -0.0222,  0.1764,  0.0614,  0.0148, -0.0446, -0.1017,  0.0945, -0.0042,
         -0.1029, -0.0069, -0.5668,  0.0102,  0.4642,  0.2259, -0.1924, -0.1644,
          0.3729, -0.3903,  0.1005,  0.0043,  0.3176,  0.0207, -0.0651, -0.1719,
         -0.1195,  0.2567,  0.3352, -0.0462, -0.4022,  0.1161, -0.0258, -0.1304,
         -0.2578, -0.1052, -0.3035, -0.0489, -0.0151,  0.0042,  0.7758,  0.1585]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
57000 特征值优化 tensor(0.6531, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2021, -0.3759, -0.0158, -0.6152, -0.8795,  0.0337, -0.0531,  0.7538,
         -1.1492, -0.8526,  0.4848, -0.8900, -0.1021, -0.0392, -0.0146,  0.1659,
         -0.0614,  0.1330, -0.1082, -0.0195, -0.0612,  0.0249,  0.0567,  0.0888,
         -0.0426, -0.1705, -0.1382,  0.1104,  0.0147, -0.0426,  0.2444, -0.0134,
         -0.0186,  0.1806,  0.0335, -0.0147, -0.0589, -0.1009,  0.0255,  0.0628,
         -0.0928,  0.0519, -0.5690,  0.0396,  0.4762,  0.2296, -0.1853, -0.1900,
          0.3684, -0.3936,  0.1316,  0.0084,  0.3019,  0.0143, -0.0390, -0.1895,
         -0.1289,  0.2613,  0.3528, -0.0591, -0.3732,  0.1001, -0.0043, -0.1399,
         -0.1917, -0.1591, -0.3218, -0.0114, -0.0741,  0.0268,  0.7232,  0.1840]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
58000 特征值优化 tensor(0.6457, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1838, -0.3970, -0.0055, -0.6122, -0.8657, -0.0232, -0.1242,  0.8049,
         -1.1440, -0.8495,  0.5393, -0.8854, -0.1019, -0.0229, -0.1464,  0.1837,
          0.0350,  0.1695, -0.0504,  0.0527, -0.0615,  0.0238,  0.0238,  0.0703,
          0.0303, -0.1431, -0.1713,  0.1158, -0.0057, -0.0413,  0.2394, -0.0436,
         -0.0093,  0.1785, -0.0341, -0.0180, -0.0822, -0.0967,  0.0061,  0.0846,
         -0.0667,  0.0769, -0.5606,  0.0374,  0.4768,  0.2465, -0.1883, -0.1955,
          0.3757, -0.3979,  0.1350,  0.0047,  0.2805,  0.0294, -0.1075, -0.1768,
         -0.0780,  0.2461,  0.3486, -0.0662, -0.2806,  0.0653,  0.0105, -0.1271,
         -0.1975, -0.1453, -0.3297, -0.0013, -0.1364,  0.0492,  0.6944,  0.1979]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
59000 特征值优化 tensor(0.7049, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1646, -0.4202, -0.0131, -0.6108, -0.8730, -0.0049, -0.1367,  0.8211,
         -1.1407, -0.8814,  0.5697, -0.8820, -0.1028, -0.0058, -0.1519,  0.1874,
          0.0168,  0.1760, -0.0693,  0.0376, -0.0605,  0.0236,  0.0050,  0.0892,
          0.0174, -0.1434, -0.1565,  0.1088, -0.0130, -0.0421,  0.2392, -0.0436,
         -0.0095,  0.1786, -0.0426,  0.0019, -0.1005, -0.1017,  0.0088,  0.0835,
         -0.0493,  0.0757, -0.5449,  0.0355,  0.4727,  0.2444, -0.1810, -0.1906,
          0.3697, -0.3939,  0.0932,  0.0275,  0.2881,  0.0249,  0.0387, -0.2194,
         -0.1034,  0.2541,  0.3471, -0.0641, -0.2291,  0.0736,  0.0154, -0.1203,
         -0.1983, -0.1447, -0.3148, -0.0062, -0.2184,  0.0559,  0.7038,  0.1890]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
60000 特征值优化 tensor(0.6435, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1691, -0.4282, -0.0160, -0.6221, -0.8821, -0.0087, -0.1488,  0.7866,
         -1.1522, -0.8667,  0.5426, -0.8750, -0.1019, -0.1337, -0.0588,  0.1220,
          0.0584,  0.1936, -0.0262, -0.0241, -0.0613,  0.0251,  0.0105,  0.0628,
         -0.0087, -0.1674, -0.1746,  0.0551,  0.0193, -0.0420,  0.2424, -0.0196,
         -0.0339,  0.1785, -0.0410,  0.0198, -0.0924, -0.0960,  0.0132,  0.0785,
         -0.0593,  0.0703, -0.5490,  0.0371,  0.4738,  0.2595, -0.1866, -0.1933,
          0.3731, -0.3946,  0.1269,  0.0137,  0.2952,  0.0189, -0.0478, -0.1802,
         -0.1144,  0.2607,  0.3541, -0.0599, -0.2438,  0.0696,  0.0328, -0.1310,
         -0.1777, -0.1639, -0.3168, -0.0058, -0.1614,  0.0498,  0.7041,  0.1976]],
       device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
61000 特征值优化 tensor(0.6478, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1774e+00, -4.2286e-01, -8.5927e-03, -6.1164e-01, -8.6658e-01,
         -1.0212e-02, -1.6046e-01,  8.0586e-01, -1.1538e+00, -8.6791e-01,
          5.6881e-01, -8.8089e-01, -1.0180e-01, -7.0467e-02, -8.4012e-02,
          1.5450e-01,  4.2699e-02,  1.4833e-01, -1.6328e-02,  3.3395e-02,
         -6.1294e-02,  2.3312e-02,  1.3116e-02,  7.1536e-02,  5.7281e-03,
         -1.5589e-01, -1.6402e-01,  9.5498e-02,  6.9880e-04, -4.0446e-02,
          2.4161e-01, -4.2427e-02,  6.3696e-04,  1.7916e-01, -3.9804e-02,
          1.4576e-02, -9.2092e-02, -9.7764e-02,  4.9357e-03,  8.5341e-02,
         -5.7813e-02,  7.8906e-02, -5.6242e-01,  3.9217e-02,  4.8391e-01,
          2.5077e-01, -1.8493e-01, -1.8869e-01,  3.6796e-01, -3.9524e-01,
          1.3389e-01,  4.4621e-03,  2.8380e-01,  2.6531e-02, -1.0988e-01,
         -1.6533e-01, -1.0819e-01,  2.5861e-01,  3.5706e-01, -6.2997e-02,
         -2.1855e-01,  5.8216e-02,  3.1345e-02, -1.3318e-01, -1.7658e-01,
         -1.6030e-01, -3.1034e-01, -5.1533e-03, -1.8950e-01,  5.2222e-02,
          7.0372e-01,  1.9044e-01]], device='cuda:0') tensor(0.2036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
62000 特征值优化 tensor(0.6454, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1784, -0.4085, -0.0100, -0.6065, -0.8660, -0.0050, -0.1947,  0.8003,
         -1.1596, -0.8612,  0.5461, -0.8773, -0.1037, -0.1213, -0.0938,  0.0961,
          0.0234,  0.1812, -0.0037, -0.0148, -0.0611,  0.0252,  0.0158,  0.0657,
         -0.0079, -0.1681, -0.1749,  0.0667,  0.0048, -0.0427,  0.2410, -0.0089,
         -0.0370,  0.1792, -0.0385,  0.0088, -0.0885, -0.0965,  0.0106,  0.0796,
         -0.0575,  0.0721, -0.5502,  0.0331,  0.4750,  0.2348, -0.1761, -0.1942,
          0.3725, -0.3978,  0.1423,  0.0023,  0.2890,  0.0245, -0.1088, -0.1666,
         -0.1124,  0.2606,  0.3563, -0.0616, -0.2145,  0.0558,  0.0433, -0.1356,
         -0.1760, -0.1628, -0.3157, -0.0036, -0.1755,  0.0534,  0.7042,  0.1967]],
       device='cuda:0') tensor(0.2029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
63000 特征值优化 tensor(0.6389, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1867, -0.4135, -0.0192, -0.5965, -0.8941,  0.0012, -0.1448,  0.8581,
         -1.1462, -0.8730,  0.5895, -0.8716, -0.0975, -0.1345, -0.0614,  0.0990,
          0.0502,  0.1902,  0.0292, -0.0154, -0.0670,  0.0153,  0.0154,  0.0633,
         -0.0124, -0.1719, -0.1800,  0.0647, -0.0024, -0.0330,  0.2425, -0.0117,
         -0.0391,  0.1825, -0.0396, -0.0026, -0.0832, -0.0802,  0.0030,  0.0868,
         -0.0507,  0.0810, -0.5494,  0.0404,  0.4850,  0.2393, -0.1897, -0.2147,
          0.3574, -0.3942,  0.1606,  0.0087,  0.3023,  0.0187, -0.0717, -0.1790,
         -0.0986,  0.2582,  0.3588, -0.0472, -0.2309,  0.0639,  0.0216, -0.1142,
         -0.1815, -0.1548, -0.3075, -0.0016, -0.1533,  0.0509,  0.7091,  0.1950]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
64000 特征值优化 tensor(0.6375, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2068, -0.4114, -0.0343, -0.6039, -0.9302, -0.0066, -0.1691,  0.8612,
         -1.1320, -0.8847,  0.6254, -0.8506, -0.0972,  0.0166, -0.1379,  0.2235,
          0.0164,  0.1654, -0.0606,  0.0640, -0.0668,  0.0147,  0.0146,  0.0757,
          0.0387, -0.1271, -0.1631,  0.1192, -0.0124, -0.0325,  0.2420, -0.0545,
         -0.0023,  0.1832, -0.0298,  0.0200, -0.0877, -0.0786,  0.0045,  0.0834,
         -0.0466,  0.0805, -0.5582,  0.0394,  0.4817,  0.2330, -0.1857, -0.2089,
          0.3613, -0.3929,  0.1668,  0.0057,  0.3165,  0.0202, -0.1380, -0.1813,
         -0.1043,  0.2639,  0.3611, -0.0382, -0.1767,  0.0463,  0.0353, -0.1132,
         -0.1745, -0.1570, -0.3085, -0.0066, -0.2081,  0.0650,  0.6960,  0.1953]],
       device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
65000 特征值优化 tensor(0.6418, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1927e+00, -3.8931e-01, -5.3790e-02, -6.0277e-01, -8.7691e-01,
          1.5137e-04, -1.8406e-01,  9.3156e-01, -1.1353e+00, -8.3108e-01,
          6.6881e-01, -8.7044e-01, -1.0296e-01, -1.1879e-02, -1.8754e-02,
          1.3611e-01,  1.9468e-02,  1.5596e-01, -3.2707e-02,  4.6057e-02,
         -6.2142e-02,  1.4652e-02,  2.6769e-02,  7.6403e-02, -1.6391e-02,
         -1.5125e-01, -1.5701e-01,  1.0688e-01,  2.4681e-02, -3.2693e-02,
          2.4194e-01, -3.4611e-02, -1.2459e-02,  1.8175e-01, -3.2840e-02,
         -7.2181e-03, -8.4876e-02, -6.3500e-02, -3.0292e-03,  9.5636e-02,
         -4.0259e-02,  8.7448e-02, -5.6251e-01,  3.9663e-02,  4.7746e-01,
          2.2564e-01, -1.7739e-01, -1.9946e-01,  3.6138e-01, -3.9374e-01,
          1.7303e-01,  3.8272e-03,  2.7992e-01,  2.8220e-02, -1.3370e-01,
         -1.6665e-01, -9.0813e-02,  2.5362e-01,  3.6013e-01, -5.1004e-02,
         -1.4156e-01,  4.2182e-02,  3.2065e-02, -9.9356e-02, -1.9542e-01,
         -1.5139e-01, -3.1768e-01,  3.6827e-03, -2.2796e-01,  6.9352e-02,
          7.1223e-01,  1.9497e-01]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
66000 特征值优化 tensor(0.6424, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1778e+00, -3.9573e-01, -2.0514e-02, -6.1093e-01, -9.0698e-01,
         -9.1874e-03, -1.6466e-01,  9.3456e-01, -1.1327e+00, -8.3110e-01,
          6.8027e-01, -8.6260e-01, -1.0083e-01, -6.5338e-02,  2.9436e-02,
          1.4001e-01,  7.5373e-02,  1.7172e-01, -5.0617e-04,  4.6448e-02,
         -6.3772e-02,  1.5738e-02,  2.9886e-03,  9.6248e-02,  6.7215e-03,
         -1.1001e-01, -1.4118e-01,  1.2160e-01,  2.9290e-02, -3.3572e-02,
          2.4135e-01, -2.7192e-02, -1.1099e-02,  1.7883e-01, -2.1624e-02,
          3.5579e-03, -8.3083e-02, -6.1775e-02,  8.7146e-04,  9.0612e-02,
         -3.8791e-02,  8.3782e-02, -5.5644e-01,  4.1725e-02,  4.8055e-01,
          2.4444e-01, -1.8902e-01, -2.1427e-01,  3.6175e-01, -3.9872e-01,
          1.9883e-01, -6.2688e-03,  2.7862e-01,  3.5904e-02, -1.2324e-01,
         -1.6584e-01, -8.9423e-02,  2.4889e-01,  3.5620e-01, -4.6238e-02,
         -1.2627e-01,  2.7807e-02,  5.1765e-02, -1.0680e-01, -1.9324e-01,
         -1.5318e-01, -3.2900e-01,  2.9270e-03, -2.4264e-01,  8.3543e-02,
          7.0872e-01,  1.9642e-01]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
67000 特征值优化 tensor(0.6424, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1857e+00, -4.2422e-01, -5.6234e-02, -5.9738e-01, -8.7982e-01,
         -4.6530e-03, -1.8057e-01,  9.1726e-01, -1.1363e+00, -8.3460e-01,
          6.5677e-01, -8.6878e-01, -1.0070e-01, -1.0963e-02,  1.1644e-01,
          8.6876e-02,  3.4402e-02,  1.6398e-01,  3.9701e-03,  4.1082e-02,
         -6.4516e-02,  1.4027e-02,  2.6039e-02,  8.2079e-02, -2.0470e-02,
         -1.5932e-01, -1.5216e-01,  1.0277e-01,  2.1166e-02, -3.2849e-02,
          2.4231e-01, -3.0288e-02, -1.8623e-02,  1.7872e-01, -3.4580e-02,
          1.3309e-02, -9.2152e-02, -6.8776e-02, -1.8828e-05,  9.3010e-02,
         -3.5601e-02,  8.5677e-02, -5.5920e-01,  4.3164e-02,  4.7987e-01,
          2.6711e-01, -1.9465e-01, -1.9348e-01,  3.5993e-01, -3.9202e-01,
          1.6516e-01,  4.6683e-03,  2.7071e-01,  3.2670e-02, -1.2861e-01,
         -1.8205e-01, -8.6441e-02,  2.4611e-01,  3.5327e-01, -5.0890e-02,
         -1.5575e-01,  3.9313e-02,  3.3901e-02, -1.0557e-01, -1.9592e-01,
         -1.5174e-01, -3.2548e-01,  5.0701e-03, -2.1290e-01,  6.8113e-02,
          7.1067e-01,  1.9718e-01]], device='cuda:0') tensor(0.2041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
68000 特征值优化 tensor(0.6401, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1989, -0.3991, -0.0542, -0.5997, -0.8784,  0.0068, -0.1979,  0.9502,
         -1.1412, -0.8312,  0.6598, -0.8662, -0.1002, -0.0065,  0.0671,  0.0463,
          0.1246,  0.1958,  0.0151,  0.0453, -0.0643,  0.0140,  0.0213,  0.0781,
         -0.0102, -0.1539, -0.1626,  0.0898,  0.0277, -0.0323,  0.2398, -0.0249,
         -0.0230,  0.1812, -0.0293,  0.0059, -0.0716, -0.0561,  0.0033,  0.0878,
         -0.0530,  0.0807, -0.5653,  0.0418,  0.4799,  0.2514, -0.1932, -0.1925,
          0.3586, -0.3933,  0.1693,  0.0027,  0.2401,  0.0524, -0.1294, -0.1512,
         -0.0970,  0.2537,  0.3568, -0.0452, -0.1273,  0.0223,  0.0534, -0.1050,
         -0.1856, -0.1587, -0.3295,  0.0015, -0.2052,  0.0645,  0.7101,  0.2001]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
69000 特征值优化 tensor(0.6371, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2018, -0.3865, -0.0302, -0.6025, -0.9339, -0.0152, -0.1749,  0.9613,
         -1.1345, -0.8560,  0.6834, -0.8923, -0.1033,  0.0760,  0.0697,  0.1082,
          0.1053,  0.1983, -0.0049,  0.0450, -0.0659,  0.0156, -0.0045,  0.1026,
         -0.0076, -0.1115, -0.1507,  0.1027,  0.0299, -0.0335,  0.2422, -0.0502,
          0.0018,  0.1783, -0.0273, -0.0020, -0.0762, -0.0644, -0.0021,  0.0914,
         -0.0532,  0.0921, -0.5653,  0.0450,  0.4832,  0.2262, -0.1772, -0.2096,
          0.3616, -0.3986,  0.1941, -0.0061,  0.3159,  0.0225, -0.0851, -0.1864,
         -0.0925,  0.2519,  0.3610, -0.0528, -0.1517,  0.0276,  0.0233, -0.0964,
         -0.1908, -0.1506, -0.3116,  0.0035, -0.2314,  0.0917,  0.7092,  0.1892]],
       device='cuda:0') tensor(0.2060, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
70000 特征值优化 tensor(0.6416, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1901e+00, -3.8832e-01, -3.7928e-02, -5.9568e-01, -8.9005e-01,
         -9.3485e-03, -1.6472e-01,  9.5046e-01, -1.1194e+00, -8.3485e-01,
          6.6966e-01, -8.9542e-01, -1.0134e-01,  1.4223e-02,  1.7883e-02,
          1.2643e-01,  6.0948e-02,  1.6535e-01,  7.4837e-03,  4.4180e-02,
         -6.0724e-02,  1.5142e-02,  1.4262e-02,  8.7914e-02, -2.1131e-02,
         -1.4292e-01, -1.6546e-01,  9.7987e-02,  2.4520e-02, -3.3793e-02,
          2.4108e-01, -2.9356e-02, -9.1443e-03,  1.7909e-01, -2.8571e-02,
         -5.4844e-03, -8.8469e-02, -6.0880e-02, -7.4630e-03,  1.0010e-01,
         -3.6193e-02,  9.4291e-02, -5.5939e-01,  3.5405e-02,  4.7248e-01,
          2.2805e-01, -1.8155e-01, -2.0448e-01,  3.6023e-01, -3.9710e-01,
          1.8021e-01, -3.0771e-04,  2.8162e-01,  3.1619e-02, -1.0030e-01,
         -1.7724e-01, -8.8639e-02,  2.4920e-01,  3.5768e-01, -5.2367e-02,
         -1.3198e-01,  5.5714e-02,  4.9776e-02, -9.0693e-02, -2.0797e-01,
         -1.4117e-01, -3.1707e-01,  2.7235e-03, -2.4969e-01,  5.7567e-02,
          7.2294e-01,  1.8526e-01]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
71000 特征值优化 tensor(0.6310, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1964, -0.3801, -0.0317, -0.6034, -0.9136, -0.0240, -0.1828,  0.9947,
         -1.1218, -0.9171,  0.7129, -0.8900, -0.1015,  0.0431,  0.0444,  0.0629,
          0.1627,  0.2163, -0.0045,  0.0320, -0.0623,  0.0162,  0.0224,  0.1103,
         -0.0308, -0.0867, -0.1900,  0.0701,  0.0273, -0.0364,  0.2418, -0.0414,
         -0.0133,  0.1784, -0.0188, -0.0158, -0.0721, -0.0561,  0.0031,  0.0865,
         -0.0475,  0.0837, -0.5605,  0.0345,  0.4747,  0.2272, -0.1825, -0.2089,
          0.3584, -0.3957,  0.1979, -0.0029,  0.2987,  0.0235, -0.1221, -0.1681,
         -0.0839,  0.2493,  0.3540, -0.0441, -0.1192,  0.0256,  0.0255, -0.0844,
         -0.1902, -0.1466, -0.2983, -0.0047, -0.2716,  0.1039,  0.7035,  0.1943]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
72000 特征值优化 tensor(0.6381, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1796e+00, -3.9663e-01, -1.7802e-02, -5.9330e-01, -8.8475e-01,
         -1.5849e-02, -1.5773e-01,  9.4561e-01, -1.1150e+00, -9.2796e-01,
          6.8002e-01, -8.9335e-01, -1.0247e-01, -4.8108e-02,  7.8175e-02,
          1.2704e-01,  8.3207e-02,  1.7169e-01,  7.5217e-03,  3.6540e-02,
         -6.1857e-02,  1.5736e-02,  1.0648e-02,  9.7808e-02, -1.1902e-02,
         -9.1412e-02, -1.8627e-01,  7.0475e-02,  3.0369e-02, -3.4981e-02,
          2.4321e-01, -3.9387e-02, -1.4103e-03,  1.7880e-01, -1.5085e-02,
         -1.2467e-02, -8.5356e-02, -6.4280e-02, -8.2991e-04,  8.8442e-02,
         -3.3858e-02,  8.5942e-02, -5.5189e-01,  3.6553e-02,  4.7352e-01,
          2.3638e-01, -1.8196e-01, -2.1541e-01,  3.6131e-01, -3.9962e-01,
          1.9489e-01, -5.6697e-03,  2.8692e-01,  2.2621e-02, -1.2359e-01,
         -1.7374e-01, -8.6386e-02,  2.4837e-01,  3.5563e-01, -4.5123e-02,
         -1.4637e-01,  4.3591e-02,  3.6384e-02, -9.3406e-02, -1.9010e-01,
         -1.4385e-01, -2.9371e-01, -4.4998e-03, -2.4717e-01,  8.1643e-02,
          7.0178e-01,  1.9150e-01]], device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
73000 特征值优化 tensor(0.6469, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1607e+00, -4.2018e-01, -3.0792e-02, -5.8940e-01, -8.6485e-01,
         -1.6856e-02, -2.0064e-01,  9.1682e-01, -1.1160e+00, -9.1206e-01,
          6.3717e-01, -8.8421e-01, -1.0297e-01,  2.3218e-02,  1.1075e-01,
          1.0568e-01,  6.2491e-02,  1.7072e-01, -5.5768e-03, -2.6877e-02,
         -6.1702e-02,  1.4575e-02, -1.2662e-02,  6.8355e-02,  2.5394e-02,
         -1.6827e-01, -1.6159e-01,  7.7098e-02,  1.9199e-02, -3.2143e-02,
          2.3536e-01, -1.5241e-02, -2.9570e-02,  1.7881e-01, -2.8131e-02,
         -4.9312e-04, -8.5907e-02, -6.8141e-02, -7.6659e-03,  9.4745e-02,
         -3.5722e-02,  9.0550e-02, -5.4459e-01,  3.7174e-02,  4.7451e-01,
          2.4672e-01, -1.8003e-01, -2.0783e-01,  3.5943e-01, -3.9443e-01,
          1.6759e-01,  8.3542e-04,  2.8666e-01,  2.6989e-02, -1.3728e-01,
         -1.7938e-01, -9.1090e-02,  2.5100e-01,  3.5840e-01, -4.7241e-02,
         -1.4333e-01,  4.7905e-02,  3.4559e-02, -9.3771e-02, -1.8878e-01,
         -1.4096e-01, -2.9462e-01, -4.2774e-03, -2.4502e-01,  7.2858e-02,
          7.0290e-01,  1.8776e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
74000 特征值优化 tensor(0.6444, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1657, -0.4323, -0.0454, -0.5837, -0.8658, -0.0213, -0.1718,  0.9464,
         -1.1177, -0.9076,  0.6688, -0.8897, -0.1020,  0.0177,  0.1186,  0.0965,
          0.0526,  0.1500,  0.0037, -0.0128, -0.0599,  0.0157, -0.0103,  0.0773,
          0.0060, -0.1584, -0.1644,  0.0795, -0.0049, -0.0333,  0.2390, -0.0447,
         -0.0107,  0.1785, -0.0252, -0.0053, -0.0800, -0.0664, -0.0017,  0.0882,
         -0.0486,  0.0917, -0.5528,  0.0328,  0.4779,  0.2405, -0.1756, -0.2023,
          0.3563, -0.3913,  0.1516,  0.0089,  0.2820,  0.0296, -0.1162, -0.1793,
         -0.0902,  0.2514,  0.3606, -0.0507, -0.1731,  0.0399,  0.0206, -0.0941,
         -0.1926, -0.1427, -0.2970, -0.0024, -0.2139,  0.0749,  0.6964,  0.1852]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
75000 特征值优化 tensor(0.6393, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1905e+00, -3.9658e-01, -4.9907e-02, -5.8617e-01, -8.6586e-01,
         -9.2878e-03, -1.7381e-01,  9.2148e-01, -1.1245e+00, -8.1320e-01,
          6.4306e-01, -8.8540e-01, -1.0294e-01, -1.7802e-02,  1.3232e-01,
          1.1881e-01,  4.9363e-02,  1.4130e-01, -1.7764e-02, -4.3406e-02,
         -6.1755e-02,  1.5027e-02, -8.6656e-04,  6.7418e-02,  8.9350e-03,
         -1.5959e-01, -1.5078e-01,  1.0549e-01,  6.0025e-03, -3.2647e-02,
          2.4011e-01, -3.2894e-02, -9.9207e-03,  1.7972e-01, -4.5406e-02,
         -1.4814e-02, -9.4873e-02, -6.7863e-02, -2.2084e-03,  9.2488e-02,
         -2.8041e-02,  8.5729e-02, -5.5754e-01,  3.5057e-02,  4.7557e-01,
          2.3860e-01, -1.8270e-01, -2.0048e-01,  3.5926e-01, -3.9283e-01,
          1.5459e-01,  7.2880e-03,  2.6586e-01,  3.6588e-02, -7.7245e-02,
         -1.9449e-01, -8.6850e-02,  2.4924e-01,  3.6202e-01, -5.2131e-02,
         -1.1051e-01,  4.2662e-02,  5.6607e-02, -1.0493e-01, -1.9085e-01,
         -1.5259e-01, -3.3134e-01, -9.9820e-04, -2.4261e-01,  5.9738e-02,
          7.0413e-01,  1.9788e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
76000 特征值优化 tensor(0.6376, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2140e+00, -3.6757e-01, -5.1866e-02, -6.1397e-01, -8.7115e-01,
         -1.6053e-02, -1.9708e-01,  9.3644e-01, -1.1245e+00, -8.1396e-01,
          6.7095e-01, -8.8215e-01, -1.0245e-01, -3.1772e-02,  1.1404e-01,
          1.6698e-01,  5.7443e-02,  1.2999e-01, -3.9648e-02, -4.4832e-02,
         -6.2501e-02,  1.4625e-02,  1.6892e-02,  7.2899e-02, -1.2856e-02,
         -1.5480e-01, -1.5250e-01,  9.9487e-02,  4.3674e-02, -3.2453e-02,
          2.4106e-01, -2.9936e-02, -8.3594e-03,  1.7865e-01, -3.7102e-02,
         -1.4697e-02, -9.7554e-02, -5.9116e-02, -4.0520e-04,  9.0905e-02,
         -2.6392e-02,  8.4683e-02, -5.7304e-01,  4.0320e-02,  4.7838e-01,
          2.1364e-01, -1.7786e-01, -1.9887e-01,  3.6198e-01, -3.9562e-01,
          1.8276e-01, -2.5310e-04,  2.6348e-01,  3.7663e-02, -1.2654e-01,
         -1.5233e-01, -8.6317e-02,  2.4830e-01,  3.6005e-01, -4.9566e-02,
         -4.2017e-02,  1.7966e-02,  7.6115e-02, -1.0490e-01, -1.9010e-01,
         -1.5344e-01, -3.3654e-01, -5.7133e-04, -3.0332e-01,  7.6531e-02,
          7.0128e-01,  2.0093e-01]], device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
77000 特征值优化 tensor(0.6400, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1897e+00, -3.9779e-01, -6.5988e-02, -6.0478e-01, -8.7550e-01,
         -4.3488e-03, -1.7952e-01,  9.3618e-01, -1.1237e+00, -8.1766e-01,
          6.6806e-01, -8.7722e-01, -1.0258e-01, -6.2567e-03,  1.2942e-01,
          1.7599e-01,  3.0378e-02,  1.2093e-01, -7.2612e-02, -3.7369e-02,
         -6.2153e-02,  1.4736e-02,  8.3687e-03,  9.3145e-02, -2.0120e-02,
         -1.5880e-01, -1.5534e-01,  1.0218e-01,  1.7273e-02, -3.3512e-02,
          2.3957e-01, -2.6684e-02, -1.9709e-02,  1.7831e-01, -2.8947e-02,
         -4.8363e-04, -9.6096e-02, -6.3742e-02,  1.1239e-03,  8.8712e-02,
         -2.5165e-02,  8.4053e-02, -5.5850e-01,  3.7579e-02,  4.7500e-01,
          2.4452e-01, -1.8685e-01, -1.9332e-01,  3.6087e-01, -3.9276e-01,
          1.6684e-01,  7.9983e-03,  2.5211e-01,  4.5871e-02, -1.0150e-01,
         -1.6134e-01, -9.4852e-02,  2.5004e-01,  3.5550e-01, -4.7421e-02,
         -8.2609e-02,  3.8634e-02,  6.4895e-02, -1.0224e-01, -1.8766e-01,
         -1.5581e-01, -3.4317e-01,  2.6009e-03, -2.6043e-01,  6.0012e-02,
          7.0181e-01,  2.0144e-01]], device='cuda:0') tensor(0.2054, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
78000 特征值优化 tensor(0.6407, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1806, -0.4156, -0.0285, -0.6023, -0.8796, -0.0107, -0.1574,  0.9286,
         -1.1169, -0.8730,  0.6850, -0.8914, -0.1020,  0.0238,  0.0384,  0.1120,
          0.0515,  0.1726, -0.0222,  0.0385, -0.0624,  0.0146,  0.0166,  0.1039,
         -0.0172, -0.1707, -0.1121,  0.1272,  0.0288, -0.0322,  0.2412, -0.0277,
         -0.0388,  0.1786, -0.0222, -0.0024, -0.0907, -0.0620, -0.0041,  0.0927,
         -0.0281,  0.0884, -0.5535,  0.0390,  0.4751,  0.2466, -0.1833, -0.2082,
          0.3627, -0.3977,  0.1918, -0.0078,  0.2885,  0.0243, -0.1498, -0.1615,
         -0.0930,  0.2504,  0.3590, -0.0457, -0.1394,  0.0517,  0.0281, -0.0866,
         -0.1895, -0.1453, -0.3132, -0.0028, -0.2593,  0.0793,  0.7054,  0.1946]],
       device='cuda:0') tensor(0.2028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
79000 特征值优化 tensor(0.6452, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1656, -0.4118, -0.0289, -0.5931, -0.8726, -0.0109, -0.1593,  0.9465,
         -1.0927, -0.9075,  0.6909, -0.9042, -0.1027, -0.0205, -0.0169,  0.1257,
          0.0882,  0.1684, -0.0097, -0.0107, -0.0618,  0.0141,  0.0146,  0.0965,
         -0.0308, -0.1327, -0.1317,  0.1117,  0.0294, -0.0321,  0.2409, -0.0242,
         -0.0238,  0.1790, -0.0296, -0.0050, -0.0808, -0.0621, -0.0042,  0.0931,
         -0.0365,  0.0859, -0.5520,  0.0383,  0.4803,  0.2337, -0.1757, -0.2049,
          0.3577, -0.3946,  0.1839, -0.0058,  0.2802,  0.0282, -0.1210, -0.1791,
         -0.0902,  0.2497,  0.3559, -0.0448, -0.1536,  0.0459,  0.0328, -0.0945,
         -0.1987, -0.1364, -0.3022, -0.0067, -0.2403,  0.0769,  0.7066,  0.1851]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
80000 特征值优化 tensor(0.6383, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1882e+00, -3.7496e-01, -2.2748e-02, -6.0873e-01, -9.0732e-01,
         -1.0386e-02, -1.7194e-01,  9.2093e-01, -1.1023e+00, -8.8780e-01,
          6.5117e-01, -9.2691e-01, -1.0439e-01, -4.2986e-02,  1.3965e-01,
          1.8468e-01,  5.4513e-02,  1.3813e-01, -6.7247e-02, -3.8217e-02,
         -6.7247e-02,  1.4929e-02, -1.0920e-02,  1.0066e-01, -1.2112e-02,
         -1.1288e-01, -1.6395e-01,  8.8494e-02,  3.0831e-02, -3.3307e-02,
          2.4118e-01, -3.3039e-02, -1.0534e-02,  1.7951e-01, -1.9792e-02,
          1.2795e-02, -9.8365e-02, -6.8877e-02, -8.7406e-03,  9.4227e-02,
         -2.0050e-02,  9.8240e-02, -5.5540e-01,  4.6170e-02,  4.8308e-01,
          2.5745e-01, -1.9596e-01, -2.1368e-01,  3.6144e-01, -3.9834e-01,
          2.0002e-01, -6.6059e-03,  2.9734e-01,  2.8354e-02, -4.4913e-02,
         -2.1870e-01, -8.8762e-02,  2.5002e-01,  3.6119e-01, -4.7726e-02,
         -1.1523e-01,  5.2302e-02,  5.1688e-02, -9.7057e-02, -1.8644e-01,
         -1.4532e-01, -3.0843e-01, -5.1069e-04, -2.6211e-01,  6.1589e-02,
          7.0824e-01,  1.7986e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
81000 特征值优化 tensor(0.6381, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1850e+00, -4.2859e-01, -2.0308e-02, -5.9701e-01, -9.0070e-01,
         -3.3744e-03, -1.7758e-01,  9.4180e-01, -1.1034e+00, -9.0681e-01,
          6.9324e-01, -9.2708e-01, -1.0253e-01,  5.1615e-02,  1.6628e-02,
          9.4650e-02,  9.8442e-02,  1.8515e-01, -6.7891e-03,  3.8602e-02,
         -6.5843e-02,  1.4546e-02,  8.1187e-03,  9.3860e-02, -3.0654e-04,
         -1.8035e-01, -8.8056e-02,  1.3098e-01,  2.6070e-02, -3.2121e-02,
          2.4190e-01,  4.1722e-03, -6.5923e-02,  1.8144e-01, -1.0240e-02,
         -1.2164e-02, -7.7181e-02, -6.2912e-02, -1.3173e-02,  1.0010e-01,
         -4.5246e-02,  1.0390e-01, -5.5346e-01,  4.2951e-02,  4.8110e-01,
          2.5332e-01, -1.8265e-01, -2.1192e-01,  3.6164e-01, -3.9674e-01,
          1.8330e-01, -5.0360e-03,  3.0159e-01,  2.1093e-02, -1.3747e-01,
         -1.6717e-01, -8.1497e-02,  2.4837e-01,  3.5869e-01, -4.9592e-02,
         -1.6477e-01,  3.9494e-02,  2.2532e-02, -9.0275e-02, -1.9973e-01,
         -1.3444e-01, -2.9524e-01,  4.4512e-03, -2.3814e-01,  8.9038e-02,
          7.1182e-01,  1.7788e-01]], device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
82000 特征值优化 tensor(0.6402, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1795e+00, -3.9836e-01, -2.6947e-02, -6.0114e-01, -9.1451e-01,
         -1.6781e-02, -1.7217e-01,  9.3055e-01, -1.0922e+00, -9.1443e-01,
          6.6870e-01, -9.2259e-01, -1.0122e-01, -1.2367e-02, -2.5403e-03,
          1.1588e-01,  9.0515e-02,  1.6343e-01, -6.0814e-03, -3.4597e-02,
         -6.3133e-02,  1.5493e-02,  1.1837e-02,  8.6491e-02, -1.7442e-02,
         -1.3171e-01, -1.7142e-01,  7.4237e-02,  1.9635e-02, -3.3523e-02,
          2.4198e-01, -4.2922e-02, -1.5815e-02,  1.7860e-01, -3.7573e-02,
         -2.0205e-03, -8.9874e-02, -6.9637e-02, -4.8378e-03,  8.9731e-02,
         -3.3858e-02,  8.9713e-02, -5.5008e-01,  3.6454e-02,  4.7338e-01,
          2.4236e-01, -1.8607e-01, -2.1034e-01,  3.5950e-01, -3.9540e-01,
          1.7773e-01,  9.9360e-04,  3.1478e-01,  1.7710e-02, -1.2691e-01,
         -1.8607e-01, -9.3541e-02,  2.5175e-01,  3.6073e-01, -3.9344e-02,
         -1.7081e-01,  6.2129e-02,  1.4369e-02, -8.5127e-02, -1.8318e-01,
         -1.4227e-01, -3.0344e-01, -1.1367e-02, -2.4854e-01,  6.9126e-02,
          7.0588e-01,  1.8695e-01]], device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
83000 特征值优化 tensor(0.6538, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1530, -0.4066, -0.0176, -0.6010, -0.8612, -0.0020, -0.1812,  0.8987,
         -1.0849, -0.8916,  0.6509, -0.8951, -0.1048, -0.0336,  0.0936,  0.1471,
          0.0404,  0.1313, -0.0399, -0.0087, -0.0620,  0.0134,  0.0257,  0.1030,
         -0.0276, -0.1171, -0.1535,  0.1002,  0.0343, -0.0302,  0.2362, -0.0295,
         -0.0310,  0.1797, -0.0150,  0.0020, -0.0911, -0.0594, -0.0070,  0.0911,
         -0.0227,  0.0935, -0.5500,  0.0391,  0.4783,  0.2431, -0.1768, -0.2086,
          0.3591, -0.3964,  0.1870, -0.0090,  0.2773,  0.0275, -0.1383, -0.1699,
         -0.0857,  0.2476,  0.3607, -0.0506, -0.1138,  0.0541,  0.0426, -0.0790,
         -0.1854, -0.1479, -0.3178, -0.0058, -0.2807,  0.0883,  0.6920,  0.1803]],
       device='cuda:0') tensor(0.2029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
84000 特征值优化 tensor(0.6361, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1858e+00, -4.1056e-01, -2.6487e-02, -5.9708e-01, -9.0030e-01,
          1.0127e-02, -1.7498e-01,  9.5528e-01, -1.1060e+00, -9.0436e-01,
          6.8981e-01, -9.1564e-01, -1.0240e-01,  5.3798e-02, -3.1273e-02,
          1.1575e-01,  1.0083e-01,  1.8432e-01, -6.2352e-04,  4.0890e-02,
         -6.2337e-02,  1.4564e-02,  1.2675e-04,  8.6996e-02,  7.6016e-03,
         -1.7097e-01, -1.1936e-01,  1.3825e-01,  2.5184e-02, -3.1839e-02,
          2.4116e-01,  3.1682e-04, -5.5988e-02,  1.8358e-01, -2.2566e-02,
         -2.8802e-03, -7.8375e-02, -6.2255e-02, -5.8651e-03,  9.1261e-02,
         -4.2159e-02,  9.0442e-02, -5.5541e-01,  3.6270e-02,  4.7347e-01,
          2.4748e-01, -1.8431e-01, -2.1019e-01,  3.6122e-01, -3.9714e-01,
          1.8211e-01, -4.1019e-03,  2.8383e-01,  3.2385e-02, -1.2552e-01,
         -1.6790e-01, -9.5654e-02,  2.5557e-01,  3.5761e-01, -3.9297e-02,
         -1.4949e-01,  3.7098e-02,  3.9878e-02, -9.4184e-02, -1.7489e-01,
         -1.4835e-01, -3.1132e-01, -4.8409e-03, -2.3341e-01,  8.3143e-02,
          6.9979e-01,  1.8953e-01]], device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
85000 特征值优化 tensor(0.6385, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1636, -0.4115, -0.0209, -0.5970, -0.9209, -0.0082, -0.2009,  0.9366,
         -1.0934, -0.8907,  0.6901, -0.9145, -0.1039,  0.0166,  0.0630,  0.0821,
          0.0962,  0.2021, -0.0491,  0.0420, -0.0637,  0.0159,  0.0298,  0.0738,
         -0.0095, -0.1789, -0.1225,  0.1280,  0.0271, -0.0308,  0.2430, -0.0035,
         -0.0517,  0.1785, -0.0362,  0.0127, -0.0796, -0.0647, -0.0060,  0.0907,
         -0.0392,  0.0901, -0.5433,  0.0328,  0.4708,  0.2536, -0.1907, -0.2097,
          0.3598, -0.3933,  0.1871, -0.0045,  0.3190,  0.0156, -0.1478, -0.1610,
         -0.0979,  0.2527,  0.3582, -0.0391, -0.1473,  0.0365,  0.0309, -0.0915,
         -0.1806, -0.1455, -0.3182, -0.0085, -0.2450,  0.0901,  0.7024,  0.1908]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
86000 特征值优化 tensor(0.6378, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1926e+00, -3.7989e-01, -2.3814e-02, -6.0654e-01, -9.1310e-01,
         -1.5797e-03, -1.6581e-01,  9.1694e-01, -1.1018e+00, -8.9640e-01,
          6.8243e-01, -9.4034e-01, -1.0191e-01,  1.0258e-02,  1.9735e-02,
          1.0143e-01,  1.1962e-01,  1.9941e-01, -4.0250e-03,  3.7149e-02,
         -6.7781e-02,  1.4693e-02,  3.9276e-03,  8.9293e-02,  1.0045e-02,
         -1.7596e-01, -1.0601e-01,  1.3435e-01,  2.7943e-02, -3.2128e-02,
          2.4487e-01, -5.3734e-04, -6.2920e-02,  1.8207e-01, -1.6071e-02,
          8.5530e-03, -9.9887e-02, -6.8316e-02, -7.7618e-03,  9.1981e-02,
         -2.8635e-02,  9.7437e-02, -5.5922e-01,  5.0024e-02,  4.8298e-01,
          2.4570e-01, -1.9145e-01, -2.1124e-01,  3.6099e-01, -3.9628e-01,
          1.9041e-01, -6.3126e-03,  3.0268e-01,  1.7655e-02, -1.4671e-01,
         -1.9210e-01, -8.7103e-02,  2.5235e-01,  3.6014e-01, -4.1055e-02,
         -1.7727e-01,  5.4488e-02,  1.3832e-02, -9.4526e-02, -1.7796e-01,
         -1.4608e-01, -3.1236e-01, -1.5177e-03, -2.3666e-01,  7.7966e-02,
          7.0600e-01,  1.8141e-01]], device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
87000 特征值优化 tensor(0.6397, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1627, -0.3937, -0.0187, -0.6007, -0.8686,  0.0045, -0.1764,  0.9281,
         -1.0829, -0.9110,  0.6696, -0.9503, -0.1050,  0.0169,  0.0722,  0.1386,
          0.0580,  0.1594, -0.0186, -0.0396, -0.0655,  0.0155,  0.0220,  0.0999,
         -0.0231, -0.1092, -0.1707,  0.0941,  0.0295, -0.0343,  0.2402, -0.0344,
         -0.0123,  0.1814, -0.0191,  0.0045, -0.0848, -0.0643, -0.0140,  0.0958,
         -0.0344,  0.1037, -0.5432,  0.0427,  0.4805,  0.2509, -0.1864, -0.2154,
          0.3619, -0.3992,  0.1957, -0.0057,  0.2635,  0.0376, -0.0797, -0.1842,
         -0.0927,  0.2519,  0.3606, -0.0444, -0.1379,  0.0444,  0.0442, -0.0990,
         -0.1846, -0.1383, -0.3068, -0.0029, -0.2310,  0.0682,  0.7034,  0.1750]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
88000 特征值优化 tensor(0.6504, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1734e+00, -4.4756e-01, -1.9101e-02, -5.9885e-01, -8.9313e-01,
         -3.0939e-03, -1.7260e-01,  9.3363e-01, -1.0789e+00, -8.9310e-01,
          6.7825e-01, -9.3553e-01, -9.8684e-02, -1.3025e-02,  3.2761e-02,
          8.4130e-02,  9.1243e-02,  1.7123e-01,  3.7446e-02, -4.9480e-04,
         -6.2045e-02,  1.4163e-02,  2.4377e-03,  1.0134e-01, -1.9984e-02,
         -1.3804e-01, -1.2499e-01,  1.0263e-01,  3.1604e-02, -3.2095e-02,
          2.3891e-01, -2.1277e-02, -3.0082e-02,  1.7962e-01, -1.3251e-02,
         -8.1436e-03, -7.8936e-02, -7.3006e-02, -1.3027e-02,  9.8282e-02,
         -5.9780e-02,  1.0166e-01, -5.5247e-01,  4.0133e-02,  4.7686e-01,
          2.4204e-01, -1.8019e-01, -2.1151e-01,  3.6114e-01, -3.9587e-01,
          1.9276e-01, -9.0453e-03,  3.0950e-01,  2.1460e-02, -1.1792e-01,
         -1.8675e-01, -7.7257e-02,  2.4327e-01,  3.6552e-01, -5.0413e-02,
         -1.8739e-01,  4.1334e-02,  7.0261e-03, -9.0342e-02, -1.8163e-01,
         -1.3930e-01, -3.1097e-01, -6.4775e-03, -2.4282e-01,  9.7453e-02,
          6.9142e-01,  1.7283e-01]], device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
89000 特征值优化 tensor(0.6341, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1896e+00, -4.1198e-01, -2.6802e-02, -5.8843e-01, -8.9746e-01,
         -1.3126e-02, -1.6677e-01,  9.3101e-01, -1.0740e+00, -9.3039e-01,
          6.7566e-01, -9.3434e-01, -1.0039e-01, -5.0690e-02,  1.0681e-01,
          1.3544e-01,  1.0213e-01,  1.6720e-01, -2.8278e-02, -3.7296e-02,
         -6.4049e-02,  1.5630e-02,  7.9180e-03,  9.8261e-02, -1.7023e-02,
         -9.8226e-02, -1.7418e-01,  7.8718e-02,  2.6125e-02, -3.4634e-02,
          2.4308e-01, -4.0116e-02, -6.5231e-04,  1.7890e-01, -2.2427e-02,
         -1.5552e-02, -9.0243e-02, -6.2831e-02, -7.4591e-03,  8.8823e-02,
         -2.5269e-02,  9.3613e-02, -5.5733e-01,  4.1281e-02,  4.7676e-01,
          2.4449e-01, -1.8623e-01, -2.1097e-01,  3.6031e-01, -3.9738e-01,
          1.8200e-01, -1.4675e-03,  2.8773e-01,  2.6320e-02, -1.2079e-01,
         -1.7067e-01, -8.7697e-02,  2.4774e-01,  3.5495e-01, -3.6586e-02,
         -1.4075e-01,  4.6875e-02,  4.5183e-02, -9.5883e-02, -1.8016e-01,
         -1.4056e-01, -3.1346e-01, -9.2077e-03, -2.4015e-01,  7.5379e-02,
          6.9316e-01,  1.8885e-01]], device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
90000 特征值优化 tensor(0.6523, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1669e+00, -4.1137e-01, -1.6764e-02, -5.9908e-01, -8.5532e-01,
         -1.1132e-02, -2.1612e-01,  8.9020e-01, -1.0680e+00, -9.0574e-01,
          6.3626e-01, -9.0047e-01, -1.0323e-01, -1.1834e-02,  9.0695e-02,
          9.9389e-02,  5.0247e-02,  1.4921e-01, -1.5980e-02,  4.7503e-04,
         -6.1862e-02,  1.4492e-02,  1.4449e-02,  9.9282e-02, -2.2527e-02,
         -1.2762e-01, -1.7268e-01,  9.9847e-02,  3.0999e-02, -3.1962e-02,
          2.3925e-01, -2.4289e-02, -2.8026e-02,  1.8052e-01, -2.5648e-02,
          1.2371e-02, -8.3466e-02, -6.4538e-02, -1.0360e-02,  9.2333e-02,
         -4.0624e-02,  9.8743e-02, -5.4939e-01,  3.8504e-02,  4.7798e-01,
          2.3990e-01, -1.7863e-01, -2.1209e-01,  3.5835e-01, -3.9463e-01,
          1.8940e-01, -7.6686e-03,  2.7634e-01,  3.3818e-02, -1.3838e-01,
         -1.7559e-01, -8.7199e-02,  2.5132e-01,  3.6197e-01, -4.4882e-02,
         -1.3965e-01,  5.3262e-02,  3.1396e-02, -8.8348e-02, -1.6940e-01,
         -1.4175e-01, -3.1911e-01, -1.8985e-02, -2.4815e-01,  8.0007e-02,
          6.7078e-01,  1.7150e-01]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
91000 特征值优化 tensor(0.6361, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1625e+00, -4.2179e-01, -1.7866e-02, -5.9441e-01, -8.8432e-01,
          6.6573e-03, -1.6812e-01,  9.3642e-01, -1.0677e+00, -9.5195e-01,
          6.7781e-01, -9.5202e-01, -1.0069e-01, -4.7630e-02,  1.0450e-01,
          1.3197e-01,  6.7374e-02,  1.4928e-01, -1.7438e-02, -3.5495e-02,
         -6.3981e-02,  1.5750e-02,  2.2409e-02,  1.0230e-01, -1.8685e-02,
         -9.7048e-02, -1.7608e-01,  8.4301e-02,  2.6457e-02, -3.4473e-02,
          2.4184e-01, -5.8109e-02,  1.8347e-02,  1.8153e-01, -3.6354e-02,
          1.5575e-02, -9.0092e-02, -6.8523e-02,  3.5811e-04,  7.8930e-02,
         -2.8853e-02,  8.2518e-02, -5.4400e-01,  3.7977e-02,  4.7433e-01,
          2.5789e-01, -1.9215e-01, -2.1557e-01,  3.5950e-01, -3.9662e-01,
          1.8631e-01, -2.5437e-03,  2.9034e-01,  2.2120e-02, -9.2122e-02,
         -1.8510e-01, -1.1069e-01,  2.6111e-01,  3.6169e-01, -3.0315e-02,
         -1.5839e-01,  5.9210e-02,  3.2271e-02, -9.1257e-02, -1.6519e-01,
         -1.4767e-01, -3.0347e-01, -2.4022e-02, -2.3046e-01,  6.8522e-02,
          6.9911e-01,  1.8314e-01]], device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
92000 特征值优化 tensor(0.6877, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1889, -0.3774, -0.0173, -0.5967, -0.9239, -0.0210, -0.1735,  0.9346,
         -1.0646, -0.9383,  0.6824, -0.9435, -0.1019,  0.0821,  0.0515,  0.0928,
          0.0880,  0.1806,  0.0073, -0.0355, -0.0622,  0.0156,  0.0097,  0.0978,
         -0.0283, -0.0979, -0.2197,  0.0552,  0.0250, -0.0343,  0.2430, -0.0600,
          0.0083,  0.1786, -0.0242, -0.0057, -0.0929, -0.0677, -0.0023,  0.0837,
         -0.0236,  0.0878, -0.5561,  0.0348,  0.4745,  0.2294, -0.1843, -0.2151,
          0.3573, -0.3925,  0.1867, -0.0034,  0.3092,  0.0209, -0.1485, -0.1559,
         -0.0881,  0.2510,  0.3543, -0.0317, -0.1505,  0.0654,  0.0295, -0.0862,
         -0.1705, -0.1450, -0.3198, -0.0197, -0.2362,  0.0567,  0.6839,  0.1937]],
       device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
93000 特征值优化 tensor(0.6362, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1922, -0.3571, -0.0149, -0.6031, -0.8996, -0.0170, -0.2127,  0.9513,
         -1.0803, -0.8980,  0.6805, -0.9329, -0.1023,  0.0395,  0.0509,  0.0649,
          0.1108,  0.2529, -0.0063, -0.0374, -0.0619,  0.0157, -0.0178,  0.0799,
          0.0091, -0.1487, -0.1828,  0.0533,  0.0139, -0.0334,  0.2417, -0.0469,
         -0.0153,  0.1791, -0.0356, -0.0031, -0.1020, -0.0600, -0.0017,  0.0828,
         -0.0248,  0.0860, -0.5586,  0.0377,  0.4745,  0.2233, -0.1860, -0.2176,
          0.3586, -0.3963,  0.1707,  0.0056,  0.2997,  0.0226, -0.1473, -0.1599,
         -0.0914,  0.2519,  0.3592, -0.0356, -0.0794,  0.0752,  0.0504, -0.0738,
         -0.1611, -0.1501, -0.3313, -0.0175, -0.2920,  0.0384,  0.6802,  0.1962]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
94000 特征值优化 tensor(0.6517, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1713e+00, -3.8575e-01, -1.7449e-02, -5.9887e-01, -8.5188e-01,
         -2.3240e-02, -1.8859e-01,  8.9890e-01, -1.0576e+00, -8.5840e-01,
          6.4133e-01, -9.2882e-01, -1.0336e-01,  2.5990e-02,  9.7060e-02,
          1.2770e-01,  7.3666e-02,  1.7488e-01, -2.2406e-02, -6.8027e-03,
         -6.0918e-02,  1.4602e-02,  5.6610e-04,  7.5109e-02, -7.0106e-04,
         -1.4911e-01, -1.4187e-01,  1.1017e-01,  6.3571e-03, -3.2008e-02,
          2.4107e-01, -3.3261e-02, -2.1286e-02,  1.7833e-01, -3.4362e-02,
         -5.2637e-03, -8.5353e-02, -6.4492e-02, -9.6598e-03,  9.2055e-02,
         -3.9558e-02,  9.0063e-02, -5.5573e-01,  3.9544e-02,  4.7852e-01,
          2.1627e-01, -1.7279e-01, -2.1303e-01,  3.5495e-01, -3.9221e-01,
          1.6379e-01,  6.2784e-03,  2.7600e-01,  3.4337e-02, -1.3143e-01,
         -1.6906e-01, -8.4633e-02,  2.4845e-01,  3.6120e-01, -4.7719e-02,
         -1.5106e-01,  5.9333e-02,  3.5454e-02, -9.0213e-02, -1.7989e-01,
         -1.5242e-01, -3.4690e-01, -4.6791e-03, -2.3409e-01,  5.9902e-02,
          6.9760e-01,  1.8721e-01]], device='cuda:0') tensor(0.2036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
95000 特征值优化 tensor(0.6391, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1702, -0.4211, -0.0494, -0.5841, -0.8612, -0.0187, -0.1970,  0.8967,
         -1.0835, -0.8668,  0.6211, -0.9225, -0.1029,  0.0167,  0.0998,  0.0599,
          0.1566,  0.2235,  0.0774, -0.0405, -0.0620,  0.0149, -0.0090,  0.0753,
          0.0068, -0.1505, -0.1737,  0.0765, -0.0014, -0.0324,  0.2396, -0.0374,
         -0.0031,  0.1788, -0.0316, -0.0015, -0.0940, -0.0686, -0.0066,  0.0867,
         -0.0335,  0.0894, -0.5511,  0.0392,  0.4766,  0.2502, -0.1823, -0.2008,
          0.3577, -0.3931,  0.1531,  0.0088,  0.2477,  0.0468, -0.1260, -0.1565,
         -0.0886,  0.2507,  0.3598, -0.0378, -0.0938,  0.0354,  0.0750, -0.1134,
         -0.1563, -0.1555, -0.3459, -0.0109, -0.2239,  0.0491,  0.6735,  0.1978]],
       device='cuda:0') tensor(0.2115, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
96000 特征值优化 tensor(0.6394, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1706, -0.4103, -0.0508, -0.5849, -0.8685, -0.0178, -0.1956,  0.9104,
         -1.0761, -0.8741,  0.6378, -0.9240, -0.1033,  0.0395,  0.0960,  0.0908,
          0.0993,  0.1853,  0.0476, -0.0369, -0.0613,  0.0146, -0.0057,  0.0759,
          0.0045, -0.1541, -0.1767,  0.0755, -0.0090, -0.0321,  0.2415, -0.0400,
          0.0034,  0.1786, -0.0305, -0.0018, -0.0825, -0.0674, -0.0094,  0.0900,
         -0.0428,  0.0934, -0.5518,  0.0390,  0.4767,  0.2393, -0.1791, -0.1990,
          0.3568, -0.3921,  0.1495,  0.0102,  0.2755,  0.0306, -0.1279, -0.1649,
         -0.0903,  0.2507,  0.3603, -0.0386, -0.1481,  0.0456,  0.0503, -0.1046,
         -0.1644, -0.1506, -0.3384, -0.0104, -0.1983,  0.0559,  0.6792,  0.1932]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
97000 特征值优化 tensor(0.6392, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1722e+00, -4.5467e-01, -5.4023e-02, -5.8692e-01, -8.8925e-01,
         -4.4482e-03, -1.8074e-01,  8.8347e-01, -1.0930e+00, -8.3673e-01,
          6.4696e-01, -9.1887e-01, -1.0092e-01, -4.5187e-02,  1.5450e-01,
          6.5013e-02,  9.2785e-02,  1.7885e-01,  7.6828e-03, -4.1388e-02,
         -6.4129e-02,  1.4830e-02, -1.2569e-02,  7.3552e-02,  1.4124e-02,
         -1.4020e-01, -1.7566e-01,  8.4904e-02, -4.2831e-04, -3.2496e-02,
          2.4338e-01, -3.9578e-02,  7.3942e-03,  1.7957e-01, -4.6296e-02,
          4.6233e-03, -1.0017e-01, -6.7812e-02,  7.3425e-04,  8.0854e-02,
         -2.2984e-02,  8.2209e-02, -5.4982e-01,  4.0843e-02,  4.7909e-01,
          2.6505e-01, -1.8579e-01, -1.9836e-01,  3.5754e-01, -3.9307e-01,
          1.5231e-01,  1.0141e-02,  2.8681e-01,  2.4669e-02, -1.4014e-01,
         -1.7624e-01, -1.0189e-01,  2.5510e-01,  3.5954e-01, -3.6608e-02,
         -1.0662e-01,  5.2858e-02,  7.1040e-02, -1.0737e-01, -1.5511e-01,
         -1.6308e-01, -3.5828e-01, -1.3485e-02, -2.5407e-01,  5.3068e-02,
          6.8308e-01,  2.0149e-01]], device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
98000 特征值优化 tensor(0.6380, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1692, -0.4281, -0.0487, -0.5843, -0.8678, -0.0170, -0.1908,  0.8910,
         -1.0804, -0.8566,  0.6516, -0.9281, -0.1025,  0.0247,  0.1414,  0.0801,
          0.0536,  0.1781,  0.0018, -0.0416, -0.0633,  0.0146, -0.0067,  0.0706,
          0.0151, -0.1436, -0.1977,  0.0625, -0.0138, -0.0321,  0.2416, -0.0376,
          0.0036,  0.1786, -0.0330, -0.0068, -0.0840, -0.0674, -0.0059,  0.0866,
         -0.0403,  0.0891, -0.5506,  0.0398,  0.4770,  0.2611, -0.1877, -0.2000,
          0.3558, -0.3918,  0.1472,  0.0116,  0.2771,  0.0300, -0.0949, -0.1763,
         -0.0903,  0.2507,  0.3586, -0.0396, -0.1385,  0.0457,  0.0621, -0.1080,
         -0.1653, -0.1552, -0.3486, -0.0098, -0.2138,  0.0573,  0.6836,  0.1972]],
       device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
99000 特征值优化 tensor(0.6383, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1743, -0.4114, -0.0464, -0.5800, -0.8675, -0.0190, -0.2126,  0.9240,
         -1.0766, -0.8810,  0.6517, -0.9267, -0.1026,  0.0297,  0.1216,  0.0834,
          0.1077,  0.1878,  0.0401, -0.0395, -0.0618,  0.0153, -0.0115,  0.0774,
          0.0041, -0.1554, -0.1735,  0.0698, -0.0068, -0.0328,  0.2399, -0.0484,
          0.0197,  0.1786, -0.0280, -0.0014, -0.0822, -0.0713, -0.0095,  0.0896,
         -0.0430,  0.0944, -0.5516,  0.0383,  0.4752,  0.2474, -0.1838, -0.2034,
          0.3596, -0.3938,  0.1510,  0.0091,  0.2905,  0.0251, -0.0836, -0.1853,
         -0.0916,  0.2515,  0.3611, -0.0365, -0.1443,  0.0496,  0.0476, -0.0952,
         -0.1627, -0.1501, -0.3356, -0.0112, -0.2281,  0.0657,  0.6784,  0.1935]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
100000 特征值优化 tensor(0.6369, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2011, -0.3777, -0.0467, -0.5794, -0.8710, -0.0165, -0.1987,  0.9088,
         -1.0858, -0.8661,  0.6598, -0.9248, -0.1033,  0.1030,  0.1012,  0.2132,
          0.0501,  0.1703, -0.0544,  0.0457, -0.0625,  0.0151, -0.0054,  0.0756,
          0.0181, -0.1554, -0.1549,  0.0970,  0.0081, -0.0327,  0.2406, -0.0040,
         -0.0445,  0.1794, -0.0343, -0.0093, -0.0935, -0.0725, -0.0052,  0.0865,
         -0.0298,  0.0887, -0.5663,  0.0400,  0.4778,  0.2323, -0.1838, -0.2024,
          0.3578, -0.3928,  0.1462,  0.0110,  0.2762,  0.0310, -0.0777, -0.2003,
         -0.0850,  0.2498,  0.3607, -0.0391, -0.1659,  0.0752,  0.0374, -0.0985,
         -0.1615, -0.1540, -0.3420, -0.0111, -0.1907,  0.0300,  0.6760,  0.1995]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
101000 特征值优化 tensor(0.6377, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1868, -0.3956, -0.0459, -0.5786, -0.8702, -0.0184, -0.2040,  0.9012,
         -1.0917, -0.8689,  0.6728, -0.9220, -0.1027,  0.0855,  0.1074,  0.1794,
          0.0482,  0.1662, -0.0362,  0.0414, -0.0620,  0.0150, -0.0045,  0.0760,
          0.0177, -0.1569, -0.1548,  0.0995,  0.0048, -0.0326,  0.2404, -0.0094,
         -0.0475,  0.1787, -0.0357, -0.0051, -0.0936, -0.0737, -0.0025,  0.0829,
         -0.0311,  0.0867, -0.5581,  0.0381,  0.4756,  0.2371, -0.1821, -0.2026,
          0.3578, -0.3930,  0.1455,  0.0113,  0.2770,  0.0308, -0.1264, -0.1781,
         -0.0884,  0.2500,  0.3595, -0.0371, -0.1694,  0.0711,  0.0320, -0.0964,
         -0.1503, -0.1586, -0.3481, -0.0136, -0.2033,  0.0383,  0.6686,  0.2037]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
102000 特征值优化 tensor(0.6389, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1942e+00, -3.8822e-01, -4.7270e-02, -5.7852e-01, -8.7025e-01,
         -1.8165e-02, -2.2974e-01,  9.0794e-01, -1.0856e+00, -8.6840e-01,
          6.9477e-01, -9.1843e-01, -1.0275e-01,  9.5687e-02,  1.1689e-01,
          1.8269e-01,  5.8282e-02,  1.8536e-01, -3.4779e-02,  3.7146e-02,
         -6.1601e-02,  1.4890e-02, -8.4625e-03,  7.7224e-02,  2.0715e-02,
         -1.5136e-01, -1.5815e-01,  9.6924e-02,  8.0844e-03, -3.2672e-02,
          2.4018e-01, -1.2279e-02, -4.2353e-02,  1.7849e-01, -3.6916e-02,
          8.4442e-04, -7.8116e-02, -6.4137e-02, -4.0716e-03,  8.4394e-02,
         -4.5743e-02,  8.8016e-02, -5.6173e-01,  3.6879e-02,  4.7560e-01,
          2.2808e-01, -1.7881e-01, -2.0252e-01,  3.5828e-01, -3.9384e-01,
          1.4728e-01,  1.0660e-02,  2.7479e-01,  3.1928e-02, -1.1067e-01,
         -1.8137e-01, -9.0353e-02,  2.5091e-01,  3.5994e-01, -3.5992e-02,
         -1.7444e-01,  5.7244e-02,  3.4015e-02, -9.4893e-02, -1.5484e-01,
         -1.5659e-01, -3.4653e-01, -1.2804e-02, -1.9256e-01,  5.0966e-02,
          6.7030e-01,  2.0138e-01]], device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
103000 特征值优化 tensor(9.7389, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2356, -0.9478, -0.6966, -0.7460, -0.1436,  0.3627, -0.8855, -1.0760,
         -0.2189,  0.0861,  0.2142, -0.5103,  0.3811,  0.0262,  0.4380,  0.2414,
         -0.1757,  0.5755, -0.0663, -0.3446,  1.3367, -0.0698, -0.0925,  0.3727,
         -0.0210,  0.0429,  0.0691, -0.5991,  0.1434,  0.5112,  0.0648,  0.5631,
         -0.1790,  0.0431,  0.1715, -0.1367, -0.2360, -0.6416,  0.0382,  0.0102,
         -0.0100, -0.0504, -0.9310, -0.3176,  1.2316,  0.9041, -0.4203, -0.2633,
          1.2494, -1.4427,  0.3609, -0.1065,  0.1862, -0.0887,  0.2491,  0.0449,
         -0.7119,  0.3338,  0.4576,  0.6920,  0.6013, -0.0338,  0.3746,  0.0114,
         -0.2244,  0.0633,  0.9564,  1.5445, -0.6269,  0.2213,  0.6466, -0.1082]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
104000 特征值优化 tensor(0.7952, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.8060e-03, -6.2834e-01,  2.5758e-01, -5.0289e-01, -4.4042e-01,
         -7.0604e-02, -3.5759e-01, -5.5348e-01, -8.4072e-02, -1.3309e-01,
          6.1983e-01, -4.2896e-01,  4.4625e-02, -1.1701e-01,  1.9376e-01,
         -4.2799e-02,  2.7876e-02,  1.0145e-01,  6.0582e-02, -1.1413e-01,
          3.5275e-01, -1.9103e-02, -4.6553e-02,  2.2511e-01,  2.6634e-02,
          1.8729e-01, -1.0964e-01, -1.2073e-01,  9.8976e-03,  1.5423e-01,
          5.9617e-02,  1.1824e-01,  5.1621e-02,  6.1297e-02,  2.1235e-04,
          5.3357e-04, -2.5395e-02, -1.5400e-01,  6.0704e-02, -3.4140e-02,
         -2.8103e-02,  4.5016e-02, -3.2682e-01, -5.5585e-01,  6.7230e-01,
          1.8784e-01,  2.5355e-02, -1.3096e-01,  5.5598e-01, -3.5248e-01,
          2.6408e-01,  7.0714e-03, -1.8486e-01,  1.6877e-01,  1.7980e-01,
          1.0041e-01, -1.9027e-01,  1.0467e-01,  1.3427e-01,  2.5192e-01,
          3.8123e-01,  7.6045e-03,  4.7034e-01, -8.0422e-02, -1.0766e-01,
          1.0681e-01,  1.5246e-01,  5.1405e-01, -3.6968e-01,  1.4867e-01,
          2.0652e-01,  6.1879e-02]], device='cuda:0') tensor(0.2208, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
105000 特征值优化 tensor(0.5760, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0655, -0.4476,  0.2885, -0.5012, -0.5166, -0.1540, -0.0559, -0.2787,
         -0.3023, -0.3566,  0.3748, -0.1350,  0.0499, -0.1857,  0.2049, -0.0584,
          0.0182,  0.1453,  0.1607, -0.0950,  0.3194, -0.0155, -0.0412,  0.2293,
          0.1128,  0.1473, -0.1435, -0.1053,  0.0068,  0.1460,  0.0426,  0.0131,
          0.0921,  0.0673,  0.0104, -0.0549,  0.0630, -0.1020,  0.1430,  0.0406,
         -0.1047, -0.0684, -0.4090, -0.4502,  0.6130,  0.0563,  0.0722, -0.1032,
          0.3508, -0.1810,  0.2427,  0.0024, -0.1212,  0.1515,  0.0314,  0.0573,
         -0.2140,  0.1240, -0.1836,  0.1815,  0.5386,  0.0410,  0.3898,  0.0058,
         -0.3874,  0.0301,  0.2225,  0.3204, -0.5335,  0.1500,  0.4787,  0.1195]],
       device='cuda:0') tensor(0.2033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
106000 特征值优化 tensor(0.5603, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0641, -0.4529,  0.2714, -0.4852, -0.5441, -0.1545, -0.1057, -0.3073,
         -0.3531, -0.6081,  0.3897, -0.1014,  0.0495, -0.1742,  0.2191, -0.0378,
          0.0314,  0.1393,  0.1632, -0.0897,  0.3185, -0.0152, -0.0378,  0.1763,
          0.1640,  0.1859, -0.1434, -0.0114,  0.0204,  0.1469,  0.0471, -0.0097,
          0.0959,  0.0656,  0.0319, -0.0263,  0.0691, -0.1029,  0.1499,  0.0876,
         -0.1105, -0.0790, -0.4078, -0.4522,  0.6164,  0.0509,  0.0753, -0.0976,
          0.3425, -0.1692,  0.2407, -0.0021, -0.1101,  0.1388, -0.0263,  0.0468,
         -0.2902,  0.1607, -0.1935,  0.1478,  0.5644,  0.0200,  0.4146, -0.0055,
         -0.3177, -0.0045,  0.2661,  0.2597, -0.5370,  0.1665,  0.4805,  0.1329]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
107000 特征值优化 tensor(0.5679, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 6.7537e-02, -4.4518e-01,  2.7682e-01, -5.1265e-01, -4.1774e-01,
         -1.6834e-01, -1.0791e-01, -3.0780e-01, -3.5404e-01, -6.6492e-01,
          3.5350e-01, -1.1304e-01,  4.8849e-02, -2.0403e-01,  2.2834e-01,
         -1.9362e-02,  5.6921e-02,  1.5284e-01,  1.3752e-01, -9.9249e-02,
          3.1708e-01, -1.5097e-02, -7.4547e-03,  1.8140e-01,  1.4809e-01,
          1.3542e-01, -1.1898e-01, -6.9177e-02,  1.8085e-02,  1.4757e-01,
          4.8206e-02, -7.8070e-03,  8.8616e-02,  6.4819e-02,  2.8670e-02,
         -3.6893e-02,  6.9704e-02, -1.0655e-01,  1.5362e-01,  1.0061e-01,
         -1.1390e-01, -8.3111e-02, -4.1147e-01, -4.4549e-01,  6.1855e-01,
          4.8308e-02,  7.7005e-02, -1.0080e-01,  3.4283e-01, -1.6523e-01,
          2.5713e-01, -4.8482e-04, -1.8355e-01,  1.7083e-01,  1.0172e-02,
          5.0116e-02, -2.8436e-01,  1.5594e-01, -1.9949e-01,  1.3464e-01,
          5.5959e-01,  2.1920e-02,  3.9527e-01,  3.5247e-03, -2.9392e-01,
         -1.4500e-02,  2.8235e-01,  2.3983e-01, -4.9699e-01,  1.4292e-01,
          4.7361e-01,  1.3696e-01]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
108000 特征值优化 tensor(0.5631, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0736, -0.4436,  0.2743, -0.4955, -0.4254, -0.1900, -0.0710, -0.3856,
         -0.3771, -0.7017,  0.3223, -0.0740,  0.0506, -0.1659,  0.2509, -0.0697,
          0.0305,  0.1549,  0.1221, -0.0929,  0.3174, -0.0146, -0.0270,  0.1966,
          0.1441,  0.1324, -0.1071, -0.0558,  0.0188,  0.1469,  0.0460,  0.0194,
          0.0915,  0.0589,  0.0085, -0.0454,  0.0574, -0.1200,  0.1541,  0.1040,
         -0.0957, -0.0814, -0.4116, -0.4502,  0.6156,  0.0503,  0.0739, -0.0998,
          0.3432, -0.1672,  0.2492, -0.0014, -0.1520,  0.1685, -0.0226,  0.0392,
         -0.2432,  0.1307, -0.1997,  0.1342,  0.5835,  0.0089,  0.4028, -0.0008,
         -0.3216,  0.0059,  0.2763,  0.2402, -0.5331,  0.1644,  0.4525,  0.1422]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
109000 特征值优化 tensor(0.5589, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0726, -0.4603,  0.2900, -0.4785, -0.4683, -0.1930, -0.1084, -0.4288,
         -0.3740, -0.7346,  0.3262, -0.0828,  0.0507, -0.1720,  0.2310, -0.0789,
          0.0188,  0.1314,  0.1939, -0.0973,  0.3177, -0.0134, -0.0438,  0.2155,
          0.0864,  0.1624, -0.1173, -0.1140,  0.0172,  0.1484,  0.0431,  0.0662,
          0.0908,  0.0604,  0.0095, -0.0379,  0.0598, -0.1260,  0.1554,  0.1133,
         -0.0943, -0.0830, -0.4114, -0.4477,  0.6199,  0.0574,  0.0681, -0.1074,
          0.3348, -0.1529,  0.2386,  0.0024, -0.0967,  0.1490, -0.0849,  0.0340,
         -0.2407,  0.1335, -0.2031,  0.1306,  0.6147, -0.0154,  0.4448, -0.0263,
         -0.3174,  0.0083,  0.2841,  0.2292, -0.5752,  0.2065,  0.4594,  0.1350]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
110000 特征值优化 tensor(0.5581, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0683, -0.4583,  0.2819, -0.4916, -0.4345, -0.2010, -0.0554, -0.4374,
         -0.3699, -0.7430,  0.3261, -0.0848,  0.0506, -0.2094,  0.2155, -0.0414,
          0.0508,  0.1371,  0.1424, -0.0937,  0.3155, -0.0131, -0.0329,  0.2036,
          0.0954,  0.1517, -0.1165, -0.1225,  0.0179,  0.1491,  0.0479,  0.0588,
          0.0902,  0.0581,  0.0148, -0.0213,  0.0529, -0.1260,  0.1562,  0.1171,
         -0.0890, -0.0841, -0.4075, -0.4499,  0.6203,  0.0487,  0.0754, -0.1022,
          0.3352, -0.1523,  0.2450,  0.0029, -0.1441,  0.1596, -0.0649,  0.0439,
         -0.2462,  0.1318, -0.2023,  0.1249,  0.6194, -0.0201,  0.4306, -0.0157,
         -0.3159,  0.0109,  0.2854,  0.2268, -0.5846,  0.2010,  0.4643,  0.1305]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
111000 特征值优化 tensor(0.5613, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0677, -0.4529,  0.2763, -0.5009, -0.4500, -0.2002, -0.0280, -0.4309,
         -0.3709, -0.7226,  0.3033, -0.0689,  0.0504, -0.1788,  0.2270, -0.0114,
          0.0549,  0.1528,  0.1346, -0.0903,  0.3170, -0.0149, -0.0230,  0.1889,
          0.1247,  0.1412, -0.1207, -0.0969,  0.0188,  0.1476,  0.0503,  0.0123,
          0.0925,  0.0592,  0.0147, -0.0223,  0.0505, -0.1256,  0.1555,  0.1142,
         -0.0881, -0.0808, -0.4075, -0.4517,  0.6171,  0.0469,  0.0759, -0.1004,
          0.3388, -0.1625,  0.2508, -0.0012, -0.1535,  0.1657, -0.0327,  0.0409,
         -0.2454,  0.1330, -0.2028,  0.1274,  0.5840, -0.0032,  0.3781,  0.0102,
         -0.3162,  0.0062,  0.2784,  0.2318, -0.5402,  0.1748,  0.4578,  0.1363]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
112000 特征值优化 tensor(0.5578, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0784, -0.4540,  0.2564, -0.4913, -0.5071, -0.1592, -0.0014, -0.3997,
         -0.3843, -0.6999,  0.3088, -0.0646,  0.0494, -0.2093,  0.2261, -0.0851,
          0.0414,  0.1688,  0.0955, -0.1039,  0.3152, -0.0153, -0.0060,  0.1742,
          0.1859,  0.1647, -0.1414, -0.0216,  0.0165,  0.1475,  0.0536, -0.0624,
          0.0833,  0.0656,  0.0204, -0.0018,  0.0559, -0.1116,  0.1535,  0.1008,
         -0.0978, -0.0782, -0.4154, -0.4432,  0.6252,  0.0526,  0.0725, -0.0894,
          0.3424, -0.1700,  0.2451, -0.0032, -0.1051,  0.1369, -0.0299,  0.0308,
         -0.2467,  0.1385, -0.1977,  0.1518,  0.5969, -0.0021,  0.3893,  0.0147,
         -0.3264,  0.0077,  0.2769,  0.2402, -0.5538,  0.1707,  0.4664,  0.1402]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
113000 特征值优化 tensor(7.6102, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3672, -0.9475, -0.4104,  0.3192, -1.8922,  1.3565,  0.1405,  0.9324,
          0.0337, -0.4554, -0.0747, -1.3364,  0.0836, -0.0711,  0.9912, -0.0236,
         -0.2969,  0.6171, -0.0421, -0.3104,  0.9183, -0.7180,  0.0720, -0.0280,
          0.1304,  0.0348, -0.0796, -1.2208, -0.2327, -0.0402, -0.3370,  0.0106,
          0.0781, -0.1592, -0.0692, -0.0584,  0.1384,  0.0089,  0.7925, -0.0025,
          0.0892, -0.7133, -0.1997,  0.1696,  0.7619,  0.2551, -0.0089,  0.8563,
          0.7019, -1.0684, -0.5195,  0.0973,  1.1299, -1.2332,  0.2774, -0.0678,
         -1.6493,  0.0112,  0.6153,  0.1483,  0.0793,  0.0269, -0.2899,  0.1087,
         -0.1990,  0.2781,  0.2166, -0.0109, -0.5333, -1.4881,  0.4724,  0.3769]],
       device='cuda:0') tensor(0.2207, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
114000 特征值优化 tensor(0.8813, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.7751e-01, -4.9439e-01,  8.5135e-02,  9.9772e-02, -6.3562e-01,
          1.1621e+00,  6.2642e-01,  3.2907e-01, -6.1753e-02, -3.9676e-01,
         -3.8010e-01, -5.3638e-01,  8.4829e-02, -2.9281e-02,  1.2589e-01,
         -1.5959e-01, -1.5265e-01,  8.4101e-02, -4.6609e-02, -4.1992e-02,
          3.0138e-01, -1.3520e-01,  5.2991e-03, -1.2322e-01,  1.3502e-01,
         -2.0606e-01, -2.6480e-02, -2.6463e-01,  4.9279e-03, -4.4664e-02,
         -1.0618e-01, -5.5598e-03, -1.8384e-02,  1.1872e-01, -1.3306e-02,
         -7.6858e-02,  1.3890e-01,  2.4422e-03,  1.6995e-01, -5.3503e-04,
          8.6180e-02, -1.1788e-01, -1.0895e-01, -2.7515e-01,  6.7010e-01,
          1.3558e-01, -6.5790e-02,  1.8778e-01,  4.0068e-01, -2.0170e-01,
         -1.3667e-01, -3.1376e-02,  7.1060e-02, -3.6872e-01,  2.6157e-01,
          1.2268e-01, -9.8103e-01,  3.0637e-01,  1.8038e-01,  3.5301e-01,
         -3.0883e-01,  7.1780e-02, -4.7688e-03,  1.7873e-02, -1.8214e-01,
          3.0948e-01,  2.1993e-01,  6.7919e-02,  1.0561e-01, -4.6265e-01,
          3.0013e-01,  2.9426e-01]], device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
115000 特征值优化 tensor(0.7660, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.5100e-01, -4.5701e-01,  1.3495e-01,  3.3100e-02, -3.0688e-01,
          9.8273e-01,  7.5843e-01,  3.9431e-01, -1.2948e-01, -5.8207e-01,
         -1.2138e-01, -4.8324e-01,  9.0600e-02, -6.9721e-04,  1.1577e-01,
         -1.1002e-01, -9.6624e-02,  1.4926e-01, -1.8224e-01, -9.3135e-02,
          2.7675e-01, -1.4522e-01, -6.9227e-02, -2.4666e-01,  2.6688e-02,
         -1.8742e-01,  2.3958e-04, -1.3920e-01,  1.5320e-02, -3.9836e-02,
         -1.1544e-01, -8.3787e-02, -8.9733e-02,  1.2887e-01, -5.8887e-02,
         -7.0137e-02,  7.6814e-02,  4.9331e-02,  1.7152e-01, -3.5031e-03,
          1.4322e-01, -1.0566e-01, -9.3695e-02, -3.5732e-01,  7.4471e-01,
          8.4171e-02, -6.2197e-02,  1.5966e-01,  3.1001e-01, -6.7980e-02,
         -1.1994e-01, -2.9382e-02, -2.9405e-01, -1.9597e-01,  1.8436e-01,
          8.6786e-02, -7.2978e-01,  2.2281e-01,  2.4616e-01,  2.6651e-01,
         -3.8946e-01, -4.2962e-02,  1.8149e-01,  2.9408e-02, -1.3592e-01,
          2.9536e-01,  1.9250e-01,  5.0899e-02, -2.5593e-02, -2.6735e-01,
          3.0733e-01,  2.8227e-01]], device='cuda:0') tensor(0.2037, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
116000 特征值优化 tensor(0.6865, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5453, -0.4388,  0.1506,  0.0399, -0.1123,  0.8919,  0.6364,  0.4002,
         -0.2267, -0.6871,  0.0824, -0.5010,  0.0973,  0.0073,  0.1569, -0.0391,
         -0.0754,  0.1547, -0.2580, -0.0890,  0.2742, -0.1483, -0.0911, -0.2645,
          0.0575, -0.0326, -0.1055, -0.0375,  0.0178, -0.0364, -0.1132, -0.0776,
         -0.0799,  0.1340, -0.0389, -0.1039,  0.1007,  0.0295,  0.1636,  0.0361,
          0.1203, -0.0923, -0.1002, -0.3549,  0.7316,  0.1032, -0.0632,  0.0889,
          0.3216, -0.0341, -0.0595, -0.0538, -0.4075, -0.1616,  0.1629,  0.0609,
         -0.5937,  0.1862,  0.1750,  0.3598, -0.2522, -0.1094,  0.2125,  0.0440,
         -0.0955,  0.3167,  0.2349,  0.0154, -0.1554, -0.1965,  0.3104,  0.2621]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
117000 特征值优化 tensor(0.6812, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5741, -0.4453,  0.1567,  0.0426, -0.0835,  0.8711,  0.6283,  0.4662,
         -0.2478, -0.6338,  0.1129, -0.4927,  0.0952,  0.0303,  0.1771, -0.0620,
         -0.0687,  0.1292, -0.2881, -0.0885,  0.2735, -0.1478, -0.0777, -0.2758,
          0.0647, -0.0490, -0.0823, -0.0036,  0.0188, -0.0366, -0.1145, -0.0712,
         -0.0825,  0.1360, -0.0464, -0.0996,  0.1008,  0.0335,  0.1659,  0.0362,
          0.1214, -0.0956, -0.0889, -0.3577,  0.7295,  0.0983, -0.0606,  0.0837,
          0.3245, -0.0371, -0.0609, -0.0533, -0.4335, -0.1501,  0.1532,  0.0463,
         -0.5911,  0.1941,  0.1776,  0.3589, -0.2167, -0.1317,  0.2010,  0.0570,
         -0.0794,  0.3030,  0.2123,  0.0329, -0.1958, -0.1813,  0.3080,  0.2709]],
       device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
118000 特征值优化 tensor(0.6848, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5692, -0.4457,  0.1575,  0.0354, -0.0854,  0.8558,  0.5987,  0.4138,
         -0.2060, -0.6571,  0.1546, -0.5062,  0.0949, -0.0328,  0.1229,  0.0684,
         -0.1469,  0.1871, -0.1601, -0.0879,  0.2740, -0.1482, -0.0648, -0.3070,
          0.0036, -0.0360, -0.0806, -0.0400,  0.0163, -0.0368, -0.1138, -0.0962,
         -0.0638,  0.1330, -0.0414, -0.1045,  0.1837,  0.0086,  0.1617,  0.0446,
          0.0403, -0.0907, -0.0938, -0.3592,  0.7331,  0.1037, -0.0630,  0.0845,
          0.3230, -0.0344, -0.0554, -0.0544, -0.4337, -0.1592,  0.0872,  0.1427,
         -0.5789,  0.1858,  0.1658,  0.3640, -0.1977, -0.1125,  0.1644,  0.0661,
         -0.0899,  0.3039,  0.2208,  0.0202, -0.2270, -0.1793,  0.3013,  0.2735]],
       device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
119000 特征值优化 tensor(0.6835, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5726, -0.4487,  0.1360,  0.0258, -0.0887,  0.8654,  0.5898,  0.4008,
         -0.2004, -0.7089,  0.1966, -0.5164,  0.0939, -0.0358,  0.1278,  0.0655,
         -0.1701,  0.2037, -0.1297, -0.0869,  0.2752, -0.1535, -0.0707, -0.3094,
         -0.0313, -0.0225, -0.0915, -0.0513,  0.0119, -0.0391, -0.1147, -0.1000,
         -0.0598,  0.1348, -0.0471, -0.1043,  0.1883,  0.0053,  0.1542,  0.0628,
          0.0395, -0.0830, -0.0941, -0.3587,  0.7330,  0.1044, -0.0635,  0.0838,
          0.3346, -0.0562, -0.0450, -0.0623, -0.4342, -0.1568,  0.0698,  0.1400,
         -0.5701,  0.1840,  0.1461,  0.3741, -0.1924, -0.1234,  0.1564,  0.0598,
         -0.0740,  0.3047,  0.2326,  0.0135, -0.2456, -0.1616,  0.2826,  0.2745]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
120000 特征值优化 tensor(0.6847, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5578, -0.4352,  0.1402,  0.0259, -0.0832,  0.8658,  0.5920,  0.4160,
         -0.2235, -0.6946,  0.1826, -0.5313,  0.0953, -0.0160,  0.1601, -0.0011,
         -0.0872,  0.1458, -0.2217, -0.0884,  0.2749, -0.1521, -0.0615, -0.2849,
          0.0734, -0.0515, -0.0937,  0.0131,  0.0187, -0.0392, -0.1130, -0.0713,
         -0.0753,  0.1375, -0.0586, -0.0936,  0.1240,  0.0232,  0.1519,  0.0637,
          0.1030, -0.0806, -0.0944, -0.3550,  0.7307,  0.0976, -0.0633,  0.0813,
          0.3350, -0.0529, -0.0535, -0.0579, -0.4425, -0.1438,  0.1469,  0.0575,
         -0.5868,  0.1954,  0.1296,  0.3806, -0.2097, -0.1348,  0.1965,  0.0438,
         -0.0730,  0.3109,  0.2199,  0.0218, -0.2063, -0.1775,  0.3082,  0.2579]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
121000 特征值优化 tensor(0.6936, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.5850e-01, -4.0665e-01,  1.4345e-01,  2.1937e-02, -8.6352e-02,
          8.3641e-01,  5.5581e-01,  3.8428e-01, -1.8533e-01, -6.8228e-01,
          2.2304e-01, -5.2202e-01,  9.7629e-02, -4.4628e-02,  1.5229e-01,
          5.5780e-02, -1.1331e-01,  1.5336e-01, -1.8387e-01, -8.9743e-02,
          2.7313e-01, -1.5335e-01, -7.1663e-02, -2.7361e-01, -1.0681e-05,
         -3.5620e-02, -8.3654e-02, -3.6277e-03,  1.3037e-02, -3.9296e-02,
         -1.1293e-01, -7.8456e-02, -7.4197e-02,  1.3126e-01, -6.0797e-02,
         -9.4502e-02,  1.5481e-01,  1.3024e-02,  1.5318e-01,  6.1739e-02,
          7.5882e-02, -7.9117e-02, -9.2498e-02, -3.5648e-01,  7.3475e-01,
          9.0684e-02, -6.0160e-02,  8.5327e-02,  3.3449e-01, -5.4850e-02,
         -4.8859e-02, -5.9340e-02, -4.3777e-01, -1.4825e-01,  1.2571e-01,
          7.9536e-02, -5.8255e-01,  1.8628e-01,  1.2447e-01,  3.7815e-01,
         -1.9694e-01, -1.2606e-01,  1.7144e-01,  4.2057e-02, -9.0466e-02,
          3.0840e-01,  2.1590e-01,  2.1262e-02, -2.2924e-01, -1.7303e-01,
          2.9979e-01,  2.6229e-01]], device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
122000 特征值优化 tensor(0.6855, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5686, -0.4369,  0.1399,  0.0230, -0.0876,  0.8661,  0.5783,  0.4029,
         -0.1932, -0.6433,  0.1945, -0.5326,  0.0970, -0.0445,  0.1280,  0.0627,
         -0.1469,  0.1702, -0.1677, -0.0873,  0.2748, -0.1527, -0.1187, -0.2876,
         -0.0093, -0.0323, -0.1010, -0.0498,  0.0131, -0.0388, -0.1127, -0.0995,
         -0.0586,  0.1362, -0.0483, -0.1017,  0.1711,  0.0167,  0.1570,  0.0607,
          0.0617, -0.0843, -0.0938, -0.3582,  0.7344,  0.1042, -0.0628,  0.0830,
          0.3349, -0.0529, -0.0465, -0.0602, -0.4363, -0.1557,  0.0682,  0.1379,
         -0.5762,  0.1883,  0.1258,  0.3873, -0.1896, -0.1159,  0.1680,  0.0634,
         -0.0806,  0.2922,  0.2080,  0.0288, -0.2308, -0.1651,  0.3034,  0.2814]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
123000 特征值优化 tensor(0.6799, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5751, -0.4515,  0.1338,  0.0311, -0.0887,  0.8887,  0.5854,  0.4367,
         -0.2194, -0.6824,  0.1966, -0.5586,  0.0965,  0.0136,  0.1729, -0.0195,
         -0.0666,  0.1463, -0.2431, -0.0878,  0.2752, -0.1535, -0.0156, -0.3021,
          0.0475, -0.0304, -0.0840,  0.0346,  0.0101, -0.0392, -0.1170, -0.0742,
         -0.0770,  0.1402, -0.0664, -0.0898,  0.1164,  0.0269,  0.1481,  0.0728,
          0.1108, -0.0752, -0.0890, -0.3594,  0.7304,  0.1074, -0.0669,  0.0836,
          0.3339, -0.0572, -0.0489, -0.0614, -0.4292, -0.1552,  0.1446,  0.0566,
         -0.6085,  0.2062,  0.1106,  0.3937, -0.2324, -0.1305,  0.2000,  0.0605,
         -0.0604,  0.3000,  0.2099,  0.0335, -0.2008, -0.1687,  0.3204,  0.2589]],
       device='cuda:0') tensor(0.2037, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
124000 特征值优化 tensor(0.6867, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5756, -0.4340,  0.1411,  0.0263, -0.0824,  0.8762,  0.5835,  0.4124,
         -0.1860, -0.6428,  0.1793, -0.5491,  0.0967, -0.0341,  0.1221,  0.0621,
         -0.1408,  0.1630, -0.1773, -0.0874,  0.2743, -0.1528, -0.0889, -0.2983,
         -0.0077, -0.0367, -0.0877, -0.0511,  0.0148, -0.0387, -0.1151, -0.0842,
         -0.0776,  0.1354, -0.0493, -0.1011,  0.1648,  0.0150,  0.1541,  0.0657,
          0.0672, -0.0812, -0.0918, -0.3594,  0.7330,  0.1025, -0.0619,  0.0819,
          0.3352, -0.0537, -0.0496, -0.0590, -0.4277, -0.1634,  0.0681,  0.1345,
         -0.5792,  0.1877,  0.1181,  0.3900, -0.2057, -0.1333,  0.1657,  0.0560,
         -0.0822,  0.2940,  0.2044,  0.0291, -0.2257, -0.1482,  0.3094,  0.2802]],
       device='cuda:0') tensor(0.2038, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
125000 特征值优化 tensor(0.7071, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5538, -0.4328,  0.1427,  0.0307, -0.0892,  0.8586,  0.5215,  0.3842,
         -0.1565, -0.6750,  0.2182, -0.5594,  0.0960, -0.0483,  0.1277,  0.0583,
         -0.1633,  0.1428, -0.1775, -0.0909,  0.2738, -0.1530, -0.1071, -0.2670,
         -0.0111, -0.0265, -0.0988, -0.0317,  0.0125, -0.0391, -0.1137, -0.0665,
         -0.0951,  0.1291, -0.0531, -0.0971,  0.1389,  0.0169,  0.1475,  0.0644,
          0.0840, -0.0752, -0.0971, -0.3626,  0.7306,  0.1017, -0.0673,  0.0889,
          0.3347, -0.0570, -0.0503, -0.0610, -0.4009, -0.1671,  0.0892,  0.1017,
         -0.5860,  0.1799,  0.1255,  0.3821, -0.1799, -0.1390,  0.1681,  0.0574,
         -0.0875,  0.3088,  0.2079,  0.0205, -0.2406, -0.1356,  0.3068,  0.2654]],
       device='cuda:0') tensor(0.2041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
126000 特征值优化 tensor(0.6983, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5584, -0.4210,  0.1423,  0.0258, -0.0776,  0.8811,  0.5765,  0.3508,
         -0.1876, -0.6383,  0.1676, -0.5490,  0.0962, -0.0092,  0.1405,  0.0036,
         -0.0825,  0.1256, -0.2144, -0.0887,  0.2762, -0.1536, -0.0528, -0.3049,
          0.0082, -0.0456, -0.0687, -0.0092,  0.0119, -0.0386, -0.1161, -0.0868,
         -0.0740,  0.1332, -0.0523, -0.1001,  0.1412,  0.0175,  0.1455,  0.0744,
          0.0891, -0.0698, -0.0906, -0.3504,  0.7349,  0.0940, -0.0642,  0.0862,
          0.3342, -0.0565, -0.0483, -0.0594, -0.4238, -0.1600,  0.0851,  0.0785,
         -0.6007,  0.1944,  0.0950,  0.3894, -0.2277, -0.1198,  0.1954,  0.0530,
         -0.0590,  0.2888,  0.1910,  0.0316, -0.1900, -0.1678,  0.2950,  0.2699]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
127000 特征值优化 tensor(0.6880, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5439, -0.4185,  0.1403,  0.0259, -0.0812,  0.8614,  0.5864,  0.3755,
         -0.1899, -0.6609,  0.2017, -0.5695,  0.0971, -0.0244,  0.1557,  0.0157,
         -0.1059,  0.1441, -0.2186, -0.0888,  0.2744, -0.1532, -0.0288, -0.3030,
          0.0457, -0.0406, -0.0923,  0.0088,  0.0141, -0.0389, -0.1125, -0.0774,
         -0.0769,  0.1344, -0.0660, -0.0892,  0.1264,  0.0178,  0.1456,  0.0760,
          0.1048, -0.0708, -0.0972, -0.3527,  0.7336,  0.0930, -0.0637,  0.0852,
          0.3346, -0.0548, -0.0511, -0.0579, -0.4400, -0.1505,  0.1528,  0.0483,
         -0.5922,  0.1931,  0.0992,  0.3938, -0.1992, -0.1186,  0.1971,  0.0455,
         -0.0754,  0.3000,  0.1940,  0.0310, -0.2298, -0.1818,  0.3134,  0.2677]],
       device='cuda:0') tensor(0.2054, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
128000 特征值优化 tensor(0.6868, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.7013e-01, -4.3162e-01,  1.3824e-01,  2.7834e-02, -8.4328e-02,
          8.7425e-01,  6.1286e-01,  3.4325e-01, -1.6101e-01, -6.3254e-01,
          1.2743e-01, -5.6111e-01,  9.3778e-02, -4.2274e-02,  1.2441e-01,
          3.0653e-02, -1.3514e-01,  1.5225e-01, -1.8848e-01, -8.8149e-02,
          2.7545e-01, -1.5276e-01, -8.9660e-02, -2.9892e-01, -6.9554e-04,
         -3.9849e-02, -8.5615e-02, -4.6811e-02,  1.3359e-02, -3.8631e-02,
         -1.1509e-01, -8.6268e-02, -8.0930e-02,  1.3677e-01, -5.4921e-02,
         -9.8817e-02,  1.5597e-01,  8.8588e-03,  1.4949e-01,  7.3065e-02,
          7.4202e-02, -7.8198e-02, -9.1627e-02, -3.5575e-01,  7.2843e-01,
          9.4747e-02, -6.1768e-02,  8.4585e-02,  3.3430e-01, -5.5485e-02,
         -4.9056e-02, -5.9766e-02, -4.2253e-01, -1.6518e-01,  8.0095e-02,
          1.1866e-01, -5.8322e-01,  1.9236e-01,  1.0937e-01,  3.9072e-01,
         -1.9865e-01, -1.2914e-01,  1.9454e-01,  5.5141e-02, -7.8324e-02,
          2.8423e-01,  1.9159e-01,  3.3742e-02, -2.2580e-01, -1.5328e-01,
          3.0411e-01,  2.8663e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
129000 特征值优化 tensor(0.6850, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5489, -0.4331,  0.1405,  0.0257, -0.0835,  0.8782,  0.6032,  0.3528,
         -0.1895, -0.6582,  0.1639, -0.5825,  0.0961, -0.0064,  0.1756, -0.0345,
         -0.0713,  0.1238, -0.2439, -0.0890,  0.2739, -0.1529, -0.0510, -0.2778,
          0.0768, -0.0573, -0.0873,  0.0280,  0.0175, -0.0387, -0.1127, -0.0843,
         -0.0743,  0.1373, -0.0712, -0.0865,  0.1189,  0.0203,  0.1409,  0.0817,
          0.1130, -0.0686, -0.0959, -0.3528,  0.7303,  0.0913, -0.0626,  0.0826,
          0.3352, -0.0528, -0.0517, -0.0582, -0.4387, -0.1512,  0.1480,  0.0378,
         -0.6042,  0.2014,  0.0936,  0.3962, -0.1987, -0.1032,  0.2068,  0.0458,
         -0.0636,  0.2960,  0.1919,  0.0344, -0.2250, -0.1948,  0.3173,  0.2665]],
       device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
130000 特征值优化 tensor(0.6842, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5674, -0.4522,  0.1377,  0.0264, -0.0889,  0.8716,  0.6686,  0.3437,
         -0.1424, -0.6571,  0.1247, -0.5841,  0.0948, -0.0356,  0.1171,  0.0299,
         -0.1717,  0.1712, -0.1782, -0.0884,  0.2750, -0.1531, -0.0773, -0.3002,
         -0.0127, -0.0266, -0.0903, -0.0501,  0.0112, -0.0388, -0.1171, -0.0878,
         -0.0772,  0.1349, -0.0544, -0.0997,  0.1770,  0.0015,  0.1473,  0.0759,
          0.0555, -0.0756, -0.0946, -0.3605,  0.7312,  0.1075, -0.0625,  0.0843,
          0.3346, -0.0556, -0.0453, -0.0611, -0.4248, -0.1615,  0.0835,  0.1305,
         -0.5776,  0.1857,  0.1213,  0.3873, -0.1813, -0.1329,  0.1754,  0.0619,
         -0.0860,  0.2946,  0.1989,  0.0240, -0.2623, -0.1456,  0.3062,  0.2813]],
       device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
131000 特征值优化 tensor(0.6834, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5733, -0.4524,  0.1300,  0.0351, -0.0933,  0.8667,  0.6831,  0.3542,
         -0.1247, -0.6916,  0.1182, -0.5929,  0.0949, -0.0310,  0.1204,  0.0284,
         -0.1880,  0.1734, -0.1678, -0.0872,  0.2744, -0.1542, -0.0670, -0.3101,
         -0.0259, -0.0073, -0.1011, -0.0611,  0.0123, -0.0370, -0.1160, -0.0916,
         -0.0760,  0.1345, -0.0556, -0.1011,  0.1908, -0.0092,  0.1416,  0.0826,
          0.0387, -0.0681, -0.0953, -0.3595,  0.7320,  0.1073, -0.0646,  0.0850,
          0.3328, -0.0586, -0.0466, -0.0591, -0.4209, -0.1647,  0.0869,  0.1304,
         -0.5653,  0.1816,  0.1109,  0.3926, -0.1725, -0.1262,  0.1529,  0.0618,
         -0.0908,  0.3022,  0.2112,  0.0175, -0.2849, -0.1488,  0.3009,  0.2781]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
132000 特征值优化 tensor(0.6839, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5573, -0.4374,  0.1307,  0.0405, -0.0778,  0.8775,  0.6856,  0.3645,
         -0.1733, -0.6668,  0.1002, -0.5802,  0.0955, -0.0120,  0.1583, -0.0461,
         -0.0866,  0.1285, -0.2331, -0.0883,  0.2743, -0.1542, -0.0538, -0.2894,
          0.0689, -0.0503, -0.0948,  0.0245,  0.0160, -0.0366, -0.1150, -0.0614,
         -0.0872,  0.1387, -0.0713, -0.0855,  0.1231,  0.0236,  0.1354,  0.0857,
          0.1027, -0.0609, -0.0937, -0.3544,  0.7305,  0.0933, -0.0619,  0.0855,
          0.3324, -0.0589, -0.0575, -0.0546, -0.4380, -0.1509,  0.1555,  0.0388,
         -0.6008,  0.2015,  0.0785,  0.4021, -0.1723, -0.1186,  0.1933,  0.0525,
         -0.0678,  0.3005,  0.1891,  0.0318, -0.2585, -0.1840,  0.3181,  0.2671]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
133000 特征值优化 tensor(0.7005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.5533e-01, -4.1837e-01,  1.3764e-01,  3.2384e-02, -7.7713e-02,
          8.4530e-01,  6.6053e-01,  3.2996e-01, -1.3586e-01, -6.4925e-01,
          1.3073e-01, -5.7362e-01,  9.4638e-02, -5.2329e-02,  1.4254e-01,
          2.8960e-02, -1.4211e-01,  1.4474e-01, -1.7460e-01, -8.8864e-02,
          2.7760e-01, -1.5439e-01, -5.9773e-02, -2.7697e-01, -5.4821e-03,
         -3.7441e-02, -8.3577e-02, -2.2797e-02,  1.5070e-02, -3.6160e-02,
         -1.1526e-01, -7.5661e-02, -8.3756e-02,  1.3169e-01, -6.2551e-02,
         -9.0477e-02,  1.6472e-01, -7.7101e-04,  1.4505e-01,  7.4309e-02,
          6.6802e-02, -6.8723e-02, -9.3417e-02, -3.5752e-01,  7.3562e-01,
          9.7354e-02, -6.2780e-02,  8.8593e-02,  3.3309e-01, -5.8380e-02,
         -5.0318e-02, -5.6087e-02, -4.2902e-01, -1.5453e-01,  1.2024e-01,
          8.4691e-02, -5.8502e-01,  1.8471e-01,  9.7320e-02,  3.9316e-01,
         -1.6728e-01, -1.0764e-01,  1.4846e-01,  3.1021e-02, -9.6284e-02,
          3.0430e-01,  1.8631e-01,  2.9482e-02, -2.5897e-01, -1.9040e-01,
          3.1316e-01,  2.6896e-01]], device='cuda:0') tensor(0.2099, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
134000 特征值优化 tensor(0.7042, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5602, -0.4222,  0.1373,  0.0407, -0.0746,  0.8492,  0.6595,  0.3245,
         -0.1293, -0.6535,  0.1275, -0.5859,  0.0940, -0.0552,  0.1420,  0.0401,
         -0.1460,  0.1454, -0.1640, -0.0893,  0.2732, -0.1540, -0.0662, -0.2696,
         -0.0113, -0.0369, -0.0875, -0.0378,  0.0142, -0.0351, -0.1137, -0.0754,
         -0.0891,  0.1304, -0.0618, -0.0914,  0.1663, -0.0021,  0.1431,  0.0753,
          0.0660, -0.0671, -0.0945, -0.3597,  0.7328,  0.0952, -0.0674,  0.0901,
          0.3342, -0.0578, -0.0537, -0.0541, -0.4273, -0.1547,  0.1088,  0.0920,
         -0.5840,  0.1827,  0.0919,  0.3933, -0.1705, -0.1046,  0.1469,  0.0275,
         -0.0938,  0.3044,  0.1877,  0.0281, -0.2560, -0.1924,  0.3127,  0.2703]],
       device='cuda:0') tensor(0.2064, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
135000 特征值优化 tensor(0.6961, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5532, -0.4173,  0.1342,  0.0351, -0.0839,  0.8361,  0.6612,  0.3270,
         -0.1325, -0.6428,  0.1241, -0.5944,  0.0976, -0.0516,  0.1516,  0.0349,
         -0.1349,  0.1359, -0.1883, -0.0899,  0.2734, -0.1552, -0.0372, -0.2798,
          0.0113, -0.0350, -0.0904, -0.0181,  0.0143, -0.0374, -0.1129, -0.0722,
         -0.0794,  0.1308, -0.0637, -0.0909,  0.1625,  0.0023,  0.1432,  0.0774,
          0.0685, -0.0663, -0.0936, -0.3580,  0.7345,  0.0929, -0.0627,  0.0868,
          0.3336, -0.0582, -0.0544, -0.0560, -0.4374, -0.1503,  0.1294,  0.0746,
         -0.5816,  0.1872,  0.0990,  0.3863, -0.1663, -0.1104,  0.1598,  0.0315,
         -0.0981,  0.3059,  0.1773,  0.0263, -0.2600, -0.1884,  0.3162,  0.2697]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
136000 特征值优化 tensor(0.7095, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5619, -0.4330,  0.1339,  0.0347, -0.0741,  0.8576,  0.6590,  0.3276,
         -0.1165, -0.6327,  0.1270, -0.6020,  0.0962, -0.0473,  0.1409,  0.0401,
         -0.1581,  0.1487, -0.1535, -0.0899,  0.2692, -0.1535, -0.0670, -0.2909,
         -0.0125, -0.0372, -0.0908, -0.0468,  0.0129, -0.0357, -0.1078, -0.0764,
         -0.0846,  0.1318, -0.0587, -0.0925,  0.1736,  0.0020,  0.1430,  0.0752,
          0.0585, -0.0692, -0.0964, -0.3592,  0.7323,  0.0942, -0.0738,  0.0888,
          0.3344, -0.0566, -0.0481, -0.0547, -0.4266, -0.1546,  0.0952,  0.1067,
         -0.5822,  0.1823,  0.1020,  0.3896, -0.1732, -0.0925,  0.1459,  0.0324,
         -0.1021,  0.3008,  0.1847,  0.0311, -0.2605, -0.1889,  0.3232,  0.2751]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
137000 特征值优化 tensor(0.6832, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5742, -0.4452,  0.1300,  0.0370, -0.0824,  0.8691,  0.6778,  0.3422,
         -0.1163, -0.6288,  0.1072, -0.6129,  0.0930, -0.0429,  0.1332,  0.0487,
         -0.1790,  0.1675, -0.1399, -0.0872,  0.2757, -0.1546, -0.0857, -0.3031,
         -0.0267, -0.0308, -0.0964, -0.0619,  0.0116, -0.0369, -0.1134, -0.0982,
         -0.0676,  0.1360, -0.0551, -0.0978,  0.1900, -0.0084,  0.1480,  0.0769,
          0.0410, -0.0740, -0.0920, -0.3584,  0.7322,  0.1018, -0.0622,  0.0855,
          0.3327, -0.0584, -0.0494, -0.0582, -0.4381, -0.1558,  0.0820,  0.1288,
         -0.5788,  0.1882,  0.1109,  0.3945, -0.1568, -0.0964,  0.1568,  0.0525,
         -0.1037,  0.2904,  0.1839,  0.0279, -0.2772, -0.1849,  0.3270,  0.2841]],
       device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
138000 特征值优化 tensor(0.6850, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5754, -0.4301,  0.1314,  0.0399, -0.0753,  0.8708,  0.6820,  0.3461,
         -0.1140, -0.6170,  0.0851, -0.6145,  0.0939, -0.0370,  0.1316,  0.0451,
         -0.1741,  0.1787, -0.1630, -0.0876,  0.2776, -0.1545, -0.0853, -0.2981,
         -0.0138, -0.0425, -0.0784, -0.0532,  0.0121, -0.0369, -0.1141, -0.1025,
         -0.0662,  0.1365, -0.0564, -0.0970,  0.1723,  0.0038,  0.1487,  0.0759,
          0.0618, -0.0732, -0.0889, -0.3579,  0.7328,  0.0964, -0.0592,  0.0852,
          0.3328, -0.0586, -0.0530, -0.0566, -0.4349, -0.1578,  0.0847,  0.1286,
         -0.5812,  0.1903,  0.0993,  0.3957, -0.1635, -0.0973,  0.1559,  0.0506,
         -0.1056,  0.2871,  0.1819,  0.0312, -0.2637, -0.1795,  0.3290,  0.2859]],
       device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
139000 特征值优化 tensor(0.6928, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5741, -0.4210,  0.1338,  0.0378, -0.0855,  0.8760,  0.6587,  0.3446,
         -0.0964, -0.6063,  0.0906, -0.5971,  0.0942, -0.0409,  0.1375,  0.0186,
         -0.1424,  0.1185, -0.2083, -0.0872,  0.2753, -0.1542, -0.1024, -0.2925,
          0.0089, -0.0472, -0.0813, -0.0302,  0.0148, -0.0362, -0.1096, -0.0823,
         -0.0792,  0.1378, -0.0576, -0.0965,  0.1503,  0.0089,  0.1421,  0.0811,
          0.0750, -0.0669, -0.0912, -0.3575,  0.7329,  0.0907, -0.0626,  0.0852,
          0.3336, -0.0575, -0.0558, -0.0545, -0.4334, -0.1587,  0.0957,  0.0994,
         -0.5845,  0.1951,  0.0845,  0.4046, -0.1710, -0.1086,  0.1622,  0.0463,
         -0.1044,  0.2876,  0.1710,  0.0312, -0.2418, -0.1822,  0.3162,  0.2828]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
140000 特征值优化 tensor(0.7135, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5651, -0.4385,  0.1362,  0.0428, -0.0717,  0.8864,  0.6699,  0.3664,
         -0.1071, -0.6501,  0.0916, -0.6360,  0.1014, -0.0072,  0.1500, -0.0277,
         -0.0943,  0.1085, -0.2502, -0.0898,  0.2755, -0.1535, -0.0516, -0.2990,
          0.0377, -0.0430, -0.0868,  0.0338,  0.0146, -0.0356, -0.1019, -0.0709,
         -0.0922,  0.1350, -0.0619, -0.0888,  0.1249,  0.0244,  0.1359,  0.0876,
          0.1022, -0.0584, -0.0926, -0.3558,  0.7330,  0.1030, -0.0692,  0.0893,
          0.3349, -0.0569, -0.0536, -0.0557, -0.4249, -0.1623,  0.1283,  0.0461,
         -0.6088,  0.1995,  0.0644,  0.4007, -0.1984, -0.1134,  0.1770,  0.0588,
         -0.0859,  0.2892,  0.1774,  0.0284, -0.2217, -0.1671,  0.3308,  0.2663]],
       device='cuda:0') tensor(0.2094, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
141000 特征值优化 tensor(0.6809, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5701, -0.4474,  0.1300,  0.0464, -0.0777,  0.8856,  0.6814,  0.3963,
         -0.1125, -0.6351,  0.0785, -0.6394,  0.0953,  0.0088,  0.1668, -0.0490,
         -0.0730,  0.1433, -0.2439, -0.0875,  0.2747, -0.1543, -0.0237, -0.2884,
          0.0556, -0.0468, -0.0874,  0.0323,  0.0148, -0.0364, -0.1143, -0.0651,
         -0.0871,  0.1396, -0.0724, -0.0837,  0.1169,  0.0295,  0.1317,  0.0921,
          0.1083, -0.0594, -0.0897, -0.3572,  0.7300,  0.1010, -0.0613,  0.0855,
          0.3327, -0.0603, -0.0593, -0.0548, -0.4418, -0.1475,  0.1479,  0.0412,
         -0.6018,  0.2012,  0.0724,  0.4038, -0.1921, -0.1222,  0.1980,  0.0565,
         -0.0899,  0.2955,  0.1679,  0.0329, -0.2223, -0.1832,  0.3410,  0.2756]],
       device='cuda:0') tensor(0.2039, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
142000 特征值优化 tensor(0.6957, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5506, -0.4216,  0.1313,  0.0318, -0.0879,  0.8477,  0.6415,  0.3499,
         -0.0696, -0.6235,  0.1460, -0.6456,  0.0958, -0.0494,  0.1490,  0.0529,
         -0.1164,  0.1508, -0.1861, -0.0894,  0.2732, -0.1557, -0.0579, -0.2797,
          0.0082, -0.0525, -0.0629, -0.0192,  0.0183, -0.0369, -0.1117, -0.0798,
         -0.0761,  0.1320, -0.0638, -0.0906,  0.1555,  0.0081,  0.1433,  0.0774,
          0.0771, -0.0673, -0.0947, -0.3571,  0.7374,  0.0932, -0.0628,  0.0883,
          0.3331, -0.0584, -0.0537, -0.0532, -0.4324, -0.1504,  0.1328,  0.0760,
         -0.5857,  0.1883,  0.0902,  0.3887, -0.1711, -0.1152,  0.1570,  0.0399,
         -0.1307,  0.3064,  0.1685,  0.0273, -0.2577, -0.1796,  0.3427,  0.2665]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
143000 特征值优化 tensor(0.6808, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5747, -0.4449,  0.1307,  0.0438, -0.0831,  0.8865,  0.6639,  0.3986,
         -0.1071, -0.6364,  0.1190, -0.6597,  0.0948,  0.0100,  0.1666, -0.0451,
         -0.0779,  0.1369, -0.2409, -0.0885,  0.2757, -0.1544, -0.0466, -0.2799,
          0.0656, -0.0526, -0.0906,  0.0254,  0.0187, -0.0365, -0.1165, -0.0698,
         -0.0824,  0.1395, -0.0760, -0.0822,  0.1224,  0.0236,  0.1299,  0.0944,
          0.1060, -0.0553, -0.0887, -0.3586,  0.7298,  0.1018, -0.0623,  0.0852,
          0.3330, -0.0592, -0.0604, -0.0534, -0.4343, -0.1543,  0.1502,  0.0417,
         -0.6066,  0.2041,  0.0665,  0.4056, -0.1873, -0.1101,  0.1917,  0.0619,
         -0.0879,  0.2934,  0.1684,  0.0350, -0.2409, -0.1867,  0.3477,  0.2727]],
       device='cuda:0') tensor(0.2030, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
144000 特征值优化 tensor(0.6927, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5678, -0.4167,  0.1311,  0.0341, -0.0822,  0.8710,  0.6576,  0.3436,
         -0.0665, -0.6080,  0.1094, -0.6394,  0.0955, -0.0169,  0.1406,  0.0192,
         -0.1192,  0.1290, -0.2059, -0.0885,  0.2767, -0.1549, -0.1054, -0.2906,
          0.0126, -0.0541, -0.0728, -0.0445,  0.0175, -0.0367, -0.1130, -0.0750,
         -0.0872,  0.1366, -0.0614, -0.0961,  0.1547,  0.0076,  0.1333,  0.0898,
          0.0721, -0.0589, -0.0891, -0.3556,  0.7337,  0.0918, -0.0623,  0.0875,
          0.3323, -0.0579, -0.0593, -0.0526, -0.4265, -0.1599,  0.0900,  0.0963,
         -0.5886,  0.1961,  0.0643,  0.4070, -0.1797, -0.1195,  0.1708,  0.0519,
         -0.1045,  0.2879,  0.1657,  0.0290, -0.2460, -0.1619,  0.3242,  0.2821]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
145000 特征值优化 tensor(0.6858, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5781, -0.4460,  0.1314,  0.0364, -0.0862,  0.8757,  0.6640,  0.3435,
         -0.0551, -0.6327,  0.1012, -0.6624,  0.0947, -0.0373,  0.1214,  0.0349,
         -0.1625,  0.1491, -0.1697, -0.0872,  0.2747, -0.1546, -0.0933, -0.2974,
         -0.0122, -0.0328, -0.0934, -0.0546,  0.0131, -0.0367, -0.1158, -0.0809,
         -0.0859,  0.1365, -0.0600, -0.0960,  0.1719, -0.0023,  0.1328,  0.0921,
          0.0575, -0.0595, -0.0926, -0.3604,  0.7323,  0.1040, -0.0635,  0.0858,
          0.3331, -0.0588, -0.0493, -0.0587, -0.4211, -0.1652,  0.0866,  0.1291,
         -0.5750,  0.1884,  0.0736,  0.4034, -0.1723, -0.1264,  0.1649,  0.0568,
         -0.1135,  0.2945,  0.1751,  0.0236, -0.2673, -0.1502,  0.3313,  0.2844]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
146000 特征值优化 tensor(0.6839, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5769, -0.4497,  0.1301,  0.0352, -0.0914,  0.8766,  0.6804,  0.3602,
         -0.0372, -0.6495,  0.1069, -0.6715,  0.0959, -0.0398,  0.1196,  0.0266,
         -0.1924,  0.1783, -0.1546, -0.0870,  0.2753, -0.1546, -0.0592, -0.2985,
         -0.0193, -0.0138, -0.0941, -0.0594,  0.0123, -0.0370, -0.1155, -0.0863,
         -0.0804,  0.1374, -0.0602, -0.0960,  0.1884, -0.0102,  0.1290,  0.0948,
          0.0413, -0.0555, -0.0921, -0.3608,  0.7320,  0.1082, -0.0666,  0.0848,
          0.3327, -0.0576, -0.0471, -0.0593, -0.4237, -0.1636,  0.0837,  0.1272,
         -0.5695,  0.1855,  0.0773,  0.4019, -0.1629, -0.1256,  0.1494,  0.0616,
         -0.1185,  0.3008,  0.1801,  0.0190, -0.2857, -0.1522,  0.3246,  0.2797]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
147000 特征值优化 tensor(0.7119, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5711, -0.4361,  0.1336,  0.0362, -0.0809,  0.8628,  0.6729,  0.3431,
         -0.0246, -0.6627,  0.1225, -0.6660,  0.0968, -0.0333,  0.1254,  0.0231,
         -0.1695,  0.1467, -0.1671, -0.0899,  0.2685, -0.1538, -0.0546, -0.2921,
         -0.0160, -0.0296, -0.0928, -0.0391,  0.0137, -0.0359, -0.1082, -0.0665,
         -0.0911,  0.1334, -0.0630, -0.0903,  0.1721,  0.0022,  0.1292,  0.0901,
          0.0569, -0.0565, -0.0948, -0.3626,  0.7311,  0.0991, -0.0748,  0.0876,
          0.3333, -0.0577, -0.0475, -0.0578, -0.4153, -0.1615,  0.0996,  0.1078,
         -0.5692,  0.1785,  0.0646,  0.3990, -0.1666, -0.1053,  0.1333,  0.0401,
         -0.1218,  0.3071,  0.1849,  0.0218, -0.2718, -0.1697,  0.3237,  0.2744]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
148000 特征值优化 tensor(0.6837, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5598, -0.4312,  0.1316,  0.0397, -0.0809,  0.8699,  0.6768,  0.3366,
         -0.0869, -0.6361,  0.1002, -0.6630,  0.0957, -0.0165,  0.1573, -0.0398,
         -0.1022,  0.1289, -0.2292, -0.0883,  0.2742, -0.1545, -0.0491, -0.2892,
          0.0691, -0.0523, -0.0947,  0.0223,  0.0159, -0.0366, -0.1140, -0.0631,
         -0.0844,  0.1373, -0.0761, -0.0816,  0.1291,  0.0178,  0.1284,  0.0943,
          0.0994, -0.0521, -0.0939, -0.3561,  0.7312,  0.0950, -0.0616,  0.0849,
          0.3328, -0.0573, -0.0565, -0.0548, -0.4422, -0.1494,  0.1586,  0.0361,
         -0.5961,  0.1984,  0.0579,  0.4049, -0.1538, -0.1159,  0.1920,  0.0467,
         -0.1013,  0.2971,  0.1660,  0.0329, -0.2695, -0.1900,  0.3443,  0.2707]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
149000 特征值优化 tensor(0.6812, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5643, -0.4454,  0.1306,  0.0431, -0.0922,  0.8853,  0.6926,  0.3384,
         -0.0919, -0.6329,  0.0893, -0.6650,  0.0956,  0.0039,  0.1720, -0.0811,
         -0.0760,  0.1288, -0.2463, -0.0884,  0.2743, -0.1545, -0.0656, -0.2769,
          0.0945, -0.0537, -0.0941,  0.0285,  0.0199, -0.0363, -0.1142, -0.0633,
         -0.0833,  0.1390, -0.0798, -0.0787,  0.1225,  0.0214,  0.1250,  0.0976,
          0.1062, -0.0491, -0.0922, -0.3567,  0.7295,  0.0986, -0.0601,  0.0858,
          0.3329, -0.0592, -0.0615, -0.0528, -0.4431, -0.1452,  0.1515,  0.0257,
         -0.6058,  0.2035,  0.0544,  0.4069, -0.1474, -0.1123,  0.1900,  0.0534,
         -0.0873,  0.2899,  0.1629,  0.0368, -0.2693, -0.1965,  0.3423,  0.2735]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
150000 特征值优化 tensor(0.6878, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5760, -0.4252,  0.1305,  0.0402, -0.0791,  0.8755,  0.7181,  0.3095,
         -0.0598, -0.6048,  0.0462, -0.6584,  0.0942, -0.0355,  0.1312,  0.0114,
         -0.1502,  0.1357, -0.1788, -0.0868,  0.2750, -0.1547, -0.0990, -0.2915,
          0.0078, -0.0443, -0.0867, -0.0461,  0.0152, -0.0366, -0.1134, -0.0729,
         -0.0886,  0.1377, -0.0631, -0.0943,  0.1687, -0.0082,  0.1351,  0.0914,
          0.0593, -0.0619, -0.0927, -0.3591,  0.7315,  0.0940, -0.0606,  0.0858,
          0.3330, -0.0585, -0.0551, -0.0559, -0.4309, -0.1597,  0.0984,  0.1120,
         -0.5843,  0.1933,  0.0637,  0.4037, -0.1577, -0.1110,  0.1576,  0.0499,
         -0.1110,  0.2819,  0.1651,  0.0297, -0.2761, -0.1734,  0.3354,  0.2902]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
151000 特征值优化 tensor(0.7111, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5649, -0.4367,  0.1320,  0.0345, -0.0844,  0.8633,  0.7120,  0.3072,
         -0.0368, -0.6333,  0.0819, -0.6758,  0.0967, -0.0356,  0.1262,  0.0168,
         -0.1723,  0.1425, -0.1631, -0.0894,  0.2688, -0.1540, -0.0688, -0.2960,
         -0.0112, -0.0362, -0.0944, -0.0437,  0.0133, -0.0360, -0.1081, -0.0641,
         -0.0933,  0.1328, -0.0642, -0.0896,  0.1747, -0.0050,  0.1264,  0.0931,
          0.0557, -0.0544, -0.0969, -0.3601,  0.7324,  0.0976, -0.0737,  0.0888,
          0.3351, -0.0562, -0.0477, -0.0574, -0.4173, -0.1614,  0.1025,  0.1053,
         -0.5757,  0.1815,  0.0695,  0.3973, -0.1547, -0.0982,  0.1302,  0.0355,
         -0.1171,  0.3015,  0.1706,  0.0261, -0.2866, -0.1780,  0.3345,  0.2762]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
152000 特征值优化 tensor(0.6820, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5655, -0.4447,  0.1278,  0.0427, -0.0775,  0.8862,  0.7479,  0.3342,
         -0.0760, -0.6312,  0.0427, -0.6750,  0.0956, -0.0060,  0.1596, -0.0768,
         -0.0854,  0.1219, -0.2375, -0.0877,  0.2748, -0.1542, -0.0622, -0.2844,
          0.0687, -0.0606, -0.0895,  0.0381,  0.0158, -0.0364, -0.1150, -0.0543,
         -0.0922,  0.1396, -0.0786, -0.0794,  0.1239,  0.0245,  0.1203,  0.1012,
          0.1014, -0.0460, -0.0919, -0.3553,  0.7308,  0.0974, -0.0602,  0.0872,
          0.3325, -0.0608, -0.0576, -0.0548, -0.4385, -0.1508,  0.1567,  0.0292,
         -0.6064,  0.2049,  0.0480,  0.4083, -0.1493, -0.1126,  0.1839,  0.0492,
         -0.0902,  0.2924,  0.1589,  0.0346, -0.2804, -0.1934,  0.3418,  0.2740]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
153000 特征值优化 tensor(0.6883, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5542, -0.4156,  0.1305,  0.0361, -0.0777,  0.8558,  0.7268,  0.3035,
         -0.0465, -0.6205,  0.0699, -0.6709,  0.0955, -0.0267,  0.1493, -0.0115,
         -0.1329,  0.1167, -0.2199, -0.0880,  0.2754, -0.1545, -0.0531, -0.3087,
          0.0387, -0.0493, -0.0934,  0.0133,  0.0143, -0.0367, -0.1142, -0.0590,
         -0.0882,  0.1346, -0.0759, -0.0819,  0.1449,  0.0067,  0.1274,  0.0952,
          0.0843, -0.0528, -0.0927, -0.3547,  0.7356,  0.0844, -0.0604,  0.0857,
          0.3326, -0.0575, -0.0540, -0.0558, -0.4446, -0.1470,  0.1689,  0.0354,
         -0.5929,  0.1959,  0.0585,  0.4033, -0.1405, -0.1089,  0.1692,  0.0352,
         -0.1135,  0.2933,  0.1578,  0.0323, -0.2805, -0.1969,  0.3422,  0.2756]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
154000 特征值优化 tensor(0.7125, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5624, -0.4377,  0.1363,  0.0380, -0.0699,  0.8643,  0.7231,  0.2822,
         -0.0368, -0.6118,  0.0617, -0.6802,  0.0960, -0.0449,  0.1369,  0.0262,
         -0.1764,  0.1358, -0.1533, -0.0887,  0.2709, -0.1536, -0.0989, -0.2803,
         -0.0192, -0.0378, -0.0959, -0.0406,  0.0143, -0.0358, -0.1064, -0.0694,
         -0.0893,  0.1342, -0.0667, -0.0874,  0.1756, -0.0123,  0.1230,  0.0976,
          0.0516, -0.0493, -0.0968, -0.3594,  0.7327,  0.0962, -0.0727,  0.0897,
          0.3331, -0.0573, -0.0491, -0.0570, -0.4297, -0.1548,  0.1004,  0.1063,
         -0.5786,  0.1851,  0.0541,  0.4052, -0.1461, -0.0901,  0.1313,  0.0291,
         -0.1128,  0.2922,  0.1570,  0.0316, -0.2903, -0.1977,  0.3333,  0.2824]],
       device='cuda:0') tensor(0.2030, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
155000 特征值优化 tensor(0.6939, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5478, -0.4135,  0.1329,  0.0321, -0.0866,  0.8393,  0.7277,  0.2833,
         -0.0355, -0.6058,  0.0551, -0.6765,  0.0979, -0.0373,  0.1537,  0.0033,
         -0.1475,  0.1240, -0.2079, -0.0892,  0.2743, -0.1555, -0.0641, -0.2769,
          0.0142, -0.0507, -0.0776, -0.0088,  0.0167, -0.0373, -0.1078, -0.0642,
         -0.0891,  0.1337, -0.0767, -0.0806,  0.1546, -0.0013,  0.1237,  0.0980,
          0.0755, -0.0474, -0.0943, -0.3560,  0.7372,  0.0878, -0.0604,  0.0862,
          0.3345, -0.0602, -0.0552, -0.0551, -0.4374, -0.1467,  0.1447,  0.0592,
         -0.5879,  0.1919,  0.0474,  0.3997, -0.1422, -0.1057,  0.1519,  0.0296,
         -0.1148,  0.2946,  0.1461,  0.0338, -0.2814, -0.1939,  0.3354,  0.2729]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
156000 特征值优化 tensor(0.6832, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5759, -0.4458,  0.1317,  0.0439, -0.0802,  0.8703,  0.7485,  0.2783,
         -0.0301, -0.5994,  0.0434, -0.7101,  0.0932, -0.0409,  0.1325,  0.0332,
         -0.1996,  0.1537, -0.1366, -0.0874,  0.2760, -0.1545, -0.0948, -0.3062,
         -0.0247, -0.0377, -0.0966, -0.0728,  0.0181, -0.0363, -0.1140, -0.0854,
         -0.0793,  0.1362, -0.0657, -0.0922,  0.1894, -0.0235,  0.1279,  0.0991,
          0.0423, -0.0544, -0.0912, -0.3595,  0.7315,  0.1011, -0.0631,  0.0857,
          0.3325, -0.0585, -0.0621, -0.0533, -0.4418, -0.1541,  0.0923,  0.1194,
         -0.5760,  0.1883,  0.0629,  0.4049, -0.1299, -0.0893,  0.1368,  0.0431,
         -0.1155,  0.2835,  0.1560,  0.0262, -0.3011, -0.1915,  0.3447,  0.2918]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
157000 特征值优化 tensor(0.6840, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5687, -0.4441,  0.1326,  0.0400, -0.0807,  0.8677,  0.7553,  0.2744,
         -0.0225, -0.5876,  0.0254, -0.7116,  0.0935, -0.0366,  0.1359,  0.0225,
         -0.1889,  0.1428, -0.1530, -0.0869,  0.2759, -0.1542, -0.0936, -0.3044,
         -0.0131, -0.0466, -0.0829, -0.0474,  0.0136, -0.0366, -0.1132, -0.0859,
         -0.0791,  0.1362, -0.0661, -0.0915,  0.1838, -0.0215,  0.1269,  0.0995,
          0.0459, -0.0532, -0.0938, -0.3563,  0.7323,  0.1008, -0.0616,  0.0849,
          0.3323, -0.0584, -0.0559, -0.0557, -0.4387, -0.1555,  0.0931,  0.1125,
         -0.5766,  0.1877,  0.0582,  0.4026, -0.1342, -0.0868,  0.1414,  0.0407,
         -0.1169,  0.2812,  0.1495,  0.0278, -0.2977, -0.1957,  0.3428,  0.2931]],
       device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
158000 特征值优化 tensor(0.6936, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5752, -0.4166,  0.1331,  0.0379, -0.0837,  0.8746,  0.7611,  0.2681,
         -0.0046, -0.5692,  0.0078, -0.6935,  0.0942, -0.0235,  0.1403, -0.0176,
         -0.1412,  0.0990, -0.2108, -0.0877,  0.2753, -0.1545, -0.0965, -0.2957,
          0.0122, -0.0565, -0.0704, -0.0266,  0.0166, -0.0367, -0.1121, -0.0699,
         -0.0891,  0.1368, -0.0664, -0.0919,  0.1606, -0.0075,  0.1253,  0.0999,
          0.0664, -0.0511, -0.0907, -0.3580,  0.7325,  0.0889, -0.0605,  0.0864,
          0.3329, -0.0578, -0.0598, -0.0528, -0.4343, -0.1572,  0.1111,  0.0752,
         -0.5873,  0.1959,  0.0399,  0.4082, -0.1420, -0.0936,  0.1452,  0.0385,
         -0.1246,  0.2826,  0.1393,  0.0295, -0.2760, -0.1936,  0.3386,  0.2890]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
159000 特征值优化 tensor(0.6925, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5534, -0.4103,  0.1346,  0.0291, -0.0850,  0.8424,  0.7468,  0.2659,
          0.0118, -0.5894,  0.0502, -0.7198,  0.0971, -0.0386,  0.1476, -0.0071,
         -0.1469,  0.1113, -0.2044, -0.0900,  0.2731, -0.1548, -0.0439, -0.2883,
          0.0243, -0.0571, -0.0748, -0.0134,  0.0133, -0.0371, -0.1114, -0.0548,
         -0.0930,  0.1341, -0.0749, -0.0828,  0.1513, -0.0070,  0.1247,  0.0967,
          0.0742, -0.0489, -0.0956, -0.3575,  0.7346,  0.0891, -0.0606,  0.0866,
          0.3331, -0.0575, -0.0503, -0.0566, -0.4418, -0.1474,  0.1554,  0.0517,
         -0.5803,  0.1908,  0.0540,  0.3999, -0.1275, -0.1044,  0.1458,  0.0306,
         -0.1406,  0.3019,  0.1390,  0.0295, -0.3008, -0.1956,  0.3526,  0.2727]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
160000 特征值优化 tensor(0.6813, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5643, -0.4456,  0.1272,  0.0428, -0.0815,  0.8879,  0.7690,  0.2814,
         -0.0145, -0.6032,  0.0126, -0.7396,  0.0956, -0.0020,  0.1658, -0.0949,
         -0.0919,  0.1179, -0.2369, -0.0877,  0.2744, -0.1545, -0.0645, -0.2768,
          0.0772, -0.0645, -0.0893,  0.0375,  0.0200, -0.0364, -0.1153, -0.0542,
         -0.0907,  0.1397, -0.0816, -0.0761,  0.1265,  0.0202,  0.1107,  0.1082,
          0.1023, -0.0369, -0.0926, -0.3558,  0.7303,  0.0977, -0.0599,  0.0882,
          0.3328, -0.0611, -0.0611, -0.0527, -0.4467, -0.1461,  0.1554,  0.0121,
         -0.6050,  0.2039,  0.0305,  0.4101, -0.1105, -0.0972,  0.1697,  0.0474,
         -0.1087,  0.2917,  0.1399,  0.0344, -0.3076, -0.2087,  0.3594,  0.2756]],
       device='cuda:0') tensor(0.2046, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
161000 特征值优化 tensor(0.6890, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5744, -0.4237,  0.1315,  0.0393, -0.0814,  0.8721,  0.7774,  0.2256,
          0.0078, -0.5603, -0.0082, -0.7174,  0.0927, -0.0245,  0.1343, -0.0165,
         -0.1547,  0.1162, -0.1889, -0.0882,  0.2754, -0.1545, -0.0938, -0.2963,
          0.0030, -0.0511, -0.0779, -0.0529,  0.0164, -0.0368, -0.1130, -0.0660,
         -0.0932,  0.1363, -0.0679, -0.0913,  0.1672, -0.0202,  0.1244,  0.1017,
          0.0607, -0.0502, -0.0895, -0.3550,  0.7309,  0.0898, -0.0631,  0.0861,
          0.3320, -0.0571, -0.0572, -0.0546, -0.4337, -0.1584,  0.1111,  0.0893,
         -0.5845,  0.1922,  0.0380,  0.4067, -0.1225, -0.1009,  0.1363,  0.0431,
         -0.1281,  0.2778,  0.1360,  0.0304, -0.3072, -0.1861,  0.3497,  0.2946]],
       device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
162000 特征值优化 tensor(0.6976, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5534, -0.4162,  0.1332,  0.0297, -0.0792,  0.8404,  0.7806,  0.2274,
          0.0247, -0.5826,  0.0149, -0.7353,  0.0969, -0.0503,  0.1471, -0.0095,
         -0.1641,  0.1160, -0.1947, -0.0897,  0.2748, -0.1551, -0.0456, -0.2824,
          0.0105, -0.0546, -0.0806, -0.0200,  0.0142, -0.0365, -0.1150, -0.0570,
         -0.0950,  0.1310, -0.0734, -0.0823,  0.1539, -0.0126,  0.1174,  0.1011,
          0.0766, -0.0443, -0.0954, -0.3574,  0.7352,  0.0939, -0.0621,  0.0891,
          0.3326, -0.0581, -0.0499, -0.0565, -0.4288, -0.1550,  0.1407,  0.0617,
         -0.5835,  0.1850,  0.0453,  0.3987, -0.1146, -0.1025,  0.1225,  0.0265,
         -0.1385,  0.3020,  0.1308,  0.0287, -0.3210, -0.1949,  0.3525,  0.2726]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
163000 特征值优化 tensor(14.2418, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2155e-01,  1.8962e-03,  1.0490e-01, -2.0605e+00, -3.7898e-01,
          5.1672e-01, -1.1073e+00,  8.1241e-01, -3.3636e-01, -8.6150e-01,
          6.3292e-01,  8.9037e-01, -4.2070e-01, -4.0943e-01, -7.6264e-02,
         -1.1991e+00,  4.5610e-01,  1.0693e+00, -1.0176e+00, -5.5262e-02,
         -4.5527e-01,  1.5941e-01, -1.0420e+00,  2.4445e-02,  1.3403e+00,
         -1.9499e-01,  9.7064e-01, -4.1028e-01,  1.4537e-02, -2.4473e-01,
         -1.8584e-01, -1.0658e+00, -5.4164e-01,  7.8571e-01, -1.4643e+00,
         -1.5118e-03,  1.8452e-01, -1.5490e-01, -7.6257e-02,  2.2266e-01,
         -1.1081e+00, -1.5778e+00, -7.8911e-01, -1.1226e-01,  1.4587e+00,
         -6.1763e-01, -4.0551e-01,  2.1722e-01, -4.3768e-01,  6.6062e-01,
          1.6856e+00, -7.2699e-01, -6.1992e-01, -1.1628e-01,  2.7610e-01,
          1.1502e+00,  2.9581e-02,  3.7269e-01,  2.6546e-01, -1.2696e+00,
         -1.5089e-01,  1.5561e-01, -1.3652e+00, -3.7211e-02,  2.8720e-01,
          2.2837e-01,  1.3237e-01, -2.3591e-01,  3.2852e-01, -1.8148e+00,
         -1.0137e+00, -7.0489e-01]], device='cuda:0') tensor(0.2238, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
164000 特征值优化 tensor(2.4537, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2678, -0.0873, -0.2015, -1.4136, -0.5855,  0.0342, -0.5708,  1.0453,
         -0.3675, -0.1384, -0.5079,  1.0588, -0.0945, -0.0290, -0.0358, -0.2448,
          0.0038,  0.1965, -0.2162,  0.0101, -0.0741,  0.1095, -0.1774, -0.0267,
          0.3976,  0.0400,  0.1592, -0.0239,  0.0169, -0.0430, -0.0110, -0.2600,
          0.0048,  0.3409, -0.4391,  0.0757,  0.1603,  0.1029,  0.0712,  0.0114,
         -0.1714, -0.4810, -0.1108, -0.3461,  0.8370, -0.1626, -0.0372, -0.0395,
         -0.1203,  0.4676,  0.7912, -0.1706, -0.1470,  0.0416,  0.0972,  0.3250,
         -0.3236,  0.0049,  0.0039, -0.4024,  0.0390,  0.1421, -0.7555, -0.0154,
          0.0153,  0.0582,  0.0855, -0.0501,  0.6004, -0.7110, -0.5182, -0.0914]],
       device='cuda:0') tensor(0.2133, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
165000 特征值优化 tensor(0.6872, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3271, -0.1287, -0.2433, -1.2416, -0.5682,  0.2003,  0.2989,  0.5004,
         -0.5748, -0.2265, -0.2872,  0.6851, -0.0991, -0.0892, -0.1871, -0.1121,
          0.0020, -0.0089, -0.1576,  0.0108, -0.0867,  0.1170, -0.0448, -0.0870,
          0.1189,  0.0828,  0.0430, -0.0128,  0.0164, -0.0561, -0.0210, -0.0714,
          0.0744,  0.3643, -0.1725, -0.0192,  0.0069,  0.1365,  0.0727,  0.0025,
          0.0214, -0.2998, -0.0292, -0.0276,  0.4818, -0.1635, -0.0253, -0.1169,
         -0.1871,  0.5835,  0.4383,  0.0049, -0.2868,  0.1009, -0.1544,  0.0844,
         -0.5709,  0.0523,  0.3270, -0.4347,  0.1033,  0.1885, -0.5013, -0.0447,
          0.1403,  0.0293, -0.1429,  0.0178,  0.0672, -0.2670, -0.3981, -0.0189]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
166000 特征值优化 tensor(0.6673, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3432, -0.0970, -0.2611, -1.2474, -0.6245,  0.2467,  0.1448,  0.4002,
         -0.4884, -0.1785, -0.1518,  0.5453, -0.1002, -0.2032, -0.0256, -0.0979,
          0.1330, -0.1093, -0.2025, -0.0546, -0.0844,  0.1151, -0.1307, -0.0291,
          0.0953, -0.0243,  0.0576,  0.0103, -0.0228, -0.0582, -0.0204, -0.0536,
          0.0882,  0.3633, -0.1643, -0.0106,  0.0346,  0.1499,  0.0705,  0.0045,
         -0.0063, -0.2784, -0.0385, -0.0321,  0.4750, -0.2021, -0.0069, -0.0957,
         -0.1992,  0.5816,  0.4442,  0.0121, -0.2446,  0.0925, -0.0923,  0.1402,
         -0.5949,  0.0646,  0.3214, -0.4335,  0.1445,  0.1545, -0.4648, -0.0700,
          0.1539,  0.0365, -0.1725,  0.0601,  0.0035, -0.2145, -0.3758, -0.0432]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
167000 特征值优化 tensor(0.6225, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.0465e-01, -1.1163e-01, -2.4532e-01, -1.2270e+00, -6.1278e-01,
          2.6393e-01,  1.0535e-01,  3.0398e-01, -4.4960e-01, -7.1928e-01,
         -1.9591e-01,  5.7601e-01, -1.0033e-01, -1.6679e-01,  3.3171e-02,
         -7.7771e-02,  1.5266e-01, -1.4394e-01, -2.3329e-01, -4.7199e-02,
         -8.6158e-02,  1.1091e-01, -1.3390e-01, -2.7717e-02,  6.7988e-02,
         -3.8786e-02,  1.7637e-02, -3.1070e-02, -4.1918e-02, -5.1427e-02,
         -2.3133e-02, -5.7610e-02,  7.6597e-02,  3.6630e-01, -1.6422e-01,
         -3.3290e-02,  4.3100e-02,  1.5294e-01,  2.5714e-02, -2.2552e-03,
         -6.1811e-04, -2.2247e-01,  7.5372e-03, -5.3278e-02,  4.5475e-01,
         -1.8693e-01, -1.4559e-02, -1.1396e-01, -1.7593e-01,  5.8242e-01,
          3.9874e-01,  2.3918e-02, -2.3357e-01,  7.6410e-02, -8.8371e-03,
          9.0737e-02, -5.6918e-01,  3.8874e-02, -1.1005e-01, -5.5781e-01,
          2.0103e-01,  1.1630e-01, -5.1940e-01, -2.2013e-02,  1.5683e-02,
          7.8835e-02, -6.0855e-02, -1.0582e-02, -4.9016e-02, -1.3517e-01,
         -3.1830e-01, -6.5085e-02]], device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
168000 特征值优化 tensor(0.6133, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.3313e-01, -1.0523e-01, -2.7719e-01, -1.2015e+00, -6.2568e-01,
          2.9958e-01,  7.1641e-02,  3.0688e-01, -4.5434e-01, -7.7358e-01,
         -1.4735e-01,  5.4164e-01, -9.9119e-02, -1.7242e-01,  4.6909e-02,
         -6.6126e-02,  1.4579e-01, -1.5568e-01, -2.2672e-01, -4.2983e-02,
         -8.5486e-02,  1.1073e-01, -1.4779e-01, -4.3583e-02,  6.8214e-02,
         -1.6166e-02,  5.3158e-02,  1.1511e-02, -7.6983e-03, -5.0506e-02,
         -2.5382e-02, -6.2350e-02,  7.8810e-02,  3.6934e-01, -1.5048e-01,
         -5.4697e-02,  4.4649e-02,  1.5854e-01,  1.1820e-02,  2.0601e-03,
         -4.2350e-03, -2.0536e-01, -2.6361e-02, -3.1922e-02,  4.5320e-01,
         -2.1624e-01, -6.4065e-04, -4.6153e-02, -2.2255e-01,  5.5348e-01,
          3.7331e-01,  3.5867e-02, -1.9898e-01,  6.0048e-02, -5.2101e-02,
          1.1772e-01, -5.8534e-01,  4.5053e-02, -9.7207e-02, -5.0450e-01,
          1.7555e-01,  1.2463e-01, -5.1779e-01, -1.5664e-02, -3.2118e-02,
          1.0588e-01, -8.6568e-02, -8.4257e-03, -4.5534e-02, -1.3476e-01,
         -3.2347e-01, -5.6285e-02]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
169000 特征值优化 tensor(0.6114, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3302, -0.1195, -0.2857, -1.2129, -0.6307,  0.3357, -0.0184,  0.3200,
         -0.4164, -0.8948, -0.0605,  0.5752, -0.0987, -0.1757, -0.0305, -0.1181,
          0.0721, -0.0885, -0.1773,  0.0053, -0.0839,  0.1106, -0.1869, -0.0211,
          0.0644, -0.0282,  0.0449, -0.0134,  0.0271, -0.0522, -0.0246, -0.0623,
          0.0800,  0.3637, -0.1499, -0.0626,  0.0591,  0.1722, -0.0261,  0.0070,
         -0.0170, -0.1744, -0.0207, -0.0270,  0.4632, -0.1889, -0.0176, -0.0365,
         -0.2224,  0.5496,  0.3733,  0.0406, -0.2050,  0.0649, -0.1247,  0.0835,
         -0.5936,  0.0440, -0.1573, -0.4643,  0.1705,  0.1024, -0.5150, -0.0129,
         -0.0554,  0.1259, -0.0508, -0.0523, -0.0497, -0.1129, -0.3339, -0.0601]],
       device='cuda:0') tensor(0.2054, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
170000 特征值优化 tensor(0.6014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3397, -0.1402, -0.2656, -1.2091, -0.6292,  0.3275, -0.2311,  0.2914,
         -0.4403, -1.0177,  0.1716,  0.5808, -0.0985, -0.1475, -0.0185, -0.1008,
          0.0738, -0.0648, -0.1464, -0.0156, -0.0841,  0.1105, -0.1588,  0.0013,
          0.0584, -0.1027,  0.0220, -0.0557,  0.0376, -0.0509, -0.0215, -0.0609,
          0.0870,  0.3649, -0.1575, -0.0713,  0.1060,  0.1678, -0.0747,  0.0229,
         -0.0656, -0.1222, -0.0197, -0.0327,  0.4693, -0.1598, -0.0305, -0.0535,
         -0.2170,  0.5499,  0.3876,  0.0296, -0.1745,  0.0530, -0.1279,  0.1077,
         -0.5897,  0.0401, -0.1026, -0.4785,  0.1765,  0.0681, -0.5091, -0.0121,
         -0.0247,  0.1458, -0.0506, -0.0892, -0.0863, -0.0670, -0.3629, -0.0806]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
171000 特征值优化 tensor(0.6076, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.3052e-01, -1.3827e-01, -2.5752e-01, -1.1895e+00, -6.2810e-01,
          3.2415e-01, -3.0952e-01,  2.7540e-01, -4.3599e-01, -1.0285e+00,
          2.5272e-01,  5.7170e-01, -9.8682e-02, -1.4503e-01, -1.6064e-02,
         -8.4802e-02,  6.7079e-02, -6.3720e-02, -1.5551e-01, -1.4166e-02,
         -8.3592e-02,  1.1001e-01, -1.6652e-01,  3.9913e-03,  5.1929e-02,
         -4.9707e-02,  2.8812e-02, -4.5138e-02,  4.3170e-02, -5.2773e-02,
         -2.2971e-02, -6.2530e-02,  8.6438e-02,  3.6708e-01, -1.5731e-01,
         -5.1589e-02,  1.2088e-01,  1.6186e-01, -5.5214e-02,  7.0320e-03,
         -7.9444e-02, -1.4652e-01, -1.3439e-02, -3.4836e-02,  4.6795e-01,
         -1.6364e-01, -2.7900e-02, -5.8243e-02, -2.1567e-01,  5.5155e-01,
          3.8108e-01,  3.1725e-02, -1.6938e-01,  4.7279e-02, -1.2534e-01,
          1.1529e-01, -6.1850e-01,  5.4987e-02, -9.4805e-02, -4.8418e-01,
          1.8209e-01,  6.2527e-02, -5.0128e-01, -1.3006e-02,  6.4936e-04,
          8.4015e-02, -1.9691e-02, -5.5504e-02, -9.8030e-02, -5.6745e-02,
         -3.6619e-01, -3.9202e-02]], device='cuda:0') tensor(0.2049, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
172000 特征值优化 tensor(0.6087, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.3717e-01, -1.4294e-01, -2.5907e-01, -1.1955e+00, -6.3159e-01,
          3.1546e-01, -3.6232e-01,  2.9027e-01, -4.2609e-01, -1.0231e+00,
          2.8924e-01,  5.5009e-01, -1.0319e-01, -1.1273e-01, -1.5041e-02,
         -8.1133e-02,  6.6637e-02, -4.9965e-02, -1.5161e-01, -1.9222e-02,
         -7.8849e-02,  1.1039e-01, -1.7708e-01,  7.2381e-04,  4.8924e-02,
         -2.9014e-02,  1.8063e-02, -4.8137e-02,  3.8220e-02, -4.9948e-02,
         -2.2534e-02, -6.1422e-02,  8.8904e-02,  3.6719e-01, -1.5610e-01,
         -5.0395e-02,  1.2923e-01,  1.5643e-01, -5.9708e-02,  4.7365e-03,
         -8.7838e-02, -1.4549e-01, -1.1383e-02, -2.7152e-02,  4.6561e-01,
         -1.8925e-01, -1.9534e-02, -5.8075e-02, -2.1514e-01,  5.5074e-01,
          3.7718e-01,  2.9689e-02, -1.6628e-01,  4.6424e-02, -1.2059e-01,
          1.1506e-01, -6.1657e-01,  5.3221e-02, -9.3411e-02, -4.8425e-01,
          1.9676e-01,  5.5656e-02, -5.0971e-01, -1.3581e-02,  3.6082e-04,
          8.4057e-02, -1.9275e-02, -5.2145e-02, -1.0470e-01, -4.8002e-02,
         -3.5793e-01, -3.5669e-02]], device='cuda:0') tensor(0.2051, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
173000 特征值优化 tensor(0.6052, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3502, -0.1370, -0.2618, -1.1964, -0.6256,  0.3233, -0.4499,  0.3033,
         -0.3986, -1.0180,  0.3352,  0.5287, -0.1045, -0.1145, -0.0103, -0.0486,
          0.0646, -0.0470, -0.1648, -0.0222, -0.0753,  0.1108, -0.1611,  0.0048,
          0.0598, -0.0466,  0.0043, -0.0585,  0.0388, -0.0497, -0.0184, -0.0546,
          0.1035,  0.3677, -0.1566, -0.0513,  0.1433,  0.1508, -0.0777,  0.0079,
         -0.1102, -0.1271, -0.0088, -0.0353,  0.4678, -0.1986, -0.0205, -0.0574,
         -0.2159,  0.5501,  0.3788,  0.0289, -0.1424,  0.0373, -0.1274,  0.1489,
         -0.6097,  0.0494, -0.0932, -0.4816,  0.1927,  0.0546, -0.5023, -0.0092,
          0.0025,  0.1004, -0.0325, -0.0589, -0.1179, -0.0432, -0.3692, -0.0498]],
       device='cuda:0') tensor(0.2044, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
174000 特征值优化 tensor(0.6018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.4692e-01, -1.3869e-01, -2.6487e-01, -1.1955e+00, -6.2794e-01,
          3.0128e-01, -4.9390e-01,  2.9447e-01, -3.8100e-01, -1.0146e+00,
          4.0257e-01,  5.0925e-01, -1.0147e-01, -1.2751e-01, -1.1278e-02,
         -5.2992e-02,  6.9914e-02, -3.7309e-02, -1.5334e-01, -1.7056e-02,
         -7.1930e-02,  1.1062e-01, -1.7679e-01,  4.4683e-02,  1.0245e-01,
          1.0314e-04, -1.0332e-02, -3.6664e-02,  1.8102e-02, -5.0012e-02,
         -1.9266e-02, -4.9359e-02,  1.1101e-01,  3.6604e-01, -1.5563e-01,
         -5.9323e-02,  1.5595e-01,  1.4019e-01, -9.6784e-02,  1.1172e-02,
         -1.2324e-01, -1.0198e-01, -1.5190e-02, -3.3122e-02,  4.6033e-01,
         -2.0958e-01, -2.1659e-02, -5.4334e-02, -2.1696e-01,  5.4797e-01,
          3.7031e-01,  3.4557e-02, -1.3087e-01,  3.3800e-02, -1.2359e-01,
          1.5628e-01, -6.0314e-01,  4.7518e-02, -9.0589e-02, -4.7297e-01,
          1.8006e-01,  5.3047e-02, -5.0049e-01, -5.0190e-03,  4.9755e-04,
          1.2445e-01, -4.9711e-02, -6.9114e-02, -1.2895e-01, -3.5943e-02,
         -3.7150e-01, -7.8183e-02]], device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
175000 特征值优化 tensor(0.6062, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3423, -0.1391, -0.2649, -1.1955, -0.6367,  0.3026, -0.4995,  0.3141,
         -0.3617, -1.0116,  0.4154,  0.4970, -0.1006, -0.1178, -0.0076, -0.0492,
          0.0683, -0.0366, -0.1462, -0.0216, -0.0705,  0.1109, -0.1735,  0.0446,
          0.0933,  0.0096, -0.0142, -0.0414,  0.0190, -0.0500, -0.0189, -0.0528,
          0.1093,  0.3661, -0.1561, -0.0519,  0.1566,  0.1417, -0.0933,  0.0065,
         -0.1239, -0.1117, -0.0134, -0.0336,  0.4577, -0.2111, -0.0216, -0.0552,
         -0.2159,  0.5478,  0.3717,  0.0337, -0.1193,  0.0294, -0.1267,  0.1541,
         -0.6077,  0.0502, -0.0857, -0.4780,  0.1882,  0.0455, -0.5002, -0.0033,
          0.0118,  0.1062, -0.0398, -0.0575, -0.1456, -0.0245, -0.3766, -0.0597]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
176000 特征值优化 tensor(0.6344, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.4129e-01, -1.2397e-01, -2.5832e-01, -1.1818e+00, -6.3408e-01,
          3.0426e-01, -5.1971e-01,  3.2314e-01, -3.3839e-01, -9.8192e-01,
          4.2913e-01,  4.5509e-01, -1.0174e-01, -1.1586e-01, -1.2400e-02,
         -5.4527e-02,  6.8325e-02, -2.7727e-02, -1.3857e-01, -1.7184e-02,
         -7.4764e-02,  1.1067e-01, -1.8875e-01,  3.8845e-02,  1.1043e-01,
          2.7412e-02, -4.8122e-02, -5.3399e-02,  1.9937e-02, -5.1876e-02,
         -2.0927e-02, -5.6964e-02,  1.0488e-01,  3.6648e-01, -1.5115e-01,
         -5.6703e-02,  1.6002e-01,  1.4100e-01, -1.0991e-01, -6.0429e-04,
         -1.2662e-01, -7.9264e-02, -1.4075e-02, -2.8662e-02,  4.5980e-01,
         -2.1076e-01, -2.0543e-02, -5.4937e-02, -2.1678e-01,  5.5104e-01,
          3.6944e-01,  3.4800e-02, -1.2331e-01,  2.8766e-02, -1.2067e-01,
          1.5674e-01, -6.0209e-01,  4.4150e-02, -8.2221e-02, -4.7148e-01,
          1.9295e-01,  4.0840e-02, -5.0234e-01, -9.5357e-04, -6.0032e-03,
          1.2725e-01, -5.2488e-02, -5.9625e-02, -1.5382e-01, -1.7982e-02,
         -3.6839e-01, -8.2963e-02]], device='cuda:0') tensor(0.2042, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
177000 特征值优化 tensor(0.6064, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.4959e-01, -1.3335e-01, -2.6491e-01, -1.1890e+00, -6.2860e-01,
          2.9852e-01, -5.0229e-01,  3.1575e-01, -3.4031e-01, -1.0071e+00,
          3.9636e-01,  4.7521e-01, -1.0187e-01, -1.0740e-01, -1.2251e-02,
         -4.8726e-02,  7.3133e-02, -1.9035e-02, -1.4778e-01, -1.7514e-02,
         -7.1998e-02,  1.1087e-01, -1.9089e-01,  3.9857e-02,  1.1161e-01,
          1.8740e-02, -3.2962e-02, -4.4589e-02,  2.2812e-02, -5.1724e-02,
         -1.9049e-02, -4.8655e-02,  1.1897e-01,  3.6556e-01, -1.5539e-01,
         -5.2238e-02,  1.5741e-01,  1.4168e-01, -9.6323e-02,  5.7129e-03,
         -1.2680e-01, -1.0744e-01, -1.6509e-02, -3.3977e-02,  4.6106e-01,
         -2.0968e-01, -2.2140e-02, -5.4192e-02, -2.1789e-01,  5.4896e-01,
          3.7217e-01,  3.4904e-02, -1.0995e-01,  2.1946e-02, -1.0403e-01,
          1.8060e-01, -6.1005e-01,  5.1270e-02, -7.9360e-02, -4.7789e-01,
          1.9193e-01,  4.3020e-02, -5.0468e-01, -5.5655e-04,  1.2183e-02,
          1.1106e-01, -4.2489e-02, -5.5925e-02, -1.5688e-01, -1.8693e-02,
         -3.7345e-01, -6.7434e-02]], device='cuda:0') tensor(0.2034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
178000 特征值优化 tensor(0.6060, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3420, -0.1453, -0.2631, -1.1910, -0.6323,  0.2987, -0.4869,  0.3104,
         -0.3348, -1.0190,  0.4056,  0.4819, -0.1019, -0.1226, -0.0072, -0.0502,
          0.0629, -0.0327, -0.1361, -0.0172, -0.0733,  0.1105, -0.1871,  0.0403,
          0.1245, -0.0079,  0.0018, -0.0146,  0.0283, -0.0516, -0.0189, -0.0505,
          0.1134,  0.3658, -0.1563, -0.0502,  0.1543,  0.1428, -0.0847,  0.0073,
         -0.1231, -0.1186, -0.0140, -0.0296,  0.4632, -0.2013, -0.0228, -0.0550,
         -0.2168,  0.5481,  0.3732,  0.0348, -0.1157,  0.0274, -0.1043,  0.1754,
         -0.6060,  0.0496, -0.0748, -0.4823,  0.1907,  0.0480, -0.5051, -0.0058,
          0.0093,  0.1100, -0.0355, -0.0541, -0.1591, -0.0267, -0.3790, -0.0609]],
       device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
179000 特征值优化 tensor(0.6088, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3223, -0.1085, -0.2660, -1.1914, -0.6415,  0.3061, -0.4909,  0.2924,
         -0.3123, -0.9958,  0.4203,  0.4368, -0.0930, -0.1327, -0.0158, -0.1018,
          0.0919, -0.0026, -0.1238, -0.0261, -0.0887,  0.1107, -0.2033,  0.0348,
          0.0949,  0.0429, -0.0197, -0.0226,  0.0152, -0.0528, -0.0242, -0.0595,
          0.0969,  0.3647, -0.1631, -0.0479,  0.1559,  0.1463, -0.0769,  0.0051,
         -0.1208, -0.1270, -0.0163, -0.0382,  0.4558, -0.1662, -0.0232, -0.0529,
         -0.2152,  0.5469,  0.3701,  0.0396, -0.1245,  0.0309, -0.1235,  0.1478,
         -0.6028,  0.0433, -0.0776, -0.4887,  0.1899,  0.0398, -0.4947,  0.0071,
          0.0020,  0.0904, -0.0300, -0.0503, -0.1449, -0.0199, -0.3614, -0.0401]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
180000 特征值优化 tensor(0.6060, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.3974e-01, -1.3973e-01, -2.6603e-01, -1.1916e+00, -6.2201e-01,
          3.0167e-01, -5.0363e-01,  3.1461e-01, -3.0820e-01, -1.0112e+00,
          4.0981e-01,  4.4951e-01, -1.0485e-01, -1.2647e-01, -6.3554e-03,
         -4.4484e-02,  5.6300e-02, -2.8116e-02, -1.4143e-01, -1.0368e-02,
         -7.6937e-02,  1.1090e-01, -1.8249e-01,  4.6399e-02,  1.2218e-01,
          4.9877e-03, -3.3113e-02, -4.3084e-02,  3.9077e-02, -5.1586e-02,
         -1.9317e-02, -5.0904e-02,  1.1149e-01,  3.6546e-01, -1.5684e-01,
         -5.5571e-02,  1.5688e-01,  1.4281e-01, -1.0515e-01,  7.1463e-03,
         -1.2583e-01, -9.9205e-02, -1.1106e-02, -2.7090e-02,  4.6843e-01,
         -2.0286e-01, -1.5330e-02, -5.4946e-02, -2.1665e-01,  5.4760e-01,
          3.7387e-01,  3.4244e-02, -1.2909e-01,  3.3040e-02, -1.0466e-01,
          1.8250e-01, -6.0051e-01,  4.5221e-02, -8.2232e-02, -4.7826e-01,
          2.0130e-01,  4.2499e-02, -4.9658e-01, -3.1452e-03,  1.0731e-04,
          1.3086e-01, -4.3492e-02, -6.2062e-02, -1.5508e-01, -2.6003e-02,
         -3.7278e-01, -7.7950e-02]], device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
181000 特征值优化 tensor(0.6008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.1445e-01, -1.0331e-01, -2.7002e-01, -1.1756e+00, -6.4589e-01,
          3.1260e-01, -4.8810e-01,  2.9051e-01, -3.3127e-01, -1.0499e+00,
          4.5466e-01,  4.4134e-01, -9.4042e-02, -1.2448e-01, -1.7819e-02,
         -1.3638e-01,  1.0536e-01, -1.1964e-02, -1.1899e-01, -4.3089e-02,
         -8.8818e-02,  1.1060e-01, -2.0643e-01,  2.1401e-02,  1.0012e-01,
          7.0159e-02, -3.6446e-04,  1.2000e-02,  1.2754e-02, -5.4695e-02,
         -2.4259e-02, -6.1725e-02,  9.0737e-02,  3.6497e-01, -1.7026e-01,
         -3.7459e-02,  1.5451e-01,  1.4660e-01, -4.1453e-02,  1.0010e-02,
         -1.1743e-01, -1.5554e-01, -1.1994e-02, -4.3372e-02,  4.6779e-01,
         -1.5733e-01, -3.0608e-02, -5.1473e-02, -2.1791e-01,  5.4965e-01,
          3.6875e-01,  3.9557e-02, -1.4119e-01,  3.4662e-02, -1.2166e-01,
          1.4300e-01, -5.9952e-01,  4.1997e-02, -5.4458e-02, -4.9177e-01,
          1.9633e-01,  3.6868e-02, -4.9767e-01,  9.4282e-03,  2.7553e-02,
          5.7443e-02, -1.5496e-02, -4.3443e-02, -1.5251e-01, -2.0073e-02,
         -3.8977e-01, -1.1164e-02]], device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
182000 特征值优化 tensor(0.6075, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3430, -0.1487, -0.2639, -1.1972, -0.6278,  0.3011, -0.4814,  0.2975,
         -0.3099, -1.0434,  0.4054,  0.4546, -0.1043, -0.1203, -0.0066, -0.0618,
          0.0548, -0.0307, -0.1358, -0.0172, -0.0774,  0.1105, -0.1725,  0.0474,
          0.0882,  0.0085,  0.0185, -0.0121,  0.0262, -0.0502, -0.0188, -0.0527,
          0.1086,  0.3661, -0.1578, -0.0420,  0.1501,  0.1461, -0.0719,  0.0084,
         -0.1174, -0.1337, -0.0091, -0.0275,  0.4700, -0.1903, -0.0218, -0.0548,
         -0.2165,  0.5479,  0.3716,  0.0345, -0.1274,  0.0319, -0.1103,  0.1644,
         -0.6065,  0.0496, -0.0616, -0.4893,  0.2015,  0.0473, -0.4993, -0.0061,
          0.0120,  0.0967, -0.0173, -0.0464, -0.1597, -0.0303, -0.3792, -0.0472]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
183000 特征值优化 tensor(0.6056, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3423, -0.1419, -0.2654, -1.1978, -0.6285,  0.3033, -0.4958,  0.2937,
         -0.2930, -1.0330,  0.3999,  0.4300, -0.1006, -0.1267, -0.0105, -0.0478,
          0.0646, -0.0314, -0.1401, -0.0125, -0.0719,  0.1107, -0.1772,  0.0445,
          0.1063, -0.0062, -0.0035, -0.0327,  0.0176, -0.0500, -0.0188, -0.0501,
          0.1137,  0.3657, -0.1583, -0.0500,  0.1520,  0.1446, -0.0945,  0.0082,
         -0.1203, -0.1091, -0.0175, -0.0290,  0.4598, -0.2071, -0.0230, -0.0548,
         -0.2160,  0.5473,  0.3720,  0.0339, -0.1183,  0.0269, -0.1054,  0.1750,
         -0.6039,  0.0472, -0.0733, -0.4800,  0.2033,  0.0474, -0.4976, -0.0053,
          0.0065,  0.1205, -0.0314, -0.0562, -0.1631, -0.0265, -0.3752, -0.0703]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
184000 特征值优化 tensor(0.6067, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.4425e-01, -1.4306e-01, -2.6160e-01, -1.1937e+00, -6.2674e-01,
          3.0168e-01, -4.9296e-01,  2.9938e-01, -2.9247e-01, -1.0407e+00,
          4.1841e-01,  4.3091e-01, -1.0367e-01, -1.2113e-01, -7.6346e-03,
         -4.6426e-02,  6.4035e-02, -2.7830e-02, -1.3429e-01, -1.4999e-02,
         -7.4777e-02,  1.1061e-01, -1.7064e-01,  4.6281e-02,  9.4576e-02,
          5.1427e-03,  9.2041e-04, -2.7914e-02,  2.1141e-02, -4.9977e-02,
         -1.9053e-02, -5.0381e-02,  1.1356e-01,  3.6588e-01, -1.5765e-01,
         -4.4466e-02,  1.5217e-01,  1.4420e-01, -8.6120e-02,  6.9431e-03,
         -1.2026e-01, -1.1874e-01, -1.3371e-02, -2.9533e-02,  4.6899e-01,
         -1.9944e-01, -2.0761e-02, -5.6696e-02, -2.1613e-01,  5.4796e-01,
          3.6980e-01,  3.3876e-02, -1.2073e-01,  2.8502e-02, -1.0389e-01,
          1.7313e-01, -6.0633e-01,  4.9885e-02, -6.4634e-02, -4.8522e-01,
          2.0213e-01,  4.7640e-02, -5.0061e-01, -6.3667e-03,  1.2294e-02,
          1.0569e-01, -2.1953e-02, -4.9043e-02, -1.6965e-01, -2.7505e-02,
         -3.7944e-01, -5.9247e-02]], device='cuda:0') tensor(0.2042, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
185000 特征值优化 tensor(0.6094, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3458, -0.1440, -0.2612, -1.1899, -0.6334,  0.2999, -0.4885,  0.2988,
         -0.2894, -1.0450,  0.4195,  0.4356, -0.1044, -0.1175, -0.0045, -0.0572,
          0.0583, -0.0308, -0.1328, -0.0157, -0.0773,  0.1109, -0.1793,  0.0427,
          0.0817,  0.0292, -0.0046, -0.0222,  0.0242, -0.0516, -0.0188, -0.0523,
          0.1094,  0.3658, -0.1579, -0.0388,  0.1513,  0.1460, -0.0728,  0.0070,
         -0.1179, -0.1339, -0.0119, -0.0285,  0.4721, -0.1926, -0.0211, -0.0573,
         -0.2155,  0.5482,  0.3718,  0.0344, -0.1235,  0.0313, -0.1131,  0.1625,
         -0.6092,  0.0511, -0.0555, -0.4902,  0.2043,  0.0442, -0.4983, -0.0043,
          0.0161,  0.0912, -0.0116, -0.0424, -0.1667, -0.0274, -0.3805, -0.0447]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
186000 特征值优化 tensor(0.6317, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3158, -0.1057, -0.2824, -1.1798, -0.6416,  0.3156, -0.4909,  0.2741,
         -0.3115, -1.0787,  0.4573,  0.4274, -0.0948, -0.1209, -0.0215, -0.1379,
          0.1050, -0.0229, -0.1218, -0.0471, -0.0881,  0.1106, -0.2030,  0.0199,
          0.0947,  0.0707,  0.0093,  0.0248,  0.0173, -0.0523, -0.0241, -0.0633,
          0.0901,  0.3619, -0.1709, -0.0342,  0.1524,  0.1458, -0.0301,  0.0162,
         -0.1144, -0.1640, -0.0125, -0.0422,  0.4707, -0.1544, -0.0339, -0.0444,
         -0.2182,  0.5480,  0.3640,  0.0393, -0.1472,  0.0353, -0.1180,  0.1391,
         -0.5917,  0.0418, -0.0319, -0.4992,  0.2035,  0.0393, -0.4933,  0.0045,
          0.0381,  0.0535, -0.0043, -0.0493, -0.1539, -0.0220, -0.4079, -0.0013]],
       device='cuda:0') tensor(0.2079, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
187000 特征值优化 tensor(0.6130, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3339, -0.1356, -0.2662, -1.1838, -0.6302,  0.3089, -0.4758,  0.2867,
         -0.3015, -1.0603,  0.4332,  0.4311, -0.0999, -0.1090, -0.0099, -0.0937,
          0.0678, -0.0300, -0.1349, -0.0243, -0.0819,  0.1106, -0.1760,  0.0384,
          0.0729,  0.0329,  0.0148, -0.0060,  0.0154, -0.0508, -0.0188, -0.0573,
          0.0999,  0.3671, -0.1617, -0.0338,  0.1508,  0.1481, -0.0501,  0.0048,
         -0.1167, -0.1497, -0.0115, -0.0399,  0.4724, -0.1678, -0.0278, -0.0531,
         -0.2182,  0.5499,  0.3670,  0.0358, -0.1371,  0.0364, -0.1165,  0.1533,
         -0.6000,  0.0464, -0.0462, -0.4979,  0.2020,  0.0382, -0.4938,  0.0015,
          0.0195,  0.0739,  0.0143, -0.0365, -0.1674, -0.0221, -0.3959, -0.0211]],
       device='cuda:0') tensor(0.2071, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
188000 特征值优化 tensor(0.6150, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3315, -0.1264, -0.2693, -1.1755, -0.6308,  0.3086, -0.4803,  0.2823,
         -0.3005, -1.0619,  0.4373,  0.4232, -0.0998, -0.1149, -0.0123, -0.1006,
          0.0691, -0.0245, -0.1372, -0.0251, -0.0824,  0.1106, -0.1770,  0.0359,
          0.0748,  0.0375,  0.0134, -0.0031,  0.0254, -0.0500, -0.0208, -0.0592,
          0.0977,  0.3666, -0.1643, -0.0333,  0.1513,  0.1480, -0.0460,  0.0076,
         -0.1170, -0.1520, -0.0070, -0.0394,  0.4737, -0.1626, -0.0341, -0.0532,
         -0.2204,  0.5531,  0.3613,  0.0358, -0.1375,  0.0332, -0.1169,  0.1525,
         -0.5989,  0.0453, -0.0422, -0.4999,  0.2009,  0.0374, -0.4928,  0.0046,
          0.0217,  0.0694,  0.0146, -0.0387, -0.1659, -0.0197, -0.3983, -0.0181]],
       device='cuda:0') tensor(0.2051, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
189000 特征值优化 tensor(0.6131, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3327, -0.1357, -0.2656, -1.1818, -0.6319,  0.3090, -0.4788,  0.2830,
         -0.2945, -1.0604,  0.4338,  0.4190, -0.1001, -0.1105, -0.0117, -0.0931,
          0.0632, -0.0298, -0.1364, -0.0265, -0.0819,  0.1101, -0.1753,  0.0396,
          0.0720,  0.0330,  0.0149, -0.0049,  0.0192, -0.0516, -0.0200, -0.0572,
          0.1000,  0.3671, -0.1607, -0.0325,  0.1515,  0.1478, -0.0505,  0.0055,
         -0.1172, -0.1507, -0.0102, -0.0401,  0.4728, -0.1671, -0.0280, -0.0531,
         -0.2180,  0.5493,  0.3680,  0.0362, -0.1369,  0.0347, -0.1150,  0.1539,
         -0.6003,  0.0464, -0.0442, -0.4971,  0.2037,  0.0378, -0.4929,  0.0020,
          0.0168,  0.0760,  0.0139, -0.0352, -0.1690, -0.0212, -0.3943, -0.0232]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
190000 特征值优化 tensor(0.6089, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3403, -0.1453, -0.2645, -1.1948, -0.6269,  0.2985, -0.4880,  0.2895,
         -0.2754, -1.0624,  0.4207,  0.4243, -0.1027, -0.1183, -0.0098, -0.0710,
          0.0523, -0.0289, -0.1371, -0.0179, -0.0792,  0.1104, -0.1725,  0.0449,
          0.0780,  0.0189,  0.0129, -0.0133,  0.0221, -0.0502, -0.0188, -0.0523,
          0.1088,  0.3664, -0.1595, -0.0361,  0.1486,  0.1490, -0.0645,  0.0079,
         -0.1158, -0.1399, -0.0115, -0.0316,  0.4717, -0.1817, -0.0235, -0.0548,
         -0.2171,  0.5488,  0.3716,  0.0342, -0.1271,  0.0316, -0.1144,  0.1625,
         -0.6102,  0.0524, -0.0484, -0.4925,  0.2068,  0.0454, -0.4934, -0.0037,
          0.0170,  0.0859,  0.0012, -0.0403, -0.1697, -0.0285, -0.3862, -0.0410]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
191000 特征值优化 tensor(0.6087, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3407, -0.1482, -0.2660, -1.1974, -0.6280,  0.3070, -0.4731,  0.2896,
         -0.2729, -1.0568,  0.4208,  0.4056, -0.1041, -0.1207, -0.0104, -0.0596,
          0.0605, -0.0357, -0.1328, -0.0140, -0.0771,  0.1103, -0.1705,  0.0463,
          0.0857,  0.0171,  0.0151, -0.0152,  0.0256, -0.0502, -0.0210, -0.0598,
          0.0927,  0.3658, -0.1587, -0.0403,  0.1478,  0.1487, -0.0718,  0.0076,
         -0.1139, -0.1344, -0.0118, -0.0263,  0.4711, -0.1911, -0.0211, -0.0541,
         -0.2169,  0.5482,  0.3731,  0.0335, -0.1437,  0.0387, -0.0979,  0.1619,
         -0.6130,  0.0516, -0.0524, -0.4907,  0.2199,  0.0342, -0.5068,  0.0040,
          0.0096,  0.0953, -0.0070, -0.0425, -0.1724, -0.0223, -0.3726, -0.0453]],
       device='cuda:0') tensor(0.2056, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
192000 特征值优化 tensor(0.6129, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.3710e-01, -1.3215e-01, -2.6714e-01, -1.1828e+00, -6.2769e-01,
          3.0589e-01, -4.8861e-01,  2.8169e-01, -2.8072e-01, -1.0664e+00,
          4.3191e-01,  4.1022e-01, -9.9068e-02, -1.1558e-01, -1.3363e-02,
         -8.6563e-02,  6.9078e-02, -3.1600e-02, -1.3115e-01, -2.2496e-02,
         -8.3071e-02,  1.1077e-01, -1.7350e-01,  3.8530e-02,  6.9941e-02,
          2.9337e-02,  9.9766e-03, -8.0415e-03,  1.5317e-02, -5.0521e-02,
         -1.9165e-02, -5.5625e-02,  1.0510e-01,  3.6680e-01, -1.6074e-01,
         -3.2364e-02,  1.4925e-01,  1.4920e-01, -5.2369e-02,  6.3472e-03,
         -1.1474e-01, -1.4906e-01, -1.5530e-02, -3.7373e-02,  4.7203e-01,
         -1.7092e-01, -2.5789e-02, -5.2406e-02, -2.1866e-01,  5.4865e-01,
          3.6670e-01,  3.5183e-02, -1.3619e-01,  3.7861e-02, -1.1564e-01,
          1.5655e-01, -6.0111e-01,  4.8027e-02, -4.0617e-02, -4.9583e-01,
          2.0688e-01,  4.1804e-02, -4.9215e-01,  7.2771e-04,  1.8796e-02,
          7.5971e-02,  1.6025e-02, -3.5575e-02, -1.6779e-01, -2.2428e-02,
         -3.9673e-01, -2.3806e-02]], device='cuda:0') tensor(0.2102, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
193000 特征值优化 tensor(0.6102, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3369, -0.1417, -0.2637, -1.1943, -0.6314,  0.3001, -0.4822,  0.2857,
         -0.2676, -1.0591,  0.4283,  0.4052, -0.1018, -0.1164, -0.0085, -0.0751,
          0.0584, -0.0322, -0.1394, -0.0202, -0.0803,  0.1107, -0.1723,  0.0437,
          0.0806,  0.0222,  0.0135, -0.0071,  0.0238, -0.0502, -0.0191, -0.0527,
          0.1059,  0.3661, -0.1600, -0.0347,  0.1482,  0.1496, -0.0598,  0.0072,
         -0.1147, -0.1437, -0.0096, -0.0357,  0.4702, -0.1772, -0.0239, -0.0547,
         -0.2174,  0.5490,  0.3709,  0.0344, -0.1327,  0.0352, -0.1116,  0.1599,
         -0.6084,  0.0500, -0.0445, -0.4941,  0.2111,  0.0417, -0.4924, -0.0015,
          0.0150,  0.0844,  0.0062, -0.0377, -0.1730, -0.0272, -0.3865, -0.0364]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
194000 特征值优化 tensor(0.6100, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.3876e-01, -1.4357e-01, -2.6293e-01, -1.1916e+00, -6.3351e-01,
          2.9921e-01, -4.9358e-01,  2.8512e-01, -2.6001e-01, -1.0591e+00,
          4.2065e-01,  4.0390e-01, -1.0313e-01, -1.1892e-01, -4.7989e-03,
         -6.5325e-02,  5.3032e-02, -3.0018e-02, -1.3448e-01, -1.6723e-02,
         -7.9191e-02,  1.1066e-01, -1.7437e-01,  4.1517e-02,  7.9164e-02,
          2.6107e-02,  9.4555e-03, -1.6273e-02,  1.7283e-02, -5.0438e-02,
         -1.8907e-02, -5.1748e-02,  1.0974e-01,  3.6638e-01, -1.5911e-01,
         -3.4378e-02,  1.4691e-01,  1.4961e-01, -6.7095e-02,  7.4616e-03,
         -1.1525e-01, -1.3839e-01, -9.6905e-03, -2.7908e-02,  4.6914e-01,
         -1.8490e-01, -2.2960e-02, -5.5875e-02, -2.1646e-01,  5.4911e-01,
          3.6959e-01,  3.4875e-02, -1.2340e-01,  3.0951e-02, -1.1374e-01,
          1.6293e-01, -6.0970e-01,  5.1826e-02, -4.5679e-02, -4.9242e-01,
          2.1390e-01,  4.6348e-02, -4.9244e-01, -4.2885e-03,  1.8693e-02,
          8.6106e-02,  6.7675e-04, -3.8527e-02, -1.7575e-01, -2.9038e-02,
         -3.8539e-01, -4.1292e-02]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
195000 特征值优化 tensor(0.6101, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.3452e-01, -1.4254e-01, -2.6305e-01, -1.1866e+00, -6.2779e-01,
          2.9574e-01, -4.8031e-01,  2.7850e-01, -2.6584e-01, -1.0687e+00,
          4.2872e-01,  4.1134e-01, -1.0059e-01, -1.1215e-01, -1.1974e-02,
         -8.0759e-02,  6.2245e-02, -3.0644e-02, -1.3762e-01, -2.3437e-02,
         -8.1328e-02,  1.1041e-01, -1.7606e-01,  4.4766e-02,  8.8535e-02,
          2.3218e-02,  9.3187e-03,  7.7716e-04,  2.4169e-02, -5.2020e-02,
         -1.9769e-02, -5.3352e-02,  1.0631e-01,  3.6624e-01, -1.6083e-01,
         -3.2809e-02,  1.4591e-01,  1.5153e-01, -5.1859e-02,  8.7791e-03,
         -1.1292e-01, -1.4944e-01, -8.6924e-03, -3.8908e-02,  4.7076e-01,
         -1.7163e-01, -2.4701e-02, -5.4936e-02, -2.1519e-01,  5.4744e-01,
          3.6506e-01,  3.8432e-02, -1.3186e-01,  3.4282e-02, -1.1535e-01,
          1.5965e-01, -6.0244e-01,  4.8761e-02, -4.2273e-02, -4.9492e-01,
          2.0893e-01,  4.4122e-02, -4.9044e-01, -3.9168e-04,  1.3474e-02,
          8.2577e-02,  9.9908e-03, -3.6303e-02, -1.7520e-01, -2.6952e-02,
         -3.9056e-01, -3.2718e-02]], device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
196000 特征值优化 tensor(0.6029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3407, -0.1411, -0.2626, -1.1856, -0.6299,  0.3001, -0.5083,  0.2805,
         -0.2445, -1.0470,  0.4074,  0.3733, -0.1006, -0.1201, -0.0077, -0.0468,
          0.0691, -0.0337, -0.1469, -0.0204, -0.0714,  0.1103, -0.1904,  0.0413,
          0.1264,  0.0034, -0.0339, -0.0364,  0.0330, -0.0527, -0.0192, -0.0474,
          0.1174,  0.3657, -0.1593, -0.0527,  0.1489,  0.1471, -0.1041,  0.0102,
         -0.1165, -0.0953, -0.0125, -0.0331,  0.4570, -0.2105, -0.0217, -0.0557,
         -0.2160,  0.5485,  0.3711,  0.0363, -0.1167,  0.0267, -0.1067,  0.1740,
         -0.5965,  0.0435, -0.0619, -0.4785,  0.2186,  0.0457, -0.4913, -0.0036,
          0.0015,  0.1423, -0.0360, -0.0576, -0.1765, -0.0235, -0.3773, -0.0899]],
       device='cuda:0') tensor(0.2029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
197000 特征值优化 tensor(0.6051, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3438, -0.1412, -0.2648, -1.1907, -0.6294,  0.3029, -0.5146,  0.2818,
         -0.2440, -1.0540,  0.4198,  0.3734, -0.1001, -0.1233, -0.0106, -0.0430,
          0.0671, -0.0315, -0.1418, -0.0183, -0.0707,  0.1110, -0.1819,  0.0435,
          0.1014,  0.0177, -0.0335, -0.0393,  0.0201, -0.0514, -0.0190, -0.0472,
          0.1160,  0.3659, -0.1593, -0.0481,  0.1494,  0.1467, -0.1050,  0.0065,
         -0.1179, -0.0981, -0.0139, -0.0314,  0.4567, -0.2102, -0.0224, -0.0557,
         -0.2164,  0.5476,  0.3718,  0.0349, -0.1190,  0.0277, -0.1070,  0.1738,
         -0.6052,  0.0477, -0.0631, -0.4796,  0.2209,  0.0461, -0.4922, -0.0046,
          0.0089,  0.1274, -0.0258, -0.0546, -0.1798, -0.0244, -0.3751, -0.0798]],
       device='cuda:0') tensor(0.2053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
198000 特征值优化 tensor(0.6074, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.3747e-01, -1.4399e-01, -2.6207e-01, -1.1962e+00, -6.2298e-01,
          3.1343e-01, -4.9563e-01,  3.0296e-01, -2.6335e-01, -1.0686e+00,
          4.1785e-01,  3.6584e-01, -1.0356e-01, -1.3091e-01, -1.1535e-02,
         -5.0707e-02,  4.9387e-02, -3.7240e-02, -1.3547e-01, -9.0410e-03,
         -7.7721e-02,  1.0937e-01, -1.7729e-01,  3.8766e-02,  9.2356e-02,
          4.5938e-03,  5.6040e-04, -3.2841e-02,  8.9854e-03, -4.8920e-02,
         -1.9948e-02, -5.8135e-02,  9.2630e-02,  3.6576e-01, -1.5865e-01,
         -4.3152e-02,  1.4428e-01,  1.5451e-01, -8.4357e-02,  7.4244e-03,
         -1.1143e-01, -1.1914e-01, -1.2796e-02, -2.5103e-02,  4.6981e-01,
         -1.9812e-01, -1.7816e-02, -5.4023e-02, -2.1553e-01,  5.4872e-01,
          3.6405e-01,  3.6784e-02, -1.5070e-01,  4.3354e-02, -1.0422e-01,
          1.6512e-01, -6.1477e-01,  5.0569e-02, -6.0219e-02, -4.8367e-01,
          2.4507e-01,  2.8702e-02, -5.0704e-01,  7.4433e-03,  7.3405e-03,
          1.0376e-01, -7.6795e-03, -4.8269e-02, -1.8220e-01, -2.1981e-02,
         -3.6046e-01, -5.6480e-02]], device='cuda:0') tensor(0.2057, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
199000 特征值优化 tensor(0.6075, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.4867e-01, -1.1816e-01, -2.6413e-01, -1.1810e+00, -6.2564e-01,
          3.0913e-01, -5.3246e-01,  3.0114e-01, -2.3075e-01, -1.0302e+00,
          4.2769e-01,  3.5237e-01, -1.0327e-01, -1.2159e-01, -9.3790e-03,
         -4.2101e-02,  5.9438e-02, -2.3941e-02, -1.3541e-01, -6.3844e-03,
         -7.8595e-02,  1.1003e-01, -1.9440e-01,  3.5560e-02,  1.4517e-01,
         -1.8340e-02, -5.1778e-02, -5.8439e-02, -4.1816e-03, -5.0641e-02,
         -1.8568e-02, -4.7124e-02,  1.1632e-01,  3.6529e-01, -1.5746e-01,
         -4.6346e-02,  1.4872e-01,  1.5027e-01, -1.0582e-01,  4.1781e-03,
         -1.1820e-01, -1.0036e-01, -1.9753e-02, -2.5533e-02,  4.6640e-01,
         -2.1022e-01, -1.4385e-02, -5.4834e-02, -2.1322e-01,  5.4284e-01,
          3.4519e-01,  4.7223e-02, -1.1950e-01,  2.6953e-02, -1.1041e-01,
          1.7853e-01, -6.1117e-01,  4.9708e-02, -6.2532e-02, -4.8210e-01,
          2.3102e-01,  4.0192e-02, -4.9372e-01,  1.5688e-04,  7.8515e-03,
          1.2531e-01, -2.7690e-02, -4.8460e-02, -1.8856e-01, -1.9357e-02,
         -3.5908e-01, -8.1034e-02]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
200000 特征值优化 tensor(0.6079, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3619, -0.1223, -0.2651, -1.1890, -0.6355,  0.3023, -0.5171,  0.2882,
         -0.2330, -1.0480,  0.4311,  0.3703, -0.1045, -0.1177, -0.0062, -0.0455,
          0.0650, -0.0227, -0.1329, -0.0194, -0.0774,  0.1109, -0.1803,  0.0458,
          0.1013,  0.0293, -0.0288, -0.0349,  0.0292, -0.0515, -0.0190, -0.0460,
          0.1168,  0.3657, -0.1584, -0.0422,  0.1469,  0.1495, -0.0957,  0.0060,
         -0.1159, -0.1108, -0.0140, -0.0296,  0.4646, -0.1957, -0.0233, -0.0555,
         -0.2166,  0.5479,  0.3719,  0.0348, -0.1097,  0.0244, -0.1100,  0.1738,
         -0.6073,  0.0492, -0.0589, -0.4837,  0.2226,  0.0478, -0.4964, -0.0020,
          0.0116,  0.1144, -0.0181, -0.0459, -0.1933, -0.0239, -0.3744, -0.0672]],
       device='cuda:0') tensor(0.2053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
201000 特征值优化 tensor(0.6381, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3559, -0.1230, -0.2652, -1.1906, -0.6428,  0.3031, -0.5174,  0.2756,
         -0.2260, -1.0313,  0.4158,  0.3532, -0.1040, -0.1095, -0.0019, -0.0450,
          0.0661, -0.0247, -0.1365, -0.0199, -0.0778,  0.1110, -0.1846,  0.0428,
          0.1146,  0.0238, -0.0444, -0.0481,  0.0269, -0.0518, -0.0202, -0.0453,
          0.1147,  0.3651, -0.1578, -0.0505,  0.1460,  0.1511, -0.1187,  0.0018,
         -0.1159, -0.0814, -0.0125, -0.0288,  0.4632, -0.1947, -0.0228, -0.0553,
         -0.2162,  0.5486,  0.3742,  0.0341, -0.1058,  0.0243, -0.1101,  0.1681,
         -0.6013,  0.0452, -0.0585, -0.4783,  0.2207,  0.0512, -0.4935, -0.0019,
          0.0035,  0.1389, -0.0340, -0.0538, -0.1884, -0.0235, -0.3733, -0.0914]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
202000 特征值优化 tensor(0.6034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.1859e-01, -9.8755e-02, -2.5893e-01, -1.1738e+00, -6.4925e-01,
          3.1464e-01, -5.1179e-01,  2.7481e-01, -2.2206e-01, -1.0223e+00,
          4.7251e-01,  3.4030e-01, -9.4421e-02, -1.2305e-01, -1.5113e-02,
         -1.2770e-01,  1.0305e-01, -6.3263e-03, -1.1915e-01, -3.8176e-02,
         -8.8425e-02,  1.1089e-01, -1.9006e-01,  3.6826e-02,  1.0310e-01,
          8.4849e-02, -2.8567e-02, -5.3187e-05,  2.7319e-02, -5.3517e-02,
         -2.3408e-02, -5.7601e-02,  9.6806e-02,  3.6622e-01, -1.7179e-01,
         -4.0257e-02,  1.4854e-01,  1.5331e-01, -6.1593e-02,  1.1058e-02,
         -1.1322e-01, -1.3551e-01, -1.3146e-02, -4.4529e-02,  4.6714e-01,
         -1.6082e-01, -2.9503e-02, -5.6980e-02, -2.1831e-01,  5.5305e-01,
          3.6853e-01,  3.7164e-02, -1.2746e-01,  2.9459e-02, -1.2726e-01,
          1.4280e-01, -6.0333e-01,  4.3072e-02, -3.9717e-02, -4.8952e-01,
          2.1760e-01,  3.6274e-02, -4.8930e-01,  1.2892e-02,  2.5978e-02,
          8.8394e-02, -2.4894e-02, -4.5735e-02, -1.8477e-01, -1.4150e-02,
         -3.8512e-01, -4.1691e-02]], device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
203000 特征值优化 tensor(0.6315, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.5607e-01, -1.1195e-01, -2.7167e-01, -1.1867e+00, -6.2550e-01,
          3.1041e-01, -5.2075e-01,  2.8917e-01, -2.2371e-01, -1.0326e+00,
          4.2421e-01,  3.6159e-01, -1.0384e-01, -1.1485e-01, -1.5176e-02,
         -4.9913e-02,  6.7418e-02, -2.0693e-02, -1.3258e-01, -7.7813e-03,
         -7.9597e-02,  1.1115e-01, -1.9611e-01,  3.2162e-02,  1.2470e-01,
         -1.4060e-03, -6.1863e-02, -6.7911e-02, -6.9315e-03, -5.0568e-02,
         -1.9764e-02, -4.9151e-02,  1.1160e-01,  3.6398e-01, -1.5720e-01,
         -4.5967e-02,  1.4530e-01,  1.5313e-01, -1.0125e-01,  5.3783e-03,
         -1.1544e-01, -9.9804e-02, -2.0548e-02, -2.6919e-02,  4.6785e-01,
         -2.0799e-01, -1.6370e-02, -4.8420e-02, -2.1450e-01,  5.4436e-01,
          3.5749e-01,  4.0100e-02, -1.1130e-01,  2.4799e-02, -1.1362e-01,
          1.6637e-01, -6.0883e-01,  4.8619e-02, -6.0502e-02, -4.8028e-01,
          2.2541e-01,  4.4926e-02, -4.9339e-01,  1.0792e-03,  3.5254e-03,
          1.2337e-01, -2.5575e-02, -5.1145e-02, -1.9574e-01, -1.8863e-02,
         -3.6209e-01, -7.5131e-02]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
204000 特征值优化 tensor(0.6073, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3608, -0.1221, -0.2732, -1.2030, -0.6415,  0.3042, -0.5157,  0.2838,
         -0.2342, -1.0451,  0.4263,  0.3710, -0.1041, -0.1221, -0.0031, -0.0427,
          0.0624, -0.0230, -0.1330, -0.0187, -0.0774,  0.1104, -0.1844,  0.0401,
          0.1263, -0.0167, -0.0201, -0.0392,  0.0089, -0.0503, -0.0188, -0.0437,
          0.1194,  0.3659, -0.1575, -0.0451,  0.1460,  0.1506, -0.1023,  0.0051,
         -0.1150, -0.1029, -0.0142, -0.0295,  0.4632, -0.1963, -0.0235, -0.0502,
         -0.2167,  0.5472,  0.3735,  0.0350, -0.1026,  0.0221, -0.1107,  0.1715,
         -0.6077,  0.0491, -0.0641, -0.4809,  0.2237,  0.0495, -0.4971, -0.0018,
          0.0101,  0.1214, -0.0225, -0.0492, -0.1992, -0.0235, -0.3714, -0.0740]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
205000 特征值优化 tensor(0.6083, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.4525e-01, -1.3284e-01, -2.6146e-01, -1.1852e+00, -6.3169e-01,
          3.0380e-01, -5.0079e-01,  2.8170e-01, -2.4504e-01, -1.0553e+00,
          4.2772e-01,  3.8205e-01, -1.0450e-01, -1.1734e-01, -5.9260e-03,
         -4.6007e-02,  6.3841e-02, -2.6318e-02, -1.3554e-01, -1.0777e-02,
         -7.7104e-02,  1.1047e-01, -1.8314e-01,  3.5756e-02,  7.8446e-02,
          3.7834e-02,  4.4542e-04, -1.6512e-02, -1.5479e-03, -5.0733e-02,
         -1.8863e-02, -4.8512e-02,  1.1318e-01,  3.6597e-01, -1.5874e-01,
         -3.8772e-02,  1.4291e-01,  1.5401e-01, -8.0891e-02,  7.8093e-03,
         -1.1212e-01, -1.2528e-01, -1.3484e-02, -3.0683e-02,  4.7064e-01,
         -2.0024e-01, -1.8238e-02, -5.5919e-02, -2.1244e-01,  5.4404e-01,
          3.5547e-01,  4.1370e-02, -1.1501e-01,  2.6756e-02, -1.1100e-01,
          1.7159e-01, -6.1143e-01,  5.1348e-02, -5.2892e-02, -4.8838e-01,
          2.2345e-01,  4.7058e-02, -4.9239e-01, -1.8263e-03,  1.3929e-02,
          1.0273e-01, -1.0756e-02, -4.2915e-02, -1.9665e-01, -2.6448e-02,
         -3.7415e-01, -5.6398e-02]], device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
206000 特征值优化 tensor(0.6069, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.5511e-01, -1.2601e-01, -2.6332e-01, -1.1808e+00, -6.2261e-01,
          3.0200e-01, -5.2811e-01,  2.8460e-01, -2.3882e-01, -1.0323e+00,
          4.3477e-01,  3.5950e-01, -1.0120e-01, -1.1610e-01, -1.4915e-02,
         -4.6684e-02,  6.5320e-02, -2.5639e-02, -1.3584e-01, -3.0075e-03,
         -7.2120e-02,  1.1033e-01, -1.9536e-01,  2.6182e-02,  7.6744e-02,
          5.9036e-02,  2.8131e-02,  1.9502e-02, -1.1513e-02, -5.0876e-02,
         -1.8588e-02, -4.6652e-02,  1.1802e-01,  3.6593e-01, -1.5671e-01,
         -5.0911e-02,  1.4719e-01,  1.5040e-01, -1.0683e-01,  4.1294e-03,
         -1.1592e-01, -9.6258e-02, -2.6387e-02, -2.4006e-02,  4.6088e-01,
         -2.1977e-01, -1.8036e-02, -5.5382e-02, -2.1320e-01,  5.4385e-01,
          3.4550e-01,  4.6445e-02, -1.1413e-01,  2.4097e-02, -1.0974e-01,
          1.7460e-01, -6.0626e-01,  4.8847e-02, -6.5937e-02, -4.8201e-01,
          2.2864e-01,  4.6044e-02, -4.9307e-01, -4.7304e-04, -3.7524e-03,
          1.3613e-01, -3.0570e-02, -5.4712e-02, -2.0000e-01, -2.3014e-02,
         -3.4784e-01, -9.0856e-02]], device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
207000 特征值优化 tensor(0.6092, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.3754e-01, -1.1560e-01, -2.6160e-01, -1.1829e+00, -6.3861e-01,
          3.0253e-01, -5.1594e-01,  2.9721e-01, -2.4105e-01, -1.0472e+00,
          4.3829e-01,  3.7612e-01, -9.9635e-02, -1.2703e-01, -6.1233e-03,
         -4.5598e-02,  4.8646e-02, -3.2007e-02, -1.3009e-01, -1.4908e-02,
         -8.2476e-02,  1.1054e-01, -1.8581e-01,  3.4995e-02,  8.0362e-02,
          4.8770e-02,  9.7231e-03,  1.4530e-03,  2.7162e-03, -5.1780e-02,
         -1.9108e-02, -4.9374e-02,  1.1049e-01,  3.6578e-01, -1.5806e-01,
         -4.0554e-02,  1.4260e-01,  1.5546e-01, -8.0337e-02,  7.2820e-03,
         -1.1058e-01, -1.2538e-01, -1.5638e-02, -2.9203e-02,  4.6248e-01,
         -1.9085e-01, -2.0431e-02, -5.5688e-02, -2.1459e-01,  5.4666e-01,
          3.6080e-01,  3.9825e-02, -1.1648e-01,  2.9081e-02, -1.1095e-01,
          1.7575e-01, -6.0831e-01,  4.9906e-02, -5.4478e-02, -4.8842e-01,
          2.3431e-01,  4.4549e-02, -4.9551e-01,  1.5570e-04,  5.3640e-03,
          1.0832e-01, -1.1911e-02, -4.3670e-02, -1.9756e-01, -2.6238e-02,
         -3.6451e-01, -5.9792e-02]], device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
208000 特征值优化 tensor(0.6071, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3492, -0.1095, -0.2657, -1.1804, -0.6424,  0.3024, -0.5394,  0.2951,
         -0.2346, -1.0279,  0.4441,  0.3473, -0.0997, -0.1205, -0.0038, -0.0334,
          0.0645, -0.0142, -0.1325, -0.0199, -0.0822,  0.1104, -0.2033,  0.0229,
          0.0620,  0.0802,  0.0121,  0.0074, -0.0166, -0.0511, -0.0187, -0.0447,
          0.1204,  0.3657, -0.1580, -0.0540,  0.1492,  0.1500, -0.1126,  0.0044,
         -0.1183, -0.0895, -0.0155, -0.0403,  0.4660, -0.1839, -0.0245, -0.0541,
         -0.2117,  0.5423,  0.3467,  0.0461, -0.0986,  0.0206, -0.1099,  0.1773,
         -0.6011,  0.0451, -0.0628, -0.4817,  0.2346,  0.0399, -0.4938,  0.0016,
         -0.0079,  0.1455, -0.0392, -0.0572, -0.2066, -0.0122, -0.3479, -0.0971]],
       device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
209000 特征值优化 tensor(0.6066, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.3547e-01, -1.1601e-01, -2.6699e-01, -1.1896e+00, -6.3039e-01,
          2.9403e-01, -5.2824e-01,  2.9122e-01, -2.4234e-01, -1.0596e+00,
          4.4825e-01,  3.7777e-01, -9.9472e-02, -1.2327e-01, -7.4617e-03,
         -3.7151e-02,  5.5165e-02, -2.2404e-02, -1.2727e-01, -4.9557e-03,
         -8.2698e-02,  1.1050e-01, -2.0581e-01,  2.4994e-02,  6.2774e-02,
          5.8984e-02,  1.1825e-02,  6.2888e-03, -5.1260e-04, -5.1232e-02,
         -1.9020e-02, -4.9227e-02,  1.1242e-01,  3.6533e-01, -1.5850e-01,
         -4.3908e-02,  1.4457e-01,  1.5358e-01, -8.9557e-02,  7.5969e-03,
         -1.1322e-01, -1.1219e-01, -1.6119e-02, -3.4037e-02,  4.6678e-01,
         -1.8512e-01, -2.2893e-02, -5.2865e-02, -2.1399e-01,  5.4476e-01,
          3.5898e-01,  4.1526e-02, -1.1269e-01,  2.4896e-02, -1.1145e-01,
          1.7116e-01, -6.0984e-01,  5.1623e-02, -5.7291e-02, -4.8265e-01,
          2.3206e-01,  4.5972e-02, -4.9649e-01,  8.7068e-04,  8.5987e-03,
          1.1515e-01, -1.7493e-02, -5.1078e-02, -2.0359e-01, -2.3213e-02,
         -3.6715e-01, -7.2093e-02]], device='cuda:0') tensor(0.2069, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
210000 特征值优化 tensor(0.6232, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3381, -0.1182, -0.2666, -1.1717, -0.6334,  0.3004, -0.5180,  0.2700,
         -0.2202, -1.0273,  0.4283,  0.3526, -0.1050, -0.1285, -0.0133, -0.0534,
          0.0723, -0.0266, -0.1391, -0.0152, -0.0798,  0.1108, -0.1941,  0.0269,
          0.0731,  0.0638,  0.0115,  0.0085, -0.0016, -0.0525, -0.0205, -0.0540,
          0.1071,  0.3658, -0.1555, -0.0430,  0.1445,  0.1538, -0.0936,  0.0094,
         -0.1118, -0.1078, -0.0091, -0.0214,  0.4644, -0.1858, -0.0268, -0.0554,
         -0.2103,  0.5451,  0.3582,  0.0387, -0.1102,  0.0240, -0.1242,  0.1538,
         -0.5980,  0.0442, -0.0614, -0.4826,  0.2270,  0.0434, -0.4848,  0.0043,
         -0.0026,  0.1248, -0.0212, -0.0543, -0.1961, -0.0192, -0.3591, -0.0717]],
       device='cuda:0') tensor(0.2030, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
211000 特征值优化 tensor(0.6088, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.3293e-01, -1.4273e-01, -2.6608e-01, -1.1845e+00, -6.2901e-01,
          2.9963e-01, -5.0388e-01,  2.9169e-01, -2.3653e-01, -1.0509e+00,
          4.2917e-01,  3.6861e-01, -1.0377e-01, -1.3012e-01, -9.4474e-03,
         -4.5422e-02,  4.6690e-02, -3.7253e-02, -1.3076e-01, -7.8713e-03,
         -7.8458e-02,  1.1076e-01, -1.9903e-01,  2.9045e-02,  6.2671e-02,
          6.4313e-02,  8.4501e-03,  7.1338e-03, -6.4964e-04, -5.1752e-02,
         -1.9228e-02, -5.6648e-02,  9.3738e-02,  3.6557e-01, -1.5665e-01,
         -4.1212e-02,  1.3998e-01,  1.5751e-01, -7.8151e-02,  5.4828e-03,
         -1.0744e-01, -1.2700e-01, -1.1233e-02, -2.5626e-02,  4.6978e-01,
         -1.9506e-01, -1.7299e-02, -5.3415e-02, -2.1485e-01,  5.4541e-01,
          3.5879e-01,  4.1988e-02, -1.4394e-01,  4.0975e-02, -1.0430e-01,
          1.6214e-01, -6.1582e-01,  5.3100e-02, -5.7164e-02, -4.8677e-01,
          2.5858e-01,  2.9214e-02, -5.0449e-01,  8.0478e-03,  2.2295e-03,
          1.0326e-01, -1.2664e-02, -4.2321e-02, -2.0167e-01, -1.9944e-02,
         -3.5429e-01, -5.6777e-02]], device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
212000 特征值优化 tensor(0.6094, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3325, -0.1331, -0.2600, -1.1811, -0.6297,  0.2899, -0.5214,  0.2972,
         -0.2442, -1.0573,  0.4566,  0.3860, -0.1010, -0.1241, -0.0036, -0.0510,
          0.0529, -0.0314, -0.1339, -0.0124, -0.0810,  0.1106, -0.1818,  0.0390,
          0.0836,  0.0346,  0.0066, -0.0034,  0.0074, -0.0518, -0.0191, -0.0496,
          0.1096,  0.3653, -0.1600, -0.0330,  0.1407,  0.1589, -0.0677,  0.0067,
         -0.1081, -0.1371, -0.0116, -0.0332,  0.4690, -0.1803, -0.0232, -0.0567,
         -0.2164,  0.5481,  0.3612,  0.0387, -0.1260,  0.0344, -0.1117,  0.1763,
         -0.6084,  0.0515, -0.0402, -0.4924,  0.2426,  0.0394, -0.4929,  0.0033,
          0.0225,  0.0869,  0.0029, -0.0376, -0.2041, -0.0225, -0.3884, -0.0415]],
       device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
213000 特征值优化 tensor(21.6929, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5144, -1.3531, -2.4163,  0.2671, -1.2696, -2.1256, -2.1529, -0.9311,
         -0.6137,  0.1651, -0.2366, -1.7381,  0.1436, -0.5383,  1.2793, -0.4048,
          1.7679,  1.1241, -0.2009,  1.0466, -1.0568,  0.1687, -0.1313,  0.7553,
          0.2711, -1.0721, -0.3260,  0.3631,  0.5659, -2.4496,  0.0260, -0.8023,
         -0.5559, -0.6398,  0.1608,  0.8171,  0.0489,  0.7838, -0.2182,  1.4663,
         -0.2248, -0.5132,  1.5802,  0.5853,  1.0079, -0.1561,  0.9082,  0.1253,
          0.5745, -0.0075,  1.4287,  1.1976,  0.0413, -0.4201, -0.3026,  0.3447,
          0.9275, -0.1607, -0.1781, -0.9293, -0.4080, -0.1806, -0.9076,  0.2323,
          0.1964, -0.6458,  0.3075, -0.5276, -0.4100,  0.5060,  0.0506,  1.9567]],
       device='cuda:0') tensor(4.4709, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
214000 特征值优化 tensor(7.8136, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.4765e-01, -5.1168e-01, -1.3229e+00, -2.9597e-01, -4.7318e-01,
         -1.0428e+00, -1.1487e+00, -2.1398e-01, -7.2247e-01, -1.5100e-01,
          6.6763e-01, -5.6774e-01,  7.2606e-02, -2.1494e-02,  4.4861e-01,
          8.4071e-02,  8.0181e-01,  2.5884e-01,  8.8227e-02,  1.9520e-01,
         -3.9811e-01,  1.4698e-01,  1.0903e-03,  2.9749e-02,  4.4626e-04,
         -1.3640e-01,  8.6057e-03,  2.0547e-02,  4.4290e-03, -1.3343e+00,
          6.2643e-02, -2.7880e-02, -3.5597e-02, -1.0667e-02, -4.5574e-02,
          9.9448e-02, -6.3333e-02,  1.0235e-01,  6.9972e-02,  5.3861e-01,
          2.6667e-02, -5.8767e-03,  9.3728e-01,  1.6465e-02,  4.2535e-01,
          1.4084e-01,  1.4185e-01,  2.7464e-01, -8.5939e-03, -1.9802e-01,
          7.1023e-01,  5.0432e-01,  1.4492e-01,  1.2723e-02, -1.6256e-01,
          1.9128e-01,  3.4835e-01, -1.1284e-01, -3.5036e-02, -3.7921e-01,
          3.5363e-01,  3.3667e-02, -8.6453e-02,  1.0804e-02, -3.1059e-01,
         -3.6744e-01,  1.0397e-01, -9.3072e-02, -1.9518e-01,  1.9721e-01,
         -3.5973e-01,  1.0304e+00]], device='cuda:0') tensor(0.2056, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
215000 特征值优化 tensor(0.7539, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.6225e-01, -2.6162e-02, -5.9995e-01, -7.3289e-01,  4.6685e-01,
         -5.4828e-01, -4.1633e-01, -2.1733e-01,  1.8215e-01, -5.6671e-01,
          1.4136e+00,  3.5917e-01,  2.7038e-02,  2.6862e-04,  2.0607e-01,
          6.5256e-02,  2.1049e-01,  2.9105e-02, -1.4866e-02,  5.3457e-02,
         -1.1069e-01,  4.0721e-02, -7.6660e-02,  3.5952e-02, -7.3238e-02,
         -4.0979e-02, -1.2781e-01,  1.0021e-01, -1.0172e-03, -3.6359e-01,
          5.1436e-02, -7.2650e-03, -2.8695e-02, -1.4921e-02, -1.5972e-01,
         -2.7213e-02, -3.3658e-02,  9.6061e-02,  1.5648e-02,  1.9242e-01,
         -2.0700e-02,  6.7708e-02,  4.0882e-01, -1.4522e-01,  2.4503e-01,
          2.2929e-01, -2.0456e-02,  1.1003e-01,  3.4558e-01, -3.3276e-01,
          3.4254e-01,  8.7453e-02, -4.2614e-01,  4.1775e-02, -1.4003e-01,
          2.0943e-01, -2.2749e-01,  6.6098e-02, -1.6441e-01, -5.2907e-01,
         -5.1616e-02,  1.1092e-02, -9.1680e-02,  6.5542e-02, -3.3048e-01,
         -1.1916e-01,  3.1827e-03,  2.6581e-02, -7.4813e-01,  3.3767e-01,
         -3.3969e-01,  4.4164e-01]], device='cuda:0') tensor(0.2038, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
216000 特征值优化 tensor(0.6039, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2217,  0.0078, -0.6447, -0.8594,  0.5297, -0.6203, -0.2325, -0.1514,
          0.3270, -0.9862,  1.3358,  0.3063,  0.0255, -0.0692,  0.1735, -0.0229,
          0.1394, -0.0792, -0.1838,  0.0693, -0.1123,  0.0459, -0.0733,  0.1441,
          0.0359, -0.0791, -0.1546,  0.1172, -0.0581, -0.3146,  0.0473, -0.0146,
         -0.0344, -0.0153, -0.0868, -0.0483, -0.0330,  0.1105, -0.0771,  0.1685,
         -0.0226,  0.1598,  0.3811, -0.1315,  0.2515,  0.2042, -0.0158,  0.0938,
          0.3986, -0.3445,  0.4680,  0.0478, -0.4522,  0.0294, -0.1195,  0.2332,
         -0.2826,  0.1087, -0.0884, -0.4715, -0.1582,  0.0478, -0.1364,  0.0786,
         -0.3696,  0.0173, -0.0464,  0.0764, -0.6942,  0.3014, -0.2362,  0.2328]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
217000 特征值优化 tensor(0.5982, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2198,  0.0067, -0.6407, -0.8964,  0.5444, -0.6184, -0.2355, -0.1542,
          0.3346, -1.0231,  1.3040,  0.2983,  0.0247, -0.0528,  0.1936, -0.0110,
          0.1393, -0.0961, -0.1354,  0.0701, -0.1121,  0.0453, -0.0989,  0.1074,
          0.0652, -0.1137, -0.1118,  0.1444, -0.0561, -0.3146,  0.0465, -0.0174,
         -0.0345, -0.0150, -0.0902, -0.0469, -0.0479,  0.1079, -0.0937,  0.1630,
         -0.0042,  0.1795,  0.3810, -0.1317,  0.2522,  0.2042, -0.0143,  0.0919,
          0.3936, -0.3462,  0.4872,  0.0478, -0.4614,  0.0310, -0.1732,  0.1925,
         -0.2894,  0.1121, -0.0635, -0.4782, -0.1846,  0.0535, -0.1543,  0.0740,
         -0.3189,  0.0316, -0.0194,  0.0720, -0.6511,  0.2928, -0.2750,  0.2175]],
       device='cuda:0') tensor(0.2039, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
218000 特征值优化 tensor(0.6248, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2040,  0.0166, -0.6021, -0.8875,  0.5525, -0.6142, -0.2416, -0.1486,
          0.3170, -1.0008,  1.2701,  0.2670,  0.0227, -0.0721,  0.1798, -0.0537,
          0.1649, -0.0435, -0.0966,  0.0716, -0.1137,  0.0442, -0.0977,  0.0769,
          0.0350, -0.0640, -0.1090,  0.1371, -0.0574, -0.3139,  0.0473, -0.0210,
         -0.0254, -0.0153, -0.0924, -0.0462, -0.0463,  0.1130, -0.1015,  0.1549,
         -0.0099,  0.1898,  0.3794, -0.1315,  0.2575,  0.1987, -0.0097,  0.0811,
          0.3884, -0.3331,  0.4869,  0.0383, -0.4559,  0.0252, -0.1301,  0.2219,
         -0.2866,  0.1104, -0.0516, -0.4955, -0.1423,  0.0666, -0.1463,  0.0672,
         -0.2889,  0.0216, -0.0214,  0.0729, -0.6711,  0.2849, -0.2972,  0.2192]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
219000 特征值优化 tensor(0.6059, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0576e-01,  2.1933e-02, -6.0169e-01, -8.6601e-01,  5.3875e-01,
         -6.1952e-01, -1.9433e-01, -1.0988e-01,  3.1060e-01, -9.8827e-01,
          1.2476e+00,  2.2927e-01,  2.1298e-02, -9.8730e-02,  1.7516e-01,
         -5.4557e-02,  1.5401e-01, -4.2239e-04, -4.1762e-02,  7.1350e-02,
         -1.1517e-01,  4.4002e-02, -1.0535e-01,  8.8377e-02, -6.4378e-02,
          4.4923e-03, -5.8819e-02,  1.8213e-01, -5.9935e-02, -3.1316e-01,
          4.7138e-02, -2.1658e-02, -3.1280e-02, -1.5348e-02, -7.5729e-02,
         -2.9724e-02, -3.8628e-02,  1.3539e-01, -8.6998e-02,  1.5302e-01,
         -1.3760e-02,  1.8412e-01,  3.7995e-01, -1.3068e-01,  2.5653e-01,
          2.0075e-01, -8.9658e-03,  7.5978e-02,  3.9126e-01, -3.2989e-01,
          4.7592e-01,  4.1754e-02, -4.4074e-01,  1.9819e-02, -1.3028e-01,
          2.5786e-01, -3.1642e-01,  1.2647e-01, -5.9785e-02, -4.8995e-01,
         -1.0681e-01,  7.0939e-02, -1.2499e-01,  7.9518e-02, -3.0061e-01,
         -1.3154e-02, -3.4932e-02,  7.7366e-02, -7.2145e-01,  2.9180e-01,
         -2.6188e-01,  2.2493e-01]], device='cuda:0') tensor(0.2034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
220000 特征值优化 tensor(0.5975, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1958,  0.0387, -0.6142, -0.9077,  0.5426, -0.6183, -0.2500, -0.1236,
          0.3631, -1.0131,  1.2856,  0.2248,  0.0193, -0.0600,  0.1984, -0.0212,
          0.1378, -0.0899, -0.1203,  0.0753, -0.1173,  0.0423,  0.0206,  0.2073,
          0.0146, -0.0717, -0.1281,  0.1248, -0.0571, -0.3127,  0.0467, -0.0227,
         -0.0240, -0.0150, -0.0803, -0.0363, -0.0415,  0.1112, -0.1090,  0.1521,
         -0.0111,  0.2013,  0.3796, -0.1312,  0.2612,  0.1925, -0.0023,  0.0817,
          0.3896, -0.3397,  0.4840,  0.0493, -0.4514,  0.0254, -0.1464,  0.2133,
         -0.3075,  0.1207, -0.0466, -0.4882, -0.1703,  0.0662, -0.1553,  0.0780,
         -0.2898,  0.0245, -0.0174,  0.0789, -0.6591,  0.2870, -0.2898,  0.2049]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
221000 特征值优化 tensor(0.6053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1902,  0.0329, -0.6177, -0.8745,  0.5538, -0.6096, -0.2309, -0.1230,
          0.3479, -0.9916,  1.2959,  0.1947,  0.0169, -0.1277,  0.1982, -0.0344,
          0.1254, -0.0660, -0.0843,  0.0784, -0.1190,  0.0439,  0.0038,  0.1760,
         -0.0280, -0.0287, -0.0986,  0.1508, -0.0577, -0.3122,  0.0463, -0.0202,
         -0.0272, -0.0154, -0.0798, -0.0316, -0.0344,  0.1127, -0.0970,  0.1454,
         -0.0108,  0.1964,  0.3763, -0.1327,  0.2663,  0.1798,  0.0063,  0.0845,
          0.3892, -0.3346,  0.4753,  0.0451, -0.4595,  0.0272, -0.1232,  0.2262,
         -0.3150,  0.1242, -0.0422, -0.4943, -0.1722,  0.0615, -0.1488,  0.0772,
         -0.2899, -0.0069, -0.0313,  0.0731, -0.6524,  0.2906, -0.2756,  0.2210]],
       device='cuda:0') tensor(0.2051, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
222000 特征值优化 tensor(0.6044, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0940e-01,  2.0352e-02, -5.9294e-01, -8.7564e-01,  5.3368e-01,
         -6.1603e-01, -2.4358e-01, -1.3570e-01,  3.5124e-01, -1.0087e+00,
          1.3204e+00,  1.9006e-01,  1.7691e-02, -1.1722e-01,  1.6653e-01,
         -8.2371e-02,  1.4656e-01,  6.7222e-02, -1.8965e-02,  7.7749e-02,
         -1.1772e-01,  4.1787e-02, -1.1226e-01,  8.0809e-02, -1.2719e-01,
          6.5661e-02, -2.8201e-02,  2.1653e-01, -5.5288e-02, -3.0998e-01,
          4.7565e-02, -2.4807e-02, -2.5706e-02, -1.5236e-02, -9.0672e-02,
         -4.0884e-02, -4.3566e-02,  1.2423e-01, -6.7142e-02,  1.5948e-01,
         -1.0453e-03,  1.7113e-01,  3.8170e-01, -1.3627e-01,  2.6275e-01,
          1.8248e-01,  1.0438e-03,  8.1470e-02,  3.9168e-01, -3.3191e-01,
          4.6212e-01,  4.7953e-02, -4.3900e-01,  1.9996e-02, -1.0808e-01,
          2.3895e-01, -2.9626e-01,  1.1535e-01, -4.6360e-02, -4.9271e-01,
         -1.4489e-01,  8.0066e-02, -1.5079e-01,  6.7207e-02, -3.4050e-01,
         -3.7309e-02, -4.0050e-02,  5.4709e-02, -7.0136e-01,  2.7872e-01,
         -2.4765e-01,  2.5991e-01]], device='cuda:0') tensor(0.2045, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
223000 特征值优化 tensor(0.6060, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2048,  0.0219, -0.6508, -0.8937,  0.5397, -0.5653, -0.2503, -0.1281,
          0.3614, -0.9737,  1.3008,  0.1656,  0.0175, -0.1517,  0.1693, -0.0717,
          0.1279,  0.0368,  0.0200,  0.0793, -0.1203,  0.0395, -0.1530,  0.0648,
         -0.0401, -0.0085, -0.0425,  0.2153, -0.0554, -0.3106,  0.0467, -0.0251,
         -0.0261, -0.0149, -0.0876, -0.0389, -0.0371,  0.1231, -0.0721,  0.1599,
         -0.0076,  0.1756,  0.3813, -0.1352,  0.2641,  0.1796,  0.0058,  0.1083,
          0.3862, -0.3333,  0.4771,  0.0428, -0.4422,  0.0207, -0.1021,  0.2426,
         -0.3236,  0.1179, -0.0415, -0.4943, -0.1502,  0.0787, -0.1435,  0.0710,
         -0.3357, -0.0334, -0.0487,  0.0629, -0.6783,  0.2779, -0.2441,  0.2507]],
       device='cuda:0') tensor(0.2046, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
224000 特征值优化 tensor(0.6069, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1961,  0.0319, -0.6352, -0.8803,  0.5427, -0.6059, -0.2636, -0.1366,
          0.3740, -0.9384,  1.3099,  0.1684,  0.0179, -0.1466,  0.1699, -0.0730,
          0.1276,  0.0226, -0.0100,  0.0790, -0.1198,  0.0442, -0.1467,  0.0442,
         -0.0387,  0.0090, -0.1024,  0.1849, -0.0596, -0.3123,  0.0471, -0.0271,
         -0.0246, -0.0152, -0.0804, -0.0346, -0.0302,  0.1165, -0.0844,  0.1555,
         -0.0145,  0.1841,  0.3787, -0.1345,  0.2656,  0.1772,  0.0053,  0.0928,
          0.3903, -0.3322,  0.4811,  0.0435, -0.4539,  0.0278, -0.1056,  0.2375,
         -0.3130,  0.1215, -0.0359, -0.5040, -0.1622,  0.0729, -0.1345,  0.0782,
         -0.3179, -0.0171, -0.0505,  0.0785, -0.6577,  0.2805, -0.2543,  0.2331]],
       device='cuda:0') tensor(0.2034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
225000 特征值优化 tensor(0.6077, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1940,  0.0374, -0.6202, -0.8672,  0.5394, -0.6051, -0.2485, -0.1376,
          0.3656, -0.9448,  1.2941,  0.1708,  0.0176, -0.1555,  0.1697, -0.0806,
          0.1220,  0.0377, -0.0080,  0.0790, -0.1193,  0.0443, -0.1424,  0.0421,
         -0.0388,  0.0025, -0.0899,  0.1938, -0.0599, -0.3122,  0.0470, -0.0260,
         -0.0251, -0.0153, -0.0821, -0.0390, -0.0304,  0.1174, -0.0789,  0.1565,
         -0.0134,  0.1783,  0.3791, -0.1333,  0.2654,  0.1786,  0.0066,  0.0852,
          0.3910, -0.3309,  0.4760,  0.0423, -0.4497,  0.0257, -0.1048,  0.2375,
         -0.3154,  0.1217, -0.0451, -0.5030, -0.1708,  0.0772, -0.1342,  0.0798,
         -0.3260, -0.0232, -0.0532,  0.0759, -0.6528,  0.2783, -0.2471,  0.2426]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
226000 特征值优化 tensor(0.6158, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1992,  0.0270, -0.6030, -0.8590,  0.5420, -0.6218, -0.2544, -0.1286,
          0.3727, -0.9517,  1.3146,  0.1617,  0.0174, -0.1087,  0.1582, -0.0629,
          0.1554,  0.0086, -0.0353,  0.0783, -0.1197,  0.0443, -0.0849,  0.0873,
         -0.0309, -0.0330, -0.0930,  0.1550, -0.0592, -0.3127,  0.0475, -0.0234,
         -0.0253, -0.0154, -0.0823, -0.0352, -0.0300,  0.1158, -0.0932,  0.1492,
         -0.0138,  0.1929,  0.3798, -0.1351,  0.2654,  0.1791,  0.0028,  0.0782,
          0.3913, -0.3321,  0.4708,  0.0444, -0.4604,  0.0317, -0.1063,  0.2374,
         -0.3041,  0.1203, -0.0359, -0.4977, -0.1664,  0.0717, -0.1378,  0.0812,
         -0.3054, -0.0052, -0.0406,  0.0788, -0.6591,  0.2779, -0.2607,  0.2237]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
227000 特征值优化 tensor(0.6215, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9307e-01,  3.7538e-02, -5.9106e-01, -8.6519e-01,  5.5000e-01,
         -6.0775e-01, -2.6505e-01, -1.2286e-01,  3.8793e-01, -9.6965e-01,
          1.3280e+00,  1.4830e-01,  1.8479e-02, -1.0183e-01,  1.6447e-01,
         -5.7488e-02,  1.5253e-01, -2.2921e-02, -7.0667e-02,  7.7226e-02,
         -1.1869e-01,  4.3174e-02, -9.3682e-02,  8.1764e-02,  1.0805e-03,
         -6.0758e-02, -9.6514e-02,  1.4393e-01, -5.9856e-02, -3.1201e-01,
          4.9597e-02, -2.2544e-02, -2.4004e-02, -1.5417e-02, -7.9518e-02,
         -3.5625e-02, -2.2845e-02,  1.1301e-01, -1.0586e-01,  1.3742e-01,
         -2.0482e-02,  2.0528e-01,  3.7761e-01, -1.3181e-01,  2.6533e-01,
          1.7982e-01,  4.0919e-03,  7.2726e-02,  3.9385e-01, -3.3239e-01,
          4.7429e-01,  4.4899e-02, -4.6492e-01,  3.6183e-02, -9.9572e-02,
          2.3790e-01, -3.1097e-01,  1.2062e-01, -2.8863e-02, -4.9975e-01,
         -1.6704e-01,  6.7336e-02, -1.3503e-01,  8.7390e-02, -2.9247e-01,
          7.3626e-03, -3.5746e-02,  8.1575e-02, -6.5248e-01,  2.7933e-01,
         -2.7611e-01,  2.0930e-01]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
228000 正交保障 tensor(0.2094, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2059,  0.0235, -0.6737, -0.8867,  0.5360, -0.5534, -0.2206, -0.1213,
          0.3969, -0.9569,  1.3222,  0.1414,  0.0173, -0.1669,  0.1621, -0.0834,
          0.1173,  0.0794,  0.0315,  0.0792, -0.1194,  0.0429, -0.1703,  0.0784,
         -0.0837,  0.0101, -0.0178,  0.2221, -0.0567, -0.3138,  0.0473, -0.0322,
         -0.0278, -0.0175, -0.0841, -0.0338, -0.0332,  0.1232, -0.0660,  0.1600,
         -0.0089,  0.1650,  0.3822, -0.1347,  0.2643,  0.1808,  0.0068,  0.1126,
          0.3865, -0.3353,  0.4817,  0.0408, -0.4403,  0.0211, -0.0994,  0.2435,
         -0.3420,  0.1186, -0.0435, -0.5054, -0.1719,  0.0878, -0.1482,  0.0692,
         -0.3550, -0.0499, -0.0646,  0.0563, -0.6897,  0.2786, -0.2176,  0.2670]],
       device='cuda:0') tensor(0.2094, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
229000 特征值优化 tensor(0.6510, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1984,  0.0292, -0.6332, -0.8918,  0.5369, -0.6137, -0.2210, -0.1184,
          0.3989, -0.9513,  1.3041,  0.1363,  0.0159, -0.1677,  0.1677, -0.0782,
          0.1160,  0.0584,  0.0082,  0.0789, -0.1202,  0.0437, -0.1674,  0.0080,
         -0.0726,  0.0335, -0.0594,  0.2184, -0.0599, -0.3136,  0.0475, -0.0239,
         -0.0268, -0.0178, -0.0790, -0.0301, -0.0280,  0.1162, -0.0823,  0.1517,
         -0.0145,  0.1777,  0.3813, -0.1337,  0.2642,  0.1834,  0.0054,  0.0939,
          0.3948, -0.3362,  0.4856,  0.0389, -0.4492,  0.0273, -0.0977,  0.2420,
         -0.3149,  0.1215, -0.0539, -0.4973, -0.1727,  0.0824, -0.1373,  0.0774,
         -0.3366, -0.0318, -0.0586,  0.0595, -0.6657,  0.2781, -0.2301,  0.2522]],
       device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
230000 特征值优化 tensor(0.6078, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1927,  0.0339, -0.6116, -0.8716,  0.5430, -0.6132, -0.2424, -0.1209,
          0.3929, -0.9634,  1.3207,  0.1269,  0.0178, -0.1510,  0.1816, -0.0613,
          0.1164, -0.0279, -0.0726,  0.0785, -0.1184,  0.0439, -0.0598,  0.1048,
         -0.0131, -0.0523, -0.0995,  0.1582, -0.0577, -0.3114,  0.0468, -0.0155,
         -0.0302, -0.0175, -0.0661, -0.0211, -0.0115,  0.1086, -0.1029,  0.1449,
         -0.0317,  0.1988,  0.3769, -0.1331,  0.2654,  0.1784,  0.0057,  0.0813,
          0.3923, -0.3378,  0.4695,  0.0493, -0.4683,  0.0344, -0.1010,  0.2377,
         -0.3360,  0.1302, -0.0521, -0.4862, -0.1839,  0.0629, -0.1293,  0.0955,
         -0.3004, -0.0150, -0.0478,  0.0784, -0.6335,  0.2899, -0.2423,  0.2147]],
       device='cuda:0') tensor(0.2052, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
231000 特征值优化 tensor(0.5988, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1976,  0.0277, -0.6371, -0.9079,  0.5429, -0.6053, -0.2733, -0.1229,
          0.4084, -0.9714,  1.3389,  0.1269,  0.0166, -0.1430,  0.1905, -0.0515,
          0.1383, -0.0477, -0.0937,  0.0776, -0.1196,  0.0434, -0.0428,  0.1493,
          0.0068, -0.0693, -0.0881,  0.1430, -0.0570, -0.3132,  0.0465, -0.0122,
         -0.0327, -0.0170, -0.0589, -0.0191, -0.0048,  0.1057, -0.1162,  0.1481,
         -0.0369,  0.2096,  0.3784, -0.1335,  0.2644,  0.1825,  0.0035,  0.0935,
          0.3968, -0.3422,  0.4898,  0.0458, -0.4840,  0.0430, -0.1032,  0.2370,
         -0.3517,  0.1358, -0.0399, -0.4840, -0.1730,  0.0524, -0.1276,  0.1030,
         -0.2876,  0.0064, -0.0398,  0.0937, -0.6269,  0.2906, -0.2461,  0.1888]],
       device='cuda:0') tensor(0.2041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
232000 特征值优化 tensor(0.6193, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1893,  0.0325, -0.6133, -0.8783,  0.5572, -0.6152, -0.2630, -0.1225,
          0.3879, -0.9443,  1.3152,  0.1259,  0.0176, -0.1558,  0.1763, -0.0641,
          0.1448, -0.0190, -0.0480,  0.0776, -0.1176,  0.0444, -0.0777,  0.1055,
         -0.0280, -0.0452, -0.1116,  0.1339, -0.0600, -0.3123,  0.0495, -0.0199,
         -0.0256, -0.0177, -0.0656, -0.0256, -0.0152,  0.1095, -0.1036,  0.1414,
         -0.0270,  0.2044,  0.3757, -0.1317,  0.2656,  0.1819,  0.0033,  0.0845,
          0.3968, -0.3357,  0.4820,  0.0417, -0.4761,  0.0416, -0.0932,  0.2396,
         -0.3283,  0.1264, -0.0382, -0.4997, -0.1690,  0.0674, -0.1290,  0.0930,
         -0.2903, -0.0043, -0.0499,  0.0858, -0.6343,  0.2813, -0.2605,  0.2129]],
       device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
233000 特征值优化 tensor(0.6036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2054,  0.0331, -0.6087, -0.8855,  0.5366, -0.6291, -0.2323, -0.1081,
          0.4132, -0.9744,  1.3327,  0.1443,  0.0173, -0.1078,  0.1759, -0.0638,
          0.1217, -0.0298, -0.0999,  0.0792, -0.1194,  0.0435, -0.0876,  0.1125,
         -0.0216, -0.0479, -0.1092,  0.1657, -0.0580, -0.3127,  0.0470, -0.0130,
         -0.0322, -0.0174, -0.0681, -0.0236, -0.0133,  0.1109, -0.1088,  0.1460,
         -0.0312,  0.1999,  0.3818, -0.1351,  0.2650,  0.1775,  0.0063,  0.0794,
          0.3927, -0.3349,  0.4793,  0.0473, -0.4588,  0.0311, -0.0955,  0.2430,
         -0.3246,  0.1281, -0.0532, -0.4870, -0.1752,  0.0602, -0.1352,  0.0927,
         -0.3042, -0.0064, -0.0457,  0.0769, -0.6508,  0.2937, -0.2535,  0.2144]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
234000 特征值优化 tensor(0.6094, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1974,  0.0369, -0.6015, -0.8652,  0.5348, -0.6319, -0.2361, -0.1019,
          0.4068, -0.9770,  1.3324,  0.1094,  0.0188, -0.1248,  0.1773, -0.0582,
          0.1180, -0.0361, -0.0850,  0.0794, -0.1192,  0.0414, -0.0680,  0.1079,
         -0.0415, -0.0292, -0.1135,  0.1517, -0.0550, -0.3086,  0.0473, -0.0149,
         -0.0306, -0.0175, -0.0713, -0.0258, -0.0158,  0.1118, -0.1031,  0.1435,
         -0.0282,  0.2039,  0.3800, -0.1339,  0.2664,  0.1754,  0.0064,  0.0831,
          0.3903, -0.3350,  0.4587,  0.0501, -0.4548,  0.0278, -0.1008,  0.2380,
         -0.3177,  0.1254, -0.0532, -0.4871, -0.1736,  0.0608, -0.1434,  0.0887,
         -0.3080, -0.0184, -0.0483,  0.0697, -0.6558,  0.2950, -0.2554,  0.2201]],
       device='cuda:0') tensor(0.2047, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
235000 特征值优化 tensor(0.6124, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1853,  0.0370, -0.5926, -0.8807,  0.5389, -0.6137, -0.2219, -0.0992,
          0.4028, -0.9708,  1.3221,  0.0857,  0.0175, -0.1558,  0.1816, -0.0515,
          0.1296, -0.0130, -0.0610,  0.0794, -0.1195,  0.0407, -0.0375,  0.1106,
         -0.0571, -0.0142, -0.0910,  0.1748, -0.0549, -0.3082,  0.0468, -0.0196,
         -0.0277, -0.0186, -0.0768, -0.0256, -0.0223,  0.1113, -0.1004,  0.1386,
         -0.0220,  0.2019,  0.3747, -0.1333,  0.2669,  0.1761,  0.0085,  0.0803,
          0.3875, -0.3319,  0.4641,  0.0518, -0.4487,  0.0237, -0.1067,  0.2321,
         -0.3186,  0.1222, -0.0516, -0.4901, -0.1778,  0.0640, -0.1502,  0.0848,
         -0.2995, -0.0303, -0.0504,  0.0580, -0.6596,  0.2950, -0.2555,  0.2335]],
       device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
236000 特征值优化 tensor(0.6205, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1852,  0.0371, -0.5996, -0.8538,  0.5374, -0.6181, -0.2267, -0.1044,
          0.4118, -0.9482,  1.3165,  0.0985,  0.0172, -0.1696,  0.1677, -0.0823,
          0.1271,  0.0069, -0.0403,  0.0795, -0.1189,  0.0414, -0.0864,  0.0962,
         -0.0653, -0.0063, -0.1020,  0.1655, -0.0553, -0.3091,  0.0460, -0.0193,
         -0.0281, -0.0177, -0.0782, -0.0296, -0.0218,  0.1108, -0.0913,  0.1407,
         -0.0210,  0.1936,  0.3750, -0.1317,  0.2667,  0.1771,  0.0076,  0.0838,
          0.3878, -0.3331,  0.4547,  0.0513, -0.4505,  0.0270, -0.1162,  0.2274,
         -0.3096,  0.1182, -0.0456, -0.4849, -0.1784,  0.0675, -0.1467,  0.0865,
         -0.3216, -0.0346, -0.0666,  0.0595, -0.6541,  0.2895, -0.2476,  0.2440]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
237000 特征值优化 tensor(0.6428, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1977,  0.0325, -0.5932, -0.8622,  0.5283, -0.6250, -0.2295, -0.0927,
          0.4217, -0.9769,  1.3110,  0.1014,  0.0139, -0.1310,  0.1682, -0.0735,
          0.1386,  0.0558, -0.0211,  0.0782, -0.1204,  0.0408, -0.1022,  0.0863,
         -0.1279,  0.0585, -0.0353,  0.1947, -0.0559, -0.3080,  0.0467, -0.0251,
         -0.0269, -0.0180, -0.0806, -0.0273, -0.0368,  0.1174, -0.0767,  0.1430,
         -0.0076,  0.1785,  0.3797, -0.1344,  0.2639,  0.1800,  0.0026,  0.0841,
          0.3897, -0.3332,  0.4600,  0.0492, -0.4364,  0.0232, -0.1106,  0.2345,
         -0.3017,  0.1157, -0.0360, -0.4908, -0.1645,  0.0904, -0.1534,  0.0750,
         -0.3303, -0.0419, -0.0598,  0.0346, -0.6886,  0.2782, -0.2306,  0.2695]],
       device='cuda:0') tensor(0.2124, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
238000 特征值优化 tensor(0.6149, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1923,  0.0319, -0.6081, -0.8527,  0.5387, -0.6243, -0.2432, -0.0931,
          0.4190, -0.9636,  1.3276,  0.0709,  0.0178, -0.1638,  0.1736, -0.0639,
          0.1121, -0.0074, -0.0599,  0.0798, -0.1197,  0.0411, -0.0809,  0.0976,
         -0.0482, -0.0307, -0.1161,  0.1554, -0.0558, -0.3088,  0.0467, -0.0167,
         -0.0305, -0.0178, -0.0794, -0.0297, -0.0185,  0.1115, -0.1004,  0.1388,
         -0.0253,  0.1993,  0.3789, -0.1322,  0.2673,  0.1749,  0.0087,  0.0861,
          0.3877, -0.3324,  0.4539,  0.0498, -0.4488,  0.0246, -0.1020,  0.2394,
         -0.3118,  0.1208, -0.0544, -0.4845, -0.1648,  0.0619, -0.1481,  0.0863,
         -0.3154, -0.0383, -0.0595,  0.0552, -0.6622,  0.2972, -0.2479,  0.2403]],
       device='cuda:0') tensor(0.2028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
239000 特征值优化 tensor(0.6056, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2018,  0.0274, -0.6601, -0.9224,  0.5384, -0.5758, -0.2490, -0.1025,
          0.4512, -0.9465,  1.3221,  0.0795,  0.0171, -0.1605,  0.1548, -0.0758,
          0.1267,  0.0563,  0.0352,  0.0796, -0.1205,  0.0391, -0.1577,  0.0263,
         -0.0594,  0.0228, -0.0503,  0.2410, -0.0562, -0.3113,  0.0469, -0.0275,
         -0.0254, -0.0174, -0.0874, -0.0338, -0.0323,  0.1199, -0.0781,  0.1523,
         -0.0087,  0.1834,  0.3810, -0.1343,  0.2656,  0.1785,  0.0070,  0.1124,
          0.3868, -0.3342,  0.4915,  0.0417, -0.4442,  0.0223, -0.1071,  0.2364,
         -0.3260,  0.1159, -0.0226, -0.4945, -0.1625,  0.0819, -0.1597,  0.0734,
         -0.3427, -0.0481, -0.0645,  0.0485, -0.6809,  0.2802, -0.2357,  0.2643]],
       device='cuda:0') tensor(0.2044, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
240000 特征值优化 tensor(0.6026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2047,  0.0308, -0.6012, -0.9024,  0.5328, -0.6283, -0.2409, -0.1080,
          0.4482, -0.9798,  1.3181,  0.0977,  0.0178, -0.1318,  0.1540, -0.0817,
          0.1424,  0.0600, -0.0073,  0.0778, -0.1192,  0.0396, -0.0960,  0.0784,
         -0.1337,  0.0675, -0.0475,  0.2165, -0.0553, -0.3098,  0.0469, -0.0286,
         -0.0250, -0.0181, -0.0826, -0.0316, -0.0278,  0.1196, -0.0762,  0.1538,
         -0.0141,  0.1807,  0.3800, -0.1351,  0.2628,  0.1790,  0.0033,  0.0822,
          0.3899, -0.3346,  0.4753,  0.0487, -0.4478,  0.0257, -0.1046,  0.2392,
         -0.3090,  0.1197, -0.0280, -0.4916, -0.1780,  0.0866, -0.1519,  0.0793,
         -0.3385, -0.0505, -0.0597,  0.0476, -0.6652,  0.2761, -0.2365,  0.2647]],
       device='cuda:0') tensor(0.2273, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
241000 特征值优化 tensor(0.6089, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0127e-01,  2.4383e-02, -5.9538e-01, -8.6499e-01,  5.3277e-01,
         -6.2521e-01, -2.4523e-01, -9.4004e-02,  4.4858e-01, -9.6064e-01,
          1.3192e+00,  7.7917e-02,  1.7489e-02, -1.2038e-01,  1.5209e-01,
         -7.7196e-02,  1.4428e-01,  5.2974e-02, -1.8388e-02,  7.8060e-02,
         -1.1888e-01,  4.0526e-02, -9.8032e-02,  9.4303e-02, -1.0256e-01,
          2.0210e-02, -5.2704e-02,  1.8404e-01, -5.5314e-02, -3.0881e-01,
          4.7238e-02, -3.0443e-02, -2.5816e-02, -1.8034e-02, -8.6076e-02,
         -3.3507e-02, -3.0772e-02,  1.2336e-01, -8.6115e-02,  1.4855e-01,
         -1.1258e-02,  1.9053e-01,  3.7979e-01, -1.3559e-01,  2.6482e-01,
          1.8007e-01,  1.1626e-03,  8.1021e-02,  3.9038e-01, -3.3251e-01,
          4.5885e-01,  5.0381e-02, -4.4112e-01,  2.1666e-02, -9.9341e-02,
          2.4225e-01, -3.0668e-01,  1.1787e-01, -1.1393e-02, -5.0053e-01,
         -1.6542e-01,  8.8656e-02, -1.5975e-01,  7.2529e-02, -3.2325e-01,
         -4.0979e-02, -5.2037e-02,  5.2856e-02, -6.8065e-01,  2.7624e-01,
         -2.4950e-01,  2.5438e-01]], device='cuda:0') tensor(0.2052, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
242000 特征值优化 tensor(0.6111, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1930,  0.0331, -0.6184, -0.8823,  0.5455, -0.5938, -0.2611, -0.0940,
          0.4577, -0.9385,  1.3067,  0.0573,  0.0175, -0.1422,  0.1715, -0.0748,
          0.1347,  0.0164, -0.0091,  0.0789, -0.1195,  0.0407, -0.1061,  0.0907,
         -0.0334, -0.0309, -0.0724,  0.1840, -0.0542, -0.3086,  0.0479, -0.0258,
         -0.0260, -0.0177, -0.0810, -0.0293, -0.0224,  0.1153, -0.0995,  0.1391,
         -0.0206,  0.2060,  0.3773, -0.1335,  0.2653,  0.1779,  0.0052,  0.0935,
          0.3891, -0.3342,  0.4640,  0.0518, -0.4489,  0.0251, -0.0926,  0.2407,
         -0.3278,  0.1209, -0.0089, -0.5010, -0.1633,  0.0771, -0.1463,  0.0825,
         -0.3029, -0.0237, -0.0516,  0.0645, -0.6493,  0.2799, -0.2591,  0.2328]],
       device='cuda:0') tensor(0.2092, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
243000 特征值优化 tensor(0.6154, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1918,  0.0327, -0.6086, -0.8680,  0.5542, -0.6160, -0.2696, -0.0936,
          0.4547, -0.9311,  1.3134,  0.0546,  0.0177, -0.1475,  0.1739, -0.0728,
          0.1360, -0.0041, -0.0357,  0.0787, -0.1200,  0.0419, -0.0987,  0.0792,
         -0.0391, -0.0347, -0.1131,  0.1467, -0.0562, -0.3090,  0.0482, -0.0230,
         -0.0266, -0.0185, -0.0697, -0.0248, -0.0188,  0.1105, -0.1068,  0.1364,
         -0.0245,  0.2129,  0.3780, -0.1343,  0.2658,  0.1797,  0.0050,  0.0880,
          0.3910, -0.3330,  0.4625,  0.0485, -0.4651,  0.0339, -0.0976,  0.2380,
         -0.3255,  0.1252, -0.0198, -0.4906, -0.1668,  0.0703, -0.1441,  0.0892,
         -0.2954, -0.0151, -0.0537,  0.0741, -0.6394,  0.2830, -0.2608,  0.2209]],
       device='cuda:0') tensor(0.2056, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
244000 特征值优化 tensor(0.6124, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1952,  0.0382, -0.6022, -0.8640,  0.5403, -0.6217, -0.2652, -0.0968,
          0.4550, -0.9348,  1.3113,  0.0685,  0.0177, -0.1534,  0.1718, -0.0831,
          0.1231,  0.0308, -0.0129,  0.0792, -0.1194,  0.0409, -0.0963,  0.0698,
         -0.0442, -0.0073, -0.1110,  0.1784, -0.0551, -0.3083,  0.0467, -0.0273,
         -0.0249, -0.0179, -0.0769, -0.0286, -0.0225,  0.1127, -0.0933,  0.1441,
         -0.0204,  0.2004,  0.3789, -0.1342,  0.2644,  0.1767,  0.0060,  0.0856,
          0.3890, -0.3329,  0.4594,  0.0504, -0.4516,  0.0262, -0.1103,  0.2322,
         -0.3151,  0.1213, -0.0142, -0.4987, -0.1789,  0.0794, -0.1483,  0.0845,
         -0.3134, -0.0296, -0.0604,  0.0642, -0.6428,  0.2793, -0.2517,  0.2380]],
       device='cuda:0') tensor(0.2049, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
245000 特征值优化 tensor(0.6025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1967,  0.0390, -0.6233, -0.8972,  0.5423, -0.6150, -0.2442, -0.0969,
          0.4511, -0.9674,  1.3079,  0.0804,  0.0177, -0.1653,  0.1632, -0.0822,
          0.1170,  0.0638,  0.0046,  0.0790, -0.1189,  0.0397, -0.1524,  0.0232,
         -0.0668,  0.0264, -0.0739,  0.2100, -0.0551, -0.3095,  0.0470, -0.0280,
         -0.0254, -0.0174, -0.0866, -0.0354, -0.0259,  0.1180, -0.0806,  0.1517,
         -0.0166,  0.1850,  0.3792, -0.1334,  0.2651,  0.1769,  0.0071,  0.0916,
          0.3911, -0.3359,  0.4719,  0.0477, -0.4505,  0.0260, -0.1053,  0.2373,
         -0.3110,  0.1174, -0.0207, -0.5007, -0.1818,  0.0855, -0.1543,  0.0809,
         -0.3385, -0.0460, -0.0594,  0.0498, -0.6552,  0.2782, -0.2418,  0.2609]],
       device='cuda:0') tensor(0.2058, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
246000 特征值优化 tensor(0.6171, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1863,  0.0351, -0.5992, -0.8574,  0.5412, -0.6148, -0.2375, -0.0807,
          0.4222, -0.9520,  1.3120,  0.0778,  0.0171, -0.1713,  0.1712, -0.0731,
          0.1212,  0.0018, -0.0443,  0.0792, -0.1188,  0.0408, -0.0958,  0.0777,
         -0.0523, -0.0241, -0.0948,  0.1659, -0.0557, -0.3082,  0.0470, -0.0165,
         -0.0297, -0.0182, -0.0773, -0.0264, -0.0142,  0.1121, -0.0985,  0.1409,
         -0.0288,  0.1972,  0.3752, -0.1322,  0.2666,  0.1762,  0.0082,  0.0838,
          0.3890, -0.3313,  0.4562,  0.0509, -0.4510,  0.0256, -0.0960,  0.2413,
         -0.3146,  0.1211, -0.0523, -0.4827, -0.1764,  0.0678, -0.1492,  0.0917,
         -0.3235, -0.0342, -0.0611,  0.0588, -0.6475,  0.2899, -0.2400,  0.2390]],
       device='cuda:0') tensor(0.2047, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
247000 特征值优化 tensor(0.6072, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1975,  0.0368, -0.5969, -0.8675,  0.5350, -0.6292, -0.2391, -0.0748,
          0.4443, -0.9759,  1.3338,  0.0744,  0.0185, -0.1111,  0.1780, -0.0614,
          0.1213, -0.0387, -0.0841,  0.0793, -0.1191,  0.0411, -0.0826,  0.1048,
         -0.0282, -0.0445, -0.1147,  0.1502, -0.0552, -0.3098,  0.0468, -0.0147,
         -0.0311, -0.0175, -0.0753, -0.0271, -0.0118,  0.1112, -0.1119,  0.1348,
         -0.0327,  0.2122,  0.3803, -0.1338,  0.2660,  0.1743,  0.0070,  0.0800,
          0.3904, -0.3340,  0.4609,  0.0508, -0.4556,  0.0288, -0.0966,  0.2407,
         -0.3149,  0.1233, -0.0405, -0.4922, -0.1793,  0.0654, -0.1506,  0.0945,
         -0.3016, -0.0158, -0.0437,  0.0651, -0.6480,  0.2901, -0.2660,  0.2201]],
       device='cuda:0') tensor(0.2042, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
248000 特征值优化 tensor(0.6050, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2017,  0.0353, -0.6038, -0.8897,  0.5362, -0.6207, -0.2737, -0.0740,
          0.4727, -0.9812,  1.3500,  0.0688,  0.0170, -0.0800,  0.1843, -0.0433,
          0.1339, -0.0688, -0.1107,  0.0795, -0.1200,  0.0411, -0.0609,  0.0960,
          0.0036, -0.0666, -0.1340,  0.1324, -0.0556, -0.3084,  0.0472, -0.0146,
         -0.0309, -0.0152, -0.0704, -0.0242, -0.0084,  0.1092, -0.1249,  0.1341,
         -0.0367,  0.2244,  0.3800, -0.1350,  0.2649,  0.1747,  0.0067,  0.0830,
          0.3927, -0.3349,  0.4707,  0.0500, -0.4657,  0.0361, -0.1003,  0.2364,
         -0.3254,  0.1310, -0.0194, -0.4872, -0.1844,  0.0582, -0.1478,  0.0996,
         -0.2819,  0.0055, -0.0313,  0.0764, -0.6380,  0.2888, -0.2785,  0.2006]],
       device='cuda:0') tensor(0.2035, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
249000 特征值优化 tensor(0.6385, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1971,  0.0384, -0.6097, -0.9232,  0.5498, -0.5994, -0.2640, -0.0595,
          0.4867, -0.9832,  1.3313,  0.0419,  0.0156, -0.0680,  0.1842, -0.0295,
          0.1666, -0.0725, -0.1207,  0.0778, -0.1210,  0.0388, -0.0748,  0.0807,
          0.0232, -0.0895, -0.1080,  0.1264, -0.0567, -0.3109,  0.0493, -0.0168,
         -0.0281, -0.0159, -0.0621, -0.0200, -0.0197,  0.1091, -0.1283,  0.1214,
         -0.0324,  0.2299,  0.3788, -0.1368,  0.2624,  0.1768,  0.0047,  0.0908,
          0.3871, -0.3364,  0.4912,  0.0415, -0.4667,  0.0370, -0.1016,  0.2362,
         -0.3383,  0.1342, -0.0047, -0.4797, -0.1755,  0.0653, -0.1548,  0.0943,
         -0.2539,  0.0158, -0.0277,  0.0707, -0.6414,  0.2841, -0.2813,  0.1999]],
       device='cuda:0') tensor(0.2030, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
250000 特征值优化 tensor(0.6158, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1970,  0.0354, -0.5833, -0.8710,  0.5488, -0.6131, -0.2521, -0.0674,
          0.4818, -0.9513,  1.2915,  0.0349,  0.0171, -0.0954,  0.1805, -0.0619,
          0.1485, -0.0116, -0.0450,  0.0777, -0.1205,  0.0401, -0.0992,  0.0574,
         -0.0247, -0.0533, -0.0885,  0.1563, -0.0550, -0.3087,  0.0485, -0.0219,
         -0.0281, -0.0153, -0.0806, -0.0279, -0.0256,  0.1185, -0.1156,  0.1248,
         -0.0210,  0.2222,  0.3795, -0.1346,  0.2643,  0.1800,  0.0027,  0.0759,
          0.3906, -0.3322,  0.4604,  0.0518, -0.4526,  0.0267, -0.0950,  0.2449,
         -0.3130,  0.1237,  0.0048, -0.5022, -0.1699,  0.0800, -0.1592,  0.0850,
         -0.2761, -0.0122, -0.0353,  0.0652, -0.6476,  0.2739, -0.2858,  0.2231]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
251000 特征值优化 tensor(0.6146, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1997,  0.0310, -0.5987, -0.8586,  0.5436, -0.6148, -0.2677, -0.0687,
          0.4910, -0.9492,  1.3078,  0.0356,  0.0177, -0.0973,  0.1548, -0.0655,
          0.1604,  0.0044, -0.0258,  0.0786, -0.1197,  0.0406, -0.0995,  0.0697,
         -0.0442, -0.0379, -0.0775,  0.1625, -0.0544, -0.3087,  0.0483, -0.0217,
         -0.0270, -0.0149, -0.0849, -0.0307, -0.0233,  0.1178, -0.1112,  0.1302,
         -0.0213,  0.2161,  0.3793, -0.1358,  0.2642,  0.1782,  0.0032,  0.0839,
          0.3887, -0.3315,  0.4532,  0.0520, -0.4531,  0.0271, -0.0960,  0.2416,
         -0.3052,  0.1196,  0.0013, -0.4944, -0.1667,  0.0791, -0.1562,  0.0867,
         -0.2946, -0.0157, -0.0377,  0.0598, -0.6491,  0.2718, -0.2778,  0.2311]],
       device='cuda:0') tensor(0.2036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
252000 特征值优化 tensor(0.6149, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1979,  0.0376, -0.6079, -0.8504,  0.5449, -0.6045, -0.2876, -0.0669,
          0.4916, -0.9306,  1.3232,  0.0243,  0.0168, -0.1048,  0.1662, -0.0701,
          0.1509,  0.0130, -0.0286,  0.0787, -0.1200,  0.0410, -0.0901,  0.0860,
         -0.0450, -0.0350, -0.0927,  0.1586, -0.0550, -0.3086,  0.0477, -0.0217,
         -0.0268, -0.0154, -0.0776, -0.0264, -0.0203,  0.1146, -0.1105,  0.1318,
         -0.0250,  0.2157,  0.3794, -0.1344,  0.2641,  0.1774,  0.0050,  0.0864,
          0.3893, -0.3326,  0.4514,  0.0519, -0.4576,  0.0299, -0.0964,  0.2414,
         -0.3183,  0.1247,  0.0042, -0.5001, -0.1627,  0.0728, -0.1547,  0.0891,
         -0.2939, -0.0175, -0.0460,  0.0661, -0.6456,  0.2775, -0.2687,  0.2278]],
       device='cuda:0') tensor(0.2113, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
253000 特征值优化 tensor(0.6108, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1991,  0.0350, -0.6072, -0.8635,  0.5385, -0.6023, -0.2711, -0.0627,
          0.4916, -0.9390,  1.3085,  0.0322,  0.0179, -0.1115,  0.1635, -0.0771,
          0.1431,  0.0337, -0.0132,  0.0784, -0.1192,  0.0409, -0.0904,  0.0874,
         -0.0660,  0.0039, -0.0819,  0.1871, -0.0546, -0.3089,  0.0474, -0.0224,
         -0.0285, -0.0154, -0.0857, -0.0307, -0.0223,  0.1213, -0.1004,  0.1381,
         -0.0238,  0.2048,  0.3795, -0.1338,  0.2633,  0.1780,  0.0044,  0.0873,
          0.3894, -0.3332,  0.4585,  0.0509, -0.4429,  0.0225, -0.0863,  0.2479,
         -0.3110,  0.1204, -0.0046, -0.4937, -0.1592,  0.0801, -0.1560,  0.0823,
         -0.3139, -0.0308, -0.0527,  0.0530, -0.6555,  0.2750, -0.2579,  0.2444]],
       device='cuda:0') tensor(0.2067, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
254000 特征值优化 tensor(0.6115, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0326e-01,  2.5337e-02, -5.9475e-01, -8.6538e-01,  5.3704e-01,
         -6.1351e-01, -2.5831e-01, -6.2449e-02,  4.9308e-01, -9.5541e-01,
          1.3108e+00,  3.3222e-02,  1.8694e-02, -1.1439e-01,  1.5673e-01,
         -6.9516e-02,  1.4808e-01,  3.8128e-02, -2.1156e-02,  7.8547e-02,
         -1.1913e-01,  4.0649e-02, -9.4882e-02,  9.1907e-02, -7.7661e-02,
         -4.3617e-04, -7.0071e-02,  1.7087e-01, -5.5235e-02, -3.0858e-01,
          4.7594e-02, -2.3378e-02, -2.8889e-02, -1.5299e-02, -9.0263e-02,
         -3.2886e-02, -2.4594e-02,  1.2484e-01, -1.0347e-01,  1.3360e-01,
         -2.0066e-02,  2.0770e-01,  3.7955e-01, -1.3582e-01,  2.6416e-01,
          1.7801e-01,  2.5952e-03,  8.0780e-02,  3.9037e-01, -3.3203e-01,
          4.5856e-01,  5.0388e-02, -4.4269e-01,  2.2184e-02, -8.7860e-02,
          2.4948e-01, -3.0027e-01,  1.1747e-01, -2.4381e-03, -4.9400e-01,
         -1.6052e-01,  8.5179e-02, -1.6305e-01,  8.1005e-02, -3.0619e-01,
         -2.6863e-02, -4.1841e-02,  4.9524e-02, -6.6655e-01,  2.6974e-01,
         -2.6875e-01,  2.4540e-01]], device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
255000 特征值优化 tensor(0.6127, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1912,  0.0296, -0.6223, -0.8761,  0.5475, -0.5846, -0.2693, -0.0616,
          0.4949, -0.9414,  1.3043,  0.0190,  0.0175, -0.1410,  0.1723, -0.0685,
          0.1392,  0.0166, -0.0123,  0.0792, -0.1205,  0.0408, -0.1006,  0.0966,
         -0.0369, -0.0304, -0.0804,  0.1772, -0.0540, -0.3090,  0.0479, -0.0238,
         -0.0268, -0.0151, -0.0883, -0.0315, -0.0210,  0.1173, -0.1090,  0.1276,
         -0.0253,  0.2145,  0.3770, -0.1351,  0.2653,  0.1767,  0.0048,  0.0965,
          0.3869, -0.3327,  0.4607,  0.0530, -0.4478,  0.0245, -0.0904,  0.2429,
         -0.3152,  0.1178, -0.0129, -0.4963, -0.1630,  0.0744, -0.1549,  0.0862,
         -0.3032, -0.0197, -0.0472,  0.0548, -0.6499,  0.2803, -0.2686,  0.2352]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
256000 特征值优化 tensor(0.6069, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1995,  0.0315, -0.6301, -0.8578,  0.5405, -0.6036, -0.2655, -0.0545,
          0.4998, -0.9533,  1.3478,  0.0223,  0.0179, -0.1416,  0.1820, -0.0654,
          0.1152, -0.0289, -0.0679,  0.0791, -0.1188,  0.0443, -0.0377,  0.1371,
         -0.0343, -0.0421, -0.1195,  0.1469, -0.0573, -0.3111,  0.0468, -0.0122,
         -0.0322, -0.0152, -0.0745, -0.0205, -0.0081,  0.1097, -0.1189,  0.1253,
         -0.0383,  0.2142,  0.3802, -0.1342,  0.2653,  0.1770,  0.0063,  0.0904,
          0.3925, -0.3367,  0.4624,  0.0496, -0.4623,  0.0324, -0.0944,  0.2407,
         -0.3292,  0.1295, -0.0288, -0.4887, -0.1754,  0.0623, -0.1509,  0.1014,
         -0.2976, -0.0261, -0.0481,  0.0591, -0.6429,  0.2877, -0.2560,  0.2273]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
257000 特征值优化 tensor(0.6029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2025,  0.0260, -0.6326, -0.8871,  0.5428, -0.6063, -0.2723, -0.0587,
          0.5133, -0.9533,  1.3412,  0.0209,  0.0180, -0.1397,  0.1855, -0.0658,
          0.1190, -0.0376, -0.0801,  0.0786, -0.1184,  0.0443, -0.0396,  0.1417,
         -0.0121, -0.0600, -0.1074,  0.1470, -0.0573, -0.3122,  0.0469, -0.0118,
         -0.0337, -0.0154, -0.0697, -0.0198, -0.0025,  0.1102, -0.1256,  0.1264,
         -0.0438,  0.2193,  0.3816, -0.1337,  0.2645,  0.1821,  0.0054,  0.0901,
          0.3980, -0.3416,  0.4767,  0.0482, -0.4722,  0.0372, -0.0865,  0.2469,
         -0.3352,  0.1328, -0.0225, -0.4882, -0.1783,  0.0656, -0.1431,  0.1062,
         -0.2945, -0.0121, -0.0446,  0.0691, -0.6305,  0.2828, -0.2529,  0.2131]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
258000 特征值优化 tensor(0.6023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2039,  0.0329, -0.6043, -0.8659,  0.5357, -0.6148, -0.2645, -0.0556,
          0.5220, -0.9590,  1.3371,  0.0188,  0.0182, -0.1059,  0.1875, -0.0604,
          0.1248, -0.0351, -0.0898,  0.0784, -0.1200,  0.0443, -0.0774,  0.1084,
          0.0087, -0.0844, -0.0955,  0.1397, -0.0573, -0.3126,  0.0474, -0.0072,
         -0.0359, -0.0152, -0.0717, -0.0244, -0.0024,  0.1103, -0.1259,  0.1295,
         -0.0443,  0.2194,  0.3817, -0.1333,  0.2646,  0.1808,  0.0055,  0.0768,
          0.3957, -0.3380,  0.4664,  0.0485, -0.4677,  0.0362, -0.0843,  0.2505,
         -0.3301,  0.1318, -0.0192, -0.4859, -0.1724,  0.0596, -0.1453,  0.1081,
         -0.3032, -0.0029, -0.0438,  0.0746, -0.6374,  0.2871, -0.2468,  0.2068]],
       device='cuda:0') tensor(0.2059, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
259000 特征值优化 tensor(0.6409, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2030,  0.0313, -0.6091, -0.8926,  0.5395, -0.6143, -0.2761, -0.0521,
          0.5344, -0.9660,  1.3563,  0.0211,  0.0173, -0.0992,  0.1806, -0.0545,
          0.1338, -0.0469, -0.1178,  0.0786, -0.1198,  0.0433, -0.0854,  0.0978,
          0.0117, -0.0833, -0.1147,  0.1450, -0.0592, -0.3133,  0.0481, -0.0149,
         -0.0292, -0.0156, -0.0666, -0.0207, -0.0047,  0.1046, -0.1326,  0.1256,
         -0.0426,  0.2274,  0.3806, -0.1354,  0.2632,  0.1786,  0.0040,  0.0818,
          0.3960, -0.3374,  0.4835,  0.0458, -0.4706,  0.0395, -0.0891,  0.2428,
         -0.3343,  0.1348, -0.0090, -0.4865, -0.1942,  0.0646, -0.1454,  0.1060,
         -0.2810,  0.0096, -0.0333,  0.0756, -0.6275,  0.2835, -0.2653,  0.2012]],
       device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
260000 特征值优化 tensor(0.6300, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1913,  0.0395, -0.6277, -0.8822,  0.5520, -0.5751, -0.2909, -0.0519,
          0.5218, -0.9214,  1.3560,  0.0083,  0.0175, -0.1084,  0.1685, -0.0729,
          0.1525, -0.0270, -0.0707,  0.0772, -0.1204,  0.0438, -0.0316,  0.1463,
         -0.0029, -0.0643, -0.1119,  0.1409, -0.0570, -0.3132,  0.0507, -0.0189,
         -0.0254, -0.0151, -0.0696, -0.0220, -0.0125,  0.1048, -0.1244,  0.1181,
         -0.0361,  0.2239,  0.3781, -0.1328,  0.2648,  0.1824,  0.0017,  0.0968,
          0.3902, -0.3373,  0.4857,  0.0396, -0.4733,  0.0423, -0.0908,  0.2435,
         -0.3444,  0.1304, -0.0015, -0.4957, -0.1735,  0.0681, -0.1432,  0.1043,
         -0.2844,  0.0061, -0.0472,  0.0732, -0.6353,  0.2773, -0.2694,  0.2104]],
       device='cuda:0') tensor(0.2100, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
261000 特征值优化 tensor(0.6139, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2038,  0.0315, -0.6047, -0.8605,  0.5451, -0.6168, -0.2586, -0.0510,
          0.5305, -0.9249,  1.3150,  0.0053,  0.0173, -0.1028,  0.1673, -0.0667,
          0.1467,  0.0148, -0.0351,  0.0780, -0.1197,  0.0436, -0.1027,  0.0854,
         -0.0441, -0.0378, -0.0823,  0.1548, -0.0577, -0.3127,  0.0484, -0.0215,
         -0.0283, -0.0150, -0.0860, -0.0286, -0.0166,  0.1213, -0.1177,  0.1231,
         -0.0291,  0.2164,  0.3791, -0.1356,  0.2635,  0.1788,  0.0032,  0.0786,
          0.3907, -0.3334,  0.4683,  0.0465, -0.4592,  0.0322, -0.0795,  0.2540,
         -0.3054,  0.1207,  0.0084, -0.5023, -0.1656,  0.0831, -0.1548,  0.0906,
         -0.2931, -0.0188, -0.0390,  0.0573, -0.6510,  0.2672, -0.2743,  0.2367]],
       device='cuda:0') tensor(0.2040, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
262000 特征值优化 tensor(0.6120, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2052,  0.0280, -0.5930, -0.8673,  0.5369, -0.6169, -0.2491, -0.0479,
          0.5421, -0.9327,  1.2988, -0.0067,  0.0185, -0.1115,  0.1602, -0.0756,
          0.1516,  0.0223, -0.0292,  0.0786, -0.1192,  0.0436, -0.1146,  0.0578,
         -0.0628, -0.0193, -0.0673,  0.1726, -0.0577, -0.3117,  0.0477, -0.0216,
         -0.0293, -0.0151, -0.0871, -0.0275, -0.0225,  0.1223, -0.1134,  0.1223,
         -0.0223,  0.2132,  0.3797, -0.1355,  0.2626,  0.1782,  0.0027,  0.0740,
          0.3913, -0.3358,  0.4672,  0.0514, -0.4484,  0.0252, -0.0881,  0.2488,
         -0.3067,  0.1210,  0.0071, -0.4974, -0.1740,  0.0882, -0.1667,  0.0857,
         -0.2917, -0.0305, -0.0409,  0.0475, -0.6528,  0.2674, -0.2749,  0.2476]],
       device='cuda:0') tensor(0.2032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
263000 特征值优化 tensor(0.6169, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1990,  0.0318, -0.5857, -0.8688,  0.5426, -0.6172, -0.2620, -0.0432,
          0.5442, -0.9325,  1.3006, -0.0324,  0.0184, -0.1052,  0.1615, -0.0702,
          0.1551,  0.0048, -0.0410,  0.0790, -0.1197,  0.0411, -0.1020,  0.0673,
         -0.0368, -0.0473, -0.0890,  0.1549, -0.0552, -0.3084,  0.0477, -0.0215,
         -0.0279, -0.0151, -0.0801, -0.0234, -0.0214,  0.1173, -0.1202,  0.1144,
         -0.0235,  0.2261,  0.3796, -0.1353,  0.2645,  0.1772,  0.0038,  0.0776,
          0.3895, -0.3320,  0.4593,  0.0519, -0.4497,  0.0250, -0.0943,  0.2440,
         -0.3142,  0.1247,  0.0185, -0.4956, -0.1718,  0.0815, -0.1672,  0.0883,
         -0.2787, -0.0244, -0.0411,  0.0529, -0.6461,  0.2740, -0.2803,  0.2324]],
       device='cuda:0') tensor(0.2071, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
264000 特征值优化 tensor(12.4658, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1711,  0.3760, -0.3758, -1.7228, -1.4754,  0.5301, -0.3688,  0.3800,
         -0.1719, -2.3339,  0.4634,  0.9482,  0.0955, -0.3880,  0.0537, -0.3576,
         -0.0940, -0.2436, -0.0491,  0.7203,  0.0282,  0.1110, -0.0717, -0.0135,
          0.0037, -0.0284, -0.0141,  0.0065, -0.0107, -0.3995,  0.0557, -0.2711,
         -1.7456, -0.0097, -0.0282, -0.3457, -0.9323,  0.0149, -1.6790,  0.2683,
         -0.0947,  0.2376, -0.0149,  0.7184, -0.7177, -0.2748,  0.1004,  0.1017,
         -1.3877, -0.7256,  1.4673, -0.1559,  1.0255,  0.5852, -0.1202, -0.1197,
         -0.6767,  0.6287, -0.4747,  0.0587,  0.3358,  0.0325, -0.0926,  0.0736,
         -0.1344,  0.2365,  0.9495, -0.0174, -0.3494,  0.2258, -0.9140,  0.2392]],
       device='cuda:0') tensor(0.2095, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
265000 特征值优化 tensor(3.2237, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.9497e-01,  5.5756e-01, -7.7187e-01, -9.5835e-01, -4.3524e-01,
          7.1715e-01, -2.4888e-01,  1.5411e-01,  7.3241e-03, -1.3614e+00,
          4.2137e-01,  2.3620e-01,  9.8836e-02, -8.9861e-03,  4.2127e-03,
         -3.4202e-02,  2.3917e-02, -2.8201e-02,  5.0574e-03,  8.1460e-02,
          3.3725e-02,  7.8229e-02, -9.0465e-02,  9.7420e-02,  3.2265e-04,
         -7.3938e-03,  9.7956e-03,  2.0371e-03, -3.4704e-02, -8.2076e-02,
          4.9160e-04, -1.6340e-04, -7.0125e-01, -1.7579e-02, -9.7490e-05,
         -5.6612e-02, -2.9571e-01, -1.0572e-02, -6.2969e-01, -5.3208e-04,
          7.3699e-02,  2.8155e-01, -3.1289e-01,  7.1320e-01, -4.4148e-01,
         -1.4549e-01, -1.2311e-02,  9.2418e-02, -6.4042e-01,  3.7045e-02,
          8.4259e-01, -1.0449e-01,  5.2939e-01,  2.7061e-01, -1.4035e-01,
         -1.9615e-01, -3.4501e-01,  3.9678e-01, -7.8857e-02,  9.5763e-02,
          1.2862e-01,  9.9747e-02, -6.0695e-02,  8.6504e-03, -1.6881e-01,
          1.5245e-01,  6.6280e-01, -7.4494e-02, -4.2879e-01,  9.5441e-02,
         -3.6206e-01,  1.2788e-01]], device='cuda:0') tensor(0.2087, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
266000 特征值优化 tensor(0.7277, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2382,  0.5961, -0.6379, -0.2264, -0.5180,  0.7971, -0.1054,  0.1863,
         -0.0102, -1.0226,  0.6780, -0.1085,  0.1040,  0.0428,  0.1318, -0.1833,
          0.0902,  0.0846, -0.0777,  0.0285,  0.0364,  0.0849, -0.0648, -0.0290,
          0.0906, -0.0977, -0.2185, -0.0167,  0.0459, -0.0926,  0.0018, -0.0238,
         -0.2122, -0.0437, -0.1125, -0.0534, -0.1654,  0.0629, -0.2737,  0.0229,
          0.0225,  0.2589, -0.3490,  0.6994, -0.3757, -0.0575, -0.0529, -0.0955,
         -0.4755,  0.1332,  0.4857, -0.0241,  0.6724,  0.2955, -0.1133, -0.2091,
         -0.1319,  0.3035, -0.2048,  0.1311,  0.0931,  0.1432,  0.0180, -0.0198,
         -0.1848,  0.0389,  0.4002, -0.0839, -0.6041,  0.0306, -0.1909,  0.1688]],
       device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
267000 特征值优化 tensor(0.7243, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2407,  0.5892, -0.6517, -0.2002, -0.4948,  0.8102, -0.0986,  0.2781,
          0.0193, -0.9734,  0.6761, -0.1455,  0.1048,  0.0393,  0.1379, -0.1567,
          0.0909,  0.0798, -0.0691,  0.0573,  0.0368,  0.0850, -0.0886, -0.0329,
          0.0972, -0.1040, -0.2220, -0.0339,  0.0278, -0.0936,  0.0044, -0.0391,
         -0.2048, -0.0438, -0.1242, -0.0471, -0.1773,  0.0517, -0.2764,  0.0262,
          0.0333,  0.2622, -0.3451,  0.6920, -0.3798, -0.0630, -0.0510, -0.0990,
         -0.4621,  0.1208,  0.4863, -0.0218,  0.6727,  0.2998, -0.0925, -0.2150,
         -0.0795,  0.2731, -0.2250,  0.1063,  0.0655,  0.1529,  0.0074, -0.0346,
         -0.1736,  0.0273,  0.4200, -0.0741, -0.5689,  0.0217, -0.2624,  0.2135]],
       device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
268000 特征值优化 tensor(0.7269, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2512,  0.6046, -0.6572, -0.1902, -0.4948,  0.7968, -0.1175,  0.3228,
         -0.0151, -0.9775,  0.6667, -0.0955,  0.1053,  0.0143,  0.1545, -0.1380,
          0.0833,  0.0543, -0.0894,  0.0383,  0.0365,  0.0873, -0.0993,  0.0527,
          0.1052, -0.1475, -0.1666, -0.0432,  0.0498, -0.0955, -0.0033, -0.0357,
         -0.1975, -0.0428, -0.0702, -0.1061, -0.1828,  0.0417, -0.2729,  0.0322,
          0.0413,  0.2583, -0.3564,  0.6973, -0.3734, -0.0589, -0.0514, -0.0928,
         -0.4697,  0.1186,  0.4753, -0.0196,  0.6961,  0.2892, -0.0737, -0.2209,
         -0.1039,  0.2894, -0.1867,  0.1597,  0.0411,  0.1448,  0.0055, -0.0649,
         -0.2369,  0.0774,  0.4017, -0.0406, -0.5508,  0.0387, -0.1634,  0.1380]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
269000 特征值优化 tensor(0.7234, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2285,  0.5774, -0.6462, -0.1884, -0.4808,  0.7811, -0.1033,  0.4927,
          0.0211, -1.0182,  0.6021, -0.1127,  0.1057, -0.0892,  0.0946, -0.1201,
          0.1080,  0.1042, -0.0684,  0.0434,  0.0396,  0.0873, -0.1071,  0.0057,
          0.0551, -0.1294, -0.1922, -0.0372,  0.0455, -0.0954,  0.0033, -0.0365,
         -0.1669, -0.0428, -0.1007, -0.0573, -0.1862, -0.0268, -0.2703,  0.0407,
          0.0507,  0.2512, -0.3450,  0.6928, -0.3812, -0.0506, -0.0601, -0.0957,
         -0.4734,  0.1213,  0.4746, -0.0195,  0.7315,  0.2822, -0.0455, -0.1966,
         -0.0996,  0.2915, -0.2056,  0.1220, -0.0655,  0.1580,  0.0110, -0.0999,
         -0.2226,  0.0469,  0.4098, -0.0750, -0.4833,  0.0404, -0.2152,  0.1764]],
       device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
270000 特征值优化 tensor(0.6771, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.4660e-01,  5.8356e-01, -6.4605e-01, -1.8492e-01, -4.6092e-01,
          7.8938e-01, -1.4910e-01,  9.0118e-01,  3.3664e-02, -1.0635e+00,
          6.8018e-01, -7.9032e-02,  1.0842e-01, -1.7304e-01, -3.8194e-02,
         -8.2819e-02,  3.5680e-02,  1.2471e-01,  2.0981e-02,  2.4157e-02,
          4.0885e-02,  7.9089e-02, -8.3844e-02, -1.4800e-02,  7.4573e-02,
         -1.0538e-01, -2.0330e-01,  4.4755e-03,  5.3169e-02, -9.7853e-02,
          1.3145e-02, -2.5850e-02, -1.2867e-01, -4.0745e-02, -8.9960e-02,
         -6.6580e-02, -1.2092e-01, -5.9938e-02, -2.6650e-01,  4.2092e-02,
         -4.3346e-04,  2.4728e-01, -3.6480e-01,  7.1679e-01, -3.9163e-01,
         -4.9532e-02, -5.8257e-02, -1.1542e-01, -2.9061e-01, -4.8251e-02,
          4.6051e-01, -8.7397e-03,  7.3644e-01,  2.8931e-01,  1.7005e-01,
         -7.1249e-02, -1.2041e-01,  2.9977e-01, -1.9946e-01,  1.4405e-01,
         -8.3620e-02,  6.2608e-02,  2.3344e-02, -8.4153e-02, -2.4846e-01,
          4.6781e-02,  4.2066e-01, -9.2253e-02, -3.7468e-01,  1.0107e-01,
         -2.3830e-01,  1.7780e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
271000 特征值优化 tensor(0.6765, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.4727e-01,  5.9647e-01, -6.6052e-01, -1.9584e-01, -4.6474e-01,
          7.9908e-01, -1.2836e-01,  9.1987e-01,  2.0921e-02, -1.0021e+00,
          6.9015e-01, -1.0176e-01,  1.0884e-01, -1.7470e-01, -5.7443e-02,
         -7.7379e-02,  2.7897e-02,  5.1762e-02,  9.0121e-02, -4.8057e-04,
          4.4121e-02,  7.6533e-02, -3.7900e-02,  2.5055e-02,  8.8479e-02,
         -8.9030e-02, -2.0055e-01,  1.3340e-02,  5.1916e-02, -9.8840e-02,
          1.0866e-02, -2.2358e-02, -1.1613e-01, -4.0085e-02, -7.2983e-02,
         -7.8153e-02, -9.1195e-02, -6.6197e-02, -2.6291e-01,  7.8674e-02,
         -2.7068e-02,  2.4102e-01, -3.7130e-01,  7.1636e-01, -3.8568e-01,
         -4.7753e-02, -5.8364e-02, -1.1061e-01, -2.1271e-01, -1.3124e-01,
          4.7026e-01, -1.2290e-02,  7.6970e-01,  2.7020e-01,  8.1895e-02,
         -1.3510e-02, -1.4100e-01,  3.0950e-01, -1.7518e-01,  1.6609e-01,
         -1.6672e-01,  5.9610e-02,  9.9636e-03, -9.2929e-02, -2.6575e-01,
          4.0232e-02,  4.0147e-01, -6.8577e-02, -3.3389e-01,  1.2875e-01,
         -1.7365e-01,  1.6331e-01]], device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
272000 特征值优化 tensor(0.6860, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2498,  0.6205, -0.6652, -0.1786, -0.4778,  0.7704, -0.1311,  0.9237,
         -0.0095, -1.0273,  0.7098, -0.1382,  0.1053, -0.1893, -0.1024, -0.0344,
          0.0504,  0.0196,  0.1540, -0.0118,  0.0480,  0.0777, -0.0363,  0.0088,
          0.0864, -0.0292, -0.1147,  0.0332,  0.0240, -0.0972,  0.0137, -0.0208,
         -0.1133, -0.0414, -0.0577, -0.0633, -0.0838, -0.0654, -0.2661,  0.0566,
         -0.0345,  0.2411, -0.3890,  0.7142, -0.3767, -0.0500, -0.0501, -0.1117,
         -0.1867, -0.1435,  0.4753, -0.0127,  0.7674,  0.2613,  0.0437, -0.0435,
         -0.1172,  0.3022, -0.1967,  0.1261, -0.1985,  0.0552,  0.0011, -0.0964,
         -0.2055,  0.0118,  0.3983, -0.0962, -0.3131,  0.1412, -0.2093,  0.1880]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
273000 特征值优化 tensor(0.6662, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2625,  0.5729, -0.6806, -0.1925, -0.4582,  0.7807, -0.1190,  0.9414,
         -0.0448, -1.0255,  0.7178, -0.1012,  0.1089, -0.2066, -0.0613, -0.0446,
          0.0991,  0.0352,  0.1646, -0.0470,  0.0476,  0.0776,  0.0235,  0.0221,
          0.1147, -0.0427, -0.1041,  0.1422,  0.0427, -0.0977,  0.0152, -0.0180,
         -0.1019, -0.0396, -0.0575, -0.1101, -0.0900, -0.0593, -0.2623,  0.0647,
         -0.0261,  0.2438, -0.3832,  0.7105, -0.3891, -0.0254, -0.0645, -0.1014,
         -0.1966, -0.1463,  0.4695, -0.0135,  0.7744,  0.2632, -0.0160, -0.0204,
         -0.1376,  0.3085, -0.1607,  0.1673, -0.2017,  0.0854,  0.0199, -0.0932,
         -0.2584,  0.0627,  0.3678, -0.0551, -0.3054,  0.1197, -0.1288,  0.1291]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
274000 特征值优化 tensor(0.6706, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2776,  0.6104, -0.6712, -0.1972, -0.4900,  0.7612, -0.1364,  0.9714,
         -0.0104, -1.0444,  0.7226, -0.1391,  0.1042, -0.2112, -0.0918, -0.0295,
          0.0521, -0.0323,  0.1972,  0.0031,  0.0384,  0.0803, -0.0357, -0.0145,
          0.0853, -0.0128, -0.1295,  0.0064,  0.0271, -0.0949,  0.0221, -0.0328,
         -0.1060, -0.0421, -0.0855, -0.0733, -0.0748, -0.0526, -0.2686,  0.0575,
         -0.0450,  0.2384, -0.3845,  0.7184, -0.3776, -0.0306, -0.0613, -0.1047,
         -0.1984, -0.1457,  0.4854, -0.0194,  0.7311,  0.2841,  0.0181,  0.0245,
         -0.1538,  0.3195, -0.1876,  0.1382, -0.1804,  0.0534,  0.0217, -0.0881,
         -0.2017,  0.0043,  0.3568, -0.0759, -0.2783,  0.1245, -0.1911,  0.1763]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
275000 特征值优化 tensor(0.6840, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.5698e-01,  6.0677e-01, -6.5738e-01, -1.7996e-01, -4.7657e-01,
          7.5382e-01, -1.4018e-01,  9.7075e-01, -3.3850e-02, -1.0180e+00,
          7.3378e-01, -1.4820e-01,  1.0610e-01, -2.0225e-01, -8.8394e-02,
         -2.4706e-02,  5.4799e-02, -2.1863e-04,  1.5891e-01,  2.0256e-02,
          4.7718e-02,  7.9658e-02, -4.0046e-02,  3.1473e-03,  9.5537e-02,
         -4.8139e-02, -1.4177e-01,  2.2779e-02,  3.1376e-02, -9.5735e-02,
          2.0037e-02, -2.8051e-02, -1.1086e-01, -4.2397e-02, -5.5958e-02,
         -7.1029e-02, -7.5895e-02, -5.2652e-02, -2.6874e-01,  5.7922e-02,
         -3.7541e-02,  2.3917e-01, -3.9110e-01,  7.1924e-01, -3.7346e-01,
         -4.7757e-02, -4.5360e-02, -1.0669e-01, -2.0398e-01, -1.3273e-01,
          4.7458e-01, -1.1178e-02,  7.3919e-01,  2.7160e-01,  3.2573e-02,
         -1.0321e-02, -1.5260e-01,  3.2142e-01, -1.9510e-01,  1.2906e-01,
         -1.8438e-01,  5.8461e-02,  6.9013e-03, -8.4915e-02, -1.9335e-01,
          1.0148e-02,  3.7501e-01, -8.7075e-02, -3.0087e-01,  1.3353e-01,
         -1.8480e-01,  1.7127e-01]], device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
276000 特征值优化 tensor(0.6699, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.6959e-01,  6.2614e-01, -6.6734e-01, -2.0189e-01, -4.6807e-01,
          7.7372e-01, -1.4530e-01,  9.6675e-01, -3.1483e-02, -1.0125e+00,
          7.1760e-01, -1.1068e-01,  1.0124e-01, -2.1589e-01, -5.3815e-02,
         -2.2893e-02,  7.1374e-02,  1.6066e-02,  1.4510e-01, -4.4474e-03,
          4.2856e-02,  7.8108e-02, -9.4789e-03,  1.9123e-02,  9.7975e-02,
         -5.3622e-02, -1.0122e-01,  8.0418e-02,  4.2672e-02, -9.6956e-02,
          2.0737e-02, -2.7070e-02, -1.0749e-01, -3.9765e-02, -5.8537e-02,
         -1.0007e-01, -8.8027e-02, -6.1371e-02, -2.6369e-01,  6.5476e-02,
         -2.5358e-02,  2.4168e-01, -3.9474e-01,  7.1277e-01, -3.6403e-01,
         -1.7278e-02, -6.4288e-02, -1.0795e-01, -2.0025e-01, -1.3973e-01,
          4.7637e-01, -1.1807e-02,  7.4310e-01,  2.7076e-01,  3.4255e-03,
          6.0752e-04, -1.5230e-01,  3.1967e-01, -1.7850e-01,  1.5876e-01,
         -1.7853e-01,  7.3423e-02,  1.4926e-02, -8.5677e-02, -2.2683e-01,
          3.7283e-02,  3.6153e-01, -6.0488e-02, -3.0052e-01,  1.1336e-01,
         -1.3957e-01,  1.4112e-01]], device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
277000 特征值优化 tensor(0.6654, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2730,  0.6285, -0.6701, -0.1956, -0.4666,  0.7642, -0.1419,  0.9689,
         -0.0413, -1.0217,  0.7236, -0.1019,  0.1024, -0.2224, -0.0358, -0.0150,
          0.0742,  0.0206,  0.1404, -0.0181,  0.0412,  0.0806, -0.0182,  0.0249,
          0.1144, -0.0665, -0.0923,  0.0993,  0.0337, -0.0947,  0.0215, -0.0251,
         -0.1092, -0.0403, -0.0536, -0.1158, -0.0972, -0.0654, -0.2607,  0.0609,
         -0.0167,  0.2375, -0.3998,  0.7154, -0.3623, -0.0037, -0.0727, -0.1037,
         -0.1996, -0.1418,  0.4807, -0.0149,  0.7562,  0.2634,  0.0044,  0.0143,
         -0.1475,  0.3193, -0.1741,  0.1516, -0.1828,  0.0874,  0.0118, -0.0836,
         -0.2425,  0.0567,  0.3249, -0.0461, -0.3090,  0.1100, -0.1234,  0.1204]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
278000 特征值优化 tensor(0.6660, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2877,  0.5688, -0.6555, -0.1723, -0.4910,  0.7531, -0.1611,  1.0160,
         -0.0354, -1.0756,  0.7260, -0.2057,  0.1073, -0.2277, -0.0731, -0.0090,
          0.0581, -0.0383,  0.1722,  0.0337,  0.0439,  0.0803, -0.0867,  0.0244,
          0.0720, -0.0335, -0.1704,  0.0495,  0.0467, -0.0952,  0.0190, -0.0248,
         -0.0953, -0.0429, -0.0330, -0.0608, -0.0384, -0.0276, -0.2721,  0.0594,
         -0.0780,  0.2365, -0.4323,  0.7414, -0.3598,  0.0316, -0.0972, -0.1093,
         -0.1859, -0.1512,  0.4685, -0.0105,  0.7720,  0.2653,  0.0470, -0.0446,
         -0.2956,  0.3916, -0.2194,  0.0936, -0.2176,  0.0665, -0.0243, -0.0533,
         -0.0966, -0.0603,  0.2832, -0.0485, -0.2187,  0.0842, -0.0932,  0.1513]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
279000 特征值优化 tensor(0.7001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3060,  0.5932, -0.6651, -0.1972, -0.4823,  0.7434, -0.2033,  1.0854,
         -0.0180, -0.9989,  0.7254, -0.1363,  0.1039, -0.2223, -0.0211, -0.0088,
          0.0711,  0.0194,  0.1395, -0.0279,  0.0393,  0.0814, -0.0919,  0.0116,
          0.1106, -0.0884, -0.0849,  0.1226,  0.0293, -0.0946,  0.0216, -0.0313,
         -0.0929, -0.0443, -0.0205, -0.0646, -0.0603, -0.0335, -0.2661,  0.0742,
         -0.0601,  0.2381, -0.4356,  0.7443, -0.3571,  0.0097, -0.0797, -0.1057,
         -0.1749, -0.1670,  0.4907, -0.0193,  0.7587,  0.2589,  0.0274, -0.0168,
         -0.3011,  0.3990, -0.1940,  0.1549, -0.1923,  0.1206, -0.0490, -0.0198,
         -0.1431, -0.0207,  0.3051, -0.0401, -0.2236,  0.0309, -0.0464,  0.1154]],
       device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
280000 特征值优化 tensor(0.6672, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.0386e-01,  5.9645e-01, -6.6384e-01, -1.8045e-01, -4.7140e-01,
          7.5051e-01, -1.6255e-01,  1.0226e+00, -2.7307e-02, -1.0377e+00,
          7.3739e-01, -1.7226e-01,  1.0383e-01, -1.8272e-01, -6.8959e-02,
         -8.5889e-04,  6.8007e-02,  1.6177e-03,  1.6546e-01, -6.3620e-03,
          4.0725e-02,  7.9976e-02, -3.5420e-02,  1.9922e-02,  1.0213e-01,
         -2.1290e-02, -1.9900e-01,  6.8615e-02,  5.9693e-02, -9.5434e-02,
          1.4917e-02, -1.6580e-02, -8.6462e-02, -4.4428e-02, -6.9758e-03,
         -5.0245e-02, -9.7041e-02, -4.6305e-02, -2.6508e-01,  7.7644e-02,
         -1.4474e-02,  2.3348e-01, -4.3760e-01,  7.4843e-01, -3.5766e-01,
         -6.4809e-03, -7.2868e-02, -1.0497e-01, -1.7015e-01, -1.6753e-01,
          4.6827e-01, -8.1991e-03,  7.4098e-01,  2.8552e-01,  1.0052e-02,
          7.6649e-03, -3.3993e-01,  4.1195e-01, -2.0577e-01,  1.4467e-01,
         -2.1495e-01,  4.1019e-03, -3.9501e-03, -8.9234e-02, -1.4628e-01,
         -4.2087e-02,  2.9361e-01, -5.2909e-02, -1.9267e-01,  1.4023e-01,
         -9.3944e-03,  1.1486e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
281000 特征值优化 tensor(0.6659, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.8675e-01,  6.0011e-01, -6.5918e-01, -1.9405e-01, -4.6669e-01,
          7.5359e-01, -1.8575e-01,  1.0774e+00, -1.0964e-02, -9.9090e-01,
          7.1325e-01, -1.3625e-01,  1.0420e-01, -2.3686e-01, -2.4189e-02,
         -1.2802e-02,  6.8326e-02,  1.9415e-02,  1.5666e-01, -3.1699e-02,
          4.1750e-02,  8.1731e-02, -6.3172e-02,  1.6476e-02,  9.2530e-02,
         -7.4432e-02, -1.1321e-01,  9.5556e-02,  3.1001e-02, -9.3653e-02,
          2.0176e-02, -2.8126e-02, -9.8506e-02, -4.3177e-02,  8.2395e-04,
         -5.8919e-02, -5.7501e-02, -1.9954e-02, -2.6096e-01,  8.2662e-02,
         -6.3785e-02,  2.3636e-01, -4.2854e-01,  7.4204e-01, -3.5732e-01,
          1.2465e-02, -8.4338e-02, -1.0739e-01, -1.7153e-01, -1.6881e-01,
          4.8688e-01, -1.6268e-02,  7.4173e-01,  2.6540e-01,  2.3626e-03,
         -7.5968e-03, -3.1980e-01,  4.0346e-01, -2.1030e-01,  1.3524e-01,
         -1.9214e-01,  8.3602e-02, -3.2311e-02, -3.0736e-02, -1.5885e-01,
         -2.1609e-02,  2.7727e-01, -3.2248e-02, -2.0961e-01,  5.2337e-02,
         -2.7457e-02,  1.1166e-01]], device='cuda:0') tensor(0.2093, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
282000 特征值优化 tensor(0.6646, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.0617e-01,  5.7988e-01, -6.6491e-01, -2.0124e-01, -4.7415e-01,
          7.5273e-01, -1.8592e-01,  1.1031e+00, -2.0353e-02, -1.0422e+00,
          7.0495e-01, -1.3814e-01,  1.0587e-01, -2.1583e-01, -3.4658e-02,
         -1.4750e-02,  6.8279e-02,  1.8849e-02,  1.5157e-01, -2.3647e-02,
          4.1326e-02,  8.1161e-02, -6.3158e-02,  1.1523e-02,  8.4265e-02,
         -6.8674e-02, -1.1892e-01,  1.2198e-01,  2.6485e-02, -9.4208e-02,
          1.7835e-02, -3.1874e-02, -9.9851e-02, -4.2999e-02,  9.9137e-04,
         -5.8641e-02, -7.5597e-02, -2.1081e-02, -2.6098e-01,  7.3197e-02,
         -5.4076e-02,  2.3709e-01, -4.3623e-01,  7.4526e-01, -3.5909e-01,
         -1.4893e-03, -7.5711e-02, -1.0634e-01, -1.7153e-01, -1.7192e-01,
          4.9089e-01, -2.0023e-02,  7.5480e-01,  2.6402e-01,  2.1082e-02,
         -1.7643e-02, -3.1815e-01,  4.0298e-01, -2.1320e-01,  1.2668e-01,
         -1.8687e-01,  1.1775e-01, -4.4374e-02, -2.1006e-02, -1.4919e-01,
         -1.9908e-02,  2.8791e-01, -4.0169e-02, -2.1903e-01,  1.7458e-02,
         -3.0904e-02,  1.1125e-01]], device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
283000 特征值优化 tensor(0.6674, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3020,  0.5897, -0.6633, -0.1829, -0.4885,  0.7402, -0.1539,  1.0408,
         -0.0379, -1.0840,  0.6812, -0.1427,  0.1044, -0.2008, -0.0785, -0.0199,
          0.0838,  0.0274,  0.1615, -0.0175,  0.0400,  0.0808,  0.0436,  0.0916,
          0.0644,  0.0033, -0.1579,  0.0802,  0.0415, -0.0947,  0.0194, -0.0252,
         -0.0863, -0.0448,  0.0089, -0.0431, -0.0588, -0.0331, -0.2690,  0.0573,
         -0.0507,  0.2360, -0.4382,  0.7487, -0.3595, -0.0052, -0.0694, -0.1052,
         -0.1687, -0.1688,  0.4767, -0.0114,  0.7512,  0.2688, -0.0034,  0.0014,
         -0.3367,  0.4126, -0.2044,  0.1355, -0.2169,  0.0794, -0.0196, -0.0562,
         -0.1210, -0.0401,  0.2958, -0.0562, -0.1776,  0.0696, -0.0443,  0.1096]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
284000 特征值优化 tensor(0.6636, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2761,  0.6308, -0.6667, -0.2017, -0.4805,  0.7518, -0.1503,  1.0907,
         -0.0361, -1.0644,  0.6993, -0.1368,  0.1044, -0.2283, -0.0673, -0.0038,
          0.0092, -0.0518,  0.1570, -0.0209,  0.0398,  0.0789, -0.0218,  0.0635,
          0.1281, -0.0909, -0.0591,  0.1757,  0.0277, -0.0960,  0.0209, -0.0332,
         -0.1004, -0.0430,  0.0059, -0.0577, -0.0541, -0.0175, -0.2608,  0.0701,
         -0.0655,  0.2379, -0.4246,  0.7491, -0.3605, -0.0310, -0.0658, -0.1072,
         -0.1717, -0.1721,  0.4874, -0.0184,  0.7405,  0.2709,  0.0059,  0.0086,
         -0.3182,  0.4028, -0.2014,  0.1319, -0.2070,  0.0886, -0.0345, -0.0237,
         -0.1443, -0.0155,  0.2866, -0.0336, -0.1912,  0.0401, -0.0274,  0.1060]],
       device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
285000 特征值优化 tensor(20.9292, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1437,  0.0750,  0.4897,  1.3879, -1.0493, -0.7247, -1.7146,  0.7356,
         -0.5368, -1.3537,  0.2632, -0.4075,  1.6577,  0.0363,  0.1196, -0.2325,
         -0.2784, -1.7336,  0.0247, -0.2082, -0.1946, -1.8567,  0.0309, -0.0667,
         -0.0390,  0.0292, -0.6238,  0.0510, -1.6411, -0.8023,  0.0677,  0.0032,
          0.0098, -0.5941,  0.0793,  0.2324, -0.8677,  0.0153, -0.7393, -0.2319,
          1.4826,  0.5169,  0.3741, -0.2995, -1.5563, -0.8335,  0.5080,  1.9684,
         -0.5364,  0.6331, -0.5975, -0.1715,  1.1634, -0.3407,  0.2650, -1.0080,
          0.6976, -0.2552,  0.2071, -0.7304,  0.5192,  1.8977, -1.0175, -1.0672,
          0.8126, -1.0898, -0.2167, -1.2547,  0.9434,  0.8703,  0.3928,  1.4572]],
       device='cuda:0') tensor(0.2191, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
286000 特征值优化 tensor(5.5730, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1037,  0.3536, -0.5896,  0.9970, -0.7556, -0.5191, -0.6250,  0.7660,
         -0.2851, -0.6568, -0.4567,  0.5542,  0.6829, -0.0092,  0.0082,  0.0164,
         -0.0825, -0.7569,  0.0270, -0.0042, -0.0536, -0.7712, -0.0468, -0.1285,
         -0.0339,  0.0405, -0.0292,  0.1394, -0.6357, -0.1275,  0.0610, -0.0590,
         -0.0064, -0.0096,  0.0203,  0.0016, -0.2104,  0.0029, -0.1323,  0.0027,
          0.5441, -0.0057,  0.2871,  0.3298, -0.8624, -0.5284,  0.1981,  0.8695,
         -0.3173,  0.3132, -0.5615,  0.1016,  0.3246, -0.0123,  0.3232, -0.2706,
         -0.1588,  0.0358,  0.0199, -0.0337, -0.1491,  1.0046, -0.3928, -0.2811,
          0.1452, -0.3347,  0.3689, -0.3689,  0.2132,  0.1715, -0.5380,  0.4221]],
       device='cuda:0') tensor(0.2295, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
287000 特征值优化 tensor(0.6546, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0735,  0.6302, -0.5967, -0.0156, -0.4118, -0.4532,  0.2571,  1.0353,
          0.7125, -0.5977, -0.1374,  1.1407,  0.2943, -0.1419, -0.0567,  0.0147,
          0.0088, -0.1371,  0.0630, -0.1711, -0.0543, -0.2345, -0.0863, -0.0257,
          0.0358, -0.0219, -0.0234,  0.2027, -0.0686, -0.0561,  0.0594, -0.0475,
          0.0199, -0.0186, -0.0539,  0.0763, -0.0401, -0.1045, -0.1142,  0.0124,
          0.1151,  0.0685, -0.2288,  0.4518, -0.4636, -0.1496, -0.0767,  0.3780,
         -0.1281,  0.1364, -0.2205,  0.0136, -0.1033,  0.1134,  0.5061, -0.0192,
         -0.3321,  0.0872,  0.1073, -0.0916, -0.1651,  0.3706, -0.3878, -0.0784,
         -0.3011,  0.0824, -0.1070, -0.0700,  0.0903,  0.1311, -0.6074,  0.1974]],
       device='cuda:0') tensor(0.2048, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
288000 特征值优化 tensor(0.6177, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0663,  0.6552, -0.4979, -0.0032, -0.3470, -0.4802,  0.2204,  1.0978,
          0.7004, -0.6182, -0.2173,  1.1350,  0.2943, -0.1555, -0.0930,  0.0591,
          0.0198, -0.1351,  0.0770, -0.1460, -0.0553, -0.2315, -0.0901, -0.0299,
          0.0284, -0.0889,  0.0516,  0.2571, -0.0469, -0.0492,  0.0612, -0.0421,
         -0.0040, -0.0233,  0.0263,  0.0578,  0.0137, -0.1308, -0.1129,  0.0234,
          0.0573,  0.0734, -0.2434,  0.4400, -0.4317, -0.0662, -0.1286,  0.3264,
         -0.1251,  0.1476, -0.2594,  0.0323, -0.2080,  0.1564,  0.4911,  0.0887,
         -0.4688,  0.1521,  0.1653,  0.0200, -0.1550,  0.3193, -0.4055, -0.0571,
         -0.3201,  0.0647, -0.0445, -0.0867,  0.1876,  0.1126, -0.3683,  0.0983]],
       device='cuda:0') tensor(0.2085, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
289000 特征值优化 tensor(0.6209, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0845,  0.6521, -0.4886, -0.0072, -0.3449, -0.4632,  0.2324,  1.1264,
          0.6930, -0.7153, -0.2463,  1.0971,  0.2961, -0.1599, -0.0931,  0.0291,
          0.0283, -0.1054,  0.0894, -0.1295, -0.0539, -0.2320, -0.0982, -0.0658,
          0.0266, -0.0307,  0.0065,  0.2171, -0.0436, -0.0496,  0.0624, -0.0385,
         -0.0383, -0.0234,  0.0860, -0.0249,  0.0539, -0.1348, -0.0787,  0.0122,
          0.0194,  0.0374, -0.2219,  0.4369, -0.4467, -0.0532, -0.1377,  0.3196,
         -0.1223,  0.1484, -0.2564,  0.0311, -0.2316,  0.1706,  0.4797,  0.1436,
         -0.3953,  0.1166,  0.0437, -0.0158, -0.2048,  0.2897, -0.4408, -0.0317,
         -0.3063,  0.0531, -0.0645, -0.1000,  0.2349,  0.1332, -0.4512,  0.1533]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
290000 特征值优化 tensor(0.6180, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.4867e-02,  6.5177e-01, -4.8548e-01, -2.0984e-03, -3.3063e-01,
         -4.6289e-01,  2.2289e-01,  1.1029e+00,  7.1046e-01, -7.2796e-01,
         -2.6132e-01,  1.0966e+00,  2.9652e-01, -1.5787e-01, -8.7959e-02,
          3.8774e-02,  3.3768e-02, -1.2041e-01,  9.7012e-02, -1.3111e-01,
         -5.3581e-02, -2.3189e-01, -1.3887e-01, -2.7965e-02,  3.2444e-02,
         -2.0798e-02, -4.7264e-02,  2.0384e-01, -4.3449e-02, -4.9807e-02,
          6.6544e-02, -4.0514e-02, -5.1761e-02, -2.7407e-02,  7.5002e-02,
         -1.0173e-03,  7.2672e-02, -1.3204e-01, -7.5017e-02,  1.4000e-02,
         -1.1668e-03,  3.3831e-02, -2.2209e-01,  4.3517e-01, -4.4620e-01,
         -5.6397e-02, -1.3691e-01,  3.1701e-01, -1.2425e-01,  1.5059e-01,
         -2.5929e-01,  3.0612e-02, -2.5763e-01,  1.8781e-01,  4.5771e-01,
          1.6504e-01, -4.1256e-01,  1.2795e-01,  4.9890e-02, -6.6149e-03,
         -2.2308e-01,  2.7058e-01, -4.4003e-01, -3.2452e-02, -2.9019e-01,
          4.3754e-02, -5.1160e-02, -1.0314e-01,  2.5673e-01,  1.4751e-01,
         -4.4895e-01,  1.5053e-01]], device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
291000 特征值优化 tensor(0.6188, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0988,  0.6393, -0.5039,  0.0018, -0.3558, -0.4451,  0.2509,  1.1029,
          0.7317, -0.7302, -0.2747,  1.1440,  0.2970, -0.1499, -0.0742, -0.0084,
          0.0808, -0.1130,  0.0576, -0.1271, -0.0528, -0.2313, -0.1030, -0.0790,
          0.0575,  0.0214, -0.0086,  0.1795, -0.0490, -0.0485,  0.0672, -0.0283,
         -0.0767, -0.0292,  0.0191, -0.0252,  0.0753, -0.1311, -0.0841,  0.0109,
         -0.0063,  0.0430, -0.2138,  0.4325, -0.4483, -0.0455, -0.1402,  0.3294,
         -0.1243,  0.1517, -0.2523,  0.0286, -0.2727,  0.1920,  0.4471,  0.1869,
         -0.4327,  0.1507, -0.0147, -0.0856, -0.2096,  0.2591, -0.4618, -0.0205,
         -0.3172,  0.0767, -0.0366, -0.1074,  0.2532,  0.1560, -0.4160,  0.0943]],
       device='cuda:0') tensor(0.2096, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
292000 特征值优化 tensor(0.6264, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0877,  0.6492, -0.4891, -0.0143, -0.3351, -0.4677,  0.2349,  1.1049,
          0.7273, -0.7403, -0.2670,  1.0826,  0.2971, -0.1540, -0.0900,  0.0377,
          0.0305, -0.1217,  0.0927, -0.1287, -0.0531, -0.2320, -0.1191, -0.0667,
          0.0464, -0.0020, -0.0411,  0.1648, -0.0418, -0.0503,  0.0658, -0.0399,
         -0.0565, -0.0363,  0.0488, -0.0167,  0.0740, -0.1316, -0.0717,  0.0145,
         -0.0015,  0.0319, -0.2219,  0.4363, -0.4471, -0.0524, -0.1390,  0.3431,
         -0.1150,  0.1197, -0.2473,  0.0258, -0.2871,  0.2023,  0.4623,  0.1791,
         -0.4234,  0.1359,  0.0812, -0.0570, -0.1994,  0.2589, -0.4412, -0.0312,
         -0.3518,  0.0676, -0.0546, -0.0956,  0.2544,  0.1472, -0.4438,  0.1587]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
293000 特征值优化 tensor(0.6554, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0972,  0.6439, -0.4954, -0.0127, -0.3590, -0.4509,  0.2437,  1.1066,
          0.7553, -0.7202, -0.2622,  1.0883,  0.2947, -0.1379, -0.0734,  0.0342,
          0.0317, -0.1343,  0.0812, -0.1292, -0.0538, -0.2329, -0.1238, -0.0449,
          0.0204, -0.0329, -0.0326,  0.1944, -0.0412, -0.0499,  0.0644, -0.0342,
         -0.0446, -0.0243,  0.0731, -0.0070,  0.0751, -0.1278, -0.0747,  0.0060,
          0.0042,  0.0300, -0.2200,  0.4401, -0.4453, -0.0474, -0.1355,  0.3410,
         -0.1115,  0.1246, -0.2397,  0.0240, -0.2813,  0.1938,  0.4500,  0.1789,
         -0.3900,  0.1175,  0.0446, -0.0375, -0.1944,  0.2628, -0.4408, -0.0277,
         -0.3505,  0.0936, -0.0641, -0.0948,  0.2563,  0.1479, -0.4907,  0.1643]],
       device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
294000 特征值优化 tensor(0.6194, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0936,  0.6379, -0.5076,  0.0268, -0.3601, -0.4350,  0.2551,  1.1090,
          0.7681, -0.7197, -0.2801,  1.0579,  0.2957, -0.1619, -0.0536,  0.0152,
          0.0649, -0.1028,  0.0741, -0.1240, -0.0545, -0.2337, -0.0830, -0.1166,
          0.0329,  0.0571,  0.0247,  0.1952, -0.0576, -0.0508,  0.0705, -0.0145,
         -0.0863, -0.0292,  0.0321, -0.0673,  0.0773, -0.1310, -0.0963,  0.0138,
         -0.0063,  0.0568, -0.2152,  0.4342, -0.4445, -0.0324, -0.1433,  0.3474,
         -0.1205,  0.1241, -0.2482,  0.0158, -0.2814,  0.2028,  0.4459,  0.2042,
         -0.3979,  0.1328,  0.0174, -0.0859, -0.1830,  0.2483, -0.4601, -0.0225,
         -0.3747,  0.0841, -0.0809, -0.0723,  0.2454,  0.1527, -0.4523,  0.1530]],
       device='cuda:0') tensor(0.2066, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
295000 特征值优化 tensor(0.6256, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0863,  0.6513, -0.4807, -0.0025, -0.3446, -0.4573,  0.2322,  1.1074,
          0.7636, -0.7203, -0.2709,  1.0443,  0.2966, -0.1516, -0.0921,  0.0389,
          0.0343, -0.1231,  0.0915, -0.1295, -0.0534, -0.2321, -0.1337, -0.0582,
          0.0301, -0.0059, -0.0019,  0.1903, -0.0434, -0.0495,  0.0645, -0.0389,
         -0.0584, -0.0249,  0.0635, -0.0255,  0.0736, -0.1320, -0.0799,  0.0073,
         -0.0014,  0.0402, -0.2226,  0.4374, -0.4470, -0.0548, -0.1376,  0.3378,
         -0.1174,  0.1237, -0.2529,  0.0276, -0.2811,  0.1969,  0.4615,  0.1814,
         -0.3839,  0.1144,  0.0954, -0.0771, -0.2012,  0.2591, -0.4443, -0.0315,
         -0.3530,  0.0952, -0.0588, -0.0999,  0.2542,  0.1473, -0.4862,  0.1526]],
       device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
296000 特征值优化 tensor(0.6214, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.6872e-02,  6.5107e-01, -4.9132e-01, -1.0705e-02, -3.3564e-01,
         -4.5846e-01,  2.3064e-01,  1.1080e+00,  7.8468e-01, -7.2886e-01,
         -2.6459e-01,  1.0488e+00,  2.9663e-01, -1.5332e-01, -9.2971e-02,
          3.9271e-02,  2.8239e-02, -1.2136e-01,  9.3495e-02, -1.3132e-01,
         -5.3234e-02, -2.3211e-01, -1.3530e-01, -4.4888e-02,  1.7462e-02,
         -4.2287e-02, -1.9455e-02,  2.2426e-01, -4.2766e-02, -5.0095e-02,
          6.4748e-02, -4.6187e-02, -4.8004e-02, -2.5419e-02,  8.3346e-02,
         -4.7721e-03,  7.4061e-02, -1.3102e-01, -7.9059e-02,  2.7583e-03,
         -4.7121e-04,  3.7884e-02, -2.2258e-01,  4.3651e-01, -4.4780e-01,
         -5.7560e-02, -1.3643e-01,  3.4434e-01, -1.1477e-01,  1.1734e-01,
         -2.5191e-01,  2.8914e-02, -2.9019e-01,  2.0195e-01,  4.6286e-01,
          1.7537e-01, -3.9820e-01,  1.2350e-01,  8.8107e-02, -6.0541e-02,
         -2.0136e-01,  2.6362e-01, -4.3782e-01, -3.3147e-02, -3.3064e-01,
          9.4579e-02, -6.4463e-02, -9.7163e-02,  2.5960e-01,  1.4125e-01,
         -5.0197e-01,  1.4450e-01]], device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
297000 特征值优化 tensor(0.6190, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0886,  0.6497, -0.4975, -0.0035, -0.3658, -0.4610,  0.2244,  1.0920,
          0.8053, -0.7296, -0.2596,  1.0285,  0.2964, -0.1453, -0.0776,  0.0372,
          0.0333, -0.1197,  0.0867, -0.1303, -0.0531, -0.2321, -0.1501, -0.0142,
          0.0223, -0.0573, -0.0068,  0.2277, -0.0437, -0.0499,  0.0565, -0.0396,
         -0.0575, -0.0212,  0.0939, -0.0129,  0.0794, -0.1300, -0.0819, -0.0015,
         -0.0076,  0.0383, -0.2183,  0.4331, -0.4472, -0.0565, -0.1361,  0.3474,
         -0.1118,  0.1127, -0.2580,  0.0298, -0.2506,  0.1764,  0.4642,  0.1787,
         -0.4146,  0.1272,  0.0730, -0.0377, -0.2131,  0.2541, -0.4385, -0.0335,
         -0.3151,  0.0949, -0.0918, -0.0826,  0.2566,  0.1581, -0.5194,  0.1476]],
       device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
298000 特征值优化 tensor(0.6286, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1025,  0.6340, -0.4926, -0.0106, -0.3671, -0.4326,  0.2486,  1.1078,
          0.8055, -0.7077, -0.2682,  1.0140,  0.2956, -0.1558, -0.0708,  0.0159,
          0.0612, -0.1080,  0.0790, -0.1276, -0.0543, -0.2320, -0.0976, -0.0829,
          0.0453,  0.0229,  0.0014,  0.1933, -0.0426, -0.0494,  0.0710, -0.0288,
         -0.0644, -0.0318,  0.0375, -0.0414,  0.0741, -0.1309, -0.0918,  0.0027,
         -0.0047,  0.0509, -0.2095,  0.4346, -0.4488, -0.0409, -0.1388,  0.3408,
         -0.1145,  0.1224, -0.2484,  0.0277, -0.2718,  0.1984,  0.4516,  0.2012,
         -0.3909,  0.1270,  0.0508, -0.0824, -0.1987,  0.2641, -0.4555, -0.0258,
         -0.3389,  0.1023, -0.0605, -0.0960,  0.2471,  0.1443, -0.4831,  0.1300]],
       device='cuda:0') tensor(0.2052, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
299000 特征值优化 tensor(0.6270, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.8780e-02,  6.4189e-01, -4.9241e-01, -7.1455e-03, -3.4997e-01,
         -4.3504e-01,  2.4170e-01,  1.1045e+00,  8.1346e-01, -7.1495e-01,
         -2.7151e-01,  1.0017e+00,  2.9670e-01, -1.5602e-01, -7.4550e-02,
          1.9260e-04,  7.5598e-02, -1.1228e-01,  6.1296e-02, -1.2766e-01,
         -5.3113e-02, -2.3213e-01, -9.7922e-02, -8.5758e-02,  3.7481e-02,
          2.5890e-02,  1.1004e-02,  1.8938e-01, -4.4649e-02, -4.9575e-02,
          6.9200e-02, -2.5927e-02, -6.9004e-02, -2.9546e-02,  3.6286e-02,
         -4.6341e-02,  7.5288e-02, -1.3106e-01, -9.3540e-02,  1.8068e-03,
         -4.8430e-03,  5.2242e-02, -2.1515e-01,  4.3404e-01, -4.4911e-01,
         -4.9147e-02, -1.3888e-01,  3.4001e-01, -1.1312e-01,  1.2402e-01,
         -2.4718e-01,  2.6527e-02, -2.7924e-01,  2.0021e-01,  4.5231e-01,
          1.9069e-01, -3.8586e-01,  1.2490e-01,  5.4309e-02, -8.2535e-02,
         -1.9524e-01,  2.5722e-01, -4.5775e-01, -2.3286e-02, -3.4653e-01,
          1.0770e-01, -6.3646e-02, -9.2901e-02,  2.5015e-01,  1.5032e-01,
         -4.8517e-01,  1.2958e-01]], device='cuda:0') tensor(0.2046, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
300000 特征值优化 tensor(0.6230, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0949,  0.6433, -0.4997,  0.0115, -0.3694, -0.4367,  0.2511,  1.1128,
          0.8340, -0.7082, -0.2710,  0.9927,  0.2952, -0.1544, -0.0830, -0.0109,
          0.0621, -0.1113,  0.0544, -0.1240, -0.0547, -0.2330, -0.0984, -0.1177,
          0.0399,  0.0529,  0.0176,  0.1830, -0.0536, -0.0503,  0.0663, -0.0164,
         -0.0827, -0.0297,  0.0259, -0.0648,  0.0728, -0.1318, -0.0961,  0.0031,
         -0.0014,  0.0559, -0.2121,  0.4339, -0.4467, -0.0395, -0.1409,  0.3432,
         -0.1205,  0.1267, -0.2451,  0.0191, -0.2837,  0.1948,  0.4516,  0.1996,
         -0.3887,  0.1267,  0.0361, -0.0786, -0.1852,  0.2531, -0.4596, -0.0234,
         -0.3535,  0.1080, -0.0818, -0.0793,  0.2393,  0.1521, -0.4848,  0.1345]],
       device='cuda:0') tensor(0.2029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
301000 特征值优化 tensor(0.6397, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.7516e-02,  6.3846e-01, -4.7680e-01,  2.3434e-02, -3.7068e-01,
         -4.2818e-01,  2.4432e-01,  1.1157e+00,  8.2746e-01, -6.7714e-01,
         -2.7527e-01,  9.4366e-01,  2.9717e-01, -1.4445e-01, -7.5229e-02,
          2.0410e-02,  3.1623e-02, -9.7429e-02,  7.9794e-02, -1.2694e-01,
         -5.2437e-02, -2.3178e-01, -9.2572e-02, -9.5969e-02,  1.5376e-02,
          4.9734e-02, -1.0673e-03,  1.6911e-01, -4.9211e-02, -5.0296e-02,
          6.1368e-02, -1.8619e-02, -6.9117e-02, -3.6060e-02,  3.6689e-02,
         -5.4978e-02,  6.7962e-02, -1.3533e-01, -9.3280e-02,  4.5592e-03,
         -1.1810e-03,  5.3559e-02, -2.1844e-01,  4.3386e-01, -4.4821e-01,
         -4.2851e-02, -1.4290e-01,  3.3219e-01, -1.2339e-01,  1.2988e-01,
         -2.5671e-01,  2.2469e-02, -2.7080e-01,  1.8978e-01,  4.5283e-01,
          1.8935e-01, -3.7358e-01,  1.0972e-01,  4.4354e-02, -5.3921e-02,
         -1.8359e-01,  2.4965e-01, -4.6405e-01, -2.0995e-02, -3.6723e-01,
          1.1088e-01, -6.8451e-02, -9.3884e-02,  2.3675e-01,  1.6287e-01,
         -4.9304e-01,  1.5726e-01]], device='cuda:0') tensor(0.2044, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
302000 特征值优化 tensor(0.6230, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.2073e-02,  6.4579e-01, -4.7874e-01, -5.6365e-04, -3.5047e-01,
         -4.6565e-01,  2.3189e-01,  1.1032e+00,  8.5347e-01, -7.1535e-01,
         -2.6029e-01,  9.6183e-01,  2.9687e-01, -1.4782e-01, -7.5589e-02,
          3.4282e-02,  3.8105e-02, -1.2525e-01,  8.0759e-02, -1.2837e-01,
         -5.2855e-02, -2.3244e-01, -1.3774e-01, -4.6799e-02,  1.2844e-02,
         -1.9756e-02, -1.0350e-02,  2.1224e-01, -4.4512e-02, -4.9307e-02,
          6.3550e-02, -4.1888e-02, -5.8701e-02, -2.4246e-02,  6.9711e-02,
         -2.2458e-02,  7.6614e-02, -1.3049e-01, -8.6989e-02,  1.7755e-04,
         -2.4338e-03,  4.5168e-02, -2.2073e-01,  4.3699e-01, -4.4924e-01,
         -4.9486e-02, -1.3995e-01,  3.3694e-01, -1.1647e-01,  1.2101e-01,
         -2.5478e-01,  2.8870e-02, -2.8060e-01,  1.9832e-01,  4.6301e-01,
          1.8241e-01, -3.9117e-01,  1.1974e-01,  8.5961e-02, -6.6502e-02,
         -2.0239e-01,  2.5852e-01, -4.4159e-01, -3.1064e-02, -3.2668e-01,
          9.6054e-02, -6.9199e-02, -9.0467e-02,  2.5363e-01,  1.5048e-01,
         -4.9864e-01,  1.4727e-01]], device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
303000 特征值优化 tensor(0.6729, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.5654e-02,  6.4209e-01, -4.8604e-01, -3.2748e-04, -3.5555e-01,
         -4.5938e-01,  2.3193e-01,  1.1033e+00,  8.6392e-01, -7.1759e-01,
         -2.5013e-01,  9.5188e-01,  2.9699e-01, -1.4090e-01, -6.8872e-02,
          3.6333e-02,  3.8818e-02, -1.2906e-01,  8.3725e-02, -1.2532e-01,
         -5.2574e-02, -2.3233e-01, -1.3676e-01, -3.8858e-02,  1.3417e-03,
         -4.8675e-02, -1.6878e-02,  2.2945e-01, -4.4424e-02, -5.1045e-02,
          6.2571e-02, -4.3281e-02, -5.0609e-02, -2.5051e-02,  7.7990e-02,
         -1.1203e-02,  7.6963e-02, -1.2840e-01, -8.5423e-02, -5.8364e-04,
         -3.7931e-04,  4.0731e-02, -2.2010e-01,  4.3873e-01, -4.4489e-01,
         -4.9305e-02, -1.3649e-01,  3.3966e-01, -1.1406e-01,  1.1803e-01,
         -2.5205e-01,  2.8686e-02, -2.8116e-01,  1.9440e-01,  4.5635e-01,
          1.6893e-01, -4.0341e-01,  1.2456e-01,  7.9938e-02, -4.8746e-02,
         -2.0638e-01,  2.6036e-01, -4.3844e-01, -3.1104e-02, -3.1799e-01,
          9.2981e-02, -6.6308e-02, -9.3449e-02,  2.5888e-01,  1.5191e-01,
         -4.8936e-01,  1.4795e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
304000 特征值优化 tensor(0.6261, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0981,  0.6382, -0.4952, -0.0084, -0.3630, -0.4359,  0.2456,  1.1092,
          0.8674, -0.7140, -0.2687,  0.9468,  0.2958, -0.1554, -0.0638,  0.0184,
          0.0661, -0.1003,  0.0834, -0.1236, -0.0540, -0.2325, -0.0954, -0.0944,
          0.0303,  0.0321,  0.0014,  0.1995, -0.0455, -0.0501,  0.0721, -0.0251,
         -0.0715, -0.0311,  0.0308, -0.0530,  0.0753, -0.1306, -0.0927, -0.0023,
         -0.0059,  0.0518, -0.2126,  0.4356, -0.4496, -0.0382, -0.1417,  0.3406,
         -0.1153,  0.1244, -0.2413,  0.0237, -0.2740,  0.1979,  0.4465,  0.2045,
         -0.3816,  0.1255,  0.0546, -0.0684, -0.1977,  0.2621, -0.4596, -0.0235,
         -0.3427,  0.1122, -0.0654, -0.0907,  0.2474,  0.1460, -0.4855,  0.1275]],
       device='cuda:0') tensor(0.2070, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
305000 特征值优化 tensor(0.6243, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0937,  0.6418, -0.5035, -0.0035, -0.3560, -0.4353,  0.2448,  1.1110,
          0.8824, -0.7140, -0.2700,  0.9380,  0.2954, -0.1551, -0.0674,  0.0094,
          0.0660, -0.1036,  0.0746, -0.1225, -0.0547, -0.2330, -0.0925, -0.0978,
          0.0221,  0.0391,  0.0042,  0.2034, -0.0488, -0.0497,  0.0707, -0.0239,
         -0.0742, -0.0309,  0.0333, -0.0504,  0.0750, -0.1310, -0.0927, -0.0027,
         -0.0045,  0.0528, -0.2125,  0.4349, -0.4472, -0.0365, -0.1422,  0.3444,
         -0.1194,  0.1276, -0.2398,  0.0201, -0.2770,  0.1993,  0.4543,  0.1981,
         -0.3955,  0.1333,  0.0389, -0.0801, -0.1940,  0.2574, -0.4592, -0.0239,
         -0.3397,  0.1073, -0.0617, -0.0902,  0.2448,  0.1491, -0.4718,  0.1248]],
       device='cuda:0') tensor(0.2076, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
306000 特征值优化 tensor(0.6184, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0920,  0.6443, -0.4962,  0.0344, -0.3503, -0.4507,  0.2535,  1.1087,
          0.9052, -0.7270, -0.2812,  0.9349,  0.2966, -0.1633, -0.0698, -0.0251,
          0.0724, -0.1128,  0.0333, -0.1278, -0.0533, -0.2328, -0.0826, -0.1150,
          0.0209,  0.0691,  0.0306,  0.2091, -0.0586, -0.0514,  0.0696, -0.0102,
         -0.0924, -0.0279,  0.0128, -0.0795,  0.0767, -0.1313, -0.1018, -0.0021,
         -0.0071,  0.0616, -0.2188,  0.4342, -0.4463, -0.0460, -0.1405,  0.3400,
         -0.1193,  0.1213, -0.2503,  0.0153, -0.2926,  0.2065,  0.4432,  0.1997,
         -0.4045,  0.1311,  0.0289, -0.1119, -0.1714,  0.2390, -0.4615, -0.0218,
         -0.3435,  0.0946, -0.0611, -0.0783,  0.2380,  0.1617, -0.4879,  0.1416]],
       device='cuda:0') tensor(0.2069, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
307000 特征值优化 tensor(0.6302, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0971,  0.6415, -0.4721,  0.0017, -0.3800, -0.4418,  0.2358,  1.1169,
          0.9008, -0.7105, -0.2731,  0.8987,  0.2972, -0.1478, -0.0668,  0.0375,
          0.0348, -0.1178,  0.0900, -0.1287, -0.0525, -0.2318, -0.1239, -0.0653,
          0.0066,  0.0304, -0.0119,  0.1741, -0.0444, -0.0501,  0.0661, -0.0309,
         -0.0679, -0.0316,  0.0423, -0.0491,  0.0745, -0.1322, -0.0896, -0.0039,
         -0.0042,  0.0496, -0.2162,  0.4345, -0.4528, -0.0514, -0.1387,  0.3315,
         -0.1184,  0.1264, -0.2527,  0.0256, -0.2682,  0.1945,  0.4507,  0.1958,
         -0.3849,  0.1181,  0.0807, -0.0561, -0.1951,  0.2549, -0.4579, -0.0257,
         -0.3413,  0.1104, -0.0588, -0.0945,  0.2456,  0.1557, -0.4885,  0.1366]],
       device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
308000 特征值优化 tensor(0.6253, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0942,  0.6457, -0.4696,  0.0066, -0.3597, -0.4642,  0.2335,  1.1086,
          0.9121, -0.7128, -0.2643,  0.8906,  0.2976, -0.1473, -0.0716,  0.0398,
          0.0364, -0.1223,  0.0869, -0.1268, -0.0525, -0.2320, -0.1351, -0.0631,
          0.0054,  0.0012, -0.0160,  0.1993, -0.0432, -0.0497,  0.0636, -0.0369,
         -0.0652, -0.0266,  0.0630, -0.0351,  0.0770, -0.1304, -0.0875, -0.0051,
         -0.0035,  0.0476, -0.2187,  0.4350, -0.4506, -0.0510, -0.1394,  0.3317,
         -0.1167,  0.1227, -0.2576,  0.0274, -0.2744,  0.1971,  0.4612,  0.1868,
         -0.3847,  0.1144,  0.0887, -0.0617, -0.2007,  0.2572, -0.4502, -0.0275,
         -0.3348,  0.1122, -0.0640, -0.0927,  0.2509,  0.1541, -0.5036,  0.1396]],
       device='cuda:0') tensor(0.2038, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
309000 特征值优化 tensor(0.6219, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0872,  0.6524, -0.4842, -0.0045, -0.3416, -0.4654,  0.2270,  1.1047,
          0.9321, -0.7252, -0.2564,  0.8982,  0.2963, -0.1545, -0.0884,  0.0420,
          0.0318, -0.1192,  0.0907, -0.1318, -0.0533, -0.2322, -0.1372, -0.0454,
         -0.0043, -0.0357, -0.0187,  0.2208, -0.0440, -0.0494,  0.0637, -0.0456,
         -0.0544, -0.0246,  0.0780, -0.0201,  0.0785, -0.1292, -0.0853, -0.0068,
         -0.0038,  0.0434, -0.2228,  0.4376, -0.4481, -0.0587, -0.1358,  0.3390,
         -0.1153,  0.1190, -0.2510,  0.0267, -0.2874,  0.2003,  0.4640,  0.1808,
         -0.3885,  0.1193,  0.0878, -0.0596, -0.2030,  0.2597, -0.4391, -0.0320,
         -0.3200,  0.1050, -0.0605, -0.0918,  0.2584,  0.1472, -0.5140,  0.1378]],
       device='cuda:0') tensor(0.2079, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
310000 特征值优化 tensor(0.6299, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.9006e-02,  6.3834e-01, -4.8389e-01, -7.8419e-03, -4.0072e-01,
         -4.4047e-01,  2.4582e-01,  1.1053e+00,  9.3165e-01, -7.1853e-01,
         -2.5910e-01,  8.9624e-01,  2.9662e-01, -1.4767e-01, -6.6331e-02,
          2.0356e-02,  5.1189e-02, -1.1097e-01,  7.9966e-02, -1.2678e-01,
         -5.2978e-02, -2.3171e-01, -9.6900e-02, -8.0970e-02,  2.7689e-02,
          1.4131e-02, -5.2112e-03,  1.9203e-01, -4.2239e-02, -4.8959e-02,
          6.7862e-02, -2.6196e-02, -6.7925e-02, -2.8554e-02,  3.8976e-02,
         -5.1155e-02,  6.8329e-02, -1.3144e-01, -9.5382e-02, -1.0613e-02,
          6.5269e-04,  5.3452e-02, -2.1643e-01,  4.3583e-01, -4.4791e-01,
         -4.5039e-02, -1.3931e-01,  3.3574e-01, -1.1271e-01,  1.2728e-01,
         -2.5166e-01,  2.9179e-02, -2.6751e-01,  1.8496e-01,  4.3923e-01,
          1.9348e-01, -3.7500e-01,  1.1738e-01,  6.8885e-02, -7.2960e-02,
         -1.9639e-01,  2.6209e-01, -4.5465e-01, -2.6230e-02, -3.3539e-01,
          1.2273e-01, -4.9098e-02, -9.3028e-02,  2.3848e-01,  1.5102e-01,
         -5.0884e-01,  1.1895e-01]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
311000 特征值优化 tensor(0.6289, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0975,  0.6374, -0.4882, -0.0087, -0.3916, -0.4377,  0.2491,  1.1094,
          0.9376, -0.7130, -0.2625,  0.8827,  0.2955, -0.1510, -0.0672,  0.0194,
          0.0528, -0.1103,  0.0746, -0.1277, -0.0544, -0.2314, -0.0975, -0.0744,
          0.0276,  0.0163, -0.0054,  0.2010, -0.0420, -0.0501,  0.0661, -0.0263,
         -0.0666, -0.0284,  0.0352, -0.0529,  0.0710, -0.1318, -0.0958, -0.0112,
         -0.0034,  0.0546, -0.2112,  0.4355, -0.4493, -0.0430, -0.1378,  0.3387,
         -0.1117,  0.1255, -0.2518,  0.0298, -0.2705,  0.1903,  0.4417,  0.1985,
         -0.3794,  0.1206,  0.0694, -0.0771, -0.1967,  0.2643, -0.4572, -0.0255,
         -0.3324,  0.1201, -0.0509, -0.0910,  0.2418,  0.1482, -0.5057,  0.1212]],
       device='cuda:0') tensor(0.2041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
312000 特征值优化 tensor(0.6221, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0991,  0.6398, -0.4987,  0.0070, -0.3533, -0.4321,  0.2515,  1.1080,
          0.9559, -0.7093, -0.2759,  0.8888,  0.2959, -0.1595, -0.0797, -0.0160,
          0.0744, -0.1153,  0.0455, -0.1243, -0.0541, -0.2327, -0.0960, -0.1118,
          0.0235,  0.0540,  0.0118,  0.2010, -0.0542, -0.0507,  0.0707, -0.0165,
         -0.0830, -0.0305,  0.0165, -0.0692,  0.0760, -0.1301, -0.0961, -0.0104,
         -0.0053,  0.0562, -0.2113,  0.4326, -0.4469, -0.0389, -0.1414,  0.3426,
         -0.1198,  0.1235, -0.2416,  0.0182, -0.2845,  0.2000,  0.4471,  0.2035,
         -0.3937,  0.1292,  0.0418, -0.0880, -0.1808,  0.2500, -0.4611, -0.0221,
         -0.3368,  0.1189, -0.0659, -0.0804,  0.2394,  0.1564, -0.5089,  0.1231]],
       device='cuda:0') tensor(0.2029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
313000 特征值优化 tensor(0.6214, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0984,  0.6371, -0.5062,  0.0277, -0.3575, -0.4339,  0.2512,  1.1050,
          0.9654, -0.7073, -0.2778,  0.8694,  0.2963, -0.1613, -0.0623,  0.0085,
          0.0684, -0.1066,  0.0688, -0.1230, -0.0534, -0.2334, -0.0937, -0.1340,
          0.0186,  0.0594,  0.0068,  0.1868, -0.0552, -0.0506,  0.0710, -0.0120,
         -0.0888, -0.0306,  0.0103, -0.0739,  0.0781, -0.1303, -0.1003, -0.0109,
         -0.0082,  0.0600, -0.2126,  0.4322, -0.4469, -0.0354, -0.1435,  0.3480,
         -0.1224,  0.1251, -0.2511,  0.0183, -0.2840,  0.2023,  0.4466,  0.2070,
         -0.3974,  0.1316,  0.0293, -0.0799, -0.1773,  0.2424, -0.4630, -0.0219,
         -0.3410,  0.1200, -0.0766, -0.0734,  0.2398,  0.1603, -0.4946,  0.1193]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
314000 特征值优化 tensor(0.6531, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.7309e-02,  6.4748e-01, -5.0485e-01,  2.6029e-02, -3.3836e-01,
         -4.3023e-01,  2.4199e-01,  1.1014e+00,  9.7079e-01, -7.0174e-01,
         -2.8102e-01,  8.3992e-01,  2.9628e-01, -1.5681e-01, -8.9553e-02,
         -1.2882e-02,  6.1244e-02, -1.0716e-01,  5.4689e-02, -1.2627e-01,
         -5.4903e-02, -2.3237e-01, -8.4333e-02, -1.1339e-01,  4.2230e-03,
          5.1716e-02, -2.2861e-04,  1.8020e-01, -4.7352e-02, -4.9678e-02,
          6.2010e-02, -1.1191e-02, -7.3681e-02, -3.2851e-02,  1.9509e-02,
         -6.4290e-02,  7.7379e-02, -1.2949e-01, -9.6291e-02, -8.4245e-03,
         -2.3236e-03,  5.4705e-02, -2.1965e-01,  4.3798e-01, -4.4353e-01,
         -4.7050e-02, -1.3745e-01,  3.4703e-01, -1.1931e-01,  1.2536e-01,
         -2.5259e-01,  1.5448e-02, -2.8498e-01,  1.9570e-01,  4.4971e-01,
          2.0337e-01, -3.8506e-01,  1.1888e-01,  3.0866e-02, -6.4308e-02,
         -1.8019e-01,  2.4534e-01, -4.6349e-01, -2.0829e-02, -3.5099e-01,
          1.1866e-01, -6.7513e-02, -8.4644e-02,  2.3725e-01,  1.5961e-01,
         -4.8707e-01,  1.3877e-01]], device='cuda:0') tensor(0.2080, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
315000 特征值优化 tensor(0.6263, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0941,  0.6453, -0.4722,  0.0026, -0.3531, -0.4605,  0.2328,  1.1053,
          0.9732, -0.7166, -0.2632,  0.8208,  0.2972, -0.1493, -0.0711,  0.0379,
          0.0373, -0.1236,  0.0832, -0.1264, -0.0525, -0.2326, -0.1321, -0.0636,
          0.0066,  0.0050, -0.0032,  0.1915, -0.0450, -0.0493,  0.0645, -0.0358,
         -0.0643, -0.0256,  0.0554, -0.0357,  0.0762, -0.1309, -0.0866, -0.0113,
         -0.0036,  0.0464, -0.2190,  0.4364, -0.4514, -0.0506, -0.1396,  0.3321,
         -0.1174,  0.1258, -0.2524,  0.0260, -0.2725,  0.1966,  0.4613,  0.1863,
         -0.3922,  0.1195,  0.0953, -0.0615, -0.2043,  0.2595, -0.4510, -0.0262,
         -0.3303,  0.1202, -0.0432, -0.0987,  0.2512,  0.1514, -0.4906,  0.1241]],
       device='cuda:0') tensor(0.2045, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
316000 特征值优化 tensor(0.6226, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0900,  0.6495, -0.4845, -0.0041, -0.3357, -0.4598,  0.2267,  1.1043,
          0.9923, -0.7238, -0.2575,  0.8302,  0.2966, -0.1477, -0.0921,  0.0355,
          0.0367, -0.1278,  0.0892, -0.1300, -0.0532, -0.2326, -0.1363, -0.0458,
         -0.0077, -0.0315, -0.0100,  0.2133, -0.0442, -0.0501,  0.0646, -0.0459,
         -0.0529, -0.0251,  0.0716, -0.0204,  0.0763, -0.1303, -0.0827, -0.0127,
         -0.0017,  0.0421, -0.2216,  0.4370, -0.4484, -0.0546, -0.1382,  0.3396,
         -0.1158,  0.1203, -0.2512,  0.0269, -0.2901,  0.2030,  0.4653,  0.1751,
         -0.4032,  0.1266,  0.0962, -0.0528, -0.2006,  0.2603, -0.4377, -0.0330,
         -0.3147,  0.1159, -0.0399, -0.0991,  0.2588,  0.1452, -0.5078,  0.1194]],
       device='cuda:0') tensor(0.2067, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
317000 特征值优化 tensor(0.6217, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0938,  0.6476, -0.4834, -0.0030, -0.3782, -0.4689,  0.2510,  1.1174,
          1.0018, -0.7192, -0.2510,  0.8155,  0.2964, -0.1348, -0.0690,  0.0385,
          0.0300, -0.1320,  0.0743, -0.1366, -0.0526, -0.2317, -0.1400, -0.0311,
         -0.0082, -0.0335, -0.0219,  0.2214, -0.0440, -0.0493,  0.0541, -0.0328,
         -0.0640, -0.0213,  0.0765, -0.0286,  0.0877, -0.1234, -0.0846, -0.0171,
         -0.0052,  0.0412, -0.2218,  0.4372, -0.4483, -0.0595, -0.1346,  0.3394,
         -0.1155,  0.1192, -0.2574,  0.0300, -0.2423,  0.1698,  0.4645,  0.1813,
         -0.4172,  0.1282,  0.0861, -0.0408, -0.2053,  0.2574, -0.4479, -0.0236,
         -0.3054,  0.1183, -0.0558, -0.0887,  0.2561,  0.1617, -0.5198,  0.1274]],
       device='cuda:0') tensor(0.2283, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
318000 特征值优化 tensor(0.6199, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0911,  0.6546, -0.4864, -0.0026, -0.3411, -0.4652,  0.2270,  1.1147,
          1.0200, -0.7127, -0.2488,  0.8327,  0.2965, -0.1451, -0.0914,  0.0343,
          0.0360, -0.1247,  0.0892, -0.1311, -0.0531, -0.2324, -0.1418, -0.0297,
         -0.0129, -0.0472,  0.0019,  0.2269, -0.0446, -0.0499,  0.0617, -0.0575,
         -0.0421, -0.0242,  0.0729, -0.0236,  0.0819, -0.1274, -0.0879, -0.0172,
         -0.0046,  0.0452, -0.2197,  0.4356, -0.4475, -0.0584, -0.1368,  0.3405,
         -0.1119,  0.1144, -0.2544,  0.0278, -0.2958,  0.2007,  0.4595,  0.1803,
         -0.4099,  0.1310,  0.1039, -0.0387, -0.2047,  0.2671, -0.4333, -0.0341,
         -0.3014,  0.1151, -0.0372, -0.0931,  0.2631,  0.1402, -0.5258,  0.1180]],
       device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
319000 正交保障 tensor(0.2073, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0895,  0.6516, -0.4895, -0.0049, -0.3603, -0.4563,  0.2258,  1.1082,
          1.0276, -0.7097, -0.2454,  0.7969,  0.2967, -0.1415, -0.0749,  0.0346,
          0.0338, -0.1307,  0.0795, -0.1299, -0.0531, -0.2320, -0.1432, -0.0355,
         -0.0280, -0.0574, -0.0114,  0.2368, -0.0438, -0.0495,  0.0593, -0.0521,
         -0.0475, -0.0249,  0.0765, -0.0161,  0.0750, -0.1296, -0.0853, -0.0127,
          0.0012,  0.0391, -0.2204,  0.4356, -0.4472, -0.0539, -0.1378,  0.3431,
         -0.1150,  0.1153, -0.2570,  0.0305, -0.2888,  0.1974,  0.4590,  0.1657,
         -0.4207,  0.1325,  0.0937, -0.0390, -0.2015,  0.2604, -0.4280, -0.0369,
         -0.3082,  0.1006, -0.0440, -0.0963,  0.2564,  0.1491, -0.4898,  0.1367]],
       device='cuda:0') tensor(0.2073, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
320000 特征值优化 tensor(0.6669, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0974,  0.6440, -0.4882, -0.0084, -0.3525, -0.4501,  0.2324,  1.1058,
          1.0270, -0.7185, -0.2434,  0.7849,  0.2950, -0.1390, -0.0695,  0.0329,
          0.0390, -0.1371,  0.0783, -0.1267, -0.0537, -0.2324, -0.1282, -0.0419,
         -0.0221, -0.0592, -0.0441,  0.2163, -0.0402, -0.0507,  0.0634, -0.0402,
         -0.0475, -0.0242,  0.0756, -0.0208,  0.0775, -0.1269, -0.0820, -0.0135,
          0.0033,  0.0385, -0.2221,  0.4411, -0.4451, -0.0485, -0.1353,  0.3402,
         -0.1106,  0.1183, -0.2497,  0.0302, -0.2762,  0.1914,  0.4571,  0.1670,
         -0.3950,  0.1212,  0.0721, -0.0371, -0.2022,  0.2619, -0.4388, -0.0298,
         -0.3196,  0.1154, -0.0387, -0.1004,  0.2571,  0.1518, -0.4960,  0.1318]],
       device='cuda:0') tensor(0.2045, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
321000 特征值优化 tensor(0.6338, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1005,  0.6395, -0.4860, -0.0195, -0.3476, -0.4276,  0.2289,  1.1072,
          1.0237, -0.7030, -0.2643,  0.7961,  0.2970, -0.1614, -0.0792,  0.0063,
          0.0712, -0.1214,  0.0679, -0.1272, -0.0533, -0.2321, -0.0944, -0.0630,
          0.0029, -0.0073, -0.0143,  0.1978, -0.0431, -0.0513,  0.0684, -0.0312,
         -0.0590, -0.0333,  0.0464, -0.0355,  0.0758, -0.1310, -0.0830, -0.0179,
         -0.0041,  0.0423, -0.2158,  0.4364, -0.4508, -0.0489, -0.1385,  0.3342,
         -0.1066,  0.1211, -0.2420,  0.0241, -0.2845,  0.2062,  0.4497,  0.1876,
         -0.3881,  0.1308,  0.0606, -0.0605, -0.1985,  0.2590, -0.4560, -0.0259,
         -0.3237,  0.1390, -0.0171, -0.1101,  0.2505,  0.1493, -0.5105,  0.0990]],
       device='cuda:0') tensor(0.2040, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
322000 特征值优化 tensor(0.6220, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.5546e-02,  6.4424e-01, -5.0271e-01, -9.4090e-04, -3.5187e-01,
         -4.3033e-01,  2.3853e-01,  1.1114e+00,  1.0543e+00, -7.1347e-01,
         -2.7245e-01,  7.8881e-01,  2.9612e-01, -1.5707e-01, -7.7262e-02,
         -9.0835e-03,  7.5252e-02, -1.1447e-01,  4.9638e-02, -1.2532e-01,
         -5.3894e-02, -2.3282e-01, -9.3766e-02, -1.1014e-01,  1.1336e-03,
          4.1250e-02, -9.0750e-03,  2.0769e-01, -4.9153e-02, -4.9980e-02,
          6.8966e-02, -2.0033e-02, -7.6786e-02, -3.1679e-02,  2.1634e-02,
         -6.1232e-02,  7.6553e-02, -1.3073e-01, -8.9259e-02, -1.8021e-02,
         -6.5859e-03,  4.9261e-02, -2.1468e-01,  4.3411e-01, -4.4880e-01,
         -4.4072e-02, -1.4080e-01,  3.4487e-01, -1.1736e-01,  1.2310e-01,
         -2.4208e-01,  2.0880e-02, -2.8747e-01,  2.0183e-01,  4.4945e-01,
          2.0054e-01, -4.0181e-01,  1.3555e-01,  4.6073e-02, -7.8058e-02,
         -1.8255e-01,  2.5285e-01, -4.5907e-01, -2.3542e-02, -3.2904e-01,
          1.2545e-01, -3.7546e-02, -9.0755e-02,  2.4631e-01,  1.5001e-01,
         -4.9456e-01,  1.0624e-01]], device='cuda:0') tensor(0.2060, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
323000 特征值优化 tensor(0.6243, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-9.9606e-02,  6.3848e-01, -4.9901e-01, -5.9511e-03, -3.5430e-01,
         -4.4104e-01,  2.4000e-01,  1.1023e+00,  1.0551e+00, -6.9558e-01,
         -2.6788e-01,  7.7942e-01,  2.9622e-01, -1.6039e-01, -6.7996e-02,
         -9.0116e-04,  7.4526e-02, -1.1054e-01,  6.3579e-02, -1.2682e-01,
         -5.3572e-02, -2.3279e-01, -9.3375e-02, -9.1271e-02,  6.4367e-03,
          3.5051e-02, -7.3995e-03,  2.1237e-01, -4.6228e-02, -4.9977e-02,
          7.1029e-02, -2.2508e-02, -7.6417e-02, -2.9381e-02,  1.6384e-02,
         -6.0015e-02,  7.5534e-02, -1.3149e-01, -8.8778e-02, -2.0883e-02,
         -6.6764e-03,  4.8351e-02, -2.1617e-01,  4.3625e-01, -4.4814e-01,
         -4.0823e-02, -1.4167e-01,  3.4261e-01, -1.1083e-01,  1.1943e-01,
         -2.4452e-01,  2.3775e-02, -2.6936e-01,  1.9451e-01,  4.4704e-01,
          1.9576e-01, -3.9691e-01,  1.2937e-01,  6.5220e-02, -7.6595e-02,
         -1.9147e-01,  2.5035e-01, -4.6140e-01, -2.2722e-02, -3.1738e-01,
          1.3045e-01, -3.8025e-02, -9.1979e-02,  2.3753e-01,  1.6045e-01,
         -5.1436e-01,  1.0739e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
324000 特征值优化 tensor(0.6253, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0965,  0.6448, -0.4918, -0.0122, -0.3558, -0.4349,  0.2347,  1.1115,
          1.0631, -0.6941, -0.2669,  0.7775,  0.2965, -0.1542, -0.0788, -0.0040,
          0.0737, -0.1139,  0.0609, -0.1262, -0.0537, -0.2325, -0.1002, -0.0879,
          0.0080,  0.0194, -0.0193,  0.2019, -0.0450, -0.0497,  0.0691, -0.0251,
         -0.0691, -0.0317,  0.0250, -0.0401,  0.0737, -0.1309, -0.0928, -0.0233,
         -0.0036,  0.0520, -0.2161,  0.4356, -0.4503, -0.0454, -0.1403,  0.3383,
         -0.1156,  0.1255, -0.2406,  0.0249, -0.2854,  0.1998,  0.4502,  0.1993,
         -0.4137,  0.1384,  0.0644, -0.0875, -0.1870,  0.2604, -0.4571, -0.0238,
         -0.3159,  0.1293, -0.0180, -0.0975,  0.2444,  0.1450, -0.4921,  0.0933]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
325000 特征值优化 tensor(0.6375, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1022,  0.6373, -0.4858, -0.0200, -0.3437, -0.4211,  0.2238,  1.1058,
          1.0581, -0.6906, -0.2643,  0.7652,  0.2975, -0.1562, -0.0768,  0.0143,
          0.0635, -0.1246,  0.0755, -0.1279, -0.0519, -0.2327, -0.0972, -0.0494,
         -0.0093, -0.0245, -0.0205,  0.2010, -0.0406, -0.0515,  0.0682, -0.0338,
         -0.0555, -0.0350,  0.0363, -0.0259,  0.0737, -0.1323, -0.0920, -0.0241,
         -0.0038,  0.0503, -0.2172,  0.4358, -0.4507, -0.0556, -0.1367,  0.3336,
         -0.1115,  0.1258, -0.2450,  0.0258, -0.2813,  0.2046,  0.4476,  0.1908,
         -0.4008,  0.1386,  0.0643, -0.0445, -0.1969,  0.2601, -0.4580, -0.0245,
         -0.3209,  0.1396,  0.0083, -0.1120,  0.2475,  0.1488, -0.4907,  0.0895]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
326000 特征值优化 tensor(0.6740, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0954,  0.6445, -0.4919, -0.0093, -0.3254, -0.4460,  0.2202,  1.1069,
          1.0889, -0.7023, -0.2559,  0.7586,  0.2939, -0.1470, -0.0886,  0.0319,
          0.0336, -0.1251,  0.0908, -0.1270, -0.0561, -0.2321, -0.1319, -0.0302,
         -0.0259, -0.0645, -0.0241,  0.2225, -0.0398, -0.0487,  0.0672, -0.0412,
         -0.0445, -0.0279,  0.0744, -0.0072,  0.0765, -0.1300, -0.0863, -0.0208,
         -0.0013,  0.0430, -0.2183,  0.4417, -0.4426, -0.0554, -0.1297,  0.3439,
         -0.1098,  0.1147, -0.2529,  0.0288, -0.2918,  0.2017,  0.4538,  0.1808,
         -0.4261,  0.1354,  0.0979, -0.0291, -0.1948,  0.2643, -0.4433, -0.0303,
         -0.3020,  0.1266, -0.0064, -0.1061,  0.2570,  0.1409, -0.5055,  0.1051]],
       device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
327000 特征值优化 tensor(0.6217, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0923,  0.6501, -0.4887, -0.0108, -0.3487, -0.4545,  0.2210,  1.1180,
          1.0979, -0.7064, -0.2393,  0.7174,  0.2971, -0.1429, -0.0837,  0.0355,
          0.0311, -0.1319,  0.0816, -0.1288, -0.0525, -0.2322, -0.1387, -0.0404,
         -0.0309, -0.0644, -0.0289,  0.2229, -0.0400, -0.0497,  0.0618, -0.0542,
         -0.0432, -0.0256,  0.0858, -0.0037,  0.0747, -0.1294, -0.0769, -0.0176,
          0.0028,  0.0330, -0.2206,  0.4369, -0.4492, -0.0536, -0.1388,  0.3439,
         -0.1138,  0.1172, -0.2549,  0.0308, -0.2883,  0.1994,  0.4702,  0.1656,
         -0.4254,  0.1356,  0.0978, -0.0337, -0.2038,  0.2699, -0.4367, -0.0328,
         -0.2998,  0.1144, -0.0211, -0.1065,  0.2589,  0.1400, -0.4908,  0.1154]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
328000 特征值优化 tensor(0.6223, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0895,  0.6537, -0.4910, -0.0080, -0.3269, -0.4521,  0.2155,  1.1091,
          1.1113, -0.7167, -0.2527,  0.7175,  0.2966, -0.1498, -0.1029,  0.0363,
          0.0272, -0.1224,  0.0949, -0.1310, -0.0534, -0.2326, -0.1374, -0.0518,
         -0.0141, -0.0454, -0.0197,  0.2099, -0.0441, -0.0499,  0.0657, -0.0497,
         -0.0476, -0.0268,  0.0775, -0.0125,  0.0760, -0.1303, -0.0754, -0.0187,
         -0.0019,  0.0332, -0.2207,  0.4375, -0.4480, -0.0587, -0.1364,  0.3433,
         -0.1152,  0.1182, -0.2502,  0.0272, -0.2988,  0.2061,  0.4627,  0.1774,
         -0.4177,  0.1326,  0.0914, -0.0402, -0.1936,  0.2626, -0.4375, -0.0336,
         -0.3108,  0.1236, -0.0188, -0.1043,  0.2575,  0.1391, -0.4999,  0.1063]],
       device='cuda:0') tensor(0.2161, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
329000 特征值优化 tensor(0.6220, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.8150e-02,  6.5462e-01, -4.9345e-01, -1.1722e-02, -3.2779e-01,
         -4.5261e-01,  2.1275e-01,  1.1118e+00,  1.1144e+00, -7.0889e-01,
         -2.5177e-01,  7.2414e-01,  2.9627e-01, -1.5087e-01, -9.7828e-02,
          3.9114e-02,  2.7219e-02, -1.2300e-01,  9.4884e-02, -1.3216e-01,
         -5.3427e-02, -2.3204e-01, -1.4035e-01, -3.5396e-02, -1.9876e-02,
         -5.8226e-02, -1.8459e-02,  2.1782e-01, -4.3076e-02, -4.9541e-02,
          6.5856e-02, -4.9283e-02, -4.3914e-02, -2.6205e-02,  8.4916e-02,
         -9.7358e-03,  7.3104e-02, -1.3160e-01, -7.6899e-02, -2.4203e-02,
          4.9997e-04,  3.6110e-02, -2.2177e-01,  4.3693e-01, -4.4781e-01,
         -6.0984e-02, -1.3537e-01,  3.4409e-01, -1.1332e-01,  1.1564e-01,
         -2.5037e-01,  2.8034e-02, -2.9357e-01,  2.0443e-01,  4.6560e-01,
          1.7288e-01, -4.1897e-01,  1.3258e-01,  1.0999e-01, -3.8537e-02,
         -1.9555e-01,  2.6638e-01, -4.4008e-01, -3.3177e-02, -3.0025e-01,
          1.3673e-01, -7.1265e-03, -1.0228e-01,  2.5651e-01,  1.3591e-01,
         -5.1695e-01,  9.1603e-02]], device='cuda:0') tensor(0.2057, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
330000 特征值优化 tensor(0.6258, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0865,  0.6513, -0.4829, -0.0071, -0.3454, -0.4631,  0.2152,  1.0999,
          1.1134, -0.6942, -0.2549,  0.6973,  0.2961, -0.1592, -0.0924,  0.0363,
          0.0373, -0.1111,  0.0907, -0.1281, -0.0540, -0.2325, -0.1335, -0.0503,
         -0.0141, -0.0209, -0.0164,  0.1969, -0.0435, -0.0496,  0.0629, -0.0335,
         -0.0617, -0.0211,  0.0613, -0.0420,  0.0840, -0.1291, -0.0795, -0.0246,
         -0.0116,  0.0394, -0.2201,  0.4371, -0.4487, -0.0551, -0.1367,  0.3389,
         -0.1153,  0.1235, -0.2503,  0.0284, -0.2478,  0.1811,  0.4654,  0.1891,
         -0.4089,  0.1256,  0.1103, -0.0344, -0.2049,  0.2537, -0.4568, -0.0257,
         -0.3046,  0.1377, -0.0228, -0.0984,  0.2551,  0.1578, -0.5281,  0.1075]],
       device='cuda:0') tensor(0.2054, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
331000 特征值优化 tensor(0.6256, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0884,  0.6509, -0.4839, -0.0085, -0.3372, -0.4534,  0.2132,  1.1101,
          1.1204, -0.6866, -0.2546,  0.6937,  0.2964, -0.1511, -0.0925,  0.0371,
          0.0336, -0.1251,  0.0922, -0.1295, -0.0535, -0.2320, -0.1316, -0.0601,
         -0.0131, -0.0180, -0.0040,  0.1945, -0.0400, -0.0498,  0.0652, -0.0432,
         -0.0558, -0.0279,  0.0519, -0.0342,  0.0753, -0.1309, -0.0832, -0.0241,
         -0.0020,  0.0436, -0.2210,  0.4364, -0.4480, -0.0563, -0.1371,  0.3397,
         -0.1141,  0.1202, -0.2538,  0.0299, -0.2853,  0.2003,  0.4620,  0.1804,
         -0.4007,  0.1244,  0.1239, -0.0435, -0.1936,  0.2601, -0.4426, -0.0318,
         -0.3207,  0.1366, -0.0106, -0.1034,  0.2513,  0.1471, -0.5025,  0.1015]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
332000 特征值优化 tensor(0.6176, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0932,  0.6493, -0.5150,  0.0112, -0.3526, -0.4400,  0.2340,  1.1138,
          1.1483, -0.6957, -0.2688,  0.7009,  0.2964, -0.1578, -0.0852, -0.0225,
          0.0720, -0.1154,  0.0367, -0.1260, -0.0535, -0.2331, -0.0820, -0.1230,
         -0.0157,  0.0435, -0.0135,  0.2078, -0.0556, -0.0501,  0.0684, -0.0145,
         -0.0846, -0.0291,  0.0125, -0.0624,  0.0753, -0.1311, -0.0906, -0.0265,
         -0.0047,  0.0508, -0.2177,  0.4352, -0.4475, -0.0449, -0.1419,  0.3503,
         -0.1180,  0.1224, -0.2452,  0.0188, -0.2956,  0.2046,  0.4477,  0.1997,
         -0.4341,  0.1474,  0.0413, -0.1122, -0.1663,  0.2459, -0.4576, -0.0252,
         -0.3283,  0.1277, -0.0279, -0.0871,  0.2389,  0.1528, -0.4699,  0.0894]],
       device='cuda:0') tensor(0.2090, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
333000 特征值优化 tensor(0.6224, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1037,  0.6350, -0.5001,  0.0017, -0.3575, -0.4286,  0.2356,  1.1171,
          1.1524, -0.6890, -0.2632,  0.6980,  0.2963, -0.1591, -0.0681,  0.0070,
          0.0655, -0.1057,  0.0674, -0.1228, -0.0538, -0.2328, -0.0919, -0.1185,
         -0.0118,  0.0417, -0.0205,  0.2004, -0.0491, -0.0502,  0.0710, -0.0191,
         -0.0792, -0.0316,  0.0136, -0.0631,  0.0779, -0.1300, -0.0856, -0.0275,
         -0.0070,  0.0461, -0.2096,  0.4321, -0.4461, -0.0324, -0.1440,  0.3433,
         -0.1179,  0.1246, -0.2436,  0.0210, -0.2855,  0.2016,  0.4440,  0.2062,
         -0.4125,  0.1409,  0.0424, -0.0805, -0.1792,  0.2549, -0.4613, -0.0227,
         -0.3220,  0.1384, -0.0269, -0.0872,  0.2430,  0.1465, -0.4922,  0.0872]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
334000 特征值优化 tensor(0.6216, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0964,  0.6416, -0.5059,  0.0112, -0.3557, -0.4363,  0.2355,  1.1138,
          1.1526, -0.6775, -0.2626,  0.6711,  0.2961, -0.1585, -0.0662,  0.0051,
          0.0682, -0.1070,  0.0669, -0.1229, -0.0544, -0.2327, -0.0874, -0.1280,
         -0.0069,  0.0430, -0.0186,  0.1843, -0.0520, -0.0500,  0.0703, -0.0181,
         -0.0821, -0.0305,  0.0131, -0.0693,  0.0782, -0.1299, -0.0898, -0.0288,
         -0.0073,  0.0499, -0.2123,  0.4334, -0.4466, -0.0354, -0.1434,  0.3481,
         -0.1214,  0.1253, -0.2473,  0.0200, -0.2858,  0.2033,  0.4471,  0.2051,
         -0.3993,  0.1325,  0.0435, -0.0693, -0.1760,  0.2489, -0.4621, -0.0230,
         -0.3270,  0.1381, -0.0498, -0.0774,  0.2402,  0.1529, -0.4970,  0.0978]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
335000 特征值优化 tensor(0.6186, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0974,  0.6410, -0.5027,  0.0145, -0.3530, -0.4365,  0.2324,  1.1140,
          1.1707, -0.6968, -0.2667,  0.6745,  0.2961, -0.1562, -0.0845, -0.0212,
          0.0742, -0.1170,  0.0394, -0.1270, -0.0536, -0.2332, -0.0839, -0.1219,
         -0.0198,  0.0573, -0.0052,  0.2054, -0.0532, -0.0504,  0.0670, -0.0159,
         -0.0829, -0.0294,  0.0138, -0.0737,  0.0786, -0.1295, -0.0884, -0.0290,
         -0.0070,  0.0484, -0.2155,  0.4348, -0.4471, -0.0419, -0.1412,  0.3445,
         -0.1175,  0.1208, -0.2476,  0.0192, -0.2953,  0.2027,  0.4435,  0.2039,
         -0.4161,  0.1395,  0.0407, -0.0958, -0.1710,  0.2478, -0.4612, -0.0234,
         -0.3271,  0.1308, -0.0268, -0.0854,  0.2393,  0.1539, -0.4931,  0.0977]],
       device='cuda:0') tensor(0.2124, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
336000 特征值优化 tensor(15.5936, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.1195e-03, -3.5757e-02,  8.5928e-01,  1.0098e-01, -3.0764e-01,
         -1.2676e+00, -4.9674e-01,  7.7329e-01,  7.7875e-01, -4.1183e-01,
         -5.6346e-01, -4.9563e-02, -1.6640e+00, -3.7041e-01, -6.4161e-03,
         -8.3586e-04,  4.6045e-02, -4.5521e-01, -1.1507e-01, -1.1007e-03,
         -1.6492e-01, -7.3838e-01, -2.8594e-01,  1.8840e-02, -3.3573e-03,
         -2.1505e-01, -2.6236e-03,  9.3219e-02,  1.9954e-02,  2.0805e-01,
         -2.4669e-04,  5.6822e-03,  2.1717e+00, -1.3584e+00,  4.3493e-02,
          1.8949e-02,  1.6190e-01, -4.9066e-02,  2.9708e-01,  1.7134e-02,
         -4.3996e-01,  2.7233e-01, -2.0525e-01, -1.8140e-01,  2.1465e-01,
          7.7524e-01, -6.2656e-01, -5.8504e-01,  3.2967e-01, -7.9349e-01,
         -1.5859e+00, -4.6009e-01,  3.1102e-01,  3.7281e-02,  1.5828e-01,
          8.6810e-01,  4.1253e-01,  2.0482e-01,  1.0646e-01, -5.6783e-01,
          2.4951e-01,  1.6368e-01, -1.0870e+00,  1.6719e-01, -6.1470e-01,
          2.0144e-01, -1.4740e-01, -1.4124e-01, -6.0443e-02, -8.9649e-02,
          5.0361e-02,  2.1525e-02]], device='cuda:0') tensor(0.2045, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
337000 特征值优化 tensor(5.4910, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.6187e-01,  8.3997e-02,  3.7332e-01,  3.6455e-01, -5.4353e-01,
         -5.9702e-01, -1.8832e-01,  9.8860e-01,  5.1802e-01, -1.7450e-01,
         -3.8492e-01, -1.5727e-01, -6.1076e-01, -1.3427e-01, -4.5574e-02,
          3.6789e-02,  5.5944e-02, -1.1208e-01, -3.6262e-02,  9.8849e-03,
         -4.8854e-02, -2.0343e-01, -3.1296e-03,  4.2798e-02, -2.7147e-02,
         -3.4102e-02, -3.8470e-02, -9.9079e-03, -2.2942e-02,  2.1120e-02,
          2.2922e-01, -1.7691e-03,  1.1083e+00, -4.9208e-01,  1.8287e-04,
         -4.1289e-02,  1.7377e-01,  7.2299e-03,  2.1200e-01,  7.8614e-02,
          7.7333e-02,  2.6163e-01, -2.6565e-01,  2.4529e-02,  1.5210e-01,
          1.3222e-01, -2.1880e-01, -4.2563e-01,  6.3735e-01, -3.4775e-01,
         -9.5133e-01, -1.2150e-01,  6.5335e-02, -1.1261e-02, -1.0421e-01,
          3.7669e-01,  2.2256e-01,  1.3968e-01,  1.2449e-01, -2.0527e-01,
          1.8792e-01,  1.5277e-01, -5.7830e-01,  5.7547e-02, -5.1746e-01,
          6.2943e-02, -3.8615e-02, -1.1638e-01, -5.0235e-03,  6.3010e-02,
          6.5881e-03,  4.6698e-02]], device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
338000 特征值优化 tensor(0.7021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2678,  0.0835,  0.0880,  0.3808, -0.3511, -0.1346, -0.5825,  0.8698,
          0.3263, -0.0956,  0.0226, -0.2335, -0.2407,  0.0474, -0.0200,  0.0169,
          0.1572, -0.0462,  0.2419,  0.1000, -0.0486, -0.0740,  0.1043,  0.2478,
         -0.0983, -0.1327, -0.0824, -0.0148, -0.0451,  0.0482,  0.2358, -0.0631,
          0.2428, -0.1542, -0.0320, -0.0424,  0.1830,  0.0266,  0.2498,  0.0836,
          0.0907,  0.2279, -0.2357, -0.0771,  0.2239,  0.1086, -0.1946, -0.1895,
          0.4190, -0.1638, -0.5842, -0.0311, -0.1020,  0.0326,  0.0130,  0.5945,
          0.1223,  0.1080,  0.0395, -0.2355,  0.4064,  0.1840, -0.4761,  0.0082,
         -0.5274,  0.0352, -0.0466, -0.1142, -0.2053,  0.0236,  0.0826,  0.0986]],
       device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
339000 特征值优化 tensor(0.6728, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1975,  0.1528,  0.0538,  0.2984, -0.2228, -0.0956, -0.5378,  1.0959,
          0.3902, -0.2235,  0.0946, -0.3244, -0.2369,  0.0373, -0.1001,  0.0458,
          0.0514, -0.0526,  0.2272,  0.1211, -0.0472, -0.0718,  0.1339,  0.2148,
         -0.1166, -0.2046, -0.0814, -0.0834, -0.0730,  0.0462,  0.2529,  0.0052,
          0.1818, -0.1601, -0.0345, -0.0394,  0.1736,  0.0327,  0.2344,  0.0909,
          0.0841,  0.2382, -0.2078, -0.0770,  0.2330,  0.0385, -0.1745, -0.1961,
          0.4215, -0.1405, -0.5281, -0.0406, -0.2767,  0.1052, -0.1765,  0.5527,
          0.0669,  0.1213,  0.1180, -0.2269,  0.3731,  0.1348, -0.3809, -0.0516,
         -0.5610,  0.0583, -0.0524, -0.0749, -0.0963, -0.0072,  0.1128,  0.0807]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
340000 特征值优化 tensor(0.6693, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2051,  0.1348,  0.0404,  0.3027, -0.2535, -0.0472, -0.5079,  1.0690,
          0.3604, -0.2214,  0.0799, -0.3149, -0.2346,  0.0537, -0.0956,  0.0266,
          0.0896, -0.0500,  0.2360,  0.1292, -0.0455, -0.0705,  0.1282,  0.2279,
         -0.1335, -0.2131, -0.0793, -0.1293, -0.0765,  0.0467,  0.2536,  0.0272,
          0.1571, -0.1597, -0.0329, -0.0412,  0.1748,  0.0345,  0.2404,  0.0833,
          0.0869,  0.2315, -0.2067, -0.0837,  0.2382,  0.0371, -0.1693, -0.1922,
          0.4264, -0.1471, -0.5244, -0.0457, -0.2936,  0.1347, -0.1354,  0.5595,
          0.0383,  0.1252,  0.1389, -0.2155,  0.3593,  0.1378, -0.3150, -0.0930,
         -0.5545,  0.0511, -0.0522, -0.0891, -0.0504, -0.0379,  0.1252,  0.0785]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
341000 特征值优化 tensor(0.6692, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2084,  0.1350,  0.0410,  0.3022, -0.2565, -0.0471, -0.4986,  1.0551,
          0.3586, -0.2194,  0.0755, -0.3130, -0.2339,  0.0513, -0.1005,  0.0265,
          0.0870, -0.0567,  0.2375,  0.1311, -0.0449, -0.0708,  0.1280,  0.2282,
         -0.1346, -0.2139, -0.0786, -0.1298, -0.0770,  0.0470,  0.2532,  0.0292,
          0.1524, -0.1596, -0.0334, -0.0412,  0.1777,  0.0326,  0.2409,  0.0832,
          0.0869,  0.2311, -0.2065, -0.0852,  0.2401,  0.0351, -0.1668, -0.1924,
          0.4276, -0.1481, -0.5241, -0.0457, -0.3043,  0.1422, -0.1309,  0.5585,
          0.0385,  0.1251,  0.1358, -0.2167,  0.3645,  0.1392, -0.3005, -0.1026,
         -0.5534,  0.0500, -0.0523, -0.0904, -0.0404, -0.0448,  0.1252,  0.0783]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
342000 特征值优化 tensor(0.6692, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2094,  0.1350,  0.0407,  0.3020, -0.2561, -0.0456, -0.4974,  1.0526,
          0.3586, -0.2200,  0.0742, -0.3140, -0.2336,  0.0509, -0.1010,  0.0264,
          0.0876, -0.0575,  0.2381,  0.1306, -0.0449, -0.0705,  0.1284,  0.2281,
         -0.1334, -0.2132, -0.0795, -0.1296, -0.0769,  0.0467,  0.2532,  0.0295,
          0.1516, -0.1598, -0.0331, -0.0412,  0.1779,  0.0326,  0.2408,  0.0834,
          0.0862,  0.2309, -0.2068, -0.0851,  0.2399,  0.0360, -0.1666, -0.1923,
          0.4273, -0.1479, -0.5235, -0.0461, -0.3068,  0.1432, -0.1324,  0.5578,
          0.0382,  0.1254,  0.1372, -0.2164,  0.3656,  0.1395, -0.2980, -0.1034,
         -0.5547,  0.0506, -0.0526, -0.0891, -0.0386, -0.0460,  0.1254,  0.0784]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
343000 特征值优化 tensor(0.6692, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2099,  0.1344,  0.0413,  0.3021, -0.2554, -0.0457, -0.4963,  1.0531,
          0.3581, -0.2199,  0.0760, -0.3130, -0.2337,  0.0503, -0.1010,  0.0266,
          0.0879, -0.0577,  0.2378,  0.1308, -0.0447, -0.0704,  0.1278,  0.2279,
         -0.1347, -0.2136, -0.0788, -0.1293, -0.0772,  0.0467,  0.2531,  0.0299,
          0.1515, -0.1601, -0.0329, -0.0410,  0.1778,  0.0326,  0.2408,  0.0837,
          0.0862,  0.2315, -0.2068, -0.0847,  0.2401,  0.0367, -0.1670, -0.1921,
          0.4270, -0.1478, -0.5236, -0.0457, -0.3076,  0.1444, -0.1322,  0.5581,
          0.0383,  0.1258,  0.1373, -0.2168,  0.3640,  0.1403, -0.2981, -0.1032,
         -0.5542,  0.0503, -0.0528, -0.0887, -0.0375, -0.0463,  0.1253,  0.0794]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
344000 特征值优化 tensor(0.6690, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2090,  0.1336,  0.0443,  0.3012, -0.2549, -0.0701, -0.4992,  1.0540,
          0.3615, -0.2213,  0.0759, -0.3131, -0.2337,  0.0505, -0.1005,  0.0263,
          0.0893, -0.0581,  0.2383,  0.1298, -0.0452, -0.0701,  0.1286,  0.2298,
         -0.1352, -0.2126, -0.0778, -0.1289, -0.0767,  0.0462,  0.2528,  0.0305,
          0.1494, -0.1651, -0.0307, -0.0417,  0.1782,  0.0324,  0.2407,  0.0830,
          0.0866,  0.2315, -0.2075, -0.0842,  0.2391,  0.0384, -0.1679, -0.1928,
          0.4262, -0.1452, -0.5234, -0.0460, -0.3159,  0.1480, -0.1379,  0.5552,
          0.0403,  0.1187,  0.1468, -0.2149,  0.3694,  0.1381, -0.2979, -0.1033,
         -0.5595,  0.0526, -0.0519, -0.0904, -0.0299, -0.0508,  0.1262,  0.0790]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
345000 特征值优化 tensor(0.6689, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2096,  0.1350,  0.0440,  0.3016, -0.2542, -0.0699, -0.4992,  1.0548,
          0.3640, -0.2288,  0.0780, -0.3184, -0.2338,  0.0552, -0.1004,  0.0238,
          0.0977, -0.0556,  0.2406,  0.1247, -0.0451, -0.0695,  0.1230,  0.2304,
         -0.1318, -0.2165, -0.0696, -0.1306, -0.0765,  0.0463,  0.2526,  0.0323,
          0.1483, -0.1653, -0.0311, -0.0412,  0.1782,  0.0319,  0.2394,  0.0829,
          0.0864,  0.2319, -0.2085, -0.0797,  0.2359,  0.0496, -0.1734, -0.1908,
          0.4240, -0.1440, -0.5221, -0.0474, -0.3211,  0.1507, -0.1422,  0.5538,
          0.0399,  0.1192,  0.1478, -0.2146,  0.3678,  0.1390, -0.2997, -0.1026,
         -0.5592,  0.0537, -0.0501, -0.0900, -0.0245, -0.0540,  0.1255,  0.0780]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
346000 特征值优化 tensor(6.5322, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0363,  0.6080,  0.3238,  0.0627, -1.3808,  0.1508,  0.1863, -0.1787,
         -0.2413, -0.4286, -1.2506,  1.3912, -0.0497,  0.0545,  0.9955,  0.1881,
         -0.0026, -0.0301, -0.1404, -0.0171, -0.0353,  0.6552,  0.0226,  0.2054,
         -0.1404,  0.0802,  0.1361,  0.1600,  0.0140,  0.0668,  0.2978, -0.2230,
          0.1569, -0.1520,  0.0425, -0.7045, -0.6442,  0.9138, -0.1163,  0.0302,
          0.1225, -0.0120, -1.0925,  0.9385, -0.2504, -0.4996,  0.3374, -0.7917,
         -0.0726,  0.6659,  0.3963, -0.4436, -0.6419,  0.2986, -0.1288,  0.6091,
         -0.0753,  0.1322,  0.0639,  0.6288,  0.0577, -0.4366, -0.1533,  0.5304,
          0.2769,  0.1320,  0.3776,  0.0879,  0.3217, -0.1962, -1.3101,  0.0517]],
       device='cuda:0') tensor(0.2095, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
347000 特征值优化 tensor(0.6589, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9354,  0.6142, -0.2108, -0.3453, -0.8223, -0.2124,  0.1610, -0.2757,
         -0.3300, -0.2487, -1.2809,  0.8809, -0.0138,  0.0888,  0.1528, -0.0715,
         -0.0855,  0.0299,  0.0866, -0.0225,  0.0069,  0.2436, -0.1367,  0.0618,
         -0.0548, -0.0527, -0.0647, -0.1081,  0.1002,  0.0755,  0.0650, -0.0601,
          0.0560, -0.1758,  0.0064, -0.2012, -0.0878,  0.2719, -0.1206,  0.1158,
          0.0890, -0.0082, -0.4891,  0.3732, -0.1073,  0.0530,  0.1169, -0.1353,
         -0.1688,  0.3847,  0.0876, -0.1506,  0.0711,  0.1420,  0.1027,  0.5496,
          0.1347,  0.0997,  0.1422,  0.2373, -0.3283, -0.0454, -0.1818,  0.1705,
          0.2156,  0.0794,  0.0219, -0.0180,  0.5451,  0.1327, -0.5741,  0.0679]],
       device='cuda:0') tensor(0.2034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
348000 特征值优化 tensor(0.6100, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.4828e-01,  6.5858e-01, -2.7246e-01, -4.5772e-01, -8.4619e-01,
         -1.8056e-01,  1.0694e-01, -4.8329e-02, -3.0216e-01, -3.3523e-01,
         -1.1183e+00,  8.7484e-01, -9.5332e-03,  7.4562e-02,  6.5416e-02,
         -1.1274e-01, -5.2427e-02, -3.6137e-03,  9.1748e-02, -2.5805e-02,
          8.9921e-03,  2.3352e-01, -1.4875e-01,  9.2364e-02,  6.5113e-03,
         -4.8218e-02, -6.1770e-02, -1.4005e-01,  7.3886e-02,  6.6848e-02,
          6.3045e-02, -4.9990e-02,  3.0114e-02, -1.7913e-01,  1.0153e-02,
         -1.8406e-01, -7.8839e-02,  2.4762e-01, -1.2494e-01,  1.0987e-01,
          6.8212e-02,  8.5746e-04, -4.3577e-01,  3.0084e-01, -8.8944e-02,
          1.0066e-01,  9.0181e-02, -1.2946e-01, -1.5198e-01,  3.4306e-01,
          2.8208e-02, -1.1108e-01,  4.9428e-02,  1.5668e-01,  2.4732e-01,
          4.5015e-01,  9.0672e-02,  1.1644e-01,  1.1056e-01,  2.4809e-01,
         -6.5655e-01,  1.7733e-02, -3.3789e-01,  1.4507e-01,  1.6344e-01,
          9.2245e-02, -4.6060e-02,  2.8046e-02,  7.8247e-01,  1.0491e-01,
         -4.5660e-01,  2.6491e-02]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
349000 特征值优化 tensor(0.6029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6400e-01,  7.4663e-01, -2.5989e-01, -4.5366e-01, -8.9629e-01,
         -1.5782e-01,  5.4125e-02,  1.4911e-03, -3.2881e-01, -4.4791e-01,
         -1.0623e+00,  9.0080e-01, -1.0441e-02, -9.5392e-02,  1.0750e-01,
         -4.1114e-02, -1.0267e-01, -6.1547e-02,  7.7737e-02,  4.4504e-02,
          9.4294e-03,  2.3387e-01, -6.3461e-02,  1.2181e-01,  3.1908e-02,
         -8.9842e-02, -5.4977e-02, -1.8831e-01,  7.1425e-02,  6.6305e-02,
          6.1927e-02, -2.2014e-02,  6.3691e-02, -1.8586e-01,  3.3994e-02,
         -1.6604e-01, -6.8732e-02,  2.4223e-01, -9.7458e-02,  1.2111e-01,
          5.9299e-02, -2.0966e-02, -4.4694e-01,  2.8388e-01, -7.8446e-02,
          5.2347e-02,  9.8652e-02, -1.4581e-01, -1.2518e-01,  3.3859e-01,
          1.0618e-02, -1.0112e-01,  8.2416e-02,  1.5086e-01,  2.3610e-01,
          4.4517e-01,  1.5259e-02,  1.6295e-01,  1.7228e-01,  2.1728e-01,
         -6.6590e-01,  1.1242e-02, -3.5287e-01,  1.4005e-01,  1.8245e-01,
          5.6382e-02, -3.3773e-04,  1.3726e-02,  7.6486e-01,  1.2545e-01,
         -3.5360e-01,  1.0525e-02]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
350000 特征值优化 tensor(0.5854, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0016,  0.7150, -0.2800, -0.4714, -0.8658, -0.1697, -0.1390,  0.0391,
         -0.3434, -0.4550, -0.8248,  0.8250, -0.0107,  0.0095,  0.0445, -0.0064,
         -0.1310, -0.1121,  0.1292, -0.0042,  0.0078,  0.2383, -0.0768,  0.0832,
          0.0312, -0.1031, -0.0928, -0.1812,  0.0079,  0.0645,  0.0547, -0.0403,
          0.0658, -0.1894,  0.0430, -0.1447, -0.0584,  0.2067, -0.0911,  0.1101,
          0.0488, -0.0140, -0.4749,  0.3189, -0.1087,  0.0203,  0.1214, -0.1903,
         -0.0053,  0.2586, -0.2122,  0.0153, -0.1004,  0.2294,  0.2771,  0.3662,
          0.0248,  0.1641,  0.1509,  0.2076, -0.5702, -0.0837, -0.2384,  0.0561,
          0.1335,  0.0496, -0.0427,  0.0467,  0.8877,  0.1050, -0.2853,  0.0097]],
       device='cuda:0') tensor(0.2032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
351000 特征值优化 tensor(0.5736, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9653,  0.6810, -0.2662, -0.4670, -0.9105, -0.1845, -0.2344,  0.0436,
         -0.4049, -0.6526, -0.7357,  0.9570, -0.0104, -0.0135,  0.0103,  0.0078,
         -0.1337, -0.1100,  0.1537, -0.0302,  0.0074,  0.2409, -0.0425,  0.1121,
          0.0693, -0.1284, -0.1190, -0.1372, -0.0169,  0.0681,  0.0511, -0.0269,
          0.0757, -0.1903,  0.0528, -0.1067, -0.0496,  0.1827, -0.0815,  0.0924,
          0.0438, -0.0223, -0.4584,  0.3500, -0.1362,  0.0046,  0.1380, -0.1976,
         -0.0152,  0.2791, -0.1692, -0.0087, -0.0437,  0.2020,  0.2873,  0.3406,
          0.0413,  0.1564,  0.1216,  0.1873, -0.5777, -0.0918, -0.2310,  0.0430,
          0.0734,  0.0184, -0.0222,  0.0633,  0.9042,  0.1115, -0.3097,  0.0535]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
352000 特征值优化 tensor(0.5645, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0045e+00,  7.0335e-01, -2.7840e-01, -4.7286e-01, -8.6151e-01,
         -1.8217e-01, -2.5911e-01,  6.4166e-03, -3.8967e-01, -7.8040e-01,
         -6.8218e-01,  9.0374e-01, -9.6403e-03, -5.0785e-02,  3.1756e-03,
         -1.9677e-02, -9.6762e-02, -1.0099e-01,  1.5415e-01, -2.5338e-02,
          6.1693e-03,  2.3806e-01, -4.0922e-02,  1.1995e-01,  9.2177e-02,
         -3.9764e-02, -6.1143e-02, -1.1949e-01,  1.2073e-02,  6.3747e-02,
          6.3150e-02, -1.5768e-02,  9.1484e-02, -1.8521e-01,  1.0240e-01,
          2.0263e-02, -4.5448e-02,  1.6945e-01, -6.3492e-02,  5.9880e-02,
          3.8002e-02, -4.7685e-02, -4.7892e-01,  3.5258e-01, -1.3623e-01,
          3.9551e-04,  1.2873e-01, -1.9878e-01, -4.9472e-03,  2.6895e-01,
         -1.7801e-01, -5.8908e-03,  1.4313e-02,  1.8018e-01,  2.8547e-01,
          3.1765e-01,  1.2383e-01,  1.2069e-01,  6.1332e-02,  6.7798e-02,
         -5.9033e-01, -1.0170e-01, -2.1821e-01,  4.7055e-02, -2.0915e-01,
          7.2410e-02, -2.1564e-03,  7.6736e-02,  8.7312e-01,  1.3491e-01,
         -1.2676e-01,  5.5476e-02]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
353000 特征值优化 tensor(0.5604, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0044e+00,  6.9416e-01, -2.7558e-01, -4.7182e-01, -8.6193e-01,
         -1.5216e-01, -3.4133e-01,  3.4199e-02, -4.5263e-01, -8.2225e-01,
         -5.4627e-01,  8.8386e-01, -9.0406e-03,  3.3012e-02,  2.3007e-02,
          2.5279e-02, -8.2350e-02, -1.4154e-01,  1.9475e-01, -2.5055e-02,
          5.1413e-03,  2.4183e-01, -1.2349e-02,  1.3098e-01,  2.6808e-02,
         -7.2602e-02, -5.3044e-02, -9.8264e-02, -9.5626e-04,  6.8626e-02,
          6.2889e-02, -9.0333e-03,  9.7840e-02, -1.8322e-01,  4.8616e-02,
         -1.9705e-02, -3.5166e-02,  1.4662e-01, -6.6599e-02,  5.6061e-02,
          3.3710e-02, -6.2461e-02, -4.7989e-01,  3.5717e-01, -1.3646e-01,
          1.2170e-03,  1.2819e-01, -1.8639e-01, -9.4313e-02,  3.5176e-01,
         -1.6692e-01, -5.9185e-03,  2.6278e-02,  1.7435e-01,  3.0445e-01,
          2.8954e-01,  1.2013e-01,  1.1746e-01, -5.6103e-02, -8.4571e-02,
         -5.7754e-01, -1.2396e-01, -2.1661e-01,  5.2196e-02, -2.2387e-01,
          1.2199e-01, -1.7558e-02,  6.3593e-02,  8.4948e-01,  1.5983e-01,
         -1.5926e-01,  2.7223e-02]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
354000 特征值优化 tensor(0.5612, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0049e+00,  6.9711e-01, -3.0327e-01, -4.3832e-01, -8.6561e-01,
         -1.6234e-01, -3.5347e-01,  7.4443e-02, -4.4605e-01, -8.2213e-01,
         -5.2658e-01,  9.0126e-01, -9.3450e-03,  5.6877e-03,  1.7208e-02,
          4.1309e-02, -7.1081e-02, -1.5593e-01,  1.8949e-01, -2.5153e-02,
          5.3915e-03,  2.3735e-01, -3.6314e-02,  1.2840e-01,  2.6177e-02,
         -3.7900e-02, -3.2207e-02, -1.0725e-01, -6.4695e-03,  7.4516e-02,
          6.2459e-02, -8.7208e-03,  9.8049e-02, -1.8369e-01,  3.7742e-02,
          1.2990e-03, -3.2621e-02,  1.4651e-01, -6.1448e-02,  5.0390e-02,
          3.3014e-02, -5.8443e-02, -4.8019e-01,  3.5659e-01, -1.3671e-01,
          7.9176e-04,  1.2926e-01, -1.7401e-01, -1.0214e-01,  3.3651e-01,
         -1.8125e-01,  8.8123e-03,  3.1893e-02,  1.7270e-01,  3.0345e-01,
          2.8631e-01,  1.2434e-01,  1.1643e-01,  6.1583e-02, -3.1923e-02,
         -5.7470e-01, -1.2647e-01, -2.2899e-01,  5.8856e-02, -2.0577e-01,
          1.0302e-01, -3.6042e-02,  7.8524e-02,  8.4411e-01,  1.6613e-01,
         -1.9396e-01,  5.2865e-02]], device='cuda:0') tensor(0.2056, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
355000 特征值优化 tensor(0.5593, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0031e+00,  7.0089e-01, -2.9475e-01, -4.4136e-01, -8.7459e-01,
         -1.5286e-01, -4.4432e-01,  1.9241e-01, -4.3065e-01, -8.0939e-01,
         -4.3386e-01,  8.7388e-01, -8.5174e-03,  2.2335e-03,  1.7308e-02,
          4.0182e-04, -8.1117e-02, -1.5389e-01,  1.9614e-01, -2.6231e-02,
          4.7654e-03,  2.3554e-01, -2.4863e-02,  1.4460e-01,  9.5804e-03,
         -5.6578e-02, -2.3571e-02, -1.2791e-01, -4.0112e-02,  7.3543e-02,
          6.0432e-02, -9.7399e-03,  9.7784e-02, -1.8298e-01,  3.0442e-04,
         -2.4332e-02, -1.2201e-02,  1.0747e-01, -7.8132e-02,  5.9228e-02,
          1.5647e-02, -5.3456e-02, -4.7938e-01,  3.5734e-01, -1.3843e-01,
         -3.3338e-03,  1.3031e-01, -1.7630e-01, -9.0888e-02,  3.2671e-01,
         -1.9813e-01,  1.8985e-02,  2.8448e-02,  1.7181e-01,  3.1831e-01,
          2.6827e-01,  9.4575e-02,  1.3044e-01,  1.6441e-02, -3.1648e-02,
         -5.7449e-01, -1.4883e-01, -2.3520e-01,  8.0094e-02, -2.2187e-01,
          1.4153e-01, -5.6375e-02,  6.5260e-02,  8.3801e-01,  1.9065e-01,
         -1.5392e-01, -2.1061e-04]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
356000 特征值优化 tensor(0.5583, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0023,  0.7016, -0.2853, -0.4465, -0.8772, -0.1654, -0.4486,  0.2258,
         -0.4304, -0.7957, -0.4214,  0.8645, -0.0091, -0.0022,  0.0100,  0.0098,
         -0.0930, -0.1504,  0.1984, -0.0261,  0.0053,  0.2355, -0.0206,  0.1290,
          0.0111, -0.0513, -0.0201, -0.1359, -0.0451,  0.0739,  0.0591, -0.0110,
          0.0974, -0.1837,  0.0243, -0.0090, -0.0078,  0.0945, -0.0921,  0.0713,
          0.0132, -0.0408, -0.4804,  0.3560, -0.1368, -0.0023,  0.1308, -0.1952,
         -0.0695,  0.3307, -0.1788,  0.0042,  0.0306,  0.1691,  0.3276,  0.2614,
          0.1522,  0.1028, -0.0116, -0.0995, -0.5796, -0.1496, -0.2220,  0.0904,
         -0.1976,  0.1473, -0.0664,  0.0661,  0.8344,  0.1979, -0.1702, -0.0100]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
357000 特征值优化 tensor(0.5586, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0033e+00,  6.9968e-01, -2.7368e-01, -4.6010e-01, -8.7531e-01,
         -1.5795e-01, -4.5407e-01,  2.2336e-01, -4.1468e-01, -7.9721e-01,
         -4.1614e-01,  8.8474e-01, -9.1160e-03, -3.8153e-02, -4.7123e-02,
         -2.1553e-02, -8.7760e-02, -1.4916e-01,  1.9669e-01, -2.5235e-02,
          4.6290e-03,  2.4122e-01, -1.3006e-02,  1.2400e-01,  2.9486e-02,
         -7.2975e-02, -2.4644e-02, -1.1829e-01, -2.3733e-03,  6.8181e-02,
          5.9467e-02, -9.7857e-03,  9.6951e-02, -1.8376e-01,  5.5339e-02,
          1.0478e-02, -9.2860e-03,  9.5687e-02, -8.7261e-02,  7.7033e-02,
          1.4610e-02, -4.2341e-02, -4.8012e-01,  3.5789e-01, -1.3891e-01,
         -8.9740e-04,  1.2932e-01, -1.7836e-01, -9.4701e-02,  3.4174e-01,
         -1.9002e-01,  5.7309e-03,  2.6742e-02,  1.7135e-01,  3.2595e-01,
          2.6507e-01,  1.3206e-01,  1.1174e-01,  1.0088e-02, -5.9161e-02,
         -5.7345e-01, -1.5067e-01, -2.3330e-01,  8.5167e-02, -2.3613e-01,
          1.3470e-01, -2.9830e-02,  5.9213e-02,  8.3182e-01,  1.9779e-01,
         -1.5946e-01,  1.6995e-02]], device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
358000 特征值优化 tensor(0.5582, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0038e+00,  6.9964e-01, -2.8096e-01, -4.5770e-01, -8.7604e-01,
         -1.6971e-01, -4.4571e-01,  2.3336e-01, -3.8075e-01, -7.8877e-01,
         -4.2189e-01,  8.7224e-01, -9.0398e-03,  2.0384e-03,  1.0226e-02,
          2.3728e-04, -8.2911e-02, -1.5205e-01,  1.9502e-01, -2.4225e-02,
          4.4879e-03,  2.3938e-01, -1.4618e-02,  1.1740e-01,  3.7313e-02,
         -7.2669e-02, -1.8140e-02, -1.2795e-01, -1.0206e-02,  7.1201e-02,
          5.9638e-02, -1.0357e-02,  9.8292e-02, -1.8544e-01,  6.9156e-02,
          3.7327e-03, -6.9739e-03,  9.4826e-02, -6.3515e-02,  6.7077e-02,
          1.1862e-02, -6.4147e-02, -4.8018e-01,  3.5569e-01, -1.3712e-01,
          9.0192e-05,  1.2821e-01, -1.8622e-01, -9.6289e-02,  3.5600e-01,
         -1.6423e-01, -4.2578e-03,  2.9982e-02,  1.6928e-01,  3.2785e-01,
          2.6155e-01,  1.0314e-01,  1.2713e-01, -9.1228e-02, -1.3801e-01,
         -5.8012e-01, -1.4806e-01, -2.2833e-01,  9.1236e-02, -2.4075e-01,
          9.5905e-02, -1.1428e-02,  9.1326e-02,  8.3861e-01,  1.9323e-01,
         -1.5152e-01,  5.7914e-02]], device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
359000 特征值优化 tensor(0.5583, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0027e+00,  7.0019e-01, -3.0189e-01, -4.3486e-01, -8.5783e-01,
         -1.8439e-01, -4.3576e-01,  2.0493e-01, -3.9424e-01, -7.8638e-01,
         -4.1910e-01,  8.6290e-01, -9.3002e-03, -4.3441e-02, -5.2374e-02,
         -2.3467e-02, -7.9038e-02, -1.5472e-01,  1.9087e-01, -2.5853e-02,
          5.0634e-03,  2.3649e-01, -4.3998e-02,  1.3864e-01,  6.3476e-02,
         -1.2567e-02, -6.1747e-02, -9.0183e-02, -6.4751e-02,  7.5035e-02,
          6.1891e-02, -1.1163e-02,  1.0141e-01, -1.8580e-01,  6.7574e-02,
         -2.7066e-02, -1.0919e-02,  1.0030e-01, -8.0289e-02,  7.0878e-02,
          1.6954e-02, -5.0795e-02, -4.7999e-01,  3.5613e-01, -1.3681e-01,
         -1.2411e-03,  1.3066e-01, -1.9550e-01, -1.3535e-01,  3.8487e-01,
         -1.9086e-01,  1.3577e-02,  5.0854e-02,  1.6355e-01,  3.0813e-01,
          2.5939e-01,  1.0699e-01,  1.2636e-01, -8.9217e-04, -9.3689e-02,
         -5.7826e-01, -1.4546e-01, -2.3158e-01,  8.7526e-02, -2.0811e-01,
          1.2447e-01, -5.3206e-03,  5.5500e-02,  8.2991e-01,  2.0044e-01,
         -1.4422e-01, -1.0934e-03]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
360000 特征值优化 tensor(0.5561, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0005e+00,  7.0100e-01, -2.8819e-01, -4.4537e-01, -8.7161e-01,
         -1.6542e-01, -4.3629e-01,  1.8610e-01, -4.1441e-01, -8.1474e-01,
         -4.3022e-01,  8.6698e-01, -9.7110e-03, -5.6802e-02, -4.0673e-02,
          4.9148e-03, -1.0574e-01, -1.5957e-01,  1.9294e-01, -2.5665e-02,
          5.1467e-03,  2.3617e-01, -2.2865e-02,  1.3260e-01,  7.6790e-02,
          2.9438e-03, -5.7929e-02, -1.0896e-01,  7.1041e-03,  7.5769e-02,
          6.0072e-02, -1.1762e-02,  9.9293e-02, -1.8286e-01,  7.2661e-02,
          2.8306e-03, -1.1704e-02,  9.3597e-02, -4.8825e-02,  4.1572e-02,
          1.7100e-02, -7.6895e-02, -4.8141e-01,  3.5427e-01, -1.3343e-01,
         -6.2267e-04,  1.3040e-01, -2.0240e-01, -1.3106e-01,  3.8845e-01,
         -1.6842e-01,  9.1649e-04,  5.1509e-02,  1.6370e-01,  3.0672e-01,
          2.5409e-01,  1.2906e-01,  1.1479e-01, -3.7341e-04, -3.1896e-02,
         -5.7925e-01, -1.4665e-01, -2.2364e-01,  8.5043e-02, -2.5529e-01,
          1.0433e-01, -1.2824e-02,  6.0233e-02,  8.3812e-01,  2.0002e-01,
         -1.0515e-01,  2.6314e-02]], device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
361000 特征值优化 tensor(0.5545, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0006e+00,  6.9980e-01, -2.8857e-01, -4.4964e-01, -8.6931e-01,
         -1.6046e-01, -4.3041e-01,  2.1477e-01, -4.2405e-01, -7.9566e-01,
         -4.1743e-01,  8.7941e-01, -9.3217e-03, -3.7591e-02, -1.2068e-02,
          2.1602e-02, -1.1045e-01, -1.5497e-01,  1.9533e-01, -2.5759e-02,
          5.2378e-03,  2.3637e-01, -8.7901e-03,  1.3769e-01,  7.6152e-02,
         -6.8944e-04, -5.7652e-02, -9.7244e-02,  2.6865e-02,  7.5693e-02,
          6.1995e-02, -1.1766e-02,  9.9994e-02, -1.8355e-01,  7.4647e-02,
          1.7352e-02, -8.8961e-03,  9.2058e-02, -5.5066e-02,  5.4769e-02,
          1.5444e-02, -7.5346e-02, -4.8118e-01,  3.5498e-01, -1.3456e-01,
         -9.5647e-04,  1.3053e-01, -2.0207e-01, -1.3604e-01,  3.9236e-01,
         -1.7170e-01,  5.0076e-03,  5.5245e-02,  1.6369e-01,  3.0672e-01,
          2.5506e-01,  1.5439e-01,  9.9822e-02, -4.1320e-02,  1.3651e-01,
         -5.8584e-01, -1.4570e-01, -2.2445e-01,  9.2466e-02, -2.2992e-01,
          8.7986e-02, -2.1144e-02,  8.1159e-02,  8.3192e-01,  2.0166e-01,
         -1.6233e-01,  5.7596e-02]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
362000 特征值优化 tensor(0.5572, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0018,  0.7008, -0.2961, -0.4462, -0.8641, -0.1753, -0.4359,  0.2255,
         -0.3834, -0.7698, -0.4146,  0.8764, -0.0092, -0.0331, -0.0126,  0.0077,
         -0.0973, -0.1511,  0.1951, -0.0264,  0.0054,  0.2371, -0.0138,  0.1302,
          0.0796, -0.0097, -0.0591, -0.0989,  0.0218,  0.0751,  0.0617, -0.0127,
          0.1008, -0.1869,  0.0955,  0.0194, -0.0081,  0.0935, -0.0662,  0.0628,
          0.0146, -0.0657, -0.4809,  0.3569, -0.1368, -0.0029,  0.1311, -0.1997,
         -0.1382,  0.3903, -0.1697,  0.0029,  0.0573,  0.1613,  0.3066,  0.2548,
          0.1450,  0.1031, -0.0349,  0.0949, -0.5840, -0.1449, -0.2254,  0.0959,
         -0.2204,  0.0852, -0.0192,  0.0848,  0.8306,  0.2020, -0.1656,  0.0604]],
       device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
363000 特征值优化 tensor(0.5550, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0020e+00,  7.0162e-01, -2.9184e-01, -4.5253e-01, -8.5007e-01,
         -1.9156e-01, -4.4333e-01,  2.0033e-01, -3.8114e-01, -7.5487e-01,
         -4.1716e-01,  8.7339e-01, -9.1453e-03, -6.7702e-02, -7.0509e-02,
         -1.7412e-02, -9.8971e-02, -1.6644e-01,  1.7613e-01, -2.5588e-02,
          5.3163e-03,  2.3535e-01, -3.0340e-02,  1.4459e-01,  8.4407e-02,
          1.0669e-02, -4.8470e-02, -9.6055e-02, -4.0468e-02,  7.7511e-02,
          6.2028e-02, -1.0876e-02,  1.0264e-01, -1.8494e-01,  6.4992e-02,
          2.0071e-04, -1.0831e-02,  1.0034e-01, -8.2993e-02,  8.9313e-02,
          1.7040e-02, -4.4854e-02, -4.8014e-01,  3.5594e-01, -1.3638e-01,
         -1.9732e-03,  1.3054e-01, -1.8824e-01, -1.6610e-01,  4.1175e-01,
         -2.0143e-01,  2.1657e-02,  5.1834e-02,  1.6203e-01,  3.0373e-01,
          2.6024e-01,  9.0920e-02,  1.3761e-01, -1.1505e-01,  6.8651e-02,
         -5.7366e-01, -1.4761e-01, -2.3318e-01,  8.8071e-02, -2.5170e-01,
          1.2788e-01, -1.3663e-02,  7.0991e-02,  8.2726e-01,  2.0170e-01,
         -1.3062e-01,  7.0801e-03]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
364000 特征值优化 tensor(0.5669, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0006,  0.6972, -0.2955, -0.4419, -0.8640, -0.1688, -0.4367,  0.2032,
         -0.3886, -0.7492, -0.4149,  0.8490, -0.0087, -0.0597, -0.0596, -0.0181,
         -0.0868, -0.1583,  0.1871, -0.0262,  0.0051,  0.2336, -0.0286,  0.1364,
          0.0699,  0.0131, -0.0473, -0.1030, -0.0132,  0.0721,  0.0612, -0.0129,
          0.1000, -0.1865,  0.0516, -0.0049, -0.0097,  0.0960, -0.0909,  0.0709,
          0.0172, -0.0282, -0.4795,  0.3576, -0.1396, -0.0026,  0.1304, -0.1897,
         -0.1372,  0.3775, -0.1747, -0.0047,  0.0491,  0.1642,  0.3095,  0.2534,
          0.1144,  0.1162, -0.0039,  0.0473, -0.5787, -0.1467, -0.2236,  0.0892,
         -0.2186,  0.1465, -0.0200,  0.0594,  0.8265,  0.2033, -0.1339,  0.0093]],
       device='cuda:0') tensor(0.2052, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
365000 特征值优化 tensor(0.5545, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0026,  0.6995, -0.3041, -0.4452, -0.8576, -0.1728, -0.4391,  0.1996,
         -0.4193, -0.7784, -0.4174,  0.8898, -0.0088, -0.0740, -0.0731, -0.0237,
         -0.0890, -0.1575,  0.1864, -0.0268,  0.0047,  0.2356, -0.0278,  0.1436,
          0.0700,  0.0138, -0.0637, -0.0968, -0.0348,  0.0765,  0.0625, -0.0102,
          0.1017, -0.1846,  0.0378, -0.0134, -0.0118,  0.0970, -0.0855,  0.0780,
          0.0176, -0.0451, -0.4803,  0.3588, -0.1380, -0.0043,  0.1310, -0.1924,
         -0.1335,  0.3835, -0.1875,  0.0140,  0.0519,  0.1626,  0.3040,  0.2601,
          0.1085,  0.1243, -0.0307,  0.0317, -0.5768, -0.1465, -0.2345,  0.0863,
         -0.2301,  0.1358, -0.0443,  0.0690,  0.8283,  0.2017, -0.1382, -0.0097]],
       device='cuda:0') tensor(0.2034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
366000 特征值优化 tensor(0.5571, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0028,  0.7012, -0.2992, -0.4481, -0.8629, -0.1844, -0.4429,  0.1958,
         -0.3933, -0.7455, -0.4132,  0.8787, -0.0087, -0.0660, -0.0635, -0.0268,
         -0.0880, -0.1564,  0.1871, -0.0261,  0.0049,  0.2359, -0.0272,  0.1391,
          0.0887,  0.0162, -0.0443, -0.1083, -0.0327,  0.0754,  0.0594, -0.0117,
          0.1016, -0.1873,  0.0607, -0.0016, -0.0113,  0.0937, -0.0704,  0.0713,
          0.0178, -0.0509, -0.4799,  0.3583, -0.1372, -0.0034,  0.1307, -0.1937,
         -0.1326,  0.3837, -0.1842,  0.0107,  0.0529,  0.1595,  0.3095,  0.2597,
          0.1051,  0.1240, -0.0487,  0.0286, -0.5766, -0.1475, -0.2303,  0.0878,
         -0.2559,  0.1273, -0.0246,  0.0846,  0.8255,  0.2044, -0.0889,  0.0020]],
       device='cuda:0') tensor(0.2086, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
367000 特征值优化 tensor(0.5570, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0016,  0.7014, -0.2966, -0.4470, -0.8650, -0.1700, -0.4401,  0.2092,
         -0.4340, -0.7598, -0.4151,  0.9007, -0.0092, -0.0468, -0.0491, -0.0134,
         -0.0943, -0.1632,  0.1814, -0.0256,  0.0054,  0.2340, -0.0206,  0.1411,
          0.0721,  0.0187, -0.0489, -0.1095, -0.0123,  0.0774,  0.0599, -0.0114,
          0.1018, -0.1836,  0.0456, -0.0154, -0.0107,  0.0975, -0.0731,  0.0691,
          0.0171, -0.0536, -0.4806,  0.3563, -0.1369, -0.0015,  0.1303, -0.1974,
         -0.1375,  0.3922, -0.1712,  0.0039,  0.0531,  0.1598,  0.3068,  0.2547,
          0.1397,  0.1115, -0.0054,  0.0687, -0.5756, -0.1465, -0.2355,  0.0893,
         -0.2471,  0.1086, -0.0257,  0.0819,  0.8272,  0.2016, -0.1451,  0.0325]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
368000 特征值优化 tensor(0.5563, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0034,  0.6986, -0.2845, -0.4511, -0.8731, -0.1756, -0.4322,  0.2157,
         -0.4141, -0.7686, -0.4165,  0.8777, -0.0087, -0.0498, -0.0283,  0.0132,
         -0.1054, -0.1485,  0.2009, -0.0260,  0.0050,  0.2371, -0.0120,  0.1284,
          0.0826, -0.0096, -0.0531, -0.1086,  0.0179,  0.0744,  0.0613, -0.0120,
          0.0998, -0.1877,  0.0967,  0.0129, -0.0091,  0.0935, -0.0547,  0.0613,
          0.0160, -0.0747, -0.4811,  0.3581, -0.1364, -0.0023,  0.1305, -0.2022,
         -0.1316,  0.3892, -0.1721,  0.0030,  0.0554,  0.1631,  0.3090,  0.2568,
          0.0986,  0.1240, -0.0329,  0.0872, -0.5833, -0.1459, -0.2282,  0.0915,
         -0.2292,  0.0881,  0.0136,  0.0682,  0.8313,  0.2007, -0.1070,  0.0328]],
       device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
369000 特征值优化 tensor(0.5565, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0011,  0.7014, -0.2956, -0.4439, -0.8592, -0.1698, -0.4365,  0.2051,
         -0.4253, -0.7691, -0.4189,  0.9004, -0.0096, -0.0423, -0.0205,  0.0050,
         -0.0978, -0.1577,  0.1904, -0.0260,  0.0051,  0.2370, -0.0185,  0.1385,
          0.0676,  0.0082, -0.0620, -0.1046,  0.0083,  0.0749,  0.0616, -0.0120,
          0.1008, -0.1836,  0.0607,  0.0037, -0.0097,  0.0953, -0.0633,  0.0565,
          0.0161, -0.0678, -0.4811,  0.3573, -0.1364, -0.0019,  0.1314, -0.1947,
         -0.1372,  0.3867, -0.1718,  0.0048,  0.0537,  0.1628,  0.3062,  0.2576,
          0.1277,  0.1159,  0.0098,  0.0709, -0.5797, -0.1467, -0.2244,  0.0915,
         -0.2417,  0.1074, -0.0304,  0.0746,  0.8299,  0.2020, -0.1512,  0.0362]],
       device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
370000 特征值优化 tensor(0.5598, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0029e+00,  7.0089e-01, -3.0032e-01, -4.3730e-01, -8.5927e-01,
         -1.7683e-01, -4.3166e-01,  2.0662e-01, -4.0607e-01, -7.5393e-01,
         -4.1924e-01,  8.8970e-01, -9.1298e-03, -4.2175e-02, -2.7691e-02,
         -2.1284e-04, -9.5711e-02, -1.5589e-01,  1.8815e-01, -2.5727e-02,
          5.2238e-03,  2.3809e-01, -2.8623e-02,  1.3212e-01,  7.0965e-02,
          8.2669e-03, -6.2738e-02, -1.0067e-01,  6.4184e-03,  7.4086e-02,
          6.1845e-02, -1.2465e-02,  1.0041e-01, -1.8502e-01,  7.1130e-02,
         -5.0414e-03, -9.1940e-03,  9.8620e-02, -7.3124e-02,  5.8048e-02,
          1.6144e-02, -5.9504e-02, -4.8076e-01,  3.5684e-01, -1.3738e-01,
         -1.4279e-03,  1.2998e-01, -1.9516e-01, -1.3852e-01,  3.8412e-01,
         -1.7450e-01,  4.2756e-03,  5.3983e-02,  1.6239e-01,  3.0861e-01,
          2.5889e-01,  1.1599e-01,  1.2221e-01,  4.6952e-03,  9.9542e-02,
         -5.8006e-01, -1.4610e-01, -2.2432e-01,  9.1765e-02, -2.2044e-01,
          1.1727e-01, -2.8438e-02,  6.7440e-02,  8.2858e-01,  2.0171e-01,
         -1.5420e-01,  1.8846e-02]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
371000 特征值优化 tensor(0.5565, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0029,  0.7010, -0.3028, -0.4433, -0.8607, -0.1663, -0.4408,  0.1967,
         -0.3971, -0.7355, -0.4142,  0.8826, -0.0088, -0.0808, -0.0815, -0.0265,
         -0.0929, -0.1592,  0.1830, -0.0258,  0.0051,  0.2351, -0.0287,  0.1406,
          0.0878,  0.0171, -0.0502, -0.1116, -0.0355,  0.0764,  0.0595, -0.0116,
          0.1020, -0.1835,  0.0450, -0.0109, -0.0107,  0.0945, -0.0814,  0.0790,
          0.0176, -0.0439, -0.4802,  0.3586, -0.1376, -0.0028,  0.1305, -0.1934,
         -0.1335,  0.3828, -0.1824,  0.0104,  0.0533,  0.1592,  0.3086,  0.2597,
          0.0899,  0.1336, -0.0565,  0.0211, -0.5772, -0.1479, -0.2306,  0.0884,
         -0.2755,  0.1495, -0.0249,  0.0742,  0.8271,  0.2035, -0.0761, -0.0216]],
       device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
372000 特征值优化 tensor(0.5567, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0039,  0.7006, -0.2997, -0.4496, -0.8634, -0.1653, -0.4426,  0.2024,
         -0.4359, -0.7419, -0.4141,  0.8973, -0.0086, -0.0654, -0.0660, -0.0177,
         -0.0913, -0.1643,  0.1790, -0.0259,  0.0050,  0.2360, -0.0238,  0.1399,
          0.0698,  0.0177, -0.0528, -0.1101, -0.0262,  0.0755,  0.0600, -0.0115,
          0.1017, -0.1836,  0.0419, -0.0192, -0.0106,  0.0958, -0.0858,  0.0795,
          0.0174, -0.0456, -0.4804,  0.3571, -0.1365, -0.0020,  0.1299, -0.1962,
         -0.1378,  0.3901, -0.1739,  0.0067,  0.0537,  0.1597,  0.3091,  0.2592,
          0.1273,  0.1156, -0.0208,  0.0601, -0.5765, -0.1469, -0.2318,  0.0886,
         -0.2543,  0.1330, -0.0257,  0.0753,  0.8276,  0.2027, -0.1304,  0.0032]],
       device='cuda:0') tensor(0.2045, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
373000 特征值优化 tensor(0.5576, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0028,  0.7030, -0.2980, -0.4462, -0.8664, -0.1641, -0.4377,  0.2090,
         -0.4256, -0.7321, -0.4123,  0.8976, -0.0093, -0.0623, -0.0504, -0.0202,
         -0.0973, -0.1577,  0.1815, -0.0257,  0.0053,  0.2350, -0.0222,  0.1375,
          0.0716,  0.0139, -0.0549, -0.1141, -0.0169,  0.0764,  0.0602, -0.0118,
          0.1018, -0.1838,  0.0506, -0.0091, -0.0100,  0.0955, -0.0797,  0.0758,
          0.0168, -0.0476, -0.4801,  0.3563, -0.1366, -0.0021,  0.1305, -0.1982,
         -0.1371,  0.3898, -0.1694,  0.0029,  0.0548,  0.1584,  0.3096,  0.2586,
          0.1342,  0.1115, -0.0138,  0.0661, -0.5783, -0.1467, -0.2317,  0.0907,
         -0.2608,  0.1367, -0.0204,  0.0758,  0.8267,  0.2029, -0.1261,  0.0107]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
374000 特征值优化 tensor(0.5568, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0030,  0.7000, -0.3003, -0.4445, -0.8591, -0.1641, -0.4409,  0.1683,
         -0.4009, -0.7213, -0.4175,  0.8801, -0.0089, -0.1158, -0.0994, -0.0340,
         -0.0997, -0.1744,  0.1615, -0.0271,  0.0046,  0.2362, -0.0257,  0.1409,
          0.0743,  0.0172, -0.0565, -0.1167, -0.0247,  0.0752,  0.0601, -0.0110,
          0.1019, -0.1835,  0.0385, -0.0185, -0.0129,  0.0949, -0.0954,  0.0929,
          0.0191, -0.0316, -0.4803,  0.3595, -0.1382, -0.0055,  0.1316, -0.1960,
         -0.1362,  0.3910, -0.1734,  0.0044,  0.0502,  0.1613,  0.3053,  0.2598,
          0.0973,  0.1301, -0.0137,  0.0476, -0.5756, -0.1479, -0.2265,  0.0827,
         -0.2767,  0.1719, -0.0200,  0.0604,  0.8281,  0.2030, -0.0875, -0.0425]],
       device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
375000 特征值优化 tensor(0.5579, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0030,  0.7016, -0.2991, -0.4442, -0.8594, -0.1644, -0.4364,  0.1930,
         -0.4400, -0.7247, -0.4165,  0.9020, -0.0093, -0.0631, -0.0691, -0.0395,
         -0.1095, -0.1627,  0.1749, -0.0257,  0.0051,  0.2350, -0.0231,  0.1389,
          0.0734,  0.0163, -0.0545, -0.1136, -0.0203,  0.0765,  0.0605, -0.0115,
          0.1023, -0.1832,  0.0561, -0.0084, -0.0107,  0.0974, -0.0744,  0.0719,
          0.0177, -0.0511, -0.4807,  0.3565, -0.1365, -0.0019,  0.1307, -0.1965,
         -0.1379,  0.3887, -0.1756,  0.0068,  0.0517,  0.1599,  0.3087,  0.2603,
          0.1436,  0.1085, -0.0265,  0.0661, -0.5781, -0.1468, -0.2284,  0.0881,
         -0.2552,  0.1285, -0.0150,  0.0764,  0.8277,  0.2024, -0.1315,  0.0201]],
       device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
376000 特征值优化 tensor(0.5592, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0048e+00,  7.0067e-01, -2.9752e-01, -4.3984e-01, -8.6320e-01,
         -1.8512e-01, -4.3827e-01,  2.0954e-01, -4.3073e-01, -7.1138e-01,
         -4.1290e-01,  9.1312e-01, -8.7930e-03, -6.1833e-02, -6.0456e-02,
         -3.7964e-02, -1.1204e-01, -1.6438e-01,  1.7057e-01, -2.5733e-02,
          4.3673e-03,  2.3610e-01, -2.6414e-02,  1.3479e-01,  7.4529e-02,
          1.1149e-02, -4.7209e-02, -1.1535e-01, -1.8348e-02,  7.5402e-02,
          6.0146e-02, -1.1991e-02,  1.0140e-01, -1.8911e-01,  7.0065e-02,
         -7.6138e-03, -9.4684e-03,  9.6508e-02, -6.4445e-02,  7.0588e-02,
          1.6532e-02, -5.5804e-02, -4.8016e-01,  3.5702e-01, -1.3637e-01,
         -2.4551e-03,  1.3022e-01, -1.9844e-01, -1.3747e-01,  3.9051e-01,
         -1.6740e-01, -2.7302e-04,  5.3802e-02,  1.5925e-01,  3.0943e-01,
          2.5774e-01,  1.2620e-01,  1.1010e-01, -3.5559e-02,  6.2494e-02,
         -5.8002e-01, -1.4672e-01, -2.2968e-01,  9.0958e-02, -2.3475e-01,
          1.1802e-01, -1.5620e-02,  8.2474e-02,  8.2710e-01,  2.0354e-01,
         -1.2915e-01,  2.4831e-02]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
377000 特征值优化 tensor(0.5560, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0009,  0.7022, -0.3074, -0.4356, -0.8589, -0.1567, -0.4601,  0.3503,
         -0.4916, -0.7557, -0.3820,  0.9287, -0.0094, -0.0425, -0.0762, -0.0424,
         -0.1327, -0.1826,  0.1362, -0.0278,  0.0051,  0.2401, -0.0379,  0.1310,
          0.0323, -0.0444, -0.0407, -0.1213, -0.0215,  0.0738,  0.0601, -0.0116,
          0.1047, -0.1837,  0.0471, -0.0136, -0.0039,  0.0630, -0.0706,  0.0665,
          0.0111, -0.0553, -0.4805,  0.3580, -0.1372, -0.0068,  0.1330, -0.1952,
         -0.1426,  0.3832, -0.1787,  0.0088,  0.0569,  0.1581,  0.3192,  0.2445,
          0.1119,  0.1195, -0.0588, -0.0927, -0.5829, -0.1512, -0.2482,  0.1154,
         -0.2199,  0.1308, -0.0229,  0.0576,  0.8229,  0.2107, -0.1593,  0.0185]],
       device='cuda:0') tensor(0.2153, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
378000 特征值优化 tensor(0.5545, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0056,  0.6994, -0.3063, -0.4391, -0.8684, -0.1947, -0.4696,  0.3832,
         -0.4580, -0.7491, -0.3796,  0.9468, -0.0096, -0.0075, -0.0200, -0.0244,
         -0.1349, -0.1584,  0.1780, -0.0256,  0.0058,  0.2400, -0.0430,  0.1348,
          0.1012,  0.0296, -0.0542, -0.0998,  0.0285,  0.0734,  0.0592, -0.0136,
          0.0998, -0.1839,  0.0978,  0.0102, -0.0041,  0.0416, -0.0550,  0.0499,
          0.0092, -0.0782, -0.4805,  0.3566, -0.1358, -0.0011,  0.1303, -0.1942,
         -0.1411,  0.3819, -0.1742,  0.0060,  0.0402,  0.1665,  0.3289,  0.2434,
          0.1191,  0.1267, -0.0640, -0.1008, -0.5786, -0.1553, -0.2535,  0.1249,
         -0.2092,  0.0782, -0.0204,  0.0772,  0.8278,  0.2077, -0.1654,  0.0607]],
       device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
379000 特征值优化 tensor(0.5617, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0031e+00,  6.9860e-01, -3.0710e-01, -4.3078e-01, -8.6964e-01,
         -1.6611e-01, -4.6500e-01,  3.7666e-01, -4.6360e-01, -7.3107e-01,
         -3.8074e-01,  9.2178e-01, -8.7210e-03, -1.7009e-02, -4.8404e-02,
         -3.4098e-02, -1.2381e-01, -1.7014e-01,  1.5730e-01, -2.5634e-02,
          5.3442e-03,  2.4044e-01, -3.9659e-02,  1.2271e-01,  4.1527e-02,
         -2.4923e-02, -5.2023e-02, -1.2357e-01, -5.9255e-03,  7.3514e-02,
          5.7080e-02, -1.2164e-02,  1.0463e-01, -1.8589e-01,  5.6077e-02,
         -9.6519e-03, -4.0326e-03,  4.8238e-02, -8.1725e-02,  6.5015e-02,
          9.3745e-03, -5.2101e-02, -4.7954e-01,  3.5759e-01, -1.3868e-01,
         -8.6368e-04,  1.2997e-01, -1.8548e-01, -1.3928e-01,  3.7712e-01,
         -1.7522e-01,  5.7381e-03,  4.9439e-02,  1.6049e-01,  3.2729e-01,
          2.4410e-01,  1.1146e-01,  1.1982e-01,  8.9015e-03, -8.0026e-02,
         -5.8098e-01, -1.5566e-01, -2.4989e-01,  1.1518e-01, -2.1452e-01,
          1.3956e-01, -1.5944e-02,  5.7675e-02,  8.2404e-01,  2.0811e-01,
         -1.5249e-01,  1.3496e-02]], device='cuda:0') tensor(0.2048, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
380000 特征值优化 tensor(0.5558, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0047e+00,  6.9627e-01, -3.1113e-01, -4.3746e-01, -8.7409e-01,
         -1.7047e-01, -4.5815e-01,  3.7839e-01, -4.8567e-01, -7.3306e-01,
         -3.8085e-01,  9.4290e-01, -9.3435e-03, -1.8484e-02, -4.5636e-02,
         -3.8209e-02, -1.3239e-01, -1.7202e-01,  1.4887e-01, -2.6386e-02,
          5.2856e-03,  2.4010e-01, -4.5350e-02,  1.2820e-01,  3.6277e-02,
         -3.7232e-02, -3.8503e-02, -1.1819e-01, -7.0679e-04,  7.3908e-02,
          5.6632e-02, -1.1886e-02,  1.0361e-01, -1.8395e-01,  5.4892e-02,
         -6.5837e-03, -2.4636e-03,  6.0259e-02, -6.9884e-02,  7.1024e-02,
          1.0876e-02, -5.3044e-02, -4.8084e-01,  3.5767e-01, -1.3589e-01,
         -2.6937e-03,  1.3034e-01, -1.9304e-01, -1.4526e-01,  3.8623e-01,
         -1.6834e-01,  2.1974e-03,  5.4216e-02,  1.5674e-01,  3.2315e-01,
          2.4294e-01,  1.1371e-01,  1.2283e-01,  8.7809e-03, -6.3329e-02,
         -5.8125e-01, -1.5189e-01, -2.5090e-01,  1.1973e-01, -2.3128e-01,
          1.1115e-01, -1.5805e-02,  7.8396e-02,  8.2441e-01,  2.0989e-01,
         -1.5771e-01,  3.9562e-02]], device='cuda:0') tensor(0.2101, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
381000 特征值优化 tensor(0.5550, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0059e+00,  6.9937e-01, -3.0818e-01, -4.3798e-01, -8.6682e-01,
         -1.8821e-01, -4.6722e-01,  3.7687e-01, -4.7097e-01, -7.3869e-01,
         -3.7884e-01,  9.4882e-01, -9.6973e-03, -2.0755e-02, -1.9802e-02,
         -2.4652e-02, -1.3969e-01, -1.5883e-01,  1.8094e-01, -2.5379e-02,
          5.4268e-03,  2.3937e-01, -3.7075e-02,  1.3479e-01,  8.2798e-02,
          1.5032e-02, -5.6770e-02, -1.0470e-01,  1.3925e-02,  7.2400e-02,
          6.0825e-02, -1.3348e-02,  9.9726e-02, -1.8461e-01,  8.7254e-02,
          5.6589e-03, -3.6234e-03,  4.4763e-02, -5.6265e-02,  5.2145e-02,
          9.6405e-03, -7.7372e-02, -4.8124e-01,  3.5606e-01, -1.3592e-01,
         -2.5925e-04,  1.2965e-01, -1.9325e-01, -1.3972e-01,  3.8350e-01,
         -1.7518e-01,  8.0744e-03,  4.4676e-02,  1.6644e-01,  3.2735e-01,
          2.4386e-01,  1.1334e-01,  1.2614e-01, -3.5565e-02, -1.0337e-01,
         -5.7912e-01, -1.5441e-01, -2.5552e-01,  1.2557e-01, -2.1168e-01,
          9.8685e-02, -2.0700e-02,  7.2415e-02,  8.2621e-01,  2.0897e-01,
         -1.5607e-01,  3.7834e-02]], device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
382000 特征值优化 tensor(0.5756, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0032,  0.6940, -0.3063, -0.4374, -0.8694, -0.1487, -0.4643,  0.3528,
         -0.4988, -0.7262, -0.3838,  0.9232, -0.0088, -0.0450, -0.0924, -0.0388,
         -0.1272, -0.1782,  0.1427, -0.0276,  0.0054,  0.2376, -0.0291,  0.1330,
          0.0252, -0.0485, -0.0527, -0.1217, -0.0170,  0.0730,  0.0565, -0.0131,
          0.1008, -0.1839,  0.0361, -0.0287, -0.0043,  0.0538, -0.0905,  0.0836,
          0.0107, -0.0370, -0.4800,  0.3603, -0.1371, -0.0032,  0.1316, -0.2006,
         -0.1459,  0.3943, -0.1696,  0.0016,  0.0536,  0.1587,  0.3222,  0.2442,
          0.1094,  0.1176,  0.0396, -0.0385, -0.5802, -0.1534, -0.2452,  0.1164,
         -0.2291,  0.1534, -0.0182,  0.0582,  0.8241,  0.2108, -0.1218, -0.0149]],
       device='cuda:0') tensor(0.2064, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
383000 特征值优化 tensor(0.5571, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0058e+00,  6.9734e-01, -3.1200e-01, -4.3651e-01, -8.7301e-01,
         -1.7288e-01, -4.5827e-01,  3.8730e-01, -4.8822e-01, -7.2397e-01,
         -3.8176e-01,  9.5051e-01, -9.2056e-03, -2.1468e-02, -4.7157e-02,
         -3.5789e-02, -1.3078e-01, -1.7005e-01,  1.5171e-01, -2.6082e-02,
          5.0969e-03,  2.3915e-01, -4.7882e-02,  1.2694e-01,  4.5985e-02,
         -2.8360e-02, -2.6737e-02, -1.1761e-01,  6.2341e-05,  7.4794e-02,
          5.6373e-02, -1.3077e-02,  1.0350e-01, -1.8450e-01,  5.6328e-02,
         -1.0016e-02, -2.4026e-03,  5.9792e-02, -6.0574e-02,  5.9886e-02,
          1.0916e-02, -5.9906e-02, -4.8039e-01,  3.5743e-01, -1.3588e-01,
         -2.5998e-03,  1.2989e-01, -1.9217e-01, -1.4581e-01,  3.8702e-01,
         -1.6831e-01,  2.1837e-03,  5.1345e-02,  1.5801e-01,  3.2410e-01,
          2.4280e-01,  1.1377e-01,  1.2177e-01,  1.6176e-02, -4.2965e-02,
         -5.8133e-01, -1.5101e-01, -2.4993e-01,  1.2233e-01, -2.2648e-01,
          1.0948e-01, -2.5835e-02,  7.7525e-02,  8.2353e-01,  2.0971e-01,
         -1.4460e-01,  3.2318e-02]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
384000 特征值优化 tensor(0.5544, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0042,  0.6976, -0.3086, -0.4353, -0.8730, -0.1537, -0.4630,  0.3578,
         -0.5039, -0.7257, -0.3833,  0.9305, -0.0097, -0.0448, -0.0800, -0.0370,
         -0.1316, -0.1833,  0.1364, -0.0274,  0.0053,  0.2404, -0.0394,  0.1319,
          0.0196, -0.0433, -0.0512, -0.1326, -0.0308,  0.0739,  0.0572, -0.0120,
          0.1045, -0.1831,  0.0326, -0.0271, -0.0043,  0.0602, -0.0791,  0.0741,
          0.0112, -0.0485, -0.4813,  0.3591, -0.1378, -0.0046,  0.1321, -0.1988,
         -0.1440,  0.3910, -0.1751,  0.0062,  0.0591,  0.1549,  0.3212,  0.2433,
          0.1290,  0.1115,  0.0332, -0.0470, -0.5835, -0.1516, -0.2473,  0.1173,
         -0.2345,  0.1467, -0.0275,  0.0618,  0.8248,  0.2099, -0.1335, -0.0028]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
385000 特征值优化 tensor(0.5586, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.9455e-01,  6.9423e-01, -3.0275e-01, -4.3403e-01, -8.5484e-01,
         -1.7766e-01, -4.7215e-01,  3.5452e-01, -4.8926e-01, -7.2437e-01,
         -3.8361e-01,  9.2665e-01, -9.1014e-03, -2.6543e-02, -5.4229e-02,
         -3.7042e-02, -1.2535e-01, -1.7346e-01,  1.6310e-01, -2.5388e-02,
          5.6756e-03,  2.3893e-01, -4.6667e-02,  1.2686e-01,  5.8168e-02,
         -1.1804e-02, -4.8630e-02, -1.1704e-01, -3.7698e-03,  7.4131e-02,
          6.1028e-02, -1.2197e-02,  1.0069e-01, -1.8613e-01,  6.1011e-02,
         -5.1678e-03, -3.9348e-03,  4.3156e-02, -6.8515e-02,  5.6395e-02,
          9.9270e-03, -6.2570e-02, -4.7636e-01,  3.5625e-01, -1.3819e-01,
          2.0581e-03,  1.2978e-01, -1.9387e-01, -1.4149e-01,  3.8456e-01,
         -1.7109e-01,  2.8389e-03,  4.7711e-02,  1.6467e-01,  3.2710e-01,
          2.4493e-01,  1.1898e-01,  1.1752e-01,  6.7958e-04, -8.3670e-02,
         -5.7864e-01, -1.5486e-01, -2.4978e-01,  1.2246e-01, -2.1315e-01,
          1.2834e-01, -1.9739e-02,  5.5201e-02,  8.2706e-01,  2.1098e-01,
         -1.4721e-01,  7.9770e-03]], device='cuda:0') tensor(0.2058, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
386000 特征值优化 tensor(0.5550, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0041,  0.6987, -0.3129, -0.4408, -0.8739, -0.1598, -0.4606,  0.3736,
         -0.5004, -0.7219, -0.3823,  0.9444, -0.0090, -0.0281, -0.0615, -0.0392,
         -0.1306, -0.1759,  0.1465, -0.0268,  0.0048,  0.2406, -0.0333,  0.1311,
          0.0349, -0.0543, -0.0536, -0.1175, -0.0084,  0.0740,  0.0572, -0.0120,
          0.1042, -0.1848,  0.0487, -0.0189, -0.0035,  0.0600, -0.0781,  0.0802,
          0.0106, -0.0459, -0.4808,  0.3587, -0.1374, -0.0043,  0.1313, -0.1937,
         -0.1453,  0.3872, -0.1675,  0.0022,  0.0578,  0.1557,  0.3232,  0.2428,
          0.0996,  0.1265,  0.0375, -0.0418, -0.5820, -0.1514, -0.2487,  0.1195,
         -0.2320,  0.1329, -0.0142,  0.0732,  0.8241,  0.2098, -0.1391,  0.0153]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
387000 特征值优化 tensor(0.5524, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0070,  0.6964, -0.3097, -0.4356, -0.8645, -0.1727, -0.4655,  0.3789,
         -0.4972, -0.7360, -0.3810,  0.9643, -0.0093, -0.0117, -0.0286, -0.0225,
         -0.1359, -0.1595,  0.1767, -0.0257,  0.0055,  0.2396, -0.0310,  0.1362,
          0.0654,  0.0012, -0.0482, -0.1128,  0.0236,  0.0739,  0.0609, -0.0136,
          0.0997, -0.1841,  0.0708,  0.0185, -0.0041,  0.0432, -0.0542,  0.0520,
          0.0100, -0.0806, -0.4817,  0.3584, -0.1358, -0.0012,  0.1290, -0.1972,
         -0.1447,  0.3908, -0.1703,  0.0028,  0.0396,  0.1687,  0.3271,  0.2421,
          0.1092,  0.1242, -0.0671, -0.0605, -0.5802, -0.1550, -0.2524,  0.1234,
         -0.2198,  0.0947, -0.0376,  0.0859,  0.8296,  0.2069, -0.1330,  0.0350]],
       device='cuda:0') tensor(0.2038, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
388000 特征值优化 tensor(0.5551, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0051,  0.6955, -0.3082, -0.4374, -0.8726, -0.1596, -0.4587,  0.3705,
         -0.5063, -0.7203, -0.3839,  0.9461, -0.0094, -0.0364, -0.0691, -0.0365,
         -0.1313, -0.1788,  0.1404, -0.0269,  0.0048,  0.2405, -0.0359,  0.1334,
          0.0249, -0.0456, -0.0512, -0.1283, -0.0222,  0.0733,  0.0566, -0.0124,
          0.1036, -0.1839,  0.0422, -0.0144, -0.0034,  0.0605, -0.0742,  0.0717,
          0.0106, -0.0501, -0.4807,  0.3602, -0.1379, -0.0037,  0.1312, -0.1951,
         -0.1436,  0.3841, -0.1749,  0.0071,  0.0533,  0.1566,  0.3237,  0.2428,
          0.1096,  0.1217,  0.0218, -0.0354, -0.5824, -0.1519, -0.2453,  0.1180,
         -0.2301,  0.1376, -0.0316,  0.0663,  0.8246,  0.2099, -0.1328,  0.0051]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
389000 特征值优化 tensor(0.5545, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0053e+00,  6.9798e-01, -3.0947e-01, -4.4382e-01, -8.6530e-01,
         -1.7786e-01, -4.6826e-01,  3.7585e-01, -4.9643e-01, -7.2544e-01,
         -3.8182e-01,  9.5602e-01, -9.6369e-03, -1.2966e-02, -2.3689e-02,
         -2.4058e-02, -1.3622e-01, -1.6354e-01,  1.7209e-01, -2.5888e-02,
          5.7169e-03,  2.3954e-01, -3.4368e-02,  1.3154e-01,  7.1150e-02,
          9.2829e-03, -6.0603e-02, -1.0630e-01,  1.5927e-02,  7.2975e-02,
          5.9931e-02, -1.3972e-02,  9.9408e-02, -1.8457e-01,  7.9797e-02,
          7.0867e-03, -4.4804e-03,  4.3499e-02, -5.6222e-02,  5.0594e-02,
          9.8582e-03, -7.8390e-02, -4.8136e-01,  3.5809e-01, -1.3674e-01,
         -6.9914e-04,  1.2990e-01, -1.9718e-01, -1.4065e-01,  3.8758e-01,
         -1.7352e-01,  8.5591e-03,  3.9628e-02,  1.6910e-01,  3.2786e-01,
          2.4226e-01,  1.2499e-01,  1.1725e-01, -5.7749e-02, -8.6361e-02,
         -5.7925e-01, -1.5490e-01, -2.5166e-01,  1.2417e-01, -2.1119e-01,
          1.0256e-01, -2.7766e-02,  8.0061e-02,  8.2925e-01,  2.0733e-01,
         -1.3966e-01,  2.9160e-02]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
390000 特征值优化 tensor(0.5557, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0052,  0.6968, -0.3072, -0.4347, -0.8739, -0.1585, -0.4600,  0.3640,
         -0.5081, -0.7201, -0.3834,  0.9559, -0.0092, -0.0400, -0.0713, -0.0375,
         -0.1319, -0.1797,  0.1412, -0.0268,  0.0053,  0.2403, -0.0428,  0.1305,
          0.0198, -0.0381, -0.0481, -0.1300, -0.0177,  0.0739,  0.0570, -0.0118,
          0.1043, -0.1837,  0.0374, -0.0175, -0.0040,  0.0599, -0.0727,  0.0678,
          0.0108, -0.0515, -0.4812,  0.3602, -0.1377, -0.0039,  0.1308, -0.1961,
         -0.1450,  0.3871, -0.1728,  0.0050,  0.0555,  0.1556,  0.3233,  0.2427,
          0.1190,  0.1171,  0.0227, -0.0435, -0.5821, -0.1526, -0.2433,  0.1170,
         -0.2343,  0.1415, -0.0260,  0.0615,  0.8253,  0.2094, -0.1486,  0.0131]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
391000 特征值优化 tensor(0.5623, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.9030e-01,  6.9144e-01, -3.0517e-01, -4.2786e-01, -8.5375e-01,
         -1.6534e-01, -4.6006e-01,  3.5644e-01, -4.9830e-01, -7.1554e-01,
         -3.8235e-01,  9.3806e-01, -9.8967e-03, -2.6082e-02, -7.3361e-02,
         -4.0039e-02, -1.1678e-01, -1.7219e-01,  1.5823e-01, -2.6395e-02,
          4.5381e-03,  2.3910e-01, -4.7801e-02,  1.2359e-01,  4.0051e-02,
         -2.5834e-02, -4.6643e-02, -1.2962e-01, -1.8349e-02,  7.3099e-02,
          6.0443e-02, -1.2635e-02,  1.0480e-01, -1.8610e-01,  4.2071e-02,
         -1.4780e-02, -4.4174e-03,  4.8902e-02, -7.1738e-02,  5.5682e-02,
          9.8121e-03, -6.0656e-02, -4.7548e-01,  3.5820e-01, -1.3922e-01,
          3.1065e-04,  1.3076e-01, -1.9201e-01, -1.3746e-01,  3.8397e-01,
         -1.7725e-01,  5.0964e-03,  4.3386e-02,  1.6473e-01,  3.2624e-01,
          2.4483e-01,  1.1581e-01,  1.1646e-01,  1.7294e-02, -7.5842e-02,
         -5.8175e-01, -1.5462e-01, -2.4442e-01,  1.1181e-01, -2.1213e-01,
          1.4627e-01, -1.6349e-02,  4.6732e-02,  8.2600e-01,  2.0843e-01,
         -1.4686e-01,  1.8704e-03]], device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
392000 特征值优化 tensor(0.5559, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0033,  0.6985, -0.3053, -0.4392, -0.8751, -0.1695, -0.4568,  0.3759,
         -0.5023, -0.7108, -0.3830,  0.9573, -0.0100, -0.0217, -0.0509, -0.0367,
         -0.1314, -0.1755,  0.1469, -0.0263,  0.0055,  0.2398, -0.0468,  0.1279,
          0.0370, -0.0375, -0.0290, -0.1232, -0.0046,  0.0746,  0.0560, -0.0129,
          0.1041, -0.1838,  0.0515, -0.0192, -0.0020,  0.0585, -0.0629,  0.0620,
          0.0106, -0.0593, -0.4815,  0.3576, -0.1364, -0.0028,  0.1305, -0.2008,
         -0.1463,  0.3938, -0.1641, -0.0010,  0.0527,  0.1572,  0.3237,  0.2426,
          0.1262,  0.1159,  0.0216, -0.0495, -0.5834, -0.1510, -0.2456,  0.1202,
         -0.2286,  0.1148, -0.0238,  0.0768,  0.8248,  0.2094, -0.1390,  0.0256]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
393000 特征值优化 tensor(0.5539, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0051,  0.6950, -0.3083, -0.4373, -0.8728, -0.1555, -0.4620,  0.3570,
         -0.5191, -0.7213, -0.3856,  0.9488, -0.0095, -0.0455, -0.0840, -0.0377,
         -0.1290, -0.1828,  0.1375, -0.0276,  0.0052,  0.2411, -0.0387,  0.1340,
          0.0101, -0.0472, -0.0498, -0.1262, -0.0359,  0.0744,  0.0574, -0.0119,
          0.1043, -0.1837,  0.0276, -0.0308, -0.0043,  0.0605, -0.0817,  0.0780,
          0.0108, -0.0475, -0.4816,  0.3596, -0.1361, -0.0044,  0.1308, -0.1993,
         -0.1447,  0.3906, -0.1741,  0.0070,  0.0570,  0.1553,  0.3216,  0.2425,
          0.1206,  0.1154,  0.0334, -0.0418, -0.5837, -0.1514, -0.2434,  0.1178,
         -0.2328,  0.1525, -0.0261,  0.0595,  0.8260,  0.2093, -0.1316, -0.0136]],
       device='cuda:0') tensor(0.2058, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
394000 特征值优化 tensor(0.5542, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0051e+00,  6.9703e-01, -3.0955e-01, -4.4170e-01, -8.6222e-01,
         -1.8036e-01, -4.6657e-01,  3.7432e-01, -4.9151e-01, -7.1627e-01,
         -3.8267e-01,  9.5617e-01, -9.7650e-03, -1.5367e-02, -3.1442e-02,
         -2.2616e-02, -1.3571e-01, -1.6397e-01,  1.7162e-01, -2.5697e-02,
          5.8010e-03,  2.4008e-01, -3.7433e-02,  1.3298e-01,  6.4326e-02,
          8.9588e-03, -6.0946e-02, -1.1268e-01,  1.2205e-02,  7.2717e-02,
          6.1024e-02, -1.3949e-02,  9.9316e-02, -1.8435e-01,  7.6604e-02,
          9.3394e-03, -4.5858e-03,  4.3737e-02, -6.0681e-02,  5.6307e-02,
          1.0019e-02, -7.4829e-02, -4.8160e-01,  3.5824e-01, -1.3604e-01,
         -9.3931e-04,  1.2971e-01, -1.9657e-01, -1.4006e-01,  3.8713e-01,
         -1.7574e-01,  8.2373e-03,  3.9398e-02,  1.6904e-01,  3.2702e-01,
          2.4206e-01,  1.3084e-01,  1.1492e-01, -5.2672e-02, -9.1868e-02,
         -5.8006e-01, -1.5491e-01, -2.5095e-01,  1.2298e-01, -2.1846e-01,
          1.0929e-01, -2.6157e-02,  7.5172e-02,  8.2951e-01,  2.0731e-01,
         -1.4093e-01,  2.4346e-02]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
395000 特征值优化 tensor(0.5545, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0057,  0.6972, -0.3096, -0.4409, -0.8733, -0.1611, -0.4584,  0.3713,
         -0.5117, -0.7099, -0.3833,  0.9573, -0.0093, -0.0304, -0.0627, -0.0374,
         -0.1299, -0.1756,  0.1464, -0.0268,  0.0052,  0.2401, -0.0422,  0.1274,
          0.0277, -0.0427, -0.0439, -0.1246, -0.0154,  0.0744,  0.0569, -0.0129,
          0.1041, -0.1837,  0.0429, -0.0273, -0.0029,  0.0589, -0.0735,  0.0747,
          0.0106, -0.0512, -0.4811,  0.3585, -0.1364, -0.0036,  0.1310, -0.1989,
         -0.1460,  0.3920, -0.1671,  0.0017,  0.0583,  0.1548,  0.3237,  0.2426,
          0.1239,  0.1151,  0.0283, -0.0490, -0.5845, -0.1499, -0.2459,  0.1215,
         -0.2344,  0.1278, -0.0200,  0.0732,  0.8249,  0.2099, -0.1352,  0.0130]],
       device='cuda:0') tensor(0.2041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
396000 特征值优化 tensor(17.8669, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.7606, -0.4467, -0.6425, -0.5998, -0.7112, -0.4380, -0.6512,  0.5401,
          0.1097,  0.9326,  0.6948, -0.9467, -2.4838, -1.4418, -0.2266, -0.7990,
          0.0965,  0.0159,  0.1073, -0.6761, -0.1334,  0.2642, -0.2755, -0.1739,
         -0.6189,  0.2874, -0.0139, -0.1898, -0.0500,  0.1519,  0.0077,  0.2550,
          0.0991, -0.0346,  0.2104,  0.8739,  0.1307,  0.0258,  0.0559, -0.9758,
          0.0695, -0.2169,  0.0064,  0.5112, -2.0349, -1.2916, -0.3539,  0.5021,
         -0.9767,  1.5433,  0.4574,  0.2371,  0.4330, -0.1794, -0.2017,  0.5175,
         -0.1973,  0.7876, -0.0273, -0.0382,  0.2703, -0.2017, -0.5504,  0.6239,
          0.5204,  1.4480, -0.0053, -0.3075, -0.6804,  0.1601, -0.7575, -0.4294]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
397000 特征值优化 tensor(8.2833, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1515,  0.0384, -0.2942, -0.1362, -0.4434,  0.4653, -0.4325,  0.6319,
          0.0117,  0.3936,  0.2808, -0.0376, -1.4196, -0.5010,  0.0243, -0.0706,
          0.0025, -0.0075,  0.0026, -0.1381, -0.0783,  0.1200, -0.1155,  0.1736,
         -0.0618,  0.0941,  0.0524, -0.0025,  0.0394,  0.0540,  0.0681,  0.0153,
         -0.0146, -0.0192, -0.0137,  0.1366,  0.0341,  0.0510,  0.0669, -0.3251,
          0.1927,  0.1460, -0.3371,  0.5942, -1.3135, -0.5953,  0.0135,  0.0709,
         -0.8496,  1.0844,  0.2182,  0.0368,  0.0835,  0.0482, -0.0285,  0.1596,
         -0.1308,  0.3677, -0.2184, -0.1367, -0.1605,  0.0897, -0.3499,  0.1934,
          0.0183,  0.7689, -0.0345, -0.0117, -0.4722, -0.0149, -0.2219, -0.1069]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
398000 特征值优化 tensor(1.5121, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3599,  0.2367, -0.3118, -0.1756, -0.4508,  0.4020, -0.4405,  0.5831,
         -0.3400,  0.7120,  0.2248, -0.1238, -0.4262, -0.2119,  0.0251,  0.0022,
         -0.0302,  0.0364, -0.0565,  0.0046,  0.0406,  0.1235, -0.1318,  0.1123,
         -0.2304,  0.0164,  0.1297, -0.0798,  0.0977,  0.0542,  0.0674,  0.0216,
         -0.0746, -0.0160,  0.0205,  0.1480,  0.0032,  0.0538,  0.0675, -0.1845,
          0.2123,  0.1202, -0.1894,  0.2481, -0.4822, -0.1919,  0.1566, -0.0266,
         -0.3450,  0.7024,  0.2519,  0.0298,  0.1095,  0.0373, -0.2470,  0.0937,
          0.1966,  0.2225, -0.1333, -0.1832, -0.2029,  0.0698, -0.3625,  0.1278,
          0.1043,  0.4655, -0.0183, -0.0475, -0.4165,  0.0047, -0.3874, -0.1625]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
399000 特征值优化 tensor(0.5925, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5807,  0.2055, -0.2933, -0.1292, -0.4849,  0.5370, -0.4727,  0.3709,
         -0.4239,  1.3857,  0.3513, -0.1625, -0.2209, -0.2707,  0.0756,  0.0391,
         -0.1137,  0.0101, -0.1005,  0.0172,  0.0586,  0.1157, -0.0507,  0.0768,
         -0.1636,  0.0216,  0.0805, -0.1899,  0.0862,  0.0599,  0.0594, -0.0039,
         -0.0652, -0.0215, -0.0242,  0.1398, -0.0290, -0.0365,  0.0631, -0.0752,
          0.2283,  0.1078, -0.2144,  0.2183, -0.2892, -0.1278,  0.1148, -0.0715,
         -0.3757,  0.7338,  0.1965,  0.0503,  0.0090,  0.0878,  0.0451,  0.0067,
          0.1378,  0.2622, -0.0681,  0.1115, -0.3998,  0.1210, -0.2409,  0.0287,
          0.4659,  0.2870, -0.0331,  0.0191, -0.3902,  0.0175, -0.5087, -0.1083]],
       device='cuda:0') tensor(0.2039, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
400000 特征值优化 tensor(0.5776, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.9188e-01,  2.2009e-01, -3.0256e-01, -1.1400e-01, -4.9836e-01,
          5.3385e-01, -4.7965e-01,  4.2728e-01, -4.7984e-01,  1.5852e+00,
          3.8390e-01, -1.6156e-01, -2.2048e-01, -2.4259e-01,  4.8337e-02,
          3.2250e-02, -1.6492e-01,  1.7976e-02, -7.6935e-02, -2.8057e-03,
          5.7812e-02,  1.2073e-01, -6.2217e-02,  8.4070e-02, -1.7635e-01,
         -5.4988e-02,  1.6100e-02, -1.1139e-01,  6.7198e-02,  5.5357e-02,
          6.2054e-02,  1.2422e-02, -5.4323e-02, -2.1199e-02, -1.6156e-02,
          6.6255e-02, -3.2385e-02,  8.7168e-04,  6.6080e-02, -8.7822e-02,
          2.2671e-01,  9.7937e-02, -2.1849e-01,  2.3021e-01, -2.9426e-01,
         -1.4190e-01,  1.2108e-01, -8.3549e-02, -3.5250e-01,  7.4524e-01,
          2.3892e-01,  3.0032e-02, -2.2914e-02,  1.0789e-01, -3.2048e-02,
          8.0303e-04,  2.0587e-01,  2.2466e-01,  3.1746e-02,  5.9157e-02,
         -3.7684e-01,  1.2240e-01, -2.1900e-01,  4.8279e-02,  3.8806e-01,
          2.4160e-01, -4.4389e-02,  5.7215e-03, -4.0978e-01,  1.1871e-02,
         -4.0015e-01, -9.6036e-02]], device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
401000 特征值优化 tensor(0.5663, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5821,  0.2573, -0.2799, -0.1389, -0.4834,  0.4663, -0.4880,  0.5070,
         -0.4884,  1.7349,  0.3649, -0.1812, -0.2204, -0.2381,  0.0121,  0.0561,
         -0.1540, -0.0175, -0.0745, -0.0172,  0.0563,  0.1181, -0.0458,  0.1466,
         -0.0929,  0.0054,  0.1046, -0.1200,  0.0625,  0.0558,  0.0624,  0.0307,
         -0.0808, -0.0118, -0.0092, -0.0037, -0.0191, -0.0249,  0.0631, -0.0794,
          0.2217,  0.0924, -0.2153,  0.2316, -0.2916, -0.1560,  0.1221, -0.0939,
         -0.3532,  0.7472,  0.2564,  0.0193, -0.0353,  0.1157, -0.0068,  0.0068,
          0.1704,  0.2325, -0.0397, -0.0154, -0.3286,  0.0805, -0.2479,  0.0552,
          0.3948,  0.2093, -0.0482,  0.0102, -0.4129,  0.0340, -0.3570, -0.0822]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
402000 特征值优化 tensor(0.5682, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5891,  0.2496, -0.2886, -0.1124, -0.4601,  0.4286, -0.4990,  0.5078,
         -0.4798,  1.6888,  0.3884, -0.1683, -0.2215, -0.2427,  0.0334,  0.0454,
         -0.1581,  0.0195, -0.0560, -0.0190,  0.0602,  0.1209, -0.0331,  0.1188,
         -0.1635, -0.0781,  0.0090, -0.0618,  0.0687,  0.0559,  0.0586,  0.0211,
         -0.0687, -0.0091,  0.0175,  0.0630, -0.0181,  0.0100,  0.0619, -0.0837,
          0.2236,  0.0925, -0.2163,  0.2269, -0.2849, -0.1504,  0.1150, -0.0872,
         -0.3544,  0.7507,  0.2271,  0.0327, -0.0548,  0.1320,  0.0469, -0.0140,
          0.1884,  0.2221,  0.0405,  0.0440, -0.3244,  0.0878, -0.2806,  0.0929,
          0.3819,  0.2211, -0.0384,  0.0078, -0.4150,  0.0159, -0.3635, -0.0908]],
       device='cuda:0') tensor(0.2036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
403000 特征值优化 tensor(0.5710, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.8734e-01,  2.4606e-01, -2.6521e-01, -1.4509e-01, -4.8049e-01,
          4.5776e-01, -4.7968e-01,  4.6414e-01, -4.8688e-01,  1.6718e+00,
          3.5037e-01, -1.9438e-01, -2.2164e-01, -2.4331e-01,  3.2873e-03,
          6.5803e-02, -1.5002e-01, -2.0403e-02, -7.7153e-02, -2.3107e-02,
          5.9937e-02,  1.1965e-01, -3.6861e-02,  1.2666e-01, -1.0240e-01,
         -1.9625e-02,  1.0629e-01, -1.2616e-01,  6.3932e-02,  5.5789e-02,
          6.5143e-02,  3.4275e-02, -7.2750e-02, -1.1312e-02, -2.8382e-02,
          4.5199e-02, -2.8996e-02, -1.4206e-02,  8.8951e-02, -9.1019e-02,
          2.3274e-01,  7.7947e-02, -2.1633e-01,  2.2691e-01, -2.8487e-01,
         -1.4550e-01,  1.1337e-01, -9.8460e-02, -3.5282e-01,  7.4943e-01,
          2.5756e-01,  2.0610e-02, -4.7411e-02,  1.2279e-01, -3.5705e-03,
          6.3382e-03,  2.2207e-01,  2.1168e-01, -6.5132e-02, -6.3266e-02,
         -3.2759e-01,  7.4966e-02, -2.7535e-01,  3.7328e-02,  3.7504e-01,
          2.1316e-01, -4.6547e-02, -1.0754e-03, -4.1083e-01,  3.7990e-02,
         -3.9008e-01, -7.4381e-02]], device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
404000 特征值优化 tensor(0.5719, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5765,  0.2515, -0.2584, -0.1546, -0.5055,  0.4440, -0.4480,  0.4136,
         -0.4583,  1.6775,  0.3241, -0.1669, -0.2202, -0.2445,  0.0022,  0.0911,
         -0.1511,  0.0084, -0.0733, -0.0167,  0.0577,  0.1213, -0.0509,  0.1168,
         -0.0472, -0.0703,  0.0824, -0.1252,  0.0612,  0.0536,  0.0586,  0.0345,
         -0.0726, -0.0137, -0.0261,  0.0606, -0.0307, -0.0403,  0.0693, -0.0865,
          0.2346,  0.0889, -0.2111,  0.2294, -0.2940, -0.1536,  0.1194, -0.0987,
         -0.3531,  0.7522,  0.2659,  0.0136, -0.0764,  0.1311, -0.0479,  0.0088,
          0.2326,  0.2038, -0.0910, -0.1098, -0.3248,  0.0601, -0.2750,  0.0202,
          0.3642,  0.2397, -0.0509,  0.0127, -0.3887,  0.0386, -0.3919, -0.0793]],
       device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
405000 特征值优化 tensor(0.5733, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.8772e-01,  2.5178e-01, -2.9127e-01, -1.1385e-01, -4.8490e-01,
          4.6206e-01, -4.9585e-01,  4.5933e-01, -4.6128e-01,  1.6337e+00,
          3.7766e-01, -1.8994e-01, -2.2159e-01, -2.4139e-01,  3.6377e-02,
          4.9967e-02, -1.5931e-01,  1.7366e-02, -5.3342e-02, -2.0486e-02,
          5.9521e-02,  1.2129e-01, -4.8483e-02,  1.0660e-01, -1.2073e-01,
         -1.2448e-01,  3.5180e-02, -9.2210e-02,  6.2051e-02,  5.5197e-02,
          6.0291e-02,  2.4673e-02, -6.6044e-02, -1.4587e-02, -1.6679e-02,
          6.1949e-02, -1.7577e-02, -1.5516e-03,  7.0338e-02, -7.8559e-02,
          2.2129e-01,  9.2919e-02, -2.1638e-01,  2.2913e-01, -2.8753e-01,
         -1.5222e-01,  1.1535e-01, -8.6153e-02, -3.5136e-01,  7.4577e-01,
          2.5665e-01,  2.0934e-02, -5.2967e-02,  1.2512e-01, -9.4556e-03,
          1.1404e-02,  2.3037e-01,  2.1075e-01,  1.4932e-02,  2.6895e-02,
         -3.2566e-01,  9.4277e-02, -2.5537e-01,  7.3770e-02,  3.7956e-01,
          2.2562e-01, -5.3514e-02,  1.5190e-03, -4.1598e-01,  1.5193e-02,
         -4.0735e-01, -8.0901e-02]], device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
406000 特征值优化 tensor(0.6201, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5895,  0.2445, -0.2618, -0.1448, -0.4823,  0.4538, -0.4567,  0.4006,
         -0.4691,  1.7504,  0.3295, -0.1732, -0.2218, -0.2483,  0.0084,  0.0716,
         -0.1380,  0.0019, -0.0692, -0.0279,  0.0624,  0.1174, -0.0473,  0.1402,
         -0.0462, -0.0611,  0.0832, -0.1331,  0.0613,  0.0572,  0.0666,  0.0288,
         -0.0673, -0.0214, -0.0180,  0.0471, -0.0182, -0.0179,  0.0808, -0.0854,
          0.2225,  0.0752, -0.2159,  0.2276, -0.2915, -0.1465,  0.1122, -0.1052,
         -0.3536,  0.7485,  0.2673,  0.0142, -0.0484,  0.1248,  0.0079, -0.0089,
          0.2219,  0.2253, -0.0533, -0.0765, -0.3149,  0.0779, -0.2567,  0.0404,
          0.3338,  0.1910, -0.0901,  0.0172, -0.4220,  0.0346, -0.3530, -0.0647]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
407000 特征值优化 tensor(0.5672, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5912,  0.2493, -0.2917, -0.1161, -0.4649,  0.4178, -0.5092,  0.4569,
         -0.4406,  1.6685,  0.3942, -0.1886, -0.2215, -0.2465,  0.0137,  0.0715,
         -0.1278,  0.0382, -0.0702, -0.0254,  0.0603,  0.1192, -0.0636,  0.1104,
         -0.1339, -0.1587,  0.0367, -0.0317,  0.0653,  0.0555,  0.0614,  0.0276,
         -0.0629, -0.0112,  0.0206,  0.0726, -0.0212, -0.0028,  0.0482, -0.0745,
          0.2269,  0.1024, -0.2180,  0.2281, -0.2841, -0.1449,  0.1113, -0.0881,
         -0.3524,  0.7457,  0.2427,  0.0258, -0.0457,  0.1284, -0.0065, -0.0097,
          0.2006,  0.2120,  0.0263,  0.0377, -0.3267,  0.0894, -0.2623,  0.0719,
          0.3814,  0.2324, -0.0260, -0.0020, -0.4154,  0.0209, -0.3746, -0.0926]],
       device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
408000 特征值优化 tensor(0.5723, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5746,  0.2525, -0.2768, -0.1198, -0.4628,  0.4602, -0.5123,  0.4892,
         -0.4357,  1.6712,  0.3812, -0.1997, -0.2203, -0.2438,  0.0135,  0.0608,
         -0.1639,  0.0046, -0.0701, -0.0152,  0.0573,  0.1213, -0.0534,  0.1316,
         -0.0480, -0.0630,  0.1163, -0.1142,  0.0648,  0.0572,  0.0648,  0.0367,
         -0.0720, -0.0103, -0.0427,  0.0344, -0.0168, -0.0257,  0.0694, -0.0856,
          0.2205,  0.0874, -0.2107,  0.2325, -0.2971, -0.1562,  0.1204, -0.0900,
         -0.3508,  0.7517,  0.2485,  0.0207, -0.0642,  0.1255,  0.0132,  0.0047,
          0.2374,  0.2063, -0.0454, -0.0384, -0.3147,  0.0807, -0.2290,  0.0545,
          0.3521,  0.2413, -0.0476,  0.0035, -0.4267,  0.0340, -0.3931, -0.0805]],
       device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
409000 特征值优化 tensor(0.5734, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.8018e-01,  2.5382e-01, -2.8265e-01, -1.1469e-01, -4.7230e-01,
          4.6139e-01, -5.1707e-01,  4.9518e-01, -4.2496e-01,  1.6427e+00,
          3.8650e-01, -2.0230e-01, -2.2125e-01, -2.3704e-01,  1.0659e-02,
          5.6925e-02, -1.7140e-01,  1.3645e-03, -7.0456e-02, -1.6671e-02,
          5.8444e-02,  1.2011e-01, -4.4857e-02,  1.3242e-01, -6.1363e-02,
         -7.0218e-02,  1.1916e-01, -1.0303e-01,  6.4648e-02,  5.8163e-02,
          6.3896e-02,  3.2478e-02, -6.9122e-02, -9.1044e-03, -3.6363e-02,
          3.9052e-02, -1.6071e-02, -2.1515e-02,  6.7335e-02, -8.5314e-02,
          2.2045e-01,  8.9297e-02, -2.1403e-01,  2.3388e-01, -2.9661e-01,
         -1.5610e-01,  1.1971e-01, -8.9653e-02, -3.4823e-01,  7.4713e-01,
          2.4662e-01,  2.1875e-02, -5.4494e-02,  1.2568e-01,  1.1473e-02,
         -2.3264e-03,  2.3242e-01,  2.0520e-01, -3.5990e-02, -2.9202e-02,
         -3.1570e-01,  8.1719e-02, -2.3422e-01,  6.0920e-02,  3.6404e-01,
          2.4596e-01, -4.6478e-02,  1.6222e-03, -4.2533e-01,  3.2046e-02,
         -4.0576e-01, -8.3743e-02]], device='cuda:0') tensor(0.2088, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
410000 特征值优化 tensor(0.5772, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.8806e-01,  2.4328e-01, -2.9673e-01, -1.0899e-01, -4.7299e-01,
          4.4989e-01, -5.2167e-01,  4.9454e-01, -4.1541e-01,  1.6482e+00,
          3.8089e-01, -1.9617e-01, -2.2201e-01, -2.4214e-01,  6.7558e-03,
          5.5649e-02, -1.6263e-01,  6.5683e-03, -6.3112e-02, -1.9105e-02,
          6.1326e-02,  1.1804e-01, -4.7502e-02,  1.2821e-01, -6.6430e-02,
         -8.0614e-02,  1.2145e-01, -9.2342e-02,  6.4211e-02,  5.8851e-02,
          6.1068e-02,  2.6479e-02, -6.4702e-02, -7.6298e-03, -3.3783e-02,
          3.6839e-02, -1.3427e-02, -1.6108e-02,  6.4602e-02, -8.3947e-02,
          2.1836e-01,  9.3429e-02, -2.1808e-01,  2.3062e-01, -2.8760e-01,
         -1.5136e-01,  1.1489e-01, -8.2509e-02, -3.5344e-01,  7.4311e-01,
          2.4343e-01,  2.4523e-02, -5.7647e-02,  1.2915e-01, -4.6750e-04,
         -1.8539e-02,  2.3512e-01,  2.0669e-01, -2.4315e-02, -9.5065e-03,
         -3.1480e-01,  7.9662e-02, -2.6915e-01,  7.9941e-02,  3.5578e-01,
          2.4218e-01, -4.7542e-02, -2.6628e-03, -4.1789e-01,  2.6529e-02,
         -3.9070e-01, -8.1342e-02]], device='cuda:0') tensor(0.2044, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
411000 特征值优化 tensor(0.5704, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5838,  0.2474, -0.2685, -0.1244, -0.4708,  0.4615, -0.5098,  0.4666,
         -0.4456,  1.6902,  0.3835, -0.2299, -0.2218, -0.2433,  0.0133,  0.0677,
         -0.1622,  0.0098, -0.0694, -0.0186,  0.0601,  0.1221, -0.0461,  0.1411,
         -0.0340, -0.0845,  0.1080, -0.1173,  0.0649,  0.0566,  0.0619,  0.0311,
         -0.0686, -0.0087, -0.0437,  0.0241, -0.0150, -0.0276,  0.0824, -0.0897,
          0.2200,  0.0826, -0.2148,  0.2300, -0.2865, -0.1519,  0.1160, -0.0872,
         -0.3355,  0.7392,  0.2430,  0.0219, -0.0603,  0.1237,  0.0273,  0.0136,
          0.2324,  0.2057, -0.0521, -0.0411, -0.3176,  0.0817, -0.2358,  0.0569,
          0.3505,  0.2223, -0.0436, -0.0057, -0.4241,  0.0317, -0.3942, -0.0724]],
       device='cuda:0') tensor(0.2032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
412000 特征值优化 tensor(0.5698, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.7873e-01,  2.4259e-01, -2.7481e-01, -1.2153e-01, -4.5763e-01,
          4.5507e-01, -5.1707e-01,  5.0005e-01, -4.4370e-01,  1.7114e+00,
          3.8891e-01, -2.2038e-01, -2.2157e-01, -2.4175e-01,  1.0064e-02,
          6.5736e-02, -1.7442e-01, -1.4767e-03, -6.2827e-02, -1.6656e-02,
          5.9776e-02,  1.2115e-01, -5.0903e-02,  1.3883e-01, -9.8517e-03,
         -7.3933e-02,  1.0599e-01, -1.3050e-01,  6.3252e-02,  5.8141e-02,
          6.5179e-02,  4.5165e-02, -7.8470e-02, -1.1982e-02, -5.4622e-02,
          2.7162e-02, -1.6891e-02, -2.3014e-02,  8.3203e-02, -8.6455e-02,
          2.2040e-01,  8.0133e-02, -2.1235e-01,  2.2904e-01, -2.8685e-01,
         -1.4911e-01,  1.1670e-01, -9.0097e-02, -3.5185e-01,  7.5195e-01,
          2.5074e-01,  2.1025e-02, -5.0232e-02,  1.1830e-01,  2.1226e-02,
          1.9877e-02,  2.4496e-01,  2.0174e-01, -5.7547e-02, -5.1991e-02,
         -3.1505e-01,  8.3210e-02, -1.9827e-01,  4.6374e-02,  3.3157e-01,
          2.2451e-01, -6.1308e-02,  1.2933e-03, -4.3980e-01,  3.8544e-02,
         -3.7520e-01, -6.9895e-02]], device='cuda:0') tensor(0.2062, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
413000 特征值优化 tensor(0.5873, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.9326e-01,  2.4197e-01, -3.0941e-01, -1.1105e-01, -4.7837e-01,
          4.3687e-01, -5.2297e-01,  4.9828e-01, -4.0936e-01,  1.6498e+00,
          3.9305e-01, -1.9666e-01, -2.2265e-01, -2.3797e-01, -1.9167e-03,
          4.9376e-02, -1.4679e-01, -1.3958e-03, -6.5836e-02, -1.7632e-02,
          6.3821e-02,  1.1959e-01, -5.1173e-02,  1.2756e-01, -7.9846e-02,
         -1.0453e-01,  1.0370e-01, -7.5088e-02,  6.6365e-02,  5.7145e-02,
          6.3521e-02,  2.6117e-02, -6.3129e-02, -1.4448e-02, -2.0014e-02,
          3.8554e-02, -1.5665e-02, -1.6516e-02,  6.1388e-02, -8.0799e-02,
          2.1866e-01,  9.7930e-02, -2.1652e-01,  2.3176e-01, -2.9006e-01,
         -1.5390e-01,  1.1545e-01, -8.2129e-02, -3.5225e-01,  7.4537e-01,
          2.4342e-01,  2.4703e-02, -6.4920e-02,  1.2806e-01, -1.5188e-03,
         -8.7538e-03,  2.4111e-01,  2.2227e-01, -4.0038e-03,  8.6118e-03,
         -3.0517e-01,  7.9835e-02, -2.6798e-01,  8.6299e-02,  3.5587e-01,
          2.2454e-01, -5.9992e-02,  7.4378e-03, -4.2285e-01,  3.0035e-02,
         -3.8237e-01, -8.9699e-02]], device='cuda:0') tensor(0.2033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
414000 特征值优化 tensor(0.5724, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.7677e-01,  2.5645e-01, -2.7698e-01, -1.1714e-01, -4.6692e-01,
          4.5482e-01, -5.1744e-01,  4.5443e-01, -4.1704e-01,  1.6692e+00,
          3.8531e-01, -2.1873e-01, -2.2025e-01, -2.4317e-01,  1.6860e-02,
          6.3356e-02, -1.6204e-01,  1.0587e-02, -7.0286e-02, -1.7291e-02,
          5.7442e-02,  1.2161e-01, -5.0501e-02,  1.3486e-01, -4.3495e-02,
         -7.2625e-02,  1.1588e-01, -1.1598e-01,  6.4653e-02,  5.7624e-02,
          6.4662e-02,  2.9786e-02, -6.8873e-02, -1.2113e-02, -3.4239e-02,
          3.5274e-02, -1.8009e-02, -2.8954e-02,  6.9248e-02, -8.6393e-02,
          2.2107e-01,  8.8045e-02, -2.1192e-01,  2.3149e-01, -2.9596e-01,
         -1.5578e-01,  1.1993e-01, -8.9092e-02, -3.5095e-01,  7.5261e-01,
          2.4682e-01,  2.2023e-02, -6.7347e-02,  1.2938e-01, -3.5683e-02,
          1.0246e-02,  2.3275e-01,  2.0508e-01, -4.7833e-02, -3.8365e-02,
         -3.0950e-01,  7.5709e-02, -2.4695e-01,  5.5125e-02,  3.5821e-01,
          2.4121e-01, -4.6437e-02, -1.4077e-03, -4.2564e-01,  3.4368e-02,
         -3.9383e-01, -8.0079e-02]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
415000 特征值优化 tensor(0.5671, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5941,  0.2510, -0.2909, -0.1171, -0.4793,  0.4276, -0.5220,  0.4775,
         -0.4178,  1.6659,  0.4274, -0.2053, -0.2220, -0.2443,  0.0376,  0.0332,
         -0.1518,  0.0188, -0.0563, -0.0258,  0.0602,  0.1194, -0.0709,  0.1056,
         -0.1273, -0.1415,  0.0577, -0.0134,  0.0633,  0.0567,  0.0652,  0.0141,
         -0.0771, -0.0050,  0.0073,  0.0665, -0.0240,  0.0098,  0.0525, -0.0789,
          0.2247,  0.0974, -0.2186,  0.2275, -0.2834, -0.1473,  0.1120, -0.0885,
         -0.3510,  0.7448,  0.2475,  0.0222, -0.0412,  0.1204,  0.0143, -0.0225,
          0.2021,  0.2125,  0.0343,  0.0328, -0.3126,  0.0941, -0.2649,  0.0980,
          0.3760,  0.2369, -0.0462,  0.0029, -0.4456,  0.0234, -0.3742, -0.0934]],
       device='cuda:0') tensor(0.2107, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
416000 特征值优化 tensor(0.5719, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5792,  0.2603, -0.2771, -0.1272, -0.4779,  0.4378, -0.5242,  0.4716,
         -0.4090,  1.6659,  0.3898, -0.2240, -0.2200, -0.2415,  0.0164,  0.0614,
         -0.1596,  0.0039, -0.0732, -0.0168,  0.0578,  0.1228, -0.0572,  0.1284,
         -0.0490, -0.0635,  0.1112, -0.1219,  0.0627,  0.0544,  0.0582,  0.0310,
         -0.0697, -0.0153, -0.0366,  0.0300, -0.0131, -0.0298,  0.0663, -0.0849,
          0.2188,  0.0908, -0.2130,  0.2328, -0.2974, -0.1580,  0.1209, -0.0877,
         -0.3524,  0.7520,  0.2502,  0.0170, -0.0599,  0.1238, -0.0228, -0.0188,
          0.2384,  0.1995, -0.0532, -0.0488, -0.3131,  0.0764, -0.2357,  0.0564,
          0.3529,  0.2463, -0.0438, -0.0030, -0.4252,  0.0328, -0.3948, -0.0829]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
417000 特征值优化 tensor(0.5689, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5834,  0.2546, -0.2692, -0.1314, -0.5025,  0.4444, -0.4976,  0.4366,
         -0.4202,  1.7077,  0.3787, -0.2308, -0.2212, -0.2361,  0.0099,  0.0701,
         -0.1674,  0.0028, -0.0665, -0.0183,  0.0589,  0.1215, -0.0513,  0.1316,
         -0.0309, -0.0661,  0.1039, -0.1309,  0.0625,  0.0549,  0.0604,  0.0302,
         -0.0732, -0.0070, -0.0480,  0.0174, -0.0204, -0.0255,  0.0718, -0.0856,
          0.2238,  0.0868, -0.2165,  0.2331, -0.2916, -0.1545,  0.1172, -0.0893,
         -0.3391,  0.7402,  0.2528,  0.0163, -0.0479,  0.1181,  0.0033,  0.0043,
          0.2533,  0.1900, -0.0508, -0.0557, -0.3117,  0.0758, -0.2498,  0.0478,
          0.3475,  0.2326, -0.0491, -0.0036, -0.4302,  0.0373, -0.4089, -0.0617]],
       device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
418000 特征值优化 tensor(0.5750, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5767,  0.2566, -0.2958, -0.1036, -0.4634,  0.4312, -0.4914,  0.4044,
         -0.3965,  1.6799,  0.3726, -0.1967, -0.2206, -0.2439,  0.0193,  0.0723,
         -0.1411,  0.0393, -0.0838, -0.0222,  0.0563,  0.1179, -0.0701,  0.1040,
         -0.0867, -0.1118,  0.0824, -0.0667,  0.0606,  0.0577,  0.0640,  0.0265,
         -0.0664, -0.0156, -0.0163,  0.0526, -0.0226, -0.0238,  0.0497, -0.0786,
          0.2224,  0.1079, -0.2137,  0.2347, -0.3012, -0.1545,  0.1184, -0.0877,
         -0.3529,  0.7401,  0.2565,  0.0209, -0.0669,  0.1310,  0.0026, -0.0024,
          0.2354,  0.2119,  0.0136,  0.0137, -0.3045,  0.0776, -0.2673,  0.0599,
          0.3486,  0.2374, -0.0687,  0.0066, -0.4224,  0.0253, -0.3780, -0.0758]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
419000 特征值优化 tensor(0.5763, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.8502e-01,  2.5058e-01, -2.9091e-01, -1.0628e-01, -4.8353e-01,
          4.4939e-01, -5.3842e-01,  4.7560e-01, -4.0621e-01,  1.6631e+00,
          4.1105e-01, -2.2927e-01, -2.2201e-01, -2.3850e-01,  1.3364e-02,
          6.1757e-02, -1.6611e-01,  2.3645e-03, -6.2278e-02, -1.9695e-02,
          6.0369e-02,  1.1788e-01, -5.0053e-02,  1.3335e-01, -6.1839e-02,
         -7.8260e-02,  1.2558e-01, -9.0722e-02,  6.3746e-02,  5.9520e-02,
          6.2711e-02,  3.0179e-02, -6.8437e-02, -8.5940e-03, -3.2039e-02,
          3.9225e-02, -1.2737e-02, -2.4440e-02,  6.2720e-02, -8.6125e-02,
          2.1948e-01,  9.9221e-02, -2.1456e-01,  2.3093e-01, -2.8822e-01,
         -1.5327e-01,  1.1510e-01, -8.3037e-02, -3.3414e-01,  7.2548e-01,
          2.4221e-01,  2.5066e-02, -5.1977e-02,  1.2605e-01, -4.1463e-04,
         -1.4419e-02,  2.3872e-01,  2.0573e-01, -1.5935e-02, -1.8291e-02,
         -3.0818e-01,  7.8490e-02, -2.3755e-01,  7.0076e-02,  3.6882e-01,
          2.3100e-01, -5.5790e-02, -1.7005e-03, -4.2992e-01,  2.9813e-02,
         -4.1089e-01, -7.1513e-02]], device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
420000 特征值优化 tensor(0.5728, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5915,  0.2512, -0.2742, -0.1199, -0.4754,  0.4941, -0.5294,  0.4373,
         -0.4211,  1.6784,  0.3843, -0.2400, -0.2222, -0.2387,  0.0163,  0.0618,
         -0.1660,  0.0034, -0.0654, -0.0238,  0.0598,  0.1214, -0.0361,  0.1436,
         -0.0327, -0.0855,  0.1153, -0.1101,  0.0639,  0.0582,  0.0645,  0.0258,
         -0.0711, -0.0179, -0.0436,  0.0403, -0.0222, -0.0291,  0.0868, -0.0888,
          0.2246,  0.0876, -0.2185,  0.2285, -0.2845, -0.1499,  0.1130, -0.0894,
         -0.3521,  0.7517,  0.2476,  0.0220, -0.0498,  0.1247,  0.0210, -0.0161,
          0.2469,  0.2066, -0.0371, -0.0283, -0.3075,  0.0699, -0.2652,  0.0549,
          0.3350,  0.2258, -0.0678, -0.0058, -0.4351,  0.0423, -0.3780, -0.0706]],
       device='cuda:0') tensor(0.2042, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
421000 特征值优化 tensor(0.5699, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.8375e-01,  2.4637e-01, -2.5943e-01, -1.4681e-01, -4.8315e-01,
          4.6859e-01, -4.9320e-01,  3.5394e-01, -4.3800e-01,  1.7275e+00,
          3.5997e-01, -2.4572e-01, -2.2172e-01, -2.4561e-01,  1.0809e-02,
          7.8945e-02, -1.4408e-01,  4.8398e-04, -7.1190e-02, -2.0643e-02,
          5.9832e-02,  1.2087e-01, -4.4972e-02,  1.2206e-01, -2.9081e-02,
         -7.1578e-02,  1.0122e-01, -1.4428e-01,  6.0302e-02,  5.6272e-02,
          6.3519e-02,  2.8956e-02, -7.5530e-02, -1.3975e-02, -3.9374e-02,
          4.9689e-02, -3.3933e-02, -4.0127e-02,  9.1165e-02, -8.9532e-02,
          2.3688e-01,  7.6545e-02, -2.1439e-01,  2.2797e-01, -2.8618e-01,
         -1.4710e-01,  1.1401e-01, -9.8957e-02, -3.5153e-01,  7.5071e-01,
          2.7029e-01,  1.5060e-02, -5.8111e-02,  1.2778e-01,  1.9274e-02,
         -1.1508e-02,  2.4874e-01,  2.0236e-01, -5.7780e-02, -6.6100e-02,
         -2.9493e-01,  6.6102e-02, -2.6352e-01,  1.8153e-02,  3.2490e-01,
          2.1709e-01, -8.7909e-02,  6.4000e-03, -4.3048e-01,  4.1450e-02,
         -3.7077e-01, -6.2783e-02]], device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
422000 特征值优化 tensor(0.5687, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.8527e-01,  2.4970e-01, -2.8827e-01, -1.1675e-01, -4.8926e-01,
          4.3314e-01, -5.5151e-01,  4.5096e-01, -4.1197e-01,  1.6636e+00,
          4.3924e-01, -2.3403e-01, -2.2162e-01, -2.4008e-01,  2.9211e-02,
          5.4385e-02, -1.4907e-01,  3.7834e-02, -6.9623e-02, -2.0231e-02,
          5.9223e-02,  1.1965e-01, -6.0407e-02,  1.0344e-01, -1.2949e-01,
         -1.5746e-01,  5.1104e-02, -4.0112e-02,  6.0233e-02,  5.6415e-02,
          6.2305e-02,  2.7184e-02, -6.6863e-02, -7.7459e-03, -3.1385e-04,
          6.7348e-02, -1.6809e-02, -2.4533e-02,  6.1409e-02, -8.1823e-02,
          2.2053e-01,  9.3205e-02, -2.1659e-01,  2.2990e-01, -2.8848e-01,
         -1.5042e-01,  1.1527e-01, -8.8593e-02, -3.5036e-01,  7.4280e-01,
          2.6047e-01,  1.6800e-02, -6.0335e-02,  1.2764e-01, -2.1103e-02,
         -3.5900e-03,  2.0524e-01,  2.1129e-01,  3.1211e-02,  2.7186e-02,
         -2.9259e-01,  7.6074e-02, -2.3033e-01,  7.2009e-02,  3.8975e-01,
          2.2263e-01, -5.6060e-02,  2.3882e-04, -4.4182e-01,  3.2038e-02,
         -3.9262e-01, -8.3030e-02]], device='cuda:0') tensor(0.2036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
423000 特征值优化 tensor(0.5677, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.8845e-01,  2.4792e-01, -2.7385e-01, -1.2782e-01, -4.7374e-01,
          4.6147e-01, -5.5515e-01,  4.0095e-01, -4.0452e-01,  1.7310e+00,
          4.1047e-01, -2.4491e-01, -2.2138e-01, -2.4013e-01,  1.5651e-02,
          7.0034e-02, -1.6325e-01,  1.3575e-02, -6.3248e-02, -1.9701e-02,
          5.9898e-02,  1.2089e-01, -3.1512e-02,  1.6228e-01, -1.9699e-02,
         -9.5590e-02,  1.0802e-01, -1.0479e-01,  6.3453e-02,  5.7815e-02,
          6.2146e-02,  2.4559e-02, -7.2428e-02, -6.2448e-03, -3.5921e-02,
          1.6780e-02, -2.2430e-02, -4.5428e-02,  7.8398e-02, -9.0872e-02,
          2.2355e-01,  8.5699e-02, -2.1589e-01,  2.2717e-01, -2.8487e-01,
         -1.4887e-01,  1.1495e-01, -9.1992e-02, -3.5129e-01,  7.5209e-01,
          2.5653e-01,  1.9550e-02, -6.7656e-02,  1.3357e-01, -9.4568e-03,
          1.5026e-02,  1.9446e-01,  2.1654e-01, -7.4130e-02, -5.6742e-02,
         -2.8592e-01,  5.5364e-02, -2.6490e-01,  4.5439e-02,  3.5943e-01,
          2.1848e-01, -7.1103e-02,  8.7751e-04, -4.4248e-01,  4.5667e-02,
         -3.5395e-01, -7.4527e-02]], device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
424000 特征值优化 tensor(0.5730, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5815,  0.2491, -0.2942, -0.1063, -0.4711,  0.4114, -0.5573,  0.4076,
         -0.3742,  1.6811,  0.4315, -0.2217, -0.2216, -0.2458,  0.0110,  0.0819,
         -0.1319,  0.0438, -0.0692, -0.0200,  0.0597,  0.1205, -0.0664,  0.1049,
         -0.1020, -0.1132,  0.0797, -0.0515,  0.0604,  0.0551,  0.0613,  0.0280,
         -0.0669, -0.0099, -0.0102,  0.0551, -0.0099, -0.0433,  0.0484, -0.0774,
          0.2167,  0.1043, -0.2147,  0.2311, -0.2905, -0.1504,  0.1155, -0.0882,
         -0.3524,  0.7429,  0.2581,  0.0195, -0.0648,  0.1372,  0.0064,  0.0081,
          0.2211,  0.2047,  0.0259,  0.0222, -0.2899,  0.0709, -0.2321,  0.0622,
          0.3663,  0.2325, -0.0660,  0.0028, -0.4486,  0.0344, -0.3917, -0.0757]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
425000 特征值优化 tensor(0.5681, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5859,  0.2469, -0.2869, -0.1101, -0.4638,  0.4181, -0.5811,  0.4158,
         -0.3870,  1.6879,  0.4653, -0.2428, -0.2221, -0.2452,  0.0279,  0.0662,
         -0.1396,  0.0451, -0.0711, -0.0216,  0.0597,  0.1202, -0.0699,  0.1036,
         -0.0970, -0.1506,  0.0580, -0.0301,  0.0617,  0.0568,  0.0591,  0.0239,
         -0.0658, -0.0107,  0.0025,  0.0719, -0.0134, -0.0330,  0.0544, -0.0795,
          0.2195,  0.0973, -0.2161,  0.2288, -0.2873, -0.1472,  0.1142, -0.0885,
         -0.3502,  0.7450,  0.2545,  0.0212, -0.0650,  0.1360, -0.0019, -0.0154,
          0.2125,  0.2097,  0.0321,  0.0236, -0.2824,  0.0686, -0.2329,  0.0745,
          0.3689,  0.2307, -0.0643,  0.0051, -0.4582,  0.0381, -0.3745, -0.0862]],
       device='cuda:0') tensor(0.2033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
426000 特征值优化 tensor(0.5730, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5819,  0.2462, -0.2801, -0.1179, -0.4803,  0.4589, -0.5848,  0.3839,
         -0.3939,  1.6826,  0.4574, -0.2649, -0.2222, -0.2394,  0.0104,  0.0698,
         -0.1647,  0.0200, -0.0610, -0.0189,  0.0602,  0.1211, -0.0518,  0.1360,
         -0.0384, -0.0682,  0.1144, -0.1185,  0.0664,  0.0572,  0.0643,  0.0224,
         -0.0758, -0.0113, -0.0400,  0.0351, -0.0112, -0.0493,  0.0813, -0.0862,
          0.2148,  0.0839, -0.2153,  0.2306, -0.2862, -0.1513,  0.1166, -0.0877,
         -0.3530,  0.7511,  0.2376,  0.0255, -0.0576,  0.1251,  0.0116, -0.0154,
          0.2432,  0.2013, -0.0437, -0.0337, -0.2705,  0.0658, -0.2380,  0.0630,
          0.3382,  0.2300, -0.0639, -0.0062, -0.4503,  0.0381, -0.3873, -0.0733]],
       device='cuda:0') tensor(0.2053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
427000 特征值优化 tensor(0.5684, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.8990e-01,  2.5316e-01, -2.9073e-01, -1.1232e-01, -4.7662e-01,
          4.1955e-01, -5.7676e-01,  3.7968e-01, -3.7914e-01,  1.6630e+00,
          4.8609e-01, -2.4710e-01, -2.2166e-01, -2.4744e-01,  3.2493e-02,
          4.8650e-02, -1.5308e-01,  4.0036e-02, -4.2749e-02, -1.8823e-02,
          6.0048e-02,  1.1966e-01, -6.5063e-02,  1.0386e-01, -1.1769e-01,
         -1.4516e-01,  5.9621e-02, -3.0378e-02,  6.3252e-02,  5.6141e-02,
          6.6122e-02,  9.7094e-03, -7.9021e-02, -5.9122e-03, -4.0805e-03,
          6.0729e-02, -2.3811e-02, -1.2488e-02,  5.5811e-02, -8.1650e-02,
          2.2481e-01,  9.5309e-02, -2.1758e-01,  2.2945e-01, -2.8661e-01,
         -1.5247e-01,  1.1613e-01, -8.7521e-02, -3.5122e-01,  7.4394e-01,
          2.4818e-01,  2.2531e-02, -3.2181e-02,  1.1653e-01, -2.6926e-02,
          1.0729e-02,  2.0929e-01,  2.0882e-01,  2.4065e-02,  3.0809e-02,
         -2.6827e-01,  8.6174e-02, -2.4230e-01,  1.0119e-01,  3.7331e-01,
          2.3552e-01, -5.7556e-02, -5.6260e-04, -4.9446e-01,  3.5949e-02,
         -3.7928e-01, -9.1571e-02]], device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
428000 特征值优化 tensor(0.5713, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5778,  0.2585, -0.2753, -0.1220, -0.4736,  0.4565, -0.5951,  0.3821,
         -0.3801,  1.6748,  0.4604, -0.2708, -0.2204, -0.2397,  0.0112,  0.0695,
         -0.1626,  0.0177, -0.0661, -0.0168,  0.0580,  0.1205, -0.0513,  0.1310,
         -0.0536, -0.0627,  0.1091, -0.1211,  0.0637,  0.0570,  0.0611,  0.0235,
         -0.0690, -0.0118, -0.0462,  0.0208, -0.0076, -0.0458,  0.0680, -0.0841,
          0.2146,  0.0929, -0.2129,  0.2328, -0.2981, -0.1586,  0.1211, -0.0877,
         -0.3366,  0.7360,  0.2476,  0.0196, -0.0586,  0.1305,  0.0180, -0.0051,
          0.2517,  0.1965, -0.0419, -0.0363, -0.2717,  0.0687, -0.2357,  0.0655,
          0.3575,  0.2359, -0.0494, -0.0093, -0.4611,  0.0397, -0.4235, -0.0662]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
429000 特征值优化 tensor(0.6025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5962,  0.2432, -0.3071, -0.1123, -0.4804,  0.4216, -0.5973,  0.4071,
         -0.3503,  1.6458,  0.4911, -0.2447, -0.2231, -0.2314,  0.0152,  0.0525,
         -0.1489,  0.0132, -0.0564, -0.0173,  0.0641,  0.1168, -0.0537,  0.1242,
         -0.1187, -0.1204,  0.0889, -0.0378,  0.0668,  0.0602,  0.0660,  0.0190,
         -0.0717, -0.0132, -0.0139,  0.0391, -0.0103, -0.0312,  0.0534, -0.0812,
          0.2126,  0.0974, -0.2184,  0.2332, -0.2871, -0.1549,  0.1166, -0.0848,
         -0.3514,  0.7432,  0.2437,  0.0227, -0.0444,  0.1216,  0.0053, -0.0079,
          0.2257,  0.2302,  0.0158,  0.0309, -0.2583,  0.0665, -0.2422,  0.0916,
          0.3584,  0.2208, -0.0652,  0.0071, -0.4794,  0.0395, -0.3707, -0.1030]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
430000 特征值优化 tensor(0.6071, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5943,  0.2446, -0.3049, -0.1134, -0.4810,  0.4196, -0.5904,  0.3869,
         -0.3429,  1.6254,  0.4918, -0.2516, -0.2223, -0.2346,  0.0209,  0.0462,
         -0.1426,  0.0231, -0.0517, -0.0182,  0.0620,  0.1151, -0.0506,  0.1199,
         -0.1327, -0.1286,  0.0668, -0.0525,  0.0651,  0.0601,  0.0653,  0.0204,
         -0.0622, -0.0117, -0.0034,  0.0469, -0.0117, -0.0228,  0.0510, -0.0836,
          0.2148,  0.0987, -0.2169,  0.2316, -0.2872, -0.1565,  0.1178, -0.0836,
         -0.3525,  0.7441,  0.2451,  0.0218, -0.0417,  0.1214,  0.0238, -0.0129,
          0.2069,  0.2297,  0.0229,  0.0289, -0.2595,  0.0787, -0.2320,  0.0901,
          0.3761,  0.2256, -0.0577,  0.0017, -0.4877,  0.0409, -0.3742, -0.1085]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
431000 特征值优化 tensor(0.5750, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.8001e-01,  2.6208e-01, -2.7994e-01, -1.2655e-01, -5.0547e-01,
          4.3206e-01, -5.8320e-01,  3.5536e-01, -3.4561e-01,  1.7103e+00,
          4.7865e-01, -2.4429e-01, -2.1967e-01, -2.3587e-01,  2.5746e-02,
          5.7780e-02, -1.5618e-01,  3.5179e-02, -5.0281e-02, -1.7441e-02,
          5.8621e-02,  1.2290e-01, -5.6859e-02,  1.1107e-01, -1.2309e-01,
         -1.1012e-01,  6.5757e-02, -6.2562e-02,  6.0678e-02,  5.2446e-02,
          6.0527e-02,  1.3168e-02, -7.1704e-02, -1.6029e-02, -1.4601e-02,
          5.8101e-02, -1.7472e-02, -2.6075e-02,  5.3402e-02, -8.0488e-02,
          2.1797e-01,  9.8812e-02, -2.1374e-01,  2.3739e-01, -2.9956e-01,
         -1.5688e-01,  1.2105e-01, -9.0710e-02, -3.4936e-01,  7.4819e-01,
          2.6094e-01,  1.2280e-02, -4.9932e-02,  1.2108e-01, -6.0984e-05,
         -1.3055e-02,  2.1676e-01,  2.1097e-01,  2.5995e-02,  1.3489e-03,
         -2.6480e-01,  7.9001e-02, -2.3733e-01,  9.1232e-02,  3.4200e-01,
          2.2290e-01, -8.9998e-02,  9.5034e-03, -4.7736e-01,  3.1875e-02,
         -3.7155e-01, -7.0113e-02]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
432000 特征值优化 tensor(0.5775, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5855,  0.2496, -0.2897, -0.1132, -0.4742,  0.4712, -0.6109,  0.3923,
         -0.3536,  1.6558,  0.4771, -0.2831, -0.2221, -0.2434,  0.0111,  0.0625,
         -0.1595,  0.0250, -0.0579, -0.0193,  0.0607,  0.1193, -0.0501,  0.1309,
         -0.0770, -0.0768,  0.1056, -0.0956,  0.0648,  0.0581,  0.0633,  0.0214,
         -0.0712, -0.0178, -0.0307,  0.0370, -0.0077, -0.0467,  0.0679, -0.0836,
          0.2116,  0.0963, -0.2160,  0.2304, -0.2865, -0.1519,  0.1154, -0.0867,
         -0.3515,  0.7445,  0.2430,  0.0237, -0.0607,  0.1243, -0.0082,  0.0143,
          0.2375,  0.2175, -0.0203, -0.0086, -0.2626,  0.0661, -0.2426,  0.0766,
          0.3622,  0.2336, -0.0659, -0.0143, -0.4685,  0.0437, -0.3802, -0.0798]],
       device='cuda:0') tensor(0.2055, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
433000 特征值优化 tensor(0.5665, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.9140e-01,  2.4874e-01, -2.9022e-01, -1.1594e-01, -4.8830e-01,
          4.2703e-01, -5.8941e-01,  3.5951e-01, -3.5919e-01,  1.7045e+00,
          4.9688e-01, -2.8686e-01, -2.2138e-01, -2.4344e-01,  4.2888e-02,
          4.6116e-02, -1.5884e-01,  3.7957e-02, -3.9749e-02, -1.9861e-02,
          6.0766e-02,  1.1980e-01, -5.8520e-02,  1.0667e-01, -1.3785e-01,
         -1.6636e-01,  1.2255e-02, -1.6571e-02,  6.3633e-02,  5.5651e-02,
          6.5729e-02,  2.9824e-03, -8.4509e-02, -8.9931e-03, -9.9493e-04,
          5.1690e-02, -2.4279e-02, -2.0122e-02,  5.5131e-02, -8.0369e-02,
          2.2457e-01,  9.8247e-02, -2.1612e-01,  2.2535e-01, -2.8441e-01,
         -1.4861e-01,  1.1479e-01, -8.8677e-02, -3.5209e-01,  7.4612e-01,
          2.4677e-01,  2.3697e-02, -4.6974e-02,  1.2100e-01, -8.4741e-04,
          7.4673e-03,  1.8832e-01,  2.2302e-01,  2.6236e-02,  1.2511e-02,
         -2.5337e-01,  8.0745e-02, -2.3420e-01,  1.0200e-01,  3.7241e-01,
          2.2364e-01, -7.2660e-02,  2.8259e-03, -4.9028e-01,  3.1673e-02,
         -3.5478e-01, -9.1972e-02]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
434000 特征值优化 tensor(0.5718, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5903,  0.2534, -0.2668, -0.1414, -0.4893,  0.4682, -0.5851,  0.3325,
         -0.3609,  1.6810,  0.4482, -0.3135, -0.2219, -0.2394,  0.0102,  0.0784,
         -0.1586,  0.0219, -0.0598, -0.0228,  0.0599,  0.1204, -0.0477,  0.1277,
         -0.0711, -0.0696,  0.0849, -0.1188,  0.0639,  0.0549,  0.0575,  0.0200,
         -0.0714, -0.0110, -0.0512,  0.0287, -0.0084, -0.0556,  0.0773, -0.0865,
          0.2153,  0.0892, -0.2171,  0.2299, -0.2881, -0.1514,  0.1147, -0.0913,
         -0.3393,  0.7397,  0.2497,  0.0177, -0.0612,  0.1280,  0.0028, -0.0216,
          0.2554,  0.1923, -0.0521, -0.0405, -0.2575,  0.0606, -0.2503,  0.0549,
          0.3448,  0.2261, -0.0652, -0.0141, -0.4679,  0.0440, -0.4152, -0.0618]],
       device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
435000 特征值优化 tensor(0.5729, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5892,  0.2529, -0.2714, -0.1245, -0.4666,  0.4866, -0.6068,  0.3405,
         -0.3581,  1.6860,  0.4688, -0.3224, -0.2220, -0.2394,  0.0150,  0.0687,
         -0.1607,  0.0293, -0.0586, -0.0224,  0.0604,  0.1221, -0.0484,  0.1326,
         -0.0660, -0.0794,  0.0969, -0.1088,  0.0632,  0.0557,  0.0593,  0.0164,
         -0.0704, -0.0109, -0.0403,  0.0429, -0.0059, -0.0490,  0.0799, -0.0888,
          0.2120,  0.0866, -0.2176,  0.2295, -0.2873, -0.1506,  0.1144, -0.0927,
         -0.3514,  0.7500,  0.2542,  0.0208, -0.0633,  0.1349,  0.0742, -0.0258,
          0.2309,  0.2045, -0.0452, -0.0378, -0.2399,  0.0568, -0.2431,  0.0715,
          0.3510,  0.2260, -0.0787, -0.0098, -0.4793,  0.0443, -0.3875, -0.0736]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
436000 特征值优化 tensor(0.5790, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.9034e-01,  2.5776e-01, -2.7870e-01, -1.3060e-01, -4.7748e-01,
          4.2315e-01, -5.8630e-01,  3.2436e-01, -3.3281e-01,  1.7540e+00,
          4.7590e-01, -2.9902e-01, -2.1981e-01, -2.2672e-01, -3.2236e-02,
          1.0462e-01, -1.1185e-01,  5.7093e-02, -5.7759e-02, -1.6153e-02,
          5.8652e-02,  1.2022e-01, -5.4259e-02,  1.1682e-01, -1.1504e-01,
         -9.6476e-02,  6.1518e-02, -7.7799e-02,  5.9973e-02,  5.4493e-02,
          6.3149e-02,  1.9641e-02, -6.8129e-02, -1.4603e-02, -1.7149e-02,
          5.0776e-02, -1.4425e-02, -3.6761e-02,  3.4886e-02, -6.7074e-02,
          2.1858e-01,  1.1849e-01, -2.1857e-01,  2.3576e-01, -2.9769e-01,
         -1.5586e-01,  1.2120e-01, -8.5758e-02, -3.3291e-01,  7.2935e-01,
          2.5651e-01,  1.3676e-02, -5.7723e-02,  1.2496e-01,  3.2492e-03,
          1.1969e-02,  2.2401e-01,  2.1574e-01,  2.4969e-02, -4.9654e-04,
         -2.4895e-01,  6.9543e-02, -2.3109e-01,  7.8168e-02,  3.4707e-01,
          2.1062e-01, -9.2883e-02,  1.4240e-02, -4.8665e-01,  4.0101e-02,
         -3.8229e-01, -6.9110e-02]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
437000 特征值优化 tensor(0.5717, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5823,  0.2475, -0.2817, -0.1150, -0.4547,  0.4676, -0.6261,  0.3642,
         -0.3352,  1.6986,  0.4940, -0.3338, -0.2218, -0.2448,  0.0148,  0.0675,
         -0.1567,  0.0224, -0.0563, -0.0176,  0.0600,  0.1184, -0.0536,  0.1353,
         -0.0727, -0.0624,  0.1025, -0.1016,  0.0655,  0.0572,  0.0654,  0.0276,
         -0.0812, -0.0133, -0.0391,  0.0225, -0.0064, -0.0566,  0.0727, -0.0853,
          0.2099,  0.0921, -0.2146,  0.2316, -0.2884, -0.1511,  0.1160, -0.0872,
         -0.3349,  0.7297,  0.2416,  0.0248, -0.0596,  0.1231,  0.0062,  0.0056,
          0.2338,  0.2101, -0.0295, -0.0306, -0.2550,  0.0658, -0.1994,  0.0558,
          0.3589,  0.2190, -0.0751, -0.0119, -0.4805,  0.0491, -0.3940, -0.0689]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
438000 特征值优化 tensor(0.5693, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5769,  0.2596, -0.2618, -0.1434, -0.4796,  0.4538, -0.6087,  0.3342,
         -0.3224,  1.7132,  0.4782, -0.3362, -0.2206, -0.2399,  0.0131,  0.0725,
         -0.1631,  0.0255, -0.0569, -0.0155,  0.0573,  0.1208, -0.0517,  0.1262,
         -0.0431, -0.0670,  0.0951, -0.1249,  0.0675,  0.0548,  0.0600,  0.0215,
         -0.0835, -0.0119, -0.0513,  0.0180, -0.0066, -0.0609,  0.0639, -0.0846,
          0.2122,  0.0937, -0.2127,  0.2329, -0.2963, -0.1591,  0.1222, -0.0948,
         -0.3421,  0.7409,  0.2387,  0.0261, -0.0433,  0.1182,  0.0162,  0.0023,
          0.2532,  0.1962, -0.0585, -0.0691, -0.2515,  0.0563, -0.2302,  0.0518,
          0.3480,  0.2329, -0.0746, -0.0106, -0.4799,  0.0496, -0.4050, -0.0629]],
       device='cuda:0') tensor(0.2046, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
439000 特征值优化 tensor(0.5787, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5849,  0.2496, -0.2923, -0.1114, -0.4778,  0.4684, -0.6368,  0.3508,
         -0.3035,  1.6246,  0.5145, -0.3239, -0.2220, -0.2414,  0.0109,  0.0672,
         -0.1609,  0.0153, -0.0610, -0.0196,  0.0607,  0.1182, -0.0528,  0.1272,
         -0.0946, -0.0799,  0.1027, -0.1012,  0.0632,  0.0587,  0.0638,  0.0210,
         -0.0712, -0.0188, -0.0295,  0.0498, -0.0058, -0.0493,  0.0656, -0.0828,
          0.2095,  0.0977, -0.2168,  0.2302, -0.2885, -0.1505,  0.1150, -0.0846,
         -0.3528,  0.7435,  0.2459,  0.0218, -0.0516,  0.1190, -0.0032,  0.0081,
          0.2442,  0.2174, -0.0161, -0.0042, -0.2570,  0.0693, -0.2061,  0.0761,
          0.3626,  0.2386, -0.0832, -0.0161, -0.4898,  0.0483, -0.3916, -0.0834]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
440000 特征值优化 tensor(0.5705, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5888,  0.2517, -0.2923, -0.1066, -0.4796,  0.4266, -0.6591,  0.3711,
         -0.2832,  1.6545,  0.5451, -0.3277, -0.2220, -0.2368,  0.0297,  0.0504,
         -0.1568,  0.0459, -0.0532, -0.0197,  0.0600,  0.1205, -0.0653,  0.1062,
         -0.1385, -0.1136,  0.0881, -0.0122,  0.0637,  0.0555,  0.0644,  0.0165,
         -0.0688, -0.0104,  0.0196,  0.0735, -0.0112, -0.0391,  0.0479, -0.0765,
          0.2147,  0.1062, -0.2174,  0.2297, -0.2863, -0.1516,  0.1150, -0.0876,
         -0.3516,  0.7439,  0.2459,  0.0244, -0.0592,  0.1295,  0.0223,  0.0048,
          0.2014,  0.2148,  0.0310,  0.0473, -0.2411,  0.0581, -0.2285,  0.0955,
          0.3754,  0.2390, -0.0601, -0.0170, -0.4931,  0.0482, -0.3726, -0.0949]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
441000 特征值优化 tensor(0.5729, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5789,  0.2592, -0.2762, -0.1264, -0.4641,  0.4658, -0.6261,  0.2845,
         -0.2823,  1.6501,  0.4945, -0.3480, -0.2201, -0.2426,  0.0174,  0.0706,
         -0.1548,  0.0305, -0.0609, -0.0178,  0.0576,  0.1209, -0.0509,  0.1224,
         -0.0633, -0.0738,  0.1122, -0.1088,  0.0625,  0.0563,  0.0618,  0.0153,
         -0.0673, -0.0106, -0.0328,  0.0436, -0.0047, -0.0589,  0.0588, -0.0840,
          0.2099,  0.0979, -0.2130,  0.2327, -0.2978, -0.1571,  0.1203, -0.0899,
         -0.3513,  0.7488,  0.2542,  0.0178, -0.0530,  0.1297, -0.0744,  0.0073,
          0.2412,  0.2026, -0.0467, -0.0308, -0.2344,  0.0595, -0.2385,  0.0688,
          0.3598,  0.2456, -0.0738, -0.0156, -0.5000,  0.0483, -0.4074, -0.0780]],
       device='cuda:0') tensor(0.2152, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
442000 特征值优化 tensor(0.5689, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5883,  0.2502, -0.2598, -0.1294, -0.4769,  0.4869, -0.6368,  0.2800,
         -0.3213,  1.7636,  0.5010, -0.3912, -0.2221, -0.2394,  0.0120,  0.0754,
         -0.1608,  0.0319, -0.0515, -0.0197,  0.0601,  0.1214, -0.0562,  0.1436,
         -0.0472, -0.0812,  0.0949, -0.1019,  0.0641,  0.0574,  0.0648,  0.0168,
         -0.0735, -0.0121, -0.0467,  0.0081, -0.0071, -0.0692,  0.0718, -0.0833,
          0.2106,  0.0923, -0.2172,  0.2284, -0.2851, -0.1516,  0.1153, -0.0937,
         -0.3348,  0.7376,  0.2502,  0.0230, -0.0633,  0.1297,  0.0184, -0.0104,
          0.1885,  0.2261, -0.0160, -0.1246, -0.2245,  0.0530, -0.2343,  0.0512,
          0.3644,  0.1913, -0.1067, -0.0032, -0.5036,  0.0557, -0.3566, -0.0663]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
443000 特征值优化 tensor(0.5680, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5848,  0.2469, -0.2673, -0.1300, -0.4781,  0.4374, -0.6322,  0.2823,
         -0.2796,  1.7563,  0.5165, -0.3842, -0.2217, -0.2436, -0.0065,  0.0927,
         -0.1410,  0.0410, -0.0554, -0.0223,  0.0607,  0.1205, -0.0501,  0.1308,
         -0.0256, -0.0543,  0.0962, -0.1302,  0.0620,  0.0562,  0.0646,  0.0272,
         -0.0796, -0.0098, -0.0456,  0.0165,  0.0052, -0.0719,  0.0733, -0.0876,
          0.1995,  0.0869, -0.2155,  0.2292, -0.2876, -0.1479,  0.1137, -0.0919,
         -0.3386,  0.7377,  0.2563,  0.0181, -0.0681,  0.1323,  0.0246,  0.0141,
          0.2420,  0.1893, -0.0751, -0.0457, -0.2375,  0.0595, -0.1797,  0.0514,
          0.3388,  0.2192, -0.0919, -0.0092, -0.5012,  0.0517, -0.3868, -0.0550]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
444000 特征值优化 tensor(0.5656, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5895,  0.2516, -0.2827, -0.1155, -0.4830,  0.4161, -0.6515,  0.2729,
         -0.2707,  1.7008,  0.5479, -0.3797, -0.2218, -0.2392,  0.0308,  0.0552,
         -0.1580,  0.0544, -0.0458, -0.0158,  0.0600,  0.1181, -0.0737,  0.1092,
         -0.1201, -0.1634,  0.0370, -0.0097,  0.0634,  0.0569,  0.0639,  0.0068,
         -0.0741, -0.0119,  0.0162,  0.0773, -0.0112, -0.0426,  0.0470, -0.0776,
          0.2146,  0.1075, -0.2185,  0.2302, -0.2831, -0.1545,  0.1175, -0.0876,
         -0.3339,  0.7307,  0.2473,  0.0228, -0.0491,  0.1233, -0.0777, -0.0024,
          0.2144,  0.2047,  0.0284,  0.0323, -0.2088,  0.0504, -0.2185,  0.0984,
          0.3735,  0.2235, -0.0695, -0.0146, -0.5257,  0.0557, -0.3834, -0.0818]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
445000 特征值优化 tensor(0.5707, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5829,  0.2482, -0.2684, -0.1319, -0.4797,  0.4552, -0.6464,  0.2514,
         -0.2740,  1.6974,  0.5241, -0.3945, -0.2221, -0.2431,  0.0126,  0.0826,
         -0.1585,  0.0423, -0.0561, -0.0145,  0.0603,  0.1218, -0.0534,  0.1290,
         -0.0465, -0.0801,  0.0887, -0.1225,  0.0624,  0.0549,  0.0602,  0.0198,
         -0.0733, -0.0111, -0.0489,  0.0175,  0.0058, -0.0730,  0.0739, -0.0855,
          0.1988,  0.0918, -0.2155,  0.2309, -0.2870, -0.1540,  0.1169, -0.0898,
         -0.3384,  0.7392,  0.2525,  0.0163, -0.0716,  0.1240,  0.0283,  0.0216,
          0.2568,  0.1957, -0.0534, -0.0471, -0.2321,  0.0612, -0.1882,  0.0590,
          0.3419,  0.2189, -0.0835, -0.0205, -0.5068,  0.0522, -0.4056, -0.0583]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
446000 特征值优化 tensor(16.5840, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3727,  0.5559,  0.8608,  0.7065, -0.2437,  1.0170, -0.8810,  1.5845,
         -0.4245, -0.2388,  0.8430, -0.5458, -0.0886, -0.4542,  0.0523, -1.3056,
          0.1823, -0.5316, -0.7274,  0.0062, -0.3492,  0.0272,  1.1542,  0.3514,
         -0.0121, -0.3278,  1.5698,  0.3428,  0.5820,  0.1647, -0.0822,  0.7206,
         -0.1075,  0.2512, -0.0408,  0.4888,  0.1920,  1.0363,  2.1175, -1.2443,
         -0.3668,  0.5212,  0.2259, -0.6923, -0.1285, -0.6122, -0.2920, -1.4024,
          1.8037, -0.9696, -1.0517,  2.6829,  0.2911,  0.1889,  0.3430, -0.5324,
         -0.9959, -0.9022,  0.6814, -0.8401,  0.2292, -0.0450, -0.8984, -0.4256,
          0.3095, -0.2442,  0.4444, -0.0852,  0.1948, -0.6620,  0.1277,  0.2291]],
       device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
447000 特征值优化 tensor(5.6536, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1706,  0.3332,  0.8613,  1.5088,  0.3180,  0.1868, -0.6848,  0.9494,
         -0.4435,  0.0121,  0.3362,  0.1208,  0.0576, -0.1870, -0.1454, -0.4097,
          0.0181, -0.0550, -0.1349, -0.0233, -0.0694,  0.0026,  0.4941,  0.1395,
          0.0055, -0.0584,  0.7211, -0.0656,  0.0181,  0.0097, -0.0850,  0.0984,
         -0.0064, -0.0157, -0.0402,  0.0894, -0.0840,  0.3879,  1.0623, -0.3496,
         -0.1203, -0.0585, -0.0891, -0.1646,  0.2408, -0.3540, -0.0504, -0.8965,
          0.9695, -0.5947, -1.1599,  1.5458, -0.1696,  0.2890, -0.0193, -0.2117,
         -0.2805, -0.1059,  0.1150, -0.2489,  0.1843,  0.1106, -0.5870, -0.0280,
         -0.0869,  0.0841,  0.1452, -0.0463, -0.1121,  0.1356, -0.0768,  0.2855]],
       device='cuda:0') tensor(0.2054, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
448000 特征值优化 tensor(0.8386, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.2865e-01,  4.1275e-01,  6.3794e-01,  1.4734e+00,  7.8004e-02,
         -4.0040e-01, -6.7185e-01,  8.2242e-01, -6.5193e-01,  1.3742e-01,
          3.5902e-01,  3.1349e-01,  4.1391e-02, -9.6048e-02, -1.8341e-01,
         -4.0229e-02,  9.1925e-02, -1.3275e-01,  5.4579e-03, -2.8932e-02,
         -8.7655e-02,  1.0356e-02,  2.5796e-02,  1.9572e-02,  9.6033e-02,
          8.7885e-02,  1.8035e-01, -1.9043e-01, -2.5568e-04,  1.2474e-02,
         -8.4623e-02,  1.0423e-01, -3.2293e-02, -1.5118e-02,  5.0119e-02,
          8.7170e-02,  7.7430e-02,  1.3384e-01,  3.8397e-01, -3.4356e-02,
         -1.2738e-01, -8.7114e-02, -1.6255e-01,  3.6622e-02,  9.5468e-02,
         -4.8217e-01, -3.7052e-02, -5.2057e-01,  6.1383e-01, -5.1919e-01,
         -6.2457e-01,  5.8699e-01,  5.9567e-02,  2.3242e-01, -2.9404e-01,
         -1.2018e-01, -1.9589e-01,  1.2056e-02,  2.6763e-01, -1.5327e-01,
          2.6069e-01,  2.2597e-01, -5.3986e-01,  2.1238e-02, -7.7021e-02,
          8.0632e-02,  2.7256e-01, -5.3245e-02, -8.0438e-02,  5.1444e-02,
          2.0055e-01,  8.7932e-02]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
449000 特征值优化 tensor(0.6826, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9910e-01,  3.9483e-01,  6.6573e-01,  1.1195e+00,  8.0907e-02,
         -5.0854e-01, -7.1469e-01,  6.8604e-01, -6.7731e-01,  3.8938e-01,
          5.2073e-01,  2.4851e-01,  5.1408e-02, -6.5541e-02, -1.6964e-01,
          1.3262e-02,  7.2519e-02, -7.6312e-02, -1.2568e-01, -3.3533e-02,
         -9.2857e-02, -7.6154e-04, -8.8240e-02,  9.0812e-02,  6.0628e-02,
         -1.3878e-02,  2.0827e-01, -1.5752e-01, -1.4798e-02,  6.1750e-03,
         -1.0336e-01,  8.9930e-02, -3.8013e-02, -1.8544e-02,  6.6808e-02,
          9.3763e-02,  1.3085e-01,  5.5523e-02,  3.0605e-01, -1.5333e-02,
         -1.7175e-01, -3.1855e-02, -1.5793e-01,  7.9049e-02,  7.2275e-02,
         -4.5752e-01, -5.4761e-02, -5.0365e-01,  5.5009e-01, -4.9764e-01,
         -2.9188e-01,  4.6060e-01,  4.3916e-02,  2.5334e-01, -2.6159e-01,
         -8.2250e-02, -1.8675e-01,  2.8141e-02,  2.3932e-01,  1.3627e-01,
          2.9907e-01,  2.2576e-01, -5.6949e-01,  5.9241e-03, -2.0400e-01,
          6.6465e-02,  2.9579e-01,  2.3054e-02, -1.3105e-01,  4.1035e-02,
          3.1145e-01,  9.0404e-02]], device='cuda:0') tensor(0.2053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
450000 特征值优化 tensor(0.5981, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7020e-01,  3.4839e-01,  6.0346e-01,  1.1014e+00,  1.4639e-01,
         -4.6924e-01, -7.9938e-01,  7.5814e-01, -8.0264e-01,  4.4380e-01,
          5.1006e-01,  4.0177e-01,  6.4008e-02, -6.1837e-02, -1.5520e-01,
          1.1356e-02,  2.8741e-02, -1.1773e-01, -6.1759e-02, -3.6504e-02,
         -8.1852e-02,  1.2974e-05, -1.0220e-01,  8.9473e-02, -8.8894e-03,
         -2.1590e-02,  1.6433e-01, -1.7652e-01, -1.6673e-01,  9.7302e-03,
         -9.8967e-02,  6.9632e-02, -6.3715e-02, -2.8495e-02,  6.3863e-02,
          1.0870e-01,  1.2183e-01,  6.4879e-02,  2.5289e-01, -2.5133e-02,
         -1.6808e-01, -4.5394e-03, -1.2416e-01,  6.4732e-02,  8.2999e-02,
         -3.9694e-01, -5.3852e-02, -5.0325e-01,  5.3119e-01, -4.4815e-01,
         -8.9223e-02,  3.1084e-01,  3.8817e-02,  2.5722e-01, -2.4002e-01,
         -1.3157e-01, -1.5817e-01, -7.8205e-03,  1.6135e-01,  5.2350e-02,
          2.5301e-01,  2.3712e-01, -4.9276e-01,  2.5082e-04, -2.5800e-01,
          6.4585e-02,  2.3320e-01,  5.8122e-02, -9.8085e-02,  4.3345e-02,
          2.9081e-01,  1.1711e-01]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
451000 特征值优化 tensor(0.5885, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1638,  0.3550,  0.5861,  1.0270,  0.1474, -0.4731, -0.7998,  0.7289,
         -0.9338,  0.4463,  0.5000,  0.5401,  0.0653, -0.0666, -0.1628,  0.0032,
          0.0184, -0.0947, -0.0837, -0.0348, -0.0803,  0.0030, -0.1666,  0.0709,
         -0.0595,  0.0027,  0.1536, -0.1949, -0.1768,  0.0084, -0.0982,  0.0696,
         -0.0594, -0.0246,  0.0672,  0.1065,  0.1241,  0.0615,  0.2139, -0.0351,
         -0.1677,  0.0381, -0.1291, -0.0129,  0.1590, -0.4048, -0.0534, -0.4892,
          0.4975, -0.4235,  0.0350,  0.2416,  0.0402,  0.2570, -0.2391, -0.1320,
         -0.1579, -0.0038,  0.1259,  0.0085,  0.2489,  0.2449, -0.4704, -0.0124,
         -0.2517,  0.0289,  0.2145,  0.0678, -0.0952,  0.0413,  0.2991,  0.1466]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
452000 正交保障 tensor(0.2049, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7250e-01,  3.5147e-01,  6.1030e-01,  1.0653e+00,  1.5862e-01,
         -5.7225e-01, -7.2455e-01,  6.8430e-01, -1.0710e+00,  5.1961e-01,
          4.8276e-01,  7.1970e-01,  6.4403e-02, -5.0560e-02, -1.6781e-01,
         -3.1127e-02, -3.5331e-02, -1.5086e-01, -3.8010e-02, -3.8179e-02,
         -8.1294e-02, -1.2536e-03, -1.8240e-01,  5.9455e-02, -9.2179e-02,
          4.3911e-02,  1.3154e-01, -1.4904e-01, -1.5164e-01,  5.3325e-03,
         -9.8632e-02,  7.5546e-02, -5.9831e-02, -2.6620e-02,  6.0191e-02,
          8.6915e-02,  1.1353e-01,  7.5034e-02,  2.3879e-01, -2.2385e-02,
         -1.5537e-01,  1.1024e-02, -1.1895e-01,  7.0580e-02,  7.5659e-02,
         -3.9572e-01, -5.3410e-02, -4.9296e-01,  4.5320e-01, -3.8670e-01,
          9.2793e-02,  1.9779e-01,  2.6936e-02,  2.5987e-01, -2.3602e-01,
         -1.2298e-01, -1.1785e-01, -2.1738e-04,  1.5034e-01,  8.6036e-02,
          2.4251e-01,  2.4890e-01, -4.7946e-01, -2.1674e-02, -1.4756e-01,
          4.0235e-02,  2.5237e-01, -5.2248e-03, -1.2232e-01,  3.9070e-02,
          1.8005e-01,  1.2967e-01]], device='cuda:0') tensor(0.2049, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
453000 特征值优化 tensor(0.5747, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7106e-01,  3.5801e-01,  6.4167e-01,  1.0532e+00,  1.5662e-01,
         -6.5004e-01, -7.2559e-01,  7.5026e-01, -1.0705e+00,  5.6714e-01,
          4.7370e-01,  7.5859e-01,  6.4076e-02, -5.9547e-02, -1.8953e-01,
          9.6804e-03, -3.5558e-02, -1.1175e-01, -1.0952e-01, -3.9059e-02,
         -8.1989e-02, -3.0705e-03, -1.5044e-01,  1.1034e-01, -5.6652e-02,
          8.1741e-02,  1.0964e-01, -1.2532e-01, -1.3605e-01,  3.6806e-03,
         -9.6415e-02,  9.5000e-02, -3.5030e-02, -3.0271e-02,  5.4687e-02,
          5.9567e-02,  1.1734e-01,  8.5259e-02,  2.2448e-01, -4.8526e-02,
         -1.5534e-01,  3.6928e-02, -1.3214e-01,  7.8906e-02,  7.8372e-02,
         -3.8035e-01, -6.0860e-02, -4.9652e-01,  3.9411e-01, -3.2930e-01,
          1.5493e-01,  1.7134e-01,  1.3188e-02,  2.6863e-01, -2.0915e-01,
         -1.8792e-01, -8.8197e-02, -1.6635e-04,  1.3793e-01, -2.0475e-02,
          2.6710e-01,  2.1846e-01, -4.7858e-01, -1.0687e-02, -1.8509e-01,
          4.6109e-02,  2.0751e-01,  2.7014e-03, -1.3650e-01,  6.1368e-02,
          2.0141e-01,  1.2832e-01]], device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
454000 特征值优化 tensor(0.5815, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2002,  0.3546,  0.6322,  1.0659,  0.1997, -0.6466, -0.6916,  0.7741,
         -1.0611,  0.5585,  0.4758,  0.7477,  0.0602, -0.0324, -0.1638, -0.0081,
          0.0132, -0.1339, -0.0342, -0.0380, -0.0770, -0.0023, -0.1456,  0.1096,
         -0.0325,  0.0620,  0.1277, -0.1197, -0.1321,  0.0036, -0.0968,  0.0978,
         -0.0399, -0.0309,  0.0587,  0.0450,  0.1171,  0.0778,  0.2242, -0.0515,
         -0.1537,  0.0311, -0.1294,  0.0761,  0.0760, -0.3585, -0.0647, -0.4897,
          0.3810, -0.3234,  0.1591,  0.1643,  0.0032,  0.2649, -0.2602, -0.1179,
         -0.0924,  0.0040,  0.1518,  0.0084,  0.3233,  0.1978, -0.5497, -0.0040,
         -0.1619,  0.0435,  0.2267,  0.0145, -0.1963,  0.0813,  0.1779,  0.1316]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
455000 特征值优化 tensor(0.5732, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7650e-01,  3.8165e-01,  6.6603e-01,  1.0964e+00,  2.1122e-01,
         -6.5008e-01, -6.8558e-01,  7.2310e-01, -1.0429e+00,  5.8007e-01,
          3.9315e-01,  7.3462e-01,  6.0546e-02, -2.8528e-02, -1.5526e-01,
         -2.2043e-02,  2.6341e-02, -1.5369e-01,  2.9301e-03, -4.0463e-02,
         -7.6827e-02, -7.9495e-03, -1.2560e-01,  1.2380e-01, -3.4349e-02,
          4.6838e-02,  1.4866e-01, -1.3073e-01, -1.3654e-01, -7.1956e-04,
         -9.4296e-02,  9.9141e-02, -5.1226e-02, -3.1580e-02,  6.5366e-02,
          2.4216e-02,  1.0940e-01,  8.6590e-02,  2.2481e-01, -4.5608e-02,
         -1.4461e-01,  2.5999e-02, -1.3953e-01,  7.6299e-02,  7.6241e-02,
         -3.6749e-01, -6.8431e-02, -4.9570e-01,  3.9073e-01, -3.1580e-01,
          1.4332e-01,  1.7692e-01, -3.4145e-02,  2.8271e-01, -2.6811e-01,
         -1.3511e-01, -9.6570e-02,  5.7561e-03,  1.1934e-01, -6.6803e-02,
          3.5314e-01,  1.9575e-01, -4.8589e-01, -3.4647e-02, -1.7144e-01,
          5.8704e-02,  2.2894e-01,  3.5690e-02, -1.6452e-01,  6.2607e-02,
          1.9007e-01,  1.0975e-01]], device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
456000 特征值优化 tensor(0.5725, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0213e-01,  3.7208e-01,  6.5209e-01,  1.0740e+00,  1.9478e-01,
         -6.4934e-01, -6.0343e-01,  7.4514e-01, -1.0408e+00,  6.1973e-01,
          3.8605e-01,  7.4070e-01,  5.8565e-02, -2.4916e-02, -1.6643e-01,
          2.2048e-02, -1.0589e-02, -1.2323e-01, -8.3027e-02, -3.9685e-02,
         -7.5867e-02, -6.6901e-03, -1.4855e-01,  1.0691e-01, -6.6882e-02,
          7.6291e-02,  1.2323e-01, -1.5860e-01, -1.3066e-01,  1.5922e-04,
         -9.6469e-02,  1.1146e-01, -2.9667e-02, -3.3048e-02,  5.4212e-02,
          4.8198e-02,  9.7388e-02,  9.8298e-02,  2.1502e-01, -6.0012e-02,
         -1.2902e-01,  4.3252e-02, -1.3141e-01,  7.4136e-02,  7.4163e-02,
         -3.6972e-01, -6.0842e-02, -4.9309e-01,  3.8641e-01, -3.1314e-01,
          1.6321e-01,  1.6974e-01, -1.0403e-02,  2.7168e-01, -1.9249e-01,
         -2.1051e-01, -9.0945e-02,  1.1198e-03,  1.4865e-01, -1.8472e-03,
          3.3313e-01,  2.0146e-01, -5.2048e-01, -2.5128e-02, -1.9825e-01,
          5.6870e-02,  1.9058e-01,  4.0601e-02, -1.9950e-01,  7.4543e-02,
          2.1435e-01,  1.1627e-01]], device='cuda:0') tensor(0.2067, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
457000 特征值优化 tensor(0.5735, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2032,  0.3691,  0.6530,  1.0745,  0.1987, -0.6462, -0.5805,  0.7190,
         -1.0340,  0.6198,  0.3583,  0.7368,  0.0585, -0.0291, -0.1700,  0.0101,
         -0.0084, -0.1125, -0.0770, -0.0395, -0.0758, -0.0059, -0.1458,  0.1071,
         -0.0544,  0.0707,  0.1225, -0.1549, -0.1286,  0.0014, -0.0963,  0.1117,
         -0.0324, -0.0297,  0.0689,  0.0437,  0.0918,  0.0990,  0.2137, -0.0706,
         -0.1259,  0.0461, -0.1306,  0.0744,  0.0745, -0.3688, -0.0600, -0.4970,
          0.3815, -0.3102,  0.1647,  0.1664, -0.0088,  0.2704, -0.1867, -0.2111,
         -0.0938,  0.0054,  0.1359, -0.0115,  0.3372,  0.2040, -0.5139, -0.0309,
         -0.1793,  0.0637,  0.1953,  0.0484, -0.2082,  0.0701,  0.2027,  0.1055]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
458000 特征值优化 tensor(0.5743, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0665e-01,  3.7099e-01,  6.5472e-01,  1.0726e+00,  1.9905e-01,
         -6.5075e-01, -5.6796e-01,  7.1463e-01, -1.0237e+00,  6.3635e-01,
          3.5537e-01,  7.2993e-01,  5.7961e-02, -2.7669e-02, -1.7584e-01,
          6.4560e-03, -1.0016e-02, -1.0874e-01, -8.0857e-02, -3.9324e-02,
         -7.5288e-02, -6.8491e-03, -1.4332e-01,  1.1042e-01, -5.5792e-02,
          6.6533e-02,  1.1938e-01, -1.5896e-01, -1.2927e-01, -7.8939e-05,
         -9.6894e-02,  1.1116e-01, -3.5194e-02, -2.8864e-02,  6.4245e-02,
          4.6195e-02,  8.5144e-02,  1.0360e-01,  2.0273e-01, -7.6067e-02,
         -1.1836e-01,  5.4221e-02, -1.3042e-01,  7.4389e-02,  7.4522e-02,
         -3.6778e-01, -6.0015e-02, -4.9522e-01,  3.8236e-01, -3.0995e-01,
          1.6730e-01,  1.6801e-01, -6.6653e-03,  2.6936e-01, -1.8698e-01,
         -2.0512e-01, -9.2157e-02,  4.2664e-03,  1.4322e-01, -7.7487e-03,
          3.3896e-01,  2.1191e-01, -5.1917e-01, -2.6493e-02, -1.7916e-01,
          5.7819e-02,  2.0546e-01,  4.6782e-02, -2.1652e-01,  6.6269e-02,
          1.9735e-01,  1.1150e-01]], device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
459000 特征值优化 tensor(0.5726, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0315e-01,  3.7623e-01,  6.5632e-01,  1.0730e+00,  1.9776e-01,
         -6.5010e-01, -5.6956e-01,  7.1269e-01, -1.0159e+00,  6.5562e-01,
          3.5548e-01,  7.1723e-01,  5.8104e-02, -2.7012e-02, -1.7647e-01,
          8.2482e-03, -1.2565e-02, -1.0953e-01, -8.3450e-02, -3.9507e-02,
         -7.5120e-02, -6.9170e-03, -1.4764e-01,  1.0537e-01, -5.4188e-02,
          6.9033e-02,  1.2023e-01, -1.5888e-01, -1.2947e-01, -1.0008e-04,
         -9.5186e-02,  1.1069e-01, -3.2682e-02, -3.0191e-02,  6.1822e-02,
          4.5956e-02,  8.3291e-02,  1.0566e-01,  2.0322e-01, -7.7607e-02,
         -1.1686e-01,  5.5516e-02, -1.3208e-01,  7.4098e-02,  7.4212e-02,
         -3.7039e-01, -5.9531e-02, -4.9622e-01,  3.8322e-01, -3.1049e-01,
          1.6604e-01,  1.6834e-01, -1.7023e-02,  2.7477e-01, -1.8685e-01,
         -2.0794e-01, -9.0823e-02,  2.5876e-03,  1.4292e-01, -1.1643e-02,
          3.4578e-01,  2.0990e-01, -5.1099e-01, -2.7224e-02, -1.7676e-01,
          6.2975e-02,  2.1086e-01,  5.0952e-02, -2.1222e-01,  6.2192e-02,
          1.9306e-01,  1.0615e-01]], device='cuda:0') tensor(0.2055, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
460000 特征值优化 tensor(0.5717, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0593e-01,  3.7467e-01,  6.5587e-01,  1.0743e+00,  2.0198e-01,
         -6.5079e-01, -5.7794e-01,  7.0876e-01, -9.9822e-01,  6.7002e-01,
          3.5653e-01,  7.0520e-01,  5.7640e-02, -2.3318e-02, -1.8067e-01,
          8.9512e-03, -4.2387e-03, -1.1054e-01, -8.1528e-02, -3.9392e-02,
         -7.4669e-02, -6.9039e-03, -1.4827e-01,  1.0465e-01, -5.5693e-02,
          7.3140e-02,  1.2095e-01, -1.5871e-01, -1.2916e-01,  1.2291e-05,
         -9.4449e-02,  1.1226e-01, -3.5011e-02, -2.9660e-02,  6.4278e-02,
          4.7851e-02,  8.3243e-02,  1.0518e-01,  2.0195e-01, -8.1034e-02,
         -1.1715e-01,  6.0553e-02, -1.3131e-01,  7.4192e-02,  7.4273e-02,
         -3.6859e-01, -6.0046e-02, -4.9610e-01,  3.8320e-01, -3.1023e-01,
          1.6606e-01,  1.6753e-01, -1.8879e-02,  2.7795e-01, -1.8177e-01,
         -2.1643e-01, -9.2244e-02,  4.1569e-03,  1.4259e-01, -1.0562e-02,
          3.4386e-01,  2.1138e-01, -5.0680e-01, -2.9216e-02, -1.6648e-01,
          6.4224e-02,  2.2128e-01,  5.2196e-02, -2.1064e-01,  6.1642e-02,
          1.8660e-01,  1.0318e-01]], device='cuda:0') tensor(0.2051, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
461000 特征值优化 tensor(0.5717, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0360e-01,  3.7307e-01,  6.5485e-01,  1.0781e+00,  2.0001e-01,
         -6.5011e-01, -5.8806e-01,  7.1500e-01, -9.8122e-01,  6.8435e-01,
          3.6653e-01,  6.8686e-01,  5.7696e-02, -2.3979e-02, -1.7875e-01,
          7.3463e-03, -5.8765e-03, -1.0476e-01, -8.5776e-02, -3.9577e-02,
         -7.5057e-02, -6.7855e-03, -1.4972e-01,  1.0353e-01, -6.4943e-02,
          7.4175e-02,  1.2053e-01, -1.5872e-01, -1.2978e-01,  2.1064e-04,
         -9.4375e-02,  1.1241e-01, -3.6493e-02, -2.8768e-02,  6.7596e-02,
          4.9310e-02,  8.5696e-02,  1.0465e-01,  1.9497e-01, -8.6892e-02,
         -1.1941e-01,  6.6300e-02, -1.3182e-01,  7.4251e-02,  7.4309e-02,
         -3.6872e-01, -5.9871e-02, -4.9525e-01,  3.8448e-01, -3.1097e-01,
          1.6316e-01,  1.6870e-01, -1.5352e-02,  2.7577e-01, -1.8037e-01,
         -2.1596e-01, -9.5968e-02,  6.6221e-03,  1.4642e-01, -3.6759e-03,
          3.4419e-01,  2.0818e-01, -5.0889e-01, -2.7513e-02, -1.6101e-01,
          6.5739e-02,  2.2492e-01,  5.6894e-02, -2.1599e-01,  6.7994e-02,
          1.8469e-01,  9.7884e-02]], device='cuda:0') tensor(0.2037, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
462000 特征值优化 tensor(0.5698, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0336e-01,  3.7750e-01,  6.5483e-01,  1.0809e+00,  1.9944e-01,
         -6.5049e-01, -5.9270e-01,  7.1666e-01, -9.7341e-01,  7.0247e-01,
          3.7228e-01,  6.7837e-01,  5.7916e-02, -2.3241e-02, -1.7990e-01,
          4.8347e-03, -4.7298e-03, -1.0271e-01, -8.7707e-02, -3.9327e-02,
         -7.4786e-02, -7.0759e-03, -1.5423e-01,  9.8794e-02, -7.4202e-02,
          8.1671e-02,  1.2045e-01, -1.5685e-01, -1.2944e-01, -2.8352e-05,
         -9.4922e-02,  1.1343e-01, -3.6071e-02, -2.8503e-02,  6.8932e-02,
          5.0322e-02,  8.6132e-02,  1.0555e-01,  1.8900e-01, -9.1847e-02,
         -1.1884e-01,  7.3445e-02, -1.3358e-01,  7.4057e-02,  7.4193e-02,
         -3.7017e-01, -5.9450e-02, -4.9538e-01,  3.8374e-01, -3.1124e-01,
          1.6191e-01,  1.6829e-01, -1.4287e-02,  2.7507e-01, -1.7860e-01,
         -2.1797e-01, -9.6658e-02,  6.7375e-03,  1.5026e-01,  1.5170e-03,
          3.4645e-01,  2.0952e-01, -5.0721e-01, -2.7166e-02, -1.5518e-01,
          7.0967e-02,  2.3253e-01,  6.3180e-02, -2.1880e-01,  6.9028e-02,
          1.7918e-01,  9.1602e-02]], device='cuda:0') tensor(0.2051, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
463000 特征值优化 tensor(0.6108, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0438e-01,  3.7497e-01,  6.5488e-01,  1.0805e+00,  2.0149e-01,
         -6.5010e-01, -5.9358e-01,  7.1375e-01, -9.5913e-01,  7.1825e-01,
          3.7121e-01,  6.6338e-01,  5.7680e-02, -2.4815e-02, -1.8529e-01,
          2.7651e-03, -2.8392e-03, -1.0405e-01, -8.4954e-02, -3.7404e-02,
         -7.3815e-02, -6.7143e-03, -1.4942e-01,  1.0265e-01, -7.2554e-02,
          7.6018e-02,  1.2381e-01, -1.5248e-01, -1.3095e-01, -1.1861e-05,
         -9.4568e-02,  1.0783e-01, -3.9602e-02, -2.8333e-02,  6.6252e-02,
          4.4061e-02,  8.2067e-02,  1.0986e-01,  1.8721e-01, -9.1447e-02,
         -1.1603e-01,  7.1832e-02, -1.3185e-01,  7.3291e-02,  7.3278e-02,
         -3.7025e-01, -5.9593e-02, -4.9569e-01,  3.8391e-01, -3.1162e-01,
          1.6210e-01,  1.6846e-01, -2.1223e-02,  2.7841e-01, -1.7692e-01,
         -2.1952e-01, -9.7010e-02,  5.6745e-03,  1.5163e-01,  1.1690e-04,
          3.5138e-01,  2.1278e-01, -5.0435e-01, -2.4667e-02, -1.4967e-01,
          7.4533e-02,  2.3310e-01,  6.3730e-02, -2.1687e-01,  6.5087e-02,
          1.7275e-01,  9.1026e-02]], device='cuda:0') tensor(0.2047, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
464000 特征值优化 tensor(0.6036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0274e-01,  3.7218e-01,  6.5678e-01,  1.0845e+00,  2.0011e-01,
         -6.5261e-01, -5.9442e-01,  7.0476e-01, -9.4586e-01,  7.3137e-01,
          3.7495e-01,  6.4694e-01,  5.8089e-02, -2.9525e-02, -1.7771e-01,
          7.8187e-03,  8.7626e-04, -1.1281e-01, -7.7197e-02, -3.6642e-02,
         -7.3057e-02, -5.7959e-03, -1.4545e-01,  1.0512e-01, -7.4943e-02,
          6.5246e-02,  1.2536e-01, -1.4423e-01, -1.3094e-01,  2.7636e-04,
         -9.6442e-02,  1.0465e-01, -4.0538e-02, -2.7462e-02,  6.3512e-02,
          4.1333e-02,  8.0538e-02,  1.0951e-01,  1.8879e-01, -8.8531e-02,
         -1.1571e-01,  6.6709e-02, -1.3160e-01,  7.2543e-02,  7.2532e-02,
         -3.7049e-01, -5.9135e-02, -4.9600e-01,  3.8372e-01, -3.1011e-01,
          1.6054e-01,  1.6735e-01, -1.8487e-02,  2.7832e-01, -1.7877e-01,
         -2.1544e-01, -9.6894e-02,  6.4071e-03,  1.4802e-01, -7.0590e-03,
          3.5077e-01,  2.1473e-01, -5.0481e-01, -2.4346e-02, -1.3897e-01,
          7.3646e-02,  2.3520e-01,  6.2164e-02, -2.2121e-01,  6.4895e-02,
          1.6372e-01,  9.2937e-02]], device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
465000 特征值优化 tensor(0.5931, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9947e-01,  3.6332e-01,  6.5190e-01,  1.0832e+00,  1.9527e-01,
         -6.4697e-01, -6.0642e-01,  6.9954e-01, -9.2363e-01,  7.3820e-01,
          3.8699e-01,  6.2006e-01,  6.0110e-02, -4.6559e-02, -1.7295e-01,
          1.3563e-02,  8.3928e-03, -1.1671e-01, -7.5696e-02, -3.7635e-02,
         -7.4437e-02, -6.1190e-03, -1.3650e-01,  1.1345e-01, -6.3025e-02,
          5.3746e-02,  1.2087e-01, -1.3480e-01, -1.3053e-01, -1.2098e-04,
         -9.6111e-02,  9.0041e-02, -4.5727e-02, -2.8235e-02,  5.8543e-02,
          3.8027e-02,  8.1092e-02,  1.0960e-01,  1.8332e-01, -9.0734e-02,
         -1.1578e-01,  6.0172e-02, -1.3212e-01,  7.3386e-02,  7.3271e-02,
         -3.7446e-01, -6.0747e-02, -4.9467e-01,  3.8239e-01, -3.1212e-01,
          1.6169e-01,  1.6616e-01, -2.3695e-02,  2.7954e-01, -1.8307e-01,
         -2.0435e-01, -9.4483e-02,  4.9656e-03,  1.4665e-01, -7.8782e-03,
          3.4803e-01,  2.1665e-01, -5.0565e-01, -1.8233e-02, -1.4613e-01,
          7.3636e-02,  2.2865e-01,  5.6061e-02, -2.1457e-01,  5.9003e-02,
          1.5283e-01,  9.9563e-02]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
466000 特征值优化 tensor(0.5839, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0760e-01,  3.5612e-01,  6.5092e-01,  1.0729e+00,  1.9968e-01,
         -6.4423e-01, -6.2174e-01,  6.8860e-01, -8.9476e-01,  7.5810e-01,
          3.8620e-01,  6.1255e-01,  6.1156e-02, -4.2162e-02, -1.4863e-01,
          2.4148e-02,  7.3311e-03, -1.2565e-01, -5.3484e-02, -3.8114e-02,
         -7.4093e-02, -5.2774e-03, -1.2689e-01,  1.2259e-01, -5.6874e-02,
          3.2877e-02,  1.4017e-01, -1.4263e-01, -1.3280e-01,  9.9150e-04,
         -9.7232e-02,  9.4566e-02, -5.9718e-02, -2.8222e-02,  5.7787e-02,
          3.8999e-02,  7.9680e-02,  1.0955e-01,  1.9018e-01, -8.5858e-02,
         -1.1412e-01,  6.0489e-02, -1.2828e-01,  7.3177e-02,  7.2991e-02,
         -3.6379e-01, -6.4681e-02, -4.9295e-01,  3.8039e-01, -3.1416e-01,
          1.6371e-01,  1.6625e-01, -2.2330e-02,  2.7500e-01, -2.0198e-01,
         -1.8328e-01, -9.4841e-02,  2.4336e-03,  1.4044e-01, -1.7140e-02,
          3.6043e-01,  2.2050e-01, -5.1488e-01, -1.4495e-02, -1.5743e-01,
          7.1728e-02,  2.2737e-01,  4.2342e-02, -2.0417e-01,  4.6895e-02,
          1.5260e-01,  1.0560e-01]], device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
467000 特征值优化 tensor(0.5973, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0070e-01,  3.6730e-01,  6.5367e-01,  1.0739e+00,  1.9672e-01,
         -6.4606e-01, -6.1352e-01,  7.0924e-01, -8.9512e-01,  7.7238e-01,
          4.0145e-01,  5.9654e-01,  5.9325e-02, -3.7585e-02, -1.7657e-01,
          9.1809e-03,  4.2130e-03, -1.0699e-01, -8.0704e-02, -3.6773e-02,
         -7.3547e-02, -5.9965e-03, -1.4553e-01,  1.0683e-01, -6.8160e-02,
          6.0998e-02,  1.2577e-01, -1.4845e-01, -1.3172e-01,  1.1473e-05,
         -9.5865e-02,  9.4090e-02, -4.6033e-02, -2.6680e-02,  5.7330e-02,
          3.9694e-02,  8.0066e-02,  1.1229e-01,  1.7251e-01, -9.6429e-02,
         -1.1197e-01,  7.2214e-02, -1.3141e-01,  7.1519e-02,  7.1521e-02,
         -3.7311e-01, -5.8912e-02, -4.9319e-01,  3.8422e-01, -3.1544e-01,
          1.6275e-01,  1.6811e-01, -2.1675e-02,  2.8013e-01, -1.7920e-01,
         -2.1210e-01, -9.6025e-02,  6.5884e-03,  1.5048e-01, -7.4527e-05,
          3.5537e-01,  2.1387e-01, -5.0546e-01, -1.7004e-02, -1.3887e-01,
          7.9588e-02,  2.3533e-01,  5.9231e-02, -2.2580e-01,  6.6713e-02,
          1.4808e-01,  9.3811e-02]], device='cuda:0') tensor(0.2070, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
468000 正交保障 tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0477e-01,  3.7906e-01,  6.5524e-01,  1.0799e+00,  1.9612e-01,
         -6.5021e-01, -6.1158e-01,  7.0968e-01, -8.8453e-01,  7.9123e-01,
          3.9633e-01,  5.9000e-01,  5.7396e-02, -2.0511e-02, -1.8553e-01,
          1.1169e-03, -7.6163e-03, -9.4885e-02, -9.5388e-02, -3.9404e-02,
         -7.4682e-02, -7.1421e-03, -1.5645e-01,  9.6686e-02, -8.1708e-02,
          7.5695e-02,  1.2330e-01, -1.5395e-01, -1.2927e-01,  1.2460e-06,
         -9.4804e-02,  1.1116e-01, -3.9677e-02, -2.9150e-02,  6.7235e-02,
          5.3058e-02,  8.0915e-02,  1.1087e-01,  1.7476e-01, -1.0091e-01,
         -1.1160e-01,  8.7535e-02, -1.3280e-01,  7.3663e-02,  7.3832e-02,
         -3.6979e-01, -5.9107e-02, -4.9580e-01,  3.8421e-01, -3.1186e-01,
          1.6184e-01,  1.6875e-01, -1.6634e-02,  2.7668e-01, -1.7273e-01,
         -2.2378e-01, -9.9190e-02,  8.2748e-03,  1.5378e-01, -2.4387e-03,
          3.6232e-01,  2.0987e-01, -5.0004e-01, -2.2543e-02, -1.3044e-01,
          7.8645e-02,  2.4892e-01,  6.5830e-02, -2.3414e-01,  6.9458e-02,
          1.5401e-01,  8.2544e-02]], device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
469000 特征值优化 tensor(0.5840, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0738e-01,  3.5258e-01,  6.4735e-01,  1.0709e+00,  1.9294e-01,
         -6.3585e-01, -6.3311e-01,  6.8086e-01, -8.5168e-01,  8.0174e-01,
          3.9942e-01,  5.6153e-01,  6.1293e-02, -4.2417e-02, -1.5136e-01,
          2.4638e-02,  8.2498e-03, -1.2432e-01, -5.7397e-02, -3.7250e-02,
         -7.3587e-02, -5.9663e-03, -1.2834e-01,  1.2316e-01, -5.9163e-02,
          3.2463e-02,  1.4113e-01, -1.3736e-01, -1.3291e-01,  8.7784e-04,
         -9.6498e-02,  9.4006e-02, -6.0286e-02, -3.0709e-02,  6.0524e-02,
          4.0215e-02,  7.9515e-02,  1.0979e-01,  1.8181e-01, -9.1114e-02,
         -1.1426e-01,  7.0290e-02, -1.3081e-01,  7.3526e-02,  7.3377e-02,
         -3.6312e-01, -6.5355e-02, -4.9124e-01,  3.8073e-01, -3.1407e-01,
          1.6586e-01,  1.6669e-01, -1.9266e-02,  2.7382e-01, -2.0082e-01,
         -1.8355e-01, -9.8477e-02,  6.9047e-03,  1.4152e-01, -1.5859e-02,
          3.6784e-01,  2.1875e-01, -5.1062e-01, -1.3191e-02, -1.3697e-01,
          7.3223e-02,  2.3540e-01,  4.4037e-02, -2.1040e-01,  4.7688e-02,
          1.3938e-01,  1.0105e-01]], device='cuda:0') tensor(0.2034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
470000 特征值优化 tensor(0.5864, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0204e-01,  3.5756e-01,  6.4531e-01,  1.0725e+00,  1.9404e-01,
         -6.3781e-01, -6.3204e-01,  6.8590e-01, -8.3503e-01,  8.1003e-01,
          4.1407e-01,  5.4209e-01,  5.9191e-02, -5.0933e-02, -1.5951e-01,
          2.2958e-02,  1.3439e-02, -1.2135e-01, -6.8214e-02, -3.8204e-02,
         -7.6057e-02, -5.4966e-03, -1.3330e-01,  1.1326e-01, -5.4121e-02,
          3.4384e-02,  1.3108e-01, -1.2475e-01, -1.3228e-01,  8.1369e-04,
         -9.8241e-02,  9.1958e-02, -5.8250e-02, -2.8855e-02,  5.8212e-02,
          4.3998e-02,  8.1173e-02,  1.1122e-01,  1.7542e-01, -9.6047e-02,
         -1.1506e-01,  7.1772e-02, -1.3033e-01,  7.4156e-02,  7.4021e-02,
         -3.6442e-01, -6.2544e-02, -4.9004e-01,  3.7984e-01, -3.1404e-01,
          1.6582e-01,  1.6647e-01, -1.8295e-02,  2.7381e-01, -1.9619e-01,
         -1.8837e-01, -9.7601e-02,  4.5145e-03,  1.4407e-01, -1.2504e-02,
          3.6278e-01,  2.1694e-01, -5.1170e-01, -1.0883e-02, -1.3486e-01,
          7.6733e-02,  2.3971e-01,  4.6802e-02, -2.1762e-01,  5.1135e-02,
          1.3507e-01,  9.9685e-02]], device='cuda:0') tensor(0.2051, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
471000 特征值优化 tensor(0.5937, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0311e-01,  3.5891e-01,  6.5183e-01,  1.0779e+00,  1.9344e-01,
         -6.4122e-01, -6.2318e-01,  6.9413e-01, -8.2667e-01,  8.2349e-01,
          4.1746e-01,  5.2347e-01,  5.9475e-02, -4.6982e-02, -1.7245e-01,
          1.7290e-02,  5.7395e-03, -1.1092e-01, -8.2273e-02, -3.7480e-02,
         -7.4868e-02, -5.9671e-03, -1.3894e-01,  1.1099e-01, -6.6919e-02,
          4.6314e-02,  1.2174e-01, -1.3344e-01, -1.3019e-01,  4.3200e-04,
         -9.6394e-02,  8.7597e-02, -5.1505e-02, -2.8543e-02,  5.5467e-02,
          4.2742e-02,  7.9443e-02,  1.1254e-01,  1.6376e-01, -1.0015e-01,
         -1.1282e-01,  7.5394e-02, -1.2973e-01,  7.4247e-02,  7.4159e-02,
         -3.7131e-01, -5.9642e-02, -4.9402e-01,  3.8217e-01, -3.1475e-01,
          1.6260e-01,  1.6697e-01, -1.6320e-02,  2.7598e-01, -1.8157e-01,
         -2.0122e-01, -9.4664e-02,  6.0941e-03,  1.4972e-01, -4.6532e-03,
          3.5843e-01,  2.1677e-01, -5.0888e-01, -1.1635e-02, -1.2889e-01,
          8.7304e-02,  2.3615e-01,  6.0614e-02, -2.3585e-01,  6.3054e-02,
          1.3139e-01,  8.8799e-02]], device='cuda:0') tensor(0.2073, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
472000 特征值优化 tensor(0.5699, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0992e-01,  3.7627e-01,  6.5878e-01,  1.0838e+00,  1.9999e-01,
         -6.5067e-01, -6.1252e-01,  7.0124e-01, -8.2379e-01,  8.4574e-01,
          4.0443e-01,  5.2318e-01,  5.7198e-02, -1.6741e-02, -1.8933e-01,
          5.6777e-03, -7.8130e-03, -9.7090e-02, -9.2849e-02, -3.9185e-02,
         -7.4164e-02, -6.9307e-03, -1.5256e-01,  1.0025e-01, -7.3990e-02,
          6.6894e-02,  1.2609e-01, -1.5198e-01, -1.2924e-01,  2.8007e-04,
         -9.4888e-02,  1.1023e-01, -4.0852e-02, -2.8342e-02,  6.1455e-02,
          5.7495e-02,  7.6869e-02,  1.1337e-01,  1.6920e-01, -1.0336e-01,
         -1.0960e-01,  9.4913e-02, -1.3089e-01,  7.3291e-02,  7.3481e-02,
         -3.6794e-01, -5.9071e-02, -4.9776e-01,  3.8376e-01, -3.0973e-01,
          1.6148e-01,  1.6826e-01, -1.1896e-02,  2.7419e-01, -1.6990e-01,
         -2.2833e-01, -9.5039e-02,  5.8353e-03,  1.5075e-01, -9.6804e-03,
          3.6857e-01,  2.0992e-01, -4.9928e-01, -1.8821e-02, -1.1295e-01,
          8.5916e-02,  2.5887e-01,  6.5775e-02, -2.4983e-01,  6.9172e-02,
          1.3738e-01,  7.7748e-02]], device='cuda:0') tensor(0.2035, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
473000 特征值优化 tensor(0.5718, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0325e-01,  3.7683e-01,  6.5865e-01,  1.0795e+00,  1.9795e-01,
         -6.5194e-01, -6.2519e-01,  6.8465e-01, -7.9682e-01,  8.6012e-01,
          4.0891e-01,  5.0486e-01,  5.8060e-02, -2.1162e-02, -1.8129e-01,
          1.0091e-02, -5.9961e-03, -1.0315e-01, -8.6670e-02, -3.9183e-02,
         -7.4437e-02, -7.0950e-03, -1.4613e-01,  1.0569e-01, -7.6068e-02,
          6.1012e-02,  1.2903e-01, -1.4748e-01, -1.2960e-01, -1.6127e-04,
         -9.5051e-02,  1.1024e-01, -3.9008e-02, -2.9860e-02,  5.7125e-02,
          5.3912e-02,  7.9135e-02,  1.1034e-01,  1.7801e-01, -9.7280e-02,
         -1.1041e-01,  8.4024e-02, -1.3260e-01,  7.3136e-02,  7.3300e-02,
         -3.6868e-01, -6.1249e-02, -4.9746e-01,  3.8433e-01, -3.1174e-01,
          1.6133e-01,  1.6890e-01, -1.7759e-02,  2.7671e-01, -1.7540e-01,
         -2.2200e-01, -9.1709e-02,  3.4165e-03,  1.4272e-01, -2.4841e-02,
          3.7427e-01,  2.1252e-01, -4.9194e-01, -2.3344e-02, -1.0512e-01,
          7.7695e-02,  2.6144e-01,  5.4824e-02, -2.4332e-01,  6.5036e-02,
          1.2453e-01,  8.9510e-02]], device='cuda:0') tensor(0.2071, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
474000 特征值优化 tensor(0.5788, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9620e-01,  3.7787e-01,  6.5358e-01,  1.0815e+00,  1.9876e-01,
         -6.6151e-01, -6.3123e-01,  6.4273e-01, -7.6310e-01,  8.6834e-01,
          3.8314e-01,  4.7726e-01,  5.8497e-02, -2.5565e-02, -1.6386e-01,
          4.0604e-03, -5.6789e-03, -1.4158e-01, -4.8975e-02, -3.9466e-02,
         -7.5608e-02, -6.2186e-03, -1.1791e-01,  1.2837e-01, -7.1663e-02,
          2.7677e-02,  1.4111e-01, -1.3808e-01, -1.2944e-01, -3.2738e-04,
         -9.6527e-02,  1.0739e-01, -3.9891e-02, -3.0371e-02,  5.6373e-02,
          4.4303e-02,  8.2534e-02,  1.0561e-01,  2.1120e-01, -7.6160e-02,
         -1.1678e-01,  4.3686e-02, -1.3542e-01,  7.4388e-02,  7.4333e-02,
         -3.6579e-01, -6.3626e-02, -4.9550e-01,  3.8420e-01, -3.1076e-01,
          1.6271e-01,  1.6755e-01, -3.4918e-02,  2.8371e-01, -1.9868e-01,
         -1.8896e-01, -8.8243e-02, -1.0682e-03,  1.0680e-01, -8.6174e-02,
          3.8991e-01,  2.1337e-01, -4.8467e-01, -2.7988e-02, -8.7032e-02,
          5.4735e-02,  2.6405e-01,  2.7129e-02, -2.2374e-01,  4.9114e-02,
          9.5937e-02,  1.1997e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
475000 特征值优化 tensor(0.5879, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.8157e-01,  3.7492e-01,  6.5701e-01,  1.0860e+00,  2.0745e-01,
         -6.6947e-01, -6.4953e-01,  6.4098e-01, -7.6141e-01,  8.8693e-01,
          3.8370e-01,  4.6184e-01,  6.1165e-02, -3.9103e-02, -1.5056e-01,
          6.3082e-03, -4.1358e-03, -1.7211e-01, -1.5679e-02, -3.8092e-02,
         -7.5638e-02, -7.5362e-03, -1.0806e-01,  1.3623e-01, -6.9922e-02,
          2.6647e-02,  1.3318e-01, -1.2571e-01, -1.3103e-01,  4.8819e-04,
         -9.6900e-02,  1.0666e-01, -3.7604e-02, -3.1223e-02,  4.8816e-02,
          4.0838e-02,  7.9896e-02,  1.1090e-01,  2.1377e-01, -7.7721e-02,
         -1.1548e-01,  3.4880e-02, -1.4244e-01,  7.6971e-02,  7.6797e-02,
         -3.6944e-01, -6.8485e-02, -4.9485e-01,  3.8521e-01, -3.1561e-01,
          1.5803e-01,  1.6834e-01, -3.2465e-02,  2.8004e-01, -2.0555e-01,
         -1.7389e-01, -7.6886e-02, -1.2060e-02,  9.0963e-02, -1.0527e-01,
          3.9365e-01,  2.0641e-01, -4.8701e-01, -1.5463e-02, -8.8702e-02,
          5.3859e-02,  2.6555e-01,  2.3600e-02, -2.1432e-01,  5.1761e-02,
          7.3127e-02,  1.3097e-01]], device='cuda:0') tensor(0.2084, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
476000 特征值优化 tensor(0.5699, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7464e-01,  3.9192e-01,  6.6272e-01,  1.1004e+00,  2.0929e-01,
         -6.6956e-01, -6.7758e-01,  6.6952e-01, -7.6028e-01,  9.2396e-01,
          3.9693e-01,  4.5684e-01,  6.1149e-02, -4.5715e-02, -1.2703e-01,
          1.4357e-02,  3.3230e-02, -1.8496e-01,  6.9638e-03, -4.0199e-02,
         -7.3724e-02, -7.6431e-03, -1.0269e-01,  1.2933e-01, -6.5917e-02,
          1.0476e-02,  1.6465e-01, -1.1372e-01, -1.3107e-01, -4.4710e-04,
         -9.5501e-02,  9.1539e-02, -6.1455e-02, -3.3782e-02,  4.5725e-02,
          3.1524e-02,  7.4979e-02,  1.1591e-01,  2.3268e-01, -6.6794e-02,
         -1.0923e-01,  3.0829e-02, -1.4540e-01,  7.2300e-02,  7.1973e-02,
         -3.7259e-01, -6.9369e-02, -4.9899e-01,  3.8464e-01, -3.1211e-01,
          1.5083e-01,  1.7027e-01, -2.7697e-02,  2.7874e-01, -2.3056e-01,
         -1.7139e-01, -7.3881e-02, -1.9097e-02,  9.0152e-02, -1.2228e-01,
          3.8720e-01,  2.2023e-01, -4.7355e-01, -2.0998e-02, -8.6271e-02,
          6.1421e-02,  2.8090e-01,  1.5216e-02, -2.1405e-01,  4.7473e-02,
          8.0594e-02,  1.2741e-01]], device='cuda:0') tensor(0.2060, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
477000 特征值优化 tensor(0.5707, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7692e-01,  3.8934e-01,  6.6727e-01,  1.0904e+00,  2.1296e-01,
         -6.7952e-01, -6.7324e-01,  6.6099e-01, -7.4312e-01,  9.2916e-01,
          3.8691e-01,  4.3799e-01,  6.0590e-02, -3.0140e-02, -1.2623e-01,
          1.2952e-02,  2.2466e-02, -1.9350e-01,  2.5340e-03, -3.8094e-02,
         -7.4563e-02, -7.5227e-03, -1.0537e-01,  1.2979e-01, -6.1638e-02,
          9.2320e-03,  1.6309e-01, -1.1518e-01, -1.3169e-01, -2.5404e-04,
         -9.5080e-02,  9.3243e-02, -6.2201e-02, -3.3951e-02,  4.5790e-02,
          3.3107e-02,  7.2372e-02,  1.1752e-01,  2.2741e-01, -7.1553e-02,
         -1.0656e-01,  3.6359e-02, -1.4466e-01,  7.3786e-02,  7.3452e-02,
         -3.7167e-01, -6.8708e-02, -4.9992e-01,  3.8649e-01, -3.1322e-01,
          1.5451e-01,  1.7164e-01, -2.7416e-02,  2.7865e-01, -2.2610e-01,
         -1.7199e-01, -7.1211e-02, -1.7234e-02,  9.5833e-02, -1.1344e-01,
          3.8649e-01,  2.2157e-01, -4.7389e-01, -1.7022e-02, -8.2830e-02,
          6.2029e-02,  2.7680e-01,  1.6650e-02, -2.1505e-01,  4.8741e-02,
          8.1692e-02,  1.2381e-01]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
478000 特征值优化 tensor(0.5726, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.8335e-01,  3.7979e-01,  6.6428e-01,  1.0938e+00,  2.0891e-01,
         -6.6371e-01, -6.7718e-01,  6.5417e-01, -7.2090e-01,  9.3065e-01,
          3.9107e-01,  4.1830e-01,  6.0938e-02, -4.6289e-02, -1.2375e-01,
          9.2021e-03,  2.4834e-02, -1.8742e-01,  5.4200e-03, -3.8734e-02,
         -7.4865e-02, -7.5371e-03, -1.0081e-01,  1.3348e-01, -6.1265e-02,
          3.7573e-03,  1.6665e-01, -1.1557e-01, -1.3240e-01, -4.0279e-04,
         -9.5148e-02,  9.2449e-02, -6.6502e-02, -3.3640e-02,  4.6969e-02,
          3.2459e-02,  7.3544e-02,  1.1568e-01,  2.2179e-01, -7.6454e-02,
         -1.0724e-01,  4.0806e-02, -1.3807e-01,  7.3124e-02,  7.2771e-02,
         -3.7046e-01, -6.7344e-02, -4.9830e-01,  3.8686e-01, -3.1430e-01,
          1.5196e-01,  1.7127e-01, -2.9679e-02,  2.7928e-01, -2.2750e-01,
         -1.7572e-01, -8.1496e-02, -1.5876e-02,  9.9919e-02, -1.0247e-01,
          3.8903e-01,  2.2267e-01, -4.7053e-01, -2.0199e-02, -8.2395e-02,
          6.5752e-02,  2.7161e-01,  1.9411e-02, -2.1704e-01,  4.6532e-02,
          7.7958e-02,  1.2221e-01]], device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
479000 特征值优化 tensor(0.5742, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9327e-01,  3.7562e-01,  6.6286e-01,  1.0848e+00,  2.1217e-01,
         -6.7015e-01, -6.2837e-01,  6.2582e-01, -7.0720e-01,  9.4135e-01,
          3.7325e-01,  4.0261e-01,  5.9275e-02, -3.8582e-02, -1.4215e-01,
          4.6247e-03,  1.1402e-02, -1.7207e-01, -9.0701e-03, -3.9150e-02,
         -7.4178e-02, -7.0655e-03, -1.1581e-01,  1.2531e-01, -6.2536e-02,
          9.4276e-03,  1.6036e-01, -1.1725e-01, -1.3191e-01, -5.7091e-04,
         -9.5611e-02,  8.7691e-02, -6.1148e-02, -3.1790e-02,  5.2167e-02,
          3.6422e-02,  7.2554e-02,  1.0672e-01,  2.0266e-01, -8.5423e-02,
         -1.0353e-01,  6.1000e-02, -1.4273e-01,  7.5084e-02,  7.4850e-02,
         -3.4068e-01, -7.9408e-02, -4.9853e-01,  3.8474e-01, -3.1319e-01,
          1.5812e-01,  1.6884e-01, -1.1864e-02,  2.7151e-01, -2.0646e-01,
         -1.9117e-01, -8.3500e-02, -5.0778e-03,  1.1714e-01, -7.8698e-02,
          4.0823e-01,  2.2224e-01, -5.0415e-01, -1.9470e-02, -8.7183e-02,
          7.1334e-02,  2.6805e-01,  2.4717e-02, -2.4002e-01,  4.9324e-02,
          9.4206e-02,  1.0940e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
480000 特征值优化 tensor(0.5890, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.2004,  0.3577,  0.6491,  1.0682,  0.1965, -0.6379, -0.6670,  0.6825,
         -0.6698,  0.9197,  0.4508,  0.3751,  0.0607, -0.0547, -0.1627,  0.0251,
          0.0133, -0.1098, -0.0742, -0.0374, -0.0762, -0.0055, -0.1372,  0.1130,
         -0.0629,  0.0247,  0.1321, -0.1229, -0.1323,  0.0012, -0.0956,  0.0891,
         -0.0612, -0.0294,  0.0526,  0.0504,  0.0764,  0.1178,  0.1551, -0.1054,
         -0.1108,  0.0907, -0.1301,  0.0737,  0.0736, -0.3686, -0.0632, -0.4936,
          0.3811, -0.3165,  0.1677,  0.1663, -0.0211,  0.2707, -0.1904, -0.1969,
         -0.0975,  0.0021,  0.1453, -0.0202,  0.3891,  0.2101, -0.4977, -0.0046,
         -0.1012,  0.0947,  0.2565,  0.0495, -0.2354,  0.0551,  0.0961,  0.0873]],
       device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
481000 特征值优化 tensor(0.5728, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.1143e-01,  3.7192e-01,  6.5755e-01,  1.0729e+00,  1.9663e-01,
         -6.4707e-01, -6.3267e-01,  6.7192e-01, -6.6785e-01,  9.4240e-01,
          4.3060e-01,  3.7379e-01,  5.7230e-02, -2.1980e-02, -1.8494e-01,
          9.3399e-03, -1.5484e-02, -1.0123e-01, -8.8779e-02, -3.9604e-02,
         -7.4460e-02, -6.9141e-03, -1.5259e-01,  1.0139e-01, -8.2473e-02,
          5.2248e-02,  1.2605e-01, -1.4940e-01, -1.2917e-01,  1.6125e-04,
         -9.5389e-02,  1.0804e-01, -4.1816e-02, -2.9218e-02,  5.3707e-02,
          6.1345e-02,  7.2738e-02,  1.1578e-01,  1.5752e-01, -1.0439e-01,
         -1.0585e-01,  1.0183e-01, -1.2993e-01,  7.3918e-02,  7.4013e-02,
         -3.6473e-01, -6.0113e-02, -4.9698e-01,  3.8292e-01, -3.1104e-01,
          1.6648e-01,  1.6836e-01, -1.3196e-02,  2.7449e-01, -1.6922e-01,
         -2.2760e-01, -9.3618e-02,  5.2594e-03,  1.4653e-01, -2.3505e-02,
          3.8765e-01,  2.1030e-01, -4.8471e-01, -1.7921e-02, -7.2719e-02,
          8.7101e-02,  2.6926e-01,  5.7172e-02, -2.6807e-01,  6.6380e-02,
          9.5431e-02,  7.9668e-02]], device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
482000 特征值优化 tensor(0.5796, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0967e-01,  3.7307e-01,  6.5097e-01,  1.0810e+00,  2.0120e-01,
         -6.5423e-01, -6.6051e-01,  6.4324e-01, -6.3029e-01,  9.4536e-01,
          4.3953e-01,  3.5223e-01,  5.8106e-02, -2.5001e-02, -1.5980e-01,
         -9.7641e-03, -3.0373e-02, -1.5300e-01, -3.8616e-02, -3.8802e-02,
         -7.3283e-02, -6.3157e-03, -1.2081e-01,  1.2660e-01, -7.7429e-02,
          2.1479e-02,  1.4448e-01, -1.3504e-01, -1.3001e-01,  1.4277e-04,
         -9.5852e-02,  1.0596e-01, -4.2812e-02, -3.1469e-02,  5.6483e-02,
          5.2208e-02,  8.7400e-02,  1.0606e-01,  1.9335e-01, -9.1646e-02,
         -1.2152e-01,  6.1430e-02, -1.3186e-01,  7.2270e-02,  7.2263e-02,
         -3.6207e-01, -6.3666e-02, -4.9409e-01,  3.8436e-01, -3.1385e-01,
          1.5947e-01,  1.6814e-01, -2.6435e-02,  2.7865e-01, -1.9499e-01,
         -1.9360e-01, -9.4243e-02,  6.1552e-03,  1.0824e-01, -7.9545e-02,
          3.9365e-01,  2.0419e-01, -4.8635e-01, -1.9128e-02, -6.1043e-02,
          6.9172e-02,  2.6442e-01,  3.8717e-02, -2.4369e-01,  6.1368e-02,
          7.2525e-02,  1.0615e-01]], device='cuda:0') tensor(0.2035, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
483000 特征值优化 tensor(0.5694, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7558e-01,  3.9217e-01,  6.5896e-01,  1.0937e+00,  2.0879e-01,
         -6.6631e-01, -7.0601e-01,  6.5469e-01, -6.4437e-01,  9.8601e-01,
          4.3187e-01,  3.3890e-01,  5.9932e-02, -3.6218e-02, -1.2629e-01,
          8.8879e-03,  2.8858e-02, -1.8398e-01,  2.5831e-03, -3.8228e-02,
         -7.5541e-02, -7.5765e-03, -1.0523e-01,  1.2838e-01, -6.7095e-02,
         -6.8650e-05,  1.6518e-01, -1.1251e-01, -1.3193e-01, -5.9355e-04,
         -9.6060e-02,  9.1903e-02, -6.2893e-02, -3.4005e-02,  4.3536e-02,
          3.6413e-02,  7.5522e-02,  1.1771e-01,  2.1550e-01, -8.2347e-02,
         -1.0984e-01,  4.8210e-02, -1.4213e-01,  7.2808e-02,  7.2576e-02,
         -3.7652e-01, -6.5476e-02, -4.9631e-01,  3.8693e-01, -3.1362e-01,
          1.5229e-01,  1.7150e-01, -2.2316e-02,  2.7479e-01, -2.4556e-01,
         -1.7022e-01, -7.6153e-02, -1.8561e-02,  9.1647e-02, -1.1413e-01,
          3.9319e-01,  2.1891e-01, -4.6243e-01, -1.8760e-02, -6.5589e-02,
          6.8481e-02,  2.8244e-01,  1.9423e-02, -2.2798e-01,  5.1066e-02,
          5.9390e-02,  1.2077e-01]], device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
484000 特征值优化 tensor(0.5731, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.8707e-01,  3.7931e-01,  6.6600e-01,  1.0813e+00,  2.0412e-01,
         -6.6877e-01, -6.7231e-01,  6.3263e-01, -6.2622e-01,  9.8654e-01,
          4.0607e-01,  3.2148e-01,  6.0081e-02, -3.5051e-02, -1.3599e-01,
          6.7894e-03,  2.1360e-02, -1.7708e-01, -3.3474e-03, -3.8927e-02,
         -7.4782e-02, -7.7050e-03, -1.1685e-01,  1.2250e-01, -6.5908e-02,
          5.5807e-03,  1.5928e-01, -1.1774e-01, -1.3262e-01, -7.4101e-04,
         -9.6638e-02,  9.4035e-02, -6.2788e-02, -3.3788e-02,  4.6473e-02,
          3.8202e-02,  7.1085e-02,  1.1483e-01,  1.9505e-01, -9.1039e-02,
         -1.0505e-01,  6.8679e-02, -1.3807e-01,  7.2817e-02,  7.2454e-02,
         -3.6725e-01, -6.7812e-02, -4.9992e-01,  3.8610e-01, -3.1341e-01,
          1.5774e-01,  1.7172e-01, -1.8798e-02,  2.7364e-01, -2.1446e-01,
         -1.6630e-01, -8.4143e-02, -1.0414e-02,  1.1196e-01, -8.6202e-02,
          3.9810e-01,  2.2575e-01, -4.8447e-01, -1.3579e-02, -6.1401e-02,
          7.2668e-02,  2.7244e-01,  2.9064e-02, -2.4828e-01,  5.2318e-02,
          7.0362e-02,  1.0642e-01]], device='cuda:0') tensor(0.2085, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
485000 特征值优化 tensor(0.5805, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0665e-01,  3.6317e-01,  6.4879e-01,  1.0733e+00,  2.0173e-01,
         -6.5428e-01, -6.7626e-01,  6.4266e-01, -5.8770e-01,  9.6691e-01,
          4.2786e-01,  2.9866e-01,  5.8694e-02, -3.9106e-02, -1.5352e-01,
          2.1781e-02,  9.5436e-03, -1.3673e-01, -4.9017e-02, -3.7578e-02,
         -7.4840e-02, -6.0166e-03, -1.2922e-01,  1.1291e-01, -5.9941e-02,
          3.2462e-03,  1.5909e-01, -1.2440e-01, -1.3310e-01,  6.0645e-04,
         -9.7298e-02,  9.4009e-02, -5.9388e-02, -3.1791e-02,  4.8141e-02,
          4.9371e-02,  7.2705e-02,  1.1535e-01,  1.6192e-01, -1.0498e-01,
         -1.0766e-01,  9.2702e-02, -1.3486e-01,  7.3836e-02,  7.3692e-02,
         -3.6207e-01, -6.5913e-02, -4.9219e-01,  3.8043e-01, -3.1444e-01,
          1.6315e-01,  1.6741e-01, -2.1990e-02,  2.7557e-01, -2.0951e-01,
         -1.8152e-01, -9.1751e-02,  1.4663e-03,  1.3997e-01, -4.4476e-02,
          3.9720e-01,  2.2338e-01, -4.9205e-01, -8.8144e-03, -7.8087e-02,
          9.4466e-02,  2.5912e-01,  4.5566e-02, -2.5039e-01,  4.9976e-02,
          8.6102e-02,  8.5817e-02]], device='cuda:0') tensor(0.2055, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
486000 特征值优化 tensor(0.5706, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0335e-01,  3.7660e-01,  6.5967e-01,  1.0795e+00,  2.0021e-01,
         -6.5206e-01, -6.6492e-01,  6.6802e-01, -5.9811e-01,  9.8454e-01,
          4.4763e-01,  3.0003e-01,  5.7615e-02, -2.5023e-02, -1.8087e-01,
          1.4117e-02, -1.1013e-02, -9.6768e-02, -9.2940e-02, -3.9752e-02,
         -7.5138e-02, -7.0287e-03, -1.5780e-01,  9.4659e-02, -9.7799e-02,
          5.4356e-02,  1.3325e-01, -1.4177e-01, -1.2930e-01,  2.3290e-04,
         -9.4549e-02,  1.1042e-01, -4.1303e-02, -2.9785e-02,  4.9867e-02,
          6.4729e-02,  7.4584e-02,  1.1587e-01,  1.5005e-01, -1.0704e-01,
         -1.0740e-01,  1.1328e-01, -1.3191e-01,  7.4485e-02,  7.4609e-02,
         -3.6964e-01, -5.9104e-02, -4.9749e-01,  3.8442e-01, -3.1135e-01,
          1.6238e-01,  1.6866e-01, -1.3392e-02,  2.7476e-01, -1.6639e-01,
         -2.3044e-01, -9.1872e-02,  3.8499e-03,  1.4790e-01, -2.8229e-02,
          3.9492e-01,  2.1071e-01, -4.7829e-01, -1.8045e-02, -5.6185e-02,
          1.0013e-01,  2.7632e-01,  6.0482e-02, -2.7097e-01,  6.7557e-02,
          7.7754e-02,  6.6165e-02]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
487000 特征值优化 tensor(0.5765, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9992e-01,  3.7175e-01,  6.5531e-01,  1.0790e+00,  1.9868e-01,
         -6.5212e-01, -6.6265e-01,  6.3377e-01, -5.6032e-01,  9.8827e-01,
          4.3877e-01,  2.7444e-01,  5.9108e-02, -2.7053e-02, -1.6184e-01,
          1.9693e-02, -1.4323e-02, -1.2829e-01, -6.5739e-02, -4.0030e-02,
         -7.6559e-02, -6.9438e-03, -1.3123e-01,  1.1731e-01, -8.8760e-02,
          1.5784e-02,  1.3621e-01, -1.3499e-01, -1.2888e-01,  6.6263e-06,
         -9.6429e-02,  1.0893e-01, -3.8428e-02, -3.1395e-02,  4.8458e-02,
          5.5895e-02,  7.8497e-02,  1.0873e-01,  1.7871e-01, -9.7222e-02,
         -1.1109e-01,  7.6016e-02, -1.3200e-01,  7.5168e-02,  7.5186e-02,
         -3.6926e-01, -6.0794e-02, -4.9492e-01,  3.8333e-01, -3.1005e-01,
          1.6491e-01,  1.6831e-01, -1.8950e-02,  2.7478e-01, -1.8255e-01,
         -2.0721e-01, -9.0983e-02,  1.6365e-03,  1.1277e-01, -7.1679e-02,
          4.0520e-01,  2.1404e-01, -4.7332e-01, -2.5565e-02, -5.0101e-02,
          7.3572e-02,  2.6673e-01,  4.2306e-02, -2.6582e-01,  5.9927e-02,
          6.2089e-02,  1.0044e-01]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
488000 特征值优化 tensor(0.5711, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7032e-01,  3.9998e-01,  6.6455e-01,  1.0897e+00,  2.0778e-01,
         -6.8345e-01, -7.0237e-01,  6.3162e-01, -5.6178e-01,  1.0208e+00,
          4.2233e-01,  2.5561e-01,  6.0246e-02, -3.8283e-02, -1.4049e-01,
          3.0470e-03,  2.8479e-02, -1.8089e-01, -3.5232e-03, -4.0483e-02,
         -7.3891e-02, -7.4251e-03, -1.1486e-01,  1.2339e-01, -6.9524e-02,
         -7.0067e-03,  1.5986e-01, -1.0872e-01, -1.3306e-01, -6.4132e-04,
         -9.5716e-02,  9.2570e-02, -6.4571e-02, -3.4221e-02,  4.5073e-02,
          3.9260e-02,  7.4303e-02,  1.1548e-01,  1.9927e-01, -9.1260e-02,
         -1.0784e-01,  6.3503e-02, -1.4874e-01,  7.1934e-02,  7.1614e-02,
         -3.7070e-01, -7.1263e-02, -4.9868e-01,  3.8698e-01, -3.1483e-01,
          1.5252e-01,  1.7153e-01, -2.3930e-02,  2.7565e-01, -2.2194e-01,
         -1.6653e-01, -7.6082e-02, -1.1414e-02,  1.0249e-01, -9.9509e-02,
          4.0508e-01,  2.2101e-01, -4.7275e-01, -1.4390e-02, -4.3505e-02,
          7.1308e-02,  2.7548e-01,  2.8536e-02, -2.4688e-01,  5.5322e-02,
          5.0753e-02,  1.0853e-01]], device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
489000 特征值优化 tensor(0.5792, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0488e-01,  3.6212e-01,  6.4702e-01,  1.0666e+00,  1.9920e-01,
         -6.4876e-01, -7.0264e-01,  6.4802e-01, -5.2850e-01,  9.9753e-01,
          4.5298e-01,  2.3763e-01,  5.9777e-02, -3.9721e-02, -1.5621e-01,
          1.8975e-02,  2.0492e-02, -1.3431e-01, -4.4622e-02, -3.9073e-02,
         -7.4420e-02, -5.6959e-03, -1.3087e-01,  1.0956e-01, -6.9164e-02,
         -5.6320e-03,  1.5826e-01, -1.1845e-01, -1.3404e-01,  9.7930e-04,
         -9.7054e-02,  8.7230e-02, -6.2816e-02, -3.1119e-02,  4.9738e-02,
          5.0297e-02,  7.2753e-02,  1.1670e-01,  1.5800e-01, -1.0340e-01,
         -1.0953e-01,  9.9478e-02, -1.3210e-01,  7.2383e-02,  7.2218e-02,
         -3.6202e-01, -6.5908e-02, -4.9135e-01,  3.8339e-01, -3.1742e-01,
          1.6462e-01,  1.6725e-01, -1.6065e-02,  2.7416e-01, -2.2642e-01,
         -1.7790e-01, -9.6482e-02,  1.4107e-03,  1.3588e-01, -4.6288e-02,
          4.1690e-01,  2.1523e-01, -4.8820e-01, -6.1302e-03, -6.9197e-02,
          9.5130e-02,  2.6248e-01,  4.1158e-02, -2.6016e-01,  5.5176e-02,
          7.1414e-02,  8.8579e-02]], device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
490000 特征值优化 tensor(0.5706, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0172e-01,  3.7916e-01,  6.5737e-01,  1.0733e+00,  1.9730e-01,
         -6.4869e-01, -6.8536e-01,  6.6510e-01, -5.4403e-01,  1.0153e+00,
          4.7018e-01,  2.4153e-01,  5.7803e-02, -2.4414e-02, -1.8334e-01,
          1.6601e-02, -1.2083e-02, -8.9071e-02, -1.0101e-01, -3.9357e-02,
         -7.5384e-02, -6.7953e-03, -1.6031e-01,  9.5382e-02, -9.2444e-02,
          5.1319e-02,  1.2827e-01, -1.4598e-01, -1.2998e-01,  1.3275e-04,
         -9.4458e-02,  1.1050e-01, -4.1147e-02, -2.8749e-02,  4.8148e-02,
          6.6977e-02,  7.3494e-02,  1.1795e-01,  1.3339e-01, -1.1006e-01,
         -1.0670e-01,  1.2863e-01, -1.3290e-01,  7.4668e-02,  7.4836e-02,
         -3.7156e-01, -5.8624e-02, -4.9631e-01,  3.8595e-01, -3.1291e-01,
          1.6424e-01,  1.6948e-01, -1.2691e-02,  2.7499e-01, -1.6565e-01,
         -2.3368e-01, -9.3491e-02,  4.1011e-03,  1.6083e-01, -1.7904e-02,
          4.0395e-01,  2.0859e-01, -4.7284e-01, -1.5641e-02, -4.9727e-02,
          1.1356e-01,  2.7552e-01,  6.4691e-02, -2.7965e-01,  6.9457e-02,
          7.1688e-02,  5.1582e-02]], device='cuda:0') tensor(0.2036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
491000 特征值优化 tensor(0.5751, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0355e-01,  3.6887e-01,  6.5749e-01,  1.0806e+00,  1.9361e-01,
         -6.5138e-01, -6.7228e-01,  6.2103e-01, -5.1028e-01,  1.0078e+00,
          4.4630e-01,  2.1365e-01,  5.8332e-02, -2.2974e-02, -1.6745e-01,
          2.1526e-02, -1.0450e-02, -1.2904e-01, -6.6563e-02, -3.8722e-02,
         -7.5881e-02, -7.1591e-03, -1.3797e-01,  1.1295e-01, -9.2009e-02,
          2.0842e-02,  1.3324e-01, -1.3439e-01, -1.2856e-01, -4.1832e-05,
         -9.6004e-02,  1.1002e-01, -3.9401e-02, -3.0832e-02,  4.6744e-02,
          5.9727e-02,  7.3957e-02,  1.1242e-01,  1.7164e-01, -1.0047e-01,
         -1.0788e-01,  8.6596e-02, -1.3090e-01,  7.4694e-02,  7.4735e-02,
         -3.6697e-01, -6.0505e-02, -4.9707e-01,  3.8269e-01, -3.0956e-01,
          1.6416e-01,  1.6776e-01, -1.8289e-02,  2.7691e-01, -1.7637e-01,
         -2.1790e-01, -9.1144e-02,  2.2557e-03,  1.1562e-01, -6.9365e-02,
          4.1032e-01,  2.1679e-01, -4.6357e-01, -2.3620e-02, -2.6716e-02,
          7.9228e-02,  2.7499e-01,  4.4738e-02, -2.7212e-01,  5.6631e-02,
          4.4461e-02,  9.2272e-02]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
492000 特征值优化 tensor(0.5704, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6513e-01,  3.9766e-01,  6.6774e-01,  1.0897e+00,  2.1243e-01,
         -6.9487e-01, -7.2224e-01,  6.2112e-01, -5.0770e-01,  1.0476e+00,
          4.2452e-01,  2.0056e-01,  6.1779e-02, -3.4904e-02, -1.2809e-01,
          4.6611e-03,  1.7369e-02, -1.9940e-01,  9.2676e-03, -3.9190e-02,
         -7.4043e-02, -7.4176e-03, -1.0793e-01,  1.2673e-01, -7.0944e-02,
         -2.3570e-02,  1.6241e-01, -1.0221e-01, -1.3161e-01, -2.7944e-04,
         -9.4631e-02,  8.9641e-02, -6.6981e-02, -3.4472e-02,  3.7380e-02,
          3.9428e-02,  6.7190e-02,  1.2073e-01,  2.2264e-01, -8.9488e-02,
         -1.0132e-01,  4.0919e-02, -1.4929e-01,  7.2596e-02,  7.2214e-02,
         -3.7818e-01, -6.9633e-02, -5.0077e-01,  3.8561e-01, -3.1284e-01,
          1.5536e-01,  1.7118e-01, -3.1076e-02,  2.7980e-01, -2.2461e-01,
         -1.7841e-01, -6.1985e-02, -1.8718e-02,  7.8141e-02, -1.2894e-01,
          4.1914e-01,  2.2249e-01, -4.4608e-01, -1.6647e-02, -1.1848e-02,
          5.8281e-02,  2.8748e-01,  1.7018e-02, -2.3571e-01,  4.4837e-02,
          8.0693e-03,  1.2861e-01]], device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
493000 特征值优化 tensor(0.5736, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.8652e-01,  3.7853e-01,  6.6501e-01,  1.0808e+00,  2.0913e-01,
         -6.8128e-01, -7.1413e-01,  6.0496e-01, -4.8536e-01,  1.0399e+00,
          4.3015e-01,  1.9158e-01,  6.0663e-02, -4.1085e-02, -1.3202e-01,
          1.1670e-02,  1.5872e-02, -1.8582e-01, -1.4080e-03, -3.7755e-02,
         -7.5227e-02, -7.3026e-03, -1.0722e-01,  1.3166e-01, -7.0716e-02,
         -1.7061e-02,  1.6320e-01, -1.0650e-01, -1.3436e-01, -5.3504e-04,
         -9.5544e-02,  9.1240e-02, -6.3657e-02, -3.4520e-02,  4.2093e-02,
          3.9866e-02,  7.1239e-02,  1.1649e-01,  1.9706e-01, -9.6663e-02,
         -1.0516e-01,  6.4119e-02, -1.3748e-01,  7.3018e-02,  7.2707e-02,
         -3.7204e-01, -6.5500e-02, -4.9816e-01,  3.8743e-01, -3.1512e-01,
          1.5691e-01,  1.7251e-01, -2.9186e-02,  2.7811e-01, -2.2761e-01,
         -1.7818e-01, -7.3370e-02, -1.3782e-02,  9.5604e-02, -1.0286e-01,
          4.1630e-01,  2.2312e-01, -4.5682e-01, -1.4024e-02, -3.0547e-02,
          7.3388e-02,  2.7494e-01,  2.5225e-02, -2.4344e-01,  4.6584e-02,
          2.3131e-02,  1.1618e-01]], device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
494000 特征值优化 tensor(0.5761, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9909e-01,  3.6513e-01,  6.5696e-01,  1.0725e+00,  2.0965e-01,
         -6.5620e-01, -7.0562e-01,  6.1507e-01, -4.7063e-01,  1.0314e+00,
          4.5435e-01,  1.8102e-01,  6.1026e-02, -3.7210e-02, -1.3675e-01,
          1.4717e-02,  1.2599e-02, -1.6290e-01, -1.4892e-02, -3.8349e-02,
         -7.4115e-02, -7.3692e-03, -1.1123e-01,  1.3113e-01, -7.2969e-02,
         -7.3212e-03,  1.6104e-01, -1.1815e-01, -1.3522e-01, -5.6453e-04,
         -9.5845e-02,  9.1280e-02, -6.3577e-02, -3.2516e-02,  4.6598e-02,
          4.3312e-02,  6.8523e-02,  1.1779e-01,  1.6949e-01, -1.0219e-01,
         -1.0385e-01,  9.1382e-02, -1.3276e-01,  7.2070e-02,  7.1838e-02,
         -3.6534e-01, -6.6653e-02, -4.9412e-01,  3.8545e-01, -3.1600e-01,
          1.6040e-01,  1.7192e-01, -2.4139e-02,  2.7669e-01, -2.3091e-01,
         -1.7993e-01, -9.0634e-02, -5.6063e-03,  1.1998e-01, -7.0213e-02,
          4.1533e-01,  2.2598e-01, -4.6810e-01, -1.0808e-02, -3.9813e-02,
          8.5244e-02,  2.6700e-01,  3.5979e-02, -2.5978e-01,  4.5855e-02,
          3.9034e-02,  9.5389e-02]], device='cuda:0') tensor(0.2114, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
495000 特征值优化 tensor(0.6099, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0072e-01,  3.7951e-01,  6.5744e-01,  1.0819e+00,  1.9829e-01,
         -6.5209e-01, -6.9748e-01,  6.5643e-01, -4.8142e-01,  1.0298e+00,
          4.7501e-01,  1.7984e-01,  5.7484e-02, -2.7516e-02, -1.8653e-01,
          5.4516e-03, -9.6474e-03, -1.0028e-01, -9.0683e-02, -3.6924e-02,
         -7.4004e-02, -6.8119e-03, -1.4803e-01,  9.9660e-02, -1.0226e-01,
          3.8858e-02,  1.3881e-01, -1.2903e-01, -1.3024e-01, -2.4764e-04,
         -9.4260e-02,  1.0298e-01, -4.5355e-02, -2.9499e-02,  4.3925e-02,
          5.9312e-02,  6.7551e-02,  1.2425e-01,  1.3871e-01, -1.0781e-01,
         -1.0235e-01,  1.1996e-01, -1.3345e-01,  7.3966e-02,  7.3950e-02,
         -3.7214e-01, -5.9236e-02, -4.9680e-01,  3.8452e-01, -3.1043e-01,
          1.6129e-01,  1.6708e-01, -2.0902e-02,  2.7822e-01, -1.5773e-01,
         -2.3830e-01, -9.1202e-02,  2.9199e-03,  1.4506e-01, -4.0319e-02,
          4.1394e-01,  2.1223e-01, -4.6286e-01, -1.1497e-02, -2.3937e-02,
          1.0659e-01,  2.8136e-01,  5.6018e-02, -2.7855e-01,  6.5649e-02,
          3.8657e-02,  6.3328e-02]], device='cuda:0') tensor(0.2028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
496000 特征值优化 tensor(14.2587, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.7859, -0.5600,  1.6666, -0.4018, -0.5540,  0.7815,  0.0981,  0.7487,
         -0.1084, -0.3268,  1.2126, -0.7733, -0.0412,  0.4853, -0.0585,  0.3471,
          1.0470,  0.1970, -0.2780,  0.6886,  0.4897,  0.1042, -0.4020,  0.0263,
         -0.1103, -0.0138,  0.5996, -0.9494, -0.0527, -0.1244, -0.2674,  0.3720,
          0.6433, -0.1077,  1.5867, -0.0765,  0.5695,  0.4182,  0.9462, -0.9248,
         -0.2621,  1.4666, -0.4474, -0.4957,  0.6710,  0.6358,  1.1490, -1.3964,
         -0.7500,  1.0245,  0.3678,  0.1209, -0.1500,  0.2577, -0.3998,  0.2789,
          0.8820,  0.0308,  0.7395,  0.7861,  0.2554, -0.7339,  0.5536, -0.8670,
          0.1071,  0.1889, -0.9234, -0.6491, -0.9134, -0.5956, -0.4339,  0.9775]],
       device='cuda:0') tensor(0.2194, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
497000 特征值优化 tensor(1.7367, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0186,  0.2448,  0.3072, -0.4370, -0.0799,  0.1745, -0.3617, -0.0409,
         -0.6018,  0.5529,  0.7310, -0.6414, -0.0573, -0.0175,  0.1424,  0.0362,
          0.1860, -0.0840, -0.1589,  0.0626,  0.0494,  0.0611, -0.0236,  0.0214,
         -0.0369,  0.0017,  0.0464, -0.1657,  0.0599, -0.0019, -0.1870, -0.0335,
          0.0476, -0.0209,  0.5401,  0.0051,  0.1606,  0.0267,  0.0678, -0.0775,
         -0.1160,  0.3986, -0.1147, -0.1449,  0.4350,  0.1414,  0.3350, -0.5587,
         -0.3751,  0.7068,  0.2522, -0.0174,  0.2341,  0.0173, -0.1196,  0.1948,
          0.2173,  0.2433,  0.2321,  0.2315,  0.1364, -0.0712, -0.1018, -0.2202,
          0.0699, -0.0150, -0.2830, -0.0759, -0.3308,  0.0553, -0.1409,  0.0631]],
       device='cuda:0') tensor(0.2155, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
498000 特征值优化 tensor(0.6644, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0652,  0.1881,  0.2093, -0.3352, -0.0105,  0.4732, -0.5306, -0.1521,
         -0.5655,  0.6901,  0.7499, -0.6728, -0.0514, -0.1435,  0.1297, -0.0911,
          0.0915,  0.0633, -0.1465,  0.0880,  0.0570,  0.0637, -0.0736,  0.3020,
         -0.0461,  0.0865, -0.0863, -0.1242,  0.0071,  0.0048, -0.1961, -0.0152,
          0.0696, -0.0174,  0.2001, -0.0360,  0.1411,  0.0179,  0.0183, -0.0131,
         -0.0823,  0.3252, -0.1417, -0.0286,  0.3077,  0.3403,  0.2291, -0.4635,
         -0.4368,  0.7229,  0.0435,  0.0803,  0.2419,  0.0063, -0.0588,  0.2391,
          0.1978,  0.1941, -0.0953,  0.3052,  0.0835, -0.0363, -0.2209, -0.1584,
         -0.0802,  0.0201, -0.6700, -0.0825, -0.2624,  0.0880, -0.1553,  0.0795]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
499000 特征值优化 tensor(0.6416, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0768,  0.2041,  0.1221, -0.4122, -0.1729,  0.8302, -0.6734, -0.1686,
         -0.7145,  0.6793,  0.8834, -0.6375, -0.0529, -0.1215,  0.1577, -0.0627,
          0.1147,  0.0680, -0.1401,  0.0880,  0.0594,  0.0614, -0.0209,  0.3104,
         -0.0384,  0.0818, -0.1148, -0.0820, -0.0169,  0.0069, -0.1888, -0.0139,
          0.0764, -0.0097,  0.1669, -0.0773,  0.1543,  0.0095,  0.0271,  0.0077,
         -0.0963,  0.3096, -0.1452, -0.0064,  0.2928,  0.3365,  0.2223, -0.4136,
         -0.4186,  0.6992,  0.0821,  0.0774,  0.2968,  0.0283, -0.0398,  0.2484,
          0.1568,  0.1260,  0.0249,  0.3421,  0.1412, -0.0468, -0.1893, -0.1471,
         -0.2088,  0.0912, -0.6195, -0.1231, -0.2834,  0.0772, -0.1415,  0.0727]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
500000 特征值优化 tensor(0.6342, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0335,  0.1609,  0.1460, -0.3946, -0.1874,  0.8951, -0.7339, -0.2073,
         -0.8137,  0.7560,  0.9467, -0.5347, -0.0551, -0.2225,  0.0761, -0.0678,
          0.1095,  0.0806, -0.1182,  0.0878,  0.0610,  0.0641, -0.0426,  0.2819,
         -0.0221,  0.0748, -0.1072, -0.0976, -0.0322,  0.0094, -0.1912,  0.0053,
          0.0695, -0.0099,  0.1541, -0.0729,  0.1538, -0.0048,  0.0206,  0.0370,
         -0.0990,  0.3180, -0.1214,  0.0014,  0.2928,  0.3576,  0.2121, -0.4271,
         -0.4286,  0.7020,  0.0719,  0.0702,  0.3188,  0.0168, -0.0925,  0.2180,
          0.1075,  0.1681,  0.0650,  0.2741,  0.1233, -0.0482, -0.1902, -0.1205,
         -0.1777,  0.0463, -0.6421, -0.0864, -0.3092,  0.0927, -0.1450,  0.0995]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
501000 特征值优化 tensor(0.6334, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.5465e-02,  1.7036e-01,  1.4085e-01, -3.9582e-01, -2.0258e-01,
          8.9072e-01, -7.8791e-01, -2.1960e-01, -8.3148e-01,  8.3646e-01,
          1.0103e+00, -5.1075e-01, -5.4882e-02, -2.1878e-01,  7.2101e-02,
         -6.3358e-02,  1.1440e-01,  7.7068e-02, -1.1827e-01,  8.7969e-02,
          6.0884e-02,  6.4083e-02, -4.8100e-02,  2.8441e-01,  3.1254e-03,
          1.1692e-01, -5.7402e-02, -1.1412e-01, -2.5536e-02,  9.4590e-03,
         -1.8911e-01,  1.1526e-02,  6.7840e-02, -1.1336e-02,  1.5520e-01,
         -7.1611e-02,  1.6655e-01, -1.2705e-02,  2.6439e-03,  4.4087e-02,
         -1.1417e-01,  3.3715e-01, -1.2424e-01, -2.4118e-04,  2.9179e-01,
          3.5222e-01,  2.1466e-01, -4.2551e-01, -4.2816e-01,  7.0195e-01,
          6.9742e-02,  7.2167e-02,  3.5045e-01,  5.7694e-04, -9.3950e-02,
          2.1374e-01,  1.0464e-01,  1.6812e-01,  1.0133e-01,  2.9117e-01,
          1.4459e-01, -4.6890e-02, -1.7400e-01, -1.0029e-01, -1.7078e-01,
          4.0584e-02, -6.4550e-01, -6.3605e-02, -3.5664e-01,  1.0701e-01,
         -1.5294e-01,  1.0496e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
502000 特征值优化 tensor(0.6334, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.6218e-02,  1.7195e-01,  1.4119e-01, -3.9437e-01, -2.0317e-01,
          8.8953e-01, -7.9232e-01, -2.2013e-01, -8.3277e-01,  8.5025e-01,
          1.0147e+00, -5.0906e-01, -5.5112e-02, -2.1761e-01,  7.1986e-02,
         -6.2387e-02,  1.1485e-01,  7.6967e-02, -1.1881e-01,  8.7969e-02,
          6.0466e-02,  6.3689e-02, -4.7456e-02,  2.8585e-01,  1.0424e-02,
          1.2752e-01, -4.5863e-02, -1.1789e-01, -2.2512e-02,  1.0127e-02,
         -1.8871e-01,  1.1314e-02,  6.7873e-02, -1.1265e-02,  1.5381e-01,
         -7.3037e-02,  1.6783e-01, -1.3577e-02, -7.1107e-04,  4.4680e-02,
         -1.1547e-01,  3.4065e-01, -1.2410e-01, -8.8565e-06,  2.9220e-01,
          3.5157e-01,  2.1523e-01, -4.2573e-01, -4.2807e-01,  7.0184e-01,
          6.7100e-02,  7.2832e-02,  3.5050e-01,  3.0017e-04, -8.8984e-02,
          2.1633e-01,  1.0521e-01,  1.6718e-01,  1.0731e-01,  2.9094e-01,
          1.4689e-01, -4.6663e-02, -1.7139e-01, -9.9565e-02, -1.7237e-01,
          4.1198e-02, -6.4641e-01, -5.9714e-02, -3.5820e-01,  1.0697e-01,
         -1.5297e-01,  1.0483e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
503000 特征值优化 tensor(0.6334, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.5644e-02,  1.7192e-01,  1.4134e-01, -3.9461e-01, -2.0250e-01,
          8.8944e-01, -7.9348e-01, -2.2015e-01, -8.3231e-01,  8.5032e-01,
          1.0148e+00, -5.0907e-01, -5.5059e-02, -2.1787e-01,  7.1978e-02,
         -6.3087e-02,  1.1466e-01,  7.7027e-02, -1.1822e-01,  8.8118e-02,
          6.0660e-02,  6.3840e-02, -4.7248e-02,  2.8571e-01,  1.0556e-02,
          1.2771e-01, -4.5619e-02, -1.1753e-01, -2.2217e-02,  9.7453e-03,
         -1.8841e-01,  1.1308e-02,  6.7849e-02, -1.1000e-02,  1.5373e-01,
         -7.3077e-02,  1.6762e-01, -1.3262e-02, -6.7670e-04,  4.4821e-02,
         -1.1507e-01,  3.4060e-01, -1.2453e-01, -5.1571e-04,  2.9167e-01,
          3.5144e-01,  2.1514e-01, -4.2559e-01, -4.2830e-01,  7.0180e-01,
          6.6897e-02,  7.3052e-02,  3.5026e-01,  5.4099e-04, -8.9398e-02,
          2.1651e-01,  1.0490e-01,  1.6714e-01,  1.0754e-01,  2.9113e-01,
          1.4737e-01, -4.7056e-02, -1.7146e-01, -9.9501e-02, -1.7222e-01,
          4.1347e-02, -6.4625e-01, -5.9629e-02, -3.5802e-01,  1.0671e-01,
         -1.5328e-01,  1.0486e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
504000 特征值优化 tensor(0.6333, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.5734e-02,  1.7186e-01,  1.4195e-01, -3.9454e-01, -2.0261e-01,
          8.8997e-01, -7.9273e-01, -2.2036e-01, -8.3267e-01,  8.5036e-01,
          1.0144e+00, -5.0910e-01, -5.4985e-02, -2.1746e-01,  7.2567e-02,
         -6.3229e-02,  1.1491e-01,  7.6761e-02, -1.1856e-01,  8.7999e-02,
          6.0505e-02,  6.4002e-02, -4.7501e-02,  2.8630e-01,  1.0337e-02,
          1.2784e-01, -4.5463e-02, -1.1841e-01, -2.1830e-02,  9.8745e-03,
         -1.8869e-01,  1.1917e-02,  6.7793e-02, -1.1187e-02,  1.5402e-01,
         -7.3244e-02,  1.6798e-01, -1.3478e-02, -5.9473e-04,  4.4754e-02,
         -1.1548e-01,  3.4043e-01, -1.2439e-01, -5.0141e-04,  2.9193e-01,
          3.5138e-01,  2.1521e-01, -4.2585e-01, -4.2740e-01,  7.0191e-01,
          6.6331e-02,  7.2739e-02,  3.5075e-01,  1.0110e-03, -8.8468e-02,
          2.1653e-01,  1.0560e-01,  1.6709e-01,  1.0752e-01,  2.9076e-01,
          1.4702e-01, -4.6941e-02, -1.7157e-01, -9.9007e-02, -1.7211e-01,
          4.1317e-02, -6.4632e-01, -5.9775e-02, -3.5845e-01,  1.0691e-01,
         -1.5309e-01,  1.0500e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
505000 特征值优化 tensor(0.6334, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.6059e-02,  1.7244e-01,  1.4189e-01, -3.9448e-01, -2.0291e-01,
          8.8960e-01, -7.9290e-01, -2.2046e-01, -8.3184e-01,  8.5034e-01,
          1.0138e+00, -5.0875e-01, -5.5084e-02, -2.1705e-01,  7.1591e-02,
         -6.2759e-02,  1.1458e-01,  7.6808e-02, -1.1880e-01,  8.8405e-02,
          6.0548e-02,  6.3950e-02, -4.7332e-02,  2.8584e-01,  1.0865e-02,
          1.2762e-01, -4.5123e-02, -1.1845e-01, -2.2596e-02,  9.8680e-03,
         -1.8895e-01,  1.1196e-02,  6.8058e-02, -1.1196e-02,  1.5404e-01,
         -7.2521e-02,  1.6766e-01, -1.3139e-02, -8.5022e-04,  4.4652e-02,
         -1.1505e-01,  3.4064e-01, -1.2387e-01, -1.0297e-03,  2.9138e-01,
          3.5167e-01,  2.1523e-01, -4.2602e-01, -4.2780e-01,  7.0166e-01,
          6.6503e-02,  7.3113e-02,  3.5038e-01,  7.3504e-04, -8.9257e-02,
          2.1657e-01,  1.0526e-01,  1.6718e-01,  1.0667e-01,  2.9027e-01,
          1.4632e-01, -4.7419e-02, -1.7200e-01, -9.9373e-02, -1.7210e-01,
          4.1190e-02, -6.4624e-01, -5.9864e-02, -3.5824e-01,  1.0718e-01,
         -1.5328e-01,  1.0445e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
506000 特征值优化 tensor(20.0684, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.8051e-01, -1.4786e+00,  1.5000e+00,  2.1724e-01,  4.3299e-01,
         -1.0987e-02,  1.1393e+00,  2.7874e+00, -1.0536e+00,  1.8839e+00,
          5.2658e-02, -9.7904e-01, -2.1584e-02,  1.6313e-01,  1.0723e-01,
          4.4257e-02, -5.8977e-01, -7.3497e-01, -2.1641e-01,  3.1376e-01,
         -7.2441e-02,  1.4022e-01, -3.6885e-01,  1.3402e+00,  5.8019e-01,
          2.5699e-02, -2.4162e-01,  5.8412e-01, -3.0781e-02,  1.5348e-01,
         -7.3569e-01,  5.7011e-01, -4.8330e-01,  7.9241e-01, -1.5349e+00,
         -2.3990e+00,  5.0337e-01, -1.6364e+00,  6.6498e-02, -3.0407e-01,
         -8.4227e-01, -2.7708e-01,  2.2053e-01,  3.4193e-01, -5.0363e-01,
         -1.5089e+00,  9.4581e-01,  1.4209e+00, -1.2612e+00,  2.6008e-01,
          3.8772e-01,  5.3142e-01,  5.5948e-02,  1.8701e+00,  8.5300e-01,
         -7.6188e-01,  2.8607e-01,  2.1885e-01,  1.1602e+00, -3.4648e-01,
         -8.8219e-01,  5.8623e-01, -2.6774e-03, -1.5641e-01,  9.7344e-01,
          4.0628e-01, -3.1016e-01,  2.7212e-02,  6.1413e-01, -1.3022e+00,
         -8.8271e-01,  1.0108e-01]], device='cuda:0') tensor(0.2322, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
507000 特征值优化 tensor(7.2140, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.2112e-01, -5.5540e-01,  4.5562e-01,  2.8580e-01,  1.9570e-01,
          2.1176e-01,  6.7682e-01,  1.9504e+00, -7.5071e-01,  1.0258e+00,
         -4.0700e-01, -9.5825e-02,  2.6254e-02,  1.0158e-01, -1.5203e-01,
         -8.5670e-02, -1.7699e-02, -6.6371e-02,  3.4591e-02,  4.2932e-03,
         -4.4071e-02,  5.9749e-03,  1.6377e-02,  2.9539e-01,  1.0770e-01,
          1.9037e-03, -6.6732e-02,  4.3904e-02,  2.4525e-02,  2.0199e-02,
         -1.6418e-01, -2.3283e-02, -1.5067e-03,  2.0555e-01, -5.6422e-01,
         -1.3426e+00,  1.3819e-01, -6.7123e-01, -3.6242e-02, -4.5213e-02,
         -5.8061e-02, -4.2239e-02, -1.1109e-01,  4.1785e-02, -4.0567e-02,
         -4.8602e-01,  2.9994e-01,  4.3086e-01, -5.6946e-01,  2.0202e-01,
          8.1932e-02,  2.2360e-01, -4.6422e-01,  1.0260e+00,  6.2972e-02,
         -5.9110e-02, -2.5542e-01,  1.7745e-03,  3.7632e-01,  1.6020e-01,
         -4.5481e-01,  7.7628e-02, -5.7824e-01, -1.3771e-01,  3.5161e-01,
          3.9856e-02, -4.4134e-01,  2.2563e-01,  7.0313e-01, -5.0696e-01,
         -1.0052e-01,  5.9662e-02]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
508000 特征值优化 tensor(0.8938, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.7367e-04, -4.7895e-01,  2.9195e-01,  2.3432e-01,  1.9148e-01,
          4.5147e-01, -2.1599e-02,  1.1929e+00, -6.7985e-01,  4.2862e-01,
         -9.3087e-01,  2.2573e-01,  2.9102e-02,  2.0142e-01, -1.1665e-01,
         -7.9223e-02,  2.9970e-02, -9.3081e-02, -6.1527e-02, -2.5613e-02,
         -4.0850e-02,  2.2505e-03, -1.3006e-02,  1.6695e-02,  1.3806e-01,
         -2.1030e-02, -9.3189e-02,  1.7735e-01, -1.6948e-02,  1.8075e-02,
         -3.0211e-02, -4.1402e-02, -3.3674e-02,  2.3045e-01, -1.1227e-02,
         -3.3448e-01,  1.4489e-01, -2.9719e-01, -4.8262e-03,  7.7647e-03,
         -9.1141e-02, -1.0633e-01, -3.4944e-01,  1.4021e-01,  1.2634e-02,
         -7.1727e-03,  5.2968e-02, -3.0580e-02, -1.6960e-01,  3.1605e-01,
          2.0813e-01,  1.8287e-01, -3.4295e-02,  4.4264e-01,  3.1642e-01,
         -1.9693e-01, -5.5411e-01,  4.8344e-02,  5.1815e-01,  2.0295e-01,
         -2.0524e-01,  4.2490e-02, -4.1302e-01, -2.8406e-02, -8.7812e-02,
          6.4460e-02, -1.6218e-02,  4.0412e-02,  4.9018e-01, -1.5297e-01,
         -4.8962e-02,  1.8316e-01]], device='cuda:0') tensor(0.2120, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
509000 特征值优化 tensor(0.5922, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0166, -0.5969,  0.3362,  0.2137,  0.0835,  0.4986, -0.0987,  1.0157,
         -0.7487,  0.3955, -0.8683,  0.3106,  0.0149,  0.2099, -0.0846, -0.1110,
          0.1549, -0.1112, -0.0342, -0.0454, -0.0513,  0.0031,  0.0670,  0.0704,
          0.0729, -0.0493, -0.0138,  0.1702, -0.0137,  0.0157, -0.0103, -0.0146,
         -0.0355,  0.2302,  0.0061, -0.1892,  0.2218, -0.2636, -0.0332, -0.0450,
         -0.1387, -0.1033, -0.4263,  0.0955,  0.0995,  0.0920,  0.0147, -0.0779,
         -0.0987,  0.3071,  0.2557,  0.1605,  0.3404,  0.2442,  0.3529, -0.0791,
         -0.4919,  0.0063,  0.4989,  0.1473, -0.4901,  0.1104, -0.2833, -0.1311,
         -0.1003,  0.0815,  0.0925, -0.0170,  0.5486, -0.0556, -0.0108,  0.1630]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
510000 特征值优化 tensor(0.5605, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3404e-02, -5.9327e-01,  3.4837e-01,  2.0179e-01,  2.5195e-02,
          6.2384e-01, -2.2637e-01,  9.5747e-01, -7.3080e-01,  4.1214e-01,
         -9.0438e-01,  3.9186e-01,  1.1184e-02,  2.1022e-01, -1.5756e-01,
         -1.1080e-01,  2.1383e-01, -8.5999e-02, -5.2527e-02, -5.3057e-02,
         -4.9707e-02,  4.3648e-03,  1.1590e-01,  1.3947e-01, -4.3028e-02,
          1.8352e-02, -3.9604e-02,  2.1966e-02, -1.9074e-02,  1.8402e-02,
         -6.8177e-03, -2.4448e-02, -6.3333e-02,  2.3205e-01,  1.0432e-02,
         -1.5799e-01,  2.2625e-01, -2.5641e-01, -4.2895e-02, -4.9486e-02,
         -1.4790e-01, -9.0131e-02, -4.1895e-01,  8.4765e-02,  9.5917e-02,
          1.1413e-01,  5.7015e-04, -9.5997e-02, -8.5531e-02,  3.0396e-01,
          2.5405e-01,  1.6011e-01,  3.4621e-01,  2.5336e-01,  3.4649e-01,
         -8.0496e-02, -5.3384e-01, -4.6401e-03,  4.9627e-01,  1.1412e-01,
         -4.3363e-01,  1.1722e-01, -2.3625e-01, -1.4143e-01, -1.6273e-01,
          1.3313e-01,  1.2911e-01, -1.6798e-02,  5.8707e-01, -7.5480e-02,
         -5.9735e-03,  1.1725e-01]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
511000 特征值优化 tensor(0.5587, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0344, -0.5651,  0.3724,  0.1614,  0.0471,  0.6154, -0.2515,  0.8655,
         -0.7703,  0.4578, -0.8742,  0.4550,  0.0149,  0.1635, -0.1927, -0.1251,
          0.2005, -0.1226, -0.0433, -0.0638, -0.0330,  0.0047,  0.0724,  0.1826,
         -0.0339,  0.0452, -0.0278,  0.0240, -0.0107,  0.0175, -0.0110, -0.0055,
         -0.0201,  0.2309,  0.0124, -0.1561,  0.2300, -0.2485, -0.0599, -0.0550,
         -0.1477, -0.0692, -0.4075,  0.0924,  0.0908,  0.1617, -0.0100, -0.0995,
         -0.0972,  0.3015,  0.2686,  0.1612,  0.3609,  0.2318,  0.3506, -0.0424,
         -0.5233, -0.0105,  0.4825,  0.0982, -0.4819,  0.1059, -0.2464, -0.1458,
         -0.1875,  0.1452,  0.1094,  0.0033,  0.5940, -0.0389, -0.0069,  0.1205]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
512000 特征值优化 tensor(0.5493, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0130, -0.5594,  0.3784,  0.1603,  0.0454,  0.6127, -0.3240,  0.7225,
         -0.8086,  0.5212, -0.7832,  0.4852,  0.0136,  0.1524, -0.2404, -0.1760,
          0.1677, -0.1616,  0.0309, -0.0659, -0.0352,  0.0048,  0.0497,  0.1829,
         -0.0098,  0.0377, -0.0272,  0.0205, -0.0103,  0.0175, -0.0112,  0.0317,
          0.0027,  0.2305,  0.0245, -0.1580,  0.2307, -0.2334, -0.0429, -0.0450,
         -0.1463, -0.0833, -0.4142,  0.0969,  0.0931,  0.1659, -0.0110, -0.1021,
         -0.0969,  0.3007,  0.2701,  0.1615,  0.3856,  0.2183,  0.2805, -0.1045,
         -0.5194, -0.0103,  0.4782,  0.1296, -0.5459,  0.0911, -0.2520, -0.1612,
         -0.1649,  0.0916,  0.0870, -0.0461,  0.6526, -0.0227, -0.0104,  0.1780]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
513000 特征值优化 tensor(0.5925, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0227, -0.5719,  0.3616,  0.1830,  0.0498,  0.6170, -0.3187,  0.7025,
         -0.7446,  0.5022, -0.7306,  0.4510,  0.0130,  0.1522, -0.2424, -0.1610,
          0.1753, -0.1398,  0.0168, -0.0661, -0.0318,  0.0059,  0.0543,  0.1838,
         -0.0080,  0.0057, -0.0343,  0.0162, -0.0115,  0.0179, -0.0127,  0.0244,
         -0.0177,  0.2311,  0.0265, -0.1543,  0.2279, -0.2306, -0.0443, -0.0352,
         -0.1421, -0.0802, -0.4099,  0.0919,  0.0979,  0.1721, -0.0158, -0.0931,
         -0.1014,  0.3045,  0.2615,  0.1618,  0.3524,  0.2386,  0.2863, -0.0921,
         -0.5180, -0.0133,  0.4845,  0.1335, -0.5603,  0.0822, -0.2496, -0.1697,
         -0.1890,  0.1040,  0.0918, -0.0362,  0.6782, -0.0244, -0.0122,  0.1669]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
514000 特征值优化 tensor(0.5525, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0187, -0.5675,  0.3810,  0.1651,  0.0663,  0.6131, -0.3230,  0.7146,
         -0.7738,  0.5201, -0.7903,  0.4456,  0.0123,  0.1881, -0.1948, -0.1294,
          0.2025, -0.1291,  0.0184, -0.0640, -0.0358,  0.0045,  0.0497,  0.1790,
         -0.0285,  0.0157, -0.0062, -0.0040, -0.0110,  0.0170, -0.0145, -0.0291,
         -0.0120,  0.2312,  0.0136, -0.1610,  0.2353, -0.2309, -0.0471, -0.0350,
         -0.1499, -0.0780, -0.4101,  0.0948,  0.0950,  0.1687, -0.0068, -0.1040,
         -0.0967,  0.3019,  0.2675,  0.1622,  0.3574,  0.2388,  0.3194, -0.0084,
         -0.5251, -0.0095,  0.4857,  0.1088, -0.5187,  0.0784, -0.2281, -0.1742,
         -0.1532,  0.1369,  0.1168,  0.0060,  0.6469, -0.0211, -0.0332,  0.1360]],
       device='cuda:0') tensor(0.2128, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
515000 特征值优化 tensor(0.5557, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.4744e-02, -5.6928e-01,  3.7402e-01,  1.6538e-01,  4.9645e-02,
          6.1929e-01, -3.1678e-01,  6.9179e-01, -7.3207e-01,  5.0557e-01,
         -7.7968e-01,  4.1948e-01,  1.3334e-02,  1.7504e-01, -2.0577e-01,
         -1.7303e-01,  1.8296e-01, -1.3214e-01, -5.2280e-03, -6.6953e-02,
         -3.1662e-02,  5.2613e-03,  5.2491e-02,  1.7760e-01, -4.6423e-02,
          1.0990e-04, -8.7740e-03, -5.0987e-03, -1.0517e-02,  1.6737e-02,
         -1.1524e-02, -3.3569e-03, -2.8463e-02,  2.3084e-01,  2.8254e-02,
         -1.5413e-01,  2.3741e-01, -2.2668e-01, -4.6628e-02, -4.2260e-02,
         -1.5304e-01, -7.7434e-02, -4.1019e-01,  9.5384e-02,  9.5359e-02,
          1.6701e-01, -1.5192e-02, -1.0060e-01, -9.9881e-02,  3.0284e-01,
          2.6839e-01,  1.6236e-01,  3.5120e-01,  2.3729e-01,  2.8360e-01,
         -7.4561e-02, -5.2015e-01, -1.2363e-02,  4.8565e-01,  1.1291e-01,
         -5.4247e-01,  8.0572e-02, -2.4606e-01, -1.6991e-01, -1.7802e-01,
          1.1891e-01,  1.1289e-01, -2.3706e-02,  6.5590e-01, -2.2394e-02,
         -1.7620e-02,  1.5858e-01]], device='cuda:0') tensor(0.2029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
516000 特征值优化 tensor(0.5625, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0273, -0.5661,  0.3743,  0.1638,  0.0484,  0.6195, -0.2999,  0.7035,
         -0.7366,  0.5017, -0.7619,  0.4086,  0.0130,  0.1728, -0.2005, -0.1429,
          0.2078, -0.1267,  0.0129, -0.0654, -0.0355,  0.0057,  0.0470,  0.1841,
         -0.0334,  0.0064, -0.0119, -0.0124, -0.0103,  0.0173, -0.0133,  0.0036,
         -0.0136,  0.2311,  0.0240, -0.1554,  0.2324, -0.2285, -0.0485, -0.0327,
         -0.1459, -0.0815, -0.4060,  0.0944,  0.0943,  0.1711, -0.0091, -0.1002,
         -0.1001,  0.3007,  0.2693,  0.1616,  0.3557,  0.2370,  0.2976, -0.0506,
         -0.5183, -0.0134,  0.4874,  0.1076, -0.5450,  0.0721, -0.2499, -0.1674,
         -0.1586,  0.1137,  0.1316, -0.0156,  0.6489, -0.0123, -0.0417,  0.1603]],
       device='cuda:0') tensor(0.2053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
517000 特征值优化 tensor(0.5663, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.0332e-02, -5.5259e-01,  3.7308e-01,  1.6333e-01,  5.3197e-02,
          6.1704e-01, -3.0951e-01,  7.0308e-01, -7.3469e-01,  5.1308e-01,
         -8.0041e-01,  4.0779e-01,  1.4636e-02,  1.6810e-01, -1.9439e-01,
         -1.6227e-01,  1.8191e-01, -1.2658e-01,  2.0241e-03, -6.9407e-02,
         -3.2694e-02,  5.9348e-03,  4.4932e-02,  1.7751e-01, -3.1155e-02,
          2.3550e-02, -1.3290e-02, -4.2009e-03, -9.7062e-03,  1.6969e-02,
         -1.2048e-02, -2.6502e-02, -1.9122e-02,  2.3173e-01,  1.8135e-02,
         -1.5877e-01,  2.3982e-01, -2.2840e-01, -5.1327e-02, -3.7213e-02,
         -1.5376e-01, -7.5814e-02, -4.0937e-01,  9.5084e-02,  9.4705e-02,
          1.6725e-01, -1.7900e-02, -9.9743e-02, -9.9518e-02,  2.9975e-01,
          2.7182e-01,  1.6113e-01,  3.3807e-01,  2.4422e-01,  3.0039e-01,
         -3.7070e-02, -5.2475e-01, -9.5279e-03,  4.9092e-01,  1.0385e-01,
         -5.1325e-01,  6.3082e-02, -2.4314e-01, -1.6752e-01, -1.5740e-01,
          1.2399e-01,  1.1973e-01, -7.3781e-04,  6.4183e-01, -1.1164e-02,
         -3.1615e-02,  1.4489e-01]], device='cuda:0') tensor(0.2028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
518000 特征值优化 tensor(0.5673, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0293, -0.5632,  0.3736,  0.1653,  0.0432,  0.6158, -0.2931,  0.6942,
         -0.7387,  0.5175, -0.7635,  0.4065,  0.0138,  0.1618, -0.2041, -0.1524,
          0.2020, -0.1286,  0.0113, -0.0660, -0.0338,  0.0046,  0.0434,  0.1759,
         -0.0342, -0.0021, -0.0215, -0.0067, -0.0098,  0.0157, -0.0102,  0.0029,
         -0.0081,  0.2319,  0.0316, -0.1520,  0.2327, -0.2276, -0.0478, -0.0359,
         -0.1451, -0.0795, -0.4054,  0.0931,  0.0933,  0.1693, -0.0127, -0.0988,
         -0.1031,  0.3024,  0.2705,  0.1612,  0.3569,  0.2357,  0.2915, -0.0591,
         -0.5148, -0.0169,  0.4909,  0.1098, -0.5515,  0.0730, -0.2562, -0.1634,
         -0.1496,  0.1047,  0.1150, -0.0230,  0.6479, -0.0063, -0.0484,  0.1706]],
       device='cuda:0') tensor(0.2140, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
519000 特征值优化 tensor(0.5632, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.7663e-02, -5.5612e-01,  3.7195e-01,  1.6368e-01,  5.5782e-02,
          6.1875e-01, -3.0645e-01,  7.0583e-01, -7.2847e-01,  5.2080e-01,
         -8.0239e-01,  3.9841e-01,  1.4763e-02,  1.7111e-01, -1.9472e-01,
         -1.6435e-01,  1.8569e-01, -1.3396e-01, -1.4329e-04, -6.8442e-02,
         -3.2698e-02,  5.0924e-03,  4.6919e-02,  1.7695e-01, -2.8546e-02,
          1.7188e-02, -1.3753e-02, -5.6796e-03, -9.8946e-03,  1.6126e-02,
         -1.4101e-02, -2.3282e-02, -1.8873e-02,  2.3151e-01,  1.7217e-02,
         -1.5880e-01,  2.3991e-01, -2.2823e-01, -5.1140e-02, -3.8579e-02,
         -1.5327e-01, -7.6559e-02, -4.0865e-01,  9.4429e-02,  9.4352e-02,
          1.6621e-01, -1.7623e-02, -9.9599e-02, -9.9628e-02,  3.0040e-01,
          2.7177e-01,  1.6183e-01,  3.3687e-01,  2.4438e-01,  2.9610e-01,
         -4.7655e-02, -5.2346e-01, -1.1379e-02,  4.8871e-01,  1.0547e-01,
         -5.2235e-01,  6.5023e-02, -2.4319e-01, -1.7117e-01, -1.6118e-01,
          1.2369e-01,  1.1484e-01, -4.8699e-03,  6.4350e-01, -1.2686e-02,
         -2.6355e-02,  1.4757e-01]], device='cuda:0') tensor(0.2103, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
520000 特征值优化 tensor(0.5610, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0201, -0.5695,  0.3759,  0.1633,  0.0563,  0.6175, -0.3007,  0.6983,
         -0.7174,  0.5191, -0.7761,  0.3967,  0.0125,  0.1798, -0.1945, -0.1502,
          0.1992, -0.1276,  0.0136, -0.0651, -0.0363,  0.0056,  0.0461,  0.1796,
         -0.0280,  0.0130, -0.0060, -0.0122, -0.0104,  0.0168, -0.0139, -0.0084,
         -0.0093,  0.2309,  0.0217, -0.1571,  0.2335, -0.2276, -0.0480, -0.0322,
         -0.1470, -0.0799, -0.4071,  0.0949,  0.0951,  0.1729, -0.0096, -0.1008,
         -0.1008,  0.3024,  0.2696,  0.1622,  0.3465,  0.2395,  0.2981, -0.0306,
         -0.5171, -0.0137,  0.4856,  0.1037, -0.5418,  0.0736, -0.2385, -0.1714,
         -0.1613,  0.1197,  0.1271, -0.0082,  0.6615, -0.0157, -0.0413,  0.1556]],
       device='cuda:0') tensor(0.2058, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
521000 特征值优化 tensor(0.5551, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0145, -0.5714,  0.3749,  0.1640,  0.0598,  0.6201, -0.3124,  0.7021,
         -0.7005,  0.5337, -0.8004,  0.4079,  0.0125,  0.1886, -0.1958, -0.1322,
          0.2028, -0.1357,  0.0176, -0.0639, -0.0360,  0.0051,  0.0543,  0.1804,
         -0.0306,  0.0385,  0.0027, -0.0075, -0.0117,  0.0173, -0.0132, -0.0373,
         -0.0046,  0.2301,  0.0154, -0.1658,  0.2375, -0.2297, -0.0480, -0.0328,
         -0.1518, -0.0746, -0.4122,  0.0947,  0.0949,  0.1699, -0.0057, -0.1038,
         -0.1010,  0.3068,  0.2633,  0.1648,  0.3316,  0.2497,  0.3405, -0.0050,
         -0.4999, -0.0189,  0.4655,  0.1007, -0.5197,  0.0760, -0.2227, -0.1744,
         -0.1526,  0.1385,  0.1199,  0.0110,  0.6584, -0.0261, -0.0495,  0.1425]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
522000 特征值优化 tensor(0.5484, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0186, -0.5728,  0.3749,  0.1583,  0.0511,  0.6222, -0.3193,  0.7009,
         -0.7273,  0.5560, -0.7508,  0.4005,  0.0135,  0.1697, -0.2328, -0.1728,
          0.1753, -0.1319, -0.0028, -0.0660, -0.0321,  0.0044,  0.0496,  0.1799,
         -0.0572, -0.0104, -0.0160,  0.0110, -0.0116,  0.0170, -0.0131,  0.0139,
         -0.0402,  0.2299,  0.0389, -0.1547,  0.2318, -0.2297, -0.0572, -0.0452,
         -0.1465, -0.0703, -0.4143,  0.0952,  0.0951,  0.1674, -0.0144, -0.1014,
         -0.1015,  0.3053,  0.2697,  0.1622,  0.3446,  0.2411,  0.2954, -0.0941,
         -0.4848, -0.0263,  0.4696,  0.1162, -0.5657,  0.0788, -0.2436, -0.1769,
         -0.1829,  0.0979,  0.0980, -0.0399,  0.6753, -0.0291, -0.0193,  0.1843]],
       device='cuda:0') tensor(0.2075, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
523000 特征值优化 tensor(0.5787, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0194, -0.5665,  0.3733,  0.1656,  0.0696,  0.6090, -0.3114,  0.6963,
         -0.7125,  0.5536, -0.8038,  0.4026,  0.0143,  0.1761, -0.1886, -0.1461,
          0.1892, -0.1177,  0.0049, -0.0679, -0.0328,  0.0059,  0.0527,  0.1759,
         -0.0207,  0.0411, -0.0013, -0.0031, -0.0137,  0.0173, -0.0131, -0.0468,
         -0.0154,  0.2308,  0.0196, -0.1567,  0.2425, -0.2284, -0.0579, -0.0357,
         -0.1546, -0.0760, -0.4096,  0.0967,  0.0968,  0.1641, -0.0161, -0.1031,
         -0.1017,  0.3072,  0.2678,  0.1630,  0.3286,  0.2479,  0.3367, -0.0130,
         -0.4983, -0.0197,  0.4758,  0.0940, -0.5110,  0.0764, -0.2323, -0.1665,
         -0.1406,  0.1335,  0.1034,  0.0184,  0.6489, -0.0177, -0.0510,  0.1335]],
       device='cuda:0') tensor(0.2028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
524000 特征值优化 tensor(0.5537, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0198, -0.5653,  0.3780,  0.1602,  0.0586,  0.6148, -0.3187,  0.7144,
         -0.6913,  0.5522, -0.7891,  0.3910,  0.0112,  0.1858, -0.1928, -0.1355,
          0.2075, -0.1303,  0.0170, -0.0629, -0.0350,  0.0052,  0.0544,  0.1841,
         -0.0395,  0.0348,  0.0062, -0.0056, -0.0116,  0.0171, -0.0129, -0.0317,
         -0.0114,  0.2302,  0.0210, -0.1636,  0.2363, -0.2300, -0.0497, -0.0335,
         -0.1512, -0.0730, -0.4077,  0.0955,  0.0957,  0.1629, -0.0064, -0.1059,
         -0.1008,  0.3065,  0.2653,  0.1640,  0.3412,  0.2455,  0.3427, -0.0140,
         -0.4963, -0.0186,  0.4656,  0.0952, -0.5204,  0.0776, -0.2291, -0.1715,
         -0.1498,  0.1331,  0.1213,  0.0052,  0.6481, -0.0240, -0.0514,  0.1487]],
       device='cuda:0') tensor(0.2073, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
525000 特征值优化 tensor(0.5479, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0223, -0.5763,  0.3750,  0.1598,  0.0499,  0.6219, -0.3242,  0.7085,
         -0.7092,  0.5761, -0.7420,  0.3880,  0.0138,  0.1661, -0.2317, -0.1726,
          0.1738, -0.1340, -0.0043, -0.0656, -0.0317,  0.0047,  0.0485,  0.1791,
         -0.0599, -0.0214, -0.0187,  0.0121, -0.0116,  0.0174, -0.0141,  0.0186,
         -0.0413,  0.2297,  0.0430, -0.1540,  0.2314, -0.2293, -0.0611, -0.0482,
         -0.1470, -0.0663, -0.4130,  0.0947,  0.0949,  0.1673, -0.0128, -0.1034,
         -0.1011,  0.3057,  0.2666,  0.1629,  0.3550,  0.2365,  0.2950, -0.0957,
         -0.4820, -0.0273,  0.4707,  0.1087, -0.5665,  0.0808, -0.2505, -0.1750,
         -0.1774,  0.0949,  0.0978, -0.0424,  0.6653, -0.0261, -0.0269,  0.1909]],
       device='cuda:0') tensor(0.2115, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
526000 特征值优化 tensor(0.5666, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0318, -0.5443,  0.3744,  0.1686,  0.0616,  0.6185, -0.3097,  0.7026,
         -0.6932,  0.5650, -0.8003,  0.3640,  0.0149,  0.1699, -0.1968, -0.1631,
          0.1848, -0.1273, -0.0073, -0.0684, -0.0337,  0.0058,  0.0484,  0.1784,
         -0.0241,  0.0230, -0.0145, -0.0039, -0.0110,  0.0163, -0.0121, -0.0302,
         -0.0222,  0.2298,  0.0231, -0.1596,  0.2445, -0.2257, -0.0556, -0.0357,
         -0.1561, -0.0748, -0.4077,  0.0956,  0.0956,  0.1606, -0.0145, -0.0994,
         -0.1012,  0.3028,  0.2706,  0.1624,  0.3372,  0.2485,  0.3255, -0.0319,
         -0.4972, -0.0199,  0.4766,  0.0997, -0.5187,  0.0684, -0.2531, -0.1657,
         -0.1506,  0.1225,  0.1091,  0.0049,  0.6460, -0.0171, -0.0422,  0.1468]],
       device='cuda:0') tensor(0.2035, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
527000 特征值优化 tensor(0.5524, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0160, -0.5695,  0.3782,  0.1608,  0.0625,  0.6110, -0.3197,  0.7127,
         -0.6715,  0.5749, -0.7861,  0.3722,  0.0113,  0.1887, -0.1956, -0.1298,
          0.2035, -0.1355,  0.0183, -0.0635, -0.0348,  0.0052,  0.0531,  0.1853,
         -0.0342,  0.0415,  0.0060, -0.0040, -0.0118,  0.0172, -0.0128, -0.0431,
         -0.0045,  0.2300,  0.0221, -0.1641,  0.2414, -0.2269, -0.0516, -0.0335,
         -0.1555, -0.0719, -0.4101,  0.0953,  0.0950,  0.1655, -0.0056, -0.1054,
         -0.1013,  0.3060,  0.2660,  0.1637,  0.3367,  0.2481,  0.3469, -0.0065,
         -0.4956, -0.0183,  0.4682,  0.0847, -0.5161,  0.0794, -0.2300, -0.1732,
         -0.1443,  0.1385,  0.1241,  0.0102,  0.6500, -0.0302, -0.0582,  0.1425]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
528000 特征值优化 tensor(0.5493, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0201, -0.5742,  0.3746,  0.1584,  0.0488,  0.6209, -0.3301,  0.7034,
         -0.6828,  0.5946, -0.7427,  0.3619,  0.0135,  0.1682, -0.2314, -0.1726,
          0.1747, -0.1353, -0.0058, -0.0662, -0.0318,  0.0048,  0.0497,  0.1802,
         -0.0582, -0.0124, -0.0170,  0.0135, -0.0111,  0.0170, -0.0129,  0.0142,
         -0.0389,  0.2298,  0.0447, -0.1529,  0.2359, -0.2256, -0.0617, -0.0462,
         -0.1513, -0.0656, -0.4134,  0.0949,  0.0951,  0.1673, -0.0138, -0.1020,
         -0.1013,  0.3052,  0.2689,  0.1623,  0.3493,  0.2382,  0.2965, -0.0928,
         -0.4866, -0.0256,  0.4738,  0.0966, -0.5612,  0.0824, -0.2556, -0.1743,
         -0.1732,  0.0971,  0.1075, -0.0367,  0.6667, -0.0290, -0.0300,  0.1861]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
529000 特征值优化 tensor(0.5509, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0171, -0.5759,  0.3769,  0.1584,  0.0693,  0.6079, -0.3254,  0.7197,
         -0.6708,  0.6036, -0.7833,  0.3667,  0.0114,  0.1969, -0.1920, -0.1223,
          0.2017, -0.1285,  0.0215, -0.0640, -0.0348,  0.0052,  0.0515,  0.1835,
         -0.0234,  0.0513,  0.0101, -0.0052, -0.0130,  0.0170, -0.0139, -0.0591,
         -0.0054,  0.2301,  0.0175, -0.1686,  0.2410, -0.2281, -0.0546, -0.0334,
         -0.1566, -0.0688, -0.4104,  0.0970,  0.0967,  0.1698, -0.0074, -0.1048,
         -0.1012,  0.3072,  0.2651,  0.1650,  0.3362,  0.2513,  0.3593,  0.0029,
         -0.4947, -0.0188,  0.4681,  0.0734, -0.5105,  0.0797, -0.2262, -0.1768,
         -0.1319,  0.1517,  0.1207,  0.0243,  0.6475, -0.0334, -0.0679,  0.1296]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
530000 特征值优化 tensor(0.5766, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.3374e-02, -5.6727e-01,  3.7110e-01,  1.6485e-01,  5.3692e-02,
          6.1629e-01, -3.2130e-01,  7.0273e-01, -6.5624e-01,  5.9622e-01,
         -7.4036e-01,  3.3363e-01,  1.2251e-02,  1.6508e-01, -2.1669e-01,
         -1.6295e-01,  1.8288e-01, -1.2819e-01,  2.6874e-03, -6.5146e-02,
         -3.1977e-02,  5.2541e-03,  4.8907e-02,  1.8046e-01, -4.7848e-02,
          1.1390e-04, -1.4296e-02,  9.3951e-03, -9.8144e-03,  1.6125e-02,
         -1.4949e-02,  5.4448e-03, -2.0731e-02,  2.3059e-01,  4.5533e-02,
         -1.5052e-01,  2.3959e-01, -2.2435e-01, -5.9663e-02, -4.3436e-02,
         -1.4810e-01, -6.7096e-02, -4.0818e-01,  9.2954e-02,  9.2885e-02,
          1.6742e-01, -1.2064e-02, -1.0228e-01, -1.0254e-01,  3.0391e-01,
          2.6924e-01,  1.6207e-01,  3.4568e-01,  2.3689e-01,  2.9830e-01,
         -8.4600e-02, -4.8776e-01, -2.2363e-02,  4.7642e-01,  8.8448e-02,
         -5.5519e-01,  8.3806e-02, -2.6119e-01, -1.6406e-01, -1.5216e-01,
          9.8698e-02,  1.0474e-01, -2.6005e-02,  6.5563e-01, -1.7628e-02,
         -4.4899e-02,  1.8611e-01]], device='cuda:0') tensor(0.2076, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
531000 特征值优化 tensor(0.5529, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0110, -0.5730,  0.3744,  0.1606,  0.0633,  0.6104, -0.3254,  0.7171,
         -0.6327,  0.6100, -0.7838,  0.3398,  0.0109,  0.1905, -0.1934, -0.1257,
          0.2008, -0.1317,  0.0191, -0.0648, -0.0343,  0.0051,  0.0499,  0.1845,
         -0.0268,  0.0479,  0.0085, -0.0061, -0.0125,  0.0169, -0.0131, -0.0448,
         -0.0076,  0.2300,  0.0231, -0.1660,  0.2436, -0.2256, -0.0538, -0.0335,
         -0.1577, -0.0689, -0.4133,  0.0972,  0.0974,  0.1695, -0.0080, -0.1034,
         -0.1009,  0.3053,  0.2663,  0.1637,  0.3408,  0.2474,  0.3541,  0.0016,
         -0.4967, -0.0179,  0.4703,  0.0692, -0.5116,  0.0809, -0.2315, -0.1743,
         -0.1332,  0.1422,  0.1238,  0.0157,  0.6431, -0.0294, -0.0683,  0.1374]],
       device='cuda:0') tensor(0.2085, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
532000 特征值优化 tensor(0.5488, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0229, -0.5716,  0.3755,  0.1587,  0.0479,  0.6200, -0.3353,  0.7038,
         -0.6439,  0.6262, -0.7281,  0.3202,  0.0136,  0.1647, -0.2404, -0.1708,
          0.1742, -0.1323, -0.0034, -0.0654, -0.0320,  0.0048,  0.0503,  0.1805,
         -0.0606, -0.0174, -0.0197,  0.0166, -0.0115,  0.0172, -0.0153,  0.0209,
         -0.0418,  0.2303,  0.0513, -0.1509,  0.2366, -0.2246, -0.0651, -0.0467,
         -0.1516, -0.0623, -0.4124,  0.0950,  0.0947,  0.1651, -0.0124, -0.1027,
         -0.1008,  0.3056,  0.2687,  0.1625,  0.3590,  0.2336,  0.2953, -0.0955,
         -0.4845, -0.0266,  0.4767,  0.0821, -0.5636,  0.0822, -0.2614, -0.1759,
         -0.1640,  0.0858,  0.1098, -0.0370,  0.6617, -0.0269, -0.0401,  0.1952]],
       device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
533000 特征值优化 tensor(0.5638, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.5300e-02, -5.5389e-01,  3.7725e-01,  1.6848e-01,  5.5701e-02,
          6.2065e-01, -3.2548e-01,  7.0860e-01, -6.2456e-01,  6.1482e-01,
         -7.7754e-01,  2.9110e-01,  1.3648e-02,  1.7587e-01, -1.9437e-01,
         -1.6858e-01,  1.7877e-01, -1.3833e-01, -3.5593e-03, -6.7540e-02,
         -3.2599e-02,  4.9640e-03,  5.2547e-02,  1.7705e-01, -3.2396e-02,
          1.6203e-02, -6.8402e-03,  1.0060e-04, -1.0141e-02,  1.6353e-02,
         -1.1994e-02, -2.4443e-02, -2.2539e-02,  2.3002e-01,  3.5700e-02,
         -1.5751e-01,  2.4701e-01, -2.2195e-01, -6.0235e-02, -3.7238e-02,
         -1.5859e-01, -7.0418e-02, -4.0872e-01,  9.3645e-02,  9.4284e-02,
          1.6301e-01, -1.6771e-02, -1.0081e-01, -1.0094e-01,  3.0181e-01,
          2.6905e-01,  1.6192e-01,  3.4494e-01,  2.4382e-01,  3.2345e-01,
         -3.7893e-02, -4.9437e-01, -2.2892e-02,  4.7928e-01,  7.3337e-02,
         -5.2080e-01,  7.0098e-02, -2.5589e-01, -1.6955e-01, -1.4276e-01,
          1.2264e-01,  1.2434e-01, -8.6051e-04,  6.3857e-01, -1.8690e-02,
         -5.2738e-02,  1.5095e-01]], device='cuda:0') tensor(0.2079, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
534000 特征值优化 tensor(0.5551, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0204, -0.5681,  0.3771,  0.1633,  0.0613,  0.6144, -0.3368,  0.7176,
         -0.5987,  0.6138, -0.7564,  0.2825,  0.0121,  0.1846, -0.2006, -0.1337,
          0.2037, -0.1276,  0.0163, -0.0636, -0.0359,  0.0051,  0.0599,  0.1874,
         -0.0526,  0.0247,  0.0088, -0.0013, -0.0122,  0.0173, -0.0129, -0.0232,
         -0.0106,  0.2299,  0.0421, -0.1566,  0.2403, -0.2257, -0.0583, -0.0362,
         -0.1524, -0.0673, -0.4097,  0.0954,  0.0955,  0.1676, -0.0067, -0.1044,
         -0.1008,  0.3053,  0.2643,  0.1641,  0.3479,  0.2430,  0.3310, -0.0237,
         -0.4903, -0.0223,  0.4752,  0.0614, -0.5207,  0.0824, -0.2442, -0.1687,
         -0.1404,  0.1210,  0.1352, -0.0032,  0.6435, -0.0243, -0.0664,  0.1612]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
535000 特征值优化 tensor(0.5596, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0259, -0.5597,  0.3769,  0.1657,  0.0560,  0.6289, -0.3370,  0.7039,
         -0.5943,  0.6270, -0.7680,  0.2620,  0.0130,  0.1769, -0.2041, -0.1708,
          0.1824, -0.1283, -0.0122, -0.0669, -0.0321,  0.0046,  0.0597,  0.1836,
         -0.0372,  0.0051, -0.0020, -0.0089, -0.0112,  0.0158, -0.0108, -0.0181,
         -0.0277,  0.2297,  0.0435, -0.1537,  0.2493, -0.2208, -0.0612, -0.0403,
         -0.1592, -0.0675, -0.4096,  0.0955,  0.0955,  0.1631, -0.0151, -0.1020,
         -0.0993,  0.3046,  0.2678,  0.1632,  0.3386,  0.2451,  0.3157, -0.0540,
         -0.4993, -0.0178,  0.4818,  0.0594, -0.5338,  0.0765, -0.2591, -0.1684,
         -0.1537,  0.1190,  0.1294, -0.0078,  0.6521, -0.0269, -0.0489,  0.1579]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
536000 特征值优化 tensor(0.5576, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0132, -0.5782,  0.3765,  0.1636,  0.0540,  0.6195, -0.3388,  0.7105,
         -0.5729,  0.6286, -0.7534,  0.2508,  0.0116,  0.1852, -0.2002, -0.1382,
          0.2003, -0.1294,  0.0145, -0.0634, -0.0320,  0.0034,  0.0569,  0.1893,
         -0.0492,  0.0144,  0.0071, -0.0024, -0.0121,  0.0150, -0.0130, -0.0133,
         -0.0140,  0.2305,  0.0447, -0.1564,  0.2415, -0.2220, -0.0629, -0.0374,
         -0.1547, -0.0645, -0.4118,  0.0956,  0.0959,  0.1659, -0.0108, -0.1034,
         -0.0994,  0.3043,  0.2661,  0.1642,  0.3557,  0.2365,  0.3159, -0.0355,
         -0.4900, -0.0205,  0.4787,  0.0513, -0.5287,  0.0861, -0.2498, -0.1684,
         -0.1356,  0.1124,  0.1364, -0.0051,  0.6409, -0.0230, -0.0713,  0.1667]],
       device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
537000 特征值优化 tensor(0.5620, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0255, -0.5565,  0.3778,  0.1672,  0.0591,  0.6279, -0.3310,  0.7070,
         -0.5708,  0.6480, -0.7718,  0.2320,  0.0136,  0.1801, -0.1966, -0.1698,
          0.1792, -0.1351, -0.0078, -0.0680, -0.0325,  0.0051,  0.0571,  0.1792,
         -0.0336,  0.0112, -0.0009, -0.0031, -0.0102,  0.0165, -0.0098, -0.0278,
         -0.0254,  0.2295,  0.0426, -0.1554,  0.2513, -0.2209, -0.0645, -0.0395,
         -0.1607, -0.0673, -0.4105,  0.0943,  0.0943,  0.1669, -0.0180, -0.0995,
         -0.0999,  0.3023,  0.2698,  0.1627,  0.3320,  0.2476,  0.3232, -0.0437,
         -0.4974, -0.0203,  0.4817,  0.0511, -0.5255,  0.0711, -0.2619, -0.1674,
         -0.1413,  0.1229,  0.1318, -0.0026,  0.6478, -0.0253, -0.0574,  0.1516]],
       device='cuda:0') tensor(0.2043, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
538000 特征值优化 tensor(0.5597, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.1596e-02, -5.6530e-01,  3.7810e-01,  1.6377e-01,  5.4897e-02,
          6.1910e-01, -3.3474e-01,  7.2121e-01, -5.4177e-01,  6.4881e-01,
         -7.4480e-01,  2.2193e-01,  1.1836e-02,  1.7817e-01, -2.0029e-01,
         -1.4030e-01,  1.9951e-01, -1.2744e-01,  1.0159e-02, -6.3693e-02,
         -3.6154e-02,  4.8665e-03,  5.6908e-02,  1.8755e-01, -4.7920e-02,
          1.5736e-02,  3.4750e-03,  2.1979e-04, -1.2034e-02,  1.7262e-02,
         -1.2469e-02, -8.6255e-03, -1.4628e-02,  2.3099e-01,  4.9146e-02,
         -1.5416e-01,  2.4056e-01, -2.2352e-01, -6.3782e-02, -3.7787e-02,
         -1.5421e-01, -6.3878e-02, -4.0776e-01,  9.4254e-02,  9.4413e-02,
          1.6840e-01, -6.5927e-03, -1.0300e-01, -9.9298e-02,  3.0328e-01,
          2.6563e-01,  1.6341e-01,  3.5376e-01,  2.3643e-01,  3.1482e-01,
         -3.9051e-02, -4.8755e-01, -2.3282e-02,  4.7973e-01,  4.0049e-02,
         -5.3200e-01,  8.4456e-02, -2.5599e-01, -1.7015e-01, -1.2967e-01,
          1.0999e-01,  1.3724e-01, -5.1106e-03,  6.4143e-01, -2.4425e-02,
         -7.9947e-02,  1.7148e-01]], device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
539000 特征值优化 tensor(0.5638, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0252, -0.5552,  0.3772,  0.1683,  0.0604,  0.6260, -0.3325,  0.7063,
         -0.5380,  0.6633, -0.7764,  0.1979,  0.0145,  0.1770, -0.1935, -0.1679,
          0.1792, -0.1347, -0.0068, -0.0681, -0.0331,  0.0045,  0.0573,  0.1808,
         -0.0367,  0.0159,  0.0015, -0.0038, -0.0107,  0.0161, -0.0119, -0.0271,
         -0.0242,  0.2299,  0.0469, -0.1532,  0.2514, -0.2202, -0.0655, -0.0390,
         -0.1627, -0.0654, -0.4103,  0.0936,  0.0935,  0.1634, -0.0160, -0.1010,
         -0.1011,  0.3025,  0.2692,  0.1617,  0.3376,  0.2474,  0.3245, -0.0369,
         -0.4967, -0.0228,  0.4835,  0.0393, -0.5202,  0.0716, -0.2660, -0.1674,
         -0.1270,  0.1243,  0.1344, -0.0012,  0.6426, -0.0224, -0.0697,  0.1493]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
540000 特征值优化 tensor(0.5719, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0306, -0.5625,  0.3725,  0.1720,  0.0336,  0.6222, -0.3296,  0.7131,
         -0.5188,  0.6630, -0.7266,  0.1824,  0.0117,  0.1604, -0.2148, -0.1503,
          0.1898, -0.1351,  0.0083, -0.0632, -0.0324,  0.0057,  0.0501,  0.1788,
         -0.0508, -0.0061, -0.0143,  0.0094, -0.0102,  0.0166, -0.0138,  0.0037,
         -0.0108,  0.2304,  0.0640, -0.1434,  0.2422, -0.2206, -0.0687, -0.0434,
         -0.1499, -0.0600, -0.4048,  0.0924,  0.0923,  0.1644, -0.0097, -0.0981,
         -0.1027,  0.3038,  0.2650,  0.1617,  0.3616,  0.2286,  0.2983, -0.0771,
         -0.4840, -0.0271,  0.4896,  0.0349, -0.5456,  0.0824, -0.2746, -0.1585,
         -0.1188,  0.0917,  0.1202, -0.0145,  0.6289, -0.0110, -0.0854,  0.1901]],
       device='cuda:0') tensor(0.2088, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
541000 特征值优化 tensor(0.5633, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0247, -0.5536,  0.3766,  0.1702,  0.0565,  0.6252, -0.3432,  0.7089,
         -0.5048,  0.6796, -0.7684,  0.1649,  0.0135,  0.1758, -0.1960, -0.1673,
          0.1810, -0.1384, -0.0060, -0.0677, -0.0323,  0.0046,  0.0576,  0.1794,
         -0.0385,  0.0151,  0.0043, -0.0055, -0.0113,  0.0162, -0.0120, -0.0237,
         -0.0247,  0.2301,  0.0516, -0.1511,  0.2505, -0.2190, -0.0668, -0.0393,
         -0.1620, -0.0635, -0.4095,  0.0939,  0.0939,  0.1625, -0.0163, -0.1009,
         -0.1009,  0.3030,  0.2672,  0.1620,  0.3449,  0.2430,  0.3226, -0.0385,
         -0.4942, -0.0229,  0.4835,  0.0285, -0.5184,  0.0731, -0.2654, -0.1685,
         -0.1236,  0.1236,  0.1354, -0.0012,  0.6398, -0.0217, -0.0766,  0.1507]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
542000 特征值优化 tensor(0.5851, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0232, -0.5668,  0.3685,  0.1697,  0.0440,  0.6223, -0.3428,  0.7181,
         -0.4827,  0.6891, -0.7115,  0.1580,  0.0125,  0.1608, -0.2348, -0.1636,
          0.1717, -0.1359,  0.0073, -0.0650, -0.0317,  0.0066,  0.0526,  0.1787,
         -0.0643, -0.0209, -0.0170,  0.0195, -0.0123,  0.0162, -0.0169,  0.0189,
         -0.0220,  0.2308,  0.0667, -0.1409,  0.2394, -0.2235, -0.0741, -0.0463,
         -0.1521, -0.0519, -0.4104,  0.0932,  0.0929,  0.1643, -0.0100, -0.1032,
         -0.1024,  0.3053,  0.2648,  0.1657,  0.3717,  0.2241,  0.2933, -0.0915,
         -0.4904, -0.0245,  0.4847,  0.0250, -0.5542,  0.0847, -0.2759, -0.1643,
         -0.1266,  0.0857,  0.1254, -0.0208,  0.6397, -0.0199, -0.0750,  0.1999]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
543000 特征值优化 tensor(0.6071, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0220, -0.5585,  0.3804,  0.1558,  0.0678,  0.6112, -0.3506,  0.7353,
         -0.4899,  0.7201, -0.7622,  0.1576,  0.0126,  0.2001, -0.1944, -0.1203,
          0.2041, -0.1259,  0.0183, -0.0626, -0.0355,  0.0044,  0.0628,  0.1853,
         -0.0430,  0.0348,  0.0254, -0.0036, -0.0119,  0.0174, -0.0145, -0.0595,
         -0.0045,  0.2304,  0.0460, -0.1618,  0.2445, -0.2250, -0.0654, -0.0326,
         -0.1615, -0.0577, -0.4091,  0.0938,  0.0938,  0.1592, -0.0022, -0.1070,
         -0.0988,  0.3057,  0.2680,  0.1621,  0.3443,  0.2467,  0.3574,  0.0076,
         -0.4934, -0.0200,  0.4729,  0.0037, -0.5068,  0.0863, -0.2377, -0.1769,
         -0.0889,  0.1510,  0.1296,  0.0192,  0.6390, -0.0395, -0.1025,  0.1305]],
       device='cuda:0') tensor(0.2043, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
544000 特征值优化 tensor(0.5514, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.0273e-02, -5.6548e-01,  3.7701e-01,  1.6142e-01,  5.4095e-02,
          6.2330e-01, -3.5403e-01,  7.0718e-01, -4.3816e-01,  7.0615e-01,
         -7.1502e-01,  1.2229e-01,  1.2309e-02,  1.6416e-01, -2.3390e-01,
         -1.7479e-01,  1.7133e-01, -1.3877e-01,  6.9466e-04, -6.5441e-02,
         -3.3238e-02,  4.9432e-03,  5.3013e-02,  1.8135e-01, -6.5851e-02,
         -1.5649e-02, -1.5475e-02,  1.5853e-02, -1.1208e-02,  1.7363e-02,
         -1.1706e-02,  2.2115e-02, -3.4246e-02,  2.2921e-01,  7.0972e-02,
         -1.4094e-01,  2.4247e-01, -2.1896e-01, -7.4800e-02, -4.6710e-02,
         -1.5700e-01, -5.0034e-02, -4.1602e-01,  9.5710e-02,  9.5714e-02,
          1.6487e-01, -1.1787e-02, -1.0257e-01, -9.8169e-02,  3.0176e-01,
          2.6880e-01,  1.6157e-01,  3.6178e-01,  2.3331e-01,  2.9711e-01,
         -9.2063e-02, -4.9730e-01, -2.1370e-02,  4.8498e-01,  1.1293e-02,
         -5.5545e-01,  8.7102e-02, -2.7702e-01, -1.7268e-01, -1.2481e-01,
          8.8290e-02,  1.3679e-01, -2.3562e-02,  6.5239e-01, -2.9386e-02,
         -7.3343e-02,  1.9344e-01]], device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
545000 特征值优化 tensor(0.5506, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0210, -0.5674,  0.3786,  0.1566,  0.0593,  0.6121, -0.3575,  0.7349,
         -0.4296,  0.7165, -0.7579,  0.1135,  0.0127,  0.1930, -0.1994, -0.1214,
          0.2027, -0.1244,  0.0149, -0.0628, -0.0354,  0.0046,  0.0614,  0.1879,
         -0.0509,  0.0298,  0.0218,  0.0026, -0.0116,  0.0172, -0.0137, -0.0400,
         -0.0102,  0.2302,  0.0581, -0.1538,  0.2456, -0.2230, -0.0664, -0.0348,
         -0.1603, -0.0578, -0.4105,  0.0951,  0.0949,  0.1648, -0.0057, -0.1056,
         -0.1005,  0.3067,  0.2663,  0.1635,  0.3468,  0.2431,  0.3468, -0.0024,
         -0.4909, -0.0215,  0.4764, -0.0053, -0.5060,  0.0872, -0.2475, -0.1735,
         -0.0933,  0.1341,  0.1370,  0.0074,  0.6331, -0.0320, -0.1079,  0.1493]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
546000 特征值优化 tensor(0.5543, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0209, -0.5711,  0.3720,  0.1656,  0.0535,  0.6233, -0.3550,  0.7019,
         -0.4082,  0.7140, -0.7374,  0.0822,  0.0128,  0.1736, -0.2173, -0.1757,
          0.1743, -0.1357, -0.0056, -0.0657, -0.0313,  0.0053,  0.0632,  0.1846,
         -0.0527, -0.0019, -0.0077,  0.0067, -0.0110,  0.0171, -0.0126, -0.0015,
         -0.0301,  0.2300,  0.0726, -0.1389,  0.2488, -0.2167, -0.0740, -0.0422,
         -0.1631, -0.0524, -0.4122,  0.0955,  0.0956,  0.1643, -0.0139, -0.1009,
         -0.0994,  0.3035,  0.2667,  0.1620,  0.3500,  0.2393,  0.3029, -0.0777,
         -0.4982, -0.0206,  0.4850, -0.0022, -0.5409,  0.0875, -0.2761, -0.1690,
         -0.1195,  0.1067,  0.1430, -0.0133,  0.6478, -0.0319, -0.0810,  0.1731]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
547000 特征值优化 tensor(0.5701, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.9256e-02, -5.5708e-01,  3.7211e-01,  1.6797e-01,  3.3792e-02,
          6.2763e-01, -3.3553e-01,  7.1159e-01, -3.9971e-01,  7.1193e-01,
         -7.1650e-01,  6.4977e-02,  1.3576e-02,  1.6070e-01, -2.1024e-01,
         -1.4620e-01,  1.9310e-01, -1.3831e-01,  1.0536e-02, -6.3940e-02,
         -3.2343e-02,  4.4814e-03,  4.8412e-02,  1.8106e-01, -4.8034e-02,
          4.0230e-04, -1.2184e-02,  1.0477e-02, -9.3669e-03,  1.5982e-02,
         -1.4867e-02,  6.6143e-03, -8.4831e-03,  2.3138e-01,  7.5067e-02,
         -1.3847e-01,  2.4662e-01, -2.1844e-01, -7.6638e-02, -4.2088e-02,
         -1.5471e-01, -5.5876e-02, -4.0581e-01,  9.1794e-02,  9.1604e-02,
          1.5799e-01, -1.1004e-02, -9.9029e-02, -9.9999e-02,  3.0232e-01,
          2.6668e-01,  1.6291e-01,  3.5830e-01,  2.3252e-01,  3.0002e-01,
         -7.0659e-02, -4.8821e-01, -2.6090e-02,  4.8860e-01, -8.5967e-03,
         -5.3913e-01,  8.3011e-02, -2.8471e-01, -1.5934e-01, -9.5143e-02,
          8.8821e-02,  1.2795e-01, -5.4221e-03,  6.2619e-01, -1.2192e-02,
         -1.0680e-01,  1.8335e-01]], device='cuda:0') tensor(0.2085, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
548000 特征值优化 tensor(0.5478, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0853e-02, -5.6199e-01,  3.7747e-01,  1.5477e-01,  6.6430e-02,
          6.1109e-01, -3.6313e-01,  7.3847e-01, -3.9351e-01,  7.5122e-01,
         -7.5093e-01,  6.8419e-02,  1.2356e-02,  2.0172e-01, -1.9704e-01,
         -1.1947e-01,  2.0609e-01, -1.1921e-01,  1.8868e-02, -6.2195e-02,
         -3.5141e-02,  4.5209e-03,  6.4428e-02,  1.8578e-01, -4.5633e-02,
          3.3845e-02,  2.9386e-02,  5.7580e-04, -1.2164e-02,  1.7487e-02,
         -1.4206e-02, -5.9300e-02, -4.9118e-03,  2.3044e-01,  5.6933e-02,
         -1.5863e-01,  2.4584e-01, -2.2357e-01, -7.0168e-02, -3.2636e-02,
         -1.6240e-01, -5.3095e-02, -4.1124e-01,  9.4294e-02,  9.4079e-02,
          1.5960e-01, -3.9724e-03, -1.0567e-01, -9.9746e-02,  3.0686e-01,
          2.6650e-01,  1.6359e-01,  3.4703e-01,  2.4555e-01,  3.5704e-01,
          7.3392e-03, -4.9080e-01, -2.1470e-02,  4.7329e-01, -2.6975e-02,
         -5.0258e-01,  8.7452e-02, -2.4244e-01, -1.7704e-01, -7.2375e-02,
          1.5138e-01,  1.2953e-01,  1.6519e-02,  6.3472e-01, -3.8923e-02,
         -1.2368e-01,  1.3152e-01]], device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
549000 特征值优化 tensor(0.5511, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0186, -0.5730,  0.3754,  0.1610,  0.0520,  0.6262, -0.3578,  0.7090,
         -0.3543,  0.7370, -0.7161,  0.0323,  0.0136,  0.1736, -0.2255, -0.1765,
          0.1707, -0.1336, -0.0069, -0.0658, -0.0318,  0.0050,  0.0550,  0.1813,
         -0.0636, -0.0107, -0.0116,  0.0173, -0.0114,  0.0170, -0.0135,  0.0064,
         -0.0363,  0.2304,  0.0779, -0.1372,  0.2466, -0.2175, -0.0796, -0.0427,
         -0.1609, -0.0452, -0.4140,  0.0947,  0.0948,  0.1667, -0.0138, -0.1028,
         -0.1002,  0.3046,  0.2674,  0.1625,  0.3478,  0.2404,  0.3000, -0.0875,
         -0.4920, -0.0236,  0.4844, -0.0187, -0.5472,  0.0875, -0.2808, -0.1708,
         -0.1121,  0.0981,  0.1393, -0.0124,  0.6535, -0.0357, -0.0911,  0.1863]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
550000 特征值优化 tensor(0.5548, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0205, -0.5676,  0.3796,  0.1616,  0.0616,  0.6114, -0.3535,  0.7227,
         -0.3365,  0.7314, -0.7401,  0.0201,  0.0122,  0.1858, -0.1975, -0.1340,
          0.2003, -0.1342,  0.0170, -0.0632, -0.0358,  0.0048,  0.0603,  0.1902,
         -0.0516,  0.0269,  0.0180,  0.0063, -0.0124,  0.0170, -0.0129, -0.0271,
         -0.0107,  0.2301,  0.0703, -0.1462,  0.2482, -0.2195, -0.0740, -0.0351,
         -0.1609, -0.0531, -0.4092,  0.0944,  0.0956,  0.1672, -0.0058, -0.1047,
         -0.1004,  0.3049,  0.2637,  0.1636,  0.3495,  0.2419,  0.3366, -0.0127,
         -0.4902, -0.0214,  0.4787, -0.0334, -0.5108,  0.0875, -0.2616, -0.1668,
         -0.0817,  0.1212,  0.1403,  0.0051,  0.6319, -0.0306, -0.1244,  0.1590]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
551000 特征值优化 tensor(0.5493, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0238, -0.5652,  0.3790,  0.1559,  0.0720,  0.6128, -0.3587,  0.7318,
         -0.3420,  0.7658, -0.7519,  0.0139,  0.0125,  0.2072, -0.1913, -0.1181,
          0.2014, -0.1247,  0.0238, -0.0619, -0.0362,  0.0048,  0.0650,  0.1852,
         -0.0432,  0.0366,  0.0315, -0.0009, -0.0134,  0.0175, -0.0142, -0.0647,
         -0.0053,  0.2304,  0.0602, -0.1580,  0.2498, -0.2207, -0.0727, -0.0309,
         -0.1664, -0.0511, -0.4091,  0.0943,  0.0945,  0.1628, -0.0022, -0.1058,
         -0.1012,  0.3078,  0.2665,  0.1637,  0.3336,  0.2537,  0.3597,  0.0114,
         -0.4952, -0.0195,  0.4713, -0.0459, -0.4991,  0.0872, -0.2490, -0.1745,
         -0.0583,  0.1573,  0.1284,  0.0168,  0.6374, -0.0448, -0.1348,  0.1240]],
       device='cuda:0') tensor(0.2053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
552000 特征值优化 tensor(0.5515, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0130, -0.5714,  0.3758,  0.1605,  0.0510,  0.6275, -0.3705,  0.7090,
         -0.3068,  0.7495, -0.7107, -0.0172,  0.0123,  0.1749, -0.2235, -0.1763,
          0.1685, -0.1375, -0.0044, -0.0657, -0.0328,  0.0049,  0.0580,  0.1821,
         -0.0602, -0.0080, -0.0096,  0.0180, -0.0116,  0.0174, -0.0132,  0.0029,
         -0.0360,  0.2300,  0.0825, -0.1349,  0.2470, -0.2172, -0.0827, -0.0414,
         -0.1614, -0.0425, -0.4141,  0.0964,  0.0963,  0.1676, -0.0124, -0.1027,
         -0.1016,  0.3059,  0.2662,  0.1630,  0.3472,  0.2399,  0.2991, -0.0851,
         -0.4930, -0.0224,  0.4835, -0.0367, -0.5431,  0.0887, -0.2828, -0.1701,
         -0.1022,  0.0993,  0.1409, -0.0092,  0.6530, -0.0362, -0.1011,  0.1855]],
       device='cuda:0') tensor(0.2075, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
553000 特征值优化 tensor(0.5617, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0271, -0.5646,  0.3743,  0.1666,  0.0494,  0.6228, -0.3485,  0.7214,
         -0.2911,  0.7392, -0.7213, -0.0303,  0.0115,  0.1743, -0.1978, -0.1443,
          0.2017, -0.1327,  0.0085, -0.0646, -0.0333,  0.0046,  0.0527,  0.1871,
         -0.0470,  0.0130,  0.0045,  0.0101, -0.0112,  0.0161, -0.0131, -0.0063,
         -0.0121,  0.2316,  0.0788, -0.1403,  0.2479, -0.2165, -0.0803, -0.0358,
         -0.1622, -0.0493, -0.4056,  0.0961,  0.0963,  0.1632, -0.0092, -0.1005,
         -0.1006,  0.3025,  0.2665,  0.1633,  0.3527,  0.2377,  0.3102, -0.0382,
         -0.4853, -0.0242,  0.4794, -0.0457, -0.5297,  0.0864, -0.2803, -0.1692,
         -0.0767,  0.1047,  0.1367,  0.0038,  0.6328, -0.0275, -0.1321,  0.1752]],
       device='cuda:0') tensor(0.2055, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
554000 特征值优化 tensor(0.5498, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0121, -0.5840,  0.3783,  0.1555,  0.0605,  0.6101, -0.3704,  0.7361,
         -0.2805,  0.7592, -0.7455, -0.0369,  0.0112,  0.1978, -0.1950, -0.1194,
          0.2016, -0.1232,  0.0171, -0.0655, -0.0311,  0.0047,  0.0626,  0.1881,
         -0.0494,  0.0307,  0.0268,  0.0075, -0.0112,  0.0172, -0.0125, -0.0513,
         -0.0073,  0.2302,  0.0717, -0.1498,  0.2498, -0.2202, -0.0740, -0.0327,
         -0.1643, -0.0502, -0.4142,  0.0973,  0.0976,  0.1705, -0.0126, -0.1053,
         -0.0998,  0.3048,  0.2703,  0.1618,  0.3455,  0.2440,  0.3582,  0.0100,
         -0.4915, -0.0202,  0.4720, -0.0571, -0.4992,  0.0890, -0.2523, -0.1743,
         -0.0570,  0.1391,  0.1304,  0.0110,  0.6305, -0.0363, -0.1406,  0.1423]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
555000 特征值优化 tensor(0.5571, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0237, -0.5662,  0.3753,  0.1681,  0.0531,  0.6215, -0.3666,  0.7035,
         -0.2675,  0.7514, -0.7332, -0.0641,  0.0133,  0.1801, -0.2055, -0.1744,
          0.1768, -0.1322, -0.0079, -0.0668, -0.0316,  0.0050,  0.0635,  0.1863,
         -0.0441,  0.0023, -0.0059,  0.0067, -0.0113,  0.0167, -0.0106, -0.0142,
         -0.0292,  0.2298,  0.0810, -0.1359,  0.2531, -0.2140, -0.0799, -0.0378,
         -0.1665, -0.0481, -0.4110,  0.0950,  0.0951,  0.1652, -0.0152, -0.1016,
         -0.0993,  0.3029,  0.2663,  0.1628,  0.3417,  0.2429,  0.3075, -0.0639,
         -0.4982, -0.0192,  0.4824, -0.0529, -0.5254,  0.0865, -0.2815, -0.1664,
         -0.0854,  0.1147,  0.1437, -0.0024,  0.6429, -0.0344, -0.1178,  0.1634]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
556000 特征值优化 tensor(0.5487, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.2424e-02, -5.7483e-01,  3.7344e-01,  1.5963e-01,  4.8027e-02,
          6.2721e-01, -3.6560e-01,  7.2416e-01, -2.5114e-01,  7.6236e-01,
         -6.8647e-01, -7.0154e-02,  1.3524e-02,  1.6717e-01, -2.4077e-01,
         -1.7183e-01,  1.6508e-01, -1.3304e-01,  1.9573e-04, -6.5401e-02,
         -3.1523e-02,  4.8856e-03,  5.5010e-02,  1.8147e-01, -6.8536e-02,
         -2.1974e-02, -2.0884e-02,  2.9125e-02, -1.1704e-02,  1.7180e-02,
         -1.4278e-02,  1.8265e-02, -4.0346e-02,  2.2921e-01,  9.0947e-02,
         -1.3009e-01,  2.4254e-01, -2.1949e-01, -8.9318e-02, -4.0865e-02,
         -1.5740e-01, -3.5135e-02, -4.1220e-01,  9.5171e-02,  9.4161e-02,
          1.6578e-01, -1.2447e-02, -1.0281e-01, -1.0085e-01,  3.0565e-01,
          2.6598e-01,  1.6359e-01,  3.6402e-01,  2.3178e-01,  2.9498e-01,
         -8.8544e-02, -4.8235e-01, -2.6422e-02,  4.7977e-01, -5.0961e-02,
         -5.5505e-01,  9.1535e-02, -2.8719e-01, -1.7179e-01, -9.1971e-02,
          8.2696e-02,  1.3043e-01, -6.3844e-03,  6.4406e-01, -3.4680e-02,
         -1.1386e-01,  2.0601e-01]], device='cuda:0') tensor(0.2053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
557000 特征值优化 tensor(6.7688, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.0997e+00, -5.0684e-01, -3.3513e-01, -1.5984e-01, -2.9819e-01,
         -1.1879e+00, -7.5306e-01, -1.3664e+00, -1.5812e+00,  6.5745e-01,
          4.6211e-01, -1.6780e+00,  1.1344e-01, -4.4923e-02,  6.4864e-02,
         -1.3947e-01,  1.9449e-01, -3.1400e-01, -4.2762e-01, -7.1293e-01,
         -3.5878e-01,  6.5011e-02, -2.8254e-01, -1.5776e-01,  7.8806e-02,
         -5.5905e-02, -7.4871e-02, -5.7968e-01, -7.5226e-01,  4.7252e-01,
          6.7695e-02, -7.4481e-04,  1.7492e-01, -2.3242e-01,  5.7703e-01,
          6.8405e-02, -1.7445e-01, -2.7064e-01, -7.1918e-03, -3.5749e-01,
          6.2228e-01,  5.5065e-02, -1.8973e+00, -3.5289e-01,  1.0918e+00,
          7.0369e-01, -2.2730e-01,  4.5852e-01, -1.0337e-03,  1.3719e-01,
         -5.3804e-01, -7.6921e-02, -2.5367e-02,  6.6129e-02, -2.1196e-01,
          1.8870e-02, -8.5309e-02, -5.8400e-01, -1.0132e+00,  8.0718e-02,
          5.3738e-01,  2.6403e-02,  2.1860e+00,  8.2584e-02,  5.5242e-01,
          2.2512e-01, -7.5480e-02,  3.2141e-01, -6.7774e-01,  4.6066e-01,
         -7.7214e-02,  9.3729e-01]], device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
558000 特征值优化 tensor(0.8845, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.4472, -0.0343, -0.2891, -0.0297, -0.3304, -0.3399, -0.5364, -1.0358,
         -0.4090,  0.2883, -0.3381, -0.5812, -0.0041, -0.0229,  0.0060, -0.0782,
         -0.0718,  0.0335, -0.0219, -0.0511, -0.1715,  0.0126, -0.0860,  0.1074,
         -0.0613,  0.0832, -0.0623, -0.0922, -0.1755,  0.2141,  0.0680, -0.0359,
          0.0133, -0.1147,  0.0069,  0.0034, -0.1294, -0.1307, -0.0179, -0.1259,
          0.3203,  0.0418, -0.9619, -0.2499,  0.9175,  0.0545, -0.0292,  0.0794,
         -0.1668,  0.2932, -0.1724, -0.0073,  0.0196,  0.0499, -0.0200, -0.2750,
         -0.2240, -0.2093, -0.2027, -0.0698,  0.2063,  0.0840,  1.1428, -0.1779,
          0.3737,  0.0991, -0.0594,  0.0286, -0.0604,  0.0305,  0.1902,  0.1793]],
       device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
559000 特征值优化 tensor(0.6881, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1998, -0.0669, -0.2199, -0.1109, -0.3737, -0.1775, -0.3068, -0.6385,
          0.0259,  0.5382, -0.6176, -0.4829, -0.0115, -0.1537, -0.1790, -0.0714,
         -0.1610,  0.0828,  0.0212, -0.0750, -0.1795,  0.0202, -0.1688,  0.1387,
         -0.0169, -0.0060, -0.1422, -0.0332, -0.1519,  0.2064,  0.0606,  0.0287,
         -0.0696, -0.1202,  0.0321,  0.0201, -0.1378, -0.0563,  0.0546, -0.0763,
          0.3279,  0.0076, -0.7326, -0.2787,  0.7359,  0.0377, -0.0268,  0.0407,
         -0.1368,  0.2788, -0.2425,  0.0297,  0.0375,  0.0322, -0.0531, -0.3432,
         -0.3163, -0.1985, -0.1335, -0.0502,  0.1540,  0.0697,  0.9491, -0.0590,
          0.2957,  0.1979, -0.0526,  0.0357, -0.0612,  0.0886,  0.0605,  0.1698]],
       device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
560000 特征值优化 tensor(0.5809, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0895, -0.1201, -0.2077, -0.0239, -0.3303, -0.0494, -0.1778, -0.3872,
          0.0680,  0.6292, -0.8730, -0.4412,  0.0035, -0.1742, -0.2074, -0.1364,
         -0.0917, -0.0282, -0.0973, -0.0939, -0.1698,  0.0194, -0.1001,  0.2567,
         -0.0044,  0.0810, -0.0072, -0.0377, -0.1043,  0.2116,  0.0587,  0.0214,
         -0.1298, -0.1094,  0.0473,  0.0494, -0.1131, -0.0139,  0.0493, -0.0584,
          0.2770, -0.0076, -0.5977, -0.0980,  0.4623,  0.0893, -0.0502,  0.0147,
         -0.2282,  0.3589, -0.3564,  0.0768, -0.1066,  0.0955, -0.0223, -0.4470,
         -0.5316, -0.1004, -0.1272,  0.0026,  0.2165,  0.0446,  0.8182,  0.0590,
          0.2819,  0.2496, -0.0168,  0.0527, -0.0095,  0.0484,  0.1045,  0.1017]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
561000 特征值优化 tensor(0.5815, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0378, -0.1011, -0.2071, -0.0600, -0.3356,  0.0200, -0.1931, -0.2858,
          0.0852,  0.7022, -0.8705, -0.4559, -0.0116, -0.2167, -0.1239, -0.1590,
         -0.0457,  0.0067, -0.0845, -0.0961, -0.1580,  0.0175, -0.1469,  0.2405,
         -0.0111,  0.0183, -0.0963, -0.0157, -0.1037,  0.2098,  0.0675,  0.0252,
         -0.1290, -0.1085,  0.0403,  0.0554, -0.0984, -0.0205,  0.0174, -0.0140,
          0.2526,  0.0365, -0.5740, -0.1192,  0.4430,  0.0534, -0.0032,  0.0127,
         -0.2287,  0.3535, -0.3410,  0.0746, -0.0850,  0.1001, -0.0158, -0.4406,
         -0.5538, -0.1067, -0.0999, -0.0736,  0.2273,  0.0374,  0.7960,  0.0823,
          0.2877,  0.2216, -0.0715,  0.1077, -0.0317,  0.0505,  0.0924,  0.1506]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
562000 特征值优化 tensor(0.5706, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0329e+00, -9.0034e-02, -2.1636e-01, -7.6576e-02, -3.3661e-01,
          2.9887e-02,  6.0384e-02, -2.3148e-01,  5.3949e-02,  7.0777e-01,
         -1.1519e+00, -4.3509e-01, -1.3678e-02, -1.9031e-01, -1.9577e-01,
         -1.0846e-01, -1.0093e-01, -5.6939e-02, -1.2435e-01, -9.4174e-02,
         -1.5979e-01,  2.0514e-02, -1.6138e-01,  2.1722e-01, -5.8317e-02,
          6.6089e-02,  2.7192e-02, -6.5964e-02, -1.0065e-01,  2.1187e-01,
          6.1528e-02,  2.7817e-02, -7.5050e-02, -1.0757e-01,  5.5330e-02,
          4.6248e-02, -5.8636e-02, -5.3242e-03,  3.8961e-02, -3.0973e-02,
          2.2585e-01,  9.1191e-03, -5.6958e-01, -1.1773e-01,  4.4296e-01,
          4.6200e-02,  1.0637e-03,  1.7896e-02, -2.2840e-01,  3.5604e-01,
         -3.3391e-01,  7.7348e-02, -3.6100e-02,  6.7326e-02, -4.4357e-02,
         -4.1541e-01, -5.6563e-01, -1.0514e-01, -6.9870e-02, -8.0773e-02,
          2.6788e-01,  2.6882e-03,  7.6008e-01,  9.7462e-02,  2.7684e-01,
          2.4816e-01, -2.9390e-02,  7.7121e-02, -8.5616e-02,  1.0393e-01,
          1.1479e-01,  1.2082e-01]], device='cuda:0') tensor(0.2028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
563000 特征值优化 tensor(0.6013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9878, -0.0400, -0.2163, -0.0651, -0.3372, -0.1091,  0.7168, -0.2399,
          0.0857,  0.6852, -1.5896, -0.3977, -0.0160, -0.2219, -0.0663, -0.1726,
          0.0040, -0.0076, -0.0524, -0.0891, -0.1637,  0.0210, -0.1253,  0.2338,
         -0.0184,  0.0089, -0.1108, -0.0273, -0.0976,  0.2094,  0.0511,  0.0480,
          0.0725, -0.1067,  0.0102,  0.0505, -0.0124, -0.0062,  0.0348, -0.0309,
          0.1866,  0.0227, -0.5526, -0.1102,  0.4511,  0.0263,  0.0022,  0.0111,
         -0.2193,  0.3603, -0.3295,  0.0727, -0.0608,  0.0616, -0.0946, -0.3771,
         -0.5193, -0.0833, -0.0973, -0.0286,  0.1954, -0.0225,  0.5761,  0.1686,
          0.2419,  0.2214, -0.0206,  0.0876, -0.0887,  0.1184,  0.1335,  0.1421]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
564000 特征值优化 tensor(0.5338, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6049e-01, -5.0974e-03, -2.2977e-01, -4.4175e-02, -3.0972e-01,
         -1.0079e-01,  9.4807e-01, -3.6153e-01,  7.7648e-02,  6.8358e-01,
         -1.7548e+00, -3.9930e-01, -1.5099e-02, -2.2382e-01, -5.0311e-02,
         -1.9494e-01, -1.8557e-02, -1.3832e-02, -9.6543e-02, -9.0328e-02,
         -1.6174e-01,  2.1415e-02, -1.1289e-01,  2.3025e-01, -6.5265e-03,
          2.3024e-02, -1.0109e-01, -3.3103e-02, -1.0390e-01,  2.0973e-01,
          5.7827e-02,  6.5163e-02,  7.1989e-02, -1.0655e-01,  5.8066e-04,
          6.3521e-02, -1.1218e-02,  1.4118e-02,  3.2436e-02, -3.0254e-02,
          1.8498e-01,  1.6479e-02, -5.4089e-01, -1.0951e-01,  4.4831e-01,
          3.2829e-02, -6.2166e-03,  1.9185e-02, -2.2321e-01,  3.6335e-01,
         -3.3022e-01,  6.9442e-02, -9.4001e-02,  8.4345e-02, -1.2605e-01,
         -3.8774e-01, -5.2867e-01, -8.0361e-02, -1.1174e-01, -1.7429e-03,
          1.0954e-01,  4.4479e-02,  5.2856e-01,  1.5381e-01,  2.7239e-01,
          2.1192e-01, -2.9019e-02,  8.8032e-02,  4.6595e-03,  3.1176e-02,
          1.2198e-01,  1.2600e-01]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
565000 特征值优化 tensor(0.5336, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9628,  0.0048, -0.2303, -0.0489, -0.3368, -0.0934,  0.9824, -0.3629,
          0.0836,  0.6549, -1.7703, -0.3720, -0.0139, -0.2298, -0.0352, -0.1780,
         -0.0389, -0.0235, -0.0681, -0.0910, -0.1622,  0.0219, -0.1046,  0.2350,
         -0.0047,  0.0310, -0.1093, -0.0164, -0.0981,  0.2092,  0.0504,  0.0642,
          0.0699, -0.1070, -0.0051,  0.0586, -0.0200,  0.0269,  0.0348, -0.0315,
          0.1939,  0.0274, -0.5374, -0.1098,  0.4500,  0.0083,  0.0090,  0.0152,
         -0.2236,  0.3614, -0.3337,  0.0763, -0.0854,  0.0710, -0.1345, -0.3874,
         -0.5369, -0.0812, -0.0954, -0.0161,  0.0840,  0.0504,  0.5220,  0.1420,
          0.2851,  0.2105, -0.0189,  0.0919,  0.0130,  0.0371,  0.0925,  0.1565]],
       device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
566000 特征值优化 tensor(0.5340, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6334e-01,  9.1523e-03, -2.2627e-01, -4.8164e-02, -3.3724e-01,
         -9.4492e-02,  9.7821e-01, -3.6475e-01,  8.4506e-02,  6.9089e-01,
         -1.7947e+00, -3.8061e-01, -1.3793e-02, -2.2613e-01, -3.5184e-02,
         -1.9272e-01, -1.8370e-02, -4.1587e-02, -1.0656e-01, -9.1133e-02,
         -1.6232e-01,  2.2028e-02, -1.1148e-01,  2.3638e-01, -8.5475e-03,
          1.3336e-02, -1.2756e-01, -1.1041e-02, -9.8394e-02,  2.0924e-01,
          4.9647e-02,  6.9127e-02,  6.7618e-02, -1.0766e-01, -5.9226e-04,
          6.0050e-02, -2.0892e-02,  2.7822e-02,  1.9057e-02, -1.9290e-02,
          1.9147e-01,  4.4011e-02, -5.3971e-01, -1.1316e-01,  4.5202e-01,
          1.0466e-02,  7.7338e-03,  1.4581e-02, -2.2513e-01,  3.6243e-01,
         -3.3397e-01,  7.5555e-02, -7.7032e-02,  6.5890e-02, -1.3056e-01,
         -3.8534e-01, -5.2785e-01, -8.3730e-02, -6.5948e-02, -3.2265e-02,
          7.9536e-02,  5.3944e-02,  5.3681e-01,  1.3559e-01,  2.7366e-01,
          2.1162e-01, -1.5226e-02,  8.9488e-02,  1.6516e-02,  3.5053e-02,
          8.7313e-02,  1.6529e-01]], device='cuda:0') tensor(0.2052, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
567000 特征值优化 tensor(0.5334, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6083e-01, -8.5861e-03, -2.2264e-01, -2.2595e-02, -3.5336e-01,
         -9.5881e-02,  9.6295e-01, -3.1196e-01,  4.3213e-02,  6.9203e-01,
         -1.7564e+00, -3.9035e-01, -1.6902e-02, -2.1950e-01, -1.1804e-01,
         -1.3166e-01, -4.2142e-02,  8.2924e-02,  2.0817e-02, -9.1005e-02,
         -1.6203e-01,  2.2298e-02, -1.1603e-01,  2.3279e-01, -2.9559e-02,
          3.3509e-02, -2.0424e-02, -6.5512e-02, -9.8788e-02,  2.0940e-01,
          5.0163e-02,  8.1581e-02,  7.3827e-02, -1.0756e-01,  3.4730e-02,
          4.1370e-02, -1.1024e-02,  1.2403e-02,  6.2165e-02, -4.8427e-02,
          1.8824e-01, -5.2381e-04, -5.3554e-01, -1.0895e-01,  4.5046e-01,
          8.6156e-03,  6.5460e-03,  1.0281e-02, -2.2369e-01,  3.6120e-01,
         -3.4778e-01,  7.6019e-02, -6.8488e-02,  5.8976e-02, -1.3686e-01,
         -3.9611e-01, -5.3839e-01, -7.8162e-02, -6.7515e-02, -6.5897e-02,
          7.6301e-02,  5.3613e-02,  4.9556e-01,  1.6381e-01,  2.9480e-01,
          2.5129e-01, -3.5196e-02,  6.2697e-02,  1.5895e-02,  3.9132e-02,
          1.2081e-01,  1.1144e-01]], device='cuda:0') tensor(0.2034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
568000 特征值优化 tensor(0.5689, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9672, -0.0035, -0.2224, -0.0270, -0.3463, -0.0881,  0.9796, -0.3001,
          0.0162,  0.6435, -1.7759, -0.4081, -0.0146, -0.2035, -0.1257, -0.1211,
         -0.0406,  0.1095,  0.0423, -0.0887, -0.1634,  0.0222, -0.1336,  0.2283,
         -0.0462,  0.0230, -0.0222, -0.0790, -0.0958,  0.2076,  0.0525,  0.0817,
          0.0706, -0.1062,  0.0246,  0.0408, -0.0134,  0.0120,  0.0647, -0.0542,
          0.1888, -0.0077, -0.5382, -0.1094,  0.4526,  0.0080,  0.0058,  0.0115,
         -0.2235,  0.3602, -0.3448,  0.0784, -0.0589,  0.0588, -0.1317, -0.3956,
         -0.5388, -0.0756, -0.0595, -0.0530,  0.0614,  0.0602,  0.4992,  0.1515,
          0.2979,  0.2294, -0.0170,  0.0654,  0.0220,  0.0358,  0.1384,  0.1192]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
569000 特征值优化 tensor(0.5353, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9499, -0.0119, -0.2303, -0.0459, -0.3314, -0.1041,  0.9830, -0.2937,
          0.0497,  0.6852, -1.7627, -0.3978, -0.0155, -0.2228, -0.0522, -0.1731,
         -0.0273, -0.0029, -0.0528, -0.0908, -0.1634,  0.0223, -0.1077,  0.2259,
         -0.0049,  0.0183, -0.1179, -0.0251, -0.0968,  0.2088,  0.0556,  0.0578,
          0.0676, -0.1077, -0.0072,  0.0666, -0.0135,  0.0126,  0.0265, -0.0236,
          0.1893,  0.0268, -0.5315, -0.1105,  0.4484,  0.0117,  0.0091,  0.0154,
         -0.2234,  0.3595, -0.3358,  0.0767, -0.0891,  0.0825, -0.1219, -0.3888,
         -0.5143, -0.0884, -0.0980,  0.0020,  0.0839,  0.0341,  0.5146,  0.1538,
          0.2727,  0.2278, -0.0062,  0.0870,  0.0204,  0.0470,  0.0957,  0.1421]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
570000 特征值优化 tensor(0.5328, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9671,  0.0051, -0.2404, -0.0408, -0.3206, -0.0894,  0.9986, -0.3009,
          0.0576,  0.6811, -1.8048, -0.3674, -0.0148, -0.2279, -0.0338, -0.1932,
         -0.0192, -0.0303, -0.1089, -0.0912, -0.1618,  0.0220, -0.1165,  0.2453,
         -0.0024,  0.0150, -0.1326, -0.0097, -0.0996,  0.2095,  0.0584,  0.0583,
          0.0687, -0.1066, -0.0093,  0.0651, -0.0144,  0.0158,  0.0229, -0.0233,
          0.1860,  0.0301, -0.5388, -0.1111,  0.4522,  0.0094,  0.0074,  0.0214,
         -0.2242,  0.3618, -0.3365,  0.0745, -0.0886,  0.0852, -0.1225, -0.3861,
         -0.5391, -0.0777, -0.1122,  0.0265,  0.0756,  0.0413,  0.5195,  0.1496,
          0.3070,  0.2194, -0.0188,  0.0969,  0.0301,  0.0350,  0.0666,  0.1341]],
       device='cuda:0') tensor(0.2035, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
571000 特征值优化 tensor(0.5362, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6094e-01, -6.1717e-04, -2.2716e-01, -1.1302e-02, -3.4231e-01,
         -9.5829e-02,  9.5942e-01, -2.4977e-01,  3.2160e-02,  6.5276e-01,
         -1.7654e+00, -3.7595e-01, -1.6026e-02, -2.1529e-01, -1.1318e-01,
         -1.3046e-01, -4.0973e-02,  8.3696e-02,  3.0873e-02, -9.0648e-02,
         -1.6281e-01,  2.2789e-02, -1.3243e-01,  2.4089e-01, -3.2371e-02,
          3.2954e-02, -1.9614e-02, -8.4468e-02, -9.7133e-02,  2.0941e-01,
          4.8879e-02,  8.1751e-02,  7.2285e-02, -1.0672e-01,  3.0779e-02,
          4.0034e-02, -9.8500e-03,  4.6463e-03,  6.8486e-02, -5.4405e-02,
          1.8781e-01, -8.3448e-03, -5.3759e-01, -1.1169e-01,  4.5048e-01,
          7.9495e-03,  7.0043e-03,  1.3537e-02, -2.2298e-01,  3.6084e-01,
         -3.5449e-01,  8.0564e-02, -7.2907e-02,  6.0642e-02, -1.2507e-01,
         -3.9716e-01, -5.4607e-01, -7.3479e-02, -5.4484e-02, -5.0649e-02,
          6.1017e-02,  4.7215e-02,  5.0479e-01,  1.6252e-01,  3.0242e-01,
          2.3240e-01, -8.7496e-03,  5.8865e-02,  3.6486e-02,  4.4134e-02,
          1.1610e-01,  1.2816e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
572000 特征值优化 tensor(0.5511, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.5284e-01, -9.6669e-03, -2.3523e-01, -3.1983e-02, -3.5739e-01,
         -8.7052e-02,  1.0059e+00, -2.3439e-01,  1.9391e-02,  6.4163e-01,
         -1.7547e+00, -3.6967e-01, -1.5568e-02, -1.8659e-01, -8.8886e-02,
         -1.2897e-01, -4.2879e-02,  6.9473e-02,  1.9884e-02, -9.0718e-02,
         -1.6359e-01,  2.3941e-02, -1.1620e-01,  2.1184e-01, -4.5165e-02,
          2.1122e-02, -4.3839e-02, -5.1353e-02, -9.5256e-02,  2.0799e-01,
          5.2303e-02,  7.7068e-02,  7.5265e-02, -1.0777e-01,  1.5247e-02,
          4.5356e-02, -1.5117e-02,  1.5409e-02,  4.9688e-02, -3.9793e-02,
          1.8917e-01, -3.6264e-04, -5.3100e-01, -1.1027e-01,  4.4746e-01,
          7.8647e-03,  9.6031e-03,  1.6317e-02, -2.2458e-01,  3.5624e-01,
         -3.4631e-01,  8.4268e-02, -7.2105e-02,  7.2779e-02, -1.2586e-01,
         -3.9830e-01, -5.2239e-01, -8.7223e-02, -7.7966e-02, -3.9942e-02,
          4.5205e-02,  5.2536e-02,  4.9242e-01,  1.4582e-01,  2.8445e-01,
          2.2376e-01, -2.0728e-02,  8.7371e-02,  3.8014e-02,  3.8010e-02,
          1.0314e-01,  1.3301e-01]], device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
573000 特征值优化 tensor(0.5331, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9561,  0.0021, -0.2347, -0.0632, -0.3428, -0.1088,  0.9874, -0.2527,
          0.0479,  0.6904, -1.7773, -0.3609, -0.0148, -0.2255, -0.0415, -0.1744,
         -0.0239, -0.0050, -0.0782, -0.0911, -0.1636,  0.0219, -0.1079,  0.2214,
         -0.0109, -0.0066, -0.1286, -0.0477, -0.0969,  0.2091,  0.0481,  0.0681,
          0.0634, -0.1080,  0.0026,  0.0587, -0.0219,  0.0168,  0.0379, -0.0344,
          0.1958,  0.0227, -0.5379, -0.1118,  0.4494,  0.0106,  0.0073,  0.0188,
         -0.2239,  0.3599, -0.3281,  0.0764, -0.0813,  0.0666, -0.1144, -0.3914,
         -0.5150, -0.0889, -0.1217,  0.0199,  0.0468,  0.0364,  0.5377,  0.1405,
          0.2802,  0.2117, -0.0184,  0.0832,  0.0464,  0.0542,  0.0984,  0.1576]],
       device='cuda:0') tensor(0.2049, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
574000 特征值优化 tensor(0.5338, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9609,  0.0049, -0.2306, -0.0494, -0.3214, -0.0976,  1.0077, -0.2422,
          0.0405,  0.6799, -1.7999, -0.3660, -0.0143, -0.2244, -0.0446, -0.1746,
         -0.0181, -0.0187, -0.0744, -0.0909, -0.1627,  0.0224, -0.1060,  0.2323,
         -0.0024,  0.0270, -0.1135, -0.0296, -0.0965,  0.2089,  0.0567,  0.0659,
          0.0650, -0.1074,  0.0025,  0.0513, -0.0171,  0.0124,  0.0375, -0.0301,
          0.1906,  0.0176, -0.5368, -0.1112,  0.4502,  0.0062,  0.0095,  0.0155,
         -0.2241,  0.3599, -0.3342,  0.0773, -0.0822,  0.0787, -0.1111, -0.3912,
         -0.5316, -0.0809, -0.1073,  0.0233,  0.0395,  0.0362,  0.5370,  0.1402,
          0.2844,  0.2235, -0.0057,  0.0893,  0.0571,  0.0516,  0.0904,  0.1378]],
       device='cuda:0') tensor(0.2123, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
575000 特征值优化 tensor(0.5960, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.5637e-01, -2.8648e-04, -2.3344e-01, -5.1865e-02, -3.4154e-01,
         -9.6328e-02,  9.8515e-01, -2.1551e-01,  5.5903e-02,  6.9844e-01,
         -1.7736e+00, -3.5635e-01, -1.3979e-02, -2.2668e-01, -4.1681e-02,
         -1.7280e-01, -3.4912e-02, -2.1372e-02, -7.4783e-02, -8.9746e-02,
         -1.6331e-01,  2.1196e-02, -1.2842e-01,  2.1782e-01, -2.1008e-02,
         -2.9611e-02, -1.2907e-01, -4.2480e-02, -9.5850e-02,  2.0812e-01,
          4.8457e-02,  7.2946e-02,  6.3622e-02, -1.0747e-01, -3.7968e-03,
          6.8037e-02, -1.9328e-02,  9.6736e-03,  3.2763e-02, -2.9916e-02,
          1.9330e-01,  2.9524e-02, -5.3466e-01, -1.1143e-01,  4.4986e-01,
          9.5821e-03,  7.0094e-03,  1.7246e-02, -2.2516e-01,  3.5793e-01,
         -3.3333e-01,  7.5768e-02, -7.6313e-02,  6.4811e-02, -1.0963e-01,
         -3.9364e-01, -5.2484e-01, -8.5111e-02, -7.7977e-02, -1.0390e-02,
          3.1845e-02,  3.6145e-02,  5.3801e-01,  1.4008e-01,  2.7306e-01,
          2.0780e-01, -1.0819e-02,  8.6414e-02,  5.8009e-02,  5.8426e-02,
          9.2440e-02,  1.6958e-01]], device='cuda:0') tensor(0.2050, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
576000 特征值优化 tensor(0.5556, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9538,  0.0055, -0.2476, -0.0428, -0.3198, -0.0918,  1.0149, -0.1881,
          0.0234,  0.6389, -1.7738, -0.3533, -0.0160, -0.2321, -0.0640, -0.1655,
         -0.0100,  0.0183, -0.0613, -0.0925, -0.1649,  0.0240, -0.0998,  0.2126,
         -0.0122,  0.0271, -0.0779, -0.0571, -0.0918,  0.2098,  0.0559,  0.0773,
          0.0677, -0.1082,  0.0264,  0.0420, -0.0126,  0.0086,  0.0400, -0.0354,
          0.1843,  0.0156, -0.5334, -0.1107,  0.4459,  0.0060,  0.0076,  0.0218,
         -0.2222,  0.3551, -0.3433,  0.0840, -0.0769,  0.0736, -0.1141, -0.4008,
         -0.5280, -0.0853, -0.0603, -0.0365,  0.0253,  0.0501,  0.5131,  0.1343,
          0.2858,  0.2223, -0.0259,  0.0932,  0.0489,  0.0404,  0.0750,  0.1491]],
       device='cuda:0') tensor(0.2065, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
577000 特征值优化 tensor(0.5334, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6471e-01,  5.8574e-03, -2.4471e-01, -3.1354e-02, -3.0273e-01,
         -8.3819e-02,  1.0280e+00, -2.1577e-01,  5.0329e-02,  7.0071e-01,
         -1.8381e+00, -3.4821e-01, -1.4364e-02, -2.3892e-01, -2.0902e-02,
         -1.9498e-01, -1.4363e-02, -4.3010e-02, -1.3907e-01, -9.0894e-02,
         -1.6178e-01,  2.1693e-02, -1.0271e-01,  2.4012e-01,  1.1228e-03,
          3.0765e-02, -1.1269e-01, -1.5668e-02, -9.8834e-02,  2.0914e-01,
          5.9552e-02,  7.0946e-02,  6.5874e-02, -1.0678e-01,  7.6805e-03,
          4.7403e-02, -1.8173e-02,  1.2234e-02,  1.3693e-02, -1.4943e-02,
          1.8925e-01,  3.9801e-02, -5.3838e-01, -1.1112e-01,  4.5164e-01,
          7.1768e-03,  8.5328e-03,  2.2732e-02, -2.2388e-01,  3.6097e-01,
         -3.4156e-01,  7.5097e-02, -8.3603e-02,  8.0242e-02, -1.0766e-01,
         -3.9053e-01, -5.4559e-01, -7.6279e-02, -5.2378e-02, -1.6668e-02,
          1.8348e-02,  4.1271e-02,  5.3877e-01,  1.3705e-01,  3.0040e-01,
          2.2444e-01, -2.2854e-02,  1.0312e-01,  7.8952e-02,  4.3200e-02,
          7.7402e-02,  1.2255e-01]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
578000 特征值优化 tensor(0.5356, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6760e-01, -1.2765e-03, -2.2635e-01, -3.0529e-02, -3.4367e-01,
         -9.4643e-02,  9.9974e-01, -1.5288e-01,  1.3284e-02,  7.2736e-01,
         -1.7757e+00, -3.9199e-01, -1.6061e-02, -2.2464e-01, -1.2339e-01,
         -1.3256e-01, -3.6141e-02,  1.0096e-01,  1.2888e-02, -9.0818e-02,
         -1.6107e-01,  2.2444e-02, -1.1635e-01,  2.3320e-01, -2.9738e-02,
          2.7006e-02, -1.0114e-02, -7.9277e-02, -9.7571e-02,  2.0929e-01,
          5.5917e-02,  7.6968e-02,  7.2866e-02, -1.0680e-01,  5.0429e-02,
          3.2316e-02, -9.9472e-03, -4.5189e-04,  6.0167e-02, -3.8774e-02,
          1.8619e-01, -8.9647e-03, -5.3664e-01, -1.0750e-01,  4.5029e-01,
          4.6112e-03,  8.8180e-03,  1.2328e-02, -2.2363e-01,  3.6058e-01,
         -3.4395e-01,  7.6374e-02, -7.7238e-02,  6.5587e-02, -1.1129e-01,
         -4.0170e-01, -5.2980e-01, -8.0455e-02, -9.0500e-03, -8.0572e-02,
          2.6604e-02,  3.2667e-02,  4.9185e-01,  1.6582e-01,  2.8898e-01,
          2.5612e-01, -1.6311e-02,  6.2475e-02,  6.7099e-02,  5.5693e-02,
          1.0544e-01,  1.0481e-01]], device='cuda:0') tensor(0.2030, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
579000 特征值优化 tensor(0.5380, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.5239e-01, -7.9018e-03, -2.2304e-01, -3.0345e-02, -3.2674e-01,
         -9.7519e-02,  1.0280e+00, -1.5306e-01,  1.1431e-02,  7.2159e-01,
         -1.8043e+00, -3.7501e-01, -1.6530e-02, -2.3240e-01, -1.1107e-01,
         -1.3973e-01, -2.7967e-02,  5.8066e-02, -1.1672e-02, -9.0954e-02,
         -1.6340e-01,  2.2757e-02, -1.0453e-01,  2.3041e-01, -1.2944e-02,
          5.0647e-02, -3.4250e-02, -5.1542e-02, -9.6899e-02,  2.0814e-01,
          5.4055e-02,  7.6347e-02,  6.9522e-02, -1.0715e-01,  3.8173e-02,
          3.8132e-02, -9.4479e-03, -6.7553e-05,  3.0180e-02, -2.6134e-02,
          1.8509e-01,  2.0539e-02, -5.3240e-01, -1.0952e-01,  4.4792e-01,
          4.2321e-03,  9.4350e-03,  1.1843e-02, -2.2016e-01,  3.6056e-01,
         -3.4411e-01,  7.5678e-02, -7.5487e-02,  6.9620e-02, -1.1311e-01,
         -4.0207e-01, -5.1845e-01, -8.6265e-02, -4.4149e-02, -5.1498e-02,
          7.4924e-03,  3.6768e-02,  4.9213e-01,  1.6047e-01,  2.8233e-01,
          2.3283e-01, -2.4177e-02,  7.9635e-02,  7.6756e-02,  5.6747e-02,
          9.6194e-02,  1.3390e-01]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
580000 特征值优化 tensor(0.5452, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.4919e-01, -8.1595e-03, -2.4189e-01, -3.1381e-02, -3.4807e-01,
         -1.0038e-01,  1.0197e+00, -1.1036e-01,  2.3763e-02,  6.8198e-01,
         -1.7662e+00, -3.4478e-01, -1.5048e-02, -2.1037e-01, -7.8690e-02,
         -1.4944e-01, -5.0578e-02,  4.8876e-02,  1.5196e-04, -9.0516e-02,
         -1.6345e-01,  2.3268e-02, -1.4067e-01,  2.1658e-01, -3.2264e-02,
          3.1540e-02, -5.1096e-02, -5.5750e-02, -9.5953e-02,  2.0880e-01,
          5.3147e-02,  7.0416e-02,  6.8517e-02, -1.0590e-01,  2.1912e-02,
          4.3088e-02, -1.2188e-02,  4.5921e-04,  3.2347e-02, -2.6104e-02,
          1.8953e-01,  1.7197e-02, -5.3221e-01, -1.0997e-01,  4.4700e-01,
          8.4428e-03,  9.0289e-03,  2.2917e-02, -2.2557e-01,  3.5482e-01,
         -3.4566e-01,  8.4373e-02, -7.3940e-02,  7.4117e-02, -1.0602e-01,
         -3.9810e-01, -5.3394e-01, -7.8386e-02, -9.9480e-02, -1.2648e-02,
          1.4181e-02,  3.0829e-02,  4.8783e-01,  1.5422e-01,  2.6305e-01,
          2.1234e-01, -7.0208e-03,  9.2733e-02,  6.7981e-02,  5.7263e-02,
          1.2506e-01,  1.3560e-01]], device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
581000 特征值优化 tensor(0.5352, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6239e-01,  9.0089e-04, -2.3806e-01, -5.9419e-02, -3.4294e-01,
         -9.9466e-02,  9.8997e-01, -1.3657e-01,  4.7052e-02,  7.2049e-01,
         -1.7824e+00, -3.3419e-01, -1.4649e-02, -2.3664e-01, -3.8886e-02,
         -1.7730e-01, -3.1236e-02, -5.0318e-02, -9.6555e-02, -9.0974e-02,
         -1.6173e-01,  2.2173e-02, -1.1603e-01,  2.1950e-01,  2.4336e-04,
         -8.0012e-03, -1.2198e-01, -5.2829e-02, -9.7005e-02,  2.0902e-01,
          4.8040e-02,  7.0241e-02,  6.0979e-02, -1.0776e-01, -1.6821e-03,
          5.9859e-02, -2.4049e-02,  7.7268e-03,  2.4446e-02, -2.4722e-02,
          1.9812e-01,  3.4086e-02, -5.3643e-01, -1.0965e-01,  4.5076e-01,
          9.4006e-03,  8.9573e-03,  2.0346e-02, -2.2344e-01,  3.5961e-01,
         -3.2850e-01,  7.6057e-02, -7.7216e-02,  6.4385e-02, -9.9767e-02,
         -3.9741e-01, -5.3139e-01, -8.0838e-02, -8.0632e-02, -1.7921e-02,
          4.5635e-03,  2.4258e-02,  5.3456e-01,  1.3962e-01,  2.8817e-01,
          1.8519e-01, -3.8625e-02,  1.0000e-01,  8.7676e-02,  6.7807e-02,
          9.2704e-02,  1.7049e-01]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
582000 特征值优化 tensor(0.5450, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.5624e-01,  3.5184e-03, -2.4946e-01, -1.9445e-02, -3.1071e-01,
         -1.0444e-01,  1.0583e+00, -1.1257e-01,  5.5327e-03,  7.1796e-01,
         -1.8162e+00, -3.5657e-01, -1.4829e-02, -2.1333e-01, -5.3065e-02,
         -1.6505e-01, -3.0548e-02,  1.1619e-02, -5.0054e-02, -9.0654e-02,
         -1.6284e-01,  2.0268e-02, -8.3696e-02,  2.2186e-01,  7.5675e-03,
          3.7746e-02, -4.1717e-02, -7.1459e-02, -9.8255e-02,  2.0989e-01,
          6.0291e-02,  7.4460e-02,  6.7553e-02, -1.0748e-01,  1.8643e-02,
          4.6918e-02, -1.2771e-02,  6.9604e-04,  3.7075e-02, -3.3336e-02,
          1.8716e-01,  1.1123e-02, -5.3305e-01, -1.0941e-01,  4.4813e-01,
          5.6401e-03,  9.2747e-03,  2.1704e-02, -2.2933e-01,  3.5474e-01,
         -3.4486e-01,  8.0762e-02, -7.2734e-02,  7.6551e-02, -1.1178e-01,
         -4.0117e-01, -5.1658e-01, -8.7705e-02, -5.3125e-02, -7.0904e-02,
         -1.4385e-02,  3.2221e-02,  4.8607e-01,  1.5827e-01,  2.9055e-01,
          2.1440e-01, -3.8040e-02,  8.3389e-02,  8.8298e-02,  5.9409e-02,
          8.3175e-02,  1.4720e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
583000 特征值优化 tensor(0.5348, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6202e-01, -2.2666e-03, -2.2928e-01, -1.0800e-02, -3.3666e-01,
         -9.6903e-02,  1.0653e+00, -8.8851e-02,  3.8231e-03,  6.9805e-01,
         -1.8522e+00, -3.4829e-01, -1.6391e-02, -2.3128e-01, -1.1795e-01,
         -1.3835e-01, -2.8673e-02,  5.9689e-02, -1.6266e-02, -9.0909e-02,
         -1.6266e-01,  2.2527e-02, -1.1340e-01,  2.3814e-01, -1.9296e-02,
          4.6494e-02, -2.2680e-02, -5.9209e-02, -9.6943e-02,  2.0874e-01,
          5.6529e-02,  7.0768e-02,  6.4677e-02, -1.0683e-01,  4.8282e-02,
          3.2672e-02, -1.3052e-02,  8.6227e-05,  4.1155e-02, -3.3125e-02,
          1.8836e-01,  1.0970e-02, -5.3634e-01, -1.1012e-01,  4.4964e-01,
          3.8854e-03,  7.8035e-03,  1.3731e-02, -2.2399e-01,  3.5877e-01,
         -3.5581e-01,  8.0657e-02, -6.3495e-02,  7.0174e-02, -1.1093e-01,
         -3.9735e-01, -5.2761e-01, -8.2604e-02, -4.3030e-02, -9.1511e-02,
         -1.1500e-02,  2.7588e-02,  4.7059e-01,  1.6190e-01,  2.8408e-01,
          2.2503e-01, -1.4342e-02,  7.5185e-02,  9.8040e-02,  6.4036e-02,
          8.8447e-02,  1.4230e-01]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
584000 特征值优化 tensor(0.5409, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.4746e-01, -1.0429e-02, -2.3367e-01, -4.0784e-02, -3.5326e-01,
         -1.0260e-01,  1.0192e+00, -7.4556e-02,  1.3296e-02,  6.7006e-01,
         -1.7597e+00, -3.2277e-01, -1.4396e-02, -2.1265e-01, -6.4112e-02,
         -1.5548e-01, -3.9593e-02,  2.9237e-02, -3.2869e-02, -9.0472e-02,
         -1.6311e-01,  2.2896e-02, -1.1313e-01,  2.2131e-01, -1.1898e-02,
          2.4843e-02, -7.4243e-02, -4.5936e-02, -9.5023e-02,  2.0912e-01,
          4.8345e-02,  7.0999e-02,  6.6210e-02, -1.0821e-01,  2.0941e-03,
          5.9150e-02, -1.7182e-02, -1.3043e-03,  3.3401e-02, -3.1073e-02,
          1.9302e-01,  2.4072e-02, -5.2935e-01, -1.0846e-01,  4.4759e-01,
          9.9452e-03,  1.1142e-02,  1.6522e-02, -2.2339e-01,  3.5722e-01,
         -3.3928e-01,  8.0217e-02, -7.9368e-02,  6.8471e-02, -9.8719e-02,
         -4.0528e-01, -5.2910e-01, -8.1757e-02, -6.7231e-02, -3.8431e-03,
         -1.3331e-02,  2.0878e-02,  4.9974e-01,  1.5295e-01,  2.7050e-01,
          2.0819e-01,  5.9392e-03,  7.9774e-02,  9.5167e-02,  7.1488e-02,
          1.1686e-01,  1.5381e-01]], device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
585000 特征值优化 tensor(0.5337, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.5649e-01, -3.2414e-03, -2.4811e-01, -4.7465e-02, -3.1571e-01,
         -1.0356e-01,  1.0158e+00, -8.4309e-02, -3.5917e-03,  6.9013e-01,
         -1.8050e+00, -3.2304e-01, -1.4789e-02, -2.2995e-01, -3.7210e-02,
         -1.7570e-01, -1.5543e-02, -2.1532e-02, -1.0723e-01, -9.0923e-02,
         -1.6342e-01,  2.2292e-02, -1.2320e-01,  2.2680e-01, -6.1732e-03,
         -9.6172e-03, -1.4064e-01, -3.4775e-02, -9.7267e-02,  2.0912e-01,
          5.6856e-02,  6.2334e-02,  5.8304e-02, -1.0621e-01, -1.9371e-02,
          6.7452e-02, -1.7077e-02, -1.7305e-05,  3.4693e-02, -2.7673e-02,
          1.8824e-01,  1.6669e-02, -5.3645e-01, -1.1151e-01,  4.4986e-01,
          1.0513e-02,  7.1706e-03,  2.5711e-02, -2.2431e-01,  3.6026e-01,
         -3.3444e-01,  7.6088e-02, -8.3012e-02,  7.7597e-02, -8.8095e-02,
         -3.9584e-01, -5.3121e-01, -7.9473e-02, -9.9382e-02, -4.0634e-03,
         -7.1342e-03,  1.5024e-02,  5.2890e-01,  1.4402e-01,  2.9548e-01,
          2.1607e-01, -1.6589e-02,  9.5918e-02,  9.8739e-02,  7.0746e-02,
          9.8512e-02,  1.2758e-01]], device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
586000 特征值优化 tensor(0.5337, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6180e-01,  7.8728e-04, -2.3221e-01, -5.6841e-02, -3.0899e-01,
         -1.0041e-01,  1.0249e+00, -7.2237e-02, -1.3042e-02,  6.9879e-01,
         -1.8228e+00, -3.3479e-01, -1.4709e-02, -2.2889e-01, -4.1891e-02,
         -1.7337e-01, -2.5274e-02, -1.7488e-02, -9.4848e-02, -9.0698e-02,
         -1.6223e-01,  2.1918e-02, -1.0387e-01,  2.2486e-01,  3.3306e-03,
          1.5201e-02, -1.2881e-01, -3.5609e-02, -9.7913e-02,  2.0860e-01,
          5.7811e-02,  5.9432e-02,  5.8673e-02, -1.0728e-01, -2.7946e-03,
          5.7660e-02, -1.5697e-02, -1.5567e-03,  3.0053e-02, -2.5907e-02,
          1.8995e-01,  2.0312e-02, -5.3725e-01, -1.1009e-01,  4.5038e-01,
          7.8092e-03,  8.5737e-03,  1.6219e-02, -2.2355e-01,  3.6059e-01,
         -3.2921e-01,  7.5592e-02, -9.1718e-02,  8.2428e-02, -9.1256e-02,
         -3.9355e-01, -5.3102e-01, -8.0546e-02, -9.8221e-02, -1.4303e-02,
         -3.3927e-03,  1.1160e-02,  5.1508e-01,  1.4651e-01,  2.8898e-01,
          2.1503e-01, -1.9340e-02,  9.9050e-02,  1.0707e-01,  7.2439e-02,
          1.1793e-01,  1.2787e-01]], device='cuda:0') tensor(0.2032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
587000 特征值优化 tensor(0.5339, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6308e-01,  8.3623e-04, -2.3905e-01, -5.3694e-02, -3.0944e-01,
         -1.0498e-01,  1.0280e+00, -6.0103e-02, -2.9959e-03,  6.9376e-01,
         -1.8246e+00, -3.3046e-01, -1.4833e-02, -2.2723e-01, -4.0047e-02,
         -1.8007e-01, -1.3906e-02, -2.8450e-02, -1.1197e-01, -9.0680e-02,
         -1.6218e-01,  2.2637e-02, -1.0951e-01,  2.2700e-01, -3.1922e-04,
          1.2138e-02, -1.2470e-01, -4.4719e-02, -9.6310e-02,  2.0875e-01,
          5.7955e-02,  5.8869e-02,  6.1257e-02, -1.0810e-01,  2.3196e-03,
          5.7765e-02, -1.1977e-02, -4.9759e-03,  3.8111e-02, -2.8848e-02,
          1.8420e-01,  1.5463e-02, -5.3700e-01, -1.1039e-01,  4.5081e-01,
          8.4672e-03,  8.6829e-03,  1.9997e-02, -2.2417e-01,  3.5890e-01,
         -3.3315e-01,  7.7471e-02, -9.6340e-02,  8.5235e-02, -8.9457e-02,
         -3.9519e-01, -5.2171e-01, -8.5067e-02, -8.0940e-02, -3.8108e-02,
         -2.0638e-03,  8.0561e-03,  5.1096e-01,  1.5309e-01,  2.7493e-01,
          2.2293e-01, -1.0725e-02,  9.2581e-02,  1.0815e-01,  7.0739e-02,
          1.0948e-01,  1.3445e-01]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
588000 特征值优化 tensor(0.5337, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9639,  0.0021, -0.2266, -0.0498, -0.3449, -0.1006,  1.0070, -0.0404,
          0.0145,  0.7343, -1.7984, -0.3253, -0.0144, -0.2275, -0.0386, -0.1694,
         -0.0375, -0.0279, -0.0821, -0.0909, -0.1616,  0.0218, -0.1065,  0.2216,
          0.0062,  0.0163, -0.1143, -0.0281, -0.0980,  0.2093,  0.0487,  0.0686,
          0.0683, -0.1078, -0.0134,  0.0694, -0.0177, -0.0041,  0.0186, -0.0203,
          0.1920,  0.0433, -0.5373, -0.1094,  0.4501,  0.0083,  0.0084,  0.0135,
         -0.2241,  0.3601, -0.3325,  0.0756, -0.0980,  0.0766, -0.0900, -0.4035,
         -0.5293, -0.0823, -0.0915, -0.0305, -0.0084,  0.0073,  0.5001,  0.1546,
          0.2607,  0.1941, -0.0225,  0.0957,  0.1232,  0.0704,  0.1155,  0.1820]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
589000 特征值优化 tensor(0.5324, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6286e-01,  8.0603e-03, -2.1923e-01, -6.7847e-02, -3.4003e-01,
         -8.9841e-02,  1.0112e+00, -4.1674e-02,  3.2825e-03,  7.2441e-01,
         -1.8159e+00, -3.5747e-01, -1.3987e-02, -2.3921e-01, -2.2320e-02,
         -1.7787e-01, -1.6329e-02, -5.8811e-02, -1.1739e-01, -9.1106e-02,
         -1.6255e-01,  2.0559e-02, -9.8174e-02,  2.3125e-01, -9.8436e-03,
          3.9111e-03, -1.4849e-01, -9.1082e-03, -9.9954e-02,  2.1005e-01,
          4.8706e-02,  6.9992e-02,  6.3763e-02, -1.0692e-01,  1.3604e-03,
          6.0949e-02, -2.1368e-02,  2.0600e-04,  5.4671e-02, -3.0198e-02,
          1.9301e-01,  1.7218e-02, -5.3907e-01, -1.1260e-01,  4.5194e-01,
          9.8137e-03,  8.0680e-03,  1.0336e-02, -2.2316e-01,  3.6508e-01,
         -3.2159e-01,  7.1135e-02, -8.7356e-02,  7.0428e-02, -8.9725e-02,
         -4.0007e-01, -5.3587e-01, -7.9901e-02, -1.0719e-01, -4.9148e-02,
         -2.3141e-02,  1.5452e-02,  5.1314e-01,  1.4764e-01,  3.0231e-01,
          1.4418e-01, -4.5156e-02,  8.3213e-02,  1.2410e-01,  6.5912e-02,
          1.1045e-01,  1.8495e-01]], device='cuda:0') tensor(0.2048, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
590000 特征值优化 tensor(0.5344, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9630,  0.0039, -0.2159, -0.0503, -0.3387, -0.0953,  1.0240, -0.0280,
         -0.0066,  0.6963, -1.8184, -0.3285, -0.0141, -0.2301, -0.0313, -0.1748,
         -0.0370, -0.0352, -0.1092, -0.0906, -0.1618,  0.0201, -0.0992,  0.2292,
          0.0042,  0.0351, -0.1177, -0.0031, -0.0983,  0.2108,  0.0507,  0.0636,
          0.0645, -0.1066, -0.0112,  0.0717, -0.0196, -0.0019,  0.0343, -0.0176,
          0.1909,  0.0387, -0.5358, -0.1092,  0.4490,  0.0044,  0.0100,  0.0100,
         -0.2200,  0.3622, -0.3346,  0.0724, -0.0900,  0.0745, -0.0905, -0.4018,
         -0.5273, -0.0818, -0.1197, -0.0702, -0.0219,  0.0087,  0.4996,  0.1526,
          0.2507,  0.1867, -0.0136,  0.0859,  0.1259,  0.0731,  0.1161,  0.1747]],
       device='cuda:0') tensor(0.2060, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
591000 特征值优化 tensor(0.5359, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9619,  0.0049, -0.2222, -0.0531, -0.3526, -0.1057,  1.0085, -0.0218,
          0.0101,  0.7044, -1.7991, -0.3222, -0.0140, -0.2341, -0.0287, -0.1753,
         -0.0179, -0.0416, -0.1107, -0.0907, -0.1622,  0.0204, -0.0973,  0.2290,
          0.0080,  0.0429, -0.1179, -0.0088, -0.0971,  0.2108,  0.0487,  0.0744,
          0.0719, -0.1078, -0.0099,  0.0666, -0.0139, -0.0082,  0.0317, -0.0175,
          0.1874,  0.0408, -0.5365, -0.1101,  0.4499,  0.0063,  0.0098,  0.0147,
         -0.2197,  0.3606, -0.3350,  0.0740, -0.0897,  0.0737, -0.0884, -0.4068,
         -0.5153, -0.0878, -0.1138, -0.0687, -0.0226,  0.0129,  0.4981,  0.1607,
          0.2471,  0.1952, -0.0155,  0.0899,  0.1318,  0.0655,  0.1041,  0.1664]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
592000 特征值优化 tensor(0.5351, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6212e-01,  1.4581e-03, -2.3804e-01, -4.9276e-02, -3.2734e-01,
         -1.0112e-01,  1.0044e+00, -2.9364e-03, -1.0909e-02,  7.3056e-01,
         -1.7948e+00, -3.2360e-01, -1.4322e-02, -2.3349e-01, -4.1076e-02,
         -1.7781e-01, -2.0241e-02, -3.6458e-02, -1.1800e-01, -9.0739e-02,
         -1.6216e-01,  2.0280e-02, -1.0198e-01,  2.2515e-01,  5.7793e-03,
          1.3976e-02, -1.4028e-01, -2.4746e-02, -9.6793e-02,  2.1038e-01,
          5.6920e-02,  6.3351e-02,  7.0808e-02, -1.0852e-01, -5.4383e-03,
          6.1923e-02, -1.1331e-02, -1.1755e-02,  1.6942e-02, -9.8831e-03,
          1.8490e-01,  4.8008e-02, -5.3541e-01, -1.0922e-01,  4.4946e-01,
          6.2549e-03,  1.0337e-02,  2.0799e-02, -2.1959e-01,  3.6081e-01,
         -3.3744e-01,  7.3660e-02, -9.2118e-02,  8.5379e-02, -8.4528e-02,
         -4.0323e-01, -5.1376e-01, -8.7480e-02, -1.5622e-01,  4.5163e-02,
         -1.1912e-02,  3.2714e-03,  4.9426e-01,  1.6424e-01,  2.5204e-01,
          2.2329e-01, -5.1024e-03,  9.5505e-02,  1.2511e-01,  7.2565e-02,
          1.0223e-01,  1.2329e-01]], device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
593000 特征值优化 tensor(0.5352, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9644, -0.0038, -0.2215, -0.0070, -0.3177, -0.0936,  0.9835,  0.0058,
         -0.0279,  0.7034, -1.7959, -0.3418, -0.0167, -0.2156, -0.1281, -0.1276,
         -0.0324,  0.0977,  0.0151, -0.0909, -0.1617,  0.0226, -0.1286,  0.2397,
         -0.0343,  0.0399, -0.0104, -0.0715, -0.0974,  0.2095,  0.0574,  0.0964,
          0.0571, -0.1058,  0.0316,  0.0414, -0.0151, -0.0097,  0.0652, -0.0419,
          0.1894, -0.0147, -0.5384, -0.1097,  0.4505,  0.0079,  0.0056,  0.0095,
         -0.2219,  0.3629, -0.3572,  0.0795, -0.0619,  0.0600, -0.0832, -0.4057,
         -0.5434, -0.0747, -0.0325, -0.0778, -0.0524,  0.0189,  0.5218,  0.1445,
          0.2910,  0.2252, -0.0063,  0.0732,  0.1381,  0.0818,  0.1279,  0.1260]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
594000 特征值优化 tensor(0.5370, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9524, -0.0105, -0.2315, -0.0477, -0.3332, -0.1017,  0.9987,  0.0183,
         -0.0302,  0.6940, -1.7812, -0.3224, -0.0152, -0.2250, -0.0516, -0.1652,
         -0.0343, -0.0030, -0.0652, -0.0907, -0.1631,  0.0225, -0.1089,  0.2230,
         -0.0179, -0.0067, -0.1162, -0.0321, -0.0960,  0.2090,  0.0558,  0.0645,
          0.0625, -0.1076, -0.0024,  0.0555, -0.0126, -0.0120,  0.0412, -0.0312,
          0.1880,  0.0122, -0.5324, -0.1104,  0.4482,  0.0082,  0.0094,  0.0160,
         -0.2234,  0.3589, -0.3360,  0.0781, -0.0901,  0.0836, -0.0765, -0.4016,
         -0.5313, -0.0801, -0.0989, -0.0119, -0.0251, -0.0021,  0.5100,  0.1517,
          0.2799,  0.2211, -0.0128,  0.0906,  0.1320,  0.0814,  0.1262,  0.1297]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
595000 特征值优化 tensor(0.5342, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.5566e-01, -6.9848e-03, -2.2530e-01, -4.9181e-02, -3.3297e-01,
         -9.7840e-02,  1.0098e+00,  3.1808e-02, -1.9862e-02,  7.1287e-01,
         -1.7965e+00, -3.2046e-01, -1.4848e-02, -2.2339e-01, -4.6243e-02,
         -1.6600e-01, -4.1365e-02, -1.4850e-02, -7.0019e-02, -9.0849e-02,
         -1.6240e-01,  2.1689e-02, -1.0917e-01,  2.2812e-01,  4.8989e-04,
          1.5662e-02, -1.1964e-01, -2.4129e-02, -9.8502e-02,  2.0887e-01,
          5.4055e-02,  6.9363e-02,  6.5659e-02, -1.0757e-01, -9.3003e-03,
          6.1787e-02, -1.5124e-02, -1.1023e-02,  3.0630e-02, -2.7156e-02,
          1.9083e-01,  2.5789e-02, -5.3337e-01, -1.0884e-01,  4.4896e-01,
          9.7629e-03,  9.5765e-03,  1.1879e-02, -2.2392e-01,  3.6110e-01,
         -3.3309e-01,  7.4514e-02, -9.5272e-02,  8.2649e-02, -7.8235e-02,
         -4.0334e-01, -5.3525e-01, -7.9925e-02, -8.4884e-02, -1.9270e-02,
         -3.4094e-02, -1.6795e-03,  4.9893e-01,  1.5378e-01,  2.7221e-01,
          2.1065e-01, -1.4655e-02,  8.8032e-02,  1.4478e-01,  7.9361e-02,
          1.2861e-01,  1.4720e-01]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
596000 特征值优化 tensor(0.5337, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6537e-01,  6.0268e-03, -2.5687e-01, -4.9760e-02, -3.3734e-01,
         -1.0527e-01,  1.0355e+00,  2.7605e-02,  2.4202e-02,  7.2315e-01,
         -1.8343e+00, -2.9249e-01, -1.4214e-02, -2.2866e-01, -2.7933e-02,
         -1.7929e-01, -1.0750e-02, -2.8693e-02, -1.4393e-01, -9.1187e-02,
         -1.6183e-01,  2.1787e-02, -1.2094e-01,  2.2931e-01, -1.6187e-02,
         -3.3407e-02, -1.5182e-01, -2.8292e-02, -9.7524e-02,  2.0866e-01,
          5.0528e-02,  6.9825e-02,  6.1872e-02, -1.0767e-01,  7.1914e-05,
          6.0621e-02, -2.0876e-02, -4.3187e-03,  3.0300e-02, -2.8170e-02,
          1.9163e-01,  2.8177e-02, -5.3963e-01, -1.1150e-01,  4.5230e-01,
          9.1958e-03,  7.3975e-03,  2.9961e-02, -2.2555e-01,  3.5939e-01,
         -3.3426e-01,  7.4475e-02, -8.7828e-02,  7.2925e-02, -8.2020e-02,
         -4.0040e-01, -5.2429e-01, -8.2655e-02, -8.7026e-02, -2.6172e-02,
         -4.9782e-02,  6.8194e-03,  5.0077e-01,  1.4751e-01,  3.0610e-01,
          1.7937e-01, -4.2963e-02,  1.0034e-01,  1.4861e-01,  7.2378e-02,
          6.4868e-02,  1.7506e-01]], device='cuda:0') tensor(0.2038, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
597000 特征值优化 tensor(0.5398, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.4758e-01, -4.3617e-03, -2.3485e-01, -4.8356e-02, -3.4676e-01,
         -9.4978e-02,  1.0571e+00,  6.8785e-02, -9.4713e-03,  6.7787e-01,
         -1.8039e+00, -3.0329e-01, -1.4832e-02, -2.1667e-01, -6.1334e-02,
         -1.4714e-01, -4.2248e-02,  9.0812e-03, -2.7022e-02, -9.1093e-02,
         -1.6398e-01,  2.2408e-02, -1.1959e-01,  2.2132e-01, -1.6009e-02,
          2.0136e-02, -6.4035e-02, -4.9549e-02, -9.7375e-02,  2.0859e-01,
          5.2958e-02,  7.0403e-02,  6.0623e-02, -1.0772e-01,  9.2324e-03,
          5.3409e-02, -9.8963e-03, -1.3004e-02,  3.4964e-02, -2.9620e-02,
          1.8617e-01,  2.1864e-02, -5.3173e-01, -1.1031e-01,  4.4674e-01,
          8.1804e-03,  9.9386e-03,  1.7594e-02, -2.2381e-01,  3.5822e-01,
         -3.3551e-01,  7.7828e-02, -7.1274e-02,  7.1187e-02, -8.0148e-02,
         -4.0353e-01, -5.3451e-01, -8.0744e-02, -7.8283e-02, -2.9414e-02,
         -6.2250e-02,  1.1067e-02,  4.8193e-01,  1.4909e-01,  2.7288e-01,
          2.0593e-01,  2.0604e-04,  8.6256e-02,  1.4015e-01,  8.0382e-02,
          1.1455e-01,  1.4951e-01]], device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
598000 特征值优化 tensor(0.5430, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9517, -0.0080, -0.2394, -0.0387, -0.3543, -0.0950,  1.0191,  0.0848,
         -0.0035,  0.6961, -1.7652, -0.2986, -0.0149, -0.2227, -0.0585, -0.1513,
         -0.0461,  0.0276, -0.0202, -0.0910, -0.1630,  0.0234, -0.1246,  0.2213,
         -0.0157,  0.0180, -0.0624, -0.0455, -0.0952,  0.2094,  0.0480,  0.0742,
          0.0625, -0.1066,  0.0089,  0.0546, -0.0141, -0.0130,  0.0279, -0.0282,
          0.1888,  0.0302, -0.5311, -0.1090,  0.4480,  0.0083,  0.0107,  0.0195,
         -0.2258,  0.3558, -0.3422,  0.0814, -0.0786,  0.0676, -0.0773, -0.4090,
         -0.5267, -0.0818, -0.0562, -0.0305, -0.0641,  0.0073,  0.4874,  0.1485,
          0.2595,  0.2037,  0.0037,  0.0826,  0.1455,  0.0831,  0.1107,  0.1628]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
599000 特征值优化 tensor(0.5349, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6367e-01,  6.7704e-03, -2.3478e-01, -5.2368e-02, -3.4273e-01,
         -1.0764e-01,  1.0066e+00,  6.2461e-02,  1.5025e-02,  7.3892e-01,
         -1.8062e+00, -2.9499e-01, -1.4137e-02, -2.3755e-01, -2.6649e-02,
         -1.7317e-01, -1.6210e-02, -4.4924e-02, -1.2593e-01, -9.0902e-02,
         -1.6233e-01,  2.1582e-02, -1.1222e-01,  2.2127e-01, -2.4770e-03,
         -1.4977e-02, -1.1443e-01, -4.6080e-02, -9.7755e-02,  2.0878e-01,
          4.8630e-02,  7.2835e-02,  5.6020e-02, -1.0811e-01, -2.9702e-04,
          6.5177e-02, -2.3270e-02, -7.4422e-03,  2.7388e-02, -2.6322e-02,
          1.9421e-01,  3.3049e-02, -5.3858e-01, -1.1137e-01,  4.5129e-01,
          9.6415e-03,  8.1052e-03,  1.8154e-02, -2.2497e-01,  3.6107e-01,
         -3.3228e-01,  7.5022e-02, -8.3061e-02,  6.7893e-02, -7.0378e-02,
         -4.0192e-01, -5.1238e-01, -8.9546e-02, -8.5498e-02, -3.1381e-02,
         -7.0943e-02,  4.2339e-03,  5.2203e-01,  1.3739e-01,  2.5387e-01,
          1.9112e-01, -2.1946e-02,  8.7787e-02,  1.6539e-01,  8.2851e-02,
          1.0619e-01,  1.7972e-01]], device='cuda:0') tensor(0.2035, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
600000 特征值优化 tensor(0.5378, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.5092e-01,  4.9066e-05, -2.2830e-01, -4.9669e-02, -3.2611e-01,
         -9.5541e-02,  1.0043e+00,  1.0103e-01, -1.9572e-02,  7.1087e-01,
         -1.7776e+00, -3.1047e-01, -1.4556e-02, -2.2792e-01, -5.9250e-02,
         -1.5166e-01, -4.4324e-02, -6.2506e-03, -5.4455e-02, -9.0972e-02,
         -1.6446e-01,  2.2424e-02, -1.3451e-01,  2.1237e-01, -1.6720e-02,
         -1.4239e-02, -8.7832e-02, -4.4946e-02, -9.7438e-02,  2.0904e-01,
          5.4301e-02,  6.3422e-02,  5.4773e-02, -1.0710e-01, -1.6709e-02,
          7.1661e-02, -1.3741e-02, -1.5530e-02,  3.1224e-02, -2.2911e-02,
          1.8821e-01,  2.2786e-02, -5.3453e-01, -1.1066e-01,  4.4745e-01,
          6.8161e-03,  9.8911e-03,  1.3718e-02, -2.2361e-01,  3.6061e-01,
         -3.3404e-01,  7.6415e-02, -7.7778e-02,  7.2575e-02, -6.7817e-02,
         -4.0022e-01, -5.3540e-01, -7.7746e-02, -8.3593e-02, -2.6244e-02,
         -6.2958e-02, -2.9591e-03,  5.0471e-01,  1.4448e-01,  2.7644e-01,
          1.9753e-01, -1.3696e-02,  9.9281e-02,  1.4856e-01,  9.3116e-02,
          1.1322e-01,  1.5460e-01]], device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
601000 特征值优化 tensor(0.5349, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9624,  0.0024, -0.2387, -0.0419, -0.3091, -0.0948,  1.0086,  0.0902,
         -0.0285,  0.7019, -1.8087, -0.3145, -0.0146, -0.2305, -0.0407, -0.1730,
         -0.0351, -0.0372, -0.1198, -0.0907, -0.1620,  0.0223, -0.1063,  0.2233,
          0.0103,  0.0275, -0.1186, -0.0345, -0.0969,  0.2093,  0.0575,  0.0660,
          0.0550, -0.1066, -0.0187,  0.0631, -0.0152, -0.0132,  0.0354, -0.0290,
          0.1881,  0.0186, -0.5368, -0.1107,  0.4508,  0.0075,  0.0091,  0.0202,
         -0.2236,  0.3599, -0.3383,  0.0770, -0.0877,  0.0805, -0.0658, -0.3987,
         -0.5368, -0.0771, -0.0728, -0.0204, -0.0654, -0.0035,  0.5147,  0.1404,
          0.2863,  0.2262, -0.0060,  0.0886,  0.1657,  0.0868,  0.1046,  0.1319]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
602000 特征值优化 tensor(0.5339, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6952e-01,  1.6000e-05, -2.2145e-01,  1.0705e-03, -3.2779e-01,
         -8.8422e-02,  1.0315e+00,  1.3535e-01, -1.5689e-02,  7.1146e-01,
         -1.8488e+00, -3.1140e-01, -1.5988e-02, -2.2419e-01, -1.3620e-01,
         -1.2536e-01, -2.3305e-02,  1.0474e-01,  1.8609e-02, -9.0696e-02,
         -1.6087e-01,  2.2627e-02, -1.2687e-01,  2.4201e-01, -3.2117e-02,
          6.1413e-02, -5.0076e-03, -5.6846e-02, -9.6830e-02,  2.0965e-01,
          5.6463e-02,  7.8990e-02,  6.9275e-02, -1.0632e-01,  3.0189e-02,
          2.7494e-02, -1.5292e-04, -2.3911e-02,  5.4869e-02, -3.7847e-02,
          1.7842e-01, -2.5875e-03, -5.3849e-01, -1.0890e-01,  4.5186e-01,
          6.3742e-03,  7.4034e-03,  9.1410e-03, -2.2198e-01,  3.6333e-01,
         -3.6180e-01,  8.1005e-02, -8.7926e-02,  7.5304e-02, -7.4249e-02,
         -4.0967e-01, -5.4948e-01, -7.1722e-02, -9.1412e-03, -1.1426e-01,
         -6.4153e-02, -3.0693e-04,  4.5565e-01,  1.6859e-01,  2.7919e-01,
          2.2221e-01, -1.2285e-02,  8.8145e-02,  1.8190e-01,  8.1182e-02,
          1.1511e-01,  1.2728e-01]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
603000 特征值优化 tensor(0.5392, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.5136e-01, -5.2566e-03, -2.2805e-01, -3.9648e-02, -3.5451e-01,
         -8.9853e-02,  9.9833e-01,  1.3089e-01,  1.8802e-03,  6.9860e-01,
         -1.7602e+00, -2.8579e-01, -1.4826e-02, -2.3186e-01, -4.5713e-02,
         -1.5280e-01, -4.8323e-02,  1.0107e-02, -4.3540e-02, -9.0666e-02,
         -1.6319e-01,  2.2630e-02, -1.1636e-01,  2.2736e-01, -1.5750e-02,
          4.4002e-03, -9.3587e-02, -2.9258e-02, -9.6664e-02,  2.0899e-01,
          4.8454e-02,  7.8863e-02,  6.0697e-02, -1.0764e-01,  7.3862e-03,
          5.7412e-02, -1.6024e-02, -1.7010e-02,  2.8951e-02, -2.8140e-02,
          1.9369e-01,  3.3534e-02, -5.3178e-01, -1.0958e-01,  4.4792e-01,
          7.8033e-03,  1.0341e-02,  1.4064e-02, -2.2339e-01,  3.5971e-01,
         -3.3903e-01,  7.7176e-02, -7.4026e-02,  6.5032e-02, -6.7730e-02,
         -4.0946e-01, -5.2919e-01, -8.3929e-02, -8.3140e-02,  8.6611e-04,
         -8.4347e-02, -1.0181e-03,  4.9176e-01,  1.4814e-01,  2.6339e-01,
          2.0062e-01,  2.6353e-03,  8.2175e-02,  1.7074e-01,  9.3097e-02,
          9.4776e-02,  1.7625e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
604000 特征值优化 tensor(0.5337, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6433e-01,  6.9860e-03, -2.3036e-01, -4.8916e-02, -3.4431e-01,
         -9.8033e-02,  1.0005e+00,  1.2251e-01, -1.4162e-03,  7.2979e-01,
         -1.7969e+00, -3.0517e-01, -1.3917e-02, -2.3503e-01, -3.0737e-02,
         -1.6789e-01, -2.1722e-02, -3.5028e-02, -1.1842e-01, -9.1043e-02,
         -1.6212e-01,  2.2281e-02, -1.3297e-01,  2.3438e-01, -1.6740e-02,
         -2.3095e-02, -1.3701e-01, -1.3982e-02, -9.7283e-02,  2.0930e-01,
          4.8644e-02,  7.2469e-02,  5.3964e-02, -1.0753e-01, -3.9756e-03,
          6.6676e-02, -2.3142e-02, -1.1682e-02,  2.2683e-02, -2.1383e-02,
          1.9372e-01,  3.8790e-02, -5.3917e-01, -1.1030e-01,  4.5017e-01,
          9.3277e-03,  7.9052e-03,  1.5719e-02, -2.2363e-01,  3.6089e-01,
         -3.3446e-01,  7.6590e-02, -7.7957e-02,  6.5286e-02, -6.2536e-02,
         -4.0268e-01, -5.2781e-01, -8.2177e-02, -6.5046e-02, -3.0889e-02,
         -9.1378e-02, -1.3586e-03,  5.1628e-01,  1.3555e-01,  2.7110e-01,
          1.9308e-01, -9.7541e-03,  9.1399e-02,  1.8180e-01,  8.9895e-02,
          9.5177e-02,  1.8274e-01]], device='cuda:0') tensor(0.2041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
605000 特征值优化 tensor(0.5342, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6220e-01,  4.5736e-03, -2.4458e-01, -3.9188e-02, -3.2690e-01,
         -9.8693e-02,  1.0105e+00,  1.3508e-01, -1.7060e-02,  7.1317e-01,
         -1.8090e+00, -2.8178e-01, -1.4551e-02, -2.3060e-01, -3.3744e-02,
         -1.6719e-01, -3.7837e-02, -3.8950e-02, -1.1065e-01, -9.0860e-02,
         -1.6254e-01,  2.1734e-02, -1.1957e-01,  2.2522e-01, -6.7766e-03,
         -1.2151e-02, -1.2460e-01, -2.9810e-02, -9.9250e-02,  2.0912e-01,
          5.6557e-02,  7.1647e-02,  5.5784e-02, -1.0742e-01, -1.1846e-02,
          7.2631e-02, -1.7147e-02, -1.5216e-02,  3.0175e-02, -2.4533e-02,
          1.9071e-01,  2.1426e-02, -5.3799e-01, -1.1042e-01,  4.5038e-01,
          9.6992e-03,  8.1955e-03,  2.3326e-02, -2.2395e-01,  3.6068e-01,
         -3.3773e-01,  7.4941e-02, -7.8136e-02,  7.7909e-02, -5.7702e-02,
         -4.0242e-01, -5.2953e-01, -8.1849e-02, -1.1457e-01,  8.6433e-03,
         -9.2236e-02, -9.7271e-04,  5.1233e-01,  1.3429e-01,  2.7363e-01,
          2.0357e-01, -1.5215e-02,  9.7863e-02,  1.9156e-01,  8.7777e-02,
          1.0309e-01,  1.4023e-01]], device='cuda:0') tensor(0.2083, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
606000 特征值优化 tensor(0.5347, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6031e-01, -1.6383e-03, -2.3827e-01, -4.0417e-02, -3.2776e-01,
         -9.5466e-02,  1.0038e+00,  1.4451e-01, -3.8424e-02,  7.1608e-01,
         -1.7997e+00, -2.9049e-01, -1.5806e-02, -2.2714e-01, -4.2463e-02,
         -1.6462e-01, -4.3925e-02, -2.5251e-02, -9.8539e-02, -9.0855e-02,
         -1.6288e-01,  2.2263e-02, -1.1446e-01,  2.2866e-01,  4.4996e-03,
          1.2148e-02, -1.2971e-01, -1.7267e-02, -9.7069e-02,  2.0883e-01,
          5.6941e-02,  7.1398e-02,  5.5157e-02, -1.0661e-01, -1.7701e-02,
          7.4711e-02, -1.6379e-02, -1.7082e-02,  2.5157e-02, -2.2558e-02,
          1.9066e-01,  2.8767e-02, -5.3731e-01, -1.1077e-01,  4.5014e-01,
          8.8358e-03,  7.5172e-03,  2.0025e-02, -2.2396e-01,  3.5950e-01,
         -3.3858e-01,  7.6949e-02, -7.9057e-02,  7.9109e-02, -5.7865e-02,
         -4.0280e-01, -5.2817e-01, -8.1379e-02, -1.0035e-01, -1.7477e-03,
         -9.0573e-02, -4.5599e-03,  5.1082e-01,  1.3593e-01,  2.7714e-01,
          2.1426e-01, -3.8567e-03,  9.1941e-02,  1.9047e-01,  9.0729e-02,
          9.5114e-02,  1.4617e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
607000 特征值优化 tensor(11.5876, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 8.3682e-01,  2.5764e+00, -7.8995e-01,  8.5131e-01,  6.9019e-01,
         -5.3352e-03, -4.0879e-01, -2.3365e-01,  2.4107e-01, -1.4080e-02,
         -3.4120e-01,  1.2358e+00, -9.5010e-01,  8.0330e-01, -2.9223e-01,
          8.9996e-01,  3.0757e-01, -5.3396e-01, -7.4596e-01, -1.2859e-02,
         -2.2772e-01,  6.3456e-01,  9.4867e-02, -1.3269e-02, -8.8738e-02,
         -1.4648e+00,  1.2956e+00,  5.0170e-04,  1.7273e-02, -5.1960e-01,
         -2.7137e-01, -1.1749e+00,  2.4075e-01, -3.9347e-02,  2.1582e-01,
         -6.7276e-01, -1.1638e+00, -1.4982e-02, -1.7318e-03, -9.2373e-01,
          6.9559e-02,  7.0062e-02, -1.5102e-01,  1.7821e+00, -1.0034e+00,
         -2.1647e-01, -1.5012e+00,  3.7128e-01, -7.7090e-01,  5.7150e-01,
         -7.6515e-01,  3.9613e-01,  8.1699e-01,  5.1490e-01, -2.2044e-01,
          1.0036e+00, -2.7655e-01, -3.0270e-01, -9.9985e-02, -1.0837e+00,
          6.1095e-01, -2.2393e-01, -5.6286e-01,  2.1593e-01, -1.7810e-01,
          1.6137e-01, -1.4924e-01, -8.8323e-02,  1.1936e+00, -7.3479e-01,
         -7.7047e-01,  4.1304e-01]], device='cuda:0') tensor(0.2067, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
608000 特征值优化 tensor(1.1940, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0938,  0.9017, -0.4122,  0.5145,  0.2107,  0.3432, -0.4355,  0.1759,
          0.2157, -0.0366, -0.5658,  0.5800, -0.2003,  0.0994,  0.0147,  0.1418,
          0.0039, -0.1121, -0.1116,  0.0188, -0.0866,  0.2467,  0.0692, -0.0619,
          0.0338, -0.3948,  0.2632, -0.0456, -0.0342, -0.1158, -0.0218, -0.2372,
         -0.0047, -0.0259, -0.0516, -0.0655, -0.2534,  0.0258,  0.1171, -0.1539,
          0.0525,  0.1273,  0.0133,  0.8159, -0.5725, -0.1810, -0.4091, -0.0435,
         -0.2500,  0.4175, -0.2286,  0.1326,  0.1790,  0.2488,  0.0738,  0.2914,
         -0.3542, -0.0738, -0.1853, -0.2615,  0.1920,  0.1141, -0.1510,  0.0637,
         -0.5090,  0.0410,  0.0974, -0.1061,  0.2464, -0.0352, -0.5724,  0.1247]],
       device='cuda:0') tensor(0.2108, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
609000 特征值优化 tensor(0.6979, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1264,  0.7117, -0.3901,  0.3697,  0.5066,  0.2566, -0.3297,  0.1837,
          0.1271,  0.0360, -0.4870,  0.7655, -0.1917,  0.0862, -0.0454,  0.0335,
          0.0949, -0.1371, -0.1778,  0.0154, -0.0884,  0.2474,  0.0298, -0.0249,
          0.0747, -0.2678,  0.1540,  0.0816, -0.0363, -0.1040, -0.0142, -0.1262,
          0.1020, -0.0165, -0.0538, -0.0495, -0.1886,  0.0344,  0.0600, -0.1201,
          0.0482,  0.2064,  0.0975,  0.3628, -0.1947, -0.2881, -0.2573, -0.0832,
         -0.4010,  0.6217, -0.0782,  0.0775,  0.2740,  0.1803, -0.0594,  0.1281,
         -0.4103, -0.0530,  0.0567, -0.3656,  0.0413,  0.1840, -0.3197,  0.0391,
         -0.7722,  0.0929,  0.1321, -0.0643,  0.0735,  0.0574, -0.4278,  0.0716]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
610000 特征值优化 tensor(0.6836, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1218,  0.7018, -0.4005,  0.3790,  0.5417,  0.2116, -0.3194,  0.2005,
          0.0574,  0.0309, -0.4672,  0.8346, -0.1897,  0.1118, -0.0698, -0.0176,
          0.1192, -0.1421, -0.1834,  0.0197, -0.0892,  0.2455,  0.0173, -0.0224,
          0.0737, -0.2683,  0.1633,  0.1167, -0.0340, -0.1087, -0.0139, -0.1133,
          0.0840, -0.0147, -0.0682, -0.0413, -0.1828,  0.0374,  0.0496, -0.0853,
          0.0458,  0.2066,  0.0997,  0.3363, -0.1672, -0.2836, -0.2593, -0.0749,
         -0.3850,  0.6112, -0.0883,  0.0809,  0.2884,  0.1551, -0.0635,  0.1163,
         -0.4223, -0.0302,  0.1132, -0.3861,  0.0479,  0.1908, -0.3210,  0.0472,
         -0.8551,  0.0903,  0.1369, -0.0254,  0.0582,  0.0522, -0.3802,  0.0604]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
611000 特征值优化 tensor(0.6812, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1186,  0.7021, -0.4092,  0.3653,  0.5618,  0.2435, -0.3682,  0.1887,
          0.0062,  0.0898, -0.4406,  0.8472, -0.1887,  0.1084, -0.0823, -0.0246,
          0.1245, -0.1474, -0.1756,  0.0501, -0.0892,  0.2453, -0.0540, -0.0363,
          0.0340, -0.3151,  0.1593,  0.1345, -0.0354, -0.1086, -0.0222, -0.0992,
          0.0886, -0.0151, -0.0767, -0.0353, -0.1815,  0.0395,  0.0532, -0.0681,
          0.0449,  0.1985,  0.0990,  0.3351, -0.1652, -0.2862, -0.2578, -0.0703,
         -0.3843,  0.6105, -0.0791,  0.0783,  0.3100,  0.1416, -0.0244,  0.1446,
         -0.4637, -0.0153,  0.1316, -0.3648,  0.0304,  0.2115, -0.3032,  0.0398,
         -0.8744,  0.0908,  0.0788, -0.0037,  0.0655,  0.0416, -0.3240,  0.0416]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
612000 特征值优化 tensor(0.6802, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1419,  0.7353, -0.4246,  0.3182,  0.6440,  0.2407, -0.3935,  0.1578,
          0.0157,  0.1247, -0.4162,  0.8605, -0.1904,  0.0755, -0.0546, -0.0607,
          0.1491, -0.1267, -0.1404,  0.0186, -0.0871,  0.2525, -0.0322, -0.0697,
          0.0420, -0.2599,  0.1728,  0.0589, -0.0466, -0.1032, -0.0180, -0.0824,
          0.0560, -0.0157, -0.0559, -0.0326, -0.1796,  0.0467,  0.0536, -0.0580,
          0.0489,  0.1941,  0.1552,  0.3194, -0.1982, -0.3489, -0.2273, -0.0914,
         -0.3463,  0.6406, -0.0796,  0.1064,  0.2729,  0.1187, -0.0304,  0.1209,
         -0.4054, -0.0468,  0.1386, -0.3688,  0.0482,  0.2025, -0.3124,  0.0568,
         -0.8740,  0.0772,  0.0682,  0.0024,  0.0377,  0.0636, -0.3758,  0.0881]],
       device='cuda:0') tensor(0.2033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
613000 特征值优化 tensor(0.6611, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1410,  0.7547, -0.4312,  0.3395,  0.6972,  0.2076, -0.4561,  0.1235,
          0.0410,  0.1162, -0.4289,  0.9158, -0.1910,  0.0312, -0.0339, -0.0446,
          0.1820, -0.1203, -0.1821,  0.0268, -0.0881,  0.2485,  0.0294, -0.0714,
          0.0863, -0.2675,  0.1441,  0.0981, -0.0425, -0.1046, -0.0190, -0.0823,
          0.0618, -0.0099, -0.0625, -0.0374, -0.1802,  0.0298,  0.0472, -0.0648,
          0.0466,  0.2063,  0.1650,  0.2823, -0.1698, -0.3580, -0.2260, -0.1025,
         -0.3602,  0.6595, -0.1063,  0.1148,  0.2833,  0.1144, -0.0251,  0.1239,
         -0.4119, -0.0427,  0.1850, -0.2395,  0.0868,  0.2058, -0.3144,  0.0429,
         -0.8580,  0.0854,  0.1025,  0.0124,  0.0153,  0.0645, -0.4081,  0.0830]],
       device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
614000 特征值优化 tensor(0.6623, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1337,  0.7517, -0.4461,  0.3246,  0.6837,  0.2192, -0.5003,  0.0813,
          0.0602,  0.1311, -0.3907,  0.8663, -0.1926,  0.0986,  0.0107, -0.0196,
          0.1650, -0.1554, -0.1404,  0.0285, -0.0897,  0.2488,  0.0093, -0.0395,
          0.0481, -0.2609,  0.1321,  0.1287, -0.0429, -0.1016, -0.0146, -0.0761,
          0.0391, -0.0059, -0.0567, -0.0425, -0.1768,  0.0458,  0.0548, -0.0558,
          0.0400,  0.2002,  0.1647,  0.2793, -0.1654, -0.3578, -0.2242, -0.0902,
         -0.3646,  0.6595, -0.0820,  0.1096,  0.2883,  0.0997, -0.0242,  0.1286,
         -0.3963, -0.0614,  0.1826, -0.2444,  0.0806,  0.2090, -0.3026,  0.0416,
         -0.8843,  0.0732,  0.1051, -0.0129, -0.0022,  0.0772, -0.3982,  0.1143]],
       device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
615000 特征值优化 tensor(0.6591, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1208,  0.7746, -0.4287,  0.3245,  0.6831,  0.0996, -0.4824,  0.0889,
          0.0615,  0.1204, -0.3873,  0.9323, -0.1897,  0.0553, -0.0676, -0.0708,
          0.1778, -0.1292, -0.2012,  0.0404, -0.0867,  0.2487,  0.1178, -0.0574,
          0.0884, -0.2565,  0.0970,  0.1146, -0.0431, -0.1044, -0.0178, -0.0657,
          0.0637, -0.0113, -0.0431, -0.0301, -0.1828,  0.0284,  0.0436, -0.0519,
          0.0520,  0.2107,  0.1560,  0.2821, -0.1634, -0.3683, -0.2221, -0.1075,
         -0.3584,  0.6604, -0.0962,  0.1140,  0.3025,  0.1003,  0.0062,  0.1539,
         -0.3368, -0.0503,  0.1738, -0.2436,  0.0936,  0.2135, -0.2971,  0.0482,
         -0.8772,  0.1007,  0.1286,  0.0146, -0.0143,  0.0692, -0.4172,  0.0763]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
616000 特征值优化 tensor(0.6596, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1355,  0.7614, -0.4302,  0.3150,  0.7018,  0.1895, -0.4987,  0.0660,
         -0.0071,  0.1814, -0.3840,  0.9210, -0.1925,  0.1203,  0.0251, -0.0296,
          0.1548, -0.1820, -0.1309,  0.0253, -0.0900,  0.2491,  0.1605,  0.0235,
          0.0536, -0.2556,  0.0451,  0.1412, -0.0432, -0.1054, -0.0165, -0.0656,
          0.0135, -0.0021, -0.0329, -0.0283, -0.1774,  0.0388,  0.0575, -0.0513,
          0.0451,  0.1969,  0.1637,  0.2798, -0.1646, -0.3571, -0.2256, -0.1050,
         -0.3585,  0.6601, -0.0901,  0.1098,  0.2986,  0.0901, -0.0682,  0.1392,
         -0.3749, -0.0718,  0.1658, -0.2321,  0.0809,  0.2127, -0.3186,  0.0493,
         -0.8799,  0.0836,  0.1046, -0.0122, -0.0069,  0.0798, -0.4023,  0.1047]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
617000 特征值优化 tensor(0.6596, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1381,  0.7580, -0.4258,  0.3194,  0.7061,  0.1602, -0.5085,  0.0598,
          0.0021,  0.2294, -0.3873,  0.9290, -0.1907,  0.0715, -0.0322, -0.0467,
          0.1660, -0.1269, -0.1802,  0.0251, -0.0885,  0.2493,  0.1995, -0.0219,
          0.0831, -0.2224,  0.0709,  0.1347, -0.0435, -0.1049, -0.0152, -0.0699,
          0.0347, -0.0129, -0.0144, -0.0221, -0.1817,  0.0331,  0.0497, -0.0369,
          0.0490,  0.2080,  0.1654,  0.2788, -0.1669, -0.3591, -0.2250, -0.1078,
         -0.3581,  0.6600, -0.0919,  0.1099,  0.2865,  0.1043, -0.0425,  0.1016,
         -0.3453, -0.0580,  0.1624, -0.2323,  0.1004,  0.2131, -0.2953,  0.0542,
         -0.8869,  0.0981,  0.0795,  0.0193, -0.0087,  0.0660, -0.4132,  0.0758]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
618000 特征值优化 tensor(0.6586, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1351,  0.7549, -0.4300,  0.3221,  0.6974,  0.2478, -0.4853,  0.0759,
         -0.0253,  0.2650, -0.3959,  0.8813, -0.1913,  0.0700, -0.0385, -0.0428,
          0.1600, -0.1267, -0.1807,  0.0256, -0.0886,  0.2490,  0.2555, -0.0470,
          0.1158, -0.1509,  0.1085,  0.1099, -0.0442, -0.1042, -0.0158, -0.0710,
          0.0401, -0.0125, -0.0072, -0.0188, -0.1821,  0.0292,  0.0538, -0.0277,
          0.0502,  0.2048,  0.1627,  0.2798, -0.1689, -0.3579, -0.2263, -0.1049,
         -0.3591,  0.6595, -0.0918,  0.1112,  0.2857,  0.1059, -0.0239,  0.1044,
         -0.3791, -0.0643,  0.1474, -0.2239,  0.1016,  0.2081, -0.3003,  0.0563,
         -0.8911,  0.1051,  0.0560,  0.0358, -0.0104,  0.0685, -0.3800,  0.0721]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
619000 特征值优化 tensor(0.6516, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1396,  0.7518, -0.4349,  0.3037,  0.6969,  0.2252, -0.4928,  0.0673,
         -0.0225,  0.3655, -0.3887,  0.9007, -0.1910,  0.0732, -0.0523, -0.0603,
          0.1714, -0.0988, -0.1801,  0.0256, -0.0884,  0.2468,  0.2301, -0.0964,
          0.1042, -0.1580,  0.1564,  0.0767, -0.0447, -0.1047, -0.0203, -0.0674,
          0.0515, -0.0059,  0.0136, -0.0156, -0.1808,  0.0299,  0.0344, -0.0499,
          0.0467,  0.2132,  0.1655,  0.2771, -0.1677, -0.3551, -0.2265, -0.1062,
         -0.3821,  0.6802, -0.0858,  0.1133,  0.2977,  0.1061,  0.0429,  0.1160,
         -0.3688, -0.0731,  0.0891, -0.1528,  0.1098,  0.2034, -0.3022,  0.0534,
         -0.8891,  0.1184,  0.0289,  0.0505, -0.0192,  0.0703, -0.4029,  0.0708]],
       device='cuda:0') tensor(0.2232, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
620000 特征值优化 tensor(0.6464, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1222,  0.7794, -0.4417,  0.2765,  0.6954,  0.2652, -0.5357, -0.0519,
         -0.0295,  0.3675, -0.3281,  0.8387, -0.1902,  0.0765, -0.0293, -0.0742,
          0.1587, -0.0949, -0.1881,  0.0280, -0.0878,  0.2482,  0.2732, -0.0203,
          0.0767, -0.1150,  0.1136,  0.0888, -0.0420, -0.1029, -0.0100, -0.0712,
          0.0153, -0.0102, -0.0223, -0.0200, -0.1478,  0.0580,  0.0573, -0.0043,
          0.0088,  0.1995,  0.1554,  0.3026, -0.1828, -0.3679, -0.2226, -0.1074,
         -0.3763,  0.6855, -0.0840,  0.1231,  0.2756,  0.1101,  0.1082,  0.0559,
         -0.3687, -0.0781,  0.0116,  0.0193,  0.1534,  0.1336, -0.3525,  0.0246,
         -0.9030,  0.1024,  0.0291,  0.0613, -0.0282,  0.1196, -0.3891,  0.0884]],
       device='cuda:0') tensor(0.2047, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
621000 特征值优化 tensor(0.6428, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1232,  0.7713, -0.4323,  0.2701,  0.7166,  0.2917, -0.4743,  0.0014,
         -0.0197,  0.4271, -0.4069,  0.8187, -0.1906,  0.0784, -0.0350, -0.1026,
          0.1903, -0.0421, -0.1648,  0.0261, -0.0876,  0.2486,  0.2716, -0.0348,
          0.1331, -0.1091,  0.1131,  0.0629, -0.0438, -0.1024, -0.0141, -0.0766,
          0.0323, -0.0132, -0.0426, -0.0141, -0.1664,  0.0486,  0.0450, -0.0274,
          0.0287,  0.2137,  0.1562,  0.3028, -0.1822, -0.3629, -0.2231, -0.1129,
         -0.3761,  0.6854, -0.0813,  0.1229,  0.2738,  0.1162,  0.1447,  0.0784,
         -0.3903, -0.0676,  0.0282,  0.0013,  0.1698,  0.1385, -0.3529,  0.0294,
         -0.9068,  0.1065, -0.0376,  0.1098, -0.0390,  0.1176, -0.3725,  0.0659]],
       device='cuda:0') tensor(0.2076, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
622000 特征值优化 tensor(0.6466, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1312,  0.7553, -0.4426,  0.2689,  0.7258,  0.2764, -0.4682, -0.0012,
         -0.0331,  0.3471, -0.4112,  0.8376, -0.1912,  0.1137,  0.0033, -0.0357,
          0.1660, -0.1342, -0.1494,  0.0343, -0.0884,  0.2486,  0.3055, -0.0126,
          0.0634, -0.1016,  0.0788,  0.1235, -0.0429, -0.1026, -0.0143, -0.0739,
          0.0148, -0.0096, -0.0292, -0.0273, -0.1545,  0.0512,  0.0763,  0.0225,
          0.0124,  0.1823,  0.1608,  0.3011, -0.1848, -0.3605, -0.2229, -0.1086,
         -0.3810,  0.6858, -0.0810,  0.1222,  0.2627,  0.1178,  0.0531,  0.1680,
         -0.3883, -0.0724,  0.0045, -0.0040,  0.1582,  0.1309, -0.3819,  0.0235,
         -0.8854,  0.0756,  0.0852,  0.0435, -0.0064,  0.1245, -0.4010,  0.1055]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
623000 特征值优化 tensor(0.6442, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1241,  0.7604, -0.4501,  0.2695,  0.7159,  0.2977, -0.4784, -0.0367,
         -0.0468,  0.3207, -0.3930,  0.8262, -0.1904,  0.1361,  0.0081, -0.0407,
          0.1621, -0.1442, -0.1471,  0.0296, -0.0883,  0.2482,  0.3127,  0.0343,
          0.0679, -0.0598,  0.0598,  0.1103, -0.0444, -0.1032, -0.0120, -0.0733,
          0.0115, -0.0111, -0.0059, -0.0232, -0.1451,  0.0523,  0.0819,  0.0333,
          0.0017,  0.1776,  0.1547,  0.3023, -0.1844, -0.3597, -0.2246, -0.1031,
         -0.3811,  0.6855, -0.0802,  0.1207,  0.2656,  0.1159,  0.0457,  0.1597,
         -0.4077, -0.0608, -0.0137,  0.0219,  0.1641,  0.1206, -0.3782,  0.0161,
         -0.8807,  0.0762,  0.1188,  0.0249, -0.0148,  0.1339, -0.3847,  0.0923]],
       device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
624000 特征值优化 tensor(0.6392, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1234,  0.7844, -0.4523,  0.2863,  0.6823,  0.3183, -0.5379, -0.0516,
         -0.0649,  0.4246, -0.3447,  0.8716, -0.1906,  0.0897, -0.0241, -0.1066,
          0.1813, -0.0466, -0.1721,  0.0265, -0.0887,  0.2489,  0.3037,  0.0658,
          0.0627, -0.0369,  0.0486, -0.0075, -0.0427, -0.1023, -0.0081, -0.0659,
          0.0171, -0.0111, -0.0530, -0.0281, -0.1569,  0.0497,  0.0898,  0.0363,
          0.0206,  0.1711,  0.1576,  0.3048, -0.1819, -0.3678, -0.2209, -0.1028,
         -0.3774,  0.6856, -0.0905,  0.1236,  0.2876,  0.1004,  0.1215,  0.0755,
         -0.4098, -0.0670, -0.0247, -0.0624,  0.1956,  0.1334, -0.3405,  0.0232,
         -0.8916,  0.0516,  0.0522, -0.0333, -0.0733,  0.1297, -0.3828,  0.1254]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
625000 特征值优化 tensor(0.6504, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1257,  0.7603, -0.4529,  0.2872,  0.7170,  0.2826, -0.5735, -0.0986,
         -0.0320,  0.3896, -0.2984,  0.8696, -0.1925,  0.1250, -0.0287, -0.0518,
          0.1396, -0.1179, -0.1564,  0.0292, -0.0893,  0.2482,  0.3078,  0.0693,
          0.0476, -0.0668,  0.0299,  0.0367, -0.0431, -0.1031, -0.0137, -0.0636,
          0.0025, -0.0153, -0.0120, -0.0251, -0.1369,  0.0556,  0.1006,  0.0403,
         -0.0032,  0.1670,  0.1550,  0.3047, -0.1862, -0.3642, -0.2250, -0.1038,
         -0.3810,  0.6881, -0.0881,  0.1204,  0.2672,  0.1114,  0.0733,  0.1129,
         -0.4039, -0.0560, -0.0216,  0.0243,  0.1893,  0.1163, -0.3567,  0.0148,
         -0.8937,  0.0869,  0.0735,  0.0387, -0.0486,  0.1445, -0.3866,  0.0896]],
       device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
626000 特征值优化 tensor(0.6430, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1205,  0.7775, -0.4433,  0.2852,  0.6790,  0.2805, -0.5578, -0.0840,
         -0.0127,  0.3370, -0.3152,  0.8226, -0.1912,  0.0887, -0.0303, -0.0705,
          0.1644, -0.0763, -0.2018,  0.0258, -0.0895,  0.2488,  0.3209,  0.0713,
          0.0600, -0.0359,  0.0542,  0.1057, -0.0411, -0.1022, -0.0095, -0.0615,
          0.0208, -0.0117, -0.0377, -0.0306, -0.1506,  0.0539,  0.0973,  0.0574,
          0.0132,  0.1640,  0.1561,  0.3051, -0.1819, -0.3625, -0.2212, -0.1072,
         -0.3753,  0.6859, -0.0914,  0.1246,  0.2944,  0.0940,  0.1174,  0.0730,
         -0.3866, -0.0695,  0.0291, -0.0233,  0.1948,  0.1265, -0.3344,  0.0166,
         -0.9034,  0.0798,  0.0928,  0.0151, -0.0847,  0.1394, -0.3887,  0.0998]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
627000 特征值优化 tensor(0.6422, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1262,  0.7748, -0.4517,  0.2857,  0.6893,  0.3171, -0.5702, -0.0914,
         -0.0538,  0.3639, -0.3087,  0.8270, -0.1909,  0.0919, -0.0387, -0.0731,
          0.1692, -0.0778, -0.1831,  0.0257, -0.0883,  0.2488,  0.3025,  0.0689,
          0.0677, -0.0754,  0.0352,  0.0836, -0.0424, -0.1024, -0.0080, -0.0656,
          0.0150, -0.0121, -0.0342, -0.0293, -0.1510,  0.0529,  0.0947,  0.0543,
          0.0132,  0.1698,  0.1592,  0.3034, -0.1831, -0.3647, -0.2228, -0.1031,
         -0.3762,  0.6847, -0.0895,  0.1226,  0.2799,  0.1032,  0.0922,  0.0612,
         -0.4157, -0.0605, -0.0485, -0.0455,  0.2108,  0.1224, -0.3348,  0.0201,
         -0.8795,  0.0683,  0.0702,  0.0035, -0.0836,  0.1367, -0.3848,  0.1035]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
628000 特征值优化 tensor(0.6404, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3471e-01,  7.5739e-01, -4.4814e-01,  2.8523e-01,  7.1717e-01,
          3.2422e-01, -5.4632e-01, -8.3827e-02, -8.4907e-02,  3.7916e-01,
         -3.3249e-01,  8.7590e-01, -1.9068e-01,  1.5089e-01, -7.1713e-03,
         -7.7781e-03,  1.6930e-01, -1.7016e-01, -1.1807e-01,  1.9361e-02,
         -8.8531e-02,  2.4886e-01,  3.1159e-01,  6.8772e-02,  1.3268e-01,
         -1.2097e-01,  2.6493e-02,  4.8058e-02, -4.2555e-02, -1.0262e-01,
         -1.2174e-02, -6.4524e-02,  3.1975e-03, -1.1262e-02,  1.6139e-02,
         -6.7037e-03, -1.3796e-01,  5.5889e-02,  9.5797e-02,  5.0367e-02,
          2.2133e-04,  1.6342e-01,  1.5923e-01,  2.9899e-01, -1.8267e-01,
         -3.5462e-01, -2.2612e-01, -1.0366e-01, -3.7802e-01,  6.8440e-01,
         -9.0529e-02,  1.2287e-01,  2.7171e-01,  1.0697e-01, -1.7290e-02,
          1.6672e-01, -4.0251e-01, -7.0390e-02, -4.3702e-03,  1.1548e-02,
          1.9115e-01,  1.1342e-01, -3.6835e-01,  1.2397e-02, -8.8229e-01,
          9.9119e-02,  9.2267e-02,  3.0886e-02, -5.1687e-02,  1.4660e-01,
         -4.0199e-01,  8.3599e-02]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
629000 特征值优化 tensor(0.6446, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3626e-01,  7.5366e-01, -4.4341e-01,  2.8008e-01,  7.0730e-01,
          3.2855e-01, -5.1665e-01, -6.6210e-02, -7.7647e-02,  3.3058e-01,
         -3.6283e-01,  8.3555e-01, -1.9112e-01,  1.4248e-01, -1.1401e-02,
         -3.0469e-02,  1.5857e-01, -1.4248e-01, -1.6684e-01,  3.0481e-02,
         -8.8528e-02,  2.4842e-01,  3.0231e-01,  4.7935e-02,  8.6170e-02,
         -9.6260e-02,  2.5579e-02,  8.0074e-02, -4.3641e-02, -1.0289e-01,
         -1.0737e-02, -7.0307e-02,  1.1353e-02, -1.0671e-02, -2.8931e-02,
         -2.5273e-02, -1.4330e-01,  4.9040e-02,  8.4793e-02,  2.9647e-02,
         -5.0569e-04,  1.7625e-01,  1.6209e-01,  3.0103e-01, -1.8306e-01,
         -3.5629e-01, -2.2374e-01, -1.0698e-01, -3.8050e-01,  6.8626e-01,
         -8.4407e-02,  1.2076e-01,  2.6675e-01,  1.1153e-01,  3.2087e-02,
          1.5243e-01, -4.3711e-01, -5.5695e-02,  3.8463e-02,  8.0677e-03,
          2.1392e-01,  1.1243e-01, -3.6877e-01,  1.1397e-02, -8.5080e-01,
          7.7917e-02,  1.2000e-01,  3.0111e-02, -5.9471e-02,  1.4207e-01,
         -3.8630e-01,  8.7154e-02]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
630000 特征值优化 tensor(0.6389, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1315,  0.7641, -0.4342,  0.2761,  0.7288,  0.3521, -0.5850, -0.1119,
         -0.0954,  0.4329, -0.3146,  0.8268, -0.1905,  0.1506, -0.0167, -0.0338,
          0.1695, -0.1488, -0.1538,  0.0268, -0.0883,  0.2466,  0.3106,  0.0200,
          0.0938, -0.1066,  0.0246,  0.0260, -0.0442, -0.0994, -0.0093, -0.0610,
         -0.0087, -0.0148, -0.0106, -0.0203, -0.1297,  0.0587,  0.0958,  0.0335,
         -0.0099,  0.1722,  0.1579,  0.3010, -0.1824, -0.3588, -0.2243, -0.1049,
         -0.3761,  0.6897, -0.0959,  0.1246,  0.2582,  0.1118, -0.0130,  0.1365,
         -0.4237, -0.0610,  0.0372,  0.0100,  0.2252,  0.0944, -0.3680,  0.0077,
         -0.8821,  0.0944,  0.0505,  0.0679, -0.0700,  0.1567, -0.3711,  0.0737]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
631000 特征值优化 tensor(0.6453, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1208,  0.7600, -0.4431,  0.2796,  0.7256,  0.2904, -0.5692, -0.1095,
         -0.0427,  0.3668, -0.3237,  0.8298, -0.1910,  0.1417, -0.0156, -0.0469,
          0.1466, -0.1420, -0.1662,  0.0327, -0.0891,  0.2484,  0.3109,  0.0425,
          0.0788, -0.1052,  0.0125,  0.0655, -0.0423, -0.1027, -0.0101, -0.0620,
         -0.0061, -0.0114, -0.0089, -0.0248, -0.1326,  0.0530,  0.0938,  0.0443,
         -0.0090,  0.1710,  0.1564,  0.3031, -0.1827, -0.3585, -0.2222, -0.1067,
         -0.3793,  0.6856, -0.0872,  0.1224,  0.2585,  0.1110,  0.0241,  0.1261,
         -0.3991, -0.0652,  0.0042, -0.0411,  0.2341,  0.0979, -0.3659,  0.0073,
         -0.8981,  0.0864,  0.0657,  0.0445, -0.0778,  0.1533, -0.3791,  0.0841]],
       device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
632000 特征值优化 tensor(0.6476, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1319,  0.7533, -0.4389,  0.2735,  0.7182,  0.3113, -0.5539, -0.1099,
         -0.0504,  0.3472, -0.3214,  0.7784, -0.1908,  0.1193, -0.0406, -0.0348,
          0.1326, -0.1402, -0.1618,  0.0267, -0.0884,  0.2485,  0.3039,  0.0271,
          0.0691, -0.0979,  0.0375,  0.1110, -0.0440, -0.1029, -0.0109, -0.0645,
          0.0031, -0.0154, -0.0418, -0.0265, -0.1324,  0.0512,  0.0925,  0.0383,
         -0.0082,  0.1745,  0.1602,  0.3003, -0.1845, -0.3569, -0.2251, -0.1087,
         -0.3803,  0.6863, -0.0818,  0.1201,  0.2626,  0.1112,  0.0343,  0.1336,
         -0.4073, -0.0598,  0.0389, -0.0195,  0.2282,  0.0967, -0.3581,  0.0061,
         -0.8819,  0.0742,  0.0737,  0.0482, -0.0791,  0.1606, -0.3580,  0.0843]],
       device='cuda:0') tensor(0.2058, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
633000 特征值优化 tensor(0.6401, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1185,  0.7874, -0.4464,  0.2852,  0.6939,  0.3195, -0.6065, -0.1366,
         -0.0176,  0.2980, -0.2591,  0.7892, -0.1911,  0.1008, -0.0467, -0.0883,
          0.1823, -0.0653, -0.1645,  0.0269, -0.0893,  0.2482,  0.3161,  0.0552,
          0.0575, -0.0419,  0.0542,  0.1360, -0.0402, -0.1037, -0.0102, -0.0628,
          0.0174, -0.0107, -0.0478, -0.0275, -0.1536,  0.0505,  0.0936,  0.0506,
          0.0168,  0.1661,  0.1550,  0.3064, -0.1809, -0.3684, -0.2192, -0.1076,
         -0.3763,  0.6859, -0.0952,  0.1238,  0.2860,  0.0997,  0.1039,  0.0678,
         -0.4257, -0.0590,  0.0314,  0.0030,  0.2453,  0.1269, -0.3120,  0.0162,
         -0.9025,  0.0756,  0.0978,  0.0175, -0.1322,  0.1372, -0.3458,  0.0941]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
634000 特征值优化 tensor(0.6417, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1074,  0.7906, -0.4481,  0.2783,  0.6991,  0.3161, -0.4946, -0.1077,
         -0.0784,  0.2669, -0.3706,  0.8941, -0.1922,  0.1011, -0.0574, -0.1182,
          0.1578, -0.1005, -0.1286,  0.0276, -0.0902,  0.2487,  0.3254,  0.0456,
          0.0622, -0.0217,  0.0732,  0.0830, -0.0441, -0.1026, -0.0125, -0.0501,
          0.0054, -0.0105, -0.0385, -0.0280, -0.1556,  0.0469,  0.0985,  0.0530,
          0.0178,  0.1636,  0.1507,  0.3101, -0.1771, -0.3666, -0.2185, -0.1047,
         -0.3769,  0.6846, -0.0829,  0.1215,  0.2893,  0.0981,  0.0926,  0.0769,
         -0.4149, -0.0647,  0.0347,  0.0058,  0.2297,  0.1112, -0.3245,  0.0095,
         -0.8521,  0.0639,  0.1723, -0.0165, -0.1190,  0.1557, -0.4302,  0.1135]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
635000 特征值优化 tensor(0.6440, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1230,  0.7708, -0.4464,  0.2808,  0.7065,  0.3224, -0.4622, -0.0432,
         -0.1056,  0.3163, -0.4197,  0.8607, -0.1902,  0.0792, -0.0408, -0.0647,
          0.1535, -0.1327, -0.1548,  0.0274, -0.0885,  0.2484,  0.3192,  0.0366,
          0.0531, -0.0261,  0.0556,  0.0836, -0.0435, -0.1026, -0.0085, -0.0659,
          0.0155, -0.0120, -0.0158, -0.0262, -0.1585,  0.0370,  0.0950,  0.0464,
          0.0190,  0.1712,  0.1553,  0.3031, -0.1823, -0.3618, -0.2225, -0.1053,
         -0.3770,  0.6842, -0.0852,  0.1218,  0.2722,  0.1096,  0.0874,  0.0625,
         -0.4101, -0.0663, -0.0059, -0.0144,  0.2334,  0.1119, -0.3405,  0.0219,
         -0.8507,  0.0663,  0.1475,  0.0011, -0.0995,  0.1433, -0.4288,  0.1067]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
636000 特征值优化 tensor(0.6438, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1212,  0.7673, -0.4443,  0.2833,  0.6938,  0.3162, -0.4380, -0.0057,
         -0.0918,  0.3272, -0.4529,  0.8709, -0.1909,  0.0771, -0.0266, -0.0612,
          0.1601, -0.1232, -0.1635,  0.0287, -0.0891,  0.2492,  0.3243,  0.0625,
          0.0388, -0.0376,  0.0523,  0.0833, -0.0427, -0.1023, -0.0072, -0.0650,
          0.0185, -0.0107, -0.0142, -0.0276, -0.1659,  0.0272,  0.0931,  0.0452,
          0.0264,  0.1681,  0.1553,  0.3029, -0.1824, -0.3597, -0.2230, -0.1058,
         -0.3767,  0.6843, -0.0903,  0.1244,  0.2746,  0.1064,  0.0875,  0.0815,
         -0.4007, -0.0742, -0.0067, -0.0197,  0.2417,  0.1193, -0.3406,  0.0288,
         -0.8622,  0.0741,  0.1422,  0.0045, -0.1055,  0.1361, -0.4267,  0.1091]],
       device='cuda:0') tensor(0.2028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
637000 特征值优化 tensor(0.6485, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1242,  0.7622, -0.4501,  0.2804,  0.7288,  0.3215, -0.4746, -0.0413,
         -0.1138,  0.3160, -0.4129,  0.8710, -0.1915,  0.1102, -0.0143, -0.0275,
          0.1417, -0.1487, -0.1586,  0.0317, -0.0889,  0.2478,  0.3054,  0.0524,
          0.0306, -0.0467,  0.0446,  0.0824, -0.0452, -0.1031, -0.0119, -0.0689,
          0.0110, -0.0127,  0.0032, -0.0209, -0.1557,  0.0369,  0.0916,  0.0440,
          0.0169,  0.1726,  0.1563,  0.3026, -0.1846, -0.3614, -0.2223, -0.1029,
         -0.3778,  0.6830, -0.0840,  0.1204,  0.2576,  0.1199,  0.0453,  0.1274,
         -0.4047, -0.0684, -0.0208,  0.0084,  0.2525,  0.1097, -0.3550,  0.0207,
         -0.8368,  0.0712,  0.1399,  0.0135, -0.1037,  0.1403, -0.4354,  0.1024]],
       device='cuda:0') tensor(0.2057, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
638000 特征值优化 tensor(0.6425, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1268,  0.7550, -0.4444,  0.2681,  0.7226,  0.3253, -0.5364, -0.1040,
         -0.1028,  0.3259, -0.3461,  0.8618, -0.1916,  0.1390, -0.0206, -0.0223,
          0.1424, -0.1620, -0.1570,  0.0236, -0.0896,  0.2451,  0.3166,  0.0424,
          0.0351, -0.0666,  0.0266,  0.0967, -0.0445, -0.1005, -0.0100, -0.0644,
          0.0034, -0.0130,  0.0181, -0.0152, -0.1402,  0.0474,  0.0896,  0.0277,
         -0.0017,  0.1798,  0.1568,  0.3017, -0.1822, -0.3532, -0.2261, -0.1028,
         -0.3774,  0.6868, -0.0950,  0.1221,  0.2596,  0.1128,  0.0098,  0.1466,
         -0.4022, -0.0701, -0.0070, -0.0156,  0.2554,  0.0988, -0.3488,  0.0068,
         -0.8642,  0.0753,  0.1409,  0.0211, -0.1002,  0.1544, -0.4180,  0.0992]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
639000 特征值优化 tensor(0.6491, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3436e-01,  7.5640e-01, -4.3687e-01,  2.6922e-01,  7.2203e-01,
          3.1923e-01, -5.6865e-01, -1.4243e-01, -1.0403e-01,  3.3609e-01,
         -3.0721e-01,  8.6062e-01, -1.9018e-01,  9.4148e-02, -3.5816e-02,
         -4.5239e-02,  1.2088e-01, -1.2353e-01, -1.7895e-01,  3.0404e-02,
         -8.7738e-02,  2.4772e-01,  3.0106e-01,  4.4986e-02,  5.3282e-02,
         -6.9164e-02,  4.9659e-02,  7.7998e-02, -4.3888e-02, -1.0233e-01,
         -1.3046e-02, -5.7719e-02,  6.1596e-03, -1.0855e-02, -7.7939e-04,
         -2.8721e-02, -1.3572e-01,  4.7657e-02,  9.2687e-02,  4.9665e-02,
         -7.5460e-04,  1.7098e-01,  1.5926e-01,  2.9977e-01, -1.8261e-01,
         -3.5756e-01, -2.2584e-01, -1.0876e-01, -3.7926e-01,  6.8716e-01,
         -7.9194e-02,  1.2030e-01,  2.6994e-01,  1.0972e-01,  2.9327e-02,
          6.4725e-02, -4.0605e-01, -7.2031e-02,  1.3812e-02, -2.5947e-04,
          2.6230e-01,  9.2763e-02, -3.2660e-01,  4.4749e-03, -8.4933e-01,
          7.8045e-02,  1.0797e-01,  1.1541e-02, -1.3173e-01,  1.6634e-01,
         -4.1902e-01,  1.0067e-01]], device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
640000 特征值优化 tensor(0.6427, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1254,  0.7605, -0.4536,  0.2852,  0.7250,  0.3229, -0.5517, -0.1233,
         -0.1170,  0.3224, -0.3453,  0.8742, -0.1910,  0.1324, -0.0298, -0.0248,
          0.1445, -0.1642, -0.1696,  0.0249, -0.0890,  0.2485,  0.3039,  0.0536,
         -0.0055, -0.1071,  0.0083,  0.1147, -0.0423, -0.1023, -0.0089, -0.0591,
         -0.0097, -0.0116,  0.0235, -0.0162, -0.1372,  0.0455,  0.0888,  0.0318,
         -0.0027,  0.1758,  0.1561,  0.3016, -0.1826, -0.3564, -0.2243, -0.1005,
         -0.3781,  0.6840, -0.0911,  0.1227,  0.2591,  0.1111, -0.0307,  0.1386,
         -0.4047, -0.0691,  0.0259, -0.0112,  0.2697,  0.0979, -0.3481,  0.0039,
         -0.8554,  0.0658,  0.1313,  0.0234, -0.1183,  0.1523, -0.4122,  0.1005]],
       device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
641000 特征值优化 tensor(0.6439, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3241e-01,  7.6371e-01, -4.5640e-01,  2.8301e-01,  7.1678e-01,
          3.1998e-01, -5.4966e-01, -1.2927e-01, -1.3349e-01,  2.9089e-01,
         -3.3807e-01,  8.8197e-01, -1.8990e-01,  1.4585e-01, -2.3131e-02,
         -2.0855e-02,  1.4943e-01, -1.6430e-01, -1.5875e-01,  2.8285e-02,
         -8.7654e-02,  2.4892e-01,  2.9651e-01,  7.3341e-02, -1.0361e-02,
         -8.3707e-02,  1.4707e-02,  9.2119e-02, -4.4296e-02, -1.0257e-01,
         -8.8827e-03, -6.7579e-02,  4.6791e-03, -1.2075e-02,  1.1303e-02,
         -1.8203e-02, -1.3485e-01,  4.6483e-02,  9.7162e-02,  4.9411e-02,
         -6.4878e-03,  1.6815e-01,  1.5798e-01,  3.0047e-01, -1.8209e-01,
         -3.5914e-01, -2.2515e-01, -9.9355e-02, -3.7737e-01,  6.8362e-01,
         -8.5646e-02,  1.2106e-01,  2.6265e-01,  1.1234e-01, -1.2342e-02,
          1.3946e-01, -4.0994e-01, -6.5936e-02,  7.4844e-03,  7.5159e-03,
          2.7598e-01,  9.3723e-02, -3.4136e-01, -7.1548e-04, -8.3092e-01,
          7.5294e-02,  1.5008e-01,  2.0070e-02, -1.2032e-01,  1.5606e-01,
         -4.3402e-01,  9.4227e-02]], device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
642000 特征值优化 tensor(0.6409, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3134e-01,  7.7129e-01, -4.4629e-01,  2.8449e-01,  7.2493e-01,
          3.1964e-01, -6.0963e-01, -1.5729e-01, -1.4034e-01,  3.2084e-01,
         -2.9501e-01,  8.7155e-01, -1.9034e-01,  1.4766e-01, -3.5154e-02,
         -8.3377e-03,  1.5982e-01, -1.9903e-01, -1.4174e-01,  2.6247e-02,
         -8.7947e-02,  2.4875e-01,  2.8953e-01,  2.6479e-02,  1.0201e-01,
         -9.9672e-02,  2.3407e-02,  7.4492e-02, -4.4248e-02, -1.0240e-01,
         -1.3551e-02, -5.1064e-02, -1.0449e-02, -1.1854e-02,  8.3374e-03,
         -1.2619e-02, -1.3539e-01,  5.2752e-02,  9.9630e-02,  4.9417e-02,
         -5.4630e-04,  1.6298e-01,  1.5920e-01,  3.0164e-01, -1.8266e-01,
         -3.6325e-01, -2.2332e-01, -1.0486e-01, -3.7681e-01,  6.8445e-01,
         -8.6052e-02,  1.2152e-01,  2.7652e-01,  1.0104e-01, -6.6197e-02,
          1.4752e-01, -4.0284e-01, -7.0356e-02, -1.8415e-02,  3.4088e-02,
          2.6491e-01,  1.0100e-01, -3.3383e-01,  3.7313e-03, -8.3534e-01,
          8.7918e-02,  1.4175e-01,  2.7337e-02, -1.3336e-01,  1.5911e-01,
         -4.1629e-01,  8.5684e-02]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
643000 特征值优化 tensor(0.6413, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1153,  0.7837, -0.4483,  0.2872,  0.6834,  0.3217, -0.5310, -0.1077,
         -0.0891,  0.2623, -0.3416,  0.8992, -0.1910,  0.0944, -0.0358, -0.0601,
          0.1655, -0.0890, -0.1876,  0.0284, -0.0891,  0.2490,  0.3110,  0.0729,
          0.0462, -0.0289,  0.0534,  0.0781, -0.0425, -0.1021, -0.0092, -0.0561,
          0.0191, -0.0115, -0.0417, -0.0338, -0.1635,  0.0348,  0.0910,  0.0451,
          0.0261,  0.1761,  0.1526,  0.3068, -0.1786, -0.3662, -0.2200, -0.1035,
         -0.3769,  0.6838, -0.0918,  0.1237,  0.2930,  0.0939,  0.1208,  0.0835,
         -0.4187, -0.0615, -0.0200, -0.0489,  0.2850,  0.1174, -0.2960,  0.0105,
         -0.8193,  0.0487,  0.1924, -0.0275, -0.1713,  0.1504, -0.4634,  0.1228]],
       device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
644000 特征值优化 tensor(0.6531, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1177,  0.7590, -0.4517,  0.2854,  0.7058,  0.2946, -0.5241, -0.0897,
         -0.1351,  0.2635, -0.3564,  0.9459, -0.1913,  0.1135, -0.0209, -0.0259,
          0.1268, -0.1424, -0.1601,  0.0283, -0.0883,  0.2482,  0.3010,  0.0907,
          0.0177, -0.0297,  0.0530,  0.0229, -0.0419, -0.1028, -0.0161, -0.0600,
          0.0203, -0.0098,  0.0027, -0.0197, -0.1605,  0.0264,  0.0718,  0.0190,
          0.0213,  0.1805,  0.1491,  0.3077, -0.1826, -0.3594, -0.2229, -0.1055,
         -0.3796,  0.6883, -0.0898,  0.1211,  0.2843,  0.1054,  0.0820,  0.1378,
         -0.4031, -0.0634,  0.0286, -0.0203,  0.2562,  0.1279, -0.2963,  0.0308,
         -0.7677,  0.0438,  0.2277, -0.0100, -0.1377,  0.1297, -0.4920,  0.1228]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
645000 特征值优化 tensor(0.6741, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1301,  0.7463, -0.4540,  0.2851,  0.7179,  0.3099, -0.5456, -0.1085,
         -0.1004,  0.2669, -0.3175,  0.8893, -0.1925,  0.1426, -0.0122, -0.0034,
          0.1427, -0.1854, -0.1157,  0.0238, -0.0870,  0.2469,  0.2976,  0.0780,
          0.0106, -0.1002,  0.0789, -0.0754, -0.0439, -0.1040, -0.0164, -0.0623,
          0.0150, -0.0138,  0.0095, -0.0219, -0.1543,  0.0316,  0.0855,  0.0308,
          0.0217,  0.1779,  0.1651,  0.3008, -0.1820, -0.3541, -0.2208, -0.1030,
         -0.3827,  0.6858, -0.0951,  0.1217,  0.2588,  0.1117, -0.0376,  0.1711,
         -0.4006, -0.0655, -0.0417,  0.0334,  0.2598,  0.1208, -0.3168,  0.0249,
         -0.8047,  0.0578,  0.2063, -0.0058, -0.1305,  0.1373, -0.4665,  0.1203]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
646000 特征值优化 tensor(0.6531, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1315,  0.7554, -0.4409,  0.2609,  0.7184,  0.3210, -0.5453, -0.1486,
         -0.0841,  0.3103, -0.3322,  0.8560, -0.1920,  0.1035, -0.0417, -0.0350,
          0.1107, -0.1321, -0.1687,  0.0255, -0.0886,  0.2495,  0.2906,  0.0804,
          0.0149, -0.0916,  0.0563, -0.0747, -0.0426, -0.1037, -0.0132, -0.0590,
          0.0079, -0.0104, -0.0133, -0.0280, -0.1394,  0.0424,  0.0751,  0.0246,
         -0.0040,  0.1818,  0.1530,  0.3023, -0.1833, -0.3581, -0.2263, -0.1093,
         -0.3786,  0.6880, -0.0778,  0.1225,  0.2670,  0.1125, -0.0134,  0.0753,
         -0.4203, -0.0620,  0.0160, -0.0040,  0.2879,  0.0918, -0.3069, -0.0019,
         -0.8298,  0.0680,  0.1573,  0.0132, -0.1447,  0.1633, -0.4185,  0.0988]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
647000 特征值优化 tensor(0.6472, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3090e-01,  7.5537e-01, -4.5490e-01,  2.7592e-01,  6.9929e-01,
          3.1677e-01, -4.6085e-01, -8.3683e-02, -1.1430e-01,  2.8749e-01,
         -4.0130e-01,  8.8559e-01, -1.9110e-01,  1.1961e-01, -2.6788e-02,
         -2.1353e-02,  1.0686e-01, -1.5372e-01, -1.8003e-01,  2.3437e-02,
         -8.8653e-02,  2.4835e-01,  2.9859e-01,  7.5213e-02, -2.1947e-02,
         -9.1804e-02,  7.0784e-02, -7.0308e-02, -4.3557e-02, -1.0336e-01,
         -9.7003e-03, -6.7987e-02,  1.7051e-02, -1.1808e-02, -8.3125e-03,
         -2.8485e-02, -1.4607e-01,  3.0698e-02,  7.3404e-02,  2.2523e-02,
          2.9430e-03,  1.9085e-01,  1.5808e-01,  3.0136e-01, -1.8278e-01,
         -3.5544e-01, -2.2556e-01, -9.9564e-02, -3.7987e-01,  6.8553e-01,
         -8.3902e-02,  1.1958e-01,  2.7127e-01,  1.0741e-01,  3.1220e-02,
          1.3763e-01, -4.1337e-01, -6.6196e-02,  5.2128e-02,  2.6215e-02,
          2.9016e-01,  9.8249e-02, -3.2290e-01, -5.4175e-04, -8.0091e-01,
          6.7427e-02,  1.8899e-01,  6.1506e-03, -1.4774e-01,  1.5660e-01,
         -4.6750e-01,  1.0478e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
648000 特征值优化 tensor(0.6495, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1249,  0.7584, -0.4441,  0.2681,  0.6961,  0.3231, -0.4656, -0.0606,
         -0.0945,  0.3162, -0.4132,  0.8812, -0.1921,  0.1305, -0.0192, -0.0295,
          0.1305, -0.1276, -0.1693,  0.0312, -0.0884,  0.2487,  0.2974,  0.0752,
          0.0062, -0.0539,  0.0592, -0.0567, -0.0448, -0.1035, -0.0106, -0.0655,
          0.0198, -0.0116, -0.0087, -0.0280, -0.1567,  0.0273,  0.0763,  0.0224,
          0.0120,  0.1880,  0.1529,  0.3046, -0.1828, -0.3642, -0.2239, -0.1076,
         -0.3802,  0.6871, -0.0754,  0.1179,  0.2732,  0.1122,  0.0550,  0.1279,
         -0.4101, -0.0664,  0.0098, -0.0238,  0.3049,  0.0999, -0.3146,  0.0062,
         -0.8178,  0.0692,  0.1643,  0.0097, -0.1591,  0.1537, -0.4594,  0.1086]],
       device='cuda:0') tensor(0.2071, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
649000 特征值优化 tensor(0.6419, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1239,  0.7788, -0.4462,  0.2698,  0.6941,  0.3199, -0.4876, -0.1011,
         -0.0758,  0.3085, -0.3992,  0.8794, -0.1908,  0.0979, -0.0442, -0.0751,
          0.1565, -0.0746, -0.1899,  0.0268, -0.0886,  0.2487,  0.3355,  0.0572,
          0.0577,  0.0088,  0.0942, -0.0799, -0.0428, -0.1030, -0.0125, -0.0615,
          0.0340, -0.0114, -0.0374, -0.0357, -0.1635,  0.0252,  0.0656,  0.0112,
          0.0232,  0.1955,  0.1564,  0.3047, -0.1813, -0.3661, -0.2208, -0.1042,
         -0.3776,  0.6839, -0.0820,  0.1221,  0.2872,  0.1021,  0.1056,  0.0981,
         -0.4077, -0.0681,  0.0139,  0.0055,  0.3088,  0.1117, -0.2776,  0.0066,
         -0.8307,  0.0595,  0.1785, -0.0119, -0.1853,  0.1490, -0.4591,  0.1163]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
650000 特征值优化 tensor(0.6410, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1178,  0.7799, -0.4482,  0.2731,  0.6836,  0.2876, -0.5011, -0.0945,
         -0.0690,  0.2877, -0.3990,  0.9107, -0.1907,  0.0895, -0.0279, -0.0562,
          0.1590, -0.0845, -0.1944,  0.0278, -0.0882,  0.2488,  0.3436,  0.0551,
          0.0573,  0.0276,  0.0933, -0.0633, -0.0433, -0.1022, -0.0095, -0.0630,
          0.0296, -0.0114, -0.0416, -0.0393, -0.1643,  0.0219,  0.0667,  0.0119,
          0.0241,  0.1963,  0.1537,  0.3054, -0.1802, -0.3682, -0.2198, -0.1036,
         -0.3775,  0.6834, -0.0834,  0.1216,  0.2859,  0.0999,  0.1149,  0.0915,
         -0.4028, -0.0605,  0.0114, -0.0046,  0.3171,  0.1141, -0.2764,  0.0111,
         -0.8162,  0.0482,  0.1955, -0.0148, -0.1865,  0.1458, -0.4777,  0.1210]],
       device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
651000 特征值优化 tensor(0.6449, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2764e-01,  7.7011e-01, -4.5445e-01,  2.7911e-01,  7.0591e-01,
          3.2256e-01, -5.3813e-01, -1.4645e-01, -1.1829e-01,  3.4347e-01,
         -3.4747e-01,  8.7302e-01, -1.9020e-01,  9.2087e-02, -4.3128e-02,
         -2.7192e-02,  1.3834e-01, -1.0781e-01, -2.0186e-01,  2.5794e-02,
         -8.8239e-02,  2.4894e-01,  2.9214e-01,  8.8953e-02, -4.8131e-02,
          1.4160e-02,  8.7198e-02, -3.9237e-02, -4.2530e-02, -1.0247e-01,
         -1.3317e-02, -6.1946e-02,  3.1473e-02, -1.2049e-02, -1.8090e-02,
         -3.0348e-02, -1.5188e-01,  3.3669e-02,  8.5531e-02,  3.0476e-02,
          1.3002e-02,  1.8103e-01,  1.5830e-01,  3.0217e-01, -1.8306e-01,
         -3.6287e-01, -2.2251e-01, -1.0138e-01, -3.7712e-01,  6.8375e-01,
         -8.7335e-02,  1.2276e-01,  2.8751e-01,  1.0051e-01,  6.4236e-02,
          5.9938e-02, -4.1268e-01, -6.4053e-02,  2.3078e-03,  2.1175e-02,
          3.0237e-01,  1.0488e-01, -2.7480e-01,  1.2224e-03, -8.2252e-01,
          5.7384e-02,  1.4400e-01,  1.2803e-04, -1.8384e-01,  1.5893e-01,
         -4.4639e-01,  1.1000e-01]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
652000 特征值优化 tensor(0.6417, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1274,  0.7548, -0.4461,  0.2744,  0.7359,  0.3209, -0.5630, -0.1717,
         -0.1099,  0.3024, -0.3324,  0.8921, -0.1914,  0.1491, -0.0089, -0.0074,
          0.1237, -0.1751, -0.1351,  0.0219, -0.0896,  0.2461,  0.3192,  0.0901,
         -0.0452, -0.0106,  0.0968, -0.0958, -0.0437, -0.1014, -0.0115, -0.0622,
          0.0023, -0.0115,  0.0213, -0.0093, -0.1429,  0.0450,  0.0745,  0.0145,
          0.0018,  0.1875,  0.1564,  0.3005, -0.1827, -0.3529, -0.2261, -0.1036,
         -0.3792,  0.6855, -0.0885,  0.1211,  0.2593,  0.1122, -0.0486,  0.1466,
         -0.3965, -0.0729, -0.0409, -0.0254,  0.3144,  0.0935, -0.3096, -0.0020,
         -0.8143,  0.0621,  0.2177, -0.0079, -0.1600,  0.1620, -0.4713,  0.1187]],
       device='cuda:0') tensor(0.2035, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
653000 特征值优化 tensor(0.6453, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1241,  0.7596, -0.4492,  0.2750,  0.7270,  0.3184, -0.5402, -0.1411,
         -0.1132,  0.2969, -0.3412,  0.8662, -0.1916,  0.1220, -0.0312, -0.0151,
          0.1131, -0.1659, -0.1765,  0.0289, -0.0895,  0.2482,  0.3111,  0.0759,
         -0.0574, -0.0051,  0.0983, -0.0644, -0.0423, -0.1026, -0.0123, -0.0617,
          0.0063, -0.0104,  0.0164, -0.0204, -0.1498,  0.0316,  0.0821,  0.0321,
          0.0084,  0.1799,  0.1564,  0.3026, -0.1828, -0.3571, -0.2239, -0.1055,
         -0.3804,  0.6864, -0.0826,  0.1213,  0.2638,  0.1108,  0.0143,  0.1338,
         -0.4058, -0.0700, -0.0135, -0.0473,  0.3216,  0.1065, -0.3017,  0.0050,
         -0.8058,  0.0582,  0.2012, -0.0072, -0.1735,  0.1468, -0.4649,  0.1183]],
       device='cuda:0') tensor(0.2086, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
654000 特征值优化 tensor(0.6402, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1384,  0.7641, -0.4444,  0.2743,  0.7119,  0.3158, -0.4859, -0.1198,
         -0.0504,  0.2929, -0.4320,  0.8398, -0.1892,  0.1369, -0.0267,  0.0117,
          0.1019, -0.1942, -0.1869,  0.0433, -0.0869,  0.2486,  0.3154,  0.0558,
         -0.0833,  0.0192,  0.1113, -0.0750, -0.0431, -0.1026, -0.0090, -0.0657,
          0.0084, -0.0109,  0.0464, -0.0035, -0.1480,  0.0320,  0.0735,  0.0214,
          0.0070,  0.1908,  0.1645,  0.3036, -0.1824, -0.3638, -0.2195, -0.1048,
         -0.3788,  0.6842, -0.0839,  0.1228,  0.2686,  0.1051, -0.0581,  0.1440,
         -0.4022, -0.0715,  0.0419,  0.0544,  0.3080,  0.1072, -0.3177,  0.0012,
         -0.8392,  0.0705,  0.1945, -0.0073, -0.1514,  0.1452, -0.4489,  0.1086]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
655000 特征值优化 tensor(0.6394, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1331,  0.7685, -0.4545,  0.2793,  0.7302,  0.3180, -0.4996, -0.0643,
         -0.0405,  0.3248, -0.4003,  0.8438, -0.1903,  0.1576,  0.0053,  0.0063,
          0.1662, -0.2201, -0.1096,  0.0256, -0.0883,  0.2485,  0.3205,  0.0495,
         -0.0773, -0.0342,  0.0738, -0.0704, -0.0423, -0.1031, -0.0132, -0.0523,
         -0.0078, -0.0118,  0.0511, -0.0064, -0.1695,  0.0261,  0.0809,  0.0271,
          0.0315,  0.1826,  0.1593,  0.3011, -0.1830, -0.3611, -0.2240, -0.1010,
         -0.3777,  0.6839, -0.0871,  0.1226,  0.2739,  0.1013, -0.0651,  0.1637,
         -0.4157, -0.0640, -0.1057, -0.0341,  0.2944,  0.1224, -0.3202,  0.0273,
         -0.8586,  0.0792,  0.1372,  0.0276, -0.1595,  0.1403, -0.4189,  0.0923]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
656000 特征值优化 tensor(0.6441, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1296,  0.7701, -0.4542,  0.2791,  0.7105,  0.3229, -0.5107, -0.1189,
         -0.0442,  0.3375, -0.3771,  0.8235, -0.1911,  0.0903, -0.0342, -0.0357,
          0.1412, -0.1172, -0.1831,  0.0246, -0.0878,  0.2485,  0.2943,  0.0849,
         -0.0312,  0.0272,  0.1166, -0.0758, -0.0428, -0.1027, -0.0105, -0.0644,
          0.0200, -0.0113,  0.0246, -0.0176, -0.1538,  0.0259,  0.0780,  0.0260,
          0.0151,  0.1877,  0.1595,  0.3024, -0.1830, -0.3645, -0.2233, -0.1006,
         -0.3778,  0.6839, -0.0857,  0.1220,  0.2698,  0.1111,  0.0581,  0.0343,
         -0.4186, -0.0627,  0.0122, -0.0117,  0.3259,  0.1019, -0.2845,  0.0063,
         -0.8546,  0.0671,  0.1430,  0.0036, -0.1840,  0.1516, -0.4181,  0.1020]],
       device='cuda:0') tensor(0.2038, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
657000 特征值优化 tensor(13.9128, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.8650, -0.1987, -1.6008, -0.1439, -0.2677,  0.2188,  1.7826, -0.6416,
          0.3691, -0.4254, -1.2396,  0.9114,  0.2533,  0.0481,  0.5230, -0.1213,
         -1.4132, -0.1523,  0.0376,  1.3962,  0.9133,  0.1018,  0.4211, -0.5287,
          0.7237,  0.2957,  0.1780, -0.4762,  0.6590,  0.4321,  0.8309, -0.0506,
          0.1634, -0.1360,  0.0751, -0.1501,  0.5233,  0.2090, -0.1312, -0.4731,
          0.0368,  0.8592,  0.6569, -0.1756, -1.7015,  1.0138, -0.0540, -0.6536,
          1.4490, -0.0332,  0.0988, -0.0381, -0.6049,  1.7536,  0.0624,  0.0499,
          0.5228, -0.2049,  1.6089, -0.0282, -0.2956, -0.0526, -0.6355, -0.1045,
         -0.4452,  0.7318, -0.4684, -2.1708, -0.2948, -0.0570, -1.0796,  0.1185]],
       device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
658000 特征值优化 tensor(2.6985, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.2521e+00, -5.8269e-01, -7.7442e-01, -1.2944e-01,  2.9923e-01,
          1.1922e+00,  1.3612e+00, -1.4878e-01, -2.9880e-01, -3.2842e-01,
         -5.8029e-01,  3.6494e-01,  9.7884e-02, -1.8417e-02,  6.0503e-02,
          2.7298e-02, -3.9492e-01, -2.0286e-02,  1.3920e-02,  3.6519e-01,
          2.9207e-01, -5.1299e-02,  1.9369e-02, -1.6783e-02,  1.2955e-01,
         -3.9841e-04, -2.7178e-02, -1.4640e-02,  1.7537e-01,  1.1525e-01,
          2.2702e-01,  4.0838e-02, -1.4954e-02, -8.2166e-02,  4.3224e-02,
         -2.0373e-02, -2.3419e-02,  3.0281e-03,  5.0254e-02,  2.9079e-02,
         -1.2101e-02,  6.4610e-02,  1.9657e-01,  4.4410e-01, -1.0455e+00,
          3.9970e-01,  2.4470e-02, -2.8690e-02,  9.1792e-01, -4.1530e-01,
         -7.2848e-03, -2.9745e-02, -5.5312e-01,  6.9132e-01,  1.7016e-01,
         -1.2848e-02, -4.1872e-01,  1.8748e-01,  6.4085e-01, -7.8611e-02,
         -3.8671e-01,  2.3042e-01, -8.1042e-02, -1.9716e-02,  7.1322e-02,
          8.3152e-02,  2.2743e-01, -9.6953e-01,  8.6225e-02, -7.5851e-02,
         -3.2588e-01,  1.2723e-01]], device='cuda:0') tensor(0.2093, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
659000 特征值优化 tensor(0.7564, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.8774e-01, -5.1610e-01, -3.6996e-01, -1.6944e-01,  3.5233e-01,
          1.3068e+00,  1.3487e+00, -1.3862e-01, -8.0879e-01, -3.6313e-01,
         -4.4433e-01,  1.8622e-01,  1.1358e-01, -1.9388e-01,  1.6432e-01,
         -4.2360e-02, -1.0897e-01, -2.1472e-02,  1.3294e-01,  1.0677e-01,
          2.2031e-01, -6.3850e-02,  4.1296e-02,  3.0823e-02,  4.5294e-02,
          2.2543e-02, -2.8645e-03, -5.6575e-02,  1.0860e-01,  1.2533e-01,
          1.8187e-01,  6.3597e-03,  4.7707e-02, -1.1190e-01, -4.0349e-02,
          6.5620e-02, -5.2049e-02, -1.1114e-02,  1.9932e-03,  5.7717e-03,
          1.0677e-03,  9.0368e-02, -1.0134e-02,  4.7956e-01, -7.2839e-01,
          4.1462e-01, -2.6214e-03, -4.1502e-02,  5.3203e-01, -1.8625e-01,
         -4.6627e-02, -2.4471e-02, -5.0593e-01,  3.5488e-01,  1.7024e-01,
         -4.1021e-03, -3.4787e-01,  8.7199e-02,  2.5868e-01, -6.7032e-02,
         -3.1899e-01,  1.9003e-01, -2.0400e-01, -4.9530e-02,  6.5630e-01,
          1.5672e-01,  8.8792e-02, -4.1437e-01, -6.0856e-02,  1.1008e-02,
         -5.2754e-01,  6.2455e-02]], device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
660000 特征值优化 tensor(0.7210, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.0116e-01, -5.1429e-01, -3.0266e-01, -1.7394e-01,  3.3504e-01,
          1.2593e+00,  1.4446e+00, -1.4100e-01, -8.2462e-01, -3.6504e-01,
         -4.7781e-01,  1.7377e-01,  1.1889e-01, -2.1150e-01,  1.5136e-01,
         -2.0088e-02, -1.0102e-01, -5.5047e-02,  1.3756e-01,  9.0934e-02,
          2.1275e-01, -6.8034e-02,  1.0540e-01,  7.3089e-02,  2.1811e-02,
          1.1267e-02,  5.5093e-03, -7.9037e-02,  1.0770e-01,  1.2373e-01,
          1.7366e-01,  7.6843e-03,  3.3129e-02, -1.0368e-01, -3.8023e-02,
          5.5419e-02, -5.4881e-02, -1.4680e-02, -3.1033e-02, -6.7462e-03,
          5.2399e-04,  1.2443e-01, -2.2229e-02,  4.1126e-01, -6.6346e-01,
          4.5802e-01, -1.2432e-02, -7.1471e-02,  5.3190e-01, -1.6861e-01,
         -4.1612e-02, -7.5125e-03, -5.0036e-01,  3.5898e-01,  1.9543e-01,
         -2.6615e-02, -2.1426e-01,  1.9643e-02,  2.3493e-01, -1.9240e-02,
         -3.5711e-01,  1.9369e-01, -1.4040e-01, -7.1091e-02,  6.9112e-01,
          1.8732e-01,  2.4571e-03, -2.8538e-01, -5.0955e-02,  2.1075e-02,
         -6.1725e-01,  7.2805e-02]], device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
661000 特征值优化 tensor(0.7072, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.9655e-01, -5.2144e-01, -2.1594e-01, -1.9717e-01,  3.3453e-01,
          1.2584e+00,  1.4512e+00, -1.9487e-01, -7.3858e-01, -2.7031e-01,
         -6.4591e-01,  1.0407e-01,  1.1955e-01, -2.6184e-01,  1.2371e-01,
         -6.3174e-02, -8.5708e-02, -5.9403e-02,  1.3868e-01,  9.0496e-02,
          2.1101e-01, -6.9002e-02,  1.0475e-01,  8.7691e-02, -1.1478e-02,
         -3.6479e-02, -2.1433e-02, -3.5881e-02,  1.1162e-01,  1.1837e-01,
          1.7183e-01,  1.9990e-02,  3.6736e-02, -1.0188e-01, -1.5744e-02,
          4.0147e-02, -6.2424e-02, -2.2021e-02, -3.3780e-02, -1.8225e-02,
          4.0021e-04,  1.3533e-01, -2.3080e-02,  4.1062e-01, -6.6629e-01,
          4.7134e-01, -1.7393e-02, -1.1531e-01,  5.3033e-01, -1.5065e-01,
         -3.5319e-02,  3.9025e-03, -4.9434e-01,  3.5633e-01,  1.9427e-01,
         -1.9159e-02, -1.6583e-01, -5.5568e-03,  2.2000e-01,  1.5834e-02,
         -3.4524e-01,  1.9259e-01, -1.6588e-01, -5.3739e-02,  6.5278e-01,
          2.2632e-01, -2.9231e-02, -2.4899e-01,  2.9718e-02,  1.7108e-02,
         -6.3284e-01,  6.5865e-02]], device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
662000 特征值优化 tensor(0.6944, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.0226e-01, -5.3071e-01, -1.5657e-01, -2.5257e-01,  3.1134e-01,
          1.2653e+00,  1.5142e+00, -1.9497e-01, -8.1775e-01, -1.2407e-01,
         -7.2546e-01,  1.6315e-01,  1.1887e-01, -2.2927e-01,  2.0379e-01,
          3.3791e-02, -1.1864e-01, -3.4970e-02,  1.0735e-01,  9.0685e-02,
          2.1151e-01, -6.9124e-02,  9.1049e-02,  1.1533e-01, -4.2541e-02,
          1.5403e-02, -5.0234e-02, -4.1613e-02,  1.1101e-01,  1.1838e-01,
          1.7197e-01,  3.7610e-02,  3.2140e-02, -1.0188e-01,  4.5913e-02,
          5.5736e-02, -2.6592e-02,  3.1918e-02, -6.5993e-02, -6.5804e-02,
         -3.4688e-02,  1.7710e-01, -1.8080e-02,  4.1207e-01, -6.6693e-01,
          4.7597e-01, -1.8781e-02, -1.4625e-01,  5.3480e-01, -1.4925e-01,
         -5.7424e-03,  6.5538e-04, -4.6772e-01,  3.5633e-01,  1.8472e-01,
         -1.1191e-02, -1.8449e-01,  2.8823e-03,  1.6971e-01, -9.5375e-02,
         -3.5560e-01,  1.9528e-01, -1.0598e-01, -7.2296e-02,  6.6245e-01,
          2.0848e-01, -4.2467e-02, -2.0484e-01,  3.0011e-02,  1.6254e-02,
         -6.5425e-01,  7.7220e-02]], device='cuda:0') tensor(0.2030, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
663000 特征值优化 tensor(0.6558, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.2190e-01, -5.2518e-01, -1.5141e-01, -3.0412e-01,  2.2352e-01,
          1.3130e+00,  1.5496e+00, -2.4680e-01, -8.9923e-01,  3.4407e-01,
         -7.4694e-01,  2.3886e-01,  1.1671e-01, -2.0140e-01,  1.4541e-01,
         -4.8854e-02, -1.0093e-02, -1.3484e-01,  6.2130e-02,  8.4252e-02,
          2.0740e-01, -6.8925e-02,  1.2079e-01,  1.1670e-01,  4.8011e-03,
          2.2628e-02,  1.3580e-01, -6.9729e-02,  1.1879e-01,  1.2071e-01,
          1.8426e-01, -3.2610e-02,  3.1181e-02, -1.0102e-01,  9.8556e-02,
          8.0272e-02, -2.8342e-02,  2.1094e-02, -8.5056e-02, -1.6301e-01,
         -3.4848e-02,  1.8861e-01, -1.2929e-02,  4.2048e-01, -6.6381e-01,
          4.8123e-01, -1.4126e-02, -1.1154e-01,  4.8495e-01, -1.5978e-01,
          6.9402e-02, -2.9855e-02, -2.8084e-01,  2.9838e-01,  1.9747e-01,
          7.2365e-04, -2.7614e-01,  3.8028e-02,  2.2630e-01, -1.1859e-01,
         -4.0326e-01,  2.2100e-01, -1.6014e-01,  3.0878e-02,  5.9186e-01,
          2.0649e-01, -5.5938e-02, -1.0569e-01,  4.9385e-02, -2.2614e-03,
         -6.7644e-01,  1.1644e-01]], device='cuda:0') tensor(0.2040, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
664000 特征值优化 tensor(0.6532, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7305, -0.5291, -0.1508, -0.2910,  0.2616,  1.3128,  1.5189, -0.2440,
         -0.9323,  0.4686, -0.6911,  0.1745,  0.1187, -0.1974,  0.0952, -0.1811,
         -0.0722, -0.1348,  0.0681,  0.0910,  0.2057, -0.0712,  0.0478,  0.1809,
         -0.0298,  0.0081,  0.0540, -0.0098,  0.1193,  0.1179,  0.1914, -0.0348,
          0.0329, -0.1017,  0.0944,  0.0640, -0.0165,  0.0532, -0.0501, -0.1827,
         -0.0510,  0.1605,  0.0021,  0.4131, -0.6772,  0.4963, -0.0157, -0.1090,
          0.4868, -0.1599,  0.0707, -0.0313, -0.2747,  0.2996,  0.1997, -0.0161,
         -0.2617,  0.0299,  0.2313, -0.1030, -0.4415,  0.2220, -0.1928,  0.0078,
          0.5591,  0.1990, -0.0630, -0.0975,  0.0648,  0.0114, -0.6234,  0.1236]],
       device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
665000 特征值优化 tensor(0.6410, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7476, -0.5102, -0.1429, -0.2708,  0.1882,  1.2976,  1.4726, -0.2172,
         -0.9493,  0.4891, -0.7100,  0.3578,  0.1143,  0.0305,  0.1834, -0.1290,
         -0.1007, -0.1225,  0.0738,  0.0871,  0.2103, -0.0654,  0.0796,  0.0798,
          0.0949, -0.0338,  0.1097, -0.0055,  0.1190,  0.1212,  0.1872, -0.0691,
          0.0316, -0.1008,  0.0885,  0.0757,  0.0045,  0.0817, -0.0839, -0.1796,
         -0.0690,  0.1899,  0.0124,  0.4096, -0.6651,  0.4811, -0.0202, -0.1149,
          0.4889, -0.1574,  0.0506, -0.0290, -0.1903,  0.2671,  0.2077, -0.0232,
         -0.2512,  0.0298,  0.2336, -0.1203, -0.4141,  0.1886, -0.1331, -0.0193,
          0.5484,  0.1850, -0.1041, -0.0899, -0.0038,  0.0638, -0.6977,  0.1530]],
       device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
666000 特征值优化 tensor(0.6392, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7411, -0.5445, -0.1292, -0.3003,  0.2076,  1.2966,  1.4226, -0.2319,
         -0.9892,  0.5050, -0.6740,  0.3705,  0.1136, -0.1177,  0.0789, -0.1599,
         -0.0613, -0.1374,  0.0601,  0.0911,  0.2106, -0.0663,  0.0428,  0.0473,
         -0.0072, -0.0321,  0.1482,  0.0940,  0.1196,  0.1204,  0.1948, -0.0170,
          0.0457, -0.1014,  0.0828,  0.0750, -0.0044,  0.0735, -0.0629, -0.1856,
         -0.0599,  0.1727,  0.0124,  0.4068, -0.6656,  0.4932, -0.0181, -0.1196,
          0.4903, -0.1567,  0.0626, -0.0256, -0.2449,  0.3057,  0.2109, -0.0221,
         -0.2436,  0.0264,  0.2295, -0.1240, -0.3915,  0.1932, -0.1706,  0.0053,
          0.5674,  0.1736, -0.1072, -0.0793,  0.0482,  0.0279, -0.7185,  0.1642]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
667000 特征值优化 tensor(0.6414, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.2903e-01, -5.1840e-01, -1.4578e-01, -2.8372e-01,  1.6619e-01,
          1.2841e+00,  1.4458e+00, -2.2448e-01, -1.0113e+00,  4.7060e-01,
         -6.9920e-01,  4.1474e-01,  1.1498e-01, -2.7447e-02,  1.4301e-01,
         -1.2967e-01, -1.2205e-01, -1.4748e-01,  5.5407e-02,  9.0961e-02,
          2.0837e-01, -6.6882e-02,  7.4195e-02,  5.6022e-02,  7.1969e-02,
         -8.4794e-02,  1.2798e-01,  2.5028e-02,  1.1836e-01,  1.1931e-01,
          1.8347e-01, -7.1174e-02,  2.6835e-02, -1.0140e-01,  8.8323e-02,
          8.4582e-02, -8.3987e-04,  6.9157e-02, -8.8287e-02, -1.7317e-01,
         -6.3371e-02,  1.9538e-01,  1.0318e-03,  4.1143e-01, -6.7128e-01,
          4.8537e-01, -1.8077e-02, -1.1146e-01,  4.8983e-01, -1.5830e-01,
          5.7480e-02, -2.7827e-02, -2.2138e-01,  2.8405e-01,  2.0737e-01,
         -1.3814e-02, -2.4813e-01,  3.2817e-02,  2.3660e-01, -1.3483e-01,
         -3.8365e-01,  1.8151e-01, -1.2084e-01, -3.6334e-02,  5.4649e-01,
          1.7837e-01, -8.3639e-02, -8.7428e-02,  7.7154e-03,  5.2384e-02,
         -6.8735e-01,  1.5337e-01]], device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
668000 特征值优化 tensor(0.6449, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.1941e-01, -5.2378e-01, -1.4041e-01, -2.9351e-01,  1.4052e-01,
          1.2809e+00,  1.4151e+00, -2.3325e-01, -9.9165e-01,  4.6013e-01,
         -6.5335e-01,  4.0006e-01,  1.1329e-01, -7.5601e-02,  8.5216e-02,
         -1.5392e-01, -7.3614e-02, -1.0380e-01,  1.0228e-01,  9.3840e-02,
          2.1036e-01, -6.7040e-02,  3.9061e-02,  7.9941e-02,  2.3526e-02,
         -3.1171e-02,  1.4869e-01,  7.1600e-02,  1.1812e-01,  1.2168e-01,
          1.8491e-01, -3.2448e-02,  4.1729e-02, -1.0126e-01,  8.1623e-02,
          7.7731e-02, -7.9779e-03,  6.7794e-02, -6.5858e-02, -1.8270e-01,
         -5.4517e-02,  1.7473e-01, -8.4723e-04,  4.1305e-01, -6.6870e-01,
          4.8078e-01, -1.6887e-02, -1.1531e-01,  4.8730e-01, -1.5838e-01,
          5.8227e-02, -2.4614e-02, -2.1781e-01,  2.8955e-01,  1.9997e-01,
         -1.7523e-02, -2.3508e-01,  2.5627e-02,  2.3060e-01, -1.2464e-01,
         -3.8484e-01,  2.0050e-01, -1.4481e-01, -9.6709e-03,  5.6108e-01,
          1.7994e-01, -8.3431e-02, -8.1950e-02,  2.3727e-02,  3.0183e-02,
         -7.2339e-01,  1.5761e-01]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
669000 特征值优化 tensor(0.6423, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7323, -0.5390, -0.1488, -0.2941,  0.1686,  1.2800,  1.3853, -0.2360,
         -0.9723,  0.4443, -0.6391,  0.4237,  0.1129, -0.0991,  0.0888, -0.1710,
         -0.0642, -0.1032,  0.0941,  0.0930,  0.2105, -0.0667,  0.0632,  0.0662,
          0.0090, -0.0474,  0.1481,  0.0809,  0.1184,  0.1219,  0.1889, -0.0272,
          0.0393, -0.1007,  0.0820,  0.0763, -0.0052,  0.0742, -0.0654, -0.1814,
         -0.0576,  0.1735,  0.0087,  0.4107, -0.6687,  0.4874, -0.0168, -0.1127,
          0.4848, -0.1589,  0.0594, -0.0258, -0.2368,  0.2998,  0.2005, -0.0202,
         -0.2311,  0.0247,  0.2277, -0.1267, -0.3655,  0.1909, -0.1490, -0.0053,
          0.5583,  0.1905, -0.0758, -0.0856,  0.0286,  0.0316, -0.7454,  0.1492]],
       device='cuda:0') tensor(0.2036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
670000 特征值优化 tensor(0.6392, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7372, -0.5361, -0.1395, -0.2895,  0.1807,  1.3238,  1.3812, -0.2381,
         -1.0098,  0.4348, -0.6519,  0.4110,  0.1179, -0.1225,  0.0781, -0.1647,
         -0.0673, -0.1337,  0.0697,  0.0973,  0.2103, -0.0674,  0.0234,  0.0739,
          0.0085, -0.0310,  0.1196,  0.1418,  0.1183,  0.1211,  0.1903, -0.0282,
          0.0397, -0.1051,  0.0681,  0.0672, -0.0056,  0.0680, -0.0613, -0.1803,
         -0.0576,  0.1769,  0.0328,  0.3969, -0.6899,  0.5249, -0.0387, -0.1144,
          0.4885, -0.1583,  0.0589, -0.0246, -0.2372,  0.2993,  0.2026, -0.0221,
         -0.2580,  0.0341,  0.2230, -0.1146, -0.3747,  0.1974, -0.1630, -0.0086,
          0.5652,  0.1849, -0.0758, -0.0907,  0.0402,  0.0279, -0.7514,  0.1577]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
671000 特征值优化 tensor(0.6348, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7641, -0.5833, -0.1445, -0.2750,  0.2343,  1.3186,  1.4153, -0.2464,
         -1.0595,  0.4656, -0.6568,  0.4330,  0.1185, -0.1363,  0.0168, -0.1869,
         -0.0292, -0.1201,  0.1167,  0.0924,  0.2100, -0.0689,  0.0745,  0.0944,
         -0.0453, -0.0411,  0.1106,  0.1518,  0.1186,  0.1217,  0.1916, -0.0399,
          0.0342, -0.1088,  0.0567,  0.0812, -0.0063,  0.0718, -0.0577, -0.1845,
         -0.0574,  0.1760,  0.0502,  0.3971, -0.6914,  0.5573, -0.0434, -0.1124,
          0.4874, -0.1596,  0.0581, -0.0240, -0.2493,  0.2984,  0.1994, -0.0250,
         -0.2470,  0.0370,  0.2199, -0.1251, -0.4257,  0.2196, -0.1777,  0.0034,
          0.5457,  0.1833, -0.0746, -0.0841,  0.0681,  0.0161, -0.7272,  0.1580]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
672000 特征值优化 tensor(0.6332, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.6865e-01, -5.7184e-01, -1.5380e-01, -2.7919e-01,  2.2848e-01,
          1.3092e+00,  1.4193e+00, -2.4205e-01, -1.0904e+00,  4.6145e-01,
         -6.3175e-01,  4.7222e-01,  1.2097e-01, -5.3483e-02, -4.4067e-03,
         -2.4129e-01,  3.3755e-02, -1.0123e-01,  1.7071e-01,  9.2786e-02,
          2.0726e-01, -6.9144e-02,  7.5666e-02,  9.2567e-02, -4.0115e-02,
         -5.8271e-02,  1.0395e-01,  1.5209e-01,  1.1776e-01,  1.2254e-01,
          1.8999e-01, -4.6042e-02,  3.0098e-02, -1.0666e-01,  5.8739e-02,
          8.3638e-02, -6.1856e-03,  6.2930e-02, -7.5627e-02, -1.7562e-01,
         -5.8955e-02,  1.9207e-01,  4.8633e-02,  3.9392e-01, -6.9093e-01,
          5.5445e-01, -4.2207e-02, -1.0989e-01,  4.8510e-01, -1.5973e-01,
          5.4096e-02, -2.3950e-02, -2.5341e-01,  2.9616e-01,  1.9663e-01,
         -3.1733e-02, -2.5109e-01,  3.7904e-02,  2.1529e-01, -1.3786e-01,
         -4.4172e-01,  2.2482e-01, -1.9582e-01, -1.0275e-03,  5.5670e-01,
          1.7307e-01, -7.0313e-02, -8.4570e-02,  7.1438e-02,  1.4009e-02,
         -7.2915e-01,  1.6426e-01]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
673000 特征值优化 tensor(10.4880, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.3111, -0.4416, -0.5047,  0.0338, -0.5657, -0.5080, -0.7289, -0.6455,
         -0.6721,  0.4909, -0.7096, -0.9587,  0.6712, -0.0357,  0.9130, -0.9638,
         -0.4075, -1.2387, -0.1596,  0.0027,  0.3226, -0.4143,  0.6419,  0.2175,
         -0.0469,  0.4143, -0.0315, -0.1330, -0.0574, -0.4178,  0.0729,  0.5404,
         -0.0794, -0.0072,  0.0779, -0.2599, -0.5915,  0.6084,  0.3301,  0.1087,
         -1.5649, -0.5721,  0.5318, -0.2444,  0.0372, -0.6540,  0.4251,  0.0304,
         -0.5429,  1.2912, -0.8408,  0.2460,  0.4779, -0.1468,  0.8394,  0.0383,
          0.5750, -0.1632,  1.4923, -0.1831, -1.1385,  0.0349,  0.1054, -0.0555,
          0.4055,  1.0052, -0.2291, -1.0230,  0.3897, -1.4484,  0.7090, -0.4481]],
       device='cuda:0') tensor(0.2106, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
674000 特征值优化 tensor(1.3584, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.5347,  0.0042,  0.3796,  0.4624, -0.1110, -0.4602,  0.3781, -0.0597,
         -0.1215,  0.2685, -0.5850, -0.1121,  0.3060,  0.0906,  0.1236, -0.2422,
          0.0146, -0.3091, -0.0267,  0.0887,  0.0435, -0.1047,  0.1885,  0.0604,
         -0.0636,  0.0092,  0.0318, -0.0787,  0.0286, -0.0700,  0.0696,  0.0939,
         -0.0058,  0.0611, -0.0367, -0.0187, -0.0138,  0.0129,  0.1310,  0.0054,
         -0.5150, -0.1223, -0.0560, -0.1694,  0.2868, -0.2234,  0.0583, -0.0108,
         -0.1812,  0.4966, -0.4585, -0.0527, -0.2025,  0.1123,  0.0866,  0.2487,
         -0.0881,  0.1268,  0.5830,  0.0311, -0.6757,  0.0438,  0.0180, -0.0320,
         -0.0256,  0.3284, -0.0977, -0.3391,  0.1976, -0.4128,  0.2506,  0.0178]],
       device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
675000 特征值优化 tensor(0.6601, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4003,  0.0810,  0.4704,  0.4480, -0.2402, -0.6038,  0.4079, -0.0037,
         -0.0584,  0.9508,  0.1860,  0.0570,  0.3001, -0.0063,  0.1228, -0.2228,
          0.0062, -0.2787, -0.1006,  0.0950,  0.0512, -0.0952,  0.0682, -0.0362,
         -0.0537,  0.1063, -0.0192, -0.0611, -0.0067, -0.0896,  0.0675,  0.0760,
          0.0451,  0.0484, -0.0483, -0.0265, -0.0233,  0.0195,  0.1714, -0.0070,
         -0.2846, -0.1857, -0.1574, -0.1904,  0.3444, -0.2185,  0.0536, -0.0371,
         -0.0149,  0.4099, -0.4341, -0.0424, -0.0511,  0.0641,  0.0457,  0.2730,
         -0.1903,  0.1869,  0.5448, -0.1494, -0.8053,  0.0835,  0.1036,  0.0029,
          0.0060,  0.1991, -0.2524, -0.1965, -0.0079, -0.1572,  0.2051,  0.0279]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
676000 特征值优化 tensor(0.6189, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3958, -0.0257,  0.4542,  0.4787, -0.4252, -0.5885,  0.2346,  0.1513,
          0.0294,  1.3415,  0.3123,  0.0732,  0.2891, -0.0798,  0.1183, -0.1255,
         -0.1076, -0.3002, -0.1035,  0.0581,  0.0565, -0.0929,  0.0115, -0.1157,
         -0.1517,  0.1127, -0.0460,  0.0180,  0.0225, -0.0896,  0.0680,  0.0721,
          0.0385,  0.0415, -0.0064, -0.0697, -0.0412, -0.0019,  0.1695,  0.0243,
         -0.2759, -0.1807, -0.2010, -0.2099,  0.3499, -0.1955,  0.0782, -0.0274,
         -0.0255,  0.4049, -0.4316, -0.0433,  0.0404,  0.0644,  0.0804,  0.2558,
         -0.2317,  0.2076,  0.4798, -0.1947, -0.6827,  0.0410,  0.0967, -0.0040,
          0.0999,  0.1264, -0.2824, -0.0915, -0.0670, -0.1419,  0.1040,  0.0889]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
677000 特征值优化 tensor(0.6108, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.9026e-01, -1.2905e-01,  4.9675e-01,  3.9647e-01, -4.1853e-01,
         -5.8244e-01,  2.1869e-01,  2.8006e-01, -1.1211e-02,  1.4521e+00,
          3.6179e-01,  4.6573e-02,  2.9418e-01, -3.7378e-02,  8.4119e-02,
         -1.6051e-01, -9.4465e-02, -2.2375e-01, -1.5512e-01,  4.9747e-02,
          5.5762e-02, -9.5279e-02,  4.3728e-02, -9.3740e-02, -1.2717e-01,
          8.2622e-02,  5.5927e-03, -5.0373e-02,  2.1552e-02, -8.6736e-02,
          5.6632e-02,  7.2059e-02,  3.3027e-02,  4.5242e-02,  4.5707e-03,
         -9.2918e-02, -3.9132e-02, -8.4283e-04,  1.5218e-01,  2.8620e-02,
         -2.5270e-01, -1.6916e-01, -2.1445e-01, -1.7899e-01,  3.2998e-01,
         -1.4161e-01,  6.9997e-02, -5.2013e-02, -5.9615e-03,  4.0310e-01,
         -4.1358e-01, -4.0268e-02,  6.5801e-03,  9.7942e-02,  1.1688e-01,
          2.2866e-01, -2.2038e-01,  1.9668e-01,  4.4743e-01, -2.4655e-01,
         -5.8990e-01, -1.2382e-02,  1.3232e-01,  9.3489e-03,  9.3447e-02,
          1.3253e-01, -2.9673e-01, -6.7376e-02, -7.5499e-02, -1.3530e-01,
          1.2438e-01,  8.9815e-02]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
678000 特征值优化 tensor(0.6033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3848, -0.0980,  0.4759,  0.4532, -0.4697, -0.5829,  0.2626,  0.3915,
         -0.0098,  1.4670,  0.3351,  0.0290,  0.2917, -0.0940,  0.0514, -0.0751,
         -0.1619, -0.1573, -0.2500,  0.0684,  0.0576, -0.0979,  0.1078, -0.0235,
         -0.0085,  0.0705, -0.0701, -0.0739,  0.0137, -0.0855,  0.0661,  0.0907,
         -0.0345,  0.0422,  0.0315, -0.1150, -0.0709, -0.0090,  0.1571,  0.0231,
         -0.2221, -0.1690, -0.2235, -0.1845,  0.3393, -0.1323,  0.0600, -0.0346,
         -0.0277,  0.4053, -0.4136, -0.0473, -0.0050,  0.0959,  0.1633,  0.2268,
         -0.1966,  0.1899,  0.4651, -0.2494, -0.5292, -0.0236,  0.1387,  0.0149,
          0.1085,  0.1222, -0.3252, -0.0560, -0.0964, -0.1224,  0.1010,  0.1038]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
679000 特征值优化 tensor(0.6049, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3774, -0.1111,  0.5019,  0.4292, -0.4545, -0.5704,  0.2827,  0.4231,
         -0.0188,  1.4429,  0.3052,  0.0159,  0.2916, -0.0960,  0.0464, -0.0308,
         -0.1929, -0.0684, -0.2609,  0.0649,  0.0579, -0.0975,  0.1078, -0.0418,
         -0.0471,  0.0646, -0.0415, -0.0806,  0.0156, -0.0850,  0.0641,  0.0953,
         -0.0310,  0.0386,  0.0181, -0.1053, -0.0738, -0.0182,  0.1593,  0.0230,
         -0.2165, -0.1732, -0.2263, -0.1817,  0.3378, -0.1301,  0.0595, -0.0464,
         -0.0237,  0.4062, -0.4074, -0.0491, -0.0078,  0.0895,  0.1517,  0.2129,
         -0.1971,  0.1963,  0.4561, -0.2524, -0.5190, -0.0208,  0.1389,  0.0237,
          0.1166,  0.1215, -0.3050, -0.0711, -0.1001, -0.1263,  0.0999,  0.1024]],
       device='cuda:0') tensor(0.2052, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
680000 特征值优化 tensor(0.6019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3779, -0.1276,  0.4984,  0.4286, -0.4494, -0.5585,  0.2774,  0.4247,
         -0.0305,  1.4586,  0.2896,  0.0208,  0.2920, -0.0767,  0.0535, -0.0314,
         -0.1936, -0.0816, -0.2817,  0.0565,  0.0576, -0.0954,  0.0916, -0.0496,
         -0.0800, -0.0084, -0.0374, -0.1007,  0.0181, -0.0872,  0.0638,  0.0998,
         -0.0376,  0.0376,  0.0116, -0.0993, -0.0676, -0.0212,  0.1580,  0.0321,
         -0.2156, -0.1719, -0.2245, -0.1785,  0.3363, -0.1311,  0.0633, -0.0452,
         -0.0234,  0.4082, -0.4018, -0.0510, -0.0066,  0.0873,  0.1425,  0.2366,
         -0.2070,  0.1978,  0.4532, -0.2446, -0.5246, -0.0199,  0.1451,  0.0188,
          0.1009,  0.1213, -0.3095, -0.0705, -0.0998, -0.1300,  0.1190,  0.1018]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
681000 特征值优化 tensor(0.6032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3769, -0.1118,  0.4748,  0.4429, -0.4527, -0.5690,  0.2560,  0.4063,
         -0.0093,  1.4647,  0.3150,  0.0233,  0.2917, -0.0858,  0.0496, -0.0200,
         -0.2044, -0.0640, -0.2646,  0.0609,  0.0583, -0.0981,  0.0761, -0.0408,
         -0.0402,  0.0030, -0.0244, -0.1355,  0.0194, -0.0846,  0.0630,  0.0989,
         -0.0337,  0.0407,  0.0312, -0.1165, -0.0529, -0.0188,  0.1564,  0.0239,
         -0.2332, -0.1684, -0.2264, -0.1803,  0.3368, -0.1319,  0.0608, -0.0342,
         -0.0250,  0.4035, -0.4143, -0.0456, -0.0046,  0.0854,  0.1455,  0.2366,
         -0.2007,  0.1919,  0.4712, -0.2405, -0.4961, -0.0333,  0.1629, -0.0054,
          0.1100,  0.1190, -0.3220, -0.0569, -0.1296, -0.1164,  0.1028,  0.1051]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
682000 特征值优化 tensor(0.6014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3914, -0.0955,  0.4718,  0.4251, -0.4670, -0.6010,  0.3172,  0.4531,
          0.0912,  1.4132,  0.3179,  0.0651,  0.2927, -0.0315,  0.1006, -0.0534,
         -0.1398, -0.1010, -0.3066,  0.0525,  0.0571, -0.0973,  0.0675, -0.0832,
         -0.0686,  0.0535, -0.1004, -0.0148,  0.0247, -0.0853,  0.0675,  0.0702,
          0.0319,  0.0464,  0.0082, -0.0944, -0.0920, -0.0341,  0.1429,  0.0119,
         -0.2077, -0.1713, -0.2163, -0.1774,  0.3346, -0.1522,  0.0656, -0.0439,
         -0.0117,  0.3959, -0.4213, -0.0352, -0.0087,  0.1000,  0.1527,  0.1890,
         -0.2036,  0.1901,  0.4359, -0.2717, -0.5446,  0.0091,  0.1448,  0.0284,
          0.1124,  0.1477, -0.2815, -0.0744, -0.0815, -0.1803,  0.0658,  0.0993]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
683000 特征值优化 tensor(0.6047, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3835, -0.1258,  0.4754,  0.3726, -0.4447, -0.5680,  0.3032,  0.4650,
          0.0272,  1.3960,  0.2646,  0.0364,  0.2916, -0.0959,  0.0420, -0.0786,
         -0.1871, -0.0721, -0.2529,  0.0583,  0.0580, -0.0957,  0.0916, -0.0468,
         -0.1074,  0.0399, -0.0094, -0.0721, -0.0182, -0.0860,  0.0675,  0.0907,
         -0.0299,  0.0400,  0.0100, -0.0928, -0.0671, -0.0269,  0.1624,  0.0094,
         -0.2210, -0.1754, -0.2187, -0.1824,  0.3331, -0.1345,  0.0664, -0.0406,
         -0.0031,  0.3995, -0.4116, -0.0368, -0.0100,  0.0949,  0.1470,  0.2351,
         -0.2080,  0.1982,  0.4384, -0.2740, -0.5244, -0.0035,  0.1410,  0.0133,
          0.1256,  0.1178, -0.2811, -0.0827, -0.1076, -0.1411,  0.0640,  0.1070]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
684000 特征值优化 tensor(0.6042, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.8505e-01, -1.2913e-01,  4.8351e-01,  4.0076e-01, -4.4236e-01,
         -5.7499e-01,  3.4073e-01,  4.8839e-01,  4.0560e-02,  1.4025e+00,
          2.3623e-01,  4.3119e-02,  2.9236e-01, -8.9793e-02,  4.9140e-02,
         -9.8005e-02, -1.9180e-01, -6.9341e-02, -2.4659e-01,  5.3725e-02,
          5.7071e-02, -9.4396e-02,  8.8873e-02, -6.4945e-02, -9.8611e-02,
         -1.2547e-02, -3.3714e-02, -8.8211e-02, -2.7741e-02, -8.7852e-02,
          6.5102e-02,  8.9734e-02, -9.4781e-03,  3.8235e-02,  5.9098e-03,
         -9.1385e-02, -7.5237e-02, -2.6675e-02,  1.5977e-01,  7.5592e-03,
         -2.1628e-01, -1.7508e-01, -2.2172e-01, -1.7717e-01,  3.3671e-01,
         -1.3314e-01,  6.5335e-02, -3.9150e-02, -2.2451e-02,  4.0811e-01,
         -3.9252e-01, -4.9880e-02, -8.1189e-03,  8.8790e-02,  1.4094e-01,
          2.3771e-01, -1.9532e-01,  1.9430e-01,  4.3345e-01, -2.8015e-01,
         -5.2593e-01,  1.0335e-03,  1.2739e-01,  3.4216e-02,  1.2451e-01,
          1.2235e-01, -2.7630e-01, -8.3483e-02, -9.6807e-02, -1.4934e-01,
          4.7319e-02,  1.1077e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
685000 特征值优化 tensor(0.6325, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.0068e-01, -8.8721e-02,  4.6227e-01,  3.6359e-01, -4.5613e-01,
         -5.7307e-01,  3.6377e-01,  4.8032e-01,  6.4257e-02,  1.4109e+00,
          2.5433e-01,  6.2571e-02,  2.8914e-01, -6.0931e-02,  7.2515e-02,
         -7.8842e-02, -1.2336e-01, -1.1019e-01, -2.6707e-01,  6.6349e-02,
          5.7081e-02, -9.7350e-02,  6.2184e-04, -1.3155e-01, -5.7610e-02,
          1.5322e-01, -2.6566e-02, -6.5671e-03, -1.7791e-02, -7.4609e-02,
          6.7426e-02,  8.3036e-02,  1.9261e-02,  4.3026e-02,  2.7972e-02,
         -1.0754e-01, -9.3845e-02, -3.2300e-02,  1.4779e-01,  1.4590e-02,
         -1.9799e-01, -1.6983e-01, -2.2481e-01, -1.8116e-01,  3.4742e-01,
         -1.2869e-01,  6.1079e-02, -2.0268e-02, -1.4579e-02,  3.9089e-01,
         -3.9853e-01, -5.7306e-02,  1.1311e-02,  8.6344e-02,  1.5411e-01,
          2.0969e-01, -1.8065e-01,  1.7634e-01,  4.5579e-01, -2.6497e-01,
         -5.3731e-01,  2.1973e-02,  1.1654e-01,  5.0680e-02,  9.2302e-02,
          1.4729e-01, -2.9673e-01, -5.8585e-02, -1.0683e-01, -1.6493e-01,
          6.1108e-02,  1.1014e-01]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
686000 特征值优化 tensor(0.5989, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.8846e-01, -8.2806e-02,  4.7029e-01,  3.5019e-01, -4.6860e-01,
         -5.5435e-01,  3.5394e-01,  4.5873e-01,  3.7218e-02,  1.3973e+00,
          2.8629e-01,  3.8293e-02,  2.8973e-01, -4.4760e-02,  9.4451e-02,
         -7.7301e-02, -1.2623e-01, -1.1459e-01, -2.9702e-01,  6.5411e-02,
          5.5587e-02, -9.4618e-02,  3.8896e-02, -1.0335e-01, -4.5794e-02,
          4.9058e-02, -8.4128e-02, -4.7018e-02, -2.5937e-02, -6.8419e-02,
          6.7487e-02,  7.3260e-02,  3.0119e-02,  3.4201e-02,  2.9164e-02,
         -1.1172e-01, -9.6362e-02, -3.7239e-02,  1.5929e-01,  8.5808e-03,
         -2.0274e-01, -1.7296e-01, -2.2468e-01, -1.7424e-01,  3.4610e-01,
         -1.3773e-01,  5.9404e-02, -3.7667e-02, -1.7243e-02,  3.9269e-01,
         -4.1373e-01, -5.5956e-02, -9.4364e-04,  9.5885e-02,  1.5974e-01,
          1.9291e-01, -1.7953e-01,  1.9057e-01,  4.6212e-01, -2.6552e-01,
         -5.2571e-01,  9.1637e-03,  1.5283e-01,  2.5694e-02,  1.2401e-01,
          1.2549e-01, -2.8758e-01, -7.4638e-02, -1.0836e-01, -1.7628e-01,
          5.2943e-02,  1.1261e-01]], device='cuda:0') tensor(0.2063, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
687000 特征值优化 tensor(0.5976, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3811, -0.1065,  0.4736,  0.3623, -0.4606, -0.5404,  0.3730,  0.4736,
          0.0092,  1.4252,  0.2609,  0.0332,  0.2938, -0.0498,  0.0883, -0.0676,
         -0.1359, -0.0883, -0.3074,  0.0525,  0.0560, -0.0948,  0.0580, -0.0905,
         -0.0234,  0.0195, -0.1014, -0.0533, -0.0193, -0.0681,  0.0674,  0.0701,
          0.0331,  0.0314,  0.0330, -0.1166, -0.1050, -0.0396,  0.1625,  0.0140,
         -0.1944, -0.1718, -0.2255, -0.1741,  0.3372, -0.1417,  0.0629, -0.0410,
         -0.0173,  0.3918, -0.4076, -0.0600, -0.0155,  0.1018,  0.1627,  0.1872,
         -0.1889,  0.1978,  0.4676, -0.2594, -0.5337,  0.0179,  0.1483,  0.0318,
          0.1167,  0.1241, -0.3024, -0.0660, -0.0905, -0.1880,  0.0791,  0.1064]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
688000 特征值优化 tensor(0.6020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3862, -0.1014,  0.4806,  0.4302, -0.4597, -0.5471,  0.3715,  0.4674,
          0.0327,  1.3802,  0.2590,  0.0520,  0.2935, -0.0393,  0.0963, -0.0550,
         -0.1354, -0.0815, -0.3092,  0.0534,  0.0569, -0.0971,  0.0745, -0.0792,
         -0.0749,  0.1039, -0.0671, -0.0225,  0.0207, -0.0852,  0.0671,  0.0727,
          0.0305,  0.0322,  0.0311, -0.1148, -0.1066, -0.0385,  0.1674,  0.0139,
         -0.1930, -0.1751, -0.2239, -0.1752,  0.3357, -0.1420,  0.0632, -0.0427,
         -0.0222,  0.4033, -0.4049, -0.0458, -0.0203,  0.1032,  0.1672,  0.1865,
         -0.1850,  0.1945,  0.4601, -0.2720, -0.5217,  0.0115,  0.1499,  0.0297,
          0.1074,  0.1280, -0.2882, -0.0763, -0.0980, -0.1832,  0.0630,  0.1093]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
689000 正交保障 tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3896, -0.0872,  0.4812,  0.4315, -0.4598, -0.5479,  0.3740,  0.4696,
          0.0254,  1.3883,  0.2517,  0.0539,  0.2901, -0.0413,  0.1001, -0.0735,
         -0.1319, -0.1027, -0.2990,  0.0679,  0.0557, -0.0966,  0.0776, -0.0824,
         -0.0972,  0.1078, -0.0937,  0.0377,  0.0177, -0.0847,  0.0670,  0.0733,
          0.0284,  0.0346,  0.0350, -0.1198, -0.1022, -0.0377,  0.1666,  0.0115,
         -0.1967, -0.1759, -0.2252, -0.1728,  0.3460, -0.1303,  0.0563, -0.0410,
         -0.0246,  0.4024, -0.4010, -0.0480, -0.0027,  0.0947,  0.1605,  0.1934,
         -0.1853,  0.1921,  0.4422, -0.2823, -0.5310,  0.0130,  0.1519,  0.0327,
          0.1239,  0.1196, -0.2884, -0.0754, -0.0956, -0.1778,  0.0480,  0.1145]],
       device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
690000 特征值优化 tensor(0.6018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3853, -0.0887,  0.4860,  0.4223, -0.4618, -0.5466,  0.3825,  0.4698,
          0.0188,  1.3996,  0.2422,  0.0600,  0.2902, -0.0357,  0.1003, -0.0772,
         -0.1273, -0.1006, -0.3003,  0.0685,  0.0558, -0.0983,  0.0892, -0.0703,
         -0.0488,  0.0571, -0.1037, -0.0391,  0.0136, -0.0836,  0.0674,  0.0735,
          0.0278,  0.0355,  0.0375, -0.1198, -0.1068, -0.0370,  0.1649,  0.0129,
         -0.1923, -0.1738, -0.2271, -0.1735,  0.3464, -0.1291,  0.0559, -0.0426,
         -0.0218,  0.4026, -0.4043, -0.0468, -0.0125,  0.0997,  0.1603,  0.1961,
         -0.1863,  0.1920,  0.4400, -0.2824, -0.5272,  0.0140,  0.1484,  0.0340,
          0.1162,  0.1229, -0.2936, -0.0700, -0.0904, -0.1829,  0.0564,  0.1116]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
691000 特征值优化 tensor(0.6069, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3875, -0.0972,  0.4581,  0.3896, -0.4588, -0.5507,  0.3521,  0.4363,
          0.0252,  1.3918,  0.2733,  0.0650,  0.2903, -0.0607,  0.0885, -0.0664,
         -0.1550, -0.1248, -0.2640,  0.0656,  0.0548, -0.0965,  0.0706, -0.0717,
         -0.0733,  0.0542, -0.0450, -0.0520,  0.0239, -0.0862,  0.0676,  0.0761,
          0.0229,  0.0335,  0.0128, -0.0978, -0.0890, -0.0353,  0.1646,  0.0091,
         -0.2061, -0.1757, -0.2253, -0.1718,  0.3469, -0.1325,  0.0601, -0.0288,
         -0.0200,  0.4061, -0.3848, -0.0495, -0.0078,  0.0972,  0.1612,  0.2021,
         -0.1885,  0.1954,  0.4385, -0.2836, -0.4984, -0.0079,  0.1657,  0.0141,
          0.1197,  0.1203, -0.2785, -0.0830, -0.1280, -0.1549,  0.0455,  0.1117]],
       device='cuda:0') tensor(0.2070, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
692000 特征值优化 tensor(0.6256, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3915, -0.0870,  0.4821,  0.4150, -0.4466, -0.5508,  0.3849,  0.4488,
          0.0114,  1.3790,  0.2213,  0.0686,  0.2907, -0.0574,  0.0780, -0.0740,
         -0.1342, -0.0916, -0.2713,  0.0646,  0.0564, -0.0980,  0.0732, -0.0696,
         -0.0844,  0.1027, -0.0562,  0.0063,  0.0067, -0.0852,  0.0664,  0.0839,
          0.0208,  0.0422,  0.0250, -0.1069, -0.0895, -0.0355,  0.1487,  0.0174,
         -0.1974, -0.1728, -0.2238, -0.1834,  0.3444, -0.1329,  0.0595, -0.0351,
         -0.0201,  0.4091, -0.4099, -0.0453,  0.0018,  0.0868,  0.1601,  0.2115,
         -0.1893,  0.1832,  0.4560, -0.2674, -0.5243,  0.0122,  0.1352,  0.0427,
          0.1230,  0.1370, -0.2830, -0.0673, -0.1121, -0.1563,  0.0557,  0.1111]],
       device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
693000 特征值优化 tensor(0.6092, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3792, -0.1018,  0.4770,  0.3827, -0.4493, -0.5756,  0.3789,  0.4570,
          0.0326,  1.3973,  0.2177,  0.0763,  0.2893, -0.0974,  0.0470, -0.0935,
         -0.1830, -0.0887, -0.2460,  0.0650,  0.0564, -0.0949,  0.0736, -0.0615,
         -0.0762,  0.0468, -0.0480, -0.0578,  0.0110, -0.0837,  0.0656,  0.0904,
         -0.0026,  0.0464,  0.0133, -0.0972, -0.0821, -0.0313,  0.1414,  0.0061,
         -0.2085, -0.1714, -0.2258, -0.1810,  0.3445, -0.1318,  0.0624, -0.0366,
         -0.0140,  0.4060, -0.4041, -0.0466, -0.0026,  0.0885,  0.1617,  0.2198,
         -0.2033,  0.1836,  0.4508, -0.2472, -0.5189, -0.0064,  0.1467,  0.0256,
          0.1559,  0.1407, -0.2709, -0.0773, -0.1068, -0.1455,  0.0425,  0.1041]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
694000 特征值优化 tensor(0.6092, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3772, -0.1167,  0.4821,  0.3890, -0.4555, -0.5720,  0.3848,  0.4548,
          0.0234,  1.4052,  0.2153,  0.0746,  0.2914, -0.0906,  0.0353, -0.0839,
         -0.1877, -0.0772, -0.2556,  0.0596,  0.0581, -0.0967,  0.0673, -0.0733,
         -0.0884,  0.0556, -0.0443, -0.0515, -0.0064, -0.0844,  0.0653,  0.0839,
          0.0104,  0.0491,  0.0124, -0.0989, -0.0845, -0.0331,  0.1441,  0.0087,
         -0.2053, -0.1715, -0.2225, -0.1833,  0.3335, -0.1372,  0.0666, -0.0416,
         -0.0078,  0.4089, -0.4061, -0.0433, -0.0038,  0.0904,  0.1585,  0.2229,
         -0.2135,  0.1912,  0.4506, -0.2362, -0.5187, -0.0081,  0.1486,  0.0256,
          0.1477,  0.1390, -0.2728, -0.0758, -0.1063, -0.1478,  0.0535,  0.1007]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
695000 特征值优化 tensor(0.5989, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.7614e-01, -9.8457e-02,  4.7540e-01,  4.3618e-01, -4.6332e-01,
         -5.4550e-01,  4.0168e-01,  4.7387e-01,  1.1514e-03,  1.3934e+00,
          2.2772e-01,  7.2005e-02,  2.8949e-01, -3.6595e-02,  1.1066e-01,
         -5.8595e-02, -1.4829e-01, -8.3176e-02, -2.9886e-01,  7.1756e-02,
          5.6473e-02, -9.7094e-02,  1.0043e-01, -5.4575e-02, -5.9479e-02,
          3.0816e-02, -1.2686e-01, -3.0990e-02,  2.0146e-02, -8.5698e-02,
          6.7466e-02,  7.2672e-02,  2.6679e-02,  3.5062e-02,  3.8926e-02,
         -1.2127e-01, -1.0864e-01, -4.1337e-02,  1.6492e-01,  1.3128e-02,
         -1.9013e-01, -1.7382e-01, -2.3352e-01, -1.7522e-01,  3.4713e-01,
         -1.1925e-01,  5.4060e-02, -3.8727e-02, -2.2912e-02,  4.0250e-01,
         -4.0677e-01, -4.6015e-02, -5.2513e-03,  9.7281e-02,  1.6001e-01,
          1.9830e-01, -1.8503e-01,  1.9073e-01,  4.4184e-01, -2.8125e-01,
         -5.3463e-01,  2.3188e-02,  1.5571e-01,  3.1565e-02,  1.2424e-01,
          1.2483e-01, -2.9074e-01, -7.1021e-02, -9.5832e-02, -1.8713e-01,
          5.1516e-02,  1.0970e-01]], device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
696000 特征值优化 tensor(0.6011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3775, -0.1258,  0.4715,  0.3787, -0.4597, -0.5810,  0.3407,  0.4439,
          0.0470,  1.4323,  0.2288,  0.1018,  0.2895, -0.0899,  0.0411, -0.1269,
         -0.1668, -0.1003, -0.2351,  0.0668,  0.0570, -0.0955,  0.0931, -0.0514,
         -0.0770,  0.0264, -0.0152, -0.1023,  0.0133, -0.0684,  0.0634,  0.0972,
         -0.0135,  0.0474, -0.0044, -0.0884, -0.0598, -0.0328,  0.1388,  0.0143,
         -0.2229, -0.1703, -0.2285, -0.1787,  0.3455, -0.1157,  0.0595, -0.0404,
         -0.0147,  0.3914, -0.4174, -0.0589,  0.0099,  0.0812,  0.1629,  0.2243,
         -0.2024,  0.1864,  0.4537, -0.2379, -0.5001, -0.0145,  0.1606,  0.0115,
          0.1163,  0.1517, -0.2641, -0.0777, -0.1352, -0.1315,  0.0643,  0.0956]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
697000 特征值优化 tensor(0.6238, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.8029e-01, -1.1843e-01,  4.7497e-01,  3.7668e-01, -4.5116e-01,
         -5.7730e-01,  3.4494e-01,  4.2632e-01,  7.9183e-03,  1.4201e+00,
          2.2690e-01,  9.1622e-02,  2.9066e-01, -8.3896e-02,  5.8390e-02,
         -1.0263e-01, -1.6941e-01, -1.1322e-01, -2.4111e-01,  6.3592e-02,
          5.8564e-02, -9.7162e-02,  7.0631e-02, -6.2968e-02, -1.1599e-01,
          6.6867e-02,  7.3783e-04, -5.3234e-02,  1.7424e-02, -7.9378e-02,
          6.6187e-02,  8.6032e-02,  1.0036e-02,  4.2880e-02, -1.5358e-03,
         -8.3057e-02, -6.8597e-02, -3.4371e-02,  1.4717e-01,  1.0893e-02,
         -2.1722e-01, -1.6855e-01, -2.2759e-01, -1.8473e-01,  3.3937e-01,
         -1.2612e-01,  6.1885e-02, -2.4483e-02, -1.1861e-02,  3.9600e-01,
         -3.9969e-01, -5.5735e-02,  1.4618e-02,  8.2414e-02,  1.6842e-01,
          2.1260e-01, -1.9484e-01,  1.9009e-01,  4.4971e-01, -2.6317e-01,
         -5.0352e-01,  2.9566e-03,  1.5200e-01,  1.7305e-02,  1.3262e-01,
          1.4021e-01, -2.6414e-01, -6.7869e-02, -1.5165e-01, -1.2453e-01,
          4.9980e-02,  1.0232e-01]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
698000 特征值优化 tensor(0.6120, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.8360e-01, -1.0805e-01,  4.5848e-01,  3.7027e-01, -4.4635e-01,
         -5.6097e-01,  3.8017e-01,  4.4597e-01,  1.2653e-03,  1.4189e+00,
          2.4283e-01,  8.5356e-02,  2.9061e-01, -6.2257e-02,  7.4137e-02,
         -7.6480e-02, -1.5795e-01, -1.3136e-01, -2.5482e-01,  6.1597e-02,
          5.6313e-02, -9.4965e-02,  7.3247e-02, -6.7812e-02, -8.7829e-02,
          5.5545e-02, -2.4852e-02, -6.0193e-02,  2.4351e-02, -8.8145e-02,
          6.7505e-02,  8.7208e-02,  9.4003e-03,  3.7169e-02,  3.3911e-03,
         -8.7209e-02, -8.8913e-02, -3.6160e-02,  1.5584e-01,  9.6666e-03,
         -2.0505e-01, -1.7090e-01, -2.2530e-01, -1.7615e-01,  3.4114e-01,
         -1.3477e-01,  6.2107e-02, -2.9578e-02, -1.9361e-02,  4.0318e-01,
         -3.6912e-01, -5.1717e-02,  6.6208e-03,  8.6698e-02,  1.6759e-01,
          2.0268e-01, -1.9792e-01,  1.9552e-01,  4.3258e-01, -2.8093e-01,
         -5.0115e-01, -5.4084e-03,  1.5936e-01,  1.3734e-02,  1.3562e-01,
          1.2598e-01, -2.6706e-01, -7.5465e-02, -1.3811e-01, -1.4377e-01,
          4.9370e-02,  1.0404e-01]], device='cuda:0') tensor(0.2294, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
699000 特征值优化 tensor(0.6059, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.7495e-01, -1.0238e-01,  4.6962e-01,  3.8515e-01, -4.6413e-01,
         -5.6386e-01,  3.7541e-01,  4.1992e-01, -1.1445e-02,  1.4270e+00,
          2.5434e-01,  7.7416e-02,  2.8945e-01, -9.0940e-02,  5.3578e-02,
         -7.5265e-02, -1.6296e-01, -9.2090e-02, -2.6735e-01,  6.4976e-02,
          5.6615e-02, -9.5591e-02,  8.3098e-02, -5.7480e-02, -7.2808e-02,
          2.4967e-02, -3.6674e-02, -8.8419e-02,  2.8476e-02, -8.6964e-02,
          6.7809e-02,  7.5077e-02,  2.6824e-02,  3.8136e-02,  4.3209e-03,
         -9.0104e-02, -9.2697e-02, -3.6452e-02,  1.6015e-01,  2.5990e-02,
         -2.0174e-01, -1.7352e-01, -2.2816e-01, -1.7689e-01,  3.4428e-01,
         -1.3204e-01,  6.1145e-02, -3.0829e-02, -3.1969e-02,  4.1077e-01,
         -3.6805e-01, -5.5118e-02,  8.0017e-04,  9.4512e-02,  1.6557e-01,
          2.0244e-01, -2.0361e-01,  1.9836e-01,  4.4660e-01, -2.5342e-01,
         -5.0393e-01, -1.5103e-03,  1.7454e-01,  1.9443e-02,  1.0031e-01,
          1.2142e-01, -2.9078e-01, -7.5391e-02, -1.2742e-01, -1.5947e-01,
          8.4897e-02,  1.0113e-01]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
700000 特征值优化 tensor(0.5978, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3773, -0.1291,  0.4616,  0.3542, -0.4671, -0.5930,  0.3526,  0.4496,
          0.0334,  1.4403,  0.2182,  0.1037,  0.2904, -0.0807,  0.0558, -0.1243,
         -0.1683, -0.1053, -0.2341,  0.0684,  0.0570, -0.0952,  0.0602, -0.0999,
         -0.1367,  0.0790, -0.0300,  0.0049,  0.0177, -0.0679,  0.0601,  0.1001,
         -0.0242,  0.0471,  0.0094, -0.0976, -0.0575, -0.0377,  0.1387,  0.0157,
         -0.2283, -0.1706, -0.2295, -0.1745,  0.3425, -0.1140,  0.0569, -0.0363,
         -0.0146,  0.3883, -0.4043, -0.0610,  0.0159,  0.0732,  0.1629,  0.2310,
         -0.1882,  0.1806,  0.4494, -0.2583, -0.5053, -0.0044,  0.1661,  0.0024,
          0.1262,  0.1506, -0.2837, -0.0682, -0.1443, -0.1333,  0.0540,  0.0959]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
701000 特征值优化 tensor(0.5981, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3893, -0.0855,  0.5014,  0.4050, -0.4567, -0.5242,  0.4044,  0.4724,
         -0.0406,  1.4350,  0.2301,  0.0437,  0.2904, -0.0312,  0.1093, -0.0750,
         -0.1335, -0.1130, -0.2927,  0.0688,  0.0559, -0.0956,  0.1080, -0.0511,
         -0.0834, -0.0359, -0.0482, -0.1023,  0.0258, -0.0872,  0.0677,  0.0706,
          0.0321,  0.0317,  0.0218, -0.1070, -0.1084, -0.0429,  0.1600,  0.0178,
         -0.1914, -0.1725, -0.2271, -0.1734,  0.3468, -0.1293,  0.0549, -0.0476,
         -0.0269,  0.4125, -0.3797, -0.0568, -0.0172,  0.1016,  0.1677,  0.1832,
         -0.1945,  0.1967,  0.4635, -0.2553, -0.5137,  0.0145,  0.1689,  0.0226,
          0.1342,  0.1207, -0.3017, -0.0700, -0.1079, -0.1872,  0.0761,  0.1056]],
       device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
702000 特征值优化 tensor(0.6107, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3879, -0.1002,  0.4867,  0.3470, -0.4582, -0.5675,  0.3855,  0.4560,
         -0.0065,  1.4151,  0.2340,  0.0712,  0.2888, -0.0605,  0.0673, -0.0996,
         -0.1229, -0.0888, -0.2414,  0.0670,  0.0571, -0.0996,  0.0822, -0.0575,
         -0.0735,  0.0538, -0.0596, -0.0435,  0.0235, -0.0756,  0.0673,  0.0825,
          0.0166,  0.0409,  0.0108, -0.0959, -0.0965, -0.0383,  0.1576,  0.0213,
         -0.1999, -0.1729, -0.2231, -0.1756,  0.3418, -0.1311,  0.0606, -0.0370,
         -0.0213,  0.4130, -0.3664, -0.0689,  0.0038,  0.0892,  0.1712,  0.2066,
         -0.1958,  0.1892,  0.4372, -0.2637, -0.4885, -0.0027,  0.1648,  0.0132,
          0.1150,  0.1227, -0.2819, -0.0738, -0.1366, -0.1467,  0.0714,  0.1021]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
703000 特征值优化 tensor(0.6204, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3839, -0.0946,  0.4549,  0.3394, -0.4521, -0.5447,  0.4583,  0.4711,
         -0.0041,  1.4509,  0.1821,  0.0714,  0.2904, -0.0759,  0.0696, -0.0694,
         -0.1717, -0.0776, -0.2553,  0.0624,  0.0566, -0.0944,  0.0831, -0.0491,
         -0.0579,  0.0398, -0.0881, -0.0518,  0.0294, -0.0715,  0.0674,  0.0816,
          0.0159,  0.0417,  0.0257, -0.1096, -0.1052, -0.0374,  0.1409,  0.0243,
         -0.1852, -0.1681, -0.2239, -0.1842,  0.3422, -0.1350,  0.0633, -0.0273,
         -0.0334,  0.4137, -0.3577, -0.0865,  0.0020,  0.0907,  0.1650,  0.2170,
         -0.2043,  0.1926,  0.4592, -0.2536, -0.5384,  0.0302,  0.1319,  0.0392,
          0.1244,  0.1357, -0.2965, -0.0551, -0.1228, -0.1616,  0.0758,  0.1002]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
704000 正交保障 tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3768, -0.0975,  0.4680,  0.4326, -0.4567, -0.5280,  0.4303,  0.4722,
          0.0044,  1.4541,  0.1819,  0.0714,  0.2897, -0.0439,  0.0891, -0.0943,
         -0.1324, -0.1052, -0.2947,  0.0714,  0.0568, -0.0941,  0.1056, -0.0567,
         -0.0260, -0.0066, -0.1631, -0.0401,  0.0282, -0.0882,  0.0677,  0.0735,
          0.0270,  0.0309,  0.0318, -0.1168, -0.1144, -0.0389,  0.1599,  0.0113,
         -0.1838, -0.1688, -0.2343, -0.1744,  0.3466, -0.1183,  0.0528, -0.0364,
         -0.0338,  0.4087, -0.3738, -0.0590, -0.0102,  0.0969,  0.1637,  0.2020,
         -0.1872,  0.1960,  0.4680, -0.2584, -0.5350,  0.0260,  0.1589,  0.0373,
          0.1278,  0.1254, -0.3113, -0.0574, -0.0791, -0.1918,  0.0464,  0.1104]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
705000 特征值优化 tensor(0.6004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3877, -0.0873,  0.4768,  0.4189, -0.4631, -0.5441,  0.4234,  0.4702,
          0.0104,  1.3893,  0.2043,  0.0799,  0.2898, -0.0390,  0.0990, -0.0901,
         -0.1225, -0.1114, -0.2943,  0.0697,  0.0562, -0.0959,  0.0940, -0.0680,
         -0.0376,  0.0819, -0.1157, -0.0193,  0.0276, -0.0868,  0.0671,  0.0722,
          0.0305,  0.0321,  0.0349, -0.1202, -0.1124, -0.0418,  0.1681,  0.0186,
         -0.1876, -0.1750, -0.2274, -0.1738,  0.3475, -0.1274,  0.0538, -0.0380,
         -0.0318,  0.4056, -0.3860, -0.0508, -0.0116,  0.0999,  0.1677,  0.1964,
         -0.1781,  0.1920,  0.4702, -0.2539, -0.5125,  0.0168,  0.1653,  0.0260,
          0.1083,  0.1288, -0.2960, -0.0722, -0.1098, -0.1867,  0.0547,  0.1121]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
706000 特征值优化 tensor(0.5991, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3776, -0.1297,  0.4758,  0.4124, -0.4549, -0.5857,  0.3790,  0.4462,
          0.0371,  1.4416,  0.1914,  0.1013,  0.2901, -0.0863,  0.0531, -0.1303,
         -0.1767, -0.0943, -0.2369,  0.0656,  0.0568, -0.0966,  0.0760, -0.0727,
         -0.0721,  0.0463, -0.0295, -0.0859,  0.0030, -0.0861,  0.0627,  0.0971,
         -0.0112,  0.0479, -0.0070, -0.0852, -0.0633, -0.0378,  0.1384,  0.0172,
         -0.2187, -0.1707, -0.2268, -0.1767,  0.3406, -0.1207,  0.0620, -0.0475,
         -0.0082,  0.4003, -0.4045, -0.0438,  0.0082,  0.0786,  0.1682,  0.2227,
         -0.2054,  0.1891,  0.4523, -0.2356, -0.4976, -0.0055,  0.1708,  0.0103,
          0.1360,  0.1420, -0.2657, -0.0805, -0.1404, -0.1373,  0.0513,  0.1000]],
       device='cuda:0') tensor(0.2079, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
707000 特征值优化 tensor(0.6005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3872, -0.1289,  0.4773,  0.3883, -0.4486, -0.5932,  0.3844,  0.4486,
          0.0211,  1.4193,  0.1850,  0.0978,  0.2916, -0.0916,  0.0502, -0.1170,
         -0.1700, -0.0981, -0.2389,  0.0605,  0.0584, -0.0970,  0.0882, -0.0495,
         -0.1023,  0.0364, -0.0077, -0.0810,  0.0173, -0.0852,  0.0606,  0.1024,
         -0.0247,  0.0483, -0.0024, -0.0869, -0.0676, -0.0398,  0.1390,  0.0079,
         -0.2177, -0.1720, -0.2211, -0.1776,  0.3345, -0.1282,  0.0624, -0.0315,
         -0.0178,  0.4062, -0.3993, -0.0473, -0.0022,  0.0783,  0.1684,  0.2248,
         -0.2163,  0.1973,  0.4490, -0.2375, -0.4969, -0.0053,  0.1715,  0.0086,
          0.1665,  0.1378, -0.2617, -0.0836, -0.1420, -0.1388,  0.0392,  0.0987]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
708000 特征值优化 tensor(0.6007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3790, -0.1275,  0.4868,  0.4011, -0.4477, -0.5788,  0.3714,  0.4458,
          0.0255,  1.4407,  0.1948,  0.1064,  0.2904, -0.0872,  0.0544, -0.1319,
         -0.1769, -0.0993, -0.2350,  0.0661,  0.0566, -0.0957,  0.0910, -0.0573,
         -0.0966,  0.0070, -0.0185, -0.0879,  0.0022, -0.0868,  0.0628,  0.0994,
         -0.0097,  0.0489, -0.0095, -0.0837, -0.0644, -0.0371,  0.1381,  0.0069,
         -0.2178, -0.1709, -0.2260, -0.1765,  0.3394, -0.1214,  0.0617, -0.0476,
         -0.0044,  0.4006, -0.4160, -0.0408,  0.0051,  0.0797,  0.1687,  0.2199,
         -0.2030,  0.1887,  0.4466, -0.2320, -0.4878, -0.0147,  0.1735,  0.0131,
          0.1534,  0.1405, -0.2556, -0.0813, -0.1402, -0.1350,  0.0308,  0.1009]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
709000 特征值优化 tensor(0.6116, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3805, -0.1045,  0.4554,  0.3807, -0.4611, -0.5585,  0.3831,  0.4314,
         -0.0170,  1.4103,  0.2331,  0.1114,  0.2891, -0.0655,  0.0634, -0.0895,
         -0.1523, -0.1357, -0.2475,  0.0649,  0.0564, -0.0961,  0.0574, -0.0789,
         -0.0596,  0.0667, -0.0356, -0.0715,  0.0106, -0.0864,  0.0676,  0.0805,
          0.0189,  0.0396,  0.0029, -0.0888, -0.0892, -0.0405,  0.1576,  0.0175,
         -0.2113, -0.1716, -0.2276, -0.1763,  0.3424, -0.1331,  0.0645, -0.0340,
         -0.0115,  0.4077, -0.3885, -0.0477,  0.0106,  0.0883,  0.1702,  0.1936,
         -0.1945,  0.1940,  0.4343, -0.2726, -0.4895, -0.0062,  0.1739,  0.0076,
          0.1232,  0.1294, -0.2704, -0.0797, -0.1439, -0.1445,  0.0466,  0.1048]],
       device='cuda:0') tensor(0.2088, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
710000 特征值优化 tensor(0.6034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3913, -0.0934,  0.4692,  0.4101, -0.4579, -0.5485,  0.4005,  0.4467,
         -0.0446,  1.3997,  0.2286,  0.1028,  0.2900, -0.0469,  0.0989, -0.0772,
         -0.1418, -0.1154, -0.2843,  0.0679,  0.0556, -0.0980,  0.0838, -0.0568,
         -0.0401,  0.0453, -0.0625, -0.0768,  0.0216, -0.0845,  0.0674,  0.0714,
          0.0353,  0.0357,  0.0210, -0.1081, -0.1000, -0.0424,  0.1641,  0.0226,
         -0.1973, -0.1746, -0.2238, -0.1746,  0.3472, -0.1294,  0.0571, -0.0416,
         -0.0127,  0.4022, -0.4010, -0.0442, -0.0137,  0.1001,  0.1707,  0.1879,
         -0.1849,  0.1901,  0.4458, -0.2695, -0.4956,  0.0040,  0.1770,  0.0124,
          0.1245,  0.1234, -0.2838, -0.0791, -0.1287, -0.1749,  0.0517,  0.1102]],
       device='cuda:0') tensor(0.2064, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
711000 特征值优化 tensor(0.6043, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3844, -0.0894,  0.4594,  0.4070, -0.4617, -0.5474,  0.3994,  0.4437,
         -0.0224,  1.3904,  0.2330,  0.1110,  0.2902, -0.0430,  0.1054, -0.0756,
         -0.1431, -0.1212, -0.2835,  0.0664,  0.0554, -0.0978,  0.0758, -0.0613,
         -0.0526,  0.0620, -0.0479, -0.0780,  0.0200, -0.0841,  0.0673,  0.0717,
          0.0338,  0.0338,  0.0176, -0.1027, -0.0988, -0.0434,  0.1668,  0.0157,
         -0.2003, -0.1758, -0.2272, -0.1736,  0.3459, -0.1339,  0.0586, -0.0289,
         -0.0246,  0.4032, -0.3915, -0.0477, -0.0097,  0.0986,  0.1677,  0.1961,
         -0.1923,  0.1966,  0.4452, -0.2746, -0.4986,  0.0061,  0.1798,  0.0082,
          0.1318,  0.1242, -0.2819, -0.0803, -0.1308, -0.1772,  0.0385,  0.1083]],
       device='cuda:0') tensor(0.2203, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
712000 特征值优化 tensor(0.6068, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.8705e-01, -1.0011e-01,  4.8451e-01,  3.7816e-01, -4.5319e-01,
         -5.6831e-01,  3.9538e-01,  4.4353e-01, -2.0899e-03,  1.3998e+00,
          1.9609e-01,  1.2524e-01,  2.8922e-01, -8.3393e-02,  5.8529e-02,
         -1.0896e-01, -1.5370e-01, -8.4722e-02, -2.4485e-01,  7.0112e-02,
          5.6659e-02, -9.8450e-02,  9.5581e-02, -4.7116e-02, -8.1642e-02,
          3.8531e-02, -4.2696e-02, -5.0380e-02,  4.5368e-03, -7.9180e-02,
          6.4906e-02,  8.5271e-02,  9.7645e-03,  4.7421e-02,  7.0261e-03,
         -9.5353e-02, -8.0372e-02, -3.8036e-02,  1.4153e-01,  1.6436e-02,
         -2.0832e-01, -1.7336e-01, -2.2353e-01, -1.8119e-01,  3.4135e-01,
         -1.2874e-01,  6.3412e-02, -4.2308e-02, -9.1029e-03,  4.0446e-01,
         -4.1494e-01, -4.4338e-02,  8.5944e-04,  8.7345e-02,  1.6909e-01,
          2.2054e-01, -2.0314e-01,  1.8497e-01,  4.6037e-01, -2.3873e-01,
         -5.0584e-01, -4.6925e-03,  1.6243e-01,  1.8671e-02,  1.4607e-01,
          1.4693e-01, -2.7201e-01, -7.9664e-02, -1.2794e-01, -1.4497e-01,
          4.1642e-02,  9.8299e-02]], device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
713000 特征值优化 tensor(0.5980, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3797, -0.1249,  0.4714,  0.3680, -0.4499, -0.5810,  0.3781,  0.4472,
         -0.0086,  1.4156,  0.1904,  0.1365,  0.2903, -0.0879,  0.0558, -0.1275,
         -0.1731, -0.0994, -0.2374,  0.0664,  0.0567, -0.0948,  0.0842, -0.0628,
         -0.1162,  0.0633, -0.0117, -0.0593,  0.0202, -0.0679,  0.0633,  0.0983,
         -0.0120,  0.0481, -0.0035, -0.0867, -0.0621, -0.0385,  0.1402,  0.0171,
         -0.2194, -0.1738, -0.2274, -0.1753,  0.3411, -0.1224,  0.0606, -0.0406,
         -0.0174,  0.3918, -0.4133, -0.0606,  0.0111,  0.0776,  0.1684,  0.2217,
         -0.2042,  0.1877,  0.4522, -0.2480, -0.4999, -0.0046,  0.1689,  0.0079,
          0.1586,  0.1441, -0.2621, -0.0820, -0.1412, -0.1375,  0.0324,  0.0972]],
       device='cuda:0') tensor(0.2029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
714000 特征值优化 tensor(0.6109, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.8109e-01, -1.1129e-01,  4.6310e-01,  3.5959e-01, -4.5360e-01,
         -5.5683e-01,  3.9335e-01,  4.2786e-01, -4.9991e-02,  1.3954e+00,
          2.2295e-01,  1.1929e-01,  2.9120e-01, -6.4185e-02,  7.4290e-02,
         -7.1400e-02, -1.6037e-01, -1.2600e-01, -2.5815e-01,  5.7671e-02,
          5.8010e-02, -9.4778e-02,  6.8309e-02, -6.8269e-02, -8.2511e-02,
          5.0764e-02, -2.7913e-02, -7.0081e-02,  2.6280e-02, -8.5539e-02,
          6.7111e-02,  8.1306e-02,  1.9094e-02,  3.6659e-02,  5.9823e-03,
         -9.2607e-02, -8.6663e-02, -3.9423e-02,  1.6163e-01,  1.9599e-02,
         -2.0831e-01, -1.7363e-01, -2.2407e-01, -1.7991e-01,  3.3694e-01,
         -1.3651e-01,  6.3374e-02, -3.0892e-02, -1.6825e-02,  4.0840e-01,
         -3.7714e-01, -5.3309e-02,  1.9284e-03,  9.0157e-02,  1.7307e-01,
          1.9656e-01, -2.0788e-01,  2.0052e-01,  4.3448e-01, -2.6855e-01,
         -4.9547e-01, -1.1006e-03,  1.7823e-01,  1.0401e-02,  1.2778e-01,
          1.2560e-01, -2.7619e-01, -8.0301e-02, -1.3663e-01, -1.4971e-01,
          4.8876e-02,  1.0265e-01]], device='cuda:0') tensor(0.2033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
715000 特征值优化 tensor(0.5994, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3867, -0.0864,  0.4674,  0.4099, -0.4676, -0.5447,  0.4068,  0.4469,
         -0.0487,  1.3874,  0.2202,  0.1294,  0.2895, -0.0326,  0.1069, -0.0856,
         -0.1223, -0.0992, -0.2985,  0.0714,  0.0562, -0.0961,  0.0741, -0.0826,
         -0.1075,  0.1231, -0.0614,  0.0249,  0.0215, -0.0854,  0.0673,  0.0724,
          0.0341,  0.0350,  0.0227, -0.1091, -0.1018, -0.0420,  0.1653,  0.0229,
         -0.1972, -0.1742, -0.2276, -0.1736,  0.3453, -0.1287,  0.0553, -0.0372,
         -0.0202,  0.4015, -0.3942, -0.0466, -0.0068,  0.0987,  0.1718,  0.1840,
         -0.1876,  0.1939,  0.4523, -0.2684, -0.5006,  0.0078,  0.1740,  0.0140,
          0.1290,  0.1275, -0.2848, -0.0772, -0.1214, -0.1787,  0.0419,  0.1050]],
       device='cuda:0') tensor(0.2062, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
716000 特征值优化 tensor(0.6181, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3932, -0.0879,  0.4787,  0.3859, -0.4556, -0.5484,  0.4220,  0.4328,
         -0.0454,  1.3899,  0.1915,  0.1317,  0.2893, -0.0694,  0.0705, -0.0959,
         -0.1462, -0.0984, -0.2566,  0.0669,  0.0572, -0.0995,  0.0812, -0.0629,
         -0.0828,  0.0612, -0.0828, -0.0130,  0.0109, -0.0815,  0.0648,  0.0868,
          0.0176,  0.0437,  0.0187, -0.1033, -0.0901, -0.0361,  0.1452,  0.0188,
         -0.2041, -0.1707, -0.2219, -0.1796,  0.3468, -0.1304,  0.0592, -0.0414,
         -0.0112,  0.4163, -0.4049, -0.0469,  0.0056,  0.0832,  0.1694,  0.2145,
         -0.2067,  0.1880,  0.4628, -0.2519, -0.5145,  0.0038,  0.1532,  0.0277,
          0.1510,  0.1376, -0.2706, -0.0724, -0.1333, -0.1514,  0.0439,  0.1026]],
       device='cuda:0') tensor(0.2050, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
717000 特征值优化 tensor(0.5992, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3889, -0.0839,  0.4995,  0.4232, -0.4569, -0.5467,  0.4201,  0.4511,
         -0.0711,  1.4113,  0.2095,  0.1278,  0.2905, -0.0336,  0.1039, -0.0891,
         -0.1211, -0.1108, -0.2948,  0.0676,  0.0558, -0.0981,  0.0921, -0.0703,
         -0.0430,  0.0376, -0.0909, -0.0676,  0.0129, -0.0837,  0.0676,  0.0721,
          0.0319,  0.0314,  0.0296, -0.1184, -0.1053, -0.0428,  0.1623,  0.0245,
         -0.1938, -0.1717, -0.2251, -0.1741,  0.3458, -0.1331,  0.0566, -0.0497,
         -0.0196,  0.4038, -0.4049, -0.0455, -0.0079,  0.0965,  0.1710,  0.1878,
         -0.1812,  0.1954,  0.4720, -0.2487, -0.5096,  0.0136,  0.1757,  0.0187,
          0.1343,  0.1279, -0.2964, -0.0692, -0.1203, -0.1797,  0.0511,  0.1042]],
       device='cuda:0') tensor(0.2105, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
718000 特征值优化 tensor(0.6067, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3868, -0.1023,  0.4613,  0.4020, -0.4649, -0.5572,  0.4160,  0.4463,
         -0.0527,  1.3759,  0.2173,  0.1312,  0.2913, -0.0444,  0.1096, -0.0717,
         -0.1497, -0.1198, -0.2813,  0.0565,  0.0582, -0.0967,  0.0683, -0.0632,
         -0.0616,  0.0647, -0.0486, -0.0666,  0.0240, -0.0852,  0.0670,  0.0726,
          0.0334,  0.0368,  0.0146, -0.1007, -0.1003, -0.0431,  0.1651,  0.0197,
         -0.1987, -0.1756, -0.2210, -0.1791,  0.3352, -0.1428,  0.0634, -0.0381,
         -0.0106,  0.4007, -0.3992, -0.0441, -0.0039,  0.0961,  0.1761,  0.1778,
         -0.2008,  0.1969,  0.4495, -0.2607, -0.4992,  0.0085,  0.1795,  0.0100,
          0.1409,  0.1234, -0.2808, -0.0811, -0.1285, -0.1727,  0.0363,  0.1070]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
719000 特征值优化 tensor(0.6113, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.7926e-01, -1.0343e-01,  4.5627e-01,  3.7880e-01, -4.5033e-01,
         -5.5965e-01,  4.0606e-01,  4.4269e-01, -5.0540e-02,  1.3943e+00,
          2.1005e-01,  1.3953e-01,  2.8987e-01, -6.1037e-02,  7.3353e-02,
         -8.3084e-02, -1.5184e-01, -1.3414e-01, -2.5391e-01,  6.3830e-02,
          5.6528e-02, -9.6791e-02,  6.4761e-02, -7.1364e-02, -8.9614e-02,
          7.4226e-02, -2.6150e-02, -5.1793e-02,  1.9194e-02, -8.5589e-02,
          6.7039e-02,  8.4534e-02,  1.0343e-02,  3.7633e-02,  5.4298e-03,
         -9.1267e-02, -9.4286e-02, -3.9208e-02,  1.6194e-01,  1.6990e-02,
         -2.0259e-01, -1.7420e-01, -2.2576e-01, -1.7939e-01,  3.4104e-01,
         -1.3395e-01,  6.2390e-02, -3.1490e-02, -1.6085e-02,  4.0945e-01,
         -3.8132e-01, -5.1093e-02,  6.7498e-04,  9.1262e-02,  1.7906e-01,
          1.9326e-01, -1.9393e-01,  1.9420e-01,  4.3421e-01, -2.7392e-01,
         -4.9663e-01, -4.7149e-04,  1.7247e-01,  1.4115e-02,  1.3941e-01,
          1.2855e-01, -2.7316e-01, -8.0638e-02, -1.3689e-01, -1.4838e-01,
          3.3546e-02,  1.0393e-01]], device='cuda:0') tensor(0.2079, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
720000 特征值优化 tensor(0.6004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3869, -0.1009,  0.4792,  0.4294, -0.4607, -0.5463,  0.4187,  0.4532,
         -0.0586,  1.3870,  0.2085,  0.1457,  0.2933, -0.0470,  0.0924, -0.0891,
         -0.1247, -0.1051, -0.2998,  0.0539,  0.0568, -0.0970,  0.0461, -0.1085,
         -0.0679,  0.1101, -0.1007,  0.0126,  0.0204, -0.0848,  0.0672,  0.0666,
          0.0386,  0.0324,  0.0265, -0.1155, -0.1058, -0.0440,  0.1660,  0.0231,
         -0.1936, -0.1744, -0.2236, -0.1744,  0.3370, -0.1421,  0.0620, -0.0432,
         -0.0218,  0.4019, -0.4076, -0.0445, -0.0126,  0.0999,  0.1678,  0.1892,
         -0.1926,  0.1980,  0.4538, -0.2647, -0.5137,  0.0176,  0.1772,  0.0163,
          0.1293,  0.1312, -0.2867, -0.0738, -0.1087, -0.1865,  0.0439,  0.1027]],
       device='cuda:0') tensor(0.2028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
721000 特征值优化 tensor(0.6000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3878, -0.0864,  0.4777,  0.4244, -0.4584, -0.5525,  0.4272,  0.4675,
         -0.0717,  1.3970,  0.1985,  0.1517,  0.2900, -0.0448,  0.0939, -0.0851,
         -0.1276, -0.1042, -0.2994,  0.0675,  0.0557, -0.0965,  0.0749, -0.0858,
         -0.0833,  0.0439, -0.1133,  0.0055,  0.0314, -0.0860,  0.0673,  0.0699,
          0.0320,  0.0339,  0.0325, -0.1205, -0.1119, -0.0422,  0.1623,  0.0190,
         -0.1863, -0.1720, -0.2260, -0.1747,  0.3473, -0.1307,  0.0559, -0.0408,
         -0.0217,  0.4022, -0.4045, -0.0448, -0.0200,  0.1030,  0.1682,  0.1942,
         -0.1845,  0.1937,  0.4472, -0.2736, -0.5072,  0.0160,  0.1701,  0.0221,
          0.1470,  0.1284, -0.2883, -0.0681, -0.1040, -0.1888,  0.0312,  0.1047]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
722000 特征值优化 tensor(0.6104, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3846, -0.0999,  0.4746,  0.3878, -0.4470, -0.5780,  0.4107,  0.4420,
         -0.0484,  1.3911,  0.1899,  0.1605,  0.2890, -0.0942,  0.0488, -0.1006,
         -0.1753, -0.0981, -0.2468,  0.0673,  0.0574, -0.0962,  0.0751, -0.0558,
         -0.0669,  0.0489, -0.0510, -0.0556,  0.0086, -0.0840,  0.0662,  0.0872,
          0.0078,  0.0473,  0.0122, -0.0982, -0.0836, -0.0375,  0.1409,  0.0155,
         -0.2066, -0.1722, -0.2237, -0.1809,  0.3441, -0.1291,  0.0607, -0.0380,
         -0.0097,  0.4065, -0.4068, -0.0471, -0.0031,  0.0895,  0.1715,  0.2151,
         -0.2010,  0.1846,  0.4569, -0.2398, -0.5052, -0.0015,  0.1630,  0.0188,
          0.1703,  0.1451, -0.2688, -0.0776, -0.1246, -0.1460,  0.0259,  0.1002]],
       device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
723000 特征值优化 tensor(20.2468, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2272, -2.3607, -1.1510, -1.1447,  0.5573, -0.7897, -0.1749,  2.3152,
          0.4805,  1.1100, -1.2074,  1.2206,  2.1354,  0.0079,  0.3299, -0.6413,
         -0.0606,  0.1169,  1.4482,  1.1331, -0.0121,  0.1818, -0.6825,  0.2222,
         -0.1337, -0.5784, -0.2313, -0.3455,  0.0320, -0.5578,  1.2294, -1.2088,
          0.4835,  0.4426, -0.9065, -0.9677, -1.2538,  0.9464,  0.2339,  0.7128,
         -1.0534, -0.6741,  0.5543, -0.3152, -0.4002, -0.8996,  0.4467,  0.5880,
         -0.1096,  1.1520,  0.4647, -0.1747,  1.6048, -0.0150,  0.9302,  1.0008,
          0.3368, -0.4439,  0.9756,  0.7493,  0.7749,  0.6470, -0.3425,  0.1987,
         -0.1223, -1.7872,  1.2385,  0.6898,  1.3506,  1.2505,  0.6198, -0.4690]],
       device='cuda:0') tensor(0.2208, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
724000 特征值优化 tensor(5.3700, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.3316e-01, -1.5193e+00, -2.3043e-01, -1.6912e-01, -1.5589e-01,
         -5.2603e-01, -2.5682e-01,  1.2518e+00, -4.7191e-01,  3.4906e-01,
         -1.2864e+00,  8.6675e-01,  9.8523e-01, -1.5359e-01,  2.3912e-02,
          2.1502e-02, -5.9088e-02,  7.2408e-02,  3.9101e-01,  3.1137e-01,
          1.8042e-02, -5.3023e-02, -3.4159e-02,  9.9920e-03, -1.4659e-01,
          1.8563e-02, -3.2715e-02, -1.1800e-01,  1.0278e-03, -1.1431e-01,
          2.7944e-01, -2.6688e-01,  3.3416e-02, -1.2296e-02, -1.1612e-01,
         -2.2831e-01, -3.9523e-01,  1.6218e-01, -2.4017e-02,  1.4038e-01,
         -2.6201e-01, -1.2107e-01, -5.7796e-02,  1.1057e-01,  4.7619e-02,
         -1.5762e-01,  2.1450e-01, -1.3618e-02, -4.0151e-01,  5.8604e-01,
          2.2734e-01, -7.6013e-04,  6.1492e-01,  1.0064e-01,  1.6732e-01,
          2.3083e-01, -6.1942e-02, -1.8417e-02,  7.7194e-02,  4.5538e-02,
          1.4709e-01,  1.5517e-01, -6.9866e-01,  1.7024e-01,  1.6140e-01,
         -8.3987e-01,  3.8475e-01,  9.1343e-02,  6.2437e-01,  3.6496e-01,
         -1.2190e-01,  2.5935e-02]], device='cuda:0') tensor(0.2188, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
725000 特征值优化 tensor(0.6854, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1383, -0.9850,  0.1994, -0.3614, -0.2548, -0.6300,  0.0134,  0.4887,
         -0.1229,  0.2737, -0.6939,  1.3723,  0.3266, -0.0125, -0.0146,  0.1219,
          0.0086, -0.0288,  0.1426,  0.0364,  0.0359, -0.0511, -0.1384,  0.0925,
         -0.2333,  0.0779,  0.1278,  0.0547, -0.0068, -0.1170,  0.1434, -0.0676,
          0.0852, -0.0208, -0.0439, -0.0629, -0.1862,  0.0102, -0.1594, -0.0609,
         -0.1141,  0.0018, -0.1868,  0.1557, -0.0921,  0.1317,  0.1089, -0.2809,
         -0.3971,  0.6494,  0.3366,  0.0083,  0.0679,  0.1640,  0.1378,  0.2547,
         -0.3055,  0.1135,  0.0280, -0.0359,  0.0213,  0.1264, -0.4160,  0.0794,
         -0.1802, -0.2375,  0.1836, -0.0394,  0.4941,  0.2411, -0.3623,  0.1758]],
       device='cuda:0') tensor(0.2049, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
726000 特征值优化 tensor(0.6577, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1405, -0.9270,  0.1765, -0.3374, -0.2073, -0.6178,  0.0769,  0.4103,
          0.0908,  0.2719, -0.7824,  1.1993,  0.3171, -0.0029, -0.0390,  0.1063,
          0.0048, -0.0371,  0.1290,  0.0224,  0.0312, -0.0456, -0.1476,  0.0896,
         -0.2168,  0.0577,  0.1659,  0.0974, -0.0224, -0.1223,  0.1461, -0.0547,
          0.0953, -0.0204, -0.0527, -0.0526, -0.1972,  0.0094, -0.1772, -0.0925,
         -0.0939,  0.0275, -0.1753,  0.3971, -0.3377,  0.0932,  0.1295, -0.2828,
         -0.4017,  0.6508,  0.3191,  0.0185,  0.0349,  0.1736,  0.0647,  0.2973,
         -0.3198,  0.1232,  0.0417, -0.0916,  0.0853,  0.1055, -0.3084,  0.0446,
         -0.2681, -0.1750,  0.1705, -0.0432,  0.4463,  0.2633, -0.2645,  0.1161]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
727000 特征值优化 tensor(0.6574, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1404, -0.9202,  0.1751, -0.3384, -0.2257, -0.6195,  0.1048,  0.3766,
          0.0621,  0.2768, -0.7972,  1.2265,  0.3170, -0.0125, -0.0289,  0.1026,
         -0.0019, -0.0496,  0.1358,  0.0284,  0.0304, -0.0459, -0.1468,  0.0945,
         -0.2210,  0.0642,  0.1651,  0.0905, -0.0227, -0.1225,  0.1461, -0.0477,
          0.0996, -0.0203, -0.0512, -0.0561, -0.2002,  0.0094, -0.1723, -0.0884,
         -0.0890,  0.0222, -0.1759,  0.3989, -0.3371,  0.0919,  0.1314, -0.2824,
         -0.4014,  0.6506,  0.3202,  0.0184,  0.0464,  0.1728,  0.0485,  0.3065,
         -0.3191,  0.1231,  0.0412, -0.0926,  0.0971,  0.0987, -0.2861,  0.0343,
         -0.2601, -0.1865,  0.1755, -0.0433,  0.4254,  0.2748, -0.2783,  0.1289]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
728000 特征值优化 tensor(0.6573, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4410e-01, -9.1810e-01,  1.7710e-01, -3.3754e-01, -2.2712e-01,
         -6.1629e-01,  1.0514e-01,  3.5950e-01,  3.3437e-02,  2.8617e-01,
         -8.0027e-01,  1.2561e+00,  3.1709e-01, -1.4026e-02, -2.7249e-02,
          1.0456e-01, -9.4662e-04, -4.8119e-02,  1.3781e-01,  3.7254e-02,
          3.0644e-02, -4.5796e-02, -1.4939e-01,  9.3747e-02, -2.2544e-01,
          6.9392e-02,  1.6260e-01,  8.3232e-02, -2.3208e-02, -1.2259e-01,
          1.4592e-01, -4.6732e-02,  9.9063e-02, -2.0667e-02, -5.0737e-02,
         -5.7248e-02, -2.0080e-01,  5.1906e-03, -1.6787e-01, -8.3461e-02,
         -8.8659e-02,  1.6983e-02, -1.7500e-01,  3.9810e-01, -3.3657e-01,
          9.2802e-02,  1.2988e-01, -2.8330e-01, -4.0075e-01,  6.5094e-01,
          3.1967e-01,  1.8485e-02,  4.6398e-02,  1.7283e-01,  2.5984e-02,
          3.2086e-01, -3.2053e-01,  1.2282e-01,  4.1908e-02, -1.0327e-01,
          9.9245e-02,  9.8360e-02, -2.8457e-01,  2.8768e-02, -2.5084e-01,
         -1.9690e-01,  1.7820e-01, -4.2016e-02,  4.2491e-01,  2.7396e-01,
         -2.8968e-01,  1.3975e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
729000 特征值优化 tensor(0.6573, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1444, -0.9189,  0.1783, -0.3375, -0.2268, -0.6154,  0.1051,  0.3563,
          0.0197,  0.2907, -0.8008,  1.2669,  0.3172, -0.0146, -0.0272,  0.1027,
         -0.0013, -0.0492,  0.1363,  0.0496,  0.0306, -0.0459, -0.1496,  0.0927,
         -0.2279,  0.0712,  0.1614,  0.0823, -0.0230, -0.1227,  0.1450, -0.0468,
          0.0992, -0.0209, -0.0493, -0.0555, -0.2008,  0.0043, -0.1663, -0.0818,
         -0.0884,  0.0154, -0.1746,  0.3991, -0.3377,  0.0963,  0.1287, -0.2837,
         -0.4004,  0.6505,  0.3194,  0.0183,  0.0462,  0.1719,  0.0147,  0.3281,
         -0.3243,  0.1242,  0.0409, -0.1109,  0.0995,  0.0985, -0.2844,  0.0276,
         -0.2458, -0.2019,  0.1767, -0.0400,  0.4266,  0.2740, -0.2908,  0.1428]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
730000 特征值优化 tensor(0.6573, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.1439, -0.9189,  0.1782, -0.3372, -0.2248, -0.6166,  0.1055,  0.3558,
          0.0185,  0.2915, -0.8018,  1.2686,  0.3170, -0.0105, -0.0315,  0.1030,
         -0.0019, -0.0499,  0.1356,  0.0559,  0.0301, -0.0457, -0.1489,  0.0927,
         -0.2277,  0.0709,  0.1608,  0.0822, -0.0233, -0.1228,  0.1462, -0.0467,
          0.0992, -0.0209, -0.0489, -0.0553, -0.2008,  0.0041, -0.1659, -0.0815,
         -0.0887,  0.0150, -0.1743,  0.3997, -0.3380,  0.0973,  0.1273, -0.2836,
         -0.4001,  0.6510,  0.3196,  0.0182,  0.0463,  0.1736,  0.0132,  0.3286,
         -0.3247,  0.1247,  0.0397, -0.1118,  0.1004,  0.0979, -0.2839,  0.0271,
         -0.2448, -0.2023,  0.1765, -0.0399,  0.4266,  0.2735, -0.2911,  0.1433]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
731000 特征值优化 tensor(0.6573, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4613e-01, -9.1797e-01,  1.7789e-01, -3.3736e-01, -2.2298e-01,
         -6.1700e-01,  1.0562e-01,  3.5566e-01,  1.8757e-02,  2.9174e-01,
         -8.0136e-01,  1.2691e+00,  3.1704e-01, -8.9717e-03, -3.4059e-02,
          1.0245e-01, -5.5348e-04, -4.9414e-02,  1.3586e-01,  5.9288e-02,
          3.0774e-02, -4.5305e-02, -1.4864e-01,  9.2801e-02, -2.2814e-01,
          7.1706e-02,  1.6129e-01,  8.2188e-02, -2.3139e-02, -1.2251e-01,
          1.4513e-01, -4.5565e-02,  9.9558e-02, -2.0480e-02, -5.0137e-02,
         -5.5977e-02, -2.0078e-01,  4.1676e-03, -1.6566e-01, -8.0924e-02,
         -8.8421e-02,  1.4905e-02, -1.7430e-01,  3.9982e-01, -3.3783e-01,
          9.8357e-02,  1.2715e-01, -2.8382e-01, -4.0059e-01,  6.5100e-01,
          3.1924e-01,  1.8633e-02,  4.1764e-02,  1.7608e-01,  1.2830e-02,
          3.2926e-01, -3.2340e-01,  1.2382e-01,  4.0181e-02, -1.1218e-01,
          1.0113e-01,  9.7405e-02, -2.8281e-01,  2.6031e-02, -2.4584e-01,
         -2.0214e-01,  1.7765e-01, -3.9978e-02,  4.2812e-01,  2.7300e-01,
         -2.9210e-01,  1.4389e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
732000 特征值优化 tensor(0.6573, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.4514e-01, -9.1922e-01,  1.7772e-01, -3.3772e-01, -2.2161e-01,
         -6.1688e-01,  1.0630e-01,  3.5511e-01,  1.8363e-02,  2.9259e-01,
         -8.0240e-01,  1.2708e+00,  3.1709e-01, -8.0605e-03, -3.4435e-02,
          1.0145e-01, -1.2289e-03, -4.9791e-02,  1.3513e-01,  6.0682e-02,
          3.0060e-02, -4.5469e-02, -1.4911e-01,  9.2030e-02, -2.2801e-01,
          7.2298e-02,  1.6026e-01,  8.0294e-02, -2.3113e-02, -1.2237e-01,
          1.4535e-01, -4.5993e-02,  1.0006e-01, -2.0441e-02, -4.9637e-02,
         -5.6546e-02, -2.0113e-01,  3.9795e-03, -1.6583e-01, -8.0904e-02,
         -8.8286e-02,  1.4438e-02, -1.7409e-01,  3.9951e-01, -3.3819e-01,
          9.9153e-02,  1.2675e-01, -2.8342e-01, -4.0001e-01,  6.5055e-01,
          3.1879e-01,  1.8599e-02,  4.2331e-02,  1.7657e-01,  1.1421e-02,
          3.2967e-01, -3.2323e-01,  1.2306e-01,  4.1372e-02, -1.1491e-01,
          1.0184e-01,  9.7569e-02, -2.8268e-01,  2.5692e-02, -2.4536e-01,
         -2.0236e-01,  1.7747e-01, -3.9374e-02,  4.2799e-01,  2.7271e-01,
         -2.9228e-01,  1.4423e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
733000 特征值优化 tensor(22.4401, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.7261,  0.7016, -1.4512, -1.3565, -2.0519,  0.0768,  0.3160,  1.5118,
         -0.8074, -0.5814, -1.1281,  1.1719,  0.4100,  1.1606,  0.0509,  0.5202,
          0.3496, -0.8193, -0.5727, -2.3529,  0.4985,  1.6467,  1.1315,  1.5349,
          0.5606,  0.9651, -0.2268,  0.4300, -0.1109, -0.8050,  0.0958, -0.1709,
          0.8128, -0.0776, -0.4505,  0.1091,  1.1010,  0.0555,  0.7501,  0.6856,
          0.2744, -0.5150,  0.4678,  0.5343,  0.4865, -0.8092,  0.8318,  0.9681,
         -0.2575, -2.0978,  1.4567,  1.7644, -1.4037,  0.4874,  1.2299,  0.5043,
         -0.0105, -0.0913,  1.0478, -0.3933,  1.5737, -0.0745,  0.8005, -2.3216,
         -1.1321,  1.7439, -0.1974,  1.4702,  1.0989, -0.1404,  1.1363, -1.5264]],
       device='cuda:0') tensor(0.2061, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
734000 特征值优化 tensor(8.2266, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2354e-02,  9.6355e-01, -9.5347e-01, -1.4777e+00, -9.8586e-01,
          4.0118e-01, -3.1892e-01,  4.3454e-01,  1.4640e-01,  5.3163e-01,
         -1.3506e+00,  3.9385e-01, -4.4570e-02,  2.7976e-01, -2.8752e-02,
          1.4252e-02, -8.5265e-04, -9.5198e-02,  9.4968e-03, -1.3211e+00,
         -3.2263e-02,  6.8595e-01,  1.2549e-01,  4.9358e-01,  8.3073e-02,
          1.6581e-01, -2.0263e-02, -6.6196e-03,  1.6108e-02, -4.3171e-02,
         -1.0008e-01,  7.2971e-02,  1.2134e-01, -9.6359e-02, -3.3925e-03,
         -3.7309e-02,  4.0750e-01,  1.1149e-01,  2.2302e-01,  1.1921e-01,
          2.1348e-02, -1.2194e-01, -5.6480e-02,  7.2329e-02,  5.0360e-02,
         -3.5836e-01,  1.6654e-01,  8.2468e-01,  6.1816e-01, -1.2157e+00,
          6.0472e-01,  6.2754e-01, -3.1785e-01,  4.5927e-02,  3.4487e-01,
          3.3000e-02, -8.3629e-02,  1.9541e-01,  3.7209e-01,  3.4444e-02,
          7.3353e-01,  1.1920e-01,  8.9392e-02, -1.3124e+00, -8.5338e-01,
          1.0268e+00, -4.4013e-01,  6.5551e-01,  3.0501e-01,  7.4955e-02,
          5.2008e-01, -5.2763e-01]], device='cuda:0') tensor(0.2046, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
735000 特征值优化 tensor(0.9207, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3323,  0.8194, -0.3346, -0.3820, -0.8121,  0.4585, -0.2743, -0.2308,
          0.5942,  0.9316, -0.6759,  0.2493, -0.0452, -0.0730, -0.0282,  0.2053,
          0.1339,  0.0143, -0.0289, -0.3177, -0.0340,  0.2441, -0.0453,  0.1148,
          0.1186,  0.1338,  0.1882, -0.1472,  0.0122, -0.0776, -0.0217, -0.0311,
          0.0541, -0.1011,  0.0108,  0.0281, -0.0228, -0.0293,  0.0721, -0.0536,
          0.0264, -0.1490, -0.2731,  0.0989,  0.0986, -0.2065,  0.1252, -0.0519,
          0.6331, -0.5945,  0.3366,  0.1244, -0.0146,  0.0234,  0.1866, -0.0688,
         -0.0955,  0.1933,  0.3249, -0.2411,  0.2649,  0.0160, -0.2053, -0.4507,
         -0.5541,  0.3186, -0.2449,  0.0796, -0.0684,  0.0725, -0.0168,  0.0231]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
736000 特征值优化 tensor(0.6389, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3748,  0.9204, -0.1564, -0.3107, -0.8044,  0.4051, -0.0483, -0.0219,
          0.6260,  1.0455, -1.0125,  0.2584, -0.0690, -0.0785,  0.0101,  0.1582,
          0.1407, -0.0223, -0.0595, -0.1996, -0.0434,  0.2482, -0.1159,  0.1278,
          0.1388,  0.1418,  0.1089, -0.0992,  0.0341, -0.0707, -0.0099, -0.0111,
          0.0118, -0.1031, -0.0378, -0.0329, -0.0555, -0.0329,  0.0696, -0.0011,
          0.0507, -0.1078, -0.2900,  0.0489,  0.1286, -0.1775,  0.0730, -0.1793,
          0.5041, -0.3371,  0.4802,  0.0670,  0.0716, -0.0069, -0.1196, -0.0749,
         -0.1615,  0.2164,  0.4385, -0.1938,  0.3927, -0.0495, -0.5082, -0.2744,
         -0.4678,  0.2165, -0.0991,  0.0640, -0.1074,  0.1171,  0.0207,  0.0699]],
       device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
737000 特征值优化 tensor(0.6359, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.7160e-01,  9.7507e-01, -1.2140e-01, -2.9768e-01, -8.0527e-01,
          3.8901e-01,  1.2945e-01,  7.4779e-02,  5.8011e-01,  1.0758e+00,
         -1.2092e+00,  2.3059e-01, -7.1748e-02, -4.0663e-02,  6.2797e-03,
          1.2379e-01,  1.0272e-01, -9.7666e-02, -2.4876e-02, -1.6804e-01,
         -4.9218e-02,  2.5111e-01, -6.8849e-02,  1.2893e-01,  1.6269e-01,
          1.3439e-01,  1.0930e-01, -1.0338e-01,  1.6780e-02, -6.6255e-02,
         -9.2520e-03,  6.1658e-05, -9.9531e-04, -1.1074e-01, -6.6250e-02,
         -4.2510e-02, -7.2796e-02, -4.0257e-02,  5.4630e-02,  2.4300e-03,
          6.6058e-02, -7.9360e-02, -3.1006e-01,  1.0338e-01,  1.0164e-01,
         -7.9904e-02,  2.7473e-02, -2.1521e-01,  5.0480e-01, -3.1150e-01,
          4.7693e-01,  6.9736e-02,  6.9818e-02, -6.6514e-03, -2.5315e-02,
         -5.7234e-02, -1.4639e-01,  2.2934e-01,  3.7791e-01, -1.8296e-01,
          3.9351e-01, -3.5710e-02, -5.3875e-01, -2.2234e-01, -3.4285e-01,
          1.9176e-01, -1.5112e-01,  7.8081e-02, -3.0961e-02,  8.8680e-02,
         -2.9178e-02,  4.1639e-02]], device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
738000 特征值优化 tensor(0.6001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.0496e-01,  9.9691e-01, -1.0703e-01, -3.0612e-01, -8.7125e-01,
          4.4733e-01,  2.8596e-01,  1.2312e-01,  5.9866e-01,  9.4396e-01,
         -1.4442e+00,  2.1787e-01, -6.9222e-02, -3.4191e-02, -1.8620e-02,
          1.1760e-01,  7.3811e-02, -9.1968e-02, -3.9051e-02, -1.3694e-01,
         -4.1020e-02,  2.5102e-01, -6.6546e-02,  1.4139e-01,  1.5779e-01,
          1.3806e-01,  9.4502e-02, -1.1719e-01, -4.8159e-04, -6.4408e-02,
         -1.7532e-02,  4.1506e-02, -2.8959e-02, -1.0821e-01, -9.3396e-02,
         -2.6422e-02, -5.3319e-02, -3.6251e-02,  1.0687e-01, -2.3219e-02,
          4.1803e-02, -1.2460e-01, -2.9461e-01,  1.0543e-01,  1.0542e-01,
          1.6671e-02, -2.5288e-02, -2.3055e-01,  5.3519e-01, -3.2951e-01,
          4.8332e-01,  7.1589e-02,  1.0569e-01, -2.7102e-02, -3.0566e-02,
         -1.3035e-01, -1.0401e-01,  2.0642e-01,  3.0574e-01,  4.8417e-04,
          3.6634e-01, -1.5930e-02, -5.6076e-01, -1.8956e-01, -3.2339e-01,
          1.9254e-01, -2.1174e-01,  7.2889e-02,  2.4526e-03,  5.1218e-02,
         -1.1428e-01,  7.3953e-02]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
739000 特征值优化 tensor(0.5929, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.4115,  1.0297, -0.1358, -0.2925, -0.8473,  0.4314,  0.3650,  0.1368,
          0.5850,  0.8856, -1.5261,  0.2062, -0.0676, -0.0952, -0.0420,  0.1179,
          0.0605, -0.0403, -0.0227, -0.0802, -0.0432,  0.2459, -0.0468,  0.1450,
          0.1592,  0.1054,  0.1275, -0.0769, -0.0097, -0.0668, -0.0174,  0.0236,
          0.0441, -0.1167, -0.0899, -0.0350, -0.0449, -0.0411,  0.1112, -0.0301,
          0.0366, -0.1284, -0.2717,  0.0853,  0.0851,  0.0183, -0.0299, -0.2115,
          0.5626, -0.3572,  0.4620,  0.0776,  0.0810, -0.0194, -0.0367, -0.1057,
         -0.0968,  0.2173,  0.2309, -0.0176,  0.3418, -0.0156, -0.5668, -0.1600,
         -0.2634,  0.1669, -0.1909,  0.0489, -0.0566,  0.0902, -0.1778,  0.1012]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
740000 特征值优化 tensor(0.5875, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.4001,  1.0022, -0.1432, -0.2740, -0.8243,  0.4143,  0.3617,  0.1614,
          0.6059,  0.9562, -1.5072,  0.2001, -0.0716, -0.0805, -0.0275,  0.0861,
          0.0460, -0.0716, -0.0296, -0.0451, -0.0455,  0.2457, -0.0517,  0.1288,
          0.1753,  0.0988,  0.1583, -0.0553, -0.0319, -0.0673, -0.0183, -0.0033,
          0.0358, -0.1185, -0.0965, -0.0315, -0.0456, -0.0369,  0.0975, -0.0416,
          0.0328, -0.1136, -0.2647,  0.0797,  0.0792,  0.0347, -0.0439, -0.1501,
          0.5190, -0.3589,  0.4152,  0.0903,  0.0489, -0.0110, -0.0875, -0.1334,
         -0.0675,  0.2023,  0.1905,  0.0196,  0.3126,  0.0208, -0.6166, -0.1426,
         -0.2658,  0.1960, -0.1878,  0.0416, -0.0919,  0.0873, -0.2567,  0.1102]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
741000 特征值优化 tensor(0.5855, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9437e-01,  1.0088e+00, -1.4394e-01, -2.7939e-01, -8.0559e-01,
          4.1643e-01,  4.0026e-01,  1.6375e-01,  6.1407e-01,  9.8650e-01,
         -1.5469e+00,  1.8228e-01, -7.0876e-02, -8.8107e-02, -3.6378e-02,
          8.8199e-02,  3.0085e-02, -6.4329e-02, -1.7749e-02, -3.2861e-02,
         -4.6589e-02,  2.4591e-01, -5.2635e-02,  1.0008e-01,  1.8749e-01,
          8.5148e-02,  1.6513e-01, -5.6266e-02, -3.2358e-02, -6.7581e-02,
         -1.8314e-02, -6.0753e-03,  2.4486e-02, -1.1794e-01, -1.3276e-01,
          4.4437e-04, -4.1405e-02, -3.7448e-02,  1.0972e-01, -2.7042e-02,
          2.7613e-02, -1.2457e-01, -2.5704e-01,  7.6451e-02,  7.4800e-02,
          3.5334e-02, -4.3428e-02, -1.4894e-01,  5.1589e-01, -3.5878e-01,
          4.2168e-01,  8.8622e-02,  5.5585e-02, -1.8963e-02, -9.0755e-02,
         -1.2419e-01, -1.3288e-02,  1.7458e-01,  2.1191e-01,  2.9897e-02,
          3.0830e-01,  2.7871e-02, -6.0059e-01, -1.4162e-01, -3.3824e-01,
          1.9889e-01, -2.2579e-01,  6.2056e-02, -1.0178e-01,  9.1827e-02,
         -2.4718e-01,  1.4440e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
742000 特征值优化 tensor(0.6024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3880,  1.0149, -0.1318, -0.2785, -0.7965,  0.4637,  0.4594,  0.1971,
          0.5516,  0.8878, -1.5746,  0.1273, -0.0689, -0.0731, -0.0232,  0.1130,
          0.0193, -0.0206,  0.0060, -0.0294, -0.0470,  0.2460, -0.0855,  0.1205,
          0.1561,  0.0965,  0.1449, -0.0627, -0.0504, -0.0674, -0.0176, -0.0143,
          0.0270, -0.1218, -0.0454, -0.0579, -0.0321, -0.0295,  0.0876, -0.0376,
          0.0251, -0.1019, -0.2583,  0.0737,  0.0691,  0.0382, -0.0466, -0.1406,
          0.5062, -0.3892,  0.4426,  0.0854,  0.0433, -0.0136,  0.0428, -0.1722,
         -0.1540,  0.2349,  0.1415,  0.1209,  0.2834,  0.0317, -0.6102, -0.1304,
         -0.2858,  0.2400, -0.1016,  0.0215, -0.0767,  0.0782, -0.2095,  0.1030]],
       device='cuda:0') tensor(0.2041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
743000 特征值优化 tensor(0.5855, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3960,  1.0111, -0.1564, -0.2922, -0.8251,  0.4355,  0.4973,  0.2234,
          0.6150,  0.9646, -1.5852,  0.1748, -0.0712, -0.0250,  0.0234,  0.1495,
          0.0099,  0.0060,  0.0377, -0.0049, -0.0470,  0.2459, -0.0638,  0.0936,
          0.1510,  0.1041,  0.1321, -0.0850, -0.0293, -0.0666, -0.0179, -0.0216,
          0.0034, -0.1185, -0.0780, -0.0450, -0.0371, -0.0335,  0.0880, -0.0410,
          0.0267, -0.1038, -0.2574,  0.0822,  0.0694,  0.0375, -0.0450, -0.1440,
          0.5200, -0.3581,  0.4262,  0.0889,  0.0452, -0.0078, -0.0222, -0.1452,
         -0.1172,  0.2224,  0.1353,  0.1509,  0.2767,  0.0209, -0.6228, -0.1232,
         -0.2605,  0.2039, -0.1564,  0.0349, -0.0863,  0.0848, -0.2219,  0.0865]],
       device='cuda:0') tensor(0.2066, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
744000 特征值优化 tensor(0.5855, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9473e-01,  1.0042e+00, -1.5719e-01, -2.8311e-01, -8.1510e-01,
          3.7366e-01,  4.9396e-01,  2.0656e-01,  6.3074e-01,  9.8260e-01,
         -1.5548e+00,  2.1669e-01, -7.1633e-02, -2.9004e-02,  2.6912e-02,
          1.5002e-01,  2.4679e-02,  3.9560e-02,  4.8486e-02,  7.8263e-03,
         -4.5128e-02,  2.4481e-01, -5.6463e-02,  8.0012e-02,  1.5691e-01,
          9.6573e-02,  1.3170e-01, -7.5977e-02, -2.5765e-02, -6.6504e-02,
         -1.8061e-02,  1.1984e-04,  2.8579e-02, -1.1135e-01, -8.0934e-02,
         -4.1128e-02, -3.4981e-02, -3.2482e-02,  8.5986e-02, -5.1987e-02,
          2.7055e-02, -1.1207e-01, -2.5574e-01,  9.1993e-02,  5.7375e-02,
          4.1130e-02, -4.8422e-02, -1.3964e-01,  5.1649e-01, -3.6041e-01,
          4.3207e-01,  8.2480e-02,  3.9430e-02, -8.5240e-03, -4.2924e-03,
         -1.5541e-01, -1.2525e-01,  2.2750e-01,  1.3960e-01,  1.3597e-01,
          2.7177e-01,  1.5402e-02, -6.1181e-01, -1.4120e-01, -2.7826e-01,
          2.2274e-01, -1.5344e-01,  2.4650e-02, -9.5926e-02,  8.9154e-02,
         -2.1371e-01,  8.0400e-02]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
745000 特征值优化 tensor(0.5837, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9668e-01,  1.0035e+00, -1.4452e-01, -2.8093e-01, -8.1277e-01,
          4.1842e-01,  4.5289e-01,  2.1621e-01,  6.2186e-01,  9.7535e-01,
         -1.5615e+00,  1.5336e-01, -7.1810e-02, -4.9970e-03,  3.8266e-02,
          1.5798e-01,  2.9845e-02,  1.4906e-02,  5.2412e-02,  1.7771e-03,
         -4.5182e-02,  2.4591e-01, -5.3855e-02,  8.8914e-02,  1.5885e-01,
          9.6673e-02,  1.2696e-01, -8.1543e-02, -2.9590e-02, -6.6449e-02,
         -1.8151e-02, -1.6960e-02,  1.3744e-02, -1.1871e-01, -9.3044e-02,
         -3.7470e-02, -3.8048e-02, -3.5423e-02,  7.5989e-02, -4.6639e-02,
          3.0080e-02, -9.2642e-02, -2.5574e-01,  1.0762e-01,  4.3330e-02,
          4.3495e-02, -5.0291e-02, -1.5168e-01,  5.1840e-01, -3.5774e-01,
          4.1867e-01,  8.7838e-02,  3.3994e-02, -6.1355e-03, -8.4266e-04,
         -1.5596e-01, -1.0581e-01,  2.2057e-01,  1.3791e-01,  1.5150e-01,
          2.8607e-01,  1.7384e-02, -6.3114e-01, -1.2293e-01, -2.2851e-01,
          2.1332e-01, -1.6837e-01,  3.6891e-02, -8.0751e-02,  8.5399e-02,
         -2.4973e-01,  7.7194e-02]], device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
746000 特征值优化 tensor(0.5796, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3995,  1.0019, -0.1343, -0.2596, -0.8600,  0.4111,  0.4262,  0.2108,
          0.6527,  0.9897, -1.5370,  0.1518, -0.0716,  0.0217,  0.0484,  0.1547,
          0.0425,  0.0374,  0.0865,  0.0136, -0.0456,  0.2472, -0.0686,  0.0926,
          0.1173,  0.1546,  0.1176, -0.0866, -0.0320, -0.0648, -0.0177, -0.0174,
         -0.0178, -0.1182, -0.1307,  0.0085, -0.0389, -0.0335,  0.0639, -0.0392,
          0.0311, -0.0800, -0.2582,  0.1108,  0.0415,  0.0412, -0.0474, -0.1564,
          0.5201, -0.3549,  0.4104,  0.0914,  0.0520, -0.0021,  0.0225, -0.1587,
         -0.0353,  0.1871,  0.1584,  0.1281,  0.2868,  0.0040, -0.6534, -0.1190,
         -0.2440,  0.2263, -0.1590,  0.0452, -0.0802,  0.0922, -0.3057,  0.0916]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
747000 特征值优化 tensor(0.5818, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.4006,  1.0022, -0.1243, -0.2726, -0.8597,  0.4095,  0.4906,  0.2434,
          0.6496,  0.9566, -1.6238,  0.1729, -0.0715, -0.0425, -0.0094,  0.1489,
          0.0134,  0.0074,  0.0797,  0.0050, -0.0453,  0.2457, -0.0783,  0.0374,
          0.1158,  0.1236,  0.1173, -0.0556, -0.0295, -0.0659, -0.0182, -0.0205,
          0.0039, -0.1185, -0.1017, -0.0278, -0.0427, -0.0450,  0.0743, -0.0431,
          0.0404, -0.0923, -0.2588,  0.1184,  0.0352,  0.0402, -0.0474, -0.1608,
          0.5203, -0.3549,  0.4180,  0.0888,  0.0655, -0.0105, -0.0077, -0.1532,
         -0.0961,  0.2177,  0.1384,  0.1451,  0.2853,  0.0140, -0.6125, -0.1242,
         -0.2458,  0.2138, -0.1535,  0.0405, -0.0702,  0.0890, -0.2595,  0.0811]],
       device='cuda:0') tensor(0.2043, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
748000 特征值优化 tensor(0.5884, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.8926e-01,  1.0136e+00, -9.0999e-02, -3.1600e-01, -8.5048e-01,
          3.8402e-01,  5.3143e-01,  2.4698e-01,  6.1124e-01,  9.3311e-01,
         -1.6197e+00,  1.5483e-01, -7.1098e-02, -2.1065e-02,  2.0015e-02,
          1.3673e-01,  7.2453e-03,  1.7475e-02,  5.3806e-02, -6.3265e-05,
         -4.6153e-02,  2.4517e-01, -9.1624e-02,  3.4608e-02,  1.2881e-01,
          1.2691e-01,  1.0084e-01, -3.0137e-02, -2.4092e-02, -6.4533e-02,
         -1.8883e-02, -5.7718e-03, -5.7466e-03, -1.1609e-01, -6.8681e-02,
         -4.5536e-02, -5.2289e-02, -6.4761e-02,  8.1150e-02, -5.1779e-02,
          5.2545e-02, -1.0325e-01, -2.5218e-01,  1.1306e-01,  3.4065e-02,
          3.6760e-02, -4.6756e-02, -1.7716e-01,  5.1931e-01, -3.5752e-01,
          4.4757e-01,  8.3100e-02,  6.0924e-02, -1.0266e-02,  8.6323e-03,
         -1.6952e-01, -1.0388e-01,  2.2271e-01,  1.4037e-01,  1.2872e-01,
          2.6601e-01,  1.1934e-02, -5.6174e-01, -1.4303e-01, -2.6638e-01,
          2.3700e-01, -1.4220e-01,  2.5673e-02, -8.2494e-02,  8.8047e-02,
         -2.0866e-01,  6.9904e-02]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
749000 特征值优化 tensor(0.5826, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3929,  1.0075, -0.1201, -0.2717, -0.8563,  0.3794,  0.5607,  0.2837,
          0.6644,  0.9878, -1.6571,  0.2007, -0.0711, -0.0277,  0.0200,  0.1560,
         -0.0077, -0.0317,  0.0341,  0.0134, -0.0459,  0.2456, -0.0892,  0.0139,
          0.1157,  0.0969,  0.1300, -0.0488, -0.0286, -0.0657, -0.0179, -0.0047,
         -0.0193, -0.1146, -0.0777, -0.0354, -0.0578, -0.0713,  0.0924, -0.0366,
          0.0544, -0.1150, -0.2550,  0.1110,  0.0382,  0.0374, -0.0466, -0.1630,
          0.5205, -0.3549,  0.4189,  0.0880,  0.0524, -0.0031, -0.0019, -0.1674,
         -0.1401,  0.2396,  0.1260,  0.1459,  0.2649,  0.0232, -0.5822, -0.1154,
         -0.3244,  0.2096, -0.1447,  0.0285, -0.0645,  0.0759, -0.1474,  0.0710]],
       device='cuda:0') tensor(0.2065, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
750000 特征值优化 tensor(0.6110, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3957,  1.0063, -0.1214, -0.2751, -0.8557,  0.4239,  0.5434,  0.2400,
          0.6451,  0.9762, -1.6635,  0.1480, -0.0704, -0.0333, -0.0017,  0.1519,
          0.0129,  0.0031,  0.0629, -0.0101, -0.0455,  0.2417, -0.0794,  0.0412,
          0.1186,  0.0819,  0.1355, -0.0377, -0.0369, -0.0644, -0.0182, -0.0355,
         -0.0072, -0.1199, -0.0924, -0.0200, -0.0459, -0.0580,  0.0927, -0.0267,
          0.0528, -0.1181, -0.2597,  0.1216,  0.0313,  0.0379, -0.0458, -0.1585,
          0.5216, -0.3649,  0.4129,  0.0904,  0.0844, -0.0213,  0.0217, -0.1440,
         -0.0932,  0.2156,  0.1324,  0.1491,  0.2583,  0.0230, -0.5642, -0.1286,
         -0.3403,  0.2037, -0.1575,  0.0547, -0.0873,  0.0831, -0.1603,  0.1083]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
751000 特征值优化 tensor(0.5874, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3898,  1.0102, -0.0912, -0.3219, -0.8457,  0.4540,  0.4933,  0.2508,
          0.6245,  0.9507, -1.6484,  0.1280, -0.0716, -0.0332,  0.0021,  0.1546,
          0.0116,  0.0085,  0.0552,  0.0115, -0.0468,  0.2442, -0.0933,  0.0497,
          0.1208,  0.0939,  0.1254, -0.0446, -0.0332, -0.0662, -0.0177, -0.0069,
         -0.0323, -0.1194, -0.0879, -0.0372, -0.0577, -0.0647,  0.0923, -0.0207,
          0.0628, -0.1073, -0.2563,  0.1196,  0.0319,  0.0348, -0.0449, -0.1718,
          0.5225, -0.3667,  0.4316,  0.0934,  0.0538, -0.0070, -0.0050, -0.1594,
         -0.1424,  0.2307,  0.0996,  0.1684,  0.2664,  0.0098, -0.5836, -0.1374,
         -0.3340,  0.2015, -0.1493,  0.0539, -0.0674,  0.0778, -0.1330,  0.0967]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
752000 特征值优化 tensor(0.5816, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3949,  1.0096, -0.0427, -0.3446, -0.8497,  0.4216,  0.5501,  0.2483,
          0.5948,  0.9635, -1.6762,  0.0872, -0.0712, -0.0512, -0.0047,  0.1435,
          0.0091, -0.0060,  0.0633,  0.0096, -0.0461,  0.2455, -0.0753,  0.0190,
          0.1192,  0.0597,  0.1347, -0.0126, -0.0325, -0.0652, -0.0177, -0.0247,
         -0.0315, -0.1187, -0.1042, -0.0108, -0.0590, -0.0745,  0.0881, -0.0098,
          0.0686, -0.1055, -0.2570,  0.1217,  0.0301,  0.0337, -0.0441, -0.2013,
          0.5223, -0.3562,  0.4471,  0.0930,  0.0654, -0.0111,  0.0238, -0.1656,
         -0.1043,  0.2187,  0.1073,  0.1699,  0.2664,  0.0111, -0.5411, -0.1421,
         -0.3449,  0.1934, -0.1414,  0.0638, -0.0734,  0.0852, -0.1070,  0.1119]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
753000 特征值优化 tensor(0.5797, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3939,  1.0114, -0.0463, -0.3430, -0.8464,  0.4262,  0.5964,  0.2416,
          0.6001,  0.9658, -1.7300,  0.0876, -0.0709, -0.0341,  0.0044,  0.1349,
          0.0126,  0.0232,  0.0538,  0.0150, -0.0468,  0.2454, -0.0786,  0.0197,
          0.1112,  0.0699,  0.1281, -0.0242, -0.0329, -0.0648, -0.0178, -0.0494,
          0.0194, -0.1185, -0.1117, -0.0056, -0.0478, -0.0577,  0.0885, -0.0093,
          0.0573, -0.1053, -0.2567,  0.1165,  0.0351,  0.0318, -0.0435, -0.1991,
          0.5221, -0.3564,  0.4454,  0.0937,  0.0497, -0.0043,  0.0079, -0.1432,
         -0.0873,  0.2089,  0.1164,  0.1624,  0.2807,  0.0115, -0.5268, -0.1536,
         -0.3552,  0.1973, -0.1512,  0.0687, -0.0813,  0.0780, -0.1114,  0.1168]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
754000 特征值优化 tensor(0.5810, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9367e-01,  1.0067e+00, -5.6836e-02, -3.3392e-01, -8.4311e-01,
          4.3133e-01,  5.9957e-01,  2.8700e-01,  6.0690e-01,  9.7730e-01,
         -1.7169e+00,  8.1185e-02, -7.1648e-02, -7.2394e-02, -2.0362e-02,
          1.5068e-01,  1.4876e-02,  1.5740e-02,  5.7106e-02, -7.8169e-03,
         -4.5780e-02,  2.4496e-01, -8.4018e-02,  9.8889e-03,  1.0921e-01,
          7.0936e-02,  1.2497e-01, -2.9526e-02, -3.3068e-02, -6.4308e-02,
         -1.7765e-02, -5.7860e-02,  2.8859e-02, -1.1835e-01, -1.1658e-01,
          1.6895e-03, -6.4033e-02, -8.9497e-02,  9.0741e-02, -9.8037e-03,
          7.1303e-02, -1.0719e-01, -2.5540e-01,  1.1666e-01,  3.5133e-02,
          3.8749e-02, -4.7926e-02, -1.9398e-01,  5.2300e-01, -3.5591e-01,
          4.3875e-01,  9.2710e-02,  8.2327e-02, -2.1911e-02,  5.0499e-02,
         -1.6209e-01, -7.8456e-02,  2.0344e-01,  1.2604e-01,  1.5843e-01,
          2.4379e-01,  1.6294e-02, -5.3941e-01, -1.2166e-01, -3.4492e-01,
          1.8951e-01, -1.5467e-01,  6.5988e-02, -8.1342e-02,  9.3230e-02,
         -1.2465e-01,  1.2706e-01]], device='cuda:0') tensor(0.2039, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
755000 特征值优化 tensor(0.5811, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3925,  1.0096, -0.0409, -0.3462, -0.8430,  0.4229,  0.6069,  0.2933,
          0.5907,  0.9614, -1.7256,  0.0751, -0.0715, -0.0511, -0.0041,  0.1404,
          0.0114,  0.0073,  0.0565,  0.0090, -0.0463,  0.2456, -0.0862,  0.0092,
          0.1073,  0.0739,  0.1210, -0.0304, -0.0312, -0.0651, -0.0176, -0.0418,
         -0.0076, -0.1186, -0.1102, -0.0074, -0.0659, -0.0946,  0.0940, -0.0066,
          0.0695, -0.1101, -0.2556,  0.1192,  0.0324,  0.0342, -0.0446, -0.2035,
          0.5213, -0.3543,  0.4540,  0.0902,  0.0715, -0.0163,  0.0612, -0.1738,
         -0.0798,  0.2062,  0.1144,  0.1681,  0.2564,  0.0102, -0.5225, -0.1249,
         -0.3520,  0.1920, -0.1563,  0.0671, -0.0744,  0.0938, -0.1140,  0.1225]],
       device='cuda:0') tensor(0.2081, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
756000 特征值优化 tensor(0.5835, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9101e-01,  1.0078e+00, -4.2943e-02, -3.4363e-01, -8.4816e-01,
          4.1489e-01,  5.8383e-01,  2.8153e-01,  5.9112e-01,  9.6725e-01,
         -1.7035e+00,  9.1225e-02, -7.0776e-02, -4.2118e-02,  4.6966e-03,
          1.4398e-01,  1.0013e-02,  8.1989e-05,  6.4888e-02,  1.7771e-03,
         -4.5722e-02,  2.4551e-01, -7.5586e-02,  1.1375e-02,  1.1184e-01,
          6.5179e-02,  1.2917e-01, -2.1512e-02, -2.9098e-02, -6.4918e-02,
         -1.7640e-02, -2.8443e-02, -1.5129e-02, -1.1883e-01, -9.6121e-02,
         -2.9278e-02, -6.4080e-02, -8.9217e-02,  9.2271e-02, -1.0245e-02,
          7.1277e-02, -1.0972e-01, -2.5602e-01,  1.1999e-01,  2.9815e-02,
          3.5063e-02, -4.6215e-02, -2.0157e-01,  5.2025e-01, -3.5566e-01,
          4.5668e-01,  8.8575e-02,  6.6306e-02, -1.2239e-02,  2.7908e-02,
         -1.6927e-01, -9.7507e-02,  2.1733e-01,  1.0701e-01,  1.6810e-01,
          2.5850e-01,  6.2147e-03, -5.3529e-01, -1.2630e-01, -3.4914e-01,
          1.9476e-01, -1.5212e-01,  6.2472e-02, -6.8129e-02,  9.1214e-02,
         -9.6432e-02,  1.0850e-01]], device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
757000 特征值优化 tensor(0.5841, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3921,  1.0149, -0.0487, -0.3424, -0.8486,  0.4214,  0.5740,  0.2728,
          0.6005,  0.9641, -1.7058,  0.1071, -0.0709, -0.0218,  0.0237,  0.1416,
          0.0087,  0.0091,  0.0806, -0.0187, -0.0473,  0.2453, -0.0771,  0.0166,
          0.1117,  0.0665,  0.1298, -0.0260, -0.0322, -0.0646, -0.0177, -0.0171,
         -0.0159, -0.1193, -0.0933, -0.0360, -0.0610, -0.0810,  0.0904, -0.0142,
          0.0716, -0.1085, -0.2563,  0.1103,  0.0410,  0.0322, -0.0431, -0.1975,
          0.5229, -0.3575,  0.4471,  0.0923,  0.0640, -0.0111,  0.0176, -0.1617,
         -0.1164,  0.2251,  0.1022,  0.1709,  0.2583,  0.0075, -0.5520, -0.1254,
         -0.3439,  0.1975, -0.1474,  0.0613, -0.0639,  0.0868, -0.0908,  0.0985]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
758000 特征值优化 tensor(0.5789, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3950,  1.0031, -0.0687, -0.3221, -0.8485,  0.4180,  0.5976,  0.2892,
          0.6098,  0.9742, -1.7420,  0.1435, -0.0708, -0.0244,  0.0435,  0.1906,
         -0.0076, -0.0643,  0.0030,  0.0172, -0.0452,  0.2435, -0.0793,  0.0235,
          0.1225,  0.0631,  0.1337, -0.0076, -0.0329, -0.0642, -0.0181,  0.0264,
         -0.0276, -0.1160, -0.0763, -0.0124, -0.0580, -0.0836,  0.0945, -0.0268,
          0.0684, -0.1166, -0.2571,  0.1114,  0.0400,  0.0406, -0.0493, -0.1861,
          0.5250, -0.3560,  0.4325,  0.0908,  0.0288,  0.0074, -0.0263, -0.1553,
         -0.1811,  0.2547,  0.0971,  0.1765,  0.2739,  0.0057, -0.5476, -0.1127,
         -0.3327,  0.2185, -0.1060,  0.0215, -0.0457,  0.0726, -0.0706,  0.0512]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
759000 特征值优化 tensor(0.5933, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9101e-01,  1.0053e+00, -6.5915e-02, -3.2340e-01, -8.3809e-01,
          4.3671e-01,  5.7021e-01,  2.8415e-01,  6.0022e-01,  9.3906e-01,
         -1.7228e+00,  1.2015e-01, -6.9452e-02, -3.0271e-02,  6.3067e-03,
          1.5496e-01, -9.7233e-03, -3.9022e-02,  2.5357e-02,  1.5516e-03,
         -4.5382e-02,  2.4144e-01, -9.6597e-02,  2.2947e-02,  1.1747e-01,
          7.4983e-02,  1.3148e-01, -2.6141e-02, -2.9858e-02, -6.2170e-02,
         -1.8163e-02,  8.6955e-04, -2.5632e-02, -1.1947e-01, -7.9978e-02,
         -5.0856e-02, -6.1712e-02, -8.5871e-02,  9.0172e-02, -1.7059e-02,
          7.0701e-02, -1.0566e-01, -2.5697e-01,  1.1280e-01,  3.2531e-02,
          3.9468e-02, -4.9518e-02, -1.8023e-01,  5.2570e-01, -3.6814e-01,
          4.3672e-01,  9.0924e-02,  5.5442e-02, -1.0146e-02,  2.8122e-03,
         -1.7284e-01, -1.4275e-01,  2.3499e-01,  9.4415e-02,  1.5760e-01,
          2.4051e-01,  2.8821e-02, -5.4737e-01, -1.1962e-01, -3.6209e-01,
          2.1664e-01, -1.5338e-01,  6.1670e-02, -4.3495e-02,  6.0257e-02,
         -9.4908e-02,  9.1842e-02]], device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
760000 特征值优化 tensor(0.5901, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9210e-01,  1.0089e+00, -6.1953e-02, -3.3590e-01, -8.4302e-01,
          4.3234e-01,  5.6971e-01,  2.8245e-01,  6.0322e-01,  9.3275e-01,
         -1.7108e+00,  1.2462e-01, -7.1296e-02, -3.6438e-02,  8.3010e-03,
          1.4680e-01, -5.5722e-03, -1.5553e-02,  1.8284e-02,  5.7053e-03,
         -4.5906e-02,  2.4314e-01, -9.5685e-02,  2.9830e-02,  1.2387e-01,
          6.6893e-02,  1.3480e-01, -2.5313e-02, -2.7540e-02, -6.4933e-02,
         -1.8168e-02, -1.9520e-03, -2.5713e-02, -1.2023e-01, -8.1819e-02,
         -5.3002e-02, -6.6332e-02, -8.4845e-02,  9.3855e-02, -1.6444e-02,
          7.3525e-02, -1.1060e-01, -2.5225e-01,  1.1835e-01,  2.8559e-02,
          3.9314e-02, -4.7832e-02, -1.8530e-01,  5.2490e-01, -3.6766e-01,
          4.3865e-01,  9.1401e-02,  6.3700e-02, -1.3706e-02,  1.7101e-04,
         -1.7258e-01, -1.3614e-01,  2.3193e-01,  9.1978e-02,  1.5846e-01,
          2.4085e-01,  2.3721e-02, -5.6742e-01, -1.1768e-01, -3.6152e-01,
          2.1092e-01, -1.5360e-01,  5.9577e-02, -4.7332e-02,  7.2550e-02,
         -1.0139e-01,  9.2532e-02]], device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
761000 特征值优化 tensor(0.5855, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.8669e-01,  1.0078e+00, -5.6043e-02, -3.4883e-01, -8.5091e-01,
          4.2975e-01,  5.9033e-01,  2.8121e-01,  6.1016e-01,  9.4376e-01,
         -1.7462e+00,  1.2328e-01, -7.0945e-02, -2.6012e-02,  1.0645e-02,
          1.5053e-01,  8.1390e-04, -3.9929e-03,  1.9184e-02,  2.2917e-02,
         -4.7490e-02,  2.4379e-01, -8.5924e-02,  2.5994e-02,  1.2266e-01,
          6.1218e-02,  1.3657e-01, -2.4167e-02, -3.1809e-02, -6.4869e-02,
         -1.8759e-02, -8.9613e-03, -1.4474e-02, -1.1940e-01, -8.5369e-02,
         -4.2857e-02, -5.7264e-02, -7.7283e-02,  9.5573e-02, -1.5824e-02,
          6.5021e-02, -1.1130e-01, -2.5449e-01,  1.2251e-01,  2.5615e-02,
          3.4531e-02, -4.4206e-02, -1.9229e-01,  5.2652e-01, -3.6085e-01,
          4.4810e-01,  8.9533e-02,  6.2920e-02, -1.1459e-02, -3.3527e-03,
         -1.5607e-01, -1.3273e-01,  2.3079e-01,  9.7663e-02,  1.6268e-01,
          2.4121e-01,  2.8235e-02, -5.6514e-01, -1.2026e-01, -3.5273e-01,
          2.0103e-01, -1.4763e-01,  5.5016e-02, -4.5166e-02,  6.9962e-02,
         -9.5893e-02,  9.5067e-02]], device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
762000 特征值优化 tensor(0.5837, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3934,  1.0123, -0.0523, -0.3479, -0.8515,  0.4240,  0.5895,  0.2507,
          0.5993,  0.9353, -1.7426,  0.1091, -0.0708, -0.0294,  0.0094,  0.1411,
          0.0025,  0.0071,  0.0314,  0.0258, -0.0464,  0.2447, -0.0819,  0.0181,
          0.1210,  0.0616,  0.1345, -0.0221, -0.0316, -0.0657, -0.0185, -0.0182,
         -0.0112, -0.1190, -0.0921, -0.0390, -0.0541, -0.0708,  0.0960, -0.0133,
          0.0625, -0.1113, -0.2564,  0.1238,  0.0264,  0.0317, -0.0430, -0.1947,
          0.5237, -0.3598,  0.4470,  0.0908,  0.0681, -0.0135,  0.0140, -0.1576,
         -0.1174,  0.2248,  0.1040,  0.1647,  0.2469,  0.0241, -0.5519, -0.1303,
         -0.3460,  0.1954, -0.1445,  0.0574, -0.0488,  0.0738, -0.0957,  0.1032]],
       device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
763000 特征值优化 tensor(0.5835, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3951,  1.0113, -0.0517, -0.3452, -0.8517,  0.4233,  0.5890,  0.2400,
          0.5990,  0.9457, -1.7436,  0.1028, -0.0712, -0.0311,  0.0064,  0.1406,
          0.0030,  0.0078,  0.0335,  0.0224, -0.0464,  0.2446, -0.0799,  0.0124,
          0.1212,  0.0584,  0.1350, -0.0193, -0.0316, -0.0655, -0.0181, -0.0203,
         -0.0128, -0.1190, -0.0933, -0.0361, -0.0519, -0.0667,  0.0947, -0.0131,
          0.0607, -0.1113, -0.2565,  0.1205,  0.0307,  0.0339, -0.0439, -0.1957,
          0.5228, -0.3591,  0.4458,  0.0914,  0.0693, -0.0141,  0.0209, -0.1567,
         -0.1115,  0.2219,  0.1050,  0.1686,  0.2470,  0.0236, -0.5490, -0.1352,
         -0.3449,  0.1947, -0.1442,  0.0575, -0.0497,  0.0743, -0.0939,  0.1023]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
764000 特征值优化 tensor(0.5823, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3965,  1.0101, -0.0501, -0.3438, -0.8519,  0.4196,  0.5963,  0.2182,
          0.5979,  0.9464, -1.7449,  0.0922, -0.0719, -0.0303,  0.0058,  0.1357,
          0.0064,  0.0167,  0.0445,  0.0196, -0.0469,  0.2453, -0.0784,  0.0129,
          0.1187,  0.0585,  0.1363, -0.0205, -0.0319, -0.0657, -0.0183, -0.0287,
         -0.0105, -0.1186, -0.1001, -0.0281, -0.0502, -0.0567,  0.0952, -0.0125,
          0.0577, -0.1121, -0.2571,  0.1179,  0.0341,  0.0336, -0.0438, -0.1974,
          0.5214, -0.3574,  0.4451,  0.0921,  0.0724, -0.0157,  0.0291, -0.1517,
         -0.0960,  0.2146,  0.1117,  0.1677,  0.2485,  0.0232, -0.5447, -0.1472,
         -0.3459,  0.1921, -0.1459,  0.0576, -0.0578,  0.0762, -0.1011,  0.1108]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
765000 特征值优化 tensor(0.5812, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3961,  1.0086, -0.0493, -0.3436, -0.8441,  0.4265,  0.6063,  0.1902,
          0.5977,  0.9470, -1.7428,  0.0750, -0.0716, -0.0503, -0.0076,  0.1337,
          0.0094,  0.0257,  0.0516,  0.0104, -0.0462,  0.2454, -0.0790,  0.0185,
          0.1156,  0.0641,  0.1354, -0.0249, -0.0322, -0.0647, -0.0178, -0.0503,
         -0.0083, -0.1185, -0.1121, -0.0118, -0.0465, -0.0496,  0.0955, -0.0104,
          0.0554, -0.1134, -0.2567,  0.1224,  0.0302,  0.0328, -0.0443, -0.1971,
          0.5215, -0.3568,  0.4444,  0.0925,  0.0813, -0.0214,  0.0515, -0.1460,
         -0.0769,  0.2044,  0.1197,  0.1638,  0.2458,  0.0224, -0.5362, -0.1583,
         -0.3523,  0.1916, -0.1545,  0.0633, -0.0747,  0.0855, -0.1168,  0.1254]],
       device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
766000 特征值优化 tensor(0.5804, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9321e-01,  1.0080e+00, -6.4018e-02, -3.2226e-01, -8.4656e-01,
          3.8870e-01,  5.9495e-01,  2.5285e-01,  6.1582e-01,  9.6531e-01,
         -1.7214e+00,  1.4019e-01, -7.1629e-02, -3.2594e-02,  1.4894e-02,
          1.2951e-01, -1.1719e-02, -2.3379e-02,  5.9209e-02, -6.5655e-03,
         -4.6028e-02,  2.4361e-01, -8.8623e-02,  7.5809e-03,  1.1389e-01,
          7.2539e-02,  1.2432e-01, -2.2223e-02, -3.2493e-02, -6.3371e-02,
         -1.7759e-02,  1.7534e-03, -1.2579e-02, -1.1499e-01, -8.4243e-02,
         -2.1270e-02, -7.4403e-02, -9.2218e-02,  9.7655e-02, -2.5433e-02,
          8.0413e-02, -1.1989e-01, -2.5609e-01,  1.1990e-01,  3.1409e-02,
          3.4982e-02, -4.5519e-02, -1.8760e-01,  5.2488e-01, -3.5541e-01,
          4.3473e-01,  9.1230e-02,  4.2067e-02, -5.7907e-04, -7.1210e-03,
         -1.7011e-01, -1.4711e-01,  2.4255e-01,  1.0840e-01,  1.6259e-01,
          2.3851e-01,  9.4852e-03, -5.6375e-01, -1.0923e-01, -3.4227e-01,
          2.1022e-01, -1.2982e-01,  3.0304e-02, -2.6898e-02,  8.0269e-02,
         -7.2461e-02,  6.7738e-02]], device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
767000 特征值优化 tensor(0.6256, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9204e-01,  1.0054e+00, -6.6821e-02, -3.1980e-01, -8.5071e-01,
          4.0372e-01,  5.8016e-01,  2.6146e-01,  6.1515e-01,  9.5884e-01,
         -1.7269e+00,  1.3952e-01, -7.1448e-02, -2.7425e-02,  1.6446e-02,
          1.4327e-01, -1.1508e-02, -4.9899e-02,  5.5084e-02,  7.4321e-04,
         -4.6424e-02,  2.4154e-01, -9.9432e-02, -5.4138e-04,  1.0977e-01,
          7.6232e-02,  1.1563e-01, -2.2966e-02, -3.4998e-02, -6.2178e-02,
         -1.7837e-02,  3.4138e-03, -3.6041e-02, -1.1705e-01, -8.1409e-02,
         -2.0184e-02, -7.3520e-02, -9.0962e-02,  9.4861e-02, -2.3658e-02,
          8.2186e-02, -1.1406e-01, -2.5644e-01,  1.1901e-01,  3.0616e-02,
          3.8275e-02, -4.6332e-02, -1.8654e-01,  5.2679e-01, -3.5970e-01,
          4.3444e-01,  8.9929e-02,  4.4134e-02, -1.6461e-03, -5.8842e-04,
         -1.6088e-01, -1.6434e-01,  2.4966e-01,  1.0290e-01,  1.7162e-01,
          2.3712e-01,  9.7036e-03, -5.7141e-01, -1.0119e-01, -3.3926e-01,
          2.1172e-01, -1.1556e-01,  3.0572e-02, -2.3998e-02,  7.8718e-02,
         -7.0728e-02,  6.5922e-02]], device='cuda:0') tensor(0.2041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
768000 特征值优化 tensor(0.6386, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9564e-01,  1.0028e+00, -6.8134e-02, -3.2022e-01, -8.5473e-01,
          4.0261e-01,  5.7404e-01,  2.5756e-01,  6.1694e-01,  9.6574e-01,
         -1.7283e+00,  1.4789e-01, -7.0589e-02, -3.2385e-02,  1.7286e-02,
          1.4038e-01, -1.4440e-02, -5.4683e-02,  6.1120e-02,  2.3794e-03,
         -4.4838e-02,  2.4366e-01, -1.0020e-01, -2.0767e-03,  1.1331e-01,
          7.4990e-02,  1.1773e-01, -2.0652e-02, -3.2475e-02, -6.3282e-02,
         -1.8164e-02,  5.6221e-03, -4.0386e-02, -1.1565e-01, -8.0846e-02,
         -1.8031e-02, -8.1069e-02, -9.7531e-02,  9.3428e-02, -2.3893e-02,
          8.6269e-02, -1.1477e-01, -2.5576e-01,  1.1688e-01,  3.3777e-02,
          4.0389e-02, -4.6777e-02, -1.8508e-01,  5.2578e-01, -3.5535e-01,
          4.3169e-01,  9.1048e-02,  4.3213e-02,  1.1005e-03, -4.7823e-03,
         -1.5983e-01, -1.6133e-01,  2.4856e-01,  1.0711e-01,  1.6866e-01,
          2.4175e-01,  8.5587e-03, -5.8125e-01, -9.4134e-02, -3.3920e-01,
          2.1031e-01, -1.0970e-01,  2.4476e-02, -2.0954e-02,  8.1161e-02,
         -6.2758e-02,  5.6588e-02]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
769000 特征值优化 tensor(0.5836, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3923,  1.0121, -0.0519, -0.3444, -0.8505,  0.4222,  0.5923,  0.2148,
          0.6002,  0.9474, -1.7258,  0.0974, -0.0710, -0.0402,  0.0025,  0.1372,
          0.0038,  0.0052,  0.0425,  0.0245, -0.0473,  0.2443, -0.0795,  0.0136,
          0.1193,  0.0593,  0.1352, -0.0199, -0.0314, -0.0658, -0.0179, -0.0263,
         -0.0234, -0.1191, -0.0961, -0.0331, -0.0581, -0.0710,  0.0945, -0.0117,
          0.0666, -0.1118, -0.2562,  0.1202,  0.0308,  0.0316, -0.0428, -0.1949,
          0.5224, -0.3596,  0.4454,  0.0912,  0.0732, -0.0156,  0.0151, -0.1574,
         -0.1086,  0.2205,  0.1028,  0.1685,  0.2298,  0.0181, -0.5527, -0.1320,
         -0.3503,  0.1936, -0.1470,  0.0600, -0.0454,  0.0827, -0.0916,  0.1053]],
       device='cuda:0') tensor(0.2069, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
770000 特征值优化 tensor(0.5820, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3959,  1.0089, -0.0494, -0.3430, -0.8506,  0.4197,  0.6024,  0.1900,
          0.5991,  0.9451, -1.7396,  0.0851, -0.0717, -0.0406, -0.0027,  0.1353,
          0.0092,  0.0244,  0.0495,  0.0164, -0.0462,  0.2454, -0.0776,  0.0151,
          0.1187,  0.0597,  0.1362, -0.0212, -0.0324, -0.0649, -0.0177, -0.0402,
         -0.0199, -0.1186, -0.1052, -0.0224, -0.0511, -0.0567,  0.0944, -0.0106,
          0.0594, -0.1121, -0.2575,  0.1220,  0.0308,  0.0336, -0.0443, -0.1981,
          0.5211, -0.3567,  0.4448,  0.0928,  0.0743, -0.0158,  0.0289, -0.1496,
         -0.0929,  0.2134,  0.1109,  0.1673,  0.2348,  0.0196, -0.5495, -0.1454,
         -0.3519,  0.1925, -0.1487,  0.0620, -0.0505,  0.0821, -0.1002,  0.1125]],
       device='cuda:0') tensor(0.2045, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
771000 特征值优化 tensor(0.5960, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3917,  1.0125, -0.0468, -0.3387, -0.8561,  0.4030,  0.6070,  0.1919,
          0.5956,  0.9546, -1.7161,  0.1150, -0.0710, -0.0446, -0.0089,  0.1343,
          0.0080,  0.0126,  0.0553, -0.0049, -0.0460,  0.2434, -0.0861,  0.0144,
          0.1146,  0.0558,  0.1336, -0.0173, -0.0376, -0.0638, -0.0186, -0.0304,
         -0.0119, -0.1172, -0.0723, -0.0425, -0.0580, -0.0750,  0.0965, -0.0226,
          0.0713, -0.1189, -0.2566,  0.1204,  0.0296,  0.0350, -0.0472, -0.1847,
          0.5235, -0.3706,  0.4481,  0.0893,  0.0728, -0.0159,  0.0195, -0.1587,
         -0.1039,  0.2188,  0.1129,  0.1536,  0.2096,  0.0306, -0.5259, -0.1349,
         -0.3684,  0.2194, -0.1662,  0.0616, -0.0407,  0.0736, -0.0796,  0.0992]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
772000 特征值优化 tensor(0.5815, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3901,  1.0071, -0.0610, -0.3256, -0.8480,  0.3851,  0.5988,  0.2204,
          0.6181,  0.9678, -1.7187,  0.1342, -0.0709, -0.0412,  0.0085,  0.1335,
         -0.0111, -0.0158,  0.0547, -0.0087, -0.0453,  0.2443, -0.0872,  0.0051,
          0.1122,  0.0665,  0.1293, -0.0244, -0.0318, -0.0645, -0.0176, -0.0033,
         -0.0219, -0.1148, -0.0853, -0.0231, -0.0747, -0.0891,  0.0975, -0.0246,
          0.0824, -0.1203, -0.2550,  0.1194,  0.0300,  0.0363, -0.0477, -0.1904,
          0.5242, -0.3565,  0.4399,  0.0906,  0.0490, -0.0034,  0.0036, -0.1725,
         -0.1379,  0.2384,  0.1113,  0.1575,  0.2246,  0.0095, -0.5582, -0.1136,
         -0.3505,  0.2115, -0.1368,  0.0360, -0.0220,  0.0843, -0.0734,  0.0703]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
773000 特征值优化 tensor(0.5779, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9406e-01,  1.0016e+00, -6.7542e-02, -3.2044e-01, -8.4950e-01,
          4.0262e-01,  5.8645e-01,  2.3903e-01,  6.2509e-01,  9.7111e-01,
         -1.7404e+00,  1.4454e-01, -7.1216e-02, -2.5867e-02,  2.2099e-02,
          1.3734e-01, -1.9046e-02, -5.9429e-02,  5.8777e-02,  4.4683e-03,
         -4.5220e-02,  2.4423e-01, -1.0018e-01,  1.2370e-03,  1.1135e-01,
          7.8323e-02,  1.1439e-01, -2.0305e-02, -3.2074e-02, -6.3695e-02,
         -1.8186e-02,  9.2363e-03, -3.0485e-02, -1.1558e-01, -8.0645e-02,
         -1.3594e-02, -8.5241e-02, -9.8998e-02,  9.4530e-02, -2.6878e-02,
          8.9536e-02, -1.1635e-01, -2.5582e-01,  1.2039e-01,  2.8259e-02,
          3.7533e-02, -4.6937e-02, -1.8511e-01,  5.2512e-01, -3.5517e-01,
          4.3121e-01,  9.1736e-02,  3.2765e-02,  5.4516e-03, -1.7102e-02,
         -1.6119e-01, -1.7069e-01,  2.5204e-01,  1.0623e-01,  1.7316e-01,
          2.3176e-01,  4.2578e-03, -5.8542e-01, -9.3796e-02, -3.3494e-01,
          2.0956e-01, -1.0582e-01,  1.9511e-02, -4.5393e-03,  7.9952e-02,
         -6.6560e-02,  5.5135e-02]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
774000 特征值优化 tensor(0.5846, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.8900e-01,  1.0106e+00, -5.2699e-02, -3.4588e-01, -8.5215e-01,
          4.2666e-01,  5.9268e-01,  2.0865e-01,  6.0981e-01,  9.4317e-01,
         -1.7438e+00,  1.0889e-01, -7.0862e-02, -2.4825e-02,  1.1730e-02,
          1.4514e-01,  4.5831e-03,  4.0036e-03,  3.2026e-02,  2.1255e-02,
         -4.7001e-02,  2.4422e-01, -8.0503e-02,  1.7413e-02,  1.1877e-01,
          6.0088e-02,  1.3445e-01, -2.1830e-02, -3.1070e-02, -6.5680e-02,
         -1.8278e-02, -1.2381e-02, -1.8520e-04, -1.1925e-01, -9.0814e-02,
         -3.9889e-02, -6.0826e-02, -7.2863e-02,  9.4943e-02, -1.5485e-02,
          6.9751e-02, -1.1272e-01, -2.5575e-01,  1.2097e-01,  2.6656e-02,
          3.1687e-02, -4.3972e-02, -1.9368e-01,  5.2329e-01, -3.6005e-01,
          4.4699e-01,  9.0633e-02,  6.3249e-02, -1.1079e-02, -1.1420e-02,
         -1.5482e-01, -1.2206e-01,  2.2629e-01,  1.0102e-01,  1.6781e-01,
          2.2422e-01,  1.3927e-02, -5.6300e-01, -1.2438e-01, -3.4832e-01,
          1.9717e-01, -1.4328e-01,  5.6818e-02, -2.2364e-02,  8.0735e-02,
         -9.2787e-02,  1.0123e-01]], device='cuda:0') tensor(0.2029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
775000 特征值优化 tensor(0.5840, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9505e-01,  1.0060e+00, -6.4067e-02, -3.2730e-01, -8.3342e-01,
          3.7648e-01,  6.2747e-01,  2.2165e-01,  6.1559e-01,  9.5078e-01,
         -1.7525e+00,  1.3207e-01, -7.1220e-02, -1.9820e-02,  2.0139e-02,
          1.2176e-01, -1.4151e-02, -2.4065e-02,  7.5546e-02,  2.1933e-02,
         -4.6009e-02,  2.4405e-01, -7.8109e-02,  1.5459e-02,  1.1820e-01,
          6.6928e-02,  1.3103e-01, -1.7106e-02, -3.1341e-02, -6.5133e-02,
         -1.4850e-02,  6.4333e-03,  5.5015e-03, -1.1408e-01, -8.8032e-02,
         -2.1279e-02, -7.0372e-02, -8.8707e-02,  1.0130e-01, -2.9771e-02,
          7.7638e-02, -1.3328e-01, -2.5704e-01,  1.3043e-01,  2.0794e-02,
          3.1728e-02, -4.4185e-02, -1.8414e-01,  5.2275e-01, -3.6004e-01,
          4.4333e-01,  8.6527e-02,  5.0184e-02, -2.2405e-03,  4.6446e-03,
         -1.6632e-01, -1.2757e-01,  2.3351e-01,  1.2172e-01,  1.5168e-01,
          2.2727e-01, -1.0622e-03, -5.4045e-01, -1.1608e-01, -3.5095e-01,
          2.1665e-01, -1.4594e-01,  3.8722e-02, -2.0669e-02,  9.6097e-02,
         -9.0086e-02,  7.8760e-02]], device='cuda:0') tensor(0.2047, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
776000 特征值优化 tensor(0.5820, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9708e-01,  1.0079e+00, -5.1771e-02, -3.4167e-01, -8.2593e-01,
          4.3203e-01,  6.3317e-01,  2.3523e-01,  5.9937e-01,  9.4273e-01,
         -1.8179e+00,  6.1339e-02, -7.1431e-02,  1.2246e-02,  5.5010e-02,
          1.4341e-01,  1.6561e-02,  3.0589e-02,  4.4258e-02,  2.7736e-02,
         -4.6505e-02,  2.4530e-01, -7.9043e-02,  1.4803e-02,  1.1441e-01,
          6.1664e-02,  1.3622e-01, -2.4322e-02, -3.1769e-02, -6.5009e-02,
         -1.4671e-02, -4.5700e-02, -3.7303e-02, -1.1879e-01, -1.1804e-01,
         -8.2312e-03, -6.0301e-02, -8.2026e-02,  9.7947e-02, -8.3342e-03,
          6.8651e-02, -1.2041e-01, -2.5754e-01,  1.3459e-01,  1.8655e-02,
          2.9542e-02, -4.2137e-02, -1.9641e-01,  5.2123e-01, -3.5723e-01,
          4.4360e-01,  9.2881e-02,  4.3722e-02, -6.2575e-04,  3.6694e-02,
         -1.6381e-01, -7.6177e-02,  2.0201e-01,  1.1938e-01,  1.6072e-01,
          2.4670e-01,  7.6057e-04, -5.3318e-01, -1.1646e-01, -3.6046e-01,
          1.9076e-01, -1.6052e-01,  6.4961e-02, -1.5249e-02,  8.8529e-02,
         -1.1042e-01,  1.2066e-01]], device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
777000 特征值优化 tensor(0.5829, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3953,  1.0092, -0.0480, -0.3442, -0.8297,  0.4234,  0.6298,  0.2528,
          0.5928,  0.9428, -1.8062,  0.0724, -0.0711, -0.0087,  0.0425,  0.1374,
          0.0043,  0.0113,  0.0333,  0.0307, -0.0466,  0.2453, -0.0815,  0.0113,
          0.1209,  0.0572,  0.1357, -0.0183, -0.0320, -0.0657, -0.0150, -0.0294,
         -0.0135, -0.1186, -0.0996, -0.0281, -0.0618, -0.0829,  0.0976, -0.0098,
          0.0693, -0.1194, -0.2572,  0.1357,  0.0159,  0.0283, -0.0415, -0.1989,
          0.5215, -0.3578,  0.4465,  0.0920,  0.0478, -0.0020,  0.0145, -0.1621,
         -0.1004,  0.2167,  0.1074,  0.1682,  0.2361,  0.0110, -0.5426, -0.1141,
         -0.3515,  0.1928, -0.1484,  0.0603, -0.0119,  0.0776, -0.0852,  0.1000]],
       device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
778000 特征值优化 tensor(0.5800, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3968,  1.0055, -0.0704, -0.3207, -0.8180,  0.4010,  0.6316,  0.2214,
          0.6064,  0.9656, -1.7810,  0.1133, -0.0719, -0.0321,  0.0127,  0.1167,
         -0.0294, -0.0605,  0.0676,  0.0365, -0.0459,  0.2443, -0.0843,  0.0308,
          0.1243,  0.0611,  0.1249, -0.0061, -0.0326, -0.0643, -0.0148,  0.0281,
          0.0236, -0.1154, -0.0838, -0.0127, -0.0612, -0.0785,  0.0971, -0.0281,
          0.0705, -0.1251, -0.2574,  0.1359,  0.0173,  0.0296, -0.0418, -0.1846,
          0.5238, -0.3554,  0.4310,  0.0920,  0.0310,  0.0033, -0.0297, -0.1488,
         -0.1717,  0.2528,  0.1052,  0.1723,  0.2464, -0.0037, -0.5461, -0.1165,
         -0.3276,  0.2105, -0.1136,  0.0205, -0.0197,  0.0915, -0.0546,  0.0515]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
779000 特征值优化 tensor(0.5848, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9241e-01,  1.0117e+00, -5.6136e-02, -3.3227e-01, -8.1261e-01,
          3.8533e-01,  6.3849e-01,  2.3314e-01,  6.1274e-01,  9.6830e-01,
         -1.7692e+00,  1.1029e-01, -7.0675e-02, -1.3653e-02,  2.7481e-02,
          1.1867e-01, -1.5097e-02, -3.7972e-02,  8.0863e-02,  2.6143e-02,
         -4.6364e-02,  2.4447e-01, -7.2953e-02,  1.4833e-02,  1.2116e-01,
          5.8183e-02,  1.3560e-01, -1.1694e-02, -2.9579e-02, -6.4955e-02,
         -1.4893e-02, -5.0715e-04, -4.5901e-03, -1.1589e-01, -8.7858e-02,
         -2.2443e-02, -6.4347e-02, -8.4884e-02,  1.0015e-01, -2.2487e-02,
          7.2815e-02, -1.2796e-01, -2.5541e-01,  1.3092e-01,  1.8796e-02,
          2.8795e-02, -4.2206e-02, -1.9286e-01,  5.2228e-01, -3.5775e-01,
          4.4627e-01,  8.7626e-02,  4.5820e-02, -5.5446e-03,  2.7060e-02,
         -1.7273e-01, -1.2072e-01,  2.3065e-01,  1.1535e-01,  1.5518e-01,
          2.2755e-01,  1.1442e-02, -5.2566e-01, -1.2267e-01, -3.6899e-01,
          2.1741e-01, -1.5757e-01,  4.4597e-02, -2.6108e-02,  8.2491e-02,
         -6.5960e-02,  7.2479e-02]], device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
780000 特征值优化 tensor(0.5820, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9309e-01,  1.0101e+00, -4.7392e-02, -3.4189e-01, -8.0775e-01,
          4.2391e-01,  6.3195e-01,  2.5454e-01,  5.9794e-01,  9.5195e-01,
         -1.8098e+00,  5.7084e-02, -7.1430e-02, -4.2374e-03,  5.4114e-02,
          1.3503e-01,  9.5555e-03,  2.8121e-02,  4.1350e-02,  2.7175e-02,
         -4.6396e-02,  2.4566e-01, -7.8946e-02,  1.6418e-02,  1.1012e-01,
          7.0369e-02,  1.2806e-01, -3.0189e-02, -3.3109e-02, -6.4750e-02,
         -1.4825e-02, -3.7551e-02, -2.1557e-02, -1.1876e-01, -1.1008e-01,
         -1.5086e-02, -5.9940e-02, -8.3191e-02,  9.8699e-02, -8.3385e-03,
          6.8077e-02, -1.2052e-01, -2.5540e-01,  1.3501e-01,  1.6414e-02,
          2.8987e-02, -4.2503e-02, -1.9900e-01,  5.2288e-01, -3.5642e-01,
          4.4339e-01,  9.3005e-02,  3.4187e-02, -7.3805e-04,  3.3902e-02,
         -1.6308e-01, -8.3112e-02,  2.0765e-01,  1.1445e-01,  1.6639e-01,
          2.5013e-01,  3.7651e-03, -5.3071e-01, -1.1757e-01, -3.5974e-01,
          1.9433e-01, -1.5762e-01,  6.2515e-02, -2.2674e-02,  8.4560e-02,
         -9.3401e-02,  1.0992e-01]], device='cuda:0') tensor(0.2108, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
781000 特征值优化 tensor(0.5845, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9307e-01,  1.0086e+00, -4.7826e-02, -3.4290e-01, -8.1017e-01,
          4.2487e-01,  6.1732e-01,  2.5249e-01,  5.9106e-01,  9.4221e-01,
         -1.7749e+00,  6.7045e-02, -7.0893e-02, -1.8670e-02,  3.5581e-02,
          1.3959e-01,  2.0946e-03,  8.2133e-03,  2.9382e-02,  2.6458e-02,
         -4.5679e-02,  2.4551e-01, -7.6994e-02,  1.8334e-02,  1.1196e-01,
          6.7962e-02,  1.3010e-01, -2.6912e-02, -3.2847e-02, -6.4911e-02,
         -1.4844e-02, -1.0485e-02,  2.5682e-04, -1.1908e-01, -9.4140e-02,
         -3.6163e-02, -6.1032e-02, -8.2799e-02,  1.0033e-01, -1.1938e-02,
          6.9436e-02, -1.2167e-01, -2.5486e-01,  1.3888e-01,  1.1699e-02,
          2.9823e-02, -4.3524e-02, -1.9907e-01,  5.2296e-01, -3.5729e-01,
          4.4473e-01,  9.2241e-02,  4.4367e-02, -5.1229e-03,  3.5867e-04,
         -1.6113e-01, -1.1565e-01,  2.2394e-01,  1.0107e-01,  1.6811e-01,
          2.3793e-01,  1.3505e-02, -5.3993e-01, -1.2157e-01, -3.4446e-01,
          1.9299e-01, -1.5162e-01,  5.5131e-02, -2.7044e-02,  7.8840e-02,
         -7.4411e-02,  9.2855e-02]], device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
782000 特征值优化 tensor(0.5806, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9648e-01,  1.0069e+00, -6.8817e-02, -3.2086e-01, -8.1723e-01,
          3.9483e-01,  6.3527e-01,  2.3985e-01,  6.1298e-01,  9.6429e-01,
         -1.7813e+00,  1.0857e-01, -7.1572e-02, -1.7993e-02,  2.1460e-02,
          1.1533e-01, -2.8161e-02, -5.6248e-02,  7.7105e-02,  3.5947e-02,
         -4.6446e-02,  2.4477e-01, -8.3614e-02,  2.6969e-02,  1.2496e-01,
          5.8915e-02,  1.2880e-01, -8.0108e-03, -3.0367e-02, -6.4251e-02,
         -1.4568e-02,  1.9743e-02,  1.5680e-02, -1.1493e-01, -8.5779e-02,
         -1.3006e-02, -5.9421e-02, -7.7584e-02,  9.8071e-02, -2.6192e-02,
          6.7403e-02, -1.2594e-01, -2.5791e-01,  1.3677e-01,  1.5936e-02,
          2.7855e-02, -4.0152e-02, -1.8510e-01,  5.2375e-01, -3.5566e-01,
          4.3616e-01,  8.9120e-02,  3.6438e-02,  6.8995e-04, -7.0765e-03,
         -1.5250e-01, -1.5666e-01,  2.4559e-01,  1.0805e-01,  1.6694e-01,
          2.4839e-01,  1.5173e-03, -5.4220e-01, -1.1870e-01, -3.4372e-01,
          2.1370e-01, -1.2341e-01,  2.6771e-02, -2.9142e-02,  8.7708e-02,
         -5.3995e-02,  5.6934e-02]], device='cuda:0') tensor(0.2035, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
783000 特征值优化 tensor(0.6499, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3928,  1.0134, -0.0480, -0.3415, -0.8023,  0.4279,  0.6459,  0.2796,
          0.6029,  0.9480, -1.8300,  0.0504, -0.0713,  0.0070,  0.0546,  0.1327,
          0.0080,  0.0325,  0.0384,  0.0309, -0.0465,  0.2423, -0.0837,  0.0146,
          0.1073,  0.0709,  0.1241, -0.0309, -0.0329, -0.0619, -0.0153, -0.0489,
         -0.0285, -0.1191, -0.1130, -0.0102, -0.0569, -0.0832,  0.0980, -0.0111,
          0.0656, -0.1227, -0.2559,  0.1307,  0.0200,  0.0304, -0.0439, -0.1960,
          0.5234, -0.3584,  0.4429,  0.0932,  0.0360, -0.0021,  0.0562, -0.1679,
         -0.0739,  0.2018,  0.1190,  0.1606,  0.2465,  0.0146, -0.5252, -0.1129,
         -0.3699,  0.1994, -0.1711,  0.0722, -0.0231,  0.0747, -0.0999,  0.1170]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
784000 特征值优化 tensor(3.0634, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5078, -0.6043,  0.4628,  0.5611, -0.9837, -0.6298,  0.3243, -0.8606,
         -0.3060,  0.2609,  0.7030, -0.8727, -0.1090,  0.1133,  0.2389,  0.4399,
         -0.0373,  0.0069,  0.0662, -0.2210, -0.2274, -0.2669, -0.0177, -0.0095,
         -0.0500, -0.0760,  0.0201,  0.1248,  0.0902, -0.0903,  0.7985, -0.0320,
         -0.0136,  0.1243,  0.0502, -0.0064, -0.0835,  0.4087, -0.1559, -0.2084,
          0.0019,  0.1173, -0.4051, -0.7419,  1.0718,  0.2773, -0.0159, -0.9642,
          0.1794,  0.4086, -0.1508,  0.1094, -0.1649,  0.7232,  0.0264, -0.0266,
          0.0211,  0.2477,  0.5428, -0.0597, -0.2823,  0.0788,  0.8208, -0.0757,
          0.7911, -0.2018,  0.2497,  0.0718, -0.4249,  0.1380,  0.2644, -0.1117]],
       device='cuda:0') tensor(0.2086, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
785000 特征值优化 tensor(0.6532, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.6800e-01, -3.9860e-01,  6.0979e-01,  3.9000e-01, -1.5069e+00,
         -2.9456e-01, -1.8029e-02, -3.2764e-01, -4.3358e-01,  1.7982e-01,
          5.8993e-01, -6.9154e-01, -1.8623e-02,  5.0283e-02,  1.4947e-02,
          1.6518e-01, -2.0719e-01,  5.1822e-02, -9.1175e-02, -1.1758e-01,
         -1.6734e-01, -1.1222e-01, -1.3746e-01, -1.7245e-01,  9.3622e-02,
         -1.4815e-01,  2.0720e-01, -9.0810e-02,  5.0394e-02, -7.5731e-02,
          3.4973e-01, -8.6979e-03,  3.2077e-02,  1.2089e-01, -6.7678e-02,
         -2.1049e-02, -3.8399e-02,  2.0485e-01, -7.4038e-02, -1.0110e-01,
         -4.9718e-02,  1.1550e-01, -3.7960e-01, -1.7782e-01,  5.6137e-01,
          1.6517e-01,  1.9774e-02, -6.3875e-01,  1.3142e-01,  1.4120e-01,
          1.0271e-01,  2.9922e-02,  1.3921e-01,  2.3894e-01,  4.8395e-01,
         -1.0926e-01,  7.2005e-02,  1.2236e-01,  8.9862e-02,  2.5648e-02,
         -1.5163e-01, -8.3970e-02,  2.6592e-01,  1.1561e-01,  5.1821e-01,
          1.6194e-02,  2.2341e-01,  3.3135e-02,  1.7744e-01, -1.1215e-02,
         -9.5842e-04,  7.0822e-03]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
786000 特征值优化 tensor(0.6387, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5798, -0.3652,  0.5312,  0.3759, -1.5458, -0.2595, -0.1561, -0.3066,
         -0.3447,  0.1548,  0.7875, -0.7236, -0.0164,  0.0804,  0.0100,  0.1916,
         -0.2001,  0.0431, -0.0981, -0.1222, -0.1647, -0.1004, -0.1382, -0.1471,
         -0.0804, -0.0715,  0.1451,  0.0288,  0.0153, -0.0706,  0.3509,  0.0414,
          0.0313,  0.1253, -0.0748,  0.0047, -0.0440,  0.1646, -0.0812, -0.1022,
         -0.0355,  0.1198, -0.3895, -0.1583,  0.5579,  0.1507,  0.0263, -0.5864,
          0.1194,  0.1035,  0.1444, -0.0059,  0.2048,  0.2117,  0.4895, -0.0692,
          0.0840,  0.1166,  0.1074,  0.0324, -0.1934, -0.0944,  0.2461,  0.1268,
          0.4505,  0.0436,  0.2488,  0.0346,  0.1621,  0.0382, -0.0161,  0.0370]],
       device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
787000 特征值优化 tensor(0.6238, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6276, -0.3847,  0.4913,  0.3260, -1.6148, -0.2753, -0.2215, -0.3067,
         -0.2510,  0.1050,  0.8858, -0.8221, -0.0163,  0.0447,  0.0665,  0.1794,
         -0.2273,  0.0698, -0.0910, -0.1321, -0.1630, -0.1056, -0.1696, -0.2243,
         -0.1216, -0.0167,  0.0759, -0.0063, -0.0038, -0.0689,  0.3549,  0.0445,
          0.0581,  0.1244, -0.0770,  0.0063, -0.0555,  0.1539, -0.0812, -0.1004,
         -0.0194,  0.1210, -0.4391, -0.1352,  0.5632,  0.1480,  0.0323, -0.5594,
          0.0560,  0.1318,  0.1604,  0.0020,  0.2296,  0.1927,  0.4864, -0.0416,
          0.0918,  0.1147,  0.1022,  0.0550, -0.1772, -0.1105,  0.2209,  0.1372,
          0.4181,  0.0644,  0.2584,  0.0160,  0.1497,  0.0620,  0.0208,  0.0147]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
788000 特征值优化 tensor(0.6455, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 6.1639e-01, -3.8894e-01,  4.6156e-01,  3.3390e-01, -1.6357e+00,
         -2.4773e-01, -2.3774e-01, -2.8953e-01, -1.1407e-01,  7.0557e-02,
          8.8809e-01, -9.1379e-01, -1.6181e-02,  4.1368e-02,  5.6306e-02,
          1.7748e-01, -2.2887e-01,  3.9361e-02, -9.6771e-02, -1.3291e-01,
         -1.6466e-01, -1.0419e-01, -1.4775e-01, -1.8141e-01, -1.0830e-01,
         -5.9292e-02,  5.0903e-02,  1.0277e-02, -1.3766e-02, -7.2014e-02,
          3.4231e-01,  3.0394e-02,  3.7957e-02,  1.2720e-01, -6.6226e-02,
          8.5426e-04, -5.5832e-02,  1.4879e-01, -7.8883e-02, -1.0333e-01,
         -1.5436e-02,  1.2100e-01, -4.3278e-01, -1.3456e-01,  5.6118e-01,
          1.4982e-01,  3.2644e-02, -5.4007e-01,  5.5582e-02,  1.3392e-01,
          1.3953e-01,  4.3942e-03,  2.2595e-01,  1.8399e-01,  4.9626e-01,
         -4.8481e-02,  8.5562e-02,  1.1490e-01,  7.9142e-02,  7.1828e-02,
         -1.6974e-01, -1.1406e-01,  2.0559e-01,  1.3730e-01,  3.7629e-01,
          4.1374e-02,  2.5755e-01,  3.2222e-02,  1.3274e-01,  8.2104e-02,
          4.9440e-02,  3.6614e-02]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
789000 特征值优化 tensor(0.6251, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6074, -0.3732,  0.4640,  0.3549, -1.6036, -0.2448, -0.2422, -0.3030,
         -0.0605,  0.0833,  0.8808, -0.9615, -0.0157,  0.1332, -0.0520,  0.1752,
         -0.2263,  0.0475, -0.0901, -0.1306, -0.1632, -0.1054, -0.2052, -0.1212,
         -0.1804,  0.0082,  0.0842,  0.0125, -0.0250, -0.0628,  0.3433,  0.0132,
         -0.0172,  0.1300, -0.0594,  0.0162, -0.0500,  0.1473, -0.0820, -0.1036,
         -0.0292,  0.1151, -0.4284, -0.1377,  0.5620,  0.1319,  0.0384, -0.5470,
          0.1366,  0.0558,  0.1550,  0.0016,  0.1787,  0.2071,  0.4826, -0.0269,
          0.0990,  0.1126,  0.1057,  0.0389, -0.1739, -0.1059,  0.2291,  0.1370,
          0.3601,  0.0369,  0.2384,  0.0304,  0.1801,  0.0365,  0.0508,  0.0336]],
       device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
790000 特征值优化 tensor(0.6271, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6131, -0.3766,  0.4526,  0.3627, -1.5902, -0.2354, -0.2784, -0.3236,
         -0.0418,  0.0984,  0.8968, -0.9728, -0.0154,  0.0639,  0.0297,  0.1960,
         -0.2134,  0.0356, -0.0974, -0.1315, -0.1625, -0.1026, -0.1378, -0.1322,
         -0.1878, -0.0116,  0.0303,  0.0620, -0.0312, -0.0700,  0.3410,  0.0395,
          0.0273,  0.1307, -0.0576, -0.0155, -0.0610,  0.1461, -0.0977, -0.0884,
         -0.0202,  0.1367, -0.4304, -0.1358,  0.5627,  0.1392,  0.0368, -0.5345,
          0.0965,  0.0929,  0.1332,  0.0066,  0.1979,  0.2003,  0.4859, -0.0420,
          0.0988,  0.1121,  0.1004,  0.0494, -0.1662, -0.1146,  0.2182,  0.1306,
          0.3305,  0.0310,  0.2655,  0.0281,  0.1509,  0.0595,  0.0803,  0.0488]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
791000 特征值优化 tensor(0.6353, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6033, -0.3795,  0.4434,  0.3643, -1.6061, -0.2425, -0.2635, -0.3238,
         -0.0354,  0.0514,  0.9196, -0.9613, -0.0164,  0.0483,  0.0483,  0.1598,
         -0.2377,  0.0492, -0.0929, -0.1336, -0.1646, -0.1042, -0.1248, -0.1413,
         -0.1823, -0.0036,  0.0969,  0.0526, -0.0234, -0.0681,  0.3440,  0.0206,
          0.0356,  0.1306, -0.0520,  0.0027, -0.0582,  0.1426, -0.0680, -0.1230,
         -0.0201,  0.1086, -0.4282, -0.1326,  0.5577,  0.1477,  0.0309, -0.5328,
          0.0696,  0.1166,  0.1363,  0.0063,  0.2073,  0.1897,  0.4855, -0.0401,
          0.0802,  0.1237,  0.0988,  0.0520, -0.1670, -0.1132,  0.2212,  0.1334,
          0.3516,  0.0346,  0.2545,  0.0231,  0.1356,  0.0671,  0.0576,  0.0435]],
       device='cuda:0') tensor(0.2119, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
792000 特征值优化 tensor(0.6098, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.4701e-01, -4.4224e-01,  4.9136e-01,  3.4453e-01, -1.6695e+00,
         -2.5122e-01, -5.5891e-01, -5.5368e-01,  9.3000e-02,  1.2321e-02,
          1.1733e+00, -9.3808e-01, -1.6775e-02,  9.4641e-02, -3.8382e-02,
          8.7766e-02, -1.3556e-01,  7.0106e-02, -3.9222e-02, -1.3408e-01,
         -1.6415e-01, -1.0096e-01, -9.5077e-02, -8.3455e-02, -2.6718e-01,
          4.5891e-02,  1.3455e-01,  6.0454e-02, -4.4188e-03, -7.0144e-02,
          3.3805e-01,  1.0538e-02, -4.4587e-02,  1.3773e-01, -3.6917e-02,
          1.6695e-02, -1.2154e-01,  1.4074e-01, -7.4612e-02, -1.2495e-01,
          4.3023e-02,  1.1003e-01, -3.9986e-01, -1.4133e-01,  5.6054e-01,
          1.7777e-01,  3.0381e-02, -5.5342e-01,  1.5012e-01,  6.2699e-02,
          1.5895e-01, -3.1118e-03,  1.8956e-01,  2.0129e-01,  5.0162e-01,
          6.0330e-03,  1.2341e-01,  1.1718e-01,  1.0769e-01,  6.6104e-02,
          1.2603e-03, -1.4568e-01,  1.6650e-01,  7.2303e-02,  2.7761e-01,
          2.6722e-02,  2.8348e-01,  8.5143e-03,  2.9061e-02,  7.4504e-02,
          3.2169e-02,  5.4650e-02]], device='cuda:0') tensor(0.2084, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
793000 特征值优化 tensor(0.6226, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5270, -0.4660,  0.4493,  0.3014, -1.6636, -0.2244, -0.6604, -0.5990,
          0.1473,  0.0043,  1.2372, -0.9285, -0.0185, -0.0019, -0.0022,  0.1098,
         -0.0958,  0.0669, -0.0061, -0.1316, -0.1654, -0.1033, -0.0165, -0.0139,
         -0.2754, -0.0046,  0.0764,  0.1018, -0.0067, -0.0760,  0.3277,  0.0036,
         -0.0041,  0.1474, -0.0305, -0.0069, -0.1606,  0.1318, -0.0765, -0.1034,
          0.0827,  0.1199, -0.3944, -0.1379,  0.5572,  0.1812,  0.0329, -0.5395,
          0.1260,  0.1185,  0.1614,  0.0068,  0.2007,  0.1952,  0.4523,  0.1652,
          0.1418,  0.1201,  0.1598,  0.1258,  0.1286, -0.1495,  0.1111,  0.0476,
          0.2505,  0.0339,  0.3167,  0.0144, -0.1141,  0.0788,  0.0739,  0.0313]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
794000 特征值优化 tensor(0.6201, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5230, -0.4775,  0.4908,  0.2688, -1.6375, -0.2097, -0.6720, -0.5990,
          0.2055,  0.0120,  1.2435, -0.9707, -0.0185, -0.0525,  0.0146,  0.1054,
         -0.0941,  0.0822,  0.0025, -0.1329, -0.1650, -0.1052, -0.0625, -0.0164,
         -0.2786, -0.0362,  0.0633,  0.0864,  0.0197, -0.0742,  0.3290,  0.0106,
          0.0233,  0.1473, -0.0331, -0.0257, -0.1628,  0.1327, -0.0759, -0.1008,
          0.0860,  0.1216, -0.3919, -0.1402,  0.5584,  0.1891,  0.0315, -0.5645,
          0.1114,  0.1395,  0.1684,  0.0132,  0.1770,  0.2004,  0.4535,  0.1718,
          0.1174,  0.1298,  0.1582,  0.1331,  0.1415, -0.1502,  0.1038,  0.0474,
          0.2578,  0.0266,  0.2956,  0.0139, -0.1108,  0.0681,  0.0792,  0.0355]],
       device='cuda:0') tensor(0.2234, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
795000 特征值优化 tensor(0.6113, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.2817e-01, -4.6406e-01,  4.9212e-01,  2.5720e-01, -1.6697e+00,
         -2.3126e-01, -6.7058e-01, -6.1508e-01,  2.5099e-01,  1.9519e-02,
          1.2627e+00, -1.0176e+00, -1.8298e-02, -1.2669e-01,  3.0601e-02,
          1.8612e-02, -1.1938e-01,  1.2853e-01,  1.8405e-02, -1.3273e-01,
         -1.6498e-01, -1.0391e-01,  2.2407e-02, -8.8414e-03, -2.8508e-01,
         -4.8740e-02,  6.1096e-02,  6.1935e-02,  1.3102e-03, -7.5882e-02,
          3.3079e-01,  3.1362e-03,  1.1623e-02,  1.4757e-01, -2.3939e-02,
         -4.0100e-02, -1.6986e-01,  1.2243e-01, -8.6664e-02, -9.2067e-02,
          9.1433e-02,  1.3156e-01, -3.9492e-01, -1.3938e-01,  5.5789e-01,
          1.8390e-01,  3.1444e-02, -5.7116e-01,  1.0623e-01,  1.4926e-01,
          1.8644e-01,  3.8462e-03,  1.9575e-01,  1.9670e-01,  4.4915e-01,
          1.8431e-01,  1.2453e-01,  1.3266e-01,  1.5804e-01,  1.4058e-01,
          1.4479e-01, -1.4902e-01,  9.9935e-02,  4.1307e-02,  2.4182e-01,
          2.9247e-02,  2.7136e-01,  1.2697e-02, -1.1990e-01,  7.5833e-02,
          9.7624e-02,  2.7867e-02]], device='cuda:0') tensor(0.2082, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
796000 特征值优化 tensor(0.6230, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.1334e-01, -4.3449e-01,  5.3506e-01,  2.3494e-01, -1.6221e+00,
         -2.0348e-01, -6.8196e-01, -5.9014e-01,  1.9232e-01,  1.9579e-02,
          1.2267e+00, -1.0383e+00, -1.5976e-02, -6.5653e-02,  1.9079e-02,
          1.0500e-01, -2.2334e-02,  1.4608e-01,  2.1923e-02, -1.3251e-01,
         -1.6384e-01, -1.0807e-01,  1.7942e-02, -5.2476e-02, -2.3748e-01,
         -1.3524e-01,  1.4638e-02,  3.1986e-02, -1.3698e-03, -8.1593e-02,
          3.2877e-01,  9.8060e-03,  2.2466e-03,  1.4554e-01, -3.9071e-02,
         -1.8443e-02, -1.7130e-01,  1.2962e-01, -7.1438e-02, -9.0234e-02,
          9.1295e-02,  1.3143e-01, -3.8300e-01, -1.3675e-01,  5.6052e-01,
          1.7298e-01,  3.2442e-02, -5.8689e-01,  1.2363e-01,  1.4285e-01,
          1.8849e-01,  1.1345e-02,  1.8951e-01,  1.9464e-01,  4.5238e-01,
          1.6943e-01,  1.2072e-01,  1.2320e-01,  1.6789e-01,  1.3558e-01,
          1.3807e-01, -1.4159e-01,  9.7274e-02,  4.6451e-02,  2.5552e-01,
          1.8619e-02,  2.5803e-01,  4.1024e-03, -1.3093e-01,  7.5703e-02,
          1.0588e-01,  2.5022e-02]], device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
797000 特征值优化 tensor(0.6075, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.2324e-01, -4.6773e-01,  5.5553e-01,  2.8531e-01, -1.6592e+00,
         -2.1615e-01, -6.8460e-01, -5.8206e-01,  1.7194e-01,  4.4502e-02,
          1.2398e+00, -1.0378e+00, -1.8431e-02, -1.4482e-02, -4.5389e-02,
          1.2231e-01, -1.6501e-02,  1.4412e-01,  2.6674e-02, -1.3157e-01,
         -1.6458e-01, -1.0730e-01, -3.3058e-03, -6.9624e-02, -2.3635e-01,
         -1.4122e-01, -3.0354e-02,  1.5308e-02, -8.2876e-03, -8.1305e-02,
          3.2957e-01, -7.6625e-03, -3.2566e-02,  1.4473e-01, -4.5225e-02,
          1.4489e-03, -1.6905e-01,  1.3115e-01, -7.2106e-02, -9.1255e-02,
          9.1934e-02,  1.2850e-01, -3.9177e-01, -1.3829e-01,  5.5919e-01,
          1.8364e-01,  3.1391e-02, -5.9729e-01,  1.4338e-01,  1.2554e-01,
          1.6468e-01,  1.1855e-02,  1.8795e-01,  2.0138e-01,  4.4987e-01,
          1.7394e-01,  1.6709e-01,  9.7205e-02,  1.6903e-01,  1.1899e-01,
          1.5864e-01, -1.4846e-01,  9.6161e-02,  4.4461e-02,  2.5185e-01,
          1.6040e-02,  2.6170e-01,  1.4239e-02, -1.0872e-01,  6.0397e-02,
          8.0522e-02,  4.5188e-02]], device='cuda:0') tensor(0.2085, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
798000 特征值优化 tensor(0.6019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5289, -0.4430,  0.5574,  0.2699, -1.6720, -0.2133, -0.6830, -0.5813,
          0.1552,  0.0615,  1.2433, -1.0407, -0.0183,  0.0029, -0.0715,  0.1031,
         -0.0551,  0.1574,  0.0284, -0.1316, -0.1644, -0.1069,  0.0198, -0.0420,
         -0.2394, -0.1376, -0.0385,  0.0313, -0.0084, -0.0814,  0.3300, -0.0975,
         -0.0427,  0.1449, -0.0568,  0.0052, -0.1711,  0.1296, -0.0723, -0.0924,
          0.0905,  0.1302, -0.3946, -0.1398,  0.5592,  0.1686,  0.0330, -0.6006,
          0.1598,  0.1140,  0.1761,  0.0084,  0.1755,  0.2068,  0.4483,  0.1670,
          0.1840,  0.0863,  0.1722,  0.1178,  0.1698, -0.1598,  0.0777,  0.0538,
          0.2557,  0.0182,  0.2479,  0.0136, -0.1062,  0.0607,  0.0773,  0.0562]],
       device='cuda:0') tensor(0.2074, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
799000 特征值优化 tensor(0.6206, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5238, -0.4299,  0.5584,  0.2682, -1.6468, -0.2479, -0.6614, -0.5607,
          0.1843,  0.0371,  1.2073, -1.0382, -0.0169, -0.0209, -0.0553,  0.0966,
         -0.0526,  0.1602,  0.0107, -0.1320, -0.1646, -0.1080,  0.0160, -0.0550,
         -0.2365, -0.1466,  0.0024,  0.0066, -0.0133, -0.0793,  0.3282, -0.0120,
         -0.0170,  0.1455, -0.0430, -0.0101, -0.1698,  0.1349, -0.0703, -0.0921,
          0.0894,  0.1314, -0.3910, -0.1370,  0.5586,  0.1689,  0.0316, -0.5950,
          0.1454,  0.1250,  0.1703,  0.0134,  0.1971,  0.1930,  0.4560,  0.1625,
          0.1553,  0.1152,  0.1704,  0.1201,  0.1304, -0.1370,  0.0929,  0.0522,
          0.2676,  0.0177,  0.2415,  0.0061, -0.1153,  0.0686,  0.0900,  0.0338]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
800000 特征值优化 tensor(0.6160, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5257, -0.4306,  0.5629,  0.2707, -1.6331, -0.2299, -0.6712, -0.5683,
          0.1753,  0.0459,  1.2230, -1.0518, -0.0182, -0.0491, -0.0296,  0.0969,
         -0.0520,  0.1610,  0.0168, -0.1313, -0.1657, -0.1084,  0.0238, -0.0478,
         -0.2350, -0.1492,  0.0169,  0.0044, -0.0199, -0.0787,  0.3291,  0.0023,
         -0.0135,  0.1463, -0.0406, -0.0186, -0.1696,  0.1289, -0.0710, -0.0909,
          0.0899,  0.1318, -0.3940, -0.1384,  0.5576,  0.1648,  0.0327, -0.5969,
          0.1406,  0.1311,  0.1694,  0.0125,  0.1836,  0.1956,  0.4511,  0.1740,
          0.1443,  0.1186,  0.1676,  0.1327,  0.1476, -0.1443,  0.0806,  0.0508,
          0.2733,  0.0147,  0.2359,  0.0081, -0.1140,  0.0713,  0.0929,  0.0344]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
801000 特征值优化 tensor(0.6122, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5220, -0.4161,  0.5764,  0.2768, -1.6461, -0.2313, -0.6719, -0.5718,
          0.1797,  0.0631,  1.2377, -1.0634, -0.0184, -0.0589, -0.0238,  0.0770,
         -0.0710,  0.1719,  0.0267, -0.1317, -0.1651, -0.1064,  0.0268, -0.0367,
         -0.2300, -0.1430,  0.0269,  0.0387, -0.0129, -0.0805,  0.3300,  0.0092,
         -0.0055,  0.1466, -0.0347, -0.0254, -0.1688,  0.1313, -0.0730, -0.0881,
          0.0911,  0.1316, -0.3893, -0.1405,  0.5584,  0.1558,  0.0324, -0.6066,
          0.1370,  0.1346,  0.1700,  0.0137,  0.1842,  0.1968,  0.4511,  0.1720,
          0.1401,  0.1222,  0.1649,  0.1356,  0.1483, -0.1441,  0.0877,  0.0495,
          0.2707,  0.0126,  0.2347,  0.0095, -0.1162,  0.0663,  0.1033,  0.0339]],
       device='cuda:0') tensor(0.2043, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
802000 特征值优化 tensor(0.6122, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5292, -0.4281,  0.5665,  0.2682, -1.6321, -0.2332, -0.6789, -0.5586,
          0.1688,  0.0442,  1.2364, -1.0516, -0.0182, -0.0843,  0.0068,  0.1003,
         -0.0418,  0.1554,  0.0237, -0.1313, -0.1649, -0.1081,  0.0381, -0.0149,
         -0.2370, -0.1497,  0.0306,  0.0200, -0.0116, -0.0789,  0.3319,  0.0176,
          0.0077,  0.1450, -0.0401, -0.0221, -0.1706,  0.1309, -0.0700, -0.0921,
          0.0910,  0.1319, -0.3956, -0.1388,  0.5578,  0.1639,  0.0323, -0.6000,
          0.1345,  0.1394,  0.1699,  0.0117,  0.1746,  0.2030,  0.4507,  0.1751,
          0.1341,  0.1220,  0.1691,  0.1371,  0.1553, -0.1432,  0.0790,  0.0510,
          0.2789,  0.0108,  0.2283,  0.0140, -0.1070,  0.0594,  0.1067,  0.0275]],
       device='cuda:0') tensor(0.2067, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
803000 特征值优化 tensor(0.6175, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.2011e-01, -4.1134e-01,  5.7376e-01,  2.7408e-01, -1.6301e+00,
         -2.1499e-01, -6.5955e-01, -5.3949e-01,  1.5648e-01,  6.2872e-02,
          1.2104e+00, -1.0605e+00, -1.8275e-02, -5.7751e-02, -1.7420e-03,
          1.1600e-01, -2.9835e-02,  1.5073e-01,  1.1398e-02, -1.3281e-01,
         -1.6523e-01, -1.0651e-01,  5.1754e-04, -7.3817e-02, -2.4066e-01,
         -1.2732e-01, -7.7745e-04, -6.4752e-03, -1.4391e-02, -8.0761e-02,
          3.2956e-01, -1.0469e-02, -7.0083e-03,  1.4571e-01, -3.5784e-02,
         -1.2430e-02, -1.6168e-01,  1.4140e-01, -7.3941e-02, -8.7260e-02,
          8.4075e-02,  1.3139e-01, -3.8697e-01, -1.4123e-01,  5.5865e-01,
          1.5408e-01,  3.3027e-02, -6.0393e-01,  1.2872e-01,  1.3974e-01,
          1.6883e-01,  1.4663e-02,  1.8695e-01,  1.9504e-01,  4.5862e-01,
          1.5683e-01,  1.4391e-01,  1.1367e-01,  1.6847e-01,  1.3049e-01,
          1.3048e-01, -1.3437e-01,  9.4908e-02,  5.7692e-02,  2.7000e-01,
          1.3317e-02,  2.3847e-01,  1.4083e-02, -1.0806e-01,  6.5163e-02,
          1.0516e-01,  3.2076e-02]], device='cuda:0') tensor(0.2045, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
804000 特征值优化 tensor(0.6152, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5182, -0.4142,  0.5781,  0.2711, -1.6308, -0.2168, -0.6827, -0.5536,
          0.1528,  0.0567,  1.2317, -1.0678, -0.0187, -0.0491, -0.0046,  0.1175,
         -0.0194,  0.1485,  0.0192, -0.1330, -0.1645, -0.1071, -0.0026, -0.0781,
         -0.2439, -0.1264,  0.0092, -0.0050, -0.0149, -0.0799,  0.3290, -0.0031,
         -0.0061,  0.1459, -0.0369, -0.0061, -0.1651,  0.1364, -0.0739, -0.0883,
          0.0871,  0.1321, -0.3874, -0.1418,  0.5587,  0.1560,  0.0332, -0.6051,
          0.1275,  0.1437,  0.1742,  0.0110,  0.1844,  0.1968,  0.4557,  0.1637,
          0.1510,  0.1085,  0.1702,  0.1242,  0.1478, -0.1409,  0.0906,  0.0535,
          0.2705,  0.0140,  0.2409,  0.0123, -0.1194,  0.0674,  0.1016,  0.0344]],
       device='cuda:0') tensor(0.2043, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
805000 特征值优化 tensor(0.6111, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.2324e-01, -4.3021e-01,  5.8423e-01,  2.7820e-01, -1.6434e+00,
         -2.1296e-01, -6.9017e-01, -5.5402e-01,  1.5849e-01,  6.8457e-02,
          1.2470e+00, -1.0495e+00, -1.8661e-02, -1.7271e-02, -4.4332e-02,
          1.1454e-01, -2.0943e-02,  1.4745e-01,  2.5567e-02, -1.3129e-01,
         -1.6449e-01, -1.0589e-01,  2.1194e-02, -3.7212e-02, -2.3450e-01,
         -1.4900e-01, -3.3628e-02,  7.5356e-03, -6.5675e-04, -8.0509e-02,
          3.2941e-01, -5.7964e-03, -3.1030e-02,  1.4480e-01, -4.3297e-02,
         -3.1522e-04, -1.6505e-01,  1.3571e-01, -7.4205e-02, -9.1294e-02,
          8.7250e-02,  1.3243e-01, -3.9346e-01, -1.3797e-01,  5.5861e-01,
          1.6181e-01,  3.3130e-02, -6.0691e-01,  1.4110e-01,  1.2654e-01,
          1.7227e-01,  9.9420e-03,  1.8245e-01,  2.0096e-01,  4.5486e-01,
          1.6175e-01,  1.6360e-01,  9.9068e-02,  1.7062e-01,  1.2330e-01,
          1.5324e-01, -1.4318e-01,  9.6660e-02,  4.6982e-02,  2.5412e-01,
          1.7423e-02,  2.4180e-01,  1.1336e-02, -1.1923e-01,  6.3418e-02,
          9.7119e-02,  4.7150e-02]], device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
806000 特征值优化 tensor(0.6095, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5329, -0.4424,  0.5708,  0.2767, -1.6707, -0.2086, -0.7028, -0.5503,
          0.1685,  0.0613,  1.2548, -1.0462, -0.0187,  0.0054, -0.0597,  0.1121,
         -0.0268,  0.1491,  0.0273, -0.1331, -0.1647, -0.1070,  0.0118, -0.0546,
         -0.2367, -0.1488, -0.0332, -0.0082, -0.0028, -0.0801,  0.3309, -0.0124,
         -0.0497,  0.1452, -0.0464,  0.0053, -0.1632,  0.1356, -0.0736, -0.0892,
          0.0856,  0.1313, -0.3966, -0.1387,  0.5593,  0.1736,  0.0302, -0.6024,
          0.1504,  0.1216,  0.1721,  0.0109,  0.1909,  0.1986,  0.4545,  0.1585,
          0.1795,  0.0890,  0.1724,  0.1163,  0.1615, -0.1487,  0.0954,  0.0476,
          0.2477,  0.0232,  0.2498,  0.0055, -0.1177,  0.0640,  0.0805,  0.0484]],
       device='cuda:0') tensor(0.2051, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
807000 特征值优化 tensor(0.6427, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5350, -0.4408,  0.5635,  0.2850, -1.6636, -0.2316, -0.7145, -0.5373,
          0.1726,  0.0621,  1.2545, -1.0629, -0.0171,  0.0061, -0.0941,  0.1091,
         -0.0307,  0.1485,  0.0174, -0.1301, -0.1659, -0.1063, -0.0224, -0.0951,
         -0.2291, -0.1529, -0.0484, -0.0052, -0.0083, -0.0799,  0.3301, -0.0078,
         -0.0569,  0.1435, -0.0377,  0.0044, -0.1618,  0.1328, -0.0716, -0.0892,
          0.0836,  0.1264, -0.3965, -0.1385,  0.5584,  0.1710,  0.0318, -0.5964,
          0.1627,  0.1081,  0.1643,  0.0134,  0.1954,  0.1901,  0.4550,  0.1609,
          0.1823,  0.0945,  0.1729,  0.1088,  0.1546, -0.1419,  0.0972,  0.0421,
          0.2468,  0.0230,  0.2494,  0.0084, -0.1166,  0.0682,  0.0917,  0.0453]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
808000 特征值优化 tensor(0.6050, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.3321e-01, -4.2583e-01,  5.6013e-01,  2.7043e-01, -1.6628e+00,
         -2.2193e-01, -6.7314e-01, -5.1836e-01,  1.7192e-01,  8.4488e-02,
          1.2350e+00, -1.0627e+00, -1.8431e-02, -1.1867e-01,  4.4001e-02,
          8.9225e-02, -6.1382e-02,  1.6713e-01,  3.4302e-02, -1.3121e-01,
         -1.6477e-01, -1.0770e-01, -1.0947e-03, -5.9994e-02, -2.3373e-01,
         -1.4372e-01,  5.2549e-02,  4.3780e-02, -1.4699e-02, -8.0103e-02,
          3.3141e-01,  1.2866e-02,  2.7158e-02,  1.4785e-01, -3.0744e-02,
         -5.4088e-02, -1.6762e-01,  1.3902e-01, -7.3025e-02, -8.8671e-02,
          8.7978e-02,  1.3334e-01, -3.9695e-01, -1.3849e-01,  5.5832e-01,
          1.6244e-01,  3.2047e-02, -5.9679e-01,  1.2178e-01,  1.4969e-01,
          1.7096e-01,  1.2623e-02,  1.8120e-01,  2.0466e-01,  4.5367e-01,
          1.6157e-01,  1.2406e-01,  1.2969e-01,  1.5995e-01,  1.4444e-01,
          1.4920e-01, -1.3397e-01,  7.7924e-02,  5.7408e-02,  2.8063e-01,
         -7.7006e-04,  2.3106e-01,  1.1358e-02, -9.6352e-02,  4.6084e-02,
          1.1412e-01,  3.8115e-02]], device='cuda:0') tensor(0.2064, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
809000 特征值优化 tensor(0.6250, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5153, -0.4003,  0.5669,  0.2543, -1.6341, -0.2124, -0.7031, -0.5232,
          0.1631,  0.0707,  1.2413, -1.0659, -0.0175, -0.0847,  0.0153,  0.1123,
         -0.0418,  0.1610,  0.0137, -0.1317, -0.1648, -0.1076,  0.0075, -0.0503,
         -0.2421, -0.1238,  0.0142,  0.0087, -0.0198, -0.0804,  0.3277,  0.0084,
          0.0030,  0.1469, -0.0391, -0.0157, -0.1613,  0.1364, -0.0742, -0.0873,
          0.0843,  0.1313, -0.3858, -0.1377,  0.5582,  0.1521,  0.0327, -0.6002,
          0.1195,  0.1514,  0.1754,  0.0121,  0.1897,  0.1953,  0.4607,  0.1521,
          0.1230,  0.1265,  0.1686,  0.1364,  0.1487, -0.1370,  0.0790,  0.0512,
          0.2669,  0.0118,  0.2320,  0.0110, -0.1267,  0.0690,  0.1124,  0.0283]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
810000 特征值优化 tensor(0.6195, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.2229e-01, -4.0485e-01,  5.6898e-01,  2.6815e-01, -1.6323e+00,
         -2.1924e-01, -7.0701e-01, -5.2048e-01,  1.6165e-01,  6.0396e-02,
          1.2511e+00, -1.0597e+00, -1.7456e-02, -6.6903e-02,  3.0590e-04,
          1.1785e-01, -2.1241e-02,  1.4749e-01,  1.4878e-02, -1.3380e-01,
         -1.6408e-01, -1.0693e-01,  1.3508e-02, -6.8509e-02, -2.4126e-01,
         -1.2494e-01,  5.5985e-04, -1.8895e-02, -2.6169e-02, -8.0275e-02,
          3.2845e-01,  7.1246e-03, -5.6373e-03,  1.4585e-01, -3.5010e-02,
         -1.4729e-02, -1.6435e-01,  1.3997e-01, -7.5811e-02, -8.7366e-02,
          8.3597e-02,  1.3363e-01, -3.8692e-01, -1.4002e-01,  5.5964e-01,
          1.5596e-01,  3.2789e-02, -6.0167e-01,  1.2271e-01,  1.4723e-01,
          1.7230e-01,  1.3977e-02,  1.9122e-01,  1.9296e-01,  4.5932e-01,
          1.5458e-01,  1.4151e-01,  1.1604e-01,  1.7091e-01,  1.2730e-01,
          1.4796e-01, -1.3977e-01,  8.5542e-02,  5.5282e-02,  2.6602e-01,
          1.5549e-02,  2.3757e-01,  1.0404e-02, -1.2908e-01,  6.7554e-02,
          1.0609e-01,  3.0427e-02]], device='cuda:0') tensor(0.2111, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
811000 特征值优化 tensor(0.6107, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5213, -0.4301,  0.5639,  0.2659, -1.6388, -0.2173, -0.7100, -0.5160,
          0.1545,  0.0787,  1.2605, -1.0419, -0.0182, -0.0197, -0.0494,  0.1092,
         -0.0372,  0.1527,  0.0242, -0.1316, -0.1646, -0.1067,  0.0087, -0.0620,
         -0.2355, -0.1403, -0.0346,  0.0058, -0.0104, -0.0814,  0.3297, -0.0175,
         -0.0388,  0.1445, -0.0468,  0.0019, -0.1590,  0.1420, -0.0722, -0.0924,
          0.0803,  0.1309, -0.3912, -0.1380,  0.5590,  0.1645,  0.0327, -0.6009,
          0.1386,  0.1268,  0.1726,  0.0131,  0.1782,  0.2022,  0.4562,  0.1563,
          0.1703,  0.0951,  0.1695,  0.1246,  0.1617, -0.1481,  0.0868,  0.0563,
          0.2546,  0.0150,  0.2430,  0.0128, -0.1134,  0.0596,  0.0917,  0.0516]],
       device='cuda:0') tensor(0.2055, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
812000 特征值优化 tensor(0.6164, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.3228e-01, -4.2424e-01,  5.6930e-01,  2.6529e-01, -1.6339e+00,
         -2.3021e-01, -6.8422e-01, -5.0576e-01,  1.6900e-01,  6.4151e-02,
          1.2371e+00, -1.0487e+00, -1.7911e-02, -6.6940e-02, -6.3142e-03,
          1.0294e-01, -4.9765e-02,  1.5989e-01,  1.8478e-02, -1.3180e-01,
         -1.6516e-01, -1.0857e-01,  3.1951e-02, -2.7164e-02, -2.3768e-01,
         -1.4204e-01,  2.3805e-02,  1.1297e-02, -2.5660e-02, -7.8631e-02,
          3.2988e-01, -8.9059e-03,  9.0691e-04,  1.4663e-01, -4.2489e-02,
         -1.8933e-02, -1.5904e-01,  1.4053e-01, -6.9317e-02, -9.2248e-02,
          8.1751e-02,  1.3047e-01, -3.9745e-01, -1.3822e-01,  5.5728e-01,
          1.6408e-01,  3.1034e-02, -5.9933e-01,  1.3642e-01,  1.3848e-01,
          1.7255e-01,  1.0709e-02,  1.8432e-01,  1.9461e-01,  4.5799e-01,
          1.5317e-01,  1.3675e-01,  1.2252e-01,  1.6368e-01,  1.4061e-01,
          1.3653e-01, -1.3251e-01,  8.5988e-02,  5.4840e-02,  2.7129e-01,
          1.1433e-02,  2.3795e-01,  9.6045e-03, -1.0890e-01,  6.2940e-02,
          1.0802e-01,  3.0319e-02]], device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
813000 特征值优化 tensor(0.6166, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.2741e-01, -4.3113e-01,  5.5840e-01,  2.5217e-01, -1.6294e+00,
         -2.2820e-01, -7.0220e-01, -5.2077e-01,  1.6982e-01,  6.5389e-02,
          1.2515e+00, -1.0455e+00, -1.8132e-02, -5.7342e-02, -1.2404e-02,
          8.8032e-02, -7.1180e-02,  1.6523e-01,  1.4857e-02, -1.3150e-01,
         -1.6519e-01, -1.0901e-01,  2.4153e-02, -2.4528e-02, -2.3904e-01,
         -1.4387e-01,  2.1906e-02,  7.0737e-03, -2.5156e-02, -7.8259e-02,
          3.2957e-01, -1.3490e-03,  1.8221e-03,  1.4698e-01, -4.0711e-02,
         -2.1229e-02, -1.6085e-01,  1.3758e-01, -7.0014e-02, -9.1486e-02,
          8.3984e-02,  1.3128e-01, -3.9478e-01, -1.3811e-01,  5.5854e-01,
          1.6457e-01,  3.2582e-02, -5.9434e-01,  1.4023e-01,  1.3518e-01,
          1.8161e-01,  8.5956e-03,  1.8304e-01,  1.9721e-01,  4.5543e-01,
          1.6114e-01,  1.3590e-01,  1.2353e-01,  1.6472e-01,  1.3747e-01,
          1.5179e-01, -1.4188e-01,  7.8745e-02,  5.4274e-02,  2.7035e-01,
          1.2932e-02,  2.3683e-01,  9.5140e-03, -1.1806e-01,  6.6157e-02,
          1.0548e-01,  2.9827e-02]], device='cuda:0') tensor(0.2033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
814000 特征值优化 tensor(0.6155, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5310, -0.4273,  0.5560,  0.2703, -1.6487, -0.2330, -0.7016, -0.5211,
          0.1768,  0.0716,  1.2585, -1.0455, -0.0180, -0.0522, -0.0285,  0.0884,
         -0.0665,  0.1604,  0.0109, -0.1320, -0.1653, -0.1078,  0.0417, -0.0301,
         -0.2370, -0.1424,  0.0119,  0.0129, -0.0143, -0.0803,  0.3281,  0.0070,
         -0.0095,  0.1465, -0.0396, -0.0226, -0.1633,  0.1365, -0.0673, -0.0939,
          0.0836,  0.1276, -0.3961, -0.1383,  0.5586,  0.1649,  0.0309, -0.5964,
          0.1406,  0.1303,  0.1694,  0.0136,  0.1897,  0.1977,  0.4545,  0.1634,
          0.1420,  0.1201,  0.1644,  0.1378,  0.1589, -0.1454,  0.0739,  0.0573,
          0.2653,  0.0126,  0.2354,  0.0099, -0.1215,  0.0671,  0.1042,  0.0355]],
       device='cuda:0') tensor(0.2022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
815000 特征值优化 tensor(0.6171, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5277, -0.4302,  0.5513,  0.2668, -1.6410, -0.2412, -0.7090, -0.5155,
          0.1798,  0.0732,  1.2664, -1.0431, -0.0184, -0.0388, -0.0460,  0.0887,
         -0.0609,  0.1575,  0.0082, -0.1315, -0.1653, -0.1077,  0.0160, -0.0498,
         -0.2318, -0.1488,  0.0092,  0.0209, -0.0180, -0.0801,  0.3295,  0.0090,
         -0.0211,  0.1448, -0.0395, -0.0186, -0.1597,  0.1378, -0.0672, -0.0935,
          0.0818,  0.1275, -0.3934, -0.1388,  0.5578,  0.1647,  0.0316, -0.5932,
          0.1482,  0.1232,  0.1714,  0.0138,  0.1932,  0.1966,  0.4570,  0.1619,
          0.1461,  0.1165,  0.1672,  0.1358,  0.1536, -0.1439,  0.0725,  0.0586,
          0.2623,  0.0125,  0.2368,  0.0096, -0.1288,  0.0716,  0.0989,  0.0373]],
       device='cuda:0') tensor(0.2037, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
816000 特征值优化 tensor(0.6085, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5125, -0.4035,  0.5839,  0.2759, -1.6526, -0.2330, -0.6942, -0.4892,
          0.1596,  0.0740,  1.2506, -1.0490, -0.0182, -0.0738,  0.0138,  0.1022,
         -0.0488,  0.1600,  0.0205, -0.1325, -0.1652, -0.1069,  0.0199, -0.0469,
         -0.2338, -0.1406,  0.0602,  0.0384, -0.0056, -0.0792,  0.3345,  0.0569,
          0.0196,  0.1476, -0.0334, -0.0204, -0.1649,  0.1429, -0.0692, -0.0917,
          0.0785,  0.1283, -0.3861, -0.1404,  0.5584,  0.1502,  0.0323, -0.6080,
          0.1265,  0.1444,  0.1695,  0.0117,  0.1324,  0.2286,  0.4515,  0.1446,
          0.1373,  0.1254,  0.1638,  0.1434,  0.1891, -0.1680,  0.0671,  0.0677,
          0.2745,  0.0087,  0.2289,  0.0171, -0.1025,  0.0525,  0.1149,  0.0278]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
817000 特征值优化 tensor(0.6356, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5308, -0.4166,  0.5751,  0.2762, -1.6578, -0.2242, -0.7070, -0.4737,
          0.1600,  0.0638,  1.2342, -1.0742, -0.0169, -0.1202,  0.0559,  0.1099,
         -0.0423,  0.1602,  0.0072, -0.1312, -0.1642, -0.1062,  0.0083, -0.0690,
         -0.2350, -0.1303,  0.0428,  0.0243, -0.0187, -0.0811,  0.3252,  0.0059,
          0.0256,  0.1468, -0.0320, -0.0210, -0.1576,  0.1393, -0.0726, -0.0883,
          0.0785,  0.1285, -0.3923, -0.1390,  0.5564,  0.1623,  0.0331, -0.6022,
          0.1084,  0.1633,  0.1635,  0.0147,  0.1881,  0.1941,  0.4634,  0.1497,
          0.1171,  0.1326,  0.1677,  0.1341,  0.1384, -0.1230,  0.0844,  0.0457,
          0.2684,  0.0119,  0.2317,  0.0168, -0.1065,  0.0632,  0.1375,  0.0201]],
       device='cuda:0') tensor(0.2053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
818000 特征值优化 tensor(0.6301, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5283, -0.4162,  0.5682,  0.2686, -1.6493, -0.2188, -0.7183, -0.4838,
          0.1574,  0.0759,  1.2514, -1.0524, -0.0161, -0.1087,  0.0232,  0.1125,
         -0.0543,  0.1642,  0.0103, -0.1313, -0.1643, -0.1085,  0.0112, -0.0531,
         -0.2421, -0.1315,  0.0263,  0.0107, -0.0186, -0.0798,  0.3284,  0.0090,
          0.0036,  0.1472, -0.0307, -0.0162, -0.1587,  0.1382, -0.0735, -0.0891,
          0.0822,  0.1309, -0.3900, -0.1377,  0.5592,  0.1619,  0.0339, -0.5985,
          0.1090,  0.1593,  0.1715,  0.0126,  0.1934,  0.1925,  0.4617,  0.1519,
          0.1253,  0.1295,  0.1717,  0.1335,  0.1382, -0.1239,  0.0749,  0.0467,
          0.2678,  0.0083,  0.2273,  0.0180, -0.1292,  0.0706,  0.1241,  0.0217]],
       device='cuda:0') tensor(0.2117, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
819000 特征值优化 tensor(0.6218, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.1782e-01, -4.0311e-01,  5.6815e-01,  2.5568e-01, -1.6317e+00,
         -2.1279e-01, -7.2388e-01, -4.8870e-01,  1.5929e-01,  7.7707e-02,
          1.2597e+00, -1.0476e+00, -1.7956e-02, -7.3001e-02,  7.8409e-03,
          1.1701e-01, -2.8903e-02,  1.4988e-01,  1.0351e-02, -1.3316e-01,
         -1.6457e-01, -1.0743e-01,  3.7835e-03, -5.6924e-02, -2.4170e-01,
         -1.2762e-01,  8.6286e-03, -5.5565e-03, -1.5285e-02, -8.0785e-02,
          3.2830e-01,  3.9280e-03, -6.0125e-04,  1.4604e-01, -3.6770e-02,
         -1.4366e-02, -1.5464e-01,  1.4499e-01, -7.3247e-02, -8.9826e-02,
          7.7994e-02,  1.3005e-01, -3.8685e-01, -1.3911e-01,  5.5770e-01,
          1.5338e-01,  3.2316e-02, -6.0077e-01,  1.2092e-01,  1.5260e-01,
          1.7489e-01,  1.2814e-02,  1.9006e-01,  1.9267e-01,  4.6111e-01,
          1.4877e-01,  1.3615e-01,  1.1833e-01,  1.6854e-01,  1.3397e-01,
          1.5466e-01, -1.3649e-01,  7.6824e-02,  6.0321e-02,  2.6044e-01,
          1.4811e-02,  2.3511e-01,  1.2762e-02, -1.2994e-01,  6.6300e-02,
          1.1131e-01,  2.9374e-02]], device='cuda:0') tensor(0.2041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
820000 特征值优化 tensor(0.6172, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5196, -0.4163,  0.5833,  0.2776, -1.6315, -0.2022, -0.7224, -0.4827,
          0.1608,  0.0782,  1.2730, -1.0437, -0.0181, -0.0465, -0.0080,  0.1164,
         -0.0263,  0.1490,  0.0170, -0.1325, -0.1650, -0.1068,  0.0113, -0.0539,
         -0.2362, -0.1402, -0.0072, -0.0064, -0.0071, -0.0799,  0.3285, -0.0039,
         -0.0114,  0.1472, -0.0397, -0.0089, -0.1552,  0.1458, -0.0715, -0.0914,
          0.0772,  0.1304, -0.3876, -0.1405,  0.5585,  0.1563,  0.0326, -0.6086,
          0.1286,  0.1435,  0.1695,  0.0121,  0.1818,  0.1968,  0.4622,  0.1486,
          0.1419,  0.1129,  0.1685,  0.1308,  0.1629, -0.1416,  0.0833,  0.0595,
          0.2559,  0.0153,  0.2400,  0.0098, -0.1293,  0.0643,  0.1059,  0.0372]],
       device='cuda:0') tensor(0.2097, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
821000 特征值优化 tensor(0.6585, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.1894e-01, -4.3058e-01,  5.9602e-01,  2.9358e-01, -1.6690e+00,
         -1.9737e-01, -6.9352e-01, -4.7173e-01,  1.4515e-01,  8.4868e-02,
          1.2477e+00, -1.0363e+00, -1.8017e-02,  2.1080e-02, -1.0171e-01,
          1.0513e-01, -4.4273e-02,  1.5910e-01,  2.8579e-02, -1.3234e-01,
         -1.6516e-01, -1.0697e-01,  4.6679e-04, -4.7195e-02, -2.3093e-01,
         -1.5048e-01, -5.2690e-02,  9.1571e-03, -1.3868e-02, -8.1312e-02,
          3.3336e-01, -3.7403e-02, -6.1439e-02,  1.4723e-01, -4.5704e-02,
          1.1529e-02, -1.5904e-01,  1.4772e-01, -6.9709e-02, -9.5205e-02,
          7.8343e-02,  1.2584e-01, -3.8970e-01, -1.3798e-01,  5.5967e-01,
          1.6604e-01,  3.2284e-02, -6.1235e-01,  1.4178e-01,  1.2582e-01,
          1.6234e-01,  1.2724e-02,  1.9083e-01,  1.9829e-01,  4.6138e-01,
          1.4828e-01,  1.9192e-01,  8.3613e-02,  1.7124e-01,  1.0975e-01,
          1.5961e-01, -1.3645e-01,  7.9391e-02,  6.3133e-02,  2.4371e-01,
          1.8828e-02,  2.5745e-01,  8.1624e-03, -1.1773e-01,  5.1818e-02,
          7.9335e-02,  6.0854e-02]], device='cuda:0') tensor(0.2029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
822000 特征值优化 tensor(0.6055, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5354, -0.4455,  0.5520,  0.2718, -1.6782, -0.2235, -0.7257, -0.4900,
          0.1809,  0.0852,  1.2904, -1.0634, -0.0185,  0.0183, -0.1108,  0.1096,
         -0.0333,  0.1506,  0.0309, -0.1314, -0.1644, -0.1069,  0.0375, -0.0686,
         -0.2356, -0.1435, -0.0222, -0.0128, -0.0111, -0.0815,  0.3312, -0.0103,
         -0.0674,  0.1446, -0.0478,  0.0160, -0.1537,  0.1429, -0.0737, -0.0898,
          0.0764,  0.1302, -0.3975, -0.1392,  0.5596,  0.1696,  0.0326, -0.5953,
          0.1633,  0.1041,  0.1726,  0.0123,  0.1945,  0.1965,  0.4615,  0.1453,
          0.2044,  0.0769,  0.1715,  0.1017,  0.1543, -0.1398,  0.0926,  0.0518,
          0.2325,  0.0243,  0.2546, -0.0029, -0.1192,  0.0589,  0.0785,  0.0593]],
       device='cuda:0') tensor(0.2058, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
823000 特征值优化 tensor(0.6114, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.2084e-01, -4.3111e-01,  5.8352e-01,  2.8082e-01, -1.6625e+00,
         -2.0370e-01, -7.2813e-01, -4.8927e-01,  1.7197e-01,  8.8774e-02,
          1.2920e+00, -1.0491e+00, -1.8714e-02,  6.7863e-03, -5.7829e-02,
          1.1673e-01, -2.7463e-02,  1.4784e-01,  2.0611e-02, -1.3255e-01,
         -1.6482e-01, -1.0605e-01, -1.9965e-02, -9.2123e-02, -2.2740e-01,
         -1.5585e-01, -3.6796e-02, -2.0348e-02, -2.5284e-04, -8.0497e-02,
          3.2782e-01, -1.2382e-02, -5.0948e-02,  1.4760e-01, -3.6413e-02,
          9.8176e-03, -1.5144e-01,  1.4413e-01, -7.1537e-02, -9.1936e-02,
          7.4080e-02,  1.3181e-01, -3.9057e-01, -1.3829e-01,  5.5919e-01,
          1.6816e-01,  2.9720e-02, -6.0853e-01,  1.5951e-01,  1.1171e-01,
          1.7283e-01,  1.0320e-02,  1.9076e-01,  1.9830e-01,  4.5998e-01,
          1.4328e-01,  1.8435e-01,  9.1007e-02,  1.7085e-01,  1.1415e-01,
          1.5511e-01, -1.4251e-01,  9.2306e-02,  5.3983e-02,  2.3548e-01,
          2.1086e-02,  2.5269e-01, -1.1584e-04, -1.2695e-01,  6.5593e-02,
          8.6540e-02,  5.5097e-02]], device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
824000 特征值优化 tensor(0.6108, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.2531e-01, -4.2582e-01,  5.8553e-01,  2.8289e-01, -1.6421e+00,
         -2.1429e-01, -7.3151e-01, -4.8848e-01,  1.7499e-01,  8.3150e-02,
          1.2998e+00, -1.0790e+00, -1.7815e-02, -9.5630e-04, -7.6880e-02,
          1.1191e-01, -2.8154e-02,  1.4887e-01,  2.3218e-02, -1.3326e-01,
         -1.6377e-01, -1.0696e-01, -1.6529e-02, -9.0882e-02, -2.3098e-01,
         -1.4401e-01, -5.7936e-03, -7.5802e-03, -4.9693e-03, -8.0163e-02,
          3.2935e-01,  1.1069e-02, -5.0978e-02,  1.4690e-01, -3.3618e-02,
          8.8367e-03, -1.5202e-01,  1.4304e-01, -7.1817e-02, -8.9999e-02,
          7.3742e-02,  1.2987e-01, -3.8975e-01, -1.3926e-01,  5.6131e-01,
          1.7002e-01,  2.9938e-02, -6.1152e-01,  1.5393e-01,  1.1738e-01,
          1.6729e-01,  1.2533e-02,  1.9833e-01,  1.9176e-01,  4.6319e-01,
          1.4792e-01,  1.7923e-01,  9.3612e-02,  1.6887e-01,  1.1264e-01,
          1.3710e-01, -1.3213e-01,  8.5620e-02,  5.6240e-02,  2.4595e-01,
          2.0186e-02,  2.5047e-01,  1.7000e-03, -1.3419e-01,  6.8929e-02,
          9.4763e-02,  4.6202e-02]], device='cuda:0') tensor(0.2071, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
825000 特征值优化 tensor(0.6169, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5216, -0.4277,  0.5638,  0.2630, -1.6402, -0.2294, -0.7184, -0.4693,
          0.1719,  0.0668,  1.2729, -1.0365, -0.0176, -0.0339, -0.0281,  0.1057,
         -0.0446,  0.1532,  0.0161, -0.1317, -0.1656, -0.1085,  0.0319, -0.0359,
         -0.2412, -0.1449,  0.0104, -0.0153, -0.0130, -0.0793,  0.3291,  0.0060,
         -0.0106,  0.1456, -0.0378, -0.0082, -0.1588,  0.1448, -0.0670, -0.0966,
          0.0773,  0.1296, -0.3915, -0.1371,  0.5571,  0.1643,  0.0331, -0.5968,
          0.1387,  0.1342,  0.1716,  0.0121,  0.1720,  0.2039,  0.4598,  0.1467,
          0.1447,  0.1173,  0.1684,  0.1348,  0.1757, -0.1483,  0.0743,  0.0603,
          0.2612,  0.0159,  0.2330,  0.0129, -0.1310,  0.0631,  0.1056,  0.0316]],
       device='cuda:0') tensor(0.2065, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
826000 特征值优化 tensor(0.6031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5244, -0.4374,  0.5612,  0.2558, -1.6712, -0.2011, -0.7014, -0.4702,
          0.1877,  0.0738,  1.2703, -1.0785, -0.0180, -0.1306,  0.0538,  0.0892,
         -0.0759,  0.1671,  0.0288, -0.1310, -0.1647, -0.1089,  0.0044, -0.0195,
         -0.2461, -0.1462,  0.0370, -0.0152, -0.0199, -0.0789,  0.3304, -0.0052,
          0.0335,  0.1473, -0.0417, -0.0406, -0.1597,  0.1441, -0.0685, -0.0932,
          0.0821,  0.1313, -0.3936, -0.1392,  0.5594,  0.1640,  0.0338, -0.5990,
          0.1272,  0.1470,  0.1719,  0.0112,  0.1839,  0.2035,  0.4596,  0.1488,
          0.1084,  0.1323,  0.1617,  0.1369,  0.1534, -0.1310,  0.0717,  0.0606,
          0.2778,  0.0078,  0.2322,  0.0028, -0.0960,  0.0438,  0.1216,  0.0248]],
       device='cuda:0') tensor(0.2074, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
827000 特征值优化 tensor(0.6351, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5233, -0.4297,  0.5608,  0.2620, -1.6575, -0.2090, -0.7274, -0.4591,
          0.1769,  0.0811,  1.2647, -1.0634, -0.0167, -0.1143,  0.0397,  0.0861,
         -0.0786,  0.1678,  0.0256, -0.1296, -0.1653, -0.1072,  0.0250, -0.0449,
         -0.2351, -0.1404,  0.0389,  0.0081, -0.0106, -0.0791,  0.3255,  0.0031,
          0.0231,  0.1473, -0.0290, -0.0215, -0.1583,  0.1395, -0.0694, -0.0885,
          0.0789,  0.1275, -0.3904, -0.1396,  0.5565,  0.1622,  0.0358, -0.5939,
          0.1157,  0.1599,  0.1720,  0.0117,  0.1880,  0.1955,  0.4609,  0.1524,
          0.1087,  0.1338,  0.1642,  0.1314,  0.1541, -0.1290,  0.0775,  0.0483,
          0.2653,  0.0142,  0.2326,  0.0145, -0.1172,  0.0602,  0.1294,  0.0227]],
       device='cuda:0') tensor(0.2040, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
828000 特征值优化 tensor(0.6124, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.1629e-01, -4.1684e-01,  5.7924e-01,  2.7769e-01, -1.6412e+00,
         -2.0907e-01, -7.1083e-01, -4.5380e-01,  1.5987e-01,  8.6031e-02,
          1.2612e+00, -1.0475e+00, -1.8200e-02, -2.7520e-02, -2.7294e-02,
          1.1021e-01, -4.5995e-02,  1.5424e-01,  1.9642e-02, -1.3270e-01,
         -1.6510e-01, -1.0672e-01,  2.3429e-02, -5.2541e-02, -2.3795e-01,
         -1.3751e-01,  3.6629e-05, -4.0250e-03, -7.5629e-03, -8.0484e-02,
          3.2928e-01, -1.2958e-02, -2.5779e-02,  1.4578e-01, -4.0022e-02,
         -3.3823e-03, -1.5433e-01,  1.5113e-01, -6.9838e-02, -9.2939e-02,
          7.4398e-02,  1.2926e-01, -3.8567e-01, -1.4085e-01,  5.5829e-01,
          1.5663e-01,  3.2766e-02, -6.0732e-01,  1.3681e-01,  1.3384e-01,
          1.6954e-01,  1.2863e-02,  1.7622e-01,  2.0060e-01,  4.6479e-01,
          1.3816e-01,  1.5739e-01,  1.0381e-01,  1.6705e-01,  1.2486e-01,
          1.6685e-01, -1.4093e-01,  8.3122e-02,  6.3027e-02,  2.5115e-01,
          1.6282e-02,  2.4495e-01,  8.1655e-03, -1.1978e-01,  5.2992e-02,
          1.0200e-01,  4.1572e-02]], device='cuda:0') tensor(0.2325, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
829000 特征值优化 tensor(0.6123, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5214, -0.4171,  0.5706,  0.2720, -1.6423, -0.2128, -0.7094, -0.4560,
          0.1639,  0.0879,  1.2717, -1.0588, -0.0184, -0.0430, -0.0261,  0.1162,
         -0.0312,  0.1486,  0.0184, -0.1319, -0.1649, -0.1066,  0.0054, -0.0683,
         -0.2351, -0.1355, -0.0209, -0.0170, -0.0137, -0.0809,  0.3282, -0.0019,
         -0.0163,  0.1450, -0.0429, -0.0078, -0.1508,  0.1497, -0.0706, -0.0919,
          0.0733,  0.1281, -0.3895, -0.1403,  0.5590,  0.1570,  0.0325, -0.6039,
          0.1334,  0.1365,  0.1720,  0.0139,  0.1846,  0.1990,  0.4630,  0.1383,
          0.1551,  0.1044,  0.1673,  0.1278,  0.1425, -0.1294,  0.0848,  0.0611,
          0.2485,  0.0183,  0.2447,  0.0074, -0.1144,  0.0537,  0.1098,  0.0380]],
       device='cuda:0') tensor(0.2129, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
830000 特征值优化 tensor(0.6098, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.2289e-01, -4.2738e-01,  5.7875e-01,  2.7477e-01, -1.6463e+00,
         -2.1773e-01, -7.3179e-01, -4.6405e-01,  1.6404e-01,  8.7055e-02,
          1.2900e+00, -1.0760e+00, -1.8169e-02, -2.1362e-02, -4.4019e-02,
          1.1876e-01, -2.6056e-02,  1.4349e-01,  1.8364e-02, -1.3188e-01,
         -1.6448e-01, -1.0720e-01, -1.1980e-02, -8.3811e-02, -2.3958e-01,
         -1.3160e-01,  1.0893e-03, -1.3875e-02, -1.3099e-02, -8.0453e-02,
          3.2887e-01, -5.3301e-03, -2.8504e-02,  1.4517e-01, -3.7463e-02,
          2.3658e-03, -1.5090e-01,  1.4735e-01, -6.9633e-02, -9.1041e-02,
          7.3707e-02,  1.2790e-01, -3.9226e-01, -1.3899e-01,  5.5952e-01,
          1.6175e-01,  3.2460e-02, -6.0864e-01,  1.4723e-01,  1.2431e-01,
          1.7433e-01,  1.0998e-02,  1.8456e-01,  2.0010e-01,  4.6317e-01,
          1.4008e-01,  1.7048e-01,  9.6281e-02,  1.6822e-01,  1.1771e-01,
          1.5367e-01, -1.3596e-01,  8.5621e-02,  5.8309e-02,  2.5240e-01,
          1.8268e-02,  2.4943e-01,  5.9084e-03, -1.2304e-01,  5.8721e-02,
          1.0136e-01,  4.0886e-02]], device='cuda:0') tensor(0.2104, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
831000 特征值优化 tensor(0.6088, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.2264e-01, -4.3041e-01,  5.8081e-01,  2.7913e-01, -1.6557e+00,
         -2.1130e-01, -7.3870e-01, -4.6352e-01,  1.5096e-01,  8.8967e-02,
          1.2988e+00, -1.0440e+00, -1.8590e-02, -2.5177e-04, -7.3784e-02,
          1.1679e-01, -2.8964e-02,  1.4668e-01,  2.1859e-02, -1.3203e-01,
         -1.6462e-01, -1.0670e-01, -2.2644e-02, -7.3858e-02, -2.2911e-01,
         -1.5536e-01, -5.5348e-02, -3.5108e-03, -4.0821e-03, -8.0434e-02,
          3.2912e-01, -7.0519e-03, -4.6739e-02,  1.4384e-01, -5.2080e-02,
          5.2305e-03, -1.4952e-01,  1.4734e-01, -6.8803e-02, -9.5876e-02,
          7.1815e-02,  1.2718e-01, -3.9169e-01, -1.3869e-01,  5.5970e-01,
          1.6551e-01,  3.1403e-02, -6.0762e-01,  1.5439e-01,  1.1455e-01,
          1.7247e-01,  1.0756e-02,  1.8670e-01,  2.0159e-01,  4.6232e-01,
          1.3661e-01,  1.7737e-01,  8.8059e-02,  1.6888e-01,  1.2101e-01,
          1.6051e-01, -1.4089e-01,  8.9219e-02,  5.6216e-02,  2.4072e-01,
          2.1324e-02,  2.5377e-01,  9.5890e-03, -1.2484e-01,  6.0096e-02,
          9.7340e-02,  5.1996e-02]], device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
832000 特征值优化 tensor(0.6081, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.3797e-01, -4.4194e-01,  5.5272e-01,  2.7569e-01, -1.6622e+00,
         -2.2346e-01, -7.4811e-01, -4.5804e-01,  1.7187e-01,  9.0528e-02,
          1.3083e+00, -1.0667e+00, -1.8149e-02,  7.3086e-03, -9.8217e-02,
          1.1267e-01, -2.7874e-02,  1.3942e-01,  1.2435e-02, -1.3193e-01,
         -1.6484e-01, -1.0690e-01,  3.1764e-03, -8.6436e-02, -2.3457e-01,
         -1.4294e-01, -2.9986e-02, -2.1597e-02, -2.0585e-02, -8.0691e-02,
          3.2908e-01, -3.0406e-04, -6.4332e-02,  1.4378e-01, -4.9756e-02,
          1.2553e-02, -1.4874e-01,  1.4672e-01, -7.0365e-02, -9.1519e-02,
          7.1459e-02,  1.2560e-01, -3.9932e-01, -1.3891e-01,  5.5913e-01,
          1.7005e-01,  3.1892e-02, -5.9491e-01,  1.5539e-01,  1.1580e-01,
          1.6942e-01,  1.3247e-02,  1.9677e-01,  1.9735e-01,  4.6162e-01,
          1.4073e-01,  1.9664e-01,  8.0692e-02,  1.6890e-01,  1.0780e-01,
          1.5833e-01, -1.3902e-01,  8.2799e-02,  5.7395e-02,  2.3493e-01,
          2.3959e-02,  2.5870e-01,  1.2213e-03, -1.2883e-01,  6.1371e-02,
          8.5727e-02,  5.2419e-02]], device='cuda:0') tensor(0.2052, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
833000 特征值优化 tensor(0.6053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5249, -0.4157,  0.5733,  0.2678, -1.6605, -0.2260, -0.7057, -0.4380,
          0.1662,  0.1043,  1.2658, -1.0571, -0.0185, -0.1125,  0.0308,  0.0990,
         -0.0617,  0.1626,  0.0338, -0.1304, -0.1645, -0.1069,  0.0419, -0.0343,
         -0.2373, -0.1310,  0.0633,  0.0191, -0.0299, -0.0800,  0.3339,  0.0143,
          0.0188,  0.1465, -0.0333, -0.0514, -0.1558,  0.1513, -0.0672, -0.0932,
          0.0753,  0.1286, -0.3927, -0.1396,  0.5587,  0.1528,  0.0348, -0.6047,
          0.1213,  0.1497,  0.1721,  0.0124,  0.1809,  0.2056,  0.4610,  0.1412,
          0.1311,  0.1249,  0.1595,  0.1441,  0.1618, -0.1347,  0.0681,  0.0680,
          0.2743,  0.0023,  0.2337,  0.0105, -0.1049,  0.0410,  0.1188,  0.0367]],
       device='cuda:0') tensor(0.2165, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
834000 特征值优化 tensor(16.3745, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2067e+00, -1.7215e+00, -7.6375e-01, -2.7500e-01,  3.9509e-01,
          4.9338e-01,  5.6812e-01,  9.7529e-02,  2.0367e-01, -9.0287e-02,
          8.3133e-01,  1.6275e+00,  1.6013e+00, -1.0226e+00,  1.4997e+00,
          8.7258e-01, -1.1901e-01,  6.3598e-01, -2.2965e-01, -4.0554e-01,
          2.3965e-01, -7.9760e-02,  2.4284e-01,  1.8028e-01, -1.0300e-01,
         -1.2190e+00,  1.7953e-02, -2.5406e-02, -3.7595e-02,  1.1321e-01,
         -9.2964e-01,  3.9332e-01, -5.4020e-01,  1.7718e+00, -8.4797e-01,
          6.1984e-01, -1.1436e-01, -1.1588e+00,  3.9660e-02,  1.6624e+00,
         -1.4612e-01,  3.6338e-02,  9.5822e-01,  2.6856e-01, -1.2915e+00,
          2.5590e-01,  7.2292e-01,  4.3760e-01, -2.2365e-01, -4.6665e-03,
          2.4591e-02, -7.3570e-02, -7.9251e-01, -7.3385e-01,  9.6260e-04,
          2.9288e+00, -1.0996e+00,  1.6500e-01, -3.3271e-01, -3.9163e-02,
          2.7767e-01, -2.7318e-02,  9.1758e-02, -9.3005e-01, -1.4547e+00,
          1.5599e-01,  9.1896e-02, -1.1398e-01,  6.5075e-01, -5.1248e-01,
         -4.4040e-01,  2.7091e-01]], device='cuda:0') tensor(0.2063, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
835000 特征值优化 tensor(4.1957, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3728, -1.1758, -0.3440, -0.1663,  0.1604,  0.3843, -0.1980,  0.1323,
          0.4124, -0.0394, -0.1468,  0.7169,  0.5216, -0.2829,  0.6258,  0.2053,
         -0.0374,  0.0201, -0.0211, -0.0197,  0.0223, -0.0578,  0.0026,  0.0773,
          0.0152, -0.2890,  0.0722, -0.0141,  0.0355,  0.1138, -0.2515,  0.0059,
         -0.0122,  0.7338, -0.1162,  0.0743, -0.1267, -0.4249, -0.0398,  0.6446,
         -0.0378,  0.0185,  0.3220,  0.4022, -0.6437,  0.1700,  0.2774,  0.0757,
         -0.0038,  0.1973, -0.0677, -0.0087, -0.2452,  0.0114, -0.2268,  1.5104,
         -0.9138,  0.2337, -0.1010, -0.0794,  0.2566,  0.1019,  0.4164, -0.2765,
         -1.0158,  0.3337, -0.0445,  0.0166,  0.2048, -0.0270, -0.6741,  0.1074]],
       device='cuda:0') tensor(0.2168, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
836000 特征值优化 tensor(0.6690, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0729, -0.9921, -0.3338, -0.2289,  0.1620,  0.2495, -0.7237,  0.1495,
          0.4254, -0.1018, -0.2088,  0.7401,  0.1617, -0.0157,  0.2418, -0.0220,
         -0.1718,  0.0893, -0.1450,  0.0143,  0.0121, -0.0655,  0.0937,  0.1485,
         -0.0706, -0.2017,  0.0343, -0.0685,  0.0320,  0.1226, -0.1673, -0.0326,
         -0.0926,  0.3558, -0.0146,  0.0559, -0.1530, -0.0976, -0.0182,  0.2505,
          0.0113, -0.0153,  0.1864,  0.1616, -0.0700,  0.3533,  0.1442,  0.0842,
         -0.1309,  0.3353, -0.1889,  0.0630, -0.1423,  0.1485, -0.0605,  0.5329,
         -0.7079,  0.1402, -0.1638, -0.4050,  0.2693,  0.0908,  0.3008, -0.1437,
         -0.7764,  0.0995, -0.0241,  0.0104, -0.0147,  0.0704, -0.3497,  0.0407]],
       device='cuda:0') tensor(0.2036, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
837000 特征值优化 tensor(0.6501, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.0339e-02, -1.0254e+00, -3.0699e-01, -1.8535e-01,  1.4115e-01,
          2.3573e-01, -6.1140e-01,  1.8479e-01,  6.5219e-02,  2.4006e-02,
         -1.2260e-01,  8.7919e-01,  1.6388e-01,  2.8131e-03,  1.9909e-01,
         -4.8565e-02, -1.8902e-01,  9.9003e-02, -1.0308e-01, -8.7672e-03,
          9.8696e-03, -6.7653e-02,  1.8261e-01,  7.4862e-02, -1.5827e-01,
         -1.9506e-01,  2.1650e-04, -4.9959e-02,  6.7622e-03,  1.1681e-01,
         -1.7562e-01, -1.2924e-02, -1.2904e-01,  3.5976e-01, -3.6045e-02,
          4.6589e-02, -1.4216e-01, -1.0553e-01, -1.9297e-02,  2.2260e-01,
          1.1270e-02, -1.3306e-02,  2.0025e-01,  1.3264e-01, -2.7513e-02,
          3.3898e-01,  1.5913e-01,  2.4196e-02, -7.3487e-02,  3.4768e-01,
         -1.9092e-01,  6.1334e-02, -1.5183e-01,  1.6457e-01, -1.4793e-01,
          4.5420e-01, -7.1240e-01,  1.2363e-01, -1.3701e-01, -4.3589e-01,
          2.9505e-01,  8.8130e-02,  2.4057e-01, -9.5440e-02, -6.0386e-01,
         -1.6802e-02, -4.3573e-02, -4.9223e-03, -9.2661e-02,  1.0620e-01,
         -3.6102e-01,  7.5421e-02]], device='cuda:0') tensor(0.2080, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
838000 特征值优化 tensor(0.6373, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.1697e-02, -1.0235e+00, -2.9885e-01, -1.8875e-01,  8.2905e-02,
          2.0297e-01, -5.8662e-01,  3.2665e-01, -2.2499e-02,  1.0999e-02,
         -1.5280e-01,  9.5843e-01,  1.6683e-01,  6.4991e-02,  1.5847e-01,
         -5.2825e-02, -1.3722e-01,  9.7926e-02, -1.9778e-01, -2.4400e-02,
          9.4309e-03, -6.7820e-02,  2.2076e-01,  1.6279e-02, -1.7394e-01,
         -1.8836e-01,  3.6137e-03, -4.6146e-02,  3.8498e-02,  1.1611e-01,
         -1.7171e-01,  2.8439e-02, -1.4485e-01,  3.5872e-01, -3.0563e-02,
          4.0954e-02, -1.0516e-01, -1.2483e-01, -1.7514e-02,  2.1077e-01,
         -2.3814e-02, -1.2846e-02,  2.0135e-01,  9.3765e-02,  5.7490e-03,
          3.2761e-01,  1.5734e-01,  1.8083e-02, -6.1082e-02,  3.3936e-01,
         -2.1176e-01,  7.5131e-02, -3.5628e-02,  1.1085e-01, -2.7094e-01,
          3.3934e-01, -7.0796e-01,  1.3098e-01, -1.9784e-01, -4.3944e-01,
          3.0536e-01,  6.8158e-02,  9.2794e-02, -5.8299e-02, -6.0273e-01,
         -4.5976e-02, -3.6625e-02, -2.0800e-05, -1.9594e-01,  1.7111e-01,
         -3.5432e-01,  9.6222e-02]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
839000 特征值优化 tensor(0.6309, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.6908e-02, -1.0191e+00, -3.1333e-01, -1.8812e-01,  6.0813e-02,
          2.0728e-01, -5.6904e-01,  3.8407e-01, -1.9870e-01,  3.6971e-03,
         -1.2173e-01,  1.1385e+00,  1.6472e-01,  7.6441e-02,  1.2903e-01,
         -6.4524e-02, -1.7030e-01,  1.0315e-01, -1.7151e-01,  4.3049e-05,
          9.3560e-03, -6.7885e-02,  2.1092e-01,  1.8120e-02, -1.6203e-01,
         -1.5264e-01,  8.4772e-04, -5.2554e-02,  7.4826e-03,  1.1589e-01,
         -1.7004e-01,  5.2813e-02, -1.2298e-01,  3.5691e-01, -3.2151e-02,
          4.6752e-02, -7.9759e-02, -1.3010e-01, -1.6386e-02,  1.7286e-01,
         -4.3364e-02, -1.4412e-02,  1.9992e-01,  1.0528e-01, -1.1997e-02,
          3.5110e-01,  1.4421e-01,  2.3504e-02, -6.6634e-02,  3.4195e-01,
         -1.9004e-01,  6.2220e-02,  7.3073e-02,  5.8827e-02, -2.6907e-01,
          2.5809e-01, -7.1207e-01,  1.2985e-01, -2.7482e-01, -3.7945e-01,
          3.0313e-01,  5.8871e-02,  3.0811e-02, -3.4643e-02, -6.1115e-01,
         -9.0751e-02, -4.9501e-02,  4.8480e-03, -2.9611e-01,  2.3717e-01,
         -3.6003e-01,  1.4572e-01]], device='cuda:0') tensor(0.2034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
840000 特征值优化 tensor(0.6742, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0603, -1.0348, -0.2968, -0.1936,  0.0590,  0.2009, -0.6072,  0.3706,
         -0.3583,  0.0073, -0.0776,  1.3030,  0.1653,  0.0909,  0.1242, -0.1154,
         -0.1963,  0.0846, -0.1202,  0.0510,  0.0048, -0.0688,  0.2219,  0.0643,
         -0.1290, -0.1673,  0.0335, -0.0557, -0.0257,  0.1160, -0.1694,  0.0336,
         -0.1186,  0.3555, -0.0257,  0.0476, -0.0622, -0.1303, -0.0103,  0.1285,
         -0.0644, -0.0183,  0.2062,  0.1208, -0.0089,  0.3126,  0.1635,  0.0114,
         -0.0497,  0.3406, -0.2130,  0.0739,  0.1761,  0.0065, -0.2600,  0.2401,
         -0.7049,  0.1304, -0.2651, -0.3834,  0.2292,  0.0776, -0.0131, -0.0091,
         -0.5781, -0.1334, -0.0459,  0.0043, -0.3360,  0.2574, -0.3924,  0.1851]],
       device='cuda:0') tensor(0.2042, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
841000 特征值优化 tensor(0.6320, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.1767e-02, -1.0093e+00, -3.1165e-01, -1.8782e-01,  6.1621e-02,
          2.0742e-01, -6.0982e-01,  3.5954e-01, -3.7159e-01, -3.4701e-03,
         -7.0533e-02,  1.3270e+00,  1.6263e-01,  8.6730e-02,  1.3554e-01,
         -9.6241e-02, -1.2105e-01,  7.7378e-02, -1.8435e-01, -2.2380e-03,
          1.0585e-02, -6.8461e-02,  2.0061e-01,  6.2585e-02, -1.5170e-01,
         -1.4909e-01,  4.3152e-02, -7.3825e-02,  9.2251e-03,  1.1590e-01,
         -1.7089e-01,  4.0416e-02, -1.1569e-01,  3.5560e-01, -2.3472e-02,
          4.7681e-02, -7.9693e-02, -1.2785e-01, -1.2508e-02,  1.1901e-01,
         -4.4719e-02, -1.7157e-02,  1.9473e-01,  1.2710e-01, -2.8559e-02,
          3.5099e-01,  1.5070e-01,  2.1472e-02, -6.5917e-02,  3.4100e-01,
         -1.9305e-01,  6.3660e-02,  1.6026e-01,  1.4753e-02, -2.6068e-01,
          2.4190e-01, -7.2161e-01,  1.4217e-01, -2.6567e-01, -3.7748e-01,
          2.5208e-01,  7.9634e-02, -1.8697e-02, -2.4151e-03, -5.7869e-01,
         -1.3718e-01, -3.7115e-02,  3.5138e-04, -3.5583e-01,  2.5654e-01,
         -3.7958e-01,  1.8632e-01]], device='cuda:0') tensor(0.2034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
842000 特征值优化 tensor(0.6213, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0256, -1.0158, -0.3057, -0.1912,  0.0497,  0.2116, -0.5976,  0.3807,
         -0.4039,  0.0017, -0.1016,  1.3541,  0.1688,  0.0831,  0.1396, -0.0706,
         -0.0984,  0.1180, -0.2197, -0.0286,  0.0099, -0.0679,  0.2216,  0.0238,
         -0.1595, -0.1566,  0.0600, -0.0520,  0.0393,  0.1149, -0.1727,  0.0455,
         -0.1197,  0.3544, -0.0264,  0.0458, -0.0885, -0.1301, -0.0087,  0.1024,
         -0.0339, -0.0177,  0.2028,  0.1477, -0.0334,  0.3354,  0.1597,  0.0162,
         -0.0577,  0.3363, -0.2082,  0.0734,  0.1493,  0.0196, -0.3213,  0.1987,
         -0.7329,  0.1393, -0.2803, -0.3496,  0.2678,  0.0884, -0.0228, -0.0034,
         -0.5797, -0.1400, -0.0146, -0.0144, -0.3491,  0.2453, -0.3606,  0.1832]],
       device='cuda:0') tensor(0.2097, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
843000 特征值优化 tensor(0.6222, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0305, -1.0168, -0.3058, -0.1882,  0.0531,  0.2178, -0.6125,  0.3799,
         -0.4517, -0.0034, -0.0809,  1.4040,  0.1719,  0.0832,  0.1357, -0.0665,
         -0.1084,  0.1167, -0.2172, -0.0295,  0.0127, -0.0682,  0.2162,  0.0207,
         -0.1503, -0.1521,  0.0608, -0.0496,  0.0351,  0.1150, -0.1717,  0.0482,
         -0.1164,  0.3543, -0.0245,  0.0483, -0.0889, -0.1275, -0.0058,  0.0751,
         -0.0380, -0.0185,  0.2013,  0.1409, -0.0329,  0.3216,  0.1615,  0.0174,
         -0.0584,  0.3356, -0.2032,  0.0692,  0.1523,  0.0187, -0.2915,  0.1987,
         -0.7372,  0.1386, -0.2652, -0.3649,  0.2749,  0.0790, -0.0313, -0.0019,
         -0.5817, -0.1495, -0.0246, -0.0084, -0.3501,  0.2565, -0.3646,  0.1941]],
       device='cuda:0') tensor(0.2028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
844000 特征值优化 tensor(0.6235, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0340, -1.0099, -0.3074, -0.1900,  0.0502,  0.2103, -0.6060,  0.3725,
         -0.4655, -0.0187, -0.0776,  1.4210,  0.1694,  0.0779,  0.1346, -0.0663,
         -0.1215,  0.1064, -0.2094, -0.0275,  0.0133, -0.0678,  0.2239,  0.0062,
         -0.1655, -0.1283,  0.0581, -0.0373,  0.0307,  0.1151, -0.1731,  0.0465,
         -0.1188,  0.3548, -0.0228,  0.0479, -0.0887, -0.1278, -0.0067,  0.0636,
         -0.0375, -0.0176,  0.2048,  0.1475, -0.0382,  0.3343,  0.1590,  0.0193,
         -0.0600,  0.3362, -0.2013,  0.0690,  0.1533,  0.0187, -0.2942,  0.1971,
         -0.7320,  0.1387, -0.2590, -0.3641,  0.2644,  0.0765, -0.0273, -0.0031,
         -0.5775, -0.1536, -0.0333, -0.0090, -0.3422,  0.2573, -0.3708,  0.1995]],
       device='cuda:0') tensor(0.2063, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
845000 特征值优化 tensor(0.6215, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0345, -1.0115, -0.2998, -0.1928,  0.0486,  0.1893, -0.6026,  0.3900,
         -0.4845, -0.0342, -0.0818,  1.4386,  0.1693,  0.0820,  0.1389, -0.0778,
         -0.0974,  0.1046, -0.2188, -0.0261,  0.0096, -0.0676,  0.2383, -0.0200,
         -0.1738, -0.1074,  0.0664, -0.0054,  0.0268,  0.1150, -0.1721,  0.0457,
         -0.1179,  0.3541, -0.0154,  0.0412, -0.0868, -0.1274, -0.0074,  0.0523,
         -0.0396, -0.0175,  0.2036,  0.1436, -0.0303,  0.3227,  0.1630,  0.0155,
         -0.0577,  0.3375, -0.2059,  0.0719,  0.1594,  0.0174, -0.2994,  0.1895,
         -0.7292,  0.1383, -0.2554, -0.3727,  0.2661,  0.0794, -0.0300, -0.0039,
         -0.5773, -0.1537, -0.0194, -0.0212, -0.3469,  0.2565, -0.3574,  0.1933]],
       device='cuda:0') tensor(0.2178, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
846000 特征值优化 tensor(0.6381, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0412, -0.9955, -0.3065, -0.1719,  0.0650,  0.1979, -0.5945,  0.3827,
         -0.4770, -0.0576, -0.0754,  1.4304,  0.1678,  0.0780,  0.1252, -0.0825,
         -0.0934,  0.0816, -0.2038, -0.0048,  0.0091, -0.0672,  0.2163,  0.0287,
         -0.1531, -0.1129,  0.0519, -0.0255,  0.0123,  0.1162, -0.1719,  0.0346,
         -0.1209,  0.3436, -0.0266,  0.0349, -0.0814, -0.1263, -0.0080,  0.0548,
         -0.0416, -0.0158,  0.2010,  0.1535, -0.0311,  0.3473,  0.1485,  0.0089,
         -0.0574,  0.3432, -0.1932,  0.0584,  0.1600,  0.0156, -0.2701,  0.2103,
         -0.7303,  0.1349, -0.2537, -0.3475,  0.2608,  0.0757, -0.0218, -0.0032,
         -0.5752, -0.1594, -0.0385, -0.0067, -0.3436,  0.2548, -0.3876,  0.2111]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
847000 特征值优化 tensor(0.6406, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0367, -1.0068, -0.3080, -0.1779,  0.0611,  0.1894, -0.5934,  0.3777,
         -0.4810, -0.0672, -0.0893,  1.4472,  0.1700,  0.0861,  0.1327, -0.0739,
         -0.0998,  0.0954, -0.2053, -0.0092,  0.0075, -0.0662,  0.2227,  0.0248,
         -0.1613, -0.1186,  0.0469, -0.0363,  0.0170,  0.1155, -0.1710,  0.0356,
         -0.1208,  0.3424, -0.0269,  0.0304, -0.0814, -0.1264, -0.0069,  0.0453,
         -0.0436, -0.0156,  0.2043,  0.1546, -0.0277,  0.3430,  0.1485,  0.0116,
         -0.0551,  0.3434, -0.1962,  0.0603,  0.1574,  0.0180, -0.2797,  0.2050,
         -0.7282,  0.1295, -0.2472, -0.3410,  0.2601,  0.0790, -0.0200, -0.0043,
         -0.5831, -0.1545, -0.0527, -0.0157, -0.3418,  0.2537, -0.3844,  0.2101]],
       device='cuda:0') tensor(0.2029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
848000 特征值优化 tensor(0.6290, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.8461e-02, -9.9396e-01, -3.0691e-01, -1.8123e-01,  7.1847e-02,
          1.9064e-01, -6.0706e-01,  3.6622e-01, -4.9584e-01, -8.9554e-02,
         -7.6768e-02,  1.4553e+00,  1.6862e-01,  7.5260e-02,  1.3647e-01,
         -9.6871e-02, -1.4362e-01,  8.4436e-02, -1.7631e-01,  9.2440e-03,
          1.5160e-02, -6.8286e-02,  2.1903e-01,  3.4128e-02, -1.5377e-01,
         -1.1589e-01,  3.9371e-02, -6.3899e-02, -1.0115e-03,  1.1480e-01,
         -1.7321e-01,  3.6939e-02, -1.1967e-01,  3.5034e-01, -2.5102e-02,
          3.5728e-02, -7.0893e-02, -1.2815e-01, -9.7253e-03,  4.8701e-02,
         -5.5622e-02, -1.5149e-02,  2.0416e-01,  1.6190e-01, -4.7395e-02,
          3.5951e-01,  1.5232e-01,  1.8282e-02, -6.5621e-02,  3.4209e-01,
         -1.9216e-01,  6.2607e-02,  1.6213e-01,  1.8798e-02, -2.4919e-01,
          2.4504e-01, -7.3207e-01,  1.3581e-01, -2.4865e-01, -3.4802e-01,
          2.4970e-01,  7.7469e-02, -1.8762e-02, -6.6000e-03, -5.6198e-01,
         -1.5952e-01, -5.9959e-02, -3.2894e-03, -3.3697e-01,  2.5711e-01,
         -3.8722e-01,  2.0551e-01]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
849000 特征值优化 tensor(0.6249, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0039e-02, -1.0046e+00, -3.1542e-01, -1.9470e-01,  6.3594e-02,
          2.3767e-01, -6.1637e-01,  3.5148e-01, -5.4332e-01, -1.1159e-01,
         -7.7802e-02,  1.4847e+00,  1.6894e-01,  7.9155e-02,  1.3364e-01,
         -1.0319e-01, -1.8564e-01,  9.1869e-02, -1.5139e-01,  2.8712e-02,
          1.1576e-02, -6.7085e-02,  2.1342e-01,  6.0043e-02, -1.4347e-01,
         -1.2566e-01,  1.6413e-02, -7.8877e-02, -2.3260e-02,  1.1581e-01,
         -1.7592e-01,  2.9482e-02, -1.1175e-01,  3.4859e-01, -1.8875e-02,
          2.1107e-02, -6.2337e-02, -1.2928e-01, -7.3870e-03,  2.7955e-02,
         -6.3698e-02, -1.6937e-02,  2.0018e-01,  1.5969e-01, -4.0125e-02,
          3.5004e-01,  1.5584e-01,  2.1665e-02, -6.1402e-02,  3.3463e-01,
         -1.9879e-01,  6.6617e-02,  1.9238e-01,  1.2966e-03, -2.4096e-01,
          2.4307e-01, -7.7052e-01,  1.3709e-01, -2.4178e-01, -3.5493e-01,
          2.3392e-01,  8.3034e-02, -2.3438e-02, -1.8883e-03, -5.3321e-01,
         -1.6744e-01, -8.3743e-02,  4.3037e-03, -3.4984e-01,  2.6569e-01,
         -3.9106e-01,  2.0601e-01]], device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
850000 特征值优化 tensor(0.6497, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.0121e-02, -1.0107e+00, -3.1331e-01, -1.9240e-01,  6.4155e-02,
          2.4580e-01, -6.0900e-01,  3.6295e-01, -5.4348e-01, -1.3107e-01,
         -8.1406e-02,  1.4907e+00,  1.6994e-01,  8.6678e-02,  1.2452e-01,
         -1.0121e-01, -2.0820e-01,  9.2421e-02, -1.3415e-01,  4.4582e-02,
          1.1333e-02, -6.8791e-02,  2.0915e-01,  6.5909e-02, -1.3421e-01,
         -1.3466e-01,  1.6957e-02, -6.9161e-02, -2.6912e-02,  1.1618e-01,
         -1.7153e-01,  2.7219e-02, -1.0784e-01,  3.4547e-01, -1.9442e-02,
          1.8424e-02, -5.3691e-02, -1.2716e-01, -5.3451e-03,  2.8352e-02,
         -6.9228e-02, -1.7885e-02,  2.0307e-01,  1.5790e-01, -3.3634e-02,
          3.5178e-01,  1.5006e-01,  1.8262e-02, -5.3375e-02,  3.3935e-01,
         -2.0035e-01,  6.5196e-02,  1.9956e-01, -5.9212e-04, -2.4288e-01,
          2.4008e-01, -7.7270e-01,  1.3413e-01, -2.2957e-01, -3.5320e-01,
          2.2699e-01,  8.2078e-02, -2.3733e-02, -1.5699e-03, -5.2714e-01,
         -1.7103e-01, -9.3137e-02,  4.1381e-03, -3.4445e-01,  2.7245e-01,
         -4.0556e-01,  2.1175e-01]], device='cuda:0') tensor(0.2067, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
851000 特征值优化 tensor(0.6240, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0320, -1.0107, -0.3153, -0.1905,  0.0528,  0.2402, -0.6010,  0.3665,
         -0.5241, -0.1277, -0.0825,  1.4780,  0.1702,  0.0823,  0.1317, -0.0748,
         -0.1386,  0.1094, -0.1925, -0.0041,  0.0162, -0.0665,  0.2146,  0.0490,
         -0.1467, -0.1217,  0.0464, -0.0511,  0.0147,  0.1159, -0.1716,  0.0405,
         -0.1127,  0.3494, -0.0209,  0.0237, -0.0799, -0.1279, -0.0054,  0.0141,
         -0.0458, -0.0181,  0.2037,  0.1516, -0.0404,  0.3404,  0.1582,  0.0217,
         -0.0626,  0.3350, -0.1981,  0.0647,  0.1764,  0.0077, -0.2822,  0.2055,
         -0.7675,  0.1378, -0.2306, -0.3615,  0.2458,  0.0831, -0.0244, -0.0035,
         -0.5520, -0.1598, -0.0691, -0.0350, -0.3483,  0.2628, -0.3777,  0.1962]],
       device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
852000 特征值优化 tensor(0.6501, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.7463e-02, -1.0130e+00, -3.1160e-01, -1.8254e-01,  4.7261e-02,
          2.4255e-01, -6.0378e-01,  3.6101e-01, -5.1694e-01, -1.4947e-01,
         -6.8356e-02,  1.4642e+00,  1.7059e-01,  8.2232e-02,  1.3595e-01,
         -7.4617e-02, -1.0692e-01,  9.5354e-02, -2.1042e-01, -2.7198e-02,
          9.7429e-03, -6.8730e-02,  2.2232e-01,  3.0822e-02, -1.5669e-01,
         -1.1040e-01,  6.1946e-02, -1.9600e-02,  2.1852e-02,  1.1671e-01,
         -1.7047e-01,  4.0603e-02, -1.1528e-01,  3.4446e-01, -2.2484e-02,
          2.7189e-02, -8.4782e-02, -1.2785e-01, -6.6883e-03,  2.4624e-02,
         -3.9436e-02, -1.7378e-02,  2.0367e-01,  1.4971e-01, -2.9761e-02,
          3.3574e-01,  1.5504e-01,  1.6827e-02, -5.4526e-02,  3.4046e-01,
         -2.0215e-01,  6.3743e-02,  1.6840e-01,  1.6751e-02, -2.7418e-01,
          2.1545e-01, -7.7130e-01,  1.3367e-01, -2.3205e-01, -3.5992e-01,
          2.6106e-01,  7.8352e-02, -2.6994e-02, -7.9267e-04, -5.6273e-01,
         -1.5238e-01, -5.4378e-02, -4.9086e-02, -3.5681e-01,  2.5771e-01,
         -3.6833e-01,  1.9111e-01]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
853000 特征值优化 tensor(0.6256, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.1716e-02, -1.0053e+00, -3.1684e-01, -1.9052e-01,  6.4664e-02,
          2.3862e-01, -6.1687e-01,  3.5452e-01, -5.2971e-01, -1.8707e-01,
         -8.3057e-02,  1.4734e+00,  1.6896e-01,  8.0780e-02,  1.3538e-01,
         -1.1595e-01, -1.8279e-01,  8.9184e-02, -1.5154e-01,  2.4915e-02,
          1.2075e-02, -6.6423e-02,  2.1234e-01,  6.0638e-02, -1.4083e-01,
         -1.2164e-01,  3.0039e-02, -7.7012e-02, -1.6714e-02,  1.1586e-01,
         -1.7568e-01,  3.0214e-02, -1.0948e-01,  3.4856e-01, -1.8135e-02,
          1.8679e-02, -6.2354e-02, -1.2966e-01, -9.1090e-03,  2.7208e-02,
         -6.4399e-02, -1.4988e-02,  2.0149e-01,  1.6330e-01, -4.2662e-02,
          3.5679e-01,  1.5453e-01,  2.1941e-02, -6.2951e-02,  3.3502e-01,
         -1.9475e-01,  6.2481e-02,  1.9502e-01,  1.8987e-04, -2.4140e-01,
          2.4331e-01, -7.7105e-01,  1.3695e-01, -2.2886e-01, -3.6160e-01,
          2.3341e-01,  8.0974e-02, -2.3188e-02, -2.8551e-03, -5.2736e-01,
         -1.6761e-01, -8.1470e-02, -1.3070e-02, -3.4939e-01,  2.6811e-01,
         -3.9665e-01,  2.0554e-01]], device='cuda:0') tensor(0.2047, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
854000 特征值优化 tensor(0.6271, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0181, -0.9995, -0.3127, -0.1867,  0.0669,  0.2396, -0.6176,  0.3544,
         -0.5234, -0.2006, -0.0842,  1.4589,  0.1690,  0.0770,  0.1413, -0.1139,
         -0.1669,  0.0861, -0.1585,  0.0178,  0.0129, -0.0677,  0.2114,  0.0616,
         -0.1402, -0.1206,  0.0295, -0.0795, -0.0123,  0.1149, -0.1757,  0.0305,
         -0.1112,  0.3483, -0.0205,  0.0206, -0.0661, -0.1290, -0.0096,  0.0258,
         -0.0615, -0.0149,  0.1995,  0.1658, -0.0447,  0.3615,  0.1532,  0.0226,
         -0.0614,  0.3363, -0.1940,  0.0627,  0.1911,  0.0029, -0.2415,  0.2462,
         -0.7688,  0.1352, -0.2288, -0.3616,  0.2339,  0.0803, -0.0249, -0.0029,
         -0.5345, -0.1646, -0.0693, -0.0250, -0.3469,  0.2664, -0.3910,  0.2043]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
855000 特征值优化 tensor(0.6272, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0208, -0.9990, -0.3119, -0.1852,  0.0673,  0.2387, -0.6183,  0.3504,
         -0.5198, -0.2167, -0.0759,  1.4542,  0.1684,  0.0779,  0.1396, -0.1123,
         -0.1597,  0.0894, -0.1615,  0.0170,  0.0130, -0.0676,  0.2144,  0.0577,
         -0.1406, -0.1198,  0.0335, -0.0760, -0.0114,  0.1151, -0.1754,  0.0319,
         -0.1124,  0.3481, -0.0203,  0.0202, -0.0698, -0.1293, -0.0100,  0.0254,
         -0.0589, -0.0143,  0.2009,  0.1667, -0.0452,  0.3589,  0.1547,  0.0216,
         -0.0623,  0.3371, -0.1945,  0.0631,  0.1879,  0.0048, -0.2406,  0.2501,
         -0.7698,  0.1356, -0.2250, -0.3645,  0.2383,  0.0792, -0.0237, -0.0021,
         -0.5316, -0.1657, -0.0745, -0.0281, -0.3512,  0.2655, -0.3916,  0.2032]],
       device='cuda:0') tensor(0.2056, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
856000 特征值优化 tensor(0.6261, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0220, -1.0011, -0.3113, -0.1856,  0.0649,  0.2405, -0.6214,  0.3513,
         -0.5122, -0.2364, -0.0718,  1.4466,  0.1688,  0.0803,  0.1394, -0.1170,
         -0.1547,  0.0908, -0.1610,  0.0192,  0.0123, -0.0676,  0.2161,  0.0516,
         -0.1416, -0.1170,  0.0393, -0.0729, -0.0090,  0.1149, -0.1750,  0.0336,
         -0.1123,  0.3475, -0.0194,  0.0226, -0.0704, -0.1295, -0.0108,  0.0265,
         -0.0581, -0.0136,  0.2003,  0.1670, -0.0451,  0.3549,  0.1570,  0.0211,
         -0.0610,  0.3370, -0.1977,  0.0655,  0.1868,  0.0064, -0.2424,  0.2525,
         -0.7708,  0.1362, -0.2238, -0.3665,  0.2429,  0.0778, -0.0244, -0.0018,
         -0.5329, -0.1633, -0.0723, -0.0337, -0.3530,  0.2657, -0.3908,  0.2020]],
       device='cuda:0') tensor(0.2188, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
857000 特征值优化 tensor(0.6240, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.7170e-02, -1.0113e+00, -3.1172e-01, -1.8597e-01,  7.5280e-02,
          2.4120e-01, -6.2416e-01,  3.6077e-01, -5.0985e-01, -2.6181e-01,
         -8.2259e-02,  1.4570e+00,  1.6901e-01,  8.2843e-02,  1.3080e-01,
         -1.1899e-01, -1.9252e-01,  8.8872e-02, -1.4619e-01,  4.1966e-02,
          1.1716e-02, -6.7776e-02,  2.1570e-01,  6.4068e-02, -1.3408e-01,
         -1.2470e-01,  1.9144e-02, -9.3476e-02, -2.4307e-02,  1.1501e-01,
         -1.7625e-01,  2.8643e-02, -1.0790e-01,  3.4759e-01, -1.7456e-02,
          2.5578e-02, -6.0506e-02, -1.3109e-01, -1.1142e-02,  2.7201e-02,
         -6.7761e-02, -1.2740e-02,  2.0376e-01,  1.6212e-01, -4.1085e-02,
          3.5484e-01,  1.5650e-01,  2.1833e-02, -6.0374e-02,  3.3543e-01,
         -2.0043e-01,  6.7209e-02,  2.0005e-01,  2.2159e-04, -2.3905e-01,
          2.4980e-01, -7.7275e-01,  1.3568e-01, -2.1698e-01, -3.7045e-01,
          2.3032e-01,  7.8099e-02, -2.7580e-02, -1.9356e-03, -5.2249e-01,
         -1.6633e-01, -8.6933e-02, -2.7323e-02, -3.4797e-01,  2.7215e-01,
         -4.0632e-01,  2.0544e-01]], device='cuda:0') tensor(0.2035, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
858000 特征值优化 tensor(0.6238, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.2097e-02, -1.0101e+00, -3.1079e-01, -1.8817e-01,  7.4321e-02,
          2.4448e-01, -6.2342e-01,  3.5972e-01, -5.0732e-01, -2.7846e-01,
         -8.7479e-02,  1.4583e+00,  1.6883e-01,  8.2844e-02,  1.2756e-01,
         -1.1400e-01, -2.0622e-01,  9.3560e-02, -1.4169e-01,  3.9650e-02,
          1.0765e-02, -6.7999e-02,  2.1203e-01,  7.0432e-02, -1.2853e-01,
         -1.2900e-01,  1.6275e-02, -1.0073e-01, -2.6319e-02,  1.1483e-01,
         -1.7618e-01,  2.8835e-02, -1.0607e-01,  3.4822e-01, -1.6386e-02,
          2.1099e-02, -5.9336e-02, -1.3089e-01, -1.0902e-02,  2.5169e-02,
         -6.9112e-02, -1.2924e-02,  2.0241e-01,  1.6254e-01, -3.8860e-02,
          3.5619e-01,  1.5590e-01,  2.1064e-02, -6.0568e-02,  3.3572e-01,
         -1.9927e-01,  6.7203e-02,  2.0309e-01, -1.1434e-03, -2.3917e-01,
          2.4676e-01, -7.7408e-01,  1.3711e-01, -2.1079e-01, -3.7554e-01,
          2.2902e-01,  7.9682e-02, -2.6588e-02, -2.3195e-03, -5.1844e-01,
         -1.6752e-01, -9.5080e-02, -2.7545e-02, -3.4909e-01,  2.7330e-01,
         -4.1084e-01,  2.0510e-01]], device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
859000 特征值优化 tensor(0.6228, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.6809e-02, -1.0128e+00, -3.0868e-01, -1.8958e-01,  7.4202e-02,
          2.4270e-01, -6.1718e-01,  3.6295e-01, -5.0406e-01, -2.9635e-01,
         -8.3299e-02,  1.4546e+00,  1.6879e-01,  8.4164e-02,  1.2877e-01,
         -1.1480e-01, -1.9739e-01,  9.2861e-02, -1.4112e-01,  4.7365e-02,
          1.1474e-02, -6.7981e-02,  2.1380e-01,  6.8574e-02, -1.2797e-01,
         -1.3010e-01,  2.3998e-02, -9.5806e-02, -3.0844e-02,  1.1503e-01,
         -1.7685e-01,  2.7137e-02, -1.0857e-01,  3.4853e-01, -1.5535e-02,
          2.2481e-02, -5.7096e-02, -1.3078e-01, -1.3055e-02,  2.8641e-02,
         -6.9706e-02, -1.1559e-02,  2.0337e-01,  1.6059e-01, -3.9653e-02,
          3.5234e-01,  1.5803e-01,  1.9705e-02, -5.8800e-02,  3.3537e-01,
         -2.0610e-01,  7.1750e-02,  2.0226e-01, -9.0003e-04, -2.3944e-01,
          2.4922e-01, -7.7290e-01,  1.3720e-01, -2.0696e-01, -3.7495e-01,
          2.2674e-01,  8.1868e-02, -2.6825e-02, -1.8658e-03, -5.1627e-01,
         -1.6585e-01, -9.9715e-02, -2.6347e-02, -3.4692e-01,  2.7196e-01,
         -4.1081e-01,  2.0348e-01]], device='cuda:0') tensor(0.2105, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
860000 特征值优化 tensor(0.6384, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0376, -0.9991, -0.3161, -0.1794,  0.0619,  0.2334, -0.6072,  0.3678,
         -0.4865, -0.2972, -0.0840,  1.4430,  0.1701,  0.0877,  0.1253, -0.0995,
         -0.1909,  0.0932, -0.1422,  0.0368,  0.0144, -0.0659,  0.2043,  0.0568,
         -0.1229, -0.1330,  0.0363, -0.0833, -0.0154,  0.1146, -0.1705,  0.0260,
         -0.1077,  0.3460, -0.0210,  0.0110, -0.0598, -0.1281, -0.0077,  0.0175,
         -0.0627, -0.0129,  0.1993,  0.1607, -0.0322,  0.3614,  0.1427,  0.0132,
         -0.0555,  0.3427, -0.1921,  0.0585,  0.1958, -0.0039, -0.2429,  0.2307,
         -0.7622,  0.1359, -0.1985, -0.3744,  0.2214,  0.0807, -0.0257, -0.0017,
         -0.5181, -0.1693, -0.0828, -0.0463, -0.3389,  0.2744, -0.4221,  0.2140]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
861000 特征值优化 tensor(0.6250, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.1490e-02, -1.0105e+00, -3.1642e-01, -1.8760e-01,  5.1172e-02,
          2.3884e-01, -6.0104e-01,  3.6775e-01, -4.8584e-01, -3.0194e-01,
         -8.5549e-02,  1.4395e+00,  1.7005e-01,  7.8128e-02,  1.3233e-01,
         -7.1730e-02, -1.5024e-01,  1.1001e-01, -1.8434e-01,  6.3771e-03,
          1.9554e-02, -6.7278e-02,  2.1143e-01,  5.6850e-02, -1.3634e-01,
         -1.2240e-01,  5.3467e-02, -7.0453e-02,  8.7568e-03,  1.1628e-01,
         -1.7382e-01,  3.6437e-02, -1.1203e-01,  3.4899e-01, -1.8427e-02,
          2.1224e-02, -7.8179e-02, -1.2764e-01, -7.2247e-03,  1.4064e-02,
         -4.7594e-02, -1.6138e-02,  2.0567e-01,  1.5391e-01, -4.2850e-02,
          3.4869e-01,  1.5633e-01,  2.2672e-02, -6.2091e-02,  3.3689e-01,
         -1.9625e-01,  6.2851e-02,  1.8182e-01,  3.0654e-03, -2.7640e-01,
          2.1115e-01, -7.6966e-01,  1.3650e-01, -1.9707e-01, -3.8223e-01,
          2.4313e-01,  8.5319e-02, -2.5989e-02, -1.4324e-03, -5.2813e-01,
         -1.5780e-01, -9.2881e-02, -6.0209e-02, -3.4754e-01,  2.6479e-01,
         -4.0359e-01,  1.9414e-01]], device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
862000 特征值优化 tensor(0.6223, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2981e-02, -1.0189e+00, -3.1554e-01, -1.9109e-01,  5.0884e-02,
          2.4368e-01, -5.9741e-01,  3.6947e-01, -4.8185e-01, -3.1182e-01,
         -8.3550e-02,  1.4326e+00,  1.6929e-01,  8.1630e-02,  1.3389e-01,
         -7.3491e-02, -1.2846e-01,  1.1178e-01, -1.9801e-01, -2.4684e-03,
          1.6851e-02, -6.6672e-02,  2.1622e-01,  4.8250e-02, -1.3958e-01,
         -1.1935e-01,  6.3866e-02, -6.3275e-02,  1.8525e-02,  1.1596e-01,
         -1.7283e-01,  4.1225e-02, -1.1487e-01,  3.4905e-01, -1.7838e-02,
          2.2998e-02, -8.2579e-02, -1.2796e-01, -6.3445e-03,  1.0706e-02,
         -4.3952e-02, -1.6846e-02,  2.0550e-01,  1.4913e-01, -3.7614e-02,
          3.3849e-01,  1.5712e-01,  2.1586e-02, -6.0265e-02,  3.3441e-01,
         -2.0269e-01,  6.7808e-02,  1.7347e-01,  8.7793e-03, -2.8211e-01,
          2.0727e-01, -7.7209e-01,  1.3815e-01, -1.9162e-01, -3.8166e-01,
          2.4864e-01,  8.6036e-02, -2.8041e-02, -1.4089e-03, -5.3510e-01,
         -1.5119e-01, -9.0899e-02, -7.0268e-02, -3.4999e-01,  2.6029e-01,
         -3.9326e-01,  1.8642e-01]], device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
863000 特征值优化 tensor(0.6184, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.1072e-02, -1.0253e+00, -3.0879e-01, -1.9612e-01,  4.8436e-02,
          2.3643e-01, -5.9799e-01,  3.7403e-01, -4.7780e-01, -3.1767e-01,
         -7.7391e-02,  1.4212e+00,  1.7122e-01,  8.1388e-02,  1.4290e-01,
         -8.0593e-02, -8.7946e-02,  1.0458e-01, -2.2482e-01, -2.0216e-02,
          1.3738e-02, -6.7668e-02,  2.3567e-01,  4.5485e-02, -1.3925e-01,
         -1.2330e-01,  6.9778e-02, -4.6412e-02,  3.1139e-02,  1.1453e-01,
         -1.7492e-01,  4.4979e-02, -1.1706e-01,  3.4876e-01, -1.7315e-02,
          2.3192e-02, -8.7827e-02, -1.2767e-01, -8.6586e-03,  1.4984e-02,
         -3.8745e-02, -1.4621e-02,  2.0529e-01,  1.4361e-01, -3.1246e-02,
          3.2058e-01,  1.6249e-01,  1.9370e-02, -5.6017e-02,  3.3333e-01,
         -2.0806e-01,  7.3850e-02,  1.7036e-01,  1.4352e-02, -2.8744e-01,
          2.0250e-01, -7.6853e-01,  1.3779e-01, -1.9392e-01, -3.8235e-01,
          2.5731e-01,  8.5324e-02, -3.4386e-02,  5.9954e-04, -5.4662e-01,
         -1.4020e-01, -8.4933e-02, -8.2876e-02, -3.5427e-01,  2.5652e-01,
         -3.7684e-01,  1.7550e-01]], device='cuda:0') tensor(0.2049, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
864000 特征值优化 tensor(0.6312, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0191, -0.9877, -0.3027, -0.1795,  0.0562,  0.2369, -0.6088,  0.3584,
         -0.4628, -0.3474, -0.0669,  1.3974,  0.1695,  0.0794,  0.1384, -0.1026,
         -0.1227,  0.0817, -0.1824,  0.0038,  0.0172, -0.0677,  0.2106,  0.0391,
         -0.1433, -0.1086,  0.0510, -0.0506,  0.0036,  0.1148, -0.1738,  0.0399,
         -0.1147,  0.3502, -0.0162,  0.0295, -0.0773, -0.1266, -0.0135,  0.0269,
         -0.0468, -0.0104,  0.1999,  0.1527, -0.0364,  0.3601,  0.1567,  0.0184,
         -0.0657,  0.3413, -0.1948,  0.0625,  0.1766,  0.0121, -0.2421,  0.2409,
         -0.7637,  0.1359, -0.1961, -0.3825,  0.2527,  0.0768, -0.0284,  0.0024,
         -0.5384, -0.1529, -0.0661, -0.0654, -0.3589,  0.2625, -0.3933,  0.1952]],
       device='cuda:0') tensor(0.2075, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
865000 特征值优化 tensor(0.6244, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.4577e-02, -1.0064e+00, -3.1383e-01, -1.8784e-01,  7.0511e-02,
          2.3727e-01, -6.2486e-01,  3.5642e-01, -4.7408e-01, -3.7545e-01,
         -7.5588e-02,  1.4168e+00,  1.6886e-01,  8.3466e-02,  1.3274e-01,
         -1.1837e-01, -1.7745e-01,  9.0542e-02, -1.5376e-01,  3.0507e-02,
          1.1744e-02, -6.7680e-02,  2.1585e-01,  5.8685e-02, -1.3368e-01,
         -1.1653e-01,  3.6453e-02, -9.4853e-02, -1.7494e-02,  1.1505e-01,
         -1.7610e-01,  3.2207e-02, -1.0971e-01,  3.4791e-01, -1.6359e-02,
          2.3673e-02, -6.7050e-02, -1.3050e-01, -1.2832e-02,  2.2934e-02,
         -6.0969e-02, -1.1526e-02,  2.0300e-01,  1.6219e-01, -3.9773e-02,
          3.5159e-01,  1.5820e-01,  2.3037e-02, -5.9900e-02,  3.3520e-01,
         -1.9933e-01,  6.6743e-02,  1.9559e-01,  3.3843e-03, -2.3719e-01,
          2.5090e-01, -7.7004e-01,  1.3643e-01, -1.9295e-01, -3.8457e-01,
          2.4009e-01,  7.6103e-02, -3.0998e-02,  1.2321e-03, -5.1530e-01,
         -1.6002e-01, -8.8858e-02, -5.2490e-02, -3.5445e-01,  2.6956e-01,
         -4.0895e-01,  1.9748e-01]], device='cuda:0') tensor(0.2027, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
866000 特征值优化 tensor(0.6212, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.1399e-02, -1.0127e+00, -3.0985e-01, -2.0147e-01,  7.0936e-02,
          2.4095e-01, -6.2361e-01,  3.6116e-01, -4.7875e-01, -3.9884e-01,
         -7.6890e-02,  1.4215e+00,  1.6870e-01,  8.5686e-02,  1.2523e-01,
         -1.1434e-01, -2.0501e-01,  9.8632e-02, -1.3768e-01,  4.2312e-02,
          1.1604e-02, -6.8089e-02,  2.1759e-01,  6.4394e-02, -1.2648e-01,
         -1.2834e-01,  3.3485e-02, -8.7764e-02, -3.3702e-02,  1.1441e-01,
         -1.7783e-01,  3.0279e-02, -1.0867e-01,  3.4811e-01, -1.2717e-02,
          2.4676e-02, -6.1120e-02, -1.3072e-01, -1.6149e-02,  2.8844e-02,
         -6.4709e-02, -8.6105e-03,  2.0522e-01,  1.5691e-01, -3.5658e-02,
          3.4367e-01,  1.6289e-01,  1.9523e-02, -5.5930e-02,  3.3582e-01,
         -2.0753e-01,  7.6820e-02,  2.0072e-01, -1.1280e-03, -2.3778e-01,
          2.5136e-01, -7.7174e-01,  1.3676e-01, -1.8658e-01, -3.8800e-01,
          2.3431e-01,  7.8068e-02, -3.4804e-02,  1.8785e-03, -5.0372e-01,
         -1.6044e-01, -1.0649e-01, -4.2911e-02, -3.5319e-01,  2.7122e-01,
         -4.1752e-01,  1.9701e-01]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
867000 特征值优化 tensor(0.6280, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.6560e-02, -1.0027e+00, -3.1652e-01, -1.8731e-01,  4.4830e-02,
          2.4163e-01, -6.0146e-01,  3.7026e-01, -4.5958e-01, -3.9235e-01,
         -8.6930e-02,  1.4189e+00,  1.6903e-01,  7.6535e-02,  1.3047e-01,
         -7.5643e-02, -1.6564e-01,  1.0641e-01, -1.6887e-01,  8.1444e-03,
          1.9045e-02, -6.6903e-02,  2.1021e-01,  5.5068e-02, -1.3492e-01,
         -1.1862e-01,  4.9036e-02, -7.4202e-02,  5.0593e-04,  1.1619e-01,
         -1.7285e-01,  3.3376e-02, -1.0928e-01,  3.4996e-01, -1.6919e-02,
          2.3296e-02, -7.7163e-02, -1.2705e-01, -9.3846e-03,  1.6000e-02,
         -4.8173e-02, -1.4741e-02,  2.0557e-01,  1.5598e-01, -4.2472e-02,
          3.5369e-01,  1.5497e-01,  2.0383e-02, -6.5918e-02,  3.3988e-01,
         -1.9209e-01,  5.9875e-02,  1.9069e-01, -2.8791e-03, -2.6993e-01,
          2.1862e-01, -7.6857e-01,  1.3670e-01, -1.8052e-01, -3.8954e-01,
          2.3952e-01,  8.1335e-02, -3.0303e-02,  1.9948e-04, -5.1288e-01,
         -1.5640e-01, -9.2900e-02, -7.1771e-02, -3.4868e-01,  2.6914e-01,
         -4.1762e-01,  1.9354e-01]], device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
868000 特征值优化 tensor(0.6229, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.4345e-02, -1.0150e+00, -3.1508e-01, -1.8984e-01,  4.8509e-02,
          2.3838e-01, -5.9834e-01,  3.7010e-01, -4.5519e-01, -3.9096e-01,
         -8.3249e-02,  1.4035e+00,  1.7000e-01,  8.2703e-02,  1.3446e-01,
         -7.3187e-02, -1.2781e-01,  1.0969e-01, -2.0125e-01, -1.2669e-02,
          1.4941e-02, -6.6838e-02,  2.1799e-01,  4.0542e-02, -1.4248e-01,
         -1.1257e-01,  6.5075e-02, -5.8774e-02,  1.8471e-02,  1.1586e-01,
         -1.7255e-01,  4.4056e-02, -1.1319e-01,  3.4981e-01, -1.6275e-02,
          2.6628e-02, -8.6567e-02, -1.2727e-01, -9.1277e-03,  1.3901e-02,
         -3.9729e-02, -1.4446e-02,  2.0459e-01,  1.4840e-01, -3.8283e-02,
          3.3764e-01,  1.5805e-01,  2.2121e-02, -5.9844e-02,  3.3432e-01,
         -2.0558e-01,  6.8627e-02,  1.7424e-01,  8.9778e-03, -2.7952e-01,
          2.1078e-01, -7.6760e-01,  1.3791e-01, -1.7756e-01, -3.8831e-01,
          2.5168e-01,  8.2568e-02, -3.3530e-02,  2.0968e-04, -5.2750e-01,
         -1.4376e-01, -9.2470e-02, -8.6230e-02, -3.5193e-01,  2.6203e-01,
         -4.0010e-01,  1.7953e-01]], device='cuda:0') tensor(0.2125, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
869000 特征值优化 tensor(0.6225, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.0274e-02, -1.0083e+00, -3.1352e-01, -1.9052e-01,  5.0831e-02,
          2.4730e-01, -6.0254e-01,  3.7693e-01, -4.4905e-01, -3.9962e-01,
         -7.9923e-02,  1.3929e+00,  1.7095e-01,  8.3208e-02,  1.3686e-01,
         -7.7345e-02, -1.1283e-01,  1.0883e-01, -2.0958e-01, -2.4415e-02,
          1.3632e-02, -6.6925e-02,  2.2508e-01,  3.2643e-02, -1.4642e-01,
         -1.0842e-01,  7.6619e-02, -4.3566e-02,  2.8229e-02,  1.1561e-01,
         -1.7169e-01,  4.6957e-02, -1.1245e-01,  3.4898e-01, -1.8991e-02,
          2.9623e-02, -8.9335e-02, -1.2673e-01, -1.0405e-02,  1.5493e-02,
         -3.6741e-02, -1.3264e-02,  2.0193e-01,  1.4691e-01, -3.5045e-02,
          3.2743e-01,  1.6305e-01,  2.0197e-02, -6.0753e-02,  3.3506e-01,
         -2.0237e-01,  6.7844e-02,  1.7200e-01,  1.1209e-02, -2.8429e-01,
          2.0403e-01, -7.7098e-01,  1.3651e-01, -1.7947e-01, -3.8898e-01,
          2.5866e-01,  7.9453e-02, -3.6525e-02,  9.7141e-04, -5.3755e-01,
         -1.3559e-01, -8.9887e-02, -9.2885e-02, -3.5560e-01,  2.6247e-01,
         -3.8954e-01,  1.7228e-01]], device='cuda:0') tensor(0.2098, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
870000 特征值优化 tensor(0.6287, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.2525e-02, -9.9924e-01, -3.0960e-01, -1.8130e-01,  5.9237e-02,
          2.4075e-01, -6.1224e-01,  3.6151e-01, -4.3727e-01, -4.2469e-01,
         -7.4236e-02,  1.3699e+00,  1.6830e-01,  7.7213e-02,  1.3473e-01,
         -1.0868e-01, -1.3513e-01,  8.3661e-02, -1.7370e-01,  7.7483e-03,
          1.3354e-02, -6.7555e-02,  2.1333e-01,  3.8953e-02, -1.3578e-01,
         -1.1055e-01,  5.3405e-02, -7.7061e-02, -1.1399e-03,  1.1489e-01,
         -1.7341e-01,  3.6067e-02, -1.1497e-01,  3.4774e-01, -1.7004e-02,
          2.5544e-02, -7.8672e-02, -1.2807e-01, -1.3720e-02,  2.3792e-02,
         -4.8624e-02, -9.6412e-03,  2.0285e-01,  1.5884e-01, -4.0115e-02,
          3.6083e-01,  1.5630e-01,  1.8531e-02, -6.4181e-02,  3.4167e-01,
         -1.9457e-01,  6.2392e-02,  1.8030e-01,  7.6319e-03, -2.4120e-01,
          2.4884e-01, -7.6695e-01,  1.3409e-01, -1.8781e-01, -3.8675e-01,
          2.4876e-01,  7.5910e-02, -3.5178e-02,  1.9041e-03, -5.2445e-01,
         -1.5116e-01, -7.5934e-02, -7.7599e-02, -3.5401e-01,  2.6297e-01,
         -3.9870e-01,  1.8914e-01]], device='cuda:0') tensor(0.2101, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
871000 特征值优化 tensor(0.6250, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.3582e-02, -1.0062e+00, -3.1320e-01, -1.8698e-01,  6.8376e-02,
          2.3934e-01, -6.1232e-01,  3.5973e-01, -4.4192e-01, -4.4540e-01,
         -8.7273e-02,  1.3842e+00,  1.6901e-01,  8.1983e-02,  1.3403e-01,
         -1.1718e-01, -1.8380e-01,  8.8610e-02, -1.4952e-01,  2.7993e-02,
          1.1743e-02, -6.7358e-02,  2.1503e-01,  5.8916e-02, -1.2839e-01,
         -1.1840e-01,  4.2417e-02, -9.8987e-02, -1.6657e-02,  1.1456e-01,
         -1.7617e-01,  3.3524e-02, -1.0841e-01,  3.4830e-01, -1.5627e-02,
          2.1972e-02, -6.7306e-02, -1.2996e-01, -1.6171e-02,  2.6174e-02,
         -5.9810e-02, -7.9268e-03,  2.0208e-01,  1.6233e-01, -4.0823e-02,
          3.5342e-01,  1.5595e-01,  2.2585e-02, -6.1087e-02,  3.3555e-01,
         -1.9583e-01,  6.4427e-02,  1.9485e-01,  1.7086e-03, -2.3586e-01,
          2.5152e-01, -7.7132e-01,  1.3691e-01, -1.7910e-01, -3.8827e-01,
          2.3762e-01,  7.7965e-02, -3.3100e-02,  1.1989e-03, -5.0815e-01,
         -1.5548e-01, -9.0466e-02, -6.6603e-02, -3.5261e-01,  2.6923e-01,
         -4.1670e-01,  1.9357e-01]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
872000 特征值优化 tensor(0.6266, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.7753e-02, -1.0004e+00, -3.1390e-01, -1.8695e-01,  7.1057e-02,
          2.3977e-01, -6.1091e-01,  3.6086e-01, -4.3822e-01, -4.5338e-01,
         -9.3643e-02,  1.3772e+00,  1.6915e-01,  7.7072e-02,  1.3835e-01,
         -1.1471e-01, -1.7529e-01,  8.4189e-02, -1.5625e-01,  1.8957e-02,
          1.2286e-02, -6.7782e-02,  2.1088e-01,  6.4203e-02, -1.2736e-01,
         -1.1534e-01,  4.5071e-02, -1.0228e-01, -1.4387e-02,  1.1541e-01,
         -1.7524e-01,  3.2719e-02, -1.0885e-01,  3.4848e-01, -1.8715e-02,
          2.1259e-02, -6.8198e-02, -1.2925e-01, -1.5157e-02,  2.3546e-02,
         -5.9470e-02, -8.6451e-03,  1.9987e-01,  1.6646e-01, -4.4888e-02,
          3.6145e-01,  1.5322e-01,  2.3388e-02, -6.1942e-02,  3.3608e-01,
         -1.9410e-01,  6.3713e-02,  1.9276e-01,  2.8558e-03, -2.3909e-01,
          2.4762e-01, -7.7057e-01,  1.3582e-01, -1.7719e-01, -3.8814e-01,
          2.3431e-01,  7.9277e-02, -3.1647e-02, -4.9516e-04, -5.1183e-01,
         -1.5179e-01, -8.7911e-02, -7.2145e-02, -3.4881e-01,  2.6803e-01,
         -4.1502e-01,  1.9149e-01]], device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
873000 特征值优化 tensor(0.6293, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9801e-02, -9.9447e-01, -3.1147e-01, -1.8213e-01,  5.6216e-02,
          2.3676e-01, -6.0155e-01,  3.6069e-01, -4.2826e-01, -4.4762e-01,
         -8.0952e-02,  1.3570e+00,  1.6749e-01,  7.5268e-02,  1.3851e-01,
         -1.0550e-01, -1.3794e-01,  8.4711e-02, -1.7301e-01,  7.1705e-03,
          1.3728e-02, -6.7723e-02,  2.1003e-01,  4.6094e-02, -1.3298e-01,
         -1.1228e-01,  5.3957e-02, -7.8929e-02, -2.5334e-03,  1.1543e-01,
         -1.7321e-01,  3.5696e-02, -1.1442e-01,  3.4873e-01, -1.6857e-02,
          2.5638e-02, -7.6228e-02, -1.2804e-01, -1.3069e-02,  2.0837e-02,
         -5.0525e-02, -1.0595e-02,  2.0090e-01,  1.6352e-01, -4.1669e-02,
          3.6164e-01,  1.5653e-01,  1.7881e-02, -6.4574e-02,  3.4118e-01,
         -1.9451e-01,  6.2678e-02,  1.8172e-01,  8.4869e-03, -2.4173e-01,
          2.4859e-01, -7.6533e-01,  1.3516e-01, -1.7664e-01, -3.9351e-01,
          2.4410e-01,  7.9632e-02, -3.0416e-02, -2.0133e-04, -5.1907e-01,
         -1.4923e-01, -8.0467e-02, -8.2041e-02, -3.4979e-01,  2.6154e-01,
         -4.0204e-01,  1.8801e-01]], device='cuda:0') tensor(0.2033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
874000 特征值优化 tensor(0.6295, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.3355e-02, -9.9728e-01, -3.0958e-01, -1.8117e-01,  5.9449e-02,
          2.4029e-01, -6.0630e-01,  3.5935e-01, -4.2025e-01, -4.5581e-01,
         -7.9226e-02,  1.3508e+00,  1.6817e-01,  7.5820e-02,  1.3690e-01,
         -1.0297e-01, -1.3344e-01,  8.2959e-02, -1.7270e-01,  7.1420e-03,
          1.4871e-02, -6.7664e-02,  2.1071e-01,  4.2298e-02, -1.3300e-01,
         -1.1330e-01,  5.4102e-02, -8.1197e-02, -8.9966e-04,  1.1527e-01,
         -1.7376e-01,  3.6202e-02, -1.1396e-01,  3.4911e-01, -1.6494e-02,
          2.6803e-02, -7.7824e-02, -1.2764e-01, -1.4492e-02,  2.3215e-02,
         -4.8569e-02, -8.9511e-03,  1.9895e-01,  1.5982e-01, -3.8970e-02,
          3.6307e-01,  1.5555e-01,  1.9802e-02, -6.3819e-02,  3.4206e-01,
         -1.9447e-01,  6.3160e-02,  1.7926e-01,  8.2234e-03, -2.4104e-01,
          2.4694e-01, -7.6631e-01,  1.3443e-01, -1.7822e-01, -3.9248e-01,
          2.4772e-01,  7.8474e-02, -3.1071e-02,  7.2563e-04, -5.2173e-01,
         -1.4659e-01, -7.9482e-02, -8.5846e-02, -3.5269e-01,  2.6280e-01,
         -4.0102e-01,  1.8582e-01]], device='cuda:0') tensor(0.2064, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
875000 特征值优化 tensor(0.6260, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0228, -1.0018, -0.3122, -0.1860,  0.0698,  0.2351, -0.6188,  0.3587,
         -0.4263, -0.4795, -0.0789,  1.3647,  0.1682,  0.0813,  0.1373, -0.1164,
         -0.1621,  0.0876, -0.1589,  0.0227,  0.0128, -0.0675,  0.2140,  0.0598,
         -0.1280, -0.1117,  0.0489, -0.0989, -0.0129,  0.1151, -0.1756,  0.0329,
         -0.1111,  0.3487, -0.0161,  0.0221, -0.0713, -0.1296, -0.0145,  0.0214,
         -0.0570, -0.0095,  0.2013,  0.1646, -0.0440,  0.3564,  0.1561,  0.0224,
         -0.0616,  0.3362, -0.1956,  0.0639,  0.1916,  0.0051, -0.2353,  0.2547,
         -0.7683,  0.1367, -0.1707, -0.3932,  0.2402,  0.0765, -0.0326,  0.0017,
         -0.5068, -0.1520, -0.0901, -0.0759, -0.3519,  0.2679, -0.4149,  0.1890]],
       device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
876000 特征值优化 tensor(0.6259, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.8429e-02, -9.9887e-01, -3.1220e-01, -1.8587e-01,  7.1384e-02,
          2.4312e-01, -6.1874e-01,  3.6055e-01, -4.1863e-01, -4.8579e-01,
         -8.4837e-02,  1.3558e+00,  1.6793e-01,  8.0272e-02,  1.3640e-01,
         -1.2229e-01, -1.6732e-01,  8.4601e-02, -1.5741e-01,  2.2562e-02,
          1.0848e-02, -6.7639e-02,  2.1358e-01,  6.0708e-02, -1.2529e-01,
         -1.1464e-01,  4.4762e-02, -1.0499e-01, -1.3429e-02,  1.1501e-01,
         -1.7609e-01,  3.3059e-02, -1.0887e-01,  3.4834e-01, -1.6625e-02,
          2.3237e-02, -6.8863e-02, -1.2989e-01, -1.2820e-02,  1.8950e-02,
         -6.0044e-02, -1.1077e-02,  2.0075e-01,  1.6666e-01, -4.1159e-02,
          3.5736e-01,  1.5655e-01,  2.2463e-02, -6.1298e-02,  3.3656e-01,
         -1.9593e-01,  6.3939e-02,  1.9314e-01,  3.1915e-03, -2.3717e-01,
          2.5382e-01, -7.7210e-01,  1.3564e-01, -1.7047e-01, -3.9557e-01,
          2.3845e-01,  7.6216e-02, -3.1619e-02,  6.3169e-04, -5.0933e-01,
         -1.4953e-01, -8.8860e-02, -8.0127e-02, -3.5052e-01,  2.7048e-01,
         -4.1529e-01,  1.8801e-01]], device='cuda:0') tensor(0.2103, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
877000 特征值优化 tensor(0.6264, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0180, -0.9972, -0.3116, -0.1863,  0.0672,  0.2409, -0.6143,  0.3592,
         -0.4132, -0.4908, -0.0810,  1.3464,  0.1682,  0.0800,  0.1394, -0.1158,
         -0.1607,  0.0850, -0.1615,  0.0192,  0.0127, -0.0677,  0.2155,  0.0533,
         -0.1282, -0.1135,  0.0459, -0.0970, -0.0111,  0.1148, -0.1764,  0.0341,
         -0.1109,  0.3486, -0.0149,  0.0290, -0.0712, -0.1293, -0.0156,  0.0228,
         -0.0567, -0.0084,  0.1999,  0.1668, -0.0443,  0.3568,  0.1556,  0.0213,
         -0.0612,  0.3359, -0.1962,  0.0645,  0.1900,  0.0044, -0.2364,  0.2547,
         -0.7689,  0.1353, -0.1703, -0.3933,  0.2408,  0.0771, -0.0335,  0.0021,
         -0.5118, -0.1472, -0.0842, -0.0844, -0.3512,  0.2676, -0.4134,  0.1863]],
       device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
878000 特征值优化 tensor(0.6274, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0239, -0.9989, -0.3094, -0.1830,  0.0561,  0.2446, -0.6121,  0.3597,
         -0.4006, -0.4914, -0.0652,  1.3301,  0.1688,  0.0824,  0.1381, -0.1115,
         -0.1403,  0.0902, -0.1682,  0.0050,  0.0136, -0.0679,  0.2169,  0.0377,
         -0.1342, -0.1087,  0.0589, -0.0763, -0.0016,  0.1152, -0.1731,  0.0392,
         -0.1132,  0.3492, -0.0134,  0.0345, -0.0799, -0.1286, -0.0195,  0.0278,
         -0.0489, -0.0049,  0.2026,  0.1605, -0.0396,  0.3476,  0.1601,  0.0189,
         -0.0634,  0.3411, -0.1957,  0.0646,  0.1800,  0.0092, -0.2388,  0.2545,
         -0.7682,  0.1343, -0.1743, -0.3923,  0.2535,  0.0725, -0.0356,  0.0031,
         -0.5215, -0.1424, -0.0773, -0.0921, -0.3609,  0.2644, -0.4036,  0.1807]],
       device='cuda:0') tensor(0.2084, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
879000 特征值优化 tensor(0.6253, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0297, -1.0009, -0.3119, -0.1926,  0.0569,  0.2408, -0.6171,  0.3645,
         -0.4012, -0.5110, -0.0677,  1.3334,  0.1683,  0.0830,  0.1329, -0.1133,
         -0.1656,  0.0887, -0.1609,  0.0138,  0.0140, -0.0674,  0.2184,  0.0488,
         -0.1336, -0.1082,  0.0628, -0.0753, -0.0072,  0.1154, -0.1759,  0.0376,
         -0.1112,  0.3498, -0.0137,  0.0315, -0.0742, -0.1289, -0.0195,  0.0278,
         -0.0535, -0.0047,  0.2046,  0.1579, -0.0410,  0.3441,  0.1606,  0.0208,
         -0.0609,  0.3368, -0.1967,  0.0659,  0.1869,  0.0058, -0.2388,  0.2566,
         -0.7663,  0.1362, -0.1650, -0.3951,  0.2489,  0.0721, -0.0378,  0.0039,
         -0.5117, -0.1442, -0.0834, -0.0888, -0.3560,  0.2687, -0.4099,  0.1816]],
       device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
880000 特征值优化 tensor(0.6199, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0371, -1.0218, -0.3178, -0.1983,  0.0651,  0.2370, -0.6153,  0.3732,
         -0.3970, -0.5391, -0.0749,  1.3480,  0.1700,  0.0891,  0.1266, -0.1330,
         -0.1917,  0.0878, -0.1374,  0.0468,  0.0119, -0.0677,  0.2247,  0.0634,
         -0.1174, -0.1287,  0.0343, -0.1009, -0.0274,  0.1153, -0.1774,  0.0307,
         -0.1107,  0.3472, -0.0091,  0.0329, -0.0621, -0.1311, -0.0205,  0.0282,
         -0.0649, -0.0038,  0.2092,  0.1503, -0.0315,  0.3324,  0.1653,  0.0236,
         -0.0580,  0.3332, -0.2036,  0.0721,  0.1990,  0.0030, -0.2356,  0.2534,
         -0.7702,  0.1354, -0.1568, -0.3986,  0.2325,  0.0770, -0.0412,  0.0022,
         -0.4898, -0.1520, -0.1043, -0.0752, -0.3507,  0.2694, -0.4380,  0.1898]],
       device='cuda:0') tensor(0.2059, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
881000 特征值优化 tensor(0.6292, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0370, -1.0004, -0.3138, -0.1848,  0.0426,  0.2427, -0.6028,  0.3753,
         -0.3867, -0.5317, -0.0824,  1.3449,  0.1692,  0.0775,  0.1309, -0.0799,
         -0.1707,  0.1019, -0.1646,  0.0070,  0.0175, -0.0668,  0.2107,  0.0487,
         -0.1310, -0.1104,  0.0590, -0.0781,  0.0015,  0.1160, -0.1718,  0.0344,
         -0.1091,  0.3500, -0.0149,  0.0261, -0.0796, -0.1272, -0.0139,  0.0186,
         -0.0454, -0.0111,  0.2019,  0.1547, -0.0422,  0.3585,  0.1539,  0.0188,
         -0.0659,  0.3402, -0.1928,  0.0603,  0.1903, -0.0025, -0.2653,  0.2213,
         -0.7678,  0.1356, -0.1539, -0.4038,  0.2416,  0.0796, -0.0372,  0.0027,
         -0.4983, -0.1448, -0.0934, -0.0956, -0.3531,  0.2707, -0.4311,  0.1816]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
882000 特征值优化 tensor(0.6274, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.1455e-02, -1.0014e+00, -3.1573e-01, -1.8694e-01,  4.6666e-02,
          2.4302e-01, -5.9723e-01,  3.8344e-01, -3.8394e-01, -5.3710e-01,
         -8.2559e-02,  1.3291e+00,  1.6934e-01,  8.3217e-02,  1.3374e-01,
         -7.4789e-02, -1.5029e-01,  1.0921e-01, -1.8124e-01, -7.1360e-04,
          1.5449e-02, -6.6890e-02,  2.1734e-01,  4.5302e-02, -1.3419e-01,
         -1.0671e-01,  6.9196e-02, -7.4672e-02,  7.9386e-03,  1.1674e-01,
         -1.7267e-01,  3.8969e-02, -1.1015e-01,  3.4939e-01, -1.5033e-02,
          2.7524e-02, -8.2208e-02, -1.2606e-01, -1.2163e-02,  1.6463e-02,
         -4.1644e-02, -1.1261e-02,  2.0270e-01,  1.5925e-01, -4.7156e-02,
          3.5332e-01,  1.5443e-01,  2.1859e-02, -6.5390e-02,  3.3715e-01,
         -1.9056e-01,  5.8399e-02,  1.8359e-01,  2.1069e-03, -2.7391e-01,
          2.1545e-01, -7.6905e-01,  1.3800e-01, -1.5249e-01, -4.0008e-01,
          2.4824e-01,  8.0182e-02, -4.0527e-02,  3.9766e-03, -5.0485e-01,
         -1.4100e-01, -8.7943e-02, -9.9788e-02, -3.5474e-01,  2.6725e-01,
         -4.2421e-01,  1.7959e-01]], device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
883000 特征值优化 tensor(0.6287, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.4845e-02, -1.0021e+00, -3.1390e-01, -1.8456e-01,  4.2411e-02,
          2.3693e-01, -5.9917e-01,  3.8195e-01, -3.6855e-01, -5.4663e-01,
         -8.3731e-02,  1.3257e+00,  1.6899e-01,  7.8642e-02,  1.3039e-01,
         -7.8535e-02, -1.5827e-01,  1.0341e-01, -1.6756e-01,  3.6884e-03,
          1.4678e-02, -6.6738e-02,  2.1229e-01,  4.6330e-02, -1.2881e-01,
         -1.1251e-01,  6.3236e-02, -8.2084e-02,  1.7469e-03,  1.1662e-01,
         -1.7241e-01,  3.7198e-02, -1.0985e-01,  3.4935e-01, -1.4356e-02,
          2.4962e-02, -8.1059e-02, -1.2707e-01, -1.6537e-02,  2.1857e-02,
         -4.4236e-02, -7.6006e-03,  2.0444e-01,  1.5883e-01, -4.1623e-02,
          3.5950e-01,  1.5518e-01,  1.8741e-02, -6.5749e-02,  3.4079e-01,
         -1.9238e-01,  6.0306e-02,  1.8681e-01, -3.5615e-04, -2.6940e-01,
          2.1824e-01, -7.6578e-01,  1.3765e-01, -1.5234e-01, -4.0504e-01,
          2.4301e-01,  7.8784e-02, -4.0694e-02,  2.9440e-03, -5.0051e-01,
         -1.4060e-01, -9.5237e-02, -1.0192e-01, -3.5187e-01,  2.6958e-01,
         -4.3137e-01,  1.7846e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
884000 特征值优化 tensor(15.2654, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.8408e-01, -2.1501e+00,  1.0507e+00, -1.1173e+00, -8.8064e-01,
         -2.7630e-02, -3.2863e-01,  7.6599e-01, -8.3401e-01,  5.5946e-02,
          1.3721e+00,  2.7555e-01,  8.2444e-01, -1.0483e+00, -7.7536e-01,
         -2.3473e-01,  6.0898e-02, -3.1939e-01,  3.4275e-05,  1.3560e-01,
         -1.1153e-01,  8.4569e-01, -1.7793e-01,  1.0353e-01, -5.3146e-01,
         -1.3913e+00, -2.4006e-01,  9.5860e-01, -4.5506e-01,  1.5236e+00,
         -1.9361e+00,  2.3540e-01,  4.4042e-01,  8.4080e-02, -5.7877e-01,
          9.8533e-02, -2.2715e-01, -2.7847e-02,  2.2144e-02,  4.0635e-02,
          6.5850e-01, -2.2990e-01,  6.4815e-01, -9.1284e-02, -4.7205e-01,
          7.0984e-01,  1.2498e+00, -7.8847e-01, -6.7314e-01,  4.9400e-01,
          6.0482e-02,  9.1691e-01,  6.6665e-01, -5.4186e-01,  1.2346e-01,
         -2.6403e-01, -1.2284e-01,  1.1389e-02,  5.7402e-01, -9.2193e-03,
         -4.5450e-01,  5.8037e-01,  2.3684e-01, -1.5442e-01, -5.6632e-01,
          4.2225e-01, -6.6524e-01,  4.1716e-01,  2.5835e-01,  7.6165e-01,
         -1.3534e-01,  3.6446e-01]], device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
885000 特征值优化 tensor(3.0039, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.2390e-01, -1.1675e+00,  2.4419e-01, -5.7821e-01, -1.5466e-01,
         -3.5688e-01, -3.5398e-01,  4.8727e-01, -2.0244e-01,  4.4652e-01,
          5.9719e-01,  5.5666e-01,  2.3247e-01, -1.0261e-01,  9.1635e-03,
         -1.1629e-01,  6.0597e-02,  3.8068e-03,  1.5415e-02, -1.2154e-02,
         -4.3305e-02,  1.0810e-01,  2.6154e-02,  7.6324e-02, -1.1952e-01,
         -5.1762e-01,  9.5771e-02,  2.0389e-01, -4.0659e-03,  4.4460e-01,
         -8.8030e-01, -6.9692e-03, -1.0611e-03,  6.6812e-02, -5.9413e-02,
          4.6348e-02, -1.3190e-01, -7.3990e-02,  4.5091e-02,  6.0750e-02,
          1.6824e-01, -1.5021e-01,  1.5361e-01,  2.1751e-01, -1.4712e-01,
          2.9896e-01,  3.6716e-01, -4.5319e-01, -2.2004e-01,  5.8717e-01,
         -6.8089e-02,  1.0848e-01, -1.2708e-01, -2.6229e-01, -9.4545e-02,
         -1.5042e-02, -1.4458e-01,  1.4443e-01,  1.2336e-01, -3.4226e-01,
          3.9023e-02,  1.3175e-01, -9.0099e-02,  5.1472e-02, -1.1212e-01,
          7.5277e-02, -3.3110e-01,  3.4481e-02, -1.8711e-01,  2.9069e-01,
         -2.4238e-01,  9.6847e-02]], device='cuda:0') tensor(0.2082, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
886000 特征值优化 tensor(0.6215, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3172, -0.9174,  0.2217, -0.6036,  0.3995, -0.5288, -0.6238,  0.6331,
         -0.0234,  0.3768,  0.3574,  0.5572,  0.1871, -0.0353,  0.0584,  0.1045,
         -0.0064,  0.0318, -0.0436,  0.1192, -0.0483,  0.0988, -0.0227,  0.0501,
         -0.0851, -0.2795,  0.0709,  0.2105, -0.0543,  0.2724, -0.2953, -0.1045,
         -0.0288,  0.0630, -0.0834,  0.0896, -0.0958, -0.0048,  0.0516,  0.0225,
          0.0724, -0.1720,  0.0567,  0.3806, -0.2794,  0.3141,  0.1955, -0.3599,
         -0.4236,  0.6831, -0.0279,  0.0398, -0.2624, -0.0447, -0.0663, -0.1013,
          0.0475,  0.0785,  0.0843, -0.2552,  0.4232,  0.0379,  0.1442,  0.0866,
         -0.2002,  0.1102, -0.4052,  0.0302, -0.2392,  0.2528, -0.3818,  0.1710]],
       device='cuda:0') tensor(0.2045, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
887000 特征值优化 tensor(0.6333, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3467, -0.9529,  0.2364, -0.6052,  0.3820, -0.4997, -0.5580,  0.5489,
         -0.0132,  0.3823,  0.3218,  0.5185,  0.1880,  0.0166,  0.0968,  0.1059,
         -0.0742,  0.2019,  0.1094,  0.1149, -0.0502,  0.1023,  0.0043,  0.0701,
         -0.1419, -0.2292,  0.1216,  0.2244, -0.0518,  0.2648, -0.2986, -0.1181,
         -0.0564,  0.0504, -0.0851,  0.0917, -0.0893,  0.0173,  0.0601,  0.0326,
          0.0601, -0.1739,  0.1224,  0.3373, -0.3104,  0.4072,  0.1548, -0.3925,
         -0.4231,  0.7045,  0.0194,  0.0322, -0.1590, -0.0910, -0.0868, -0.0355,
          0.0316,  0.0954,  0.0921, -0.2641,  0.3790,  0.1206,  0.1772,  0.1053,
         -0.2536,  0.1270, -0.3644,  0.0113, -0.2279,  0.1824, -0.3798,  0.1778]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
888000 特征值优化 tensor(0.6248, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.6056e-01, -9.3058e-01,  2.2904e-01, -6.1305e-01,  3.5374e-01,
         -5.2433e-01, -4.1622e-01,  5.2748e-01, -6.8653e-02,  4.0220e-01,
          2.4539e-01,  5.5196e-01,  1.8988e-01,  5.3840e-02,  1.3926e-01,
          3.8339e-02,  1.5031e-03,  1.0092e-01, -1.9849e-02,  1.0413e-01,
         -5.3934e-02,  1.0302e-01, -9.4478e-03,  6.6749e-02, -1.2657e-01,
         -2.3261e-01,  1.1766e-01,  2.0988e-01, -5.6633e-02,  2.6573e-01,
         -2.9708e-01, -1.0534e-01, -6.0609e-02,  5.1889e-02, -6.6481e-02,
          1.0031e-01, -1.2651e-01, -2.5082e-04,  6.2922e-02,  1.6348e-02,
          9.5240e-02, -1.6913e-01,  1.3500e-01,  3.3154e-01, -3.1501e-01,
          3.9419e-01,  1.6443e-01, -3.9280e-01, -4.2396e-01,  7.0509e-01,
          2.6428e-02,  2.7766e-02, -1.8774e-01, -7.1747e-02, -7.7764e-02,
         -1.9103e-02,  9.3715e-03,  1.0542e-01,  6.9785e-02, -2.7410e-01,
          3.1772e-01,  1.3935e-01,  2.6653e-01,  7.1632e-02, -2.4999e-01,
          1.3155e-01, -3.7454e-01,  3.0901e-02, -1.6240e-01,  1.4645e-01,
         -3.6404e-01,  1.5461e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
889000 特征值优化 tensor(0.6285, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3511, -0.9477,  0.2279, -0.6112,  0.3696, -0.5311, -0.5042,  0.5713,
         -0.0487,  0.3783,  0.3242,  0.5274,  0.1877,  0.0908,  0.1846,  0.0707,
         -0.0065,  0.1228,  0.0420,  0.1040, -0.0528,  0.1032,  0.0053,  0.0625,
         -0.1478, -0.2174,  0.1357,  0.2284, -0.0618,  0.2660, -0.2984, -0.0935,
         -0.0512,  0.0555, -0.0667,  0.0992, -0.0711,  0.0079,  0.0585,  0.0236,
          0.0432, -0.1645,  0.1298,  0.3358, -0.3127,  0.4005,  0.1617, -0.3915,
         -0.4252,  0.7062,  0.0320,  0.0244, -0.1689, -0.0838, -0.0802, -0.0189,
          0.0129,  0.1012,  0.0691, -0.2703,  0.3519,  0.1170,  0.2178,  0.0950,
         -0.2528,  0.1330, -0.3793,  0.0230, -0.2180,  0.1818, -0.3600,  0.1529]],
       device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
890000 特征值优化 tensor(0.6300, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3505, -0.9506,  0.2387, -0.5991,  0.3547, -0.5547, -0.5183,  0.5573,
         -0.0541,  0.3874,  0.3096,  0.5448,  0.1892,  0.0715,  0.1472,  0.0584,
         -0.0070,  0.0344, -0.0663,  0.1052, -0.0510,  0.1027, -0.0120,  0.0477,
         -0.1061, -0.2562,  0.0989,  0.2182, -0.0632,  0.2662, -0.2984, -0.0814,
         -0.0706,  0.0574, -0.0696,  0.0993, -0.0618,  0.0061,  0.0585,  0.0167,
          0.0346, -0.1678,  0.1294,  0.3374, -0.3100,  0.4110,  0.1593, -0.3964,
         -0.4224,  0.7058,  0.0270,  0.0247, -0.1468, -0.0908, -0.0443, -0.0950,
          0.0157,  0.0997,  0.0758, -0.2686,  0.3297,  0.0975,  0.1978,  0.1135,
         -0.2507,  0.1330, -0.3739,  0.0229, -0.1921,  0.2062, -0.3583,  0.1555]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
891000 特征值优化 tensor(0.6491, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3266, -0.9100,  0.2407, -0.5962,  0.3544, -0.5231, -0.5103,  0.5566,
         -0.0706,  0.3926,  0.2890,  0.5509,  0.1896,  0.0555,  0.1456,  0.0433,
          0.0223,  0.0655,  0.0096,  0.0980, -0.0531,  0.1038, -0.0378,  0.0732,
         -0.0913, -0.2671,  0.0753,  0.1823, -0.0588,  0.2656, -0.2977, -0.0871,
         -0.0497,  0.0549, -0.0669,  0.1015, -0.0676,  0.0134,  0.0611,  0.0180,
          0.0491, -0.1668,  0.1232,  0.3267, -0.3189,  0.3863,  0.1590, -0.3937,
         -0.4269,  0.7023,  0.0255,  0.0245, -0.1784, -0.0734, -0.0709, -0.0522,
          0.0029,  0.1076,  0.0777, -0.2701,  0.3059,  0.1240,  0.2170,  0.0716,
         -0.2425,  0.1287, -0.3753,  0.0252, -0.1901,  0.1840, -0.3653,  0.1534]],
       device='cuda:0') tensor(0.2029, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
892000 特征值优化 tensor(0.6216, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.5672e-01, -9.2872e-01,  2.4887e-01, -6.0129e-01,  3.4657e-01,
         -5.4812e-01, -4.9578e-01,  5.3927e-01, -6.2699e-02,  3.3333e-01,
          3.2642e-01,  5.5035e-01,  1.9053e-01,  8.6938e-02,  1.7040e-01,
          2.2895e-02,  3.4411e-02,  1.0817e-01,  5.3111e-04,  9.4559e-02,
         -5.3718e-02,  1.0068e-01, -3.6206e-02,  5.2818e-02, -7.5854e-02,
         -2.8152e-01,  7.7429e-02,  1.9939e-01, -6.0177e-02,  2.6557e-01,
         -2.9670e-01, -1.0275e-01, -6.6560e-02,  5.9029e-02, -6.2721e-02,
          9.2356e-02, -8.4270e-02,  2.3447e-03,  4.9716e-02,  2.5103e-02,
          6.2052e-02, -1.6523e-01,  1.3350e-01,  3.2895e-01, -3.1186e-01,
          3.7569e-01,  1.7567e-01, -4.0333e-01, -4.1726e-01,  7.0796e-01,
          2.2855e-02,  2.5978e-02, -1.7588e-01, -7.4032e-02, -5.9330e-02,
          6.2942e-02,  3.2187e-02,  8.2907e-02,  5.9691e-02, -2.9351e-01,
          3.3728e-01,  1.1110e-01,  2.1191e-01,  9.8938e-02, -2.7283e-01,
          1.5032e-01, -3.8842e-01,  1.6940e-02, -1.7823e-01,  1.7573e-01,
         -3.7660e-01,  1.5157e-01]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
893000 特征值优化 tensor(0.6288, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3408, -0.9211,  0.2270, -0.6046,  0.3574, -0.5402, -0.5396,  0.5609,
         -0.0840,  0.3884,  0.3493,  0.5374,  0.1972,  0.0640,  0.1571,  0.0405,
         -0.0063,  0.0536, -0.0190,  0.0886, -0.0516,  0.1004, -0.0321,  0.0737,
         -0.0923, -0.2627,  0.0976,  0.2092, -0.0610,  0.2654, -0.2965, -0.0912,
         -0.0674,  0.0518, -0.0524,  0.1076, -0.0458,  0.0068,  0.0555,  0.0161,
          0.0203, -0.1660,  0.1475,  0.2514, -0.2349,  0.3873,  0.1745, -0.3935,
         -0.4174,  0.7085,  0.0239,  0.0257, -0.1405, -0.0940,  0.0309,  0.0100,
         -0.0541,  0.1335,  0.0872, -0.3098,  0.3202,  0.1129,  0.2134,  0.1051,
         -0.2374,  0.1210, -0.3543,  0.0130, -0.1916,  0.1858, -0.3507,  0.1469]],
       device='cuda:0') tensor(0.2028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
894000 特征值优化 tensor(0.6240, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3310, -0.9505,  0.2273, -0.6028,  0.3490, -0.5086, -0.6460,  0.6433,
         -0.0667,  0.3958,  0.4476,  0.4932,  0.1928,  0.0752,  0.1595,  0.0080,
         -0.0182, -0.0967, -0.1049,  0.1084, -0.0456,  0.1036, -0.0125,  0.1070,
         -0.1081, -0.2295,  0.1324,  0.2162, -0.0433,  0.2668, -0.2960, -0.0920,
         -0.1009,  0.0456, -0.0517,  0.1120, -0.0380,  0.0018,  0.0560,  0.0223,
          0.0186, -0.1712,  0.1552,  0.2710, -0.2534,  0.4444,  0.1467, -0.3894,
         -0.4246,  0.6929,  0.0127,  0.0292, -0.1319, -0.0966, -0.0032,  0.1430,
         -0.0835,  0.1571,  0.1131, -0.3034,  0.3302,  0.0773,  0.1653,  0.0998,
         -0.2305,  0.1069, -0.3255, -0.0015, -0.2673,  0.2704, -0.3329,  0.1438]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
895000 特征值优化 tensor(0.6406, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2057e-01, -9.0867e-01,  2.3100e-01, -6.0665e-01,  3.5285e-01,
         -5.3204e-01, -5.8879e-01,  5.4795e-01, -5.7239e-02,  3.9393e-01,
          3.8035e-01,  4.8307e-01,  1.9348e-01,  4.9119e-02,  1.4571e-01,
          2.6125e-02,  3.4708e-02, -3.5853e-02, -5.3753e-02,  1.0289e-01,
         -5.1679e-02,  1.0278e-01, -3.2440e-02,  7.4737e-02, -1.0399e-01,
         -2.4379e-01,  1.1506e-01,  1.9055e-01, -6.1242e-02,  2.6471e-01,
         -2.9637e-01, -7.2964e-02, -7.6242e-02,  6.1227e-02, -5.1437e-02,
          1.1275e-01, -2.2332e-02,  1.0211e-02,  4.7190e-02,  2.9474e-02,
         -2.9664e-03, -1.6885e-01,  1.4356e-01,  1.9704e-01, -1.9516e-01,
          4.0930e-01,  1.5516e-01, -3.9338e-01, -4.1686e-01,  7.0577e-01,
          2.5042e-02,  2.3834e-02, -1.4962e-01, -8.6272e-02,  7.3277e-03,
         -1.5625e-02, -9.7221e-02,  1.4892e-01,  1.8607e-01, -2.8368e-01,
          3.6748e-01,  7.9622e-02,  1.8960e-01,  1.1481e-01, -2.2941e-01,
          1.1584e-01, -3.2121e-01, -4.6799e-04, -2.4297e-01,  2.2736e-01,
         -3.3300e-01,  1.3653e-01]], device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
896000 特征值优化 tensor(0.6236, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.3454e-01, -9.2756e-01,  2.2402e-01, -6.1238e-01,  3.6306e-01,
         -5.4935e-01, -5.4718e-01,  5.1346e-01, -4.7698e-02,  3.7180e-01,
          3.1691e-01,  4.9581e-01,  1.9512e-01,  5.4338e-02,  1.5477e-01,
          7.1013e-02,  1.4149e-02, -3.1893e-02, -3.8634e-02,  1.0025e-01,
         -4.8642e-02,  1.0114e-01, -1.3579e-02,  1.0034e-01, -1.0683e-01,
         -2.3663e-01,  1.2226e-01,  2.1546e-01, -6.0206e-02,  2.6589e-01,
         -2.9538e-01, -8.6865e-02, -9.0337e-02,  4.6588e-02, -5.8320e-02,
          1.0857e-01, -3.7735e-02,  8.7559e-03,  5.5721e-02,  2.7716e-02,
          1.6623e-02, -1.6443e-01,  1.5561e-01,  1.8824e-01, -1.7003e-01,
          4.1353e-01,  1.5859e-01, -3.9486e-01, -4.1751e-01,  7.0634e-01,
          2.5556e-02,  2.3587e-02, -1.5787e-01, -8.6779e-02, -8.9668e-03,
          1.4197e-02, -8.1680e-02,  1.4470e-01,  1.8188e-01, -2.7856e-01,
          3.7213e-01,  7.1455e-02,  2.1591e-01,  1.2268e-01, -2.4905e-01,
          1.2223e-01, -3.3730e-01, -5.4142e-04, -2.1607e-01,  2.2943e-01,
         -3.2834e-01,  1.3780e-01]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
897000 特征值优化 tensor(0.6268, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3308, -0.9258,  0.2327, -0.6031,  0.3584, -0.5596, -0.5792,  0.5662,
         -0.0418,  0.3614,  0.3808,  0.4964,  0.1954,  0.0636,  0.1577,  0.0462,
          0.0102,  0.0472, -0.0161,  0.0941, -0.0489,  0.1004, -0.0309,  0.0776,
         -0.0857, -0.2675,  0.0951,  0.2112, -0.0610,  0.2653, -0.2958, -0.0946,
         -0.0682,  0.0576, -0.0534,  0.1106, -0.0471,  0.0049,  0.0439,  0.0319,
          0.0211, -0.1646,  0.1533,  0.1865, -0.1716,  0.3995,  0.1672, -0.3975,
         -0.4160,  0.7075,  0.0233,  0.0244, -0.1664, -0.0822, -0.0111, -0.0075,
         -0.0820,  0.1410,  0.1902, -0.2688,  0.3371,  0.0925,  0.2005,  0.1112,
         -0.2412,  0.1244, -0.3407, -0.0014, -0.1889,  0.1965, -0.3348,  0.1402]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
898000 特征值优化 tensor(0.6255, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.3481e-01, -9.2546e-01,  2.2917e-01, -6.0410e-01,  3.5112e-01,
         -5.3661e-01, -6.2794e-01,  6.4708e-01, -7.7990e-02,  3.7861e-01,
          4.4505e-01,  4.8021e-01,  1.9550e-01,  5.2997e-02,  1.4251e-01,
          1.2374e-02, -3.6830e-02, -4.9864e-02, -1.3587e-01,  1.0524e-01,
         -4.9401e-02,  1.0222e-01,  1.0563e-02,  9.1133e-02, -1.3122e-01,
         -2.1465e-01,  1.4363e-01,  2.3225e-01, -5.1837e-02,  2.6716e-01,
         -2.9528e-01, -8.5497e-02, -9.4744e-02,  5.0376e-02, -5.9639e-02,
          1.0553e-01, -1.2964e-02,  6.4844e-04,  5.0752e-02,  2.6468e-02,
         -7.6801e-03, -1.6807e-01,  1.5736e-01,  1.8826e-01, -1.7746e-01,
          4.3162e-01,  1.5121e-01, -3.9232e-01, -4.2089e-01,  6.9820e-01,
          1.9300e-02,  2.3045e-02, -1.3735e-01, -9.3638e-02,  2.6646e-02,
         -4.6406e-02, -7.9863e-02,  1.4769e-01,  1.9106e-01, -2.7382e-01,
          2.5892e-01,  1.0879e-01,  1.9691e-01,  1.1302e-01, -2.5342e-01,
          1.1817e-01, -3.3564e-01,  1.1402e-03, -1.8320e-01,  2.3314e-01,
         -3.2064e-01,  1.2984e-01]], device='cuda:0') tensor(0.2046, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
899000 特征值优化 tensor(0.6225, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3321, -0.9405,  0.2283, -0.6044,  0.3510, -0.5546, -0.6195,  0.6565,
         -0.0644,  0.3605,  0.4512,  0.4909,  0.1948,  0.0733,  0.1625,  0.0954,
         -0.0392,  0.0645,  0.0029,  0.0985, -0.0481,  0.1030, -0.0271,  0.0648,
         -0.0896, -0.2668,  0.0980,  0.2155, -0.0537,  0.2682, -0.2953, -0.1208,
         -0.0494,  0.0566, -0.0566,  0.1086, -0.0504,  0.0019,  0.0460,  0.0289,
          0.0259, -0.1675,  0.1591,  0.1894, -0.1760,  0.4225,  0.1565, -0.3892,
         -0.4217,  0.6966,  0.0246,  0.0201, -0.1451, -0.0896, -0.0075, -0.0275,
         -0.0810,  0.1379,  0.1837, -0.2778,  0.2930,  0.1125,  0.1953,  0.0776,
         -0.2436,  0.1230, -0.3348, -0.0052, -0.2044,  0.2235, -0.3332,  0.1362]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
900000 特征值优化 tensor(0.6308, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3329, -0.9221,  0.2337, -0.6093,  0.3578, -0.5277, -0.6399,  0.6242,
         -0.0918,  0.3862,  0.3908,  0.5142,  0.1954,  0.0304,  0.1209,  0.0592,
         -0.0116,  0.0016, -0.0198,  0.1022, -0.0486,  0.1036, -0.0156,  0.0778,
         -0.1020, -0.2558,  0.1025,  0.2036, -0.0491,  0.2679, -0.2962, -0.0933,
         -0.0852,  0.0494, -0.0658,  0.1032, -0.0603, -0.0040,  0.0570,  0.0183,
          0.0400, -0.1707,  0.1548,  0.1860, -0.1763,  0.4277,  0.1550, -0.3913,
         -0.4229,  0.6946,  0.0236,  0.0232, -0.1322, -0.0989,  0.0043,  0.0243,
         -0.0739,  0.1448,  0.1725, -0.2876,  0.2268,  0.1258,  0.1711,  0.0897,
         -0.2566,  0.1262, -0.3273,  0.0018, -0.1320,  0.2164, -0.3299,  0.1322]],
       device='cuda:0') tensor(0.2072, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
901000 特征值优化 tensor(0.6218, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3310, -0.9339,  0.2359, -0.5981,  0.3499, -0.5625, -0.5957,  0.5850,
         -0.0706,  0.3710,  0.4204,  0.5075,  0.1946,  0.0719,  0.1685,  0.0723,
         -0.0378,  0.0601,  0.0043,  0.0974, -0.0489,  0.1004, -0.0265,  0.0822,
         -0.0842, -0.2617,  0.1002,  0.2101, -0.0598,  0.2655, -0.2958, -0.0983,
         -0.0689,  0.0593, -0.0584,  0.1077, -0.0572,  0.0020,  0.0424,  0.0220,
          0.0363, -0.1700,  0.1535,  0.1876, -0.1692,  0.4093,  0.1608, -0.3994,
         -0.4165,  0.7078,  0.0203,  0.0251, -0.1647, -0.0808, -0.0435, -0.0141,
         -0.0781,  0.1436,  0.1674, -0.2879,  0.3435,  0.0910,  0.1951,  0.1028,
         -0.2446,  0.1225, -0.3328, -0.0019, -0.1898,  0.2003, -0.3317,  0.1368]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
902000 特征值优化 tensor(0.6172, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.3320e-01, -9.3452e-01,  2.2738e-01, -6.0591e-01,  3.5644e-01,
         -5.4673e-01, -5.9588e-01,  5.4961e-01, -8.7239e-02,  3.8633e-01,
          3.7650e-01,  5.2063e-01,  1.9570e-01,  7.7349e-02,  1.6745e-01,
          3.0220e-02, -1.3842e-02, -2.7607e-02, -1.0308e-01,  9.8351e-02,
         -4.8760e-02,  1.0124e-01, -9.2665e-03,  8.3616e-02, -1.1185e-01,
         -2.3606e-01,  1.1933e-01,  2.2135e-01, -6.0001e-02,  2.6619e-01,
         -2.9570e-01, -8.8545e-02, -1.0170e-01,  4.6669e-02, -6.6638e-02,
          1.0338e-01, -2.6204e-02,  6.1675e-03,  5.5377e-02,  1.3160e-02,
          5.0877e-03, -1.6676e-01,  1.5544e-01,  1.8830e-01, -1.6920e-01,
          4.1545e-01,  1.5864e-01, -3.9663e-01, -4.1758e-01,  7.0692e-01,
          2.3495e-02,  2.3847e-02, -1.5318e-01, -8.8107e-02, -3.6559e-02,
         -4.9188e-02, -7.6125e-02,  1.4334e-01,  1.8301e-01, -2.7801e-01,
          4.0481e-01,  4.4744e-02,  2.1516e-01,  1.2112e-01, -2.6060e-01,
          1.2185e-01, -3.2895e-01,  9.1509e-04, -2.5267e-01,  2.5890e-01,
         -3.2361e-01,  1.3727e-01]], device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
903000 特征值优化 tensor(0.6260, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3305, -0.9335,  0.2257, -0.6034,  0.3582, -0.5270, -0.6382,  0.6282,
         -0.0930,  0.3955,  0.3941,  0.5263,  0.1944,  0.0391,  0.1265,  0.0483,
         -0.0324, -0.0101, -0.0479,  0.1015, -0.0479,  0.1038, -0.0058,  0.0648,
         -0.1085, -0.2549,  0.1022,  0.2109, -0.0430,  0.2674, -0.2956, -0.0954,
         -0.0913,  0.0450, -0.0699,  0.1006, -0.0354,  0.0030,  0.0618,  0.0132,
          0.0142, -0.1721,  0.1534,  0.1873, -0.1736,  0.4239,  0.1567, -0.3883,
         -0.4236,  0.6936,  0.0150,  0.0263, -0.1285, -0.1013,  0.0064,  0.0096,
         -0.0762,  0.1433,  0.1708, -0.2881,  0.2513,  0.1305,  0.1806,  0.1027,
         -0.2620,  0.1328, -0.3269,  0.0056, -0.1562,  0.2151, -0.3273,  0.1311]],
       device='cuda:0') tensor(0.2040, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
904000 特征值优化 tensor(0.6284, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2732e-01, -9.2915e-01,  2.2764e-01, -6.0333e-01,  3.5764e-01,
         -5.4535e-01, -6.3706e-01,  6.2934e-01, -1.0216e-01,  3.8986e-01,
          3.9668e-01,  5.3881e-01,  1.9495e-01,  3.4387e-02,  1.2102e-01,
          5.3745e-02, -2.5824e-02,  1.2584e-02, -4.9059e-02,  9.7890e-02,
         -4.8339e-02,  1.0389e-01,  6.5899e-03,  3.8455e-02, -1.0992e-01,
         -2.5698e-01,  1.0001e-01,  2.1035e-01, -3.8099e-02,  2.6746e-01,
         -2.9627e-01, -8.8522e-02, -9.0166e-02,  4.4712e-02, -7.4856e-02,
          9.5836e-02, -5.6651e-02, -8.5675e-04,  6.3633e-02,  1.0727e-02,
          3.4819e-02, -1.7281e-01,  1.5261e-01,  1.8797e-01, -1.7247e-01,
          4.1564e-01,  1.5926e-01, -3.8105e-01, -4.3081e-01,  6.8902e-01,
          2.5769e-02,  2.2299e-02, -1.3554e-01, -9.7000e-02,  2.2709e-03,
         -3.1168e-02, -6.9250e-02,  1.3220e-01,  1.8639e-01, -2.7891e-01,
          2.4216e-01,  1.3060e-01,  1.7742e-01,  9.1146e-02, -2.7535e-01,
          1.4541e-01, -3.2204e-01,  6.4561e-03, -1.5281e-01,  2.1576e-01,
         -3.2849e-01,  1.2517e-01]], device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
905000 特征值优化 tensor(0.6287, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.3130e-01, -9.3059e-01,  2.2638e-01, -6.0187e-01,  3.4900e-01,
         -5.5479e-01, -6.3601e-01,  6.3748e-01, -9.1538e-02,  3.7809e-01,
          4.4014e-01,  5.3627e-01,  1.9469e-01,  6.1677e-02,  1.4937e-01,
          5.2764e-02, -3.9941e-02,  4.9400e-02, -1.8981e-02,  9.8533e-02,
         -4.7996e-02,  1.0565e-01, -2.0730e-02,  6.5011e-02, -8.7009e-02,
         -2.5992e-01,  9.1999e-02,  2.0508e-01, -7.7550e-02,  2.6987e-01,
         -2.9593e-01, -9.8284e-02, -6.6621e-02,  5.6956e-02, -7.1234e-02,
          9.6807e-02, -5.5778e-02,  2.5781e-04,  4.7960e-02,  1.3035e-02,
          3.3554e-02, -1.7301e-01,  1.5640e-01,  1.8822e-01, -1.7439e-01,
          4.1666e-01,  1.5958e-01, -3.8160e-01, -4.3802e-01,  6.9338e-01,
          5.8123e-02, -1.4418e-04, -1.5484e-01, -8.5126e-02, -2.0879e-03,
         -1.2721e-02, -7.7762e-02,  1.3559e-01,  1.7544e-01, -2.8452e-01,
          3.2944e-01,  1.0406e-01,  2.0094e-01,  7.9869e-02, -2.6420e-01,
          1.4435e-01, -3.2292e-01,  4.5903e-03, -2.4831e-01,  2.3472e-01,
         -3.3040e-01,  1.2236e-01]], device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
906000 特征值优化 tensor(0.6215, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.3091e-01, -9.5037e-01,  2.3187e-01, -5.9636e-01,  3.4980e-01,
         -5.2473e-01, -7.2224e-01,  6.9686e-01, -1.1706e-01,  3.9777e-01,
          4.8002e-01,  5.3127e-01,  1.9342e-01,  6.0384e-02,  1.4541e-01,
          2.4629e-02, -3.8488e-02, -6.1557e-02, -1.0686e-01,  1.0635e-01,
         -4.7352e-02,  1.0356e-01, -1.9544e-06,  5.7510e-02, -1.1543e-01,
         -2.4957e-01,  1.0982e-01,  2.1991e-01, -4.1004e-02,  2.6769e-01,
         -2.9565e-01, -9.2468e-02, -9.7472e-02,  4.1138e-02, -7.4894e-02,
          9.3334e-02, -2.4971e-02, -4.3247e-04,  6.1351e-02,  8.1559e-03,
          5.2103e-03, -1.7574e-01,  1.5559e-01,  1.8923e-01, -1.7202e-01,
          4.3826e-01,  1.4874e-01, -3.9132e-01, -4.2299e-01,  6.9280e-01,
          1.0035e-02,  2.8125e-02, -1.2606e-01, -9.9839e-02, -2.5537e-02,
          4.4476e-02, -7.2699e-02,  1.4056e-01,  1.8623e-01, -2.7875e-01,
          3.2826e-01,  6.3585e-02,  1.6674e-01,  8.9078e-02, -2.7081e-01,
          1.3980e-01, -3.2246e-01,  7.0855e-03, -2.3180e-01,  2.9026e-01,
         -3.2454e-01,  1.2070e-01]], device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
907000 特征值优化 tensor(0.6243, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3275, -0.9354,  0.2438, -0.5838,  0.3492, -0.5258, -0.6905,  0.6510,
         -0.1264,  0.3889,  0.4018,  0.5353,  0.1954,  0.0588,  0.1387,  0.0318,
         -0.0268, -0.0446, -0.0981,  0.1018, -0.0483,  0.1046, -0.0023,  0.0491,
         -0.1137, -0.2512,  0.1096,  0.2177, -0.0386,  0.2685, -0.2958, -0.0934,
         -0.0872,  0.0430, -0.0774,  0.0902, -0.0353,  0.0034,  0.0621,  0.0037,
          0.0173, -0.1760,  0.1515,  0.1878, -0.1735,  0.4263,  0.1560, -0.3896,
         -0.4316,  0.6876,  0.0156,  0.0214, -0.1220, -0.1016,  0.0107, -0.0179,
         -0.0805,  0.1442,  0.1802, -0.2815,  0.3028,  0.0875,  0.1837,  0.0838,
         -0.2726,  0.1419, -0.3156,  0.0026, -0.1921,  0.2666, -0.3202,  0.1185]],
       device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
908000 特征值优化 tensor(0.6265, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.2674e-01, -9.3350e-01,  2.3645e-01, -5.8465e-01,  3.5474e-01,
         -5.2985e-01, -6.9127e-01,  6.5078e-01, -1.1744e-01,  3.8957e-01,
          3.9407e-01,  5.4476e-01,  1.9484e-01,  3.3220e-02,  1.1475e-01,
          5.8925e-02, -2.6038e-02, -4.4742e-02, -5.6236e-02,  9.9205e-02,
         -4.8633e-02,  1.0418e-01, -4.4797e-03,  3.5555e-02, -1.0720e-01,
         -2.6555e-01,  9.3550e-02,  2.1094e-01, -4.0237e-02,  2.6772e-01,
         -2.9642e-01, -1.0223e-01, -8.4614e-02,  4.2953e-02, -7.4883e-02,
          9.5720e-02, -5.2106e-02, -6.8685e-04,  6.0369e-02,  5.9570e-03,
          3.3212e-02, -1.7112e-01,  1.5142e-01,  1.8802e-01, -1.7467e-01,
          4.2091e-01,  1.5853e-01, -3.8477e-01, -4.3093e-01,  6.8941e-01,
          1.7296e-02,  2.2819e-02, -1.2744e-01, -9.9878e-02,  2.2785e-02,
         -5.0034e-02, -7.4473e-02,  1.3888e-01,  1.8172e-01, -2.8413e-01,
          2.8327e-01,  1.0550e-01,  1.6194e-01,  9.5180e-02, -2.7463e-01,
          1.3856e-01, -3.1940e-01,  4.2447e-03, -1.6507e-01,  2.4655e-01,
         -3.2654e-01,  1.2817e-01]], device='cuda:0') tensor(0.2041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
909000 特征值优化 tensor(0.6279, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.3352e-01, -9.1954e-01,  2.5324e-01, -5.7564e-01,  3.5992e-01,
         -5.1428e-01, -6.7136e-01,  6.4024e-01, -1.1172e-01,  3.8394e-01,
          3.7699e-01,  5.3286e-01,  1.9751e-01,  4.2094e-02,  1.2623e-01,
          4.7544e-02, -1.9822e-02, -3.1082e-02, -5.9454e-02,  9.9739e-02,
         -5.0376e-02,  1.0428e-01, -3.4244e-02,  3.3184e-02, -8.6849e-02,
         -2.8726e-01,  7.5603e-02,  1.9782e-01, -4.0323e-02,  2.6798e-01,
         -2.9667e-01, -1.0306e-01, -7.8149e-02,  4.4136e-02, -7.0613e-02,
          1.0062e-01, -4.5878e-02,  4.8642e-04,  5.8404e-02,  1.1735e-02,
          2.7693e-02, -1.7070e-01,  1.5171e-01,  1.8508e-01, -1.7587e-01,
          4.2069e-01,  1.6041e-01, -3.9515e-01, -4.3238e-01,  6.8890e-01,
          9.9381e-03,  2.1897e-02, -1.3549e-01, -9.7737e-02,  1.5431e-02,
          3.9376e-02, -7.5279e-02,  1.4522e-01,  1.8326e-01, -2.7587e-01,
          2.8515e-01,  9.5680e-02,  1.7861e-01,  8.4276e-02, -2.6642e-01,
          1.3391e-01, -3.2312e-01,  2.3932e-03, -1.6572e-01,  2.5213e-01,
         -3.2982e-01,  1.3093e-01]], device='cuda:0') tensor(0.2035, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
910000 特征值优化 tensor(0.6476, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.1712e-01, -9.2491e-01,  2.6653e-01, -5.7142e-01,  3.5183e-01,
         -5.4743e-01, -6.3867e-01,  6.5801e-01, -5.5042e-02,  3.7946e-01,
          3.5610e-01,  4.7518e-01,  1.9245e-01,  5.9429e-02,  1.4446e-01,
          6.6337e-02, -2.8487e-03,  3.3615e-02,  4.9679e-02,  1.0004e-01,
         -5.0879e-02,  1.0372e-01, -1.2063e-02,  6.6922e-02, -9.6978e-02,
         -2.3220e-01,  1.3346e-01,  2.2008e-01, -5.4920e-02,  2.6844e-01,
         -2.9394e-01, -1.0224e-01, -5.1665e-02,  5.1351e-02, -5.9616e-02,
          1.0317e-01, -6.3115e-02, -5.5303e-03,  5.7062e-02,  2.5470e-02,
          4.3374e-02, -1.6797e-01,  1.4839e-01,  1.8111e-01, -1.7988e-01,
          4.1490e-01,  1.5224e-01, -4.0089e-01, -4.2770e-01,  6.9275e-01,
          2.5543e-02,  1.0904e-02, -1.5158e-01, -8.1138e-02,  8.9194e-04,
          3.1794e-02, -7.2426e-02,  1.4268e-01,  1.8843e-01, -2.7364e-01,
          1.9880e-01,  1.3725e-01,  1.6010e-01,  7.1130e-02, -2.5589e-01,
          1.4168e-01, -3.3231e-01,  3.0687e-03, -7.0119e-02,  1.9695e-01,
         -3.2271e-01,  1.2096e-01]], device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
911000 特征值优化 tensor(0.6418, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3079, -0.9102,  0.2682, -0.5728,  0.3582, -0.5438, -0.6554,  0.6529,
         -0.0689,  0.3609,  0.3281,  0.4953,  0.1953,  0.0447,  0.1297,  0.0545,
          0.0112,  0.0244,  0.0331,  0.0994, -0.0504,  0.1025, -0.0110,  0.0499,
         -0.0999, -0.2378,  0.1276,  0.2142, -0.0514,  0.2675, -0.2947, -0.0955,
         -0.0608,  0.0481, -0.0649,  0.1020, -0.0677, -0.0084,  0.0587,  0.0271,
          0.0414, -0.1681,  0.1448,  0.1859, -0.1744,  0.4146,  0.1538, -0.4046,
         -0.4319,  0.6893,  0.0198,  0.0138, -0.1587, -0.0798,  0.0255, -0.0101,
         -0.0795,  0.1482,  0.1851, -0.2723,  0.2375,  0.1069,  0.1755,  0.0643,
         -0.2712,  0.1476, -0.3283, -0.0046, -0.0941,  0.2285, -0.3219,  0.1195]],
       device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
912000 特征值优化 tensor(0.6555, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.1205e-01, -9.1675e-01,  2.7741e-01, -5.3877e-01,  3.4827e-01,
         -5.2813e-01, -7.5889e-01,  7.0711e-01, -8.6594e-02,  3.7259e-01,
          4.3355e-01,  4.8948e-01,  1.9294e-01,  4.4781e-02,  1.4910e-01,
         -2.1443e-02, -8.6692e-03, -8.9661e-02, -1.0071e-01,  9.9756e-02,
         -4.9063e-02,  1.0639e-01, -2.4551e-02,  4.2459e-02, -9.5103e-02,
         -2.6862e-01,  9.1413e-02,  1.9833e-01, -4.8724e-02,  2.6614e-01,
         -2.9440e-01, -8.7289e-02, -7.9219e-02,  5.3939e-02, -6.4110e-02,
          1.0144e-01, -1.8596e-02,  6.8435e-03,  5.2652e-02,  2.2195e-02,
          5.7432e-03, -1.6733e-01,  1.4864e-01,  1.8518e-01, -1.7582e-01,
          4.1336e-01,  1.5323e-01, -4.0067e-01, -4.2810e-01,  6.8803e-01,
         -1.1981e-03,  1.8578e-02, -1.3585e-01, -9.0876e-02, -9.5573e-04,
         -2.3930e-02, -7.8731e-02,  1.4857e-01,  1.9631e-01, -2.6674e-01,
          2.5458e-01,  8.0771e-02,  1.3205e-01,  7.9511e-02, -2.5796e-01,
          1.3477e-01, -3.3239e-01, -4.7238e-04, -1.2410e-01,  2.5383e-01,
         -3.2678e-01,  1.2738e-01]], device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
913000 特征值优化 tensor(0.6255, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3362, -0.9220,  0.2784, -0.5451,  0.3489, -0.5365, -0.7015,  0.6499,
         -0.0687,  0.3606,  0.3814,  0.4851,  0.1953,  0.0461,  0.1495,  0.0226,
          0.0058, -0.0571, -0.0657,  0.0988, -0.0490,  0.1067, -0.0307,  0.0576,
         -0.0756, -0.2701,  0.0976,  0.2014, -0.0443,  0.2688, -0.2958, -0.0964,
         -0.0911,  0.0389, -0.0663,  0.1017, -0.0364, -0.0011,  0.0570,  0.0316,
          0.0176, -0.1706,  0.1552,  0.1861, -0.1732,  0.4148,  0.1597, -0.4122,
         -0.4313,  0.6827, -0.0215,  0.0282, -0.1255, -0.0995,  0.0015,  0.0736,
         -0.0754,  0.1456,  0.2150, -0.2592,  0.2580,  0.0967,  0.1630,  0.1024,
         -0.2612,  0.1405, -0.3304, -0.0032, -0.1317,  0.2524, -0.3280,  0.1220]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
914000 特征值优化 tensor(0.6259, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3328, -0.9283,  0.2734, -0.5557,  0.3555, -0.5437, -0.7206,  0.6774,
         -0.0707,  0.3658,  0.3920,  0.4925,  0.1954,  0.0384,  0.1373,  0.0371,
         -0.0084, -0.0320, -0.0429,  0.0983, -0.0492,  0.1057, -0.0235,  0.0391,
         -0.0840, -0.2783,  0.0804,  0.2070, -0.0491,  0.2710, -0.2950, -0.1026,
         -0.0868,  0.0400, -0.0644,  0.0975, -0.0490, -0.0051,  0.0587,  0.0275,
          0.0288, -0.1744,  0.1541,  0.1866, -0.1722,  0.4148,  0.1598, -0.4122,
         -0.4280,  0.6877, -0.0034,  0.0152, -0.1239, -0.1010, -0.0115, -0.0453,
         -0.0569,  0.1273,  0.2088, -0.2668,  0.2024,  0.1208,  0.1427,  0.0878,
         -0.2642,  0.1405, -0.3281, -0.0039, -0.0857,  0.2381, -0.3276,  0.1245]],
       device='cuda:0') tensor(0.2086, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
915000 特征值优化 tensor(0.6212, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3332, -0.9450,  0.2757, -0.5585,  0.3491, -0.5602, -0.6650,  0.6727,
         -0.0073,  0.3446,  0.3869,  0.4432,  0.1948,  0.0738,  0.1571,  0.0990,
         -0.0304,  0.0592,  0.0663,  0.0977, -0.0474,  0.1050,  0.0055,  0.0782,
         -0.1166, -0.2149,  0.1480,  0.2328, -0.0502,  0.2700, -0.2958, -0.1054,
         -0.0666,  0.0584, -0.0568,  0.1085, -0.0960, -0.0233,  0.0361,  0.0329,
          0.0736, -0.1656,  0.1592,  0.1882, -0.1767,  0.4267,  0.1574, -0.4142,
         -0.4264,  0.6926, -0.0020,  0.0185, -0.1380, -0.0930,  0.0214,  0.0340,
         -0.0798,  0.1418,  0.1863, -0.2779,  0.1702,  0.1453,  0.1573,  0.0652,
         -0.2603,  0.1353, -0.3289, -0.0156, -0.0419,  0.1990, -0.3193,  0.1290]],
       device='cuda:0') tensor(0.2013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
916000 特征值优化 tensor(0.6248, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3221, -0.9326,  0.2731, -0.5677,  0.3614, -0.5548, -0.7030,  0.6846,
          0.0010,  0.3433,  0.3806,  0.4391,  0.1941,  0.0514,  0.1408,  0.0645,
         -0.0240,  0.0358,  0.0170,  0.0984, -0.0475,  0.1045,  0.0179,  0.0638,
         -0.1255, -0.2101,  0.1459,  0.2366, -0.0415,  0.2668, -0.2959, -0.1408,
         -0.0261,  0.0562, -0.0550,  0.1065, -0.0342,  0.0026,  0.0422,  0.0346,
          0.0141, -0.1696,  0.1510,  0.1889, -0.1730,  0.4159,  0.1596, -0.4111,
         -0.4248,  0.6911, -0.0067,  0.0298, -0.1211, -0.1052, -0.0100,  0.0097,
         -0.0825,  0.1373,  0.1910, -0.2742,  0.1971,  0.1206,  0.1418,  0.0850,
         -0.2589,  0.1366, -0.3307, -0.0136, -0.0618,  0.2274, -0.3189,  0.1262]],
       device='cuda:0') tensor(0.2068, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
917000 特征值优化 tensor(0.6506, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3280, -0.9140,  0.2702, -0.5564,  0.3492, -0.5538, -0.6616,  0.6399,
         -0.0208,  0.3452,  0.3297,  0.4292,  0.1946,  0.0472,  0.1404,  0.0496,
         -0.0198,  0.0384,  0.0141,  0.0768, -0.0488,  0.1034,  0.0076,  0.0570,
         -0.1225, -0.2221,  0.1425,  0.2217, -0.0375,  0.2662, -0.2943, -0.1158,
         -0.0441,  0.0567, -0.0605,  0.1050, -0.0542, -0.0023,  0.0491,  0.0421,
          0.0366, -0.1592,  0.1496,  0.1923, -0.1682,  0.4009,  0.1588, -0.4061,
         -0.4259,  0.6874,  0.0017,  0.0197, -0.1432, -0.0878, -0.0269, -0.0390,
         -0.0927,  0.1458,  0.2060, -0.2630,  0.2216,  0.1225,  0.1841,  0.0673,
         -0.2708,  0.1402, -0.3315, -0.0124, -0.0733,  0.2137, -0.3064,  0.1167]],
       device='cuda:0') tensor(0.2033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
918000 特征值优化 tensor(0.6275, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3269, -0.9246,  0.2730, -0.5535,  0.3682, -0.5385, -0.7038,  0.6470,
         -0.0412,  0.3363,  0.3763,  0.4470,  0.1953,  0.0498,  0.1421,  0.0392,
         -0.0025, -0.0349, -0.0341,  0.0883, -0.0489,  0.1058, -0.0171,  0.0314,
         -0.0798, -0.2878,  0.0681,  0.2105, -0.0713,  0.2716, -0.2963, -0.1023,
         -0.0783,  0.0482, -0.0603,  0.1053, -0.0299,  0.0035,  0.0494,  0.0455,
          0.0100, -0.1615,  0.1546,  0.1867, -0.1754,  0.3997,  0.1676, -0.4071,
         -0.4328,  0.6869,  0.0126,  0.0065, -0.1348, -0.1001, -0.0283, -0.0122,
         -0.0923,  0.1474,  0.2204, -0.2515,  0.2470,  0.0992,  0.1737,  0.0825,
         -0.2543,  0.1400, -0.3347, -0.0096, -0.1120,  0.2489, -0.3223,  0.1153]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
919000 特征值优化 tensor(0.6245, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3271, -0.9245,  0.2738, -0.5526,  0.3572, -0.5454, -0.6895,  0.6281,
         -0.0787,  0.3428,  0.3865,  0.4795,  0.1948,  0.0661,  0.1667,  0.0077,
         -0.0017, -0.0536, -0.0625,  0.0924, -0.0478,  0.1057, -0.0351,  0.0556,
         -0.0643, -0.2980,  0.0593,  0.2016, -0.0756,  0.2716, -0.2965, -0.0989,
         -0.0884,  0.0551, -0.0643,  0.1026, -0.0339,  0.0044,  0.0509,  0.0344,
          0.0120, -0.1654,  0.1558,  0.1884, -0.1762,  0.4056,  0.1642, -0.4069,
         -0.4325,  0.6864,  0.0175,  0.0039, -0.1310, -0.0993, -0.0473,  0.0125,
         -0.0938,  0.1450,  0.2048, -0.2636,  0.2903,  0.0807,  0.1976,  0.0746,
         -0.2504,  0.1337, -0.3276, -0.0090, -0.1595,  0.2730, -0.3239,  0.1187]],
       device='cuda:0') tensor(0.2033, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
920000 特征值优化 tensor(0.6217, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3352, -0.9306,  0.2830, -0.5437,  0.3608, -0.5460, -0.6970,  0.6530,
         -0.0816,  0.3479,  0.4248,  0.4741,  0.1951,  0.0747,  0.1767,  0.0036,
          0.0093, -0.0647, -0.0821,  0.0927, -0.0487,  0.1058, -0.0410,  0.0622,
         -0.0530, -0.3105,  0.0477,  0.1968, -0.0718,  0.2714, -0.2961, -0.0965,
         -0.0919,  0.0568, -0.0625,  0.1042, -0.0354,  0.0033,  0.0491,  0.0359,
          0.0132, -0.1663,  0.1602,  0.1877, -0.1753,  0.4099,  0.1624, -0.4122,
         -0.4317,  0.6866,  0.0109,  0.0052, -0.1339, -0.0986, -0.0696,  0.0283,
         -0.0914,  0.1480,  0.2047, -0.2631,  0.3017,  0.0643,  0.1926,  0.0658,
         -0.2456,  0.1294, -0.3296, -0.0077, -0.1853,  0.2928, -0.3250,  0.1199]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
921000 特征值优化 tensor(0.6478, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3231, -0.9130,  0.2779, -0.5449,  0.3541, -0.5547, -0.7217,  0.6211,
         -0.0445,  0.3324,  0.4133,  0.4571,  0.1919,  0.0486,  0.1553, -0.0012,
         -0.0033, -0.0461, -0.0784,  0.0863, -0.0505,  0.1044, -0.0242,  0.0475,
         -0.0883, -0.2788,  0.0767,  0.1867, -0.0354,  0.2658, -0.2948, -0.0791,
         -0.0708,  0.0564, -0.0614,  0.1062, -0.0309,  0.0045,  0.0490,  0.0333,
          0.0061, -0.1638,  0.1670,  0.1792, -0.1911,  0.4059,  0.1547, -0.4062,
         -0.4275,  0.6901, -0.0044,  0.0264, -0.1306, -0.0918, -0.0243,  0.0176,
         -0.0796,  0.1401,  0.2059, -0.2601,  0.3106,  0.0719,  0.1916,  0.0778,
         -0.2755,  0.1439, -0.3164, -0.0199, -0.2112,  0.2944, -0.3179,  0.1283]],
       device='cuda:0') tensor(0.2025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
922000 特征值优化 tensor(0.6267, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3486, -0.9246,  0.2881, -0.5535,  0.3564, -0.5690, -0.7258,  0.6634,
          0.0047,  0.3157,  0.4152,  0.4243,  0.1973,  0.0440,  0.1235,  0.0377,
         -0.0087, -0.0899, -0.1238,  0.0736, -0.0486,  0.1024, -0.0045,  0.0170,
         -0.0994, -0.2694,  0.1032,  0.2216, -0.0097,  0.2657, -0.2972, -0.0997,
         -0.0761,  0.0539, -0.0571,  0.1101, -0.0251,  0.0045,  0.0438,  0.0476,
          0.0044, -0.1597,  0.2034,  0.1757, -0.2098,  0.4302,  0.1551, -0.4306,
         -0.4257,  0.6973, -0.0212,  0.0306, -0.1381, -0.0954,  0.0085,  0.0376,
         -0.0672,  0.1345,  0.2189, -0.2546,  0.3041,  0.0697,  0.1833,  0.0780,
         -0.2824,  0.1469, -0.3168, -0.0277, -0.1656,  0.2790, -0.3262,  0.1323]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
923000 特征值优化 tensor(0.6151, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3452, -0.9363,  0.2818, -0.5721,  0.3508, -0.5341, -0.6760,  0.7053,
         -0.0077,  0.3919,  0.4019,  0.4407,  0.1936,  0.0732,  0.1700,  0.0946,
         -0.0334,  0.0775,  0.0931,  0.0386, -0.0464,  0.1049,  0.0142,  0.1219,
         -0.1344, -0.1951,  0.1760,  0.2311, -0.0205,  0.2665, -0.2961, -0.1225,
         -0.0202,  0.0563, -0.0231,  0.1091, -0.0627, -0.0050,  0.0562,  0.0319,
          0.0290, -0.1592,  0.2268,  0.1476, -0.1927,  0.4100,  0.1607, -0.4162,
         -0.4194,  0.6883, -0.0191,  0.0349, -0.1338, -0.0961, -0.0229, -0.0174,
         -0.1403,  0.1610,  0.2132, -0.2630,  0.1110,  0.1580,  0.1311,  0.0618,
         -0.3005,  0.1457, -0.3740,  0.0082, -0.0115,  0.2044, -0.3105,  0.1283]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
924000 特征值优化 tensor(0.6189, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.3695e-01, -9.2589e-01,  2.4370e-01, -6.0490e-01,  3.5695e-01,
         -5.3713e-01, -6.3957e-01,  6.2791e-01, -5.0059e-02,  4.2933e-01,
          3.7071e-01,  5.0009e-01,  1.9342e-01,  3.4848e-02,  1.2552e-01,
          5.4436e-02, -1.5151e-02,  1.4942e-02, -8.0767e-03,  3.5970e-02,
         -4.7118e-02,  1.0282e-01, -2.8143e-02,  9.7412e-02, -8.5600e-02,
         -2.7548e-01,  8.8907e-02,  2.0537e-01, -1.6510e-02,  2.6423e-01,
         -2.9613e-01, -8.9965e-02, -7.0067e-02,  5.6621e-02, -2.1913e-02,
          9.2264e-02, -2.4713e-02,  7.5385e-03,  5.9264e-02,  1.5905e-02,
         -2.4101e-03, -1.6480e-01,  2.2277e-01,  1.4785e-01, -1.9194e-01,
          4.0367e-01,  1.6258e-01, -4.0131e-01, -4.1300e-01,  6.9542e-01,
          1.3397e-04,  3.8622e-02, -1.1400e-01, -1.0773e-01, -1.1607e-02,
         -1.3045e-02, -1.7699e-01,  1.8194e-01,  1.8600e-01, -2.7304e-01,
          1.3792e-01,  1.7098e-01,  1.8859e-01,  8.8527e-02, -2.6850e-01,
          1.2812e-01, -4.0742e-01,  3.5602e-02, -6.6322e-02,  1.9400e-01,
         -3.1087e-01,  1.2974e-01]], device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
925000 特征值优化 tensor(0.6158, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.4631e-01, -9.3308e-01,  2.3986e-01, -6.0226e-01,  3.4987e-01,
         -5.4970e-01, -5.9541e-01,  5.7602e-01, -5.3870e-02,  4.3961e-01,
          3.6876e-01,  4.9431e-01,  1.9342e-01,  5.3152e-02,  1.4085e-01,
          4.8111e-02,  8.0971e-04, -2.4814e-03, -6.5765e-02,  3.6879e-02,
         -4.7175e-02,  1.0279e-01, -3.8120e-02,  8.4841e-02, -8.8098e-02,
         -2.8226e-01,  8.4223e-02,  2.1328e-01, -1.9256e-02,  2.6401e-01,
         -2.9567e-01, -8.9324e-02, -7.5070e-02,  5.5628e-02, -1.5147e-02,
          9.4852e-02, -2.1539e-02,  8.9070e-03,  5.9536e-02,  1.1677e-02,
         -3.4507e-03, -1.6488e-01,  2.2694e-01,  1.4627e-01, -1.9170e-01,
          4.0689e-01,  1.6200e-01, -4.0025e-01, -4.1198e-01,  6.9348e-01,
         -1.8812e-03,  3.9433e-02, -1.1669e-01, -1.0423e-01,  4.6276e-03,
         -4.5492e-02, -1.8377e-01,  1.8702e-01,  1.8334e-01, -2.8352e-01,
          2.5097e-01,  1.2462e-01,  2.3113e-01,  9.3294e-02, -2.6106e-01,
          1.1923e-01, -3.9339e-01,  3.2459e-02, -1.8133e-01,  2.2822e-01,
         -3.0650e-01,  1.3004e-01]], device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
926000 特征值优化 tensor(0.6137, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3453, -0.9336,  0.2383, -0.5967,  0.3502, -0.5581, -0.5947,  0.6034,
         -0.0581,  0.4398,  0.4230,  0.4968,  0.1941,  0.0623,  0.1512,  0.0698,
         -0.0169,  0.0465, -0.0400,  0.0348, -0.0476,  0.1010,  0.0077,  0.0800,
         -0.1173, -0.2370,  0.1270,  0.2143, -0.0087,  0.2637, -0.2956, -0.1048,
         -0.0570,  0.0552, -0.0192,  0.0938, -0.0347,  0.0052,  0.0603,  0.0043,
          0.0079, -0.1649,  0.2276,  0.1464, -0.1912,  0.4053,  0.1622, -0.4012,
         -0.4184,  0.7009, -0.0073,  0.0431, -0.1484, -0.0885, -0.0020, -0.0123,
         -0.1789,  0.1851,  0.1687, -0.2903,  0.2537,  0.1297,  0.2228,  0.0804,
         -0.2679,  0.1228, -0.3964,  0.0343, -0.1799,  0.2081, -0.3008,  0.1284]],
       device='cuda:0') tensor(0.2040, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
927000 特征值优化 tensor(0.6126, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3446, -0.9286,  0.2371, -0.5913,  0.3635, -0.5744, -0.6121,  0.5764,
         -0.0764,  0.4294,  0.4371,  0.5113,  0.1927,  0.0595,  0.1506,  0.0321,
          0.0185, -0.0659, -0.1590,  0.0396, -0.0479,  0.1020,  0.0044,  0.0276,
         -0.0903, -0.2932,  0.0719,  0.2102, -0.0149,  0.2643, -0.2961, -0.0915,
         -0.0926,  0.0580, -0.0250,  0.0787, -0.0153,  0.0063,  0.0610,  0.0010,
         -0.0085, -0.1651,  0.2267,  0.1471, -0.1924,  0.4079,  0.1614, -0.3989,
         -0.4199,  0.7007, -0.0049,  0.0418, -0.1374, -0.0976, -0.0135,  0.0315,
         -0.1703,  0.1902,  0.1763, -0.2731,  0.2916,  0.0912,  0.2303,  0.1004,
         -0.2459,  0.1135, -0.4223,  0.0531, -0.2210,  0.2581, -0.3134,  0.1341]],
       device='cuda:0') tensor(0.2044, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
928000 特征值优化 tensor(0.6161, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3459, -0.9264,  0.2417, -0.5966,  0.3843, -0.5668, -0.5890,  0.5567,
         -0.0505,  0.4250,  0.3854,  0.4667,  0.1931,  0.0506,  0.1483,  0.0516,
          0.0142, -0.0015, -0.0807,  0.0371, -0.0475,  0.1025,  0.0513, -0.0131,
         -0.0980, -0.2673,  0.0988,  0.2129, -0.0086,  0.2633, -0.2961, -0.0927,
         -0.0823,  0.0519, -0.0092,  0.0911, -0.0316,  0.0068,  0.0614,  0.0163,
          0.0075, -0.1639,  0.2280,  0.1479, -0.1938,  0.4047,  0.1632, -0.3989,
         -0.4113,  0.6941, -0.0053,  0.0411, -0.1390, -0.1016,  0.0125,  0.0319,
         -0.1898,  0.1843,  0.1887, -0.2790,  0.2442,  0.1241,  0.2314,  0.0961,
         -0.2339,  0.1122, -0.4072,  0.0380, -0.1741,  0.2274, -0.3127,  0.1375]],
       device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
929000 特征值优化 tensor(0.6114, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3490, -0.9316,  0.2414, -0.5993,  0.3823, -0.5606, -0.5896,  0.5673,
         -0.0844,  0.4270,  0.4315,  0.5090,  0.1951,  0.0713,  0.1701,  0.0961,
         -0.0114,  0.0533, -0.0432,  0.0298, -0.0485,  0.1017,  0.0447, -0.0099,
         -0.1222, -0.2469,  0.1100,  0.2230, -0.0042,  0.2626, -0.2952, -0.0948,
         -0.0584,  0.0522, -0.0136,  0.0934, -0.0449,  0.0058,  0.0597, -0.0060,
          0.0101, -0.1627,  0.2300,  0.1472, -0.1906,  0.3982,  0.1641, -0.4028,
         -0.4080,  0.6955, -0.0081,  0.0429, -0.1549, -0.0939,  0.0271,  0.0338,
         -0.1974,  0.1880,  0.1491, -0.3024,  0.2758,  0.1126,  0.2430,  0.0875,
         -0.2503,  0.1136, -0.3853,  0.0322, -0.2056,  0.2172, -0.2979,  0.1325]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
930000 特征值优化 tensor(0.6183, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3460, -0.9254,  0.2397, -0.5949,  0.3850, -0.5734, -0.5744,  0.5423,
         -0.0790,  0.4186,  0.3872,  0.5059,  0.1929,  0.0478,  0.1470,  0.0520,
          0.0223,  0.0167, -0.0627,  0.0347, -0.0469,  0.1030,  0.0551, -0.0143,
         -0.0868, -0.2818,  0.0857,  0.2053, -0.0093,  0.2632, -0.2962, -0.0922,
         -0.0754,  0.0516, -0.0132,  0.0908, -0.0405,  0.0076,  0.0631,  0.0017,
          0.0145, -0.1650,  0.2276,  0.1468, -0.1922,  0.4032,  0.1638, -0.3973,
         -0.4153,  0.6983, -0.0070,  0.0408, -0.1394, -0.1022, -0.0291, -0.0361,
         -0.1891,  0.1847,  0.1670, -0.2914,  0.2293,  0.1299,  0.2297,  0.0935,
         -0.2406,  0.1154, -0.3909,  0.0351, -0.1697,  0.2239, -0.3057,  0.1313]],
       device='cuda:0') tensor(0.2000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
931000 特征值优化 tensor(0.6132, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.4712e-01, -9.2888e-01,  2.4380e-01, -5.9898e-01,  3.7959e-01,
         -5.3178e-01, -5.8396e-01,  5.6628e-01, -7.0785e-02,  4.2687e-01,
          4.0371e-01,  4.7546e-01,  1.9439e-01,  6.5127e-02,  1.6880e-01,
          8.0938e-02,  6.3192e-04,  4.6900e-02, -1.2193e-02,  3.5519e-02,
         -4.7158e-02,  1.0200e-01,  4.0715e-02,  2.3172e-03, -1.3287e-01,
         -2.2414e-01,  1.4112e-01,  2.3948e-01, -8.6682e-03,  2.6344e-01,
         -2.9597e-01, -9.9567e-02, -5.1622e-02,  5.6897e-02, -6.6612e-03,
          9.5696e-02, -4.1263e-02,  5.6625e-03,  5.7474e-02,  3.7400e-03,
          9.5291e-03, -1.6371e-01,  2.2880e-01,  1.4717e-01, -1.9260e-01,
          4.0440e-01,  1.6214e-01, -4.0112e-01, -4.1132e-01,  6.9480e-01,
         -5.8463e-03,  4.2185e-02, -1.4747e-01, -9.6272e-02,  6.5190e-03,
         -7.2270e-03, -2.0312e-01,  1.9076e-01,  1.6402e-01, -2.9442e-01,
          2.1125e-01,  1.4931e-01,  2.4819e-01,  8.0622e-02, -2.4450e-01,
          1.0795e-01, -3.9281e-01,  2.6608e-02, -1.5284e-01,  1.9501e-01,
         -2.9676e-01,  1.3327e-01]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
932000 特征值优化 tensor(0.6099, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3482, -0.9305,  0.2442, -0.5990,  0.3633, -0.5820, -0.6439,  0.5694,
         -0.0710,  0.4275,  0.4767,  0.4989,  0.1937,  0.0696,  0.1682,  0.0228,
          0.0101, -0.0613, -0.1756,  0.0382, -0.0472,  0.1027,  0.0564, -0.0194,
         -0.1073, -0.2558,  0.1009,  0.2213, -0.0085,  0.2632, -0.2959, -0.0872,
         -0.0933,  0.0534, -0.0151,  0.0866, -0.0148,  0.0075,  0.0613,  0.0046,
         -0.0108, -0.1656,  0.2278,  0.1462, -0.1922,  0.4072,  0.1617, -0.4006,
         -0.4108,  0.6952, -0.0043,  0.0414, -0.1278, -0.1021,  0.0043,  0.0259,
         -0.1832,  0.1877,  0.1693, -0.2876,  0.3002,  0.0738,  0.2438,  0.0885,
         -0.2369,  0.1101, -0.4069,  0.0448, -0.2471,  0.2786, -0.3113,  0.1350]],
       device='cuda:0') tensor(0.2045, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
933000 特征值优化 tensor(0.6160, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.3462, -0.9288,  0.2390, -0.5950,  0.3760, -0.5791, -0.6132,  0.5489,
         -0.0747,  0.4216,  0.4180,  0.5070,  0.1929,  0.0445,  0.1371,  0.0632,
          0.0085,  0.0095, -0.0798,  0.0367, -0.0477,  0.1031,  0.0539, -0.0064,
         -0.0823, -0.2863,  0.0830,  0.2156, -0.0081,  0.2633, -0.2958, -0.0931,
         -0.0785,  0.0522, -0.0129,  0.0901, -0.0454,  0.0053,  0.0628,  0.0044,
          0.0192, -0.1656,  0.2274,  0.1475, -0.1927,  0.4055,  0.1630, -0.3974,
         -0.4152,  0.6991, -0.0068,  0.0407, -0.1399, -0.0990,  0.0214,  0.0312,
         -0.1871,  0.1861,  0.1709, -0.2898,  0.2420,  0.1212,  0.2263,  0.0926,
         -0.2380,  0.1150, -0.3946,  0.0373, -0.1698,  0.2291, -0.3111,  0.1322]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
934000 特征值优化 tensor(16.2567, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9653,  1.6033, -1.7702, -0.7423, -1.2940,  0.3750, -0.0420,  0.0507,
          0.3163,  0.2059, -1.2255,  0.4606, -0.3971, -0.2037,  1.0219,  0.1863,
          0.2911, -0.0433, -0.0365,  1.3526, -1.4782,  0.0479, -1.6462,  0.2806,
          0.2512, -0.0694,  0.2035, -0.9157, -0.5190,  0.3972,  1.0924, -0.3274,
         -0.5968,  0.3137,  0.5646, -0.8255,  0.0647, -0.4649,  0.9261, -0.7490,
         -0.2206,  0.3373, -2.3119,  0.3259, -1.2592, -1.3516, -0.2826, -0.6315,
         -1.6259,  1.5748,  0.7864, -0.8915,  0.9199, -0.1410,  1.1131,  1.2752,
          0.2063,  0.1662, -0.3480, -0.3992,  0.8732,  0.2389,  0.0163, -1.1601,
         -0.6460,  0.8661,  0.0211, -0.6426,  2.7424, -0.8270, -0.8348, -0.9508]],
       device='cuda:0') tensor(0.2148, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
935000 特征值优化 tensor(2.3002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.4568e+00,  5.7794e-01, -5.8142e-01, -7.6587e-01, -5.4845e-01,
          3.0381e-01,  7.4097e-02, -5.0444e-01,  2.9571e-01, -1.0162e-01,
         -1.8166e+00,  1.8219e-01,  7.6112e-02, -8.0325e-02,  1.5662e-01,
          4.4302e-02, -2.2203e-02,  2.9511e-02,  3.3426e-02,  3.4936e-01,
         -4.1791e-01, -4.9724e-02, -4.7890e-01,  1.3568e-01,  4.7077e-02,
         -4.2556e-03, -6.5518e-02, -5.1601e-02,  1.0218e-02,  4.2286e-02,
          1.4941e-01, -1.6906e-02, -5.8652e-03,  5.2433e-02,  3.7122e-02,
         -1.9109e-01, -1.2843e-01, -8.0568e-02,  2.9424e-01, -1.1977e-01,
         -1.0274e-01,  2.0866e-02, -1.3716e+00,  1.0229e+00, -4.8772e-01,
         -5.1899e-01,  2.0944e-01,  2.1111e-01, -6.3931e-01,  7.6233e-01,
          2.9336e-01, -1.8200e-01,  2.1811e-01,  8.6629e-02,  2.3761e-01,
          2.5119e-01, -3.4150e-01,  4.2942e-02,  8.9339e-05, -9.1940e-05,
          9.8124e-02,  2.0201e-01,  1.2460e-01, -2.0383e-01, -6.7639e-01,
          3.6429e-01,  1.3960e-01, -1.4710e-01,  1.6486e+00, -1.8344e-01,
         -2.5114e-01, -9.9816e-02]], device='cuda:0') tensor(0.2039, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
936000 特征值优化 tensor(0.7133, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.8578,  0.3655, -0.5517, -0.6537, -0.2657,  0.5375,  0.3175, -0.2202,
         -0.2230,  0.1387, -1.0968,  0.1827,  0.0856, -0.1033,  0.2550,  0.0648,
          0.1172,  0.0375,  0.0547,  0.0686, -0.2734, -0.0493, -0.1628,  0.1663,
          0.0974, -0.0225,  0.0042, -0.0039,  0.0452,  0.0382,  0.1322, -0.0317,
         -0.0908,  0.0491,  0.0025, -0.1574, -0.1515, -0.1177,  0.2169, -0.1163,
         -0.1396,  0.0195, -0.8536,  0.8151, -0.3960, -0.0571,  0.0966,  0.1867,
         -0.2586,  0.4401,  0.0702, -0.0908,  0.1485,  0.0890,  0.2438,  0.0551,
         -0.5231,  0.0649, -0.0074,  0.0269,  0.0730,  0.0614, -0.1606, -0.1525,
         -0.3849,  0.2131, -0.1394, -0.0494,  1.0152, -0.0040, -0.3289, -0.0685]],
       device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
937000 特征值优化 tensor(0.6725, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.7118,  0.3537, -0.5594, -0.5822, -0.2218,  0.5919,  0.3067, -0.3253,
         -0.2050,  0.1711, -1.0205,  0.1737,  0.0885, -0.0456,  0.2881,  0.0767,
          0.1032,  0.0198,  0.0656,  0.1027, -0.2739, -0.0537, -0.1588,  0.1653,
          0.0531, -0.0237,  0.0147, -0.0257,  0.0191,  0.0463,  0.1384, -0.0258,
         -0.0956,  0.0594,  0.0133, -0.1337, -0.1811, -0.1232,  0.2042, -0.1214,
         -0.1342,  0.0454, -0.7338,  0.7279, -0.3947, -0.0088,  0.0622,  0.1424,
         -0.1793,  0.3909,  0.0038, -0.0615,  0.2335,  0.0394,  0.1953,  0.1336,
         -0.6125,  0.1182, -0.0527, -0.0154,  0.0440,  0.0515, -0.1546, -0.0901,
         -0.3506,  0.2431, -0.1116, -0.0259,  0.8319,  0.1057, -0.2634, -0.1549]],
       device='cuda:0') tensor(0.2042, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
938000 特征值优化 tensor(0.6566, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6339,  0.3204, -0.5559, -0.6155, -0.2295,  0.7031,  0.3180, -0.4247,
         -0.2974, -0.0211, -1.0404,  0.2902,  0.0854, -0.0471,  0.3026,  0.0265,
          0.0530,  0.0525,  0.0735,  0.1143, -0.2766, -0.0532, -0.1551,  0.1917,
          0.0494, -0.0199, -0.1104,  0.0739,  0.0036,  0.0477,  0.1376, -0.0310,
         -0.0716,  0.0584,  0.0337, -0.1090, -0.1396, -0.1291,  0.1980, -0.1248,
         -0.1605,  0.0461, -0.6727,  0.7120, -0.3930,  0.0118,  0.0651,  0.1398,
         -0.1779,  0.3957,  0.0125, -0.0553,  0.1830,  0.0716,  0.1609,  0.1668,
         -0.6648,  0.1158,  0.0185, -0.0384,  0.0934,  0.0229, -0.1510, -0.0608,
         -0.3347,  0.2347, -0.0296, -0.0290,  0.7967,  0.1129, -0.2637, -0.1715]],
       device='cuda:0') tensor(0.2008, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
939000 特征值优化 tensor(0.6493, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6133,  0.3694, -0.5631, -0.6893, -0.2217,  0.7444,  0.2974, -0.4061,
         -0.2437,  0.0365, -1.0462,  0.2670,  0.0857, -0.0401,  0.3050, -0.0789,
          0.0728, -0.0103,  0.0376,  0.1184, -0.2778, -0.0545, -0.1630,  0.1168,
         -0.0080,  0.0915, -0.1360,  0.1082, -0.0122,  0.0409,  0.1373, -0.0327,
         -0.0569,  0.0555, -0.0043, -0.1146, -0.1732, -0.1402,  0.1970, -0.1207,
         -0.1239,  0.0588, -0.6454,  0.6983, -0.3874,  0.0081,  0.0539,  0.1421,
         -0.1759,  0.3924,  0.0400, -0.0670,  0.1888,  0.0693,  0.1788,  0.1462,
         -0.6601,  0.0978,  0.0203, -0.0316,  0.1580, -0.0037, -0.1559, -0.0495,
         -0.3694,  0.2712, -0.0449, -0.0230,  0.7435,  0.1462, -0.2760, -0.1662]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
940000 特征值优化 tensor(0.6518, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6110,  0.3674, -0.5590, -0.6678, -0.2243,  0.7465,  0.3078, -0.3569,
         -0.2690,  0.0115, -1.0202,  0.2708,  0.0856, -0.0507,  0.2865, -0.0441,
          0.0779, -0.0199,  0.0293,  0.1195, -0.2782, -0.0549, -0.1790,  0.1058,
          0.0048,  0.0615, -0.1516,  0.0976, -0.0029,  0.0422,  0.1382, -0.0274,
         -0.0550,  0.0586, -0.0064, -0.1030, -0.1852, -0.1432,  0.1929, -0.1264,
         -0.1206,  0.0567, -0.6427,  0.6980, -0.3884,  0.0065,  0.0546,  0.1348,
         -0.1728,  0.3939,  0.0172, -0.0562,  0.1844,  0.0713,  0.1675,  0.1556,
         -0.6694,  0.1032, -0.0111, -0.0215,  0.1426, -0.0019, -0.1741, -0.0447,
         -0.3699,  0.2688, -0.0316, -0.0343,  0.7535,  0.1470, -0.2593, -0.1783]],
       device='cuda:0') tensor(0.2043, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
941000 特征值优化 tensor(0.6493, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6031,  0.3301, -0.5337, -0.6434, -0.2010,  0.7171,  0.2965, -0.3658,
         -0.2728, -0.0159, -0.9649,  0.2121,  0.0876, -0.0370,  0.3011,  0.0273,
          0.0553,  0.0506,  0.0929,  0.1260, -0.2741, -0.0500, -0.1199,  0.2010,
          0.0610,  0.0420, -0.0375,  0.1490,  0.0155,  0.0446,  0.1455, -0.0361,
         -0.0699,  0.0527,  0.0467, -0.1033, -0.1582, -0.1287,  0.1852, -0.1034,
         -0.1451,  0.0455, -0.6380,  0.6878, -0.4007,  0.0146,  0.0538,  0.1406,
         -0.1476,  0.3800,  0.0244, -0.0698,  0.1904,  0.0745,  0.1420,  0.1686,
         -0.6804,  0.1106, -0.0630,  0.0247,  0.1029,  0.0176, -0.1871, -0.0712,
         -0.3758,  0.2669, -0.0029,  0.0043,  0.7757,  0.1450, -0.2651, -0.1944]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
942000 特征值优化 tensor(0.6388, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.9422e-01,  3.3666e-01, -5.3481e-01, -6.4661e-01, -1.8911e-01,
          7.3916e-01,  3.2784e-01, -3.5448e-01, -3.5490e-01,  8.1608e-03,
         -9.5102e-01,  2.4135e-01,  8.4310e-02, -4.3140e-02,  3.0977e-01,
         -2.7622e-02,  9.1124e-02,  1.3384e-02,  5.5866e-02,  1.2849e-01,
         -2.6928e-01, -5.3297e-02, -1.8168e-01,  1.0281e-01,  3.7292e-02,
          1.6055e-02, -1.7140e-01,  1.1747e-01, -8.0277e-04,  4.3324e-02,
          1.4313e-01, -4.2331e-02, -6.2190e-02,  5.8555e-02, -1.1558e-02,
         -1.0089e-01, -1.7455e-01, -1.5937e-01,  1.5575e-01, -1.0908e-01,
         -1.0895e-01,  5.5928e-02, -6.3520e-01,  6.8386e-01, -4.0873e-01,
          1.6550e-02,  5.8862e-02,  1.4299e-01, -1.3227e-01,  3.6267e-01,
          1.5773e-02, -6.9025e-02,  1.7177e-01,  7.8538e-02,  1.6555e-01,
          1.6622e-01, -6.5118e-01,  1.0172e-01, -1.3122e-01,  5.2388e-02,
          1.6630e-01,  6.2183e-03, -1.7737e-01, -8.0551e-02, -3.8890e-01,
          2.5140e-01,  8.6807e-03, -1.8284e-02,  7.5006e-01,  1.6315e-01,
         -2.7628e-01, -1.9123e-01]], device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
943000 特征值优化 tensor(0.6441, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5948,  0.3495, -0.5073, -0.6064, -0.1739,  0.7066,  0.3332, -0.4210,
         -0.4178, -0.0047, -0.9602,  0.2242,  0.0822, -0.0481,  0.2995,  0.0663,
          0.0536,  0.0172,  0.1015,  0.1168, -0.2740, -0.0562, -0.0821,  0.1751,
         -0.0226,  0.0837, -0.1313,  0.1363,  0.0294,  0.0498,  0.1455, -0.0400,
         -0.0605,  0.0601,  0.0311, -0.1074, -0.1429, -0.1457,  0.1567, -0.1084,
         -0.1383,  0.0498, -0.6476,  0.6875, -0.3869,  0.0251,  0.0530,  0.1470,
         -0.1173,  0.3302, -0.0034, -0.0631,  0.1567,  0.0879,  0.1318,  0.1877,
         -0.6690,  0.0899, -0.1500,  0.0319,  0.1562,  0.0077, -0.1793, -0.0952,
         -0.3744,  0.2339, -0.0493,  0.0199,  0.7790,  0.1577, -0.2515, -0.1810]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
944000 特征值优化 tensor(0.6529, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.8644e-01,  3.1307e-01, -5.3869e-01, -6.1357e-01, -1.5102e-01,
          6.5555e-01,  3.2956e-01, -3.8352e-01, -4.1492e-01,  2.9264e-02,
         -9.2795e-01,  2.9909e-01,  8.3943e-02,  7.2008e-02,  2.4140e-01,
          1.7276e-02,  5.1028e-02, -1.3391e-01,  1.3941e-01,  1.1727e-01,
         -2.7846e-01, -5.5488e-02, -1.2459e-01,  1.3045e-01,  1.6458e-02,
         -2.4110e-04, -1.4484e-01,  1.3325e-01,  2.0665e-02,  4.8025e-02,
          1.4395e-01, -2.7619e-02, -4.9326e-02,  5.6192e-02, -8.5246e-03,
         -1.1084e-01, -1.5448e-01, -1.6001e-01,  1.4633e-01, -1.1032e-01,
         -1.1040e-01,  6.2223e-02, -6.5219e-01,  6.8190e-01, -3.8329e-01,
          3.1535e-02,  6.3451e-02,  1.6613e-01, -1.2062e-01,  3.2765e-01,
          5.8782e-03, -6.5581e-02,  1.3256e-01,  9.6147e-02,  1.5492e-01,
          1.9046e-01, -6.8921e-01,  1.3049e-01, -1.5669e-01,  3.5892e-02,
          2.0760e-01, -8.4397e-03, -1.6977e-01, -7.8897e-02, -3.5440e-01,
          2.1481e-01, -3.8313e-02, -6.0718e-03,  7.0455e-01,  1.5867e-01,
         -2.7925e-01, -1.7951e-01]], device='cuda:0') tensor(0.2024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
945000 特征值优化 tensor(0.6353, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 6.0145e-01,  3.3207e-01, -5.1206e-01, -6.1491e-01, -1.8179e-01,
          6.5311e-01,  2.5173e-01, -3.0723e-01, -4.0981e-01,  6.3876e-04,
         -8.5181e-01,  3.0156e-01,  8.9600e-02,  1.9797e-02,  2.7913e-01,
          2.6649e-02,  4.0027e-02, -1.3498e-01,  8.6459e-02,  1.0906e-01,
         -2.6614e-01, -7.5640e-02, -1.1188e-01,  1.3092e-01, -1.5802e-02,
          2.2868e-02, -1.6691e-01,  9.6066e-02,  3.0603e-02,  4.0378e-02,
          1.4424e-01, -2.6777e-02, -4.3217e-02,  6.1497e-02, -1.3388e-02,
         -9.5398e-02, -1.6223e-01, -1.4029e-01,  1.6643e-01, -1.0170e-01,
         -9.6422e-02,  5.0958e-02, -6.4703e-01,  6.8133e-01, -3.8834e-01,
          5.3380e-02,  4.0400e-02,  1.0495e-01, -4.7781e-02,  3.3402e-01,
         -1.3369e-01,  1.0642e-03,  1.6792e-01,  8.4442e-02,  1.4879e-01,
          1.9599e-01, -5.8093e-01,  6.6697e-02, -1.4658e-01,  5.4339e-02,
          2.2982e-01, -3.1240e-02, -1.9595e-01, -1.0644e-01, -2.9617e-01,
          1.9168e-01,  2.6841e-02, -2.2876e-02,  6.2221e-01,  2.2726e-01,
         -2.9837e-01, -1.8487e-01]], device='cuda:0') tensor(0.2047, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
946000 特征值优化 tensor(0.6159, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6105,  0.3480, -0.4950, -0.6262, -0.2318,  0.5956,  0.2668, -0.3393,
         -0.3863,  0.0177, -0.8994,  0.3283,  0.0915,  0.0379,  0.3096, -0.0032,
          0.0469, -0.2258,  0.0755,  0.0973, -0.2640, -0.0798, -0.1434,  0.0705,
          0.0457, -0.0451, -0.1133,  0.1775,  0.0448,  0.0420,  0.1457,  0.0171,
         -0.0333,  0.0604, -0.0260, -0.1018, -0.1476, -0.1400,  0.1568, -0.1044,
         -0.1050,  0.0524, -0.6304,  0.6809, -0.3986,  0.0888,  0.0195,  0.0643,
         -0.0644,  0.3701, -0.1470,  0.0184,  0.1482,  0.1168,  0.1818,  0.1494,
         -0.5353,  0.0498, -0.1070,  0.0553,  0.2602, -0.0317, -0.2068, -0.1159,
         -0.2903,  0.1786,  0.0090, -0.0187,  0.6400,  0.2093, -0.3211, -0.1708]],
       device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
947000 特征值优化 tensor(0.6149, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 6.1238e-01,  3.5400e-01, -4.9486e-01, -6.2760e-01, -2.0244e-01,
          5.9623e-01,  2.8206e-01, -3.6112e-01, -3.6841e-01,  3.7845e-02,
         -9.4051e-01,  3.2949e-01,  9.1788e-02,  4.4043e-02,  3.0964e-01,
          1.5029e-02,  3.8530e-02, -2.3918e-01,  5.9697e-02,  9.6456e-02,
         -2.6403e-01, -7.9628e-02, -1.4836e-01,  6.2265e-02,  2.1751e-02,
         -2.4510e-02, -1.1511e-01,  1.7718e-01,  7.5660e-02,  4.1291e-02,
          1.4686e-01, -2.7074e-04, -3.8883e-02,  6.0044e-02, -3.2727e-02,
         -1.0439e-01, -1.4083e-01, -1.4565e-01,  1.5917e-01, -1.0324e-01,
         -1.1385e-01,  4.9207e-02, -6.3092e-01,  6.8214e-01, -3.9906e-01,
          8.8176e-02,  1.9306e-02,  6.4088e-02, -5.6296e-02,  3.6312e-01,
         -1.5052e-01,  2.0552e-02,  1.3594e-01,  1.1641e-01,  1.8472e-01,
          1.3631e-01, -5.2824e-01,  4.3066e-02, -1.0861e-01,  5.3285e-02,
          2.7409e-01, -3.1841e-02, -1.7943e-01, -1.2131e-01, -3.0063e-01,
          1.8328e-01, -3.8765e-03, -1.1864e-02,  6.2952e-01,  2.0410e-01,
         -3.3009e-01, -1.6613e-01]], device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
948000 特征值优化 tensor(0.6148, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.9883e-01,  3.7804e-01, -4.9004e-01, -6.2328e-01, -2.1801e-01,
          5.8470e-01,  3.2087e-01, -3.3694e-01, -4.1787e-01, -3.1090e-04,
         -9.1159e-01,  3.3367e-01,  9.0933e-02,  3.8386e-02,  2.7800e-01,
          7.5114e-02,  3.5441e-02, -1.3308e-01,  1.7422e-01,  9.5302e-02,
         -2.6370e-01, -7.9664e-02, -7.2685e-02,  1.6175e-01, -4.0344e-02,
          5.6230e-02, -1.9603e-01,  9.5259e-02, -9.3056e-03,  4.1222e-02,
          1.4518e-01, -9.7867e-03, -3.4569e-02,  5.1283e-02, -8.2729e-03,
         -9.6150e-02, -1.5351e-01, -1.4510e-01,  1.6058e-01, -1.0052e-01,
         -1.1019e-01,  5.8964e-02, -6.2475e-01,  6.8335e-01, -4.0106e-01,
          7.6449e-02,  1.7481e-02,  6.0113e-02, -5.5260e-02,  3.6349e-01,
         -1.5900e-01,  2.4115e-02,  1.6124e-01,  1.0353e-01,  1.1781e-01,
          2.0318e-01, -5.0193e-01,  4.6507e-02, -1.0451e-01,  5.1613e-02,
          2.3946e-01, -2.2583e-02, -2.0010e-01, -1.0250e-01, -2.9724e-01,
          1.8678e-01,  6.1623e-03, -1.8713e-02,  6.3943e-01,  2.1096e-01,
         -3.2323e-01, -1.7863e-01]], device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
949000 特征值优化 tensor(0.6151, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6115,  0.3537, -0.4959, -0.6231, -0.2106,  0.6137,  0.2766, -0.3418,
         -0.3722,  0.0127, -0.9471,  0.3270,  0.0923,  0.0375,  0.3131, -0.0191,
          0.0482, -0.2286,  0.0596,  0.0963, -0.2641, -0.0798, -0.0923,  0.1101,
          0.0126, -0.0112, -0.1482,  0.1560,  0.0820,  0.0415,  0.1467,  0.0049,
         -0.0381,  0.0563, -0.0324, -0.1017, -0.1360, -0.1434,  0.1511, -0.1074,
         -0.1173,  0.0594, -0.6307,  0.6828, -0.3990,  0.0878,  0.0191,  0.0645,
         -0.0524,  0.3602, -0.1575,  0.0233,  0.1387,  0.1174,  0.1967,  0.1426,
         -0.5332,  0.0490, -0.1000,  0.0628,  0.2809, -0.0324, -0.1902, -0.1252,
         -0.3055,  0.1846,  0.0203, -0.0305,  0.6290,  0.2010, -0.3247, -0.1707]],
       device='cuda:0') tensor(0.2014, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
950000 特征值优化 tensor(0.6099, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5858,  0.3662, -0.4860, -0.6288, -0.2141,  0.5340,  0.3040, -0.2787,
         -0.3655, -0.0024, -0.8872,  0.3241,  0.0905,  0.0340,  0.2930,  0.0636,
          0.0435, -0.0977,  0.1469,  0.0782, -0.2628, -0.0750, -0.1487,  0.1038,
         -0.0192,  0.0315, -0.1226,  0.1412, -0.0153,  0.0420,  0.1435,  0.0737,
         -0.0300,  0.0568, -0.0416, -0.0897, -0.1457, -0.1499,  0.1421, -0.1083,
         -0.1164,  0.0733, -0.6124,  0.6714, -0.4039,  0.1078, -0.0013,  0.0606,
         -0.0788,  0.3945, -0.1518,  0.0186,  0.1787,  0.0911,  0.1155,  0.2109,
         -0.4904,  0.0377, -0.0550,  0.0440,  0.2030,  0.0161, -0.2609, -0.0755,
         -0.2691,  0.1769, -0.0113, -0.0060,  0.6095,  0.2198, -0.3199, -0.1896]],
       device='cuda:0') tensor(0.2012, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
951000 特征值优化 tensor(0.6083, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5952,  0.3626, -0.4841, -0.6348, -0.2106,  0.5370,  0.3043, -0.2463,
         -0.3673,  0.0159, -0.8895,  0.3443,  0.0904,  0.0436,  0.3031,  0.0479,
          0.0283, -0.0598,  0.2125,  0.0752, -0.2639, -0.0745, -0.1157,  0.1337,
         -0.0206,  0.0283, -0.1195,  0.1400, -0.0345,  0.0416,  0.1448,  0.0822,
         -0.0218,  0.0536, -0.0418, -0.0856, -0.1457, -0.1485,  0.1443, -0.1109,
         -0.1164,  0.0728, -0.6161,  0.6722, -0.4039,  0.1133, -0.0021,  0.0603,
         -0.0758,  0.3915, -0.1534,  0.0208,  0.2074,  0.0789,  0.0826,  0.2221,
         -0.5023,  0.0498, -0.0473,  0.0210,  0.1598,  0.0348, -0.3079, -0.0619,
         -0.2830,  0.1781, -0.0152, -0.0093,  0.6335,  0.2075, -0.3001, -0.1950]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
952000 特征值优化 tensor(0.6104, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6025,  0.3665, -0.4947, -0.6426, -0.2078,  0.5377,  0.2741, -0.2169,
         -0.3480,  0.0465, -0.8737,  0.3120,  0.0917,  0.0342,  0.3021,  0.0410,
          0.0293, -0.0602,  0.2069,  0.0736, -0.2627, -0.0759, -0.1014,  0.1401,
         -0.0012,  0.0421, -0.1343,  0.1178, -0.0432,  0.0413,  0.1460,  0.0791,
         -0.0246,  0.0525, -0.0511, -0.0975, -0.1407, -0.1461,  0.1500, -0.1065,
         -0.1190,  0.0650, -0.6164,  0.6733, -0.4040,  0.1153, -0.0010,  0.0613,
         -0.0834,  0.3930, -0.1481,  0.0154,  0.1967,  0.0852,  0.0786,  0.2303,
         -0.4842,  0.0404, -0.0642,  0.0327,  0.1900,  0.0220, -0.3160, -0.0694,
         -0.2640,  0.1738, -0.0219, -0.0102,  0.6154,  0.2106, -0.3361, -0.1820]],
       device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
953000 特征值优化 tensor(0.6104, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.9449e-01,  4.1326e-01, -4.9667e-01, -6.3594e-01, -2.1524e-01,
          5.2613e-01,  3.1284e-01, -2.2758e-01, -3.4822e-01,  3.6973e-02,
         -8.8380e-01,  2.9155e-01,  9.1693e-02,  8.7086e-02,  2.5800e-01,
         -3.3717e-02,  3.8605e-02, -1.9148e-01,  1.3764e-01,  7.3408e-02,
         -2.6363e-01, -7.8694e-02, -1.2625e-01,  1.3046e-01,  4.7471e-02,
         -3.3940e-02, -8.2301e-02,  1.9285e-01,  1.9214e-02,  4.2589e-02,
          1.4144e-01,  8.5095e-02, -3.4919e-02,  6.2012e-02, -5.4639e-02,
         -1.0873e-01, -1.3724e-01, -1.4360e-01,  1.3396e-01, -1.0889e-01,
         -1.2246e-01,  7.9241e-02, -6.1256e-01,  6.7216e-01, -4.0311e-01,
          9.3797e-02,  2.2013e-04,  5.6965e-02, -6.4512e-02,  3.7536e-01,
         -1.8717e-01,  3.9271e-02,  2.0248e-01,  7.4745e-02,  1.4625e-01,
          1.7082e-01, -4.7958e-01,  2.4721e-02, -9.6588e-02,  5.3160e-02,
          2.3180e-01,  3.9012e-02, -2.9118e-01, -1.1101e-01, -2.3916e-01,
          1.6943e-01, -1.1155e-02, -2.2573e-02,  5.6925e-01,  2.0855e-01,
         -3.5456e-01, -1.6699e-01]], device='cuda:0') tensor(0.2018, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
954000 特征值优化 tensor(0.6114, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5992,  0.3621, -0.5020, -0.6380, -0.2008,  0.5309,  0.2664, -0.1701,
         -0.3711,  0.0310, -0.8549,  0.3262,  0.0923,  0.0265,  0.2861,  0.0438,
          0.0212, -0.0625,  0.2060,  0.0731, -0.2631, -0.0791, -0.0697,  0.1525,
         -0.0059,  0.0537, -0.1326,  0.1340, -0.0617,  0.0431,  0.1464,  0.0806,
         -0.0299,  0.0541, -0.0360, -0.0935, -0.1339, -0.1453,  0.1359, -0.1116,
         -0.1260,  0.0796, -0.6143,  0.6713, -0.4038,  0.1197, -0.0019,  0.0620,
         -0.0643,  0.3724, -0.1681,  0.0298,  0.2012,  0.0820,  0.0668,  0.2422,
         -0.4653,  0.0299, -0.0487,  0.0817,  0.2105,  0.0266, -0.3268, -0.0804,
         -0.2790,  0.1787, -0.0213, -0.0189,  0.5850,  0.2139, -0.3241, -0.1810]],
       device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
955000 特征值优化 tensor(0.6100, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6018,  0.3640, -0.4904, -0.6228, -0.2032,  0.5267,  0.3245, -0.1689,
         -0.3511,  0.0282, -0.9143,  0.3224,  0.0896,  0.0395,  0.3118,  0.0354,
          0.0279, -0.0744,  0.2128,  0.0739, -0.2631, -0.0763, -0.1171,  0.1039,
         -0.0249,  0.0582, -0.1680,  0.1068, -0.0233,  0.0444,  0.1457,  0.0795,
         -0.0308,  0.0545, -0.0396, -0.0951, -0.1222, -0.1448,  0.1341, -0.1115,
         -0.1382,  0.0815, -0.6165,  0.6731, -0.4038,  0.1131, -0.0045,  0.0583,
         -0.0794,  0.3896, -0.1432,  0.0130,  0.1999,  0.0826,  0.0777,  0.2316,
         -0.4573,  0.0245, -0.0485,  0.0850,  0.2113,  0.0398, -0.3224, -0.0822,
         -0.2854,  0.1822, -0.0254, -0.0152,  0.5864,  0.1988, -0.3337, -0.1778]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
956000 特征值优化 tensor(0.6087, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.9009e-01,  3.9033e-01, -4.8769e-01, -6.1946e-01, -2.2433e-01,
          5.3374e-01,  3.2157e-01, -1.4466e-01, -3.7113e-01,  4.1371e-02,
         -9.2011e-01,  3.2878e-01,  9.2244e-02,  4.8618e-02,  2.9866e-01,
          5.1746e-02,  3.5282e-02, -8.5375e-02,  2.1173e-01,  7.4020e-02,
         -2.6231e-01, -7.8526e-02, -8.1687e-02,  1.3789e-01, -4.4192e-02,
          5.1943e-02, -1.6357e-01,  1.3108e-01, -4.0250e-02,  4.2534e-02,
          1.4105e-01,  7.9789e-02, -2.9675e-02,  5.1851e-02, -3.2935e-02,
         -9.7143e-02, -1.1881e-01, -1.4445e-01,  1.3316e-01, -1.1194e-01,
         -1.4574e-01,  8.2069e-02, -6.0997e-01,  6.7282e-01, -4.0292e-01,
          1.0481e-01, -5.9122e-04,  4.9080e-02, -6.5753e-02,  3.7911e-01,
         -1.7034e-01,  2.6750e-02,  2.0261e-01,  7.6980e-02,  8.1813e-02,
          2.3129e-01, -4.4626e-01,  1.7449e-02, -3.7723e-02,  8.8535e-02,
          2.2209e-01,  4.2064e-02, -3.4116e-01, -8.0800e-02, -2.8061e-01,
          1.8086e-01, -3.4103e-02, -1.5468e-02,  5.7371e-01,  1.9583e-01,
         -3.4631e-01, -1.7146e-01]], device='cuda:0') tensor(0.2015, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
957000 特征值优化 tensor(0.6085, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5988,  0.3688, -0.4971, -0.6347, -0.2096,  0.5277,  0.3111, -0.1237,
         -0.3508,  0.0378, -0.9042,  0.3055,  0.0909,  0.0266,  0.2990,  0.0368,
          0.0344, -0.0708,  0.2100,  0.0765, -0.2613, -0.0781, -0.0747,  0.1436,
         -0.0387,  0.0649, -0.1491,  0.1407, -0.0481,  0.0430,  0.1444,  0.0781,
         -0.0307,  0.0525, -0.0356, -0.0979, -0.1143, -0.1442,  0.1297, -0.1124,
         -0.1465,  0.0847, -0.6156,  0.6768, -0.4014,  0.1129, -0.0017,  0.0569,
         -0.0683,  0.3784, -0.1587,  0.0227,  0.1984,  0.0822,  0.0515,  0.2357,
         -0.4394,  0.0154, -0.0305,  0.0942,  0.2385,  0.0389, -0.3483, -0.0828,
         -0.2901,  0.1847, -0.0403, -0.0132,  0.5615,  0.1987, -0.3419, -0.1737]],
       device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
958000 特征值优化 tensor(0.6075, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6083,  0.3721, -0.4995, -0.6331, -0.2119,  0.5296,  0.3118, -0.1095,
         -0.3423,  0.0473, -0.9171,  0.3080,  0.0905,  0.0483,  0.3146,  0.0152,
          0.0248, -0.0637,  0.2364,  0.0753, -0.2609, -0.0781, -0.0743,  0.1382,
         -0.0296,  0.0588, -0.1315,  0.1599, -0.0481,  0.0433,  0.1428,  0.0790,
         -0.0334,  0.0528, -0.0333, -0.0973, -0.1120, -0.1429,  0.1281, -0.1127,
         -0.1524,  0.0874, -0.6178,  0.6769, -0.4020,  0.1113, -0.0025,  0.0583,
         -0.0709,  0.3787, -0.1543,  0.0202,  0.1974,  0.0799,  0.0434,  0.2413,
         -0.4451,  0.0186, -0.0295,  0.0950,  0.2475,  0.0418, -0.3438, -0.0873,
         -0.2949,  0.1850, -0.0411, -0.0175,  0.5536,  0.1937, -0.3374, -0.1753]],
       device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
959000 特征值优化 tensor(0.6085, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6043,  0.3623, -0.4986, -0.6361, -0.2043,  0.5187,  0.3230, -0.0931,
         -0.3074,  0.0517, -0.9198,  0.2615,  0.0915,  0.0304,  0.2941,  0.0143,
          0.0226, -0.0548,  0.2259,  0.0739, -0.2622, -0.0783, -0.0808,  0.1539,
         -0.0204,  0.0441, -0.1367,  0.1342, -0.0574,  0.0427,  0.1462,  0.0754,
         -0.0335,  0.0551, -0.0378, -0.0993, -0.1077, -0.1450,  0.1295, -0.1099,
         -0.1525,  0.0845, -0.6165,  0.6740, -0.4034,  0.1181, -0.0013,  0.0581,
         -0.0634,  0.3731, -0.1685,  0.0298,  0.1961,  0.0855,  0.0391,  0.2414,
         -0.4400,  0.0137, -0.0390,  0.0934,  0.2571,  0.0419, -0.3546, -0.0863,
         -0.2960,  0.1918, -0.0409, -0.0147,  0.5447,  0.1914, -0.3323, -0.1790]],
       device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
960000 特征值优化 tensor(0.6098, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6049,  0.3581, -0.5012, -0.6351, -0.2046,  0.5289,  0.3360, -0.0807,
         -0.3498,  0.0183, -0.9051,  0.3148,  0.0916,  0.0154,  0.2911,  0.0379,
          0.0258, -0.0593,  0.2209,  0.0736, -0.2621, -0.0779, -0.1143,  0.1051,
          0.0061,  0.0740, -0.1283,  0.1382, -0.0430,  0.0432,  0.1474,  0.0749,
         -0.0329,  0.0531, -0.0302, -0.0963, -0.1038, -0.1418,  0.1254, -0.1141,
         -0.1589,  0.0893, -0.6167,  0.6736, -0.4036,  0.1197, -0.0015,  0.0612,
         -0.0741,  0.3801, -0.1491,  0.0177,  0.1985,  0.0856,  0.0413,  0.2400,
         -0.4478,  0.0198, -0.0250,  0.0959,  0.2593,  0.0432, -0.3632, -0.0862,
         -0.2976,  0.1859, -0.0215, -0.0220,  0.5362,  0.1948, -0.3318, -0.1770]],
       device='cuda:0') tensor(0.2016, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
961000 特征值优化 tensor(0.6075, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 6.0037e-01,  3.6964e-01, -4.9855e-01, -6.2298e-01, -2.1905e-01,
          5.1289e-01,  3.4179e-01, -5.8665e-02, -3.5514e-01,  2.8454e-02,
         -9.4075e-01,  3.3078e-01,  9.0255e-02,  5.2164e-02,  3.1004e-01,
         -4.8275e-04,  2.2821e-02, -7.1392e-02,  2.2786e-01,  7.6221e-02,
         -2.6096e-01, -7.7435e-02, -1.4639e-01,  8.4464e-02, -2.1951e-02,
          3.9401e-02, -1.3257e-01,  1.4645e-01, -3.8918e-02,  4.3620e-02,
          1.4113e-01,  7.9325e-02, -3.6275e-02,  5.8311e-02, -3.2593e-02,
         -9.5299e-02, -9.9847e-02, -1.4312e-01,  1.2178e-01, -1.1408e-01,
         -1.6241e-01,  9.3677e-02, -6.1586e-01,  6.7737e-01, -4.0201e-01,
          1.1145e-01, -2.8584e-03,  5.9009e-02, -7.8145e-02,  3.8713e-01,
         -1.5066e-01,  1.7568e-02,  2.0195e-01,  7.5633e-02,  5.0326e-02,
          2.3836e-01, -4.6062e-01,  2.1874e-02, -3.4609e-02,  7.9849e-02,
          2.6620e-01,  5.7961e-02, -3.5426e-01, -8.9569e-02, -2.8381e-01,
          1.8129e-01, -1.8481e-02, -2.9045e-02,  5.3075e-01,  1.8229e-01,
         -3.3454e-01, -1.7731e-01]], device='cuda:0') tensor(0.2071, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
962000 特征值优化 tensor(0.6117, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5896,  0.3560, -0.5040, -0.6347, -0.2236,  0.5246,  0.3431, -0.0486,
         -0.3466,  0.0184, -0.9032,  0.3103,  0.0929,  0.0272,  0.3019,  0.0111,
          0.0469, -0.0789,  0.1930,  0.0732, -0.2609, -0.0777, -0.1292,  0.1246,
         -0.0045,  0.0615, -0.1145,  0.1406, -0.0473,  0.0433,  0.1431,  0.0739,
         -0.0352,  0.0549, -0.0345, -0.0947, -0.1025, -0.1451,  0.1269, -0.1133,
         -0.1618,  0.0893, -0.6110,  0.6706, -0.4047,  0.1193, -0.0033,  0.0629,
         -0.0746,  0.3809, -0.1519,  0.0193,  0.2014,  0.0806,  0.0534,  0.2377,
         -0.4558,  0.0234, -0.0358,  0.0922,  0.2680,  0.0497, -0.3653, -0.0885,
         -0.2964,  0.1853, -0.0207, -0.0211,  0.5229,  0.1917, -0.3245, -0.1820]],
       device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
963000 特征值优化 tensor(0.6061, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6067,  0.3709, -0.4961, -0.6360, -0.2199,  0.5250,  0.3396, -0.0631,
         -0.3517,  0.0308, -0.9398,  0.3363,  0.0900,  0.0406,  0.3209,  0.0102,
          0.0259, -0.0595,  0.2408,  0.0767, -0.2606, -0.0780, -0.1241,  0.1183,
         -0.0158,  0.0340, -0.1282,  0.1331, -0.0613,  0.0426,  0.1411,  0.0774,
         -0.0357,  0.0558, -0.0369, -0.0922, -0.0997, -0.1439,  0.1300, -0.1124,
         -0.1648,  0.0858, -0.6181,  0.6784, -0.4016,  0.1096, -0.0023,  0.0578,
         -0.0654,  0.3769, -0.1678,  0.0291,  0.1979,  0.0782,  0.0240,  0.2425,
         -0.4715,  0.0305, -0.0366,  0.0766,  0.2735,  0.0555, -0.3576, -0.0893,
         -0.2858,  0.1832, -0.0319, -0.0164,  0.5298,  0.1831, -0.3295, -0.1838]],
       device='cuda:0') tensor(0.2003, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
964000 特征值优化 tensor(0.6074, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6028,  0.3635, -0.4933, -0.6307, -0.2204,  0.5108,  0.3351, -0.0477,
         -0.3455,  0.0242, -0.9254,  0.3158,  0.0883,  0.0238,  0.3263,  0.0333,
          0.0401, -0.0748,  0.2211,  0.0766, -0.2616, -0.0761, -0.1752,  0.0727,
         -0.0129,  0.0469, -0.1129,  0.1373, -0.0465,  0.0441,  0.1413,  0.0777,
         -0.0363,  0.0581, -0.0352, -0.0939, -0.0977, -0.1403,  0.1299, -0.1124,
         -0.1670,  0.0857, -0.6174,  0.6776, -0.4029,  0.1099, -0.0046,  0.0596,
         -0.0705,  0.3818, -0.1565,  0.0226,  0.1985,  0.0781,  0.0284,  0.2441,
         -0.4570,  0.0206, -0.0355,  0.0802,  0.2770,  0.0546, -0.3592, -0.0931,
         -0.2871,  0.1864, -0.0290, -0.0140,  0.5198,  0.1851, -0.3309, -0.1814]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
965000 特征值优化 tensor(0.6081, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.8285e-01,  3.9129e-01, -4.9775e-01, -6.2921e-01, -2.3922e-01,
          5.2328e-01,  3.5841e-01, -4.5886e-02, -3.5127e-01,  3.3522e-02,
         -9.2104e-01,  3.2752e-01,  9.0240e-02,  5.6829e-02,  2.6262e-01,
         -4.7655e-03,  4.1085e-02, -9.1352e-02,  2.2036e-01,  7.5411e-02,
         -2.6511e-01, -7.6129e-02, -1.4317e-01,  9.4957e-02, -3.0921e-02,
          2.3192e-02, -1.3407e-01,  1.6613e-01, -4.9137e-02,  4.3957e-02,
          1.3979e-01,  7.7102e-02, -3.5607e-02,  5.7560e-02, -3.8631e-02,
         -9.4133e-02, -1.0193e-01, -1.4290e-01,  1.2675e-01, -1.1252e-01,
         -1.6197e-01,  8.8604e-02, -6.1039e-01,  6.7308e-01, -4.0441e-01,
          1.0143e-01, -7.0545e-05,  6.0760e-02, -6.9438e-02,  3.8119e-01,
         -1.5883e-01,  2.4996e-02,  2.1068e-01,  7.3843e-02,  2.3861e-02,
          2.4153e-01, -4.7459e-01,  2.9812e-02, -4.8079e-02,  6.9488e-02,
          2.6230e-01,  5.9843e-02, -3.6774e-01, -9.0599e-02, -2.8047e-01,
          1.7990e-01, -2.2899e-02, -2.4843e-02,  5.1756e-01,  1.8707e-01,
         -3.2781e-01, -1.8137e-01]], device='cuda:0') tensor(0.2037, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
966000 特征值优化 tensor(0.6093, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5962,  0.3807, -0.4985, -0.6245, -0.2178,  0.5313,  0.3347, -0.0544,
         -0.3725,  0.0070, -0.9223,  0.3373,  0.0927,  0.0347,  0.2925,  0.0183,
          0.0217, -0.0861,  0.2019,  0.0752, -0.2622, -0.0784, -0.1346,  0.1211,
         -0.0345,  0.0832, -0.1248,  0.1336, -0.0433,  0.0425,  0.1431,  0.0761,
         -0.0357,  0.0539, -0.0315, -0.0916, -0.0950, -0.1399,  0.1263, -0.1138,
         -0.1670,  0.0877, -0.6160,  0.6719, -0.3995,  0.1108, -0.0022,  0.0602,
         -0.0731,  0.3819, -0.1556,  0.0203,  0.2038,  0.0787,  0.0577,  0.2368,
         -0.4664,  0.0303, -0.0331,  0.0897,  0.2797,  0.0516, -0.3660, -0.0930,
         -0.2891,  0.1808, -0.0122, -0.0238,  0.5151,  0.1866, -0.3215, -0.1829]],
       device='cuda:0') tensor(0.2006, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
967000 特征值优化 tensor(0.6068, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5965,  0.3813, -0.4912, -0.6251, -0.2163,  0.5095,  0.3554, -0.0348,
         -0.3408,  0.0148, -0.9569,  0.3138,  0.0884,  0.0451,  0.3059,  0.0289,
          0.0336, -0.0965,  0.2196,  0.0754, -0.2621, -0.0766, -0.1724,  0.0728,
         -0.0177,  0.0453, -0.1167,  0.1398, -0.0355,  0.0439,  0.1411,  0.0796,
         -0.0386,  0.0581, -0.0369, -0.0955, -0.0934, -0.1388,  0.1302, -0.1108,
         -0.1736,  0.0845, -0.6135,  0.6765, -0.4026,  0.1026, -0.0045,  0.0603,
         -0.0762,  0.3885, -0.1510,  0.0195,  0.2003,  0.0760,  0.0406,  0.2356,
         -0.4543,  0.0182, -0.0454,  0.0757,  0.2815,  0.0661, -0.3544, -0.0942,
         -0.2818,  0.1860, -0.0227, -0.0142,  0.5192,  0.1766, -0.3388, -0.1794]],
       device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
968000 特征值优化 tensor(0.6087, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5875,  0.3777, -0.4930, -0.6299, -0.2097,  0.5371,  0.3412, -0.0194,
         -0.3680,  0.0362, -0.9379,  0.3489,  0.0915,  0.0583,  0.3034,  0.0146,
          0.0227, -0.0815,  0.2100,  0.0739, -0.2642, -0.0763, -0.1324,  0.1152,
         -0.0109,  0.0338, -0.1066,  0.1540, -0.0412,  0.0444,  0.1428,  0.0841,
         -0.0404,  0.0538, -0.0410, -0.0902, -0.0907, -0.1391,  0.1328, -0.1130,
         -0.1713,  0.0823, -0.6123,  0.6703, -0.4049,  0.1071, -0.0022,  0.0585,
         -0.0707,  0.3831, -0.1557,  0.0228,  0.2130,  0.0706,  0.0443,  0.2398,
         -0.4842,  0.0400, -0.0442,  0.0708,  0.2768,  0.0713, -0.3602, -0.0965,
         -0.2831,  0.1770, -0.0303, -0.0171,  0.5067,  0.1774, -0.3199, -0.1854]],
       device='cuda:0') tensor(0.2082, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
969000 特征值优化 tensor(0.6115, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6020,  0.3724, -0.5003, -0.6252, -0.2067,  0.5293,  0.3224, -0.0024,
         -0.3511,  0.0630, -0.9209,  0.3056,  0.0922,  0.0397,  0.2794, -0.0043,
          0.0167, -0.0726,  0.2109,  0.0764, -0.2628, -0.0779, -0.0840,  0.1560,
         -0.0085,  0.0321, -0.1412,  0.1328, -0.0267,  0.0434,  0.1447,  0.0772,
         -0.0405,  0.0547, -0.0447, -0.0958, -0.0916, -0.1410,  0.1381, -0.1106,
         -0.1719,  0.0751, -0.6187,  0.6727, -0.3974,  0.1162, -0.0014,  0.0589,
         -0.0756,  0.3827, -0.1504,  0.0159,  0.2050,  0.0787,  0.0556,  0.2421,
         -0.4689,  0.0307, -0.0459,  0.0792,  0.3012,  0.0609, -0.3683, -0.0985,
         -0.2754,  0.1765, -0.0453, -0.0136,  0.4920,  0.1783, -0.3227, -0.1798]],
       device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
970000 特征值优化 tensor(0.6137, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5809,  0.3639, -0.4939, -0.6197, -0.2240,  0.5435,  0.3337,  0.0046,
         -0.4384,  0.0641, -0.8923,  0.3699,  0.0918,  0.0243,  0.2794,  0.0252,
          0.0501, -0.0989,  0.1879,  0.0730, -0.2636, -0.0767, -0.0911,  0.1271,
         -0.0127,  0.0429, -0.1479,  0.1429, -0.0276,  0.0445,  0.1412,  0.0742,
         -0.0403,  0.0543, -0.0416, -0.0929, -0.0930, -0.1412,  0.1380, -0.1146,
         -0.1710,  0.0781, -0.6096,  0.6739, -0.4110,  0.1149, -0.0026,  0.0582,
         -0.0740,  0.3844, -0.1526,  0.0177,  0.2057,  0.0754,  0.0506,  0.2367,
         -0.4967,  0.0482, -0.0379,  0.0815,  0.2950,  0.0610, -0.3703, -0.0979,
         -0.2692,  0.1512, -0.0301, -0.0373,  0.4905,  0.1856, -0.3101, -0.1754]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
971000 特征值优化 tensor(0.6153, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5756,  0.3648, -0.4954, -0.6223, -0.2007,  0.5285,  0.3152,  0.0145,
         -0.3796,  0.0385, -0.8672,  0.3482,  0.0923,  0.0407,  0.2785,  0.0103,
          0.0141, -0.1004,  0.1712,  0.0738, -0.2631, -0.0769, -0.0919,  0.1202,
         -0.0021,  0.0337, -0.1615,  0.1371, -0.0280,  0.0447,  0.1471,  0.0752,
         -0.0424,  0.0547, -0.0374, -0.0984, -0.0890, -0.1453,  0.1253, -0.1145,
         -0.1711,  0.0904, -0.6082,  0.6690, -0.4071,  0.1129, -0.0034,  0.0599,
         -0.0819,  0.3910, -0.1418,  0.0136,  0.2037,  0.0819,  0.0693,  0.2322,
         -0.4633,  0.0281, -0.0477,  0.0865,  0.3139,  0.0610, -0.3605, -0.1033,
         -0.2807,  0.1696, -0.0098, -0.0375,  0.4745,  0.1868, -0.3318, -0.1692]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
972000 特征值优化 tensor(0.6162, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5867,  0.3685, -0.4852, -0.6180, -0.2129,  0.5029,  0.3189,  0.0283,
         -0.3619,  0.0529, -0.8908,  0.2879,  0.0937,  0.0539,  0.2614, -0.0204,
          0.0172, -0.1437,  0.1406,  0.0764, -0.2637, -0.0789, -0.1209,  0.1252,
          0.0653, -0.0350, -0.1158,  0.1510, -0.0133,  0.0426,  0.1437,  0.0748,
         -0.0501,  0.0646, -0.0442, -0.1031, -0.0877, -0.1352,  0.1244, -0.1142,
         -0.1689,  0.0861, -0.6143,  0.6693, -0.3970,  0.1185, -0.0025,  0.0551,
         -0.0796,  0.3905, -0.1539,  0.0181,  0.2066,  0.0742,  0.0911,  0.2253,
         -0.4690,  0.0248, -0.0975,  0.0501,  0.3466,  0.0742, -0.3398, -0.1310,
         -0.2554,  0.1687, -0.0094, -0.0369,  0.4448,  0.1735, -0.3293, -0.1721]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
973000 特征值优化 tensor(0.6165, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5936,  0.3666, -0.4851, -0.6124, -0.2062,  0.5373,  0.3331,  0.0404,
         -0.3662,  0.0882, -0.9049,  0.2800,  0.0929,  0.0517,  0.2615, -0.0197,
          0.0084, -0.1469,  0.1479,  0.0771, -0.2641, -0.0787, -0.1217,  0.1185,
          0.0514, -0.0244, -0.1163,  0.1548, -0.0133,  0.0427,  0.1446,  0.0715,
         -0.0539,  0.0590, -0.0387, -0.1014, -0.0857, -0.1355,  0.1221, -0.1140,
         -0.1733,  0.0904, -0.6171,  0.6701, -0.3958,  0.1197, -0.0017,  0.0516,
         -0.0816,  0.3920, -0.1564,  0.0172,  0.2002,  0.0786,  0.0850,  0.2340,
         -0.4768,  0.0298, -0.0933,  0.0434,  0.3520,  0.0766, -0.3359, -0.1327,
         -0.2581,  0.1685, -0.0341, -0.0375,  0.4418,  0.1696, -0.3210, -0.1764]],
       device='cuda:0') tensor(0.2004, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
974000 特征值优化 tensor(0.6130, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5881,  0.3796, -0.4931, -0.6212, -0.2190,  0.5214,  0.2987,  0.0598,
         -0.3458,  0.0425, -0.8826,  0.3096,  0.0936,  0.0566,  0.2953, -0.0063,
          0.0188, -0.0751,  0.2183,  0.0725, -0.2622, -0.0777, -0.0871,  0.1289,
         -0.0430,  0.0919, -0.1759,  0.1142, -0.0375,  0.0433,  0.1406,  0.0785,
         -0.0467,  0.0542, -0.0356, -0.1000, -0.0874, -0.1413,  0.1203, -0.1127,
         -0.1744,  0.0948, -0.6109,  0.6687, -0.4053,  0.1095, -0.0018,  0.0553,
         -0.0805,  0.3876, -0.1431,  0.0113,  0.2126,  0.0698,  0.0427,  0.2429,
         -0.4454,  0.0169, -0.0396,  0.0894,  0.3254,  0.0763, -0.3660, -0.1088,
         -0.2816,  0.1812, -0.0219, -0.0323,  0.4564,  0.1750, -0.3449, -0.1713]],
       device='cuda:0') tensor(0.2062, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
975000 特征值优化 tensor(0.6104, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5915,  0.4052, -0.4940, -0.6288, -0.2299,  0.5276,  0.3243,  0.0499,
         -0.3662,  0.0440, -0.8943,  0.3175,  0.0914,  0.0775,  0.2553, -0.0595,
          0.0635, -0.1169,  0.2171,  0.0748, -0.2639, -0.0772, -0.1349,  0.1289,
         -0.0434,  0.0605, -0.1709,  0.1012, -0.0374,  0.0426,  0.1395,  0.0745,
         -0.0408,  0.0520, -0.0325, -0.1003, -0.0878, -0.1396,  0.1185, -0.1129,
         -0.1757,  0.0970, -0.6118,  0.6732, -0.4036,  0.0974,  0.0012,  0.0550,
         -0.0727,  0.3812, -0.1524,  0.0174,  0.2007,  0.0771,  0.0394,  0.2353,
         -0.4346,  0.0132, -0.0337,  0.0908,  0.3236,  0.0641, -0.3792, -0.1006,
         -0.2787,  0.1792, -0.0288, -0.0314,  0.4645,  0.1787, -0.3557, -0.1671]],
       device='cuda:0') tensor(0.2043, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
976000 特征值优化 tensor(0.6135, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5822,  0.3708, -0.4911, -0.6216, -0.2180,  0.5186,  0.3620,  0.0200,
         -0.3393,  0.0655, -0.9264,  0.2953,  0.0927,  0.0626,  0.2636,  0.0213,
         -0.0092, -0.1488,  0.1394,  0.0748, -0.2635, -0.0788, -0.1276,  0.1121,
          0.0497,  0.0033, -0.1266,  0.1506,  0.0106,  0.0426,  0.1444,  0.0771,
         -0.0488,  0.0582, -0.0295, -0.1016, -0.0872, -0.1355,  0.1091, -0.1138,
         -0.1733,  0.1039, -0.6090,  0.6711, -0.4010,  0.1164, -0.0015,  0.0557,
         -0.0799,  0.3886, -0.1503,  0.0174,  0.2085,  0.0748,  0.1118,  0.2070,
         -0.4410,  0.0127, -0.0956,  0.0420,  0.3271,  0.0828, -0.3427, -0.1252,
         -0.2854,  0.1801, -0.0259, -0.0454,  0.4653,  0.1672, -0.3459, -0.1683]],
       device='cuda:0') tensor(0.2039, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
977000 特征值优化 tensor(0.6090, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.8010e-01,  3.8692e-01, -4.9716e-01, -6.3656e-01, -2.2009e-01,
          5.1657e-01,  4.0548e-01, -1.0192e-02, -3.2109e-01,  4.0205e-02,
         -9.7143e-01,  2.8270e-01,  9.1518e-02,  8.0611e-02,  2.8143e-01,
          1.0168e-02, -1.8307e-02, -2.1309e-01,  9.5713e-02,  7.3477e-02,
         -2.6375e-01, -7.8192e-02, -1.5036e-01,  7.5552e-02,  7.4285e-02,
         -9.8067e-03, -1.4868e-01,  1.5283e-01,  3.7019e-02,  4.2439e-02,
          1.4146e-01,  7.4882e-02, -4.7817e-02,  5.6864e-02, -3.1855e-02,
         -1.0552e-01, -8.2908e-02, -1.3750e-01,  1.0143e-01, -1.1056e-01,
         -1.7765e-01,  1.1476e-01, -6.0439e-01,  6.7313e-01, -4.0373e-01,
          1.0731e-01, -2.8458e-04,  5.6482e-02, -6.8755e-02,  3.7950e-01,
         -1.6694e-01,  2.8694e-02,  1.9632e-01,  7.8204e-02,  1.3134e-01,
          1.7956e-01, -4.2890e-01,  6.1103e-03, -1.0080e-01,  4.0993e-02,
          3.1893e-01,  8.5293e-02, -3.3196e-01, -1.2048e-01, -2.8020e-01,
          1.8069e-01, -9.5451e-03, -5.7460e-02,  4.8154e-01,  1.6087e-01,
         -3.6387e-01, -1.6202e-01]], device='cuda:0') tensor(0.2010, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
978000 特征值优化 tensor(0.6095, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.9183e-01,  3.9505e-01, -4.8580e-01, -6.2664e-01, -2.1917e-01,
          4.9042e-01,  3.9129e-01, -2.2975e-02, -3.6101e-01,  8.0587e-02,
         -9.8451e-01,  2.8597e-01,  9.2846e-02,  7.5415e-02,  2.7829e-01,
         -5.5230e-02, -4.1745e-03, -2.0823e-01,  1.1167e-01,  7.3974e-02,
         -2.6245e-01, -7.8338e-02, -1.0260e-01,  1.4384e-01,  9.0579e-02,
         -2.7660e-02, -7.5109e-02,  1.8830e-01,  4.2120e-02,  4.2386e-02,
          1.4106e-01,  6.9865e-02, -4.7227e-02,  6.3543e-02, -3.2436e-02,
         -1.0621e-01, -8.4034e-02, -1.3616e-01,  1.0908e-01, -1.1374e-01,
         -1.7923e-01,  1.0272e-01, -6.1069e-01,  6.7271e-01, -4.0002e-01,
          1.0610e-01, -5.5509e-04,  5.2013e-02, -6.5813e-02,  3.7877e-01,
         -1.7551e-01,  3.0404e-02,  1.8530e-01,  8.4121e-02,  1.3695e-01,
          1.7639e-01, -4.2599e-01, -2.7020e-04, -9.8634e-02,  4.9570e-02,
          3.3370e-01,  7.2744e-02, -3.3683e-01, -1.2190e-01, -2.6575e-01,
          1.7382e-01, -2.7216e-02, -4.7651e-02,  4.8248e-01,  1.5803e-01,
         -3.5383e-01, -1.5896e-01]], device='cuda:0') tensor(0.2072, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
979000 特征值优化 tensor(0.6111, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.7551e-01,  3.8598e-01, -4.9213e-01, -6.3830e-01, -2.1790e-01,
          5.0147e-01,  3.3814e-01, -8.7112e-04, -3.0595e-01,  7.6787e-02,
         -9.0658e-01,  2.6681e-01,  9.2451e-02,  7.9080e-02,  2.7778e-01,
         -3.9915e-02,  1.1781e-03, -1.9640e-01,  1.1262e-01,  7.2831e-02,
         -2.6295e-01, -7.8967e-02, -1.4146e-01,  1.1564e-01,  6.7099e-02,
          6.6247e-03, -1.3497e-01,  1.2323e-01,  1.6049e-02,  4.2727e-02,
          1.4249e-01,  7.7121e-02, -4.9238e-02,  6.0058e-02, -3.3285e-02,
         -1.0798e-01, -8.9657e-02, -1.3918e-01,  1.0330e-01, -1.1046e-01,
         -1.6850e-01,  1.0858e-01, -6.0216e-01,  6.7121e-01, -4.0443e-01,
          1.0902e-01, -4.0638e-04,  5.5086e-02, -7.2543e-02,  3.8311e-01,
         -1.6815e-01,  2.9735e-02,  2.0366e-01,  7.4116e-02,  1.1843e-01,
          1.9094e-01, -4.2201e-01,  3.2504e-04, -9.9182e-02,  5.4228e-02,
          3.3941e-01,  7.7960e-02, -3.3813e-01, -1.3011e-01, -2.8385e-01,
          1.8071e-01, -3.3138e-02, -5.1672e-02,  4.5810e-01,  1.7082e-01,
         -3.6135e-01, -1.6130e-01]], device='cuda:0') tensor(0.2044, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
980000 特征值优化 tensor(0.6094, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.7884e-01,  3.8583e-01, -4.8813e-01, -6.4067e-01, -2.1979e-01,
          5.1777e-01,  3.8494e-01,  1.3878e-02, -3.2339e-01,  8.1705e-02,
         -9.7820e-01,  2.9235e-01,  9.1883e-02,  7.9329e-02,  2.7582e-01,
         -1.9719e-02, -1.5079e-03, -1.8745e-01,  1.1297e-01,  7.4863e-02,
         -2.6348e-01, -7.6146e-02, -1.2322e-01,  1.1048e-01,  5.5864e-02,
          2.0443e-02, -1.2127e-01,  1.4613e-01,  2.1440e-02,  4.0111e-02,
          1.4253e-01,  7.4040e-02, -4.9970e-02,  5.5074e-02, -2.6181e-02,
         -1.0439e-01, -7.9450e-02, -1.3451e-01,  1.0052e-01, -1.1342e-01,
         -1.7942e-01,  1.1299e-01, -6.0578e-01,  6.7334e-01, -4.0281e-01,
          1.0781e-01,  8.4622e-04,  5.7561e-02, -7.8163e-02,  3.9232e-01,
         -1.5530e-01,  1.9418e-02,  1.9940e-01,  7.7132e-02,  1.1623e-01,
          1.9461e-01, -4.3150e-01,  7.3278e-03, -6.5973e-02,  2.7505e-02,
          3.3589e-01,  8.6759e-02, -3.3504e-01, -1.2574e-01, -2.9154e-01,
          1.7829e-01, -2.7046e-02, -5.7084e-02,  4.7365e-01,  1.5523e-01,
         -3.5555e-01, -1.6176e-01]], device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
981000 特征值优化 tensor(0.6074, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.8411e-01,  3.7907e-01, -4.9281e-01, -6.5009e-01, -2.1523e-01,
          5.1181e-01,  3.9445e-01,  5.8845e-03, -3.1321e-01,  8.7338e-02,
         -9.6527e-01,  2.8170e-01,  9.0506e-02,  6.8961e-02,  2.9219e-01,
         -4.6526e-02, -1.6594e-02, -2.3632e-01,  7.9303e-02,  7.4821e-02,
         -2.6281e-01, -7.5786e-02, -1.2685e-01,  1.0034e-01,  7.1381e-02,
         -1.4781e-02, -1.2511e-01,  1.5587e-01,  4.7264e-02,  3.9705e-02,
          1.4275e-01,  7.1333e-02, -5.1900e-02,  5.6651e-02, -2.7985e-02,
         -1.0548e-01, -7.6796e-02, -1.3048e-01,  9.7730e-02, -1.1005e-01,
         -1.8500e-01,  1.1686e-01, -6.0614e-01,  6.7611e-01, -4.0281e-01,
          1.0911e-01, -7.4658e-04,  6.0153e-02, -6.5905e-02,  3.8175e-01,
         -1.6986e-01,  2.8960e-02,  1.9062e-01,  8.0914e-02,  1.3085e-01,
          1.8284e-01, -4.3328e-01,  7.2216e-03, -8.3584e-02,  3.3774e-02,
          3.4827e-01,  8.5906e-02, -3.3022e-01, -1.2895e-01, -2.8357e-01,
          1.7702e-01, -2.3167e-02, -6.3394e-02,  4.6218e-01,  1.5563e-01,
         -3.6131e-01, -1.6051e-01]], device='cuda:0') tensor(0.2019, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
982000 特征值优化 tensor(0.6659, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5820,  0.3713, -0.4730, -0.6377, -0.2104,  0.5001,  0.4415,  0.0058,
         -0.3169,  0.1028, -0.9999,  0.2818,  0.0890,  0.0719,  0.2796, -0.0429,
         -0.0246, -0.2521,  0.0840,  0.0737, -0.2602, -0.0747, -0.1537,  0.0811,
          0.0667, -0.0060, -0.1402,  0.1359,  0.0446,  0.0419,  0.1425,  0.0667,
         -0.0477,  0.0588, -0.0193, -0.1004, -0.0618, -0.1333,  0.1048, -0.1131,
         -0.1920,  0.1090, -0.6056,  0.6755, -0.4024,  0.1073, -0.0038,  0.0591,
         -0.0575,  0.3795, -0.1668,  0.0216,  0.1873,  0.0850,  0.1373,  0.1799,
         -0.4347,  0.0092, -0.0724,  0.0348,  0.3334,  0.0871, -0.3221, -0.1153,
         -0.2952,  0.1813, -0.0372, -0.0557,  0.4646,  0.1447, -0.3497, -0.1579]],
       device='cuda:0') tensor(0.2023, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
983000 特征值优化 tensor(0.6113, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.7656e-01,  4.0826e-01, -4.7761e-01, -6.4460e-01, -2.2447e-01,
          5.2134e-01,  3.5524e-01,  3.9775e-02, -3.5021e-01,  7.8304e-02,
         -9.1020e-01,  3.2287e-01,  9.5451e-02,  4.9961e-02,  2.7086e-01,
          6.2574e-04,  1.9971e-02, -9.9699e-02,  1.7498e-01,  3.1317e-02,
         -2.5885e-01, -7.4355e-02, -1.1717e-01,  1.1045e-01,  3.8609e-03,
          8.1645e-02, -1.5019e-01,  1.1860e-01, -2.7834e-02,  3.8800e-02,
          1.4137e-01,  7.0818e-02, -4.0818e-02,  5.3481e-02, -9.4904e-03,
         -9.8913e-02, -8.0383e-02, -1.4225e-01,  9.7967e-02, -1.1481e-01,
         -1.8367e-01,  1.1576e-01, -5.9792e-01,  6.5926e-01, -4.0808e-01,
          1.2728e-01, -2.4808e-02,  5.9030e-02, -6.6889e-02,  3.8240e-01,
         -1.6480e-01,  2.0353e-02,  1.9592e-01,  8.0752e-02,  6.7203e-02,
          2.3237e-01, -4.2301e-01,  3.8426e-03,  1.0932e-02,  1.0114e-01,
          3.2211e-01,  6.6342e-02, -3.7328e-01, -9.8389e-02, -3.2698e-01,
          1.9023e-01, -3.8591e-02, -4.8076e-02,  4.6780e-01,  1.7566e-01,
         -3.4646e-01, -1.5899e-01]], device='cuda:0') tensor(0.2021, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
984000 特征值优化 tensor(0.6091, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5898,  0.4247, -0.4763, -0.6444, -0.2442,  0.5144,  0.3108,  0.0336,
         -0.3366,  0.0595, -0.8890,  0.3153,  0.0965,  0.0688,  0.2657, -0.0077,
          0.0239, -0.0842,  0.2156,  0.0272, -0.2605, -0.0731, -0.1021,  0.1217,
         -0.0023,  0.0672, -0.1587,  0.1103, -0.0374,  0.0385,  0.1409,  0.0724,
         -0.0369,  0.0545, -0.0136, -0.0997, -0.0829, -0.1363,  0.1004, -0.1141,
         -0.1802,  0.1128, -0.6009,  0.6578, -0.4077,  0.1278, -0.0293,  0.0583,
         -0.0709,  0.3853, -0.1569,  0.0148,  0.2070,  0.0756,  0.0233,  0.2395,
         -0.4268,  0.0059,  0.0141,  0.1023,  0.3348,  0.0587, -0.3821, -0.1040,
         -0.3321,  0.1975, -0.0325, -0.0461,  0.4498,  0.1825, -0.3443, -0.1653]],
       device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
超出最大迭代
985000 特征值优化 tensor(3.4093, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.0306e-02, -3.8364e-01, -2.9077e-03, -6.0743e-01,  1.2852e+00,
          5.1101e-01, -2.7433e-01, -4.1781e-01, -7.4361e-02, -6.4219e-01,
         -8.0512e-01, -2.4852e-01,  1.0609e-01, -7.3553e-03, -5.4060e-01,
          7.0277e-02,  2.0710e-01,  6.9829e-01, -4.4391e-02,  6.0628e-02,
          1.2340e-01,  1.8693e-02, -7.6324e-01, -3.4591e-01,  5.8177e-02,
          1.7112e-02,  8.9554e-02,  1.6453e-02,  3.1677e-02, -3.0130e-02,
          1.1212e-01,  1.4251e-02,  3.0176e-02, -3.6821e-01, -3.0333e-03,
          7.8024e-04, -6.7228e-01,  5.7531e-02,  2.6513e-03,  4.0726e-02,
          3.5505e-01,  3.9286e-02, -4.1549e-01,  6.1399e-01, -4.8780e-01,
          3.3676e-01, -3.3597e-02, -1.9263e-01,  1.2932e-01, -9.9425e-02,
          9.6822e-02,  7.0334e-03, -1.0276e+00,  9.8525e-01,  7.4125e-02,
          1.5462e-02,  1.3046e-01, -1.5268e-01,  4.2175e-04, -7.6347e-02,
         -9.4290e-02, -7.4592e-01, -3.2712e-01, -4.3545e-01,  5.9317e-01,
          6.5962e-02,  3.7475e-01, -1.9169e-01,  2.3873e-01,  8.6469e-02,
         -2.1823e-01,  2.1468e-01]], device='cuda:0') tensor(0.2187, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
986000 特征值优化 tensor(0.6692, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-3.7158e-03, -3.8629e-01, -2.2107e-01, -6.0319e-01,  1.1903e+00,
          6.9092e-01,  1.8392e-01, -9.6512e-02, -6.5632e-02, -5.1211e-01,
         -1.3189e+00, -4.4859e-01,  1.1271e-01, -2.0712e-02, -1.4992e-01,
          3.7277e-02,  5.0664e-02,  1.9421e-01, -9.9324e-02,  7.5429e-02,
          1.3517e-01,  1.4945e-02, -2.9773e-01,  3.2400e-02,  6.5244e-02,
          7.4805e-03,  1.1162e-02, -1.2506e-01, -9.4514e-04, -3.5865e-02,
          2.4786e-02, -7.3669e-02,  7.9013e-02, -1.6570e-01, -6.5279e-02,
          7.4899e-03, -2.3185e-01,  9.8392e-02,  3.4429e-02,  3.4506e-02,
          2.8571e-01,  2.4353e-02, -4.2817e-01,  6.2136e-01, -4.6904e-01,
          4.0381e-01, -4.3012e-02, -1.4110e-01, -7.1333e-03, -2.0562e-02,
          1.4167e-01,  2.2486e-02, -3.7586e-01,  4.6861e-01, -1.3822e-01,
          2.5331e-01, -1.0930e-01, -1.4842e-02, -2.5523e-02, -2.2509e-01,
         -5.0644e-02, -2.2387e-01, -2.7651e-01, -1.6323e-01,  5.3283e-01,
          1.4160e-01,  1.0877e-01, -1.0634e-01,  1.6560e-01,  2.1309e-01,
         -1.7016e-01,  2.4576e-01]], device='cuda:0') tensor(0.2009, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
987000 特征值优化 tensor(0.5877, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0079, -0.2981, -0.1529, -0.6670,  1.0467,  0.7737,  0.2382, -0.1373,
         -0.0478, -0.3162, -1.2517, -0.5184,  0.1149,  0.0157, -0.1533,  0.1422,
          0.0096,  0.1594, -0.1390,  0.1027,  0.1319,  0.0146, -0.2396, -0.0123,
          0.1223,  0.0711,  0.0890, -0.0418,  0.0427, -0.0343,  0.0061, -0.1006,
          0.0604, -0.1625, -0.0654, -0.0281, -0.2004,  0.0650,  0.0298,  0.0801,
          0.2517,  0.0146, -0.3906,  0.6027, -0.4837,  0.3154, -0.0158, -0.2450,
          0.0612,  0.0064,  0.2675, -0.0358, -0.1213,  0.3238, -0.1356,  0.2039,
         -0.2162,  0.0201, -0.0851, -0.1971, -0.2002, -0.1444, -0.4603, -0.1641,
          0.6075,  0.1307, -0.0124, -0.0053,  0.1292,  0.2149, -0.1139,  0.1964]],
       device='cuda:0') tensor(0.2020, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
988000 特征值优化 tensor(0.5911, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0163, -0.2932, -0.1481, -0.6530,  1.0419,  0.8204,  0.2135, -0.1323,
         -0.0257, -0.2783, -1.2099, -0.5152,  0.1163,  0.0100, -0.1453,  0.1552,
          0.0068,  0.1635, -0.1506,  0.1041,  0.1281,  0.0174, -0.2050,  0.0169,
          0.1399,  0.1057,  0.1070, -0.0786,  0.0366, -0.0350,  0.0054, -0.1142,
          0.0682, -0.1674, -0.0511, -0.0034, -0.1905,  0.0649,  0.0027,  0.0120,
          0.2453,  0.0427, -0.3815,  0.6003, -0.4945,  0.3001, -0.0064, -0.2466,
          0.0676,  0.0054,  0.2923, -0.0513, -0.1137,  0.3204, -0.1303,  0.2205,
         -0.2722,  0.0469, -0.0565, -0.2338, -0.2206, -0.1291, -0.4894, -0.1660,
          0.6090,  0.1225, -0.0671,  0.0307,  0.1425,  0.2011, -0.0895,  0.1862]],
       device='cuda:0') tensor(0.2007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
989000 特征值优化 tensor(0.5725, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.6694e-02, -3.3539e-01, -1.6916e-01, -6.7540e-01,  8.6739e-01,
          7.8937e-01,  7.8039e-02,  3.5444e-02,  1.9032e-01, -4.1146e-01,
         -1.0912e+00, -4.8477e-01,  1.1432e-01,  2.6125e-02, -8.9354e-02,
          1.5863e-01,  4.2332e-03,  1.7245e-01, -1.4594e-01,  1.0012e-01,
          1.3238e-01,  1.6587e-02, -1.2125e-01,  6.4232e-02,  1.4538e-01,
          1.8303e-01,  1.3115e-01, -7.6320e-02,  3.6183e-02, -3.4942e-02,
         -4.0907e-02, -1.2837e-01,  7.4266e-02, -1.6371e-01, -5.2691e-02,
         -4.5899e-05, -2.0227e-01,  9.8853e-02,  4.6090e-02,  4.2740e-02,
          2.5318e-01,  3.6034e-02, -3.5851e-01,  6.1175e-01, -5.0492e-01,
          3.3170e-01, -1.0681e-02, -2.3369e-01,  6.6648e-02,  5.5181e-03,
          2.9958e-01, -5.1340e-02, -6.5721e-02,  2.4792e-01, -1.8288e-02,
          2.5979e-01, -2.6746e-01,  4.3448e-02, -1.2229e-01, -1.7116e-01,
         -2.4790e-01, -1.2588e-01, -5.1549e-01, -1.3891e-01,  5.4785e-01,
          1.7317e-01, -6.2217e-02,  2.0736e-02,  1.3231e-01,  2.1188e-01,
         -9.0515e-02,  1.8838e-01]], device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
990000 特征值优化 tensor(0.5680, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.9886e-02, -3.4146e-01, -1.7772e-01, -6.7754e-01,  8.5956e-01,
          7.6393e-01,  6.0263e-02,  7.7162e-02,  1.7659e-01, -4.6228e-01,
         -1.0796e+00, -4.6969e-01,  1.1354e-01,  2.6015e-02, -9.1155e-02,
          1.7097e-01, -5.3315e-03,  1.6390e-01, -1.3942e-01,  9.8373e-02,
          1.3267e-01,  1.6424e-02, -6.3587e-02,  8.9648e-02,  1.7156e-01,
          1.6967e-01,  1.6624e-01, -9.9178e-02,  3.5947e-02, -3.4580e-02,
         -4.0754e-02, -1.3159e-01,  6.9717e-02, -1.6424e-01, -6.7068e-02,
          4.6043e-03, -2.0399e-01,  1.0877e-01,  4.6237e-02,  4.2444e-02,
          2.5454e-01,  2.8955e-02, -3.6835e-01,  6.1482e-01, -5.0097e-01,
          3.3811e-01, -1.6816e-02, -2.2904e-01,  6.5937e-02,  5.2358e-03,
          3.0058e-01, -5.0558e-02, -4.8673e-02,  2.3902e-01, -6.6956e-02,
          2.0517e-01, -2.1235e-01,  2.0259e-02, -1.1440e-01, -1.7834e-01,
         -2.4236e-01, -1.2961e-01, -5.1920e-01, -1.2748e-01,  5.1136e-01,
          1.8080e-01, -3.5145e-02,  7.9200e-04,  1.2326e-01,  2.2048e-01,
         -1.0370e-01,  2.0825e-01]], device='cuda:0') tensor(0.2026, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
991000 特征值优化 tensor(0.5772, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0404, -0.3251, -0.1763, -0.6975,  0.8628,  0.7461,  0.0702,  0.0781,
          0.1612, -0.4742, -1.0828, -0.4479,  0.1148,  0.0330, -0.0887,  0.1633,
         -0.0065,  0.1665, -0.1431,  0.1001,  0.1316,  0.0164, -0.0917,  0.0528,
          0.1718,  0.1446,  0.1379, -0.1369,  0.0365, -0.0350, -0.0420, -0.1333,
          0.0670, -0.1682, -0.0603, -0.0346, -0.2055,  0.1065,  0.0400,  0.0196,
          0.2559,  0.0426, -0.3624,  0.6088, -0.5024,  0.3273, -0.0108, -0.2321,
          0.0663,  0.0056,  0.3143, -0.0515, -0.0748,  0.2519, -0.1130,  0.1596,
         -0.1734,  0.0119, -0.0581, -0.2224, -0.2354, -0.1307, -0.5387, -0.1182,
          0.4505,  0.1781, -0.0283, -0.0086,  0.1417,  0.2071, -0.0809,  0.2110]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
992000 特征值优化 tensor(0.5672, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0377, -0.3244, -0.1890, -0.7226,  0.8588,  0.7666,  0.0658,  0.0596,
          0.1574, -0.5606, -1.0823, -0.4710,  0.1141,  0.0328, -0.0955,  0.1602,
         -0.0082,  0.1671, -0.1531,  0.0980,  0.1323,  0.0158, -0.0807,  0.0160,
          0.1812,  0.1470,  0.1225, -0.1683,  0.0356, -0.0355, -0.0414, -0.1334,
          0.0627, -0.1652, -0.0508, -0.0799, -0.2028,  0.1032,  0.0232,  0.0072,
          0.2530,  0.0570, -0.3613,  0.6132, -0.5068,  0.3281, -0.0115, -0.2256,
          0.0648,  0.0040,  0.3239, -0.0530, -0.0728,  0.2506, -0.1639,  0.1430,
         -0.1952,  0.0169,  0.0118, -0.2121, -0.2326, -0.1327, -0.5492, -0.1180,
          0.4855,  0.1995, -0.0496, -0.0016,  0.1444,  0.2070, -0.0813,  0.1852]],
       device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
993000 特征值优化 tensor(0.5686, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0336, -0.3290, -0.1921, -0.6753,  0.8585,  0.7646,  0.0701,  0.0810,
          0.1663, -0.5857, -1.0837, -0.4739,  0.1146,  0.0384, -0.0905,  0.1657,
         -0.0104,  0.1646, -0.1449,  0.0981,  0.1311,  0.0164, -0.0867,  0.0209,
          0.1832,  0.1453,  0.1541, -0.1453,  0.0357, -0.0348, -0.0409, -0.1289,
          0.0583, -0.1651, -0.0561, -0.0579, -0.2051,  0.1062,  0.0354,  0.0134,
          0.2563,  0.0465, -0.3618,  0.6133, -0.5054,  0.3276, -0.0121, -0.2221,
          0.0651,  0.0051,  0.3003, -0.0509, -0.0808,  0.2555, -0.1621,  0.1466,
         -0.1801,  0.0100, -0.0241, -0.2168, -0.2412, -0.1254, -0.5598, -0.1081,
          0.4374,  0.1792, -0.0373, -0.0208,  0.1445,  0.2059, -0.0437,  0.1967]],
       device='cuda:0') tensor(0.2017, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
994000 特征值优化 tensor(0.5707, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0245, -0.3403, -0.1870, -0.6687,  0.8557,  0.7447,  0.0762,  0.1164,
          0.1429, -0.5550, -1.0841, -0.4443,  0.1138,  0.0435, -0.0818,  0.1731,
         -0.0168,  0.1546, -0.1347,  0.0980,  0.1316,  0.0159, -0.0934,  0.0287,
          0.1886,  0.1457,  0.1739, -0.1088,  0.0364, -0.0340, -0.0414, -0.1319,
          0.0571, -0.1668, -0.0594, -0.0465, -0.2085,  0.1085,  0.0493,  0.0314,
          0.2621,  0.0340, -0.3660,  0.6182, -0.5058,  0.3355, -0.0159, -0.2259,
          0.0651,  0.0047,  0.2953, -0.0485, -0.0567,  0.2427, -0.1362,  0.1569,
         -0.1637,  0.0053, -0.0346, -0.2229, -0.2590, -0.1119, -0.5507, -0.1064,
          0.4363,  0.1794, -0.0364, -0.0139,  0.1300,  0.2116, -0.0522,  0.2034]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
995000 特征值优化 tensor(0.5661, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0095, -0.3705, -0.2027, -0.6497,  0.8511,  0.7172,  0.0703,  0.1348,
          0.1389, -0.6013, -1.0855, -0.4514,  0.1146,  0.0368, -0.0641,  0.1877,
         -0.0188,  0.1398, -0.1176,  0.0985,  0.1301,  0.0164, -0.1266,  0.0184,
          0.1860,  0.1138,  0.1739, -0.1503,  0.0364, -0.0343, -0.0408, -0.1463,
          0.0488, -0.1726, -0.0529, -0.0582, -0.2091,  0.1118,  0.0154, -0.0042,
          0.2634,  0.0617, -0.3803,  0.6282, -0.5061,  0.3472, -0.0202, -0.2195,
          0.0658,  0.0025,  0.2889, -0.0472, -0.0692,  0.2492, -0.1283,  0.1645,
         -0.1987,  0.0148,  0.0034, -0.2075, -0.2402, -0.1203, -0.5772, -0.0905,
          0.4743,  0.1788, -0.0463, -0.0229,  0.1516,  0.2002, -0.0701,  0.1991]],
       device='cuda:0') tensor(0.2032, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
996000 特征值优化 tensor(0.5644, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0409e-02, -3.7126e-01, -1.9815e-01, -6.7131e-01,  8.4996e-01,
          7.1777e-01,  7.6181e-02,  1.3910e-01,  1.0414e-01, -6.1090e-01,
         -1.0835e+00, -4.1714e-01,  1.1464e-01,  3.6452e-02, -6.2989e-02,
          1.8988e-01, -1.6584e-02,  1.3845e-01, -1.1606e-01,  9.8871e-02,
          1.3028e-01,  1.6095e-02, -1.4345e-01,  2.7168e-04,  1.6978e-01,
          1.6058e-01,  1.6608e-01, -1.0149e-01,  3.6772e-02, -3.4299e-02,
         -4.1015e-02, -1.4036e-01,  4.8953e-02, -1.7146e-01, -6.1291e-02,
         -5.7786e-02, -2.0788e-01,  1.0971e-01,  2.0011e-02,  4.4182e-03,
          2.6439e-01,  5.9007e-02, -3.8176e-01,  6.2820e-01, -5.0633e-01,
          3.4646e-01, -1.8607e-02, -2.2336e-01,  6.6610e-02,  7.9024e-04,
          3.0070e-01, -4.7721e-02, -6.2631e-02,  2.4649e-01, -1.2360e-01,
          1.6466e-01, -1.8421e-01,  1.0051e-02, -1.0075e-02, -2.1600e-01,
         -2.5364e-01, -1.0801e-01, -5.7440e-01, -9.3613e-02,  4.9134e-01,
          1.6245e-01,  3.6267e-03, -3.8063e-02,  1.3918e-01,  2.0409e-01,
         -9.0163e-02,  2.1680e-01]], device='cuda:0') tensor(0.2002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
997000 特征值优化 tensor(0.5731, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0106, -0.3385, -0.1996, -0.6663,  0.8566,  0.7417,  0.0665,  0.1841,
          0.1070, -0.5742, -1.0838, -0.4188,  0.1154,  0.0410, -0.0698,  0.1881,
         -0.0360,  0.1384, -0.0976,  0.0983,  0.1302,  0.0145, -0.0960,  0.0558,
          0.1170,  0.1826,  0.1204, -0.1675,  0.0379, -0.0343, -0.0404, -0.1311,
          0.0599, -0.1752, -0.0623, -0.0433, -0.2138,  0.1195,  0.0302,  0.0115,
          0.2694,  0.0504, -0.3787,  0.6200, -0.4995,  0.3312, -0.0201, -0.2235,
          0.0629,  0.0012,  0.2899, -0.0477, -0.0777,  0.2551, -0.0973,  0.1672,
         -0.1781,  0.0078, -0.0699, -0.2253, -0.2586, -0.1097, -0.5604, -0.0899,
          0.4692,  0.1561,  0.0084, -0.0378,  0.1509,  0.2010, -0.0775,  0.2271]],
       device='cuda:0') tensor(0.2028, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
998000 特征值优化 tensor(0.5879, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0104, -0.3390, -0.2132, -0.6829,  0.8461,  0.7566,  0.0513,  0.1483,
          0.0929, -0.6400, -1.0399, -0.4074,  0.1162,  0.0434, -0.0759,  0.1992,
         -0.0225,  0.1445, -0.1090,  0.0978,  0.1300,  0.0174, -0.0755,  0.0924,
          0.1365,  0.1610,  0.1389, -0.1243,  0.0371, -0.0334, -0.0419, -0.1221,
          0.0790, -0.1830, -0.0595, -0.0284, -0.2079,  0.1139,  0.0419,  0.0281,
          0.2651,  0.0374, -0.3793,  0.6253, -0.5045,  0.3343, -0.0213, -0.2058,
          0.0629,  0.0049,  0.3098, -0.0508, -0.0084,  0.2198, -0.0837,  0.1723,
         -0.1996,  0.0200, -0.0969, -0.2075, -0.2807, -0.0967, -0.5208, -0.1209,
          0.4746,  0.1381,  0.0621, -0.0765,  0.1140,  0.2207, -0.0851,  0.2452]],
       device='cuda:0') tensor(0.2005, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
999000 特征值优化 tensor(0.5640, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0110e-02, -3.3893e-01, -2.4034e-01, -7.1717e-01,  8.5289e-01,
          7.6043e-01,  5.8961e-02,  1.4673e-01,  1.0692e-01, -6.2621e-01,
         -1.0723e+00, -4.2584e-01,  1.1537e-01,  1.1135e-02, -8.8839e-02,
          2.0472e-01, -4.4860e-02,  1.2308e-01, -1.0393e-01,  9.8356e-02,
          1.3013e-01,  1.1870e-02, -4.5050e-02,  9.5391e-02,  1.5262e-01,
          1.6100e-01,  1.2026e-01, -1.7315e-01,  3.6617e-02, -3.8395e-02,
         -4.1383e-02, -1.3610e-01,  8.7966e-02, -1.6725e-01, -6.6872e-02,
         -2.2699e-02, -2.1070e-01,  1.1128e-01,  4.9637e-02,  3.3572e-02,
          2.6710e-01,  2.6803e-02, -3.7939e-01,  6.2826e-01, -5.0544e-01,
          3.3294e-01, -2.0894e-02, -2.0642e-01,  5.9813e-02,  6.0981e-04,
          3.1594e-01, -5.7001e-02, -1.5333e-02,  2.2207e-01, -7.0490e-02,
          1.8178e-01, -1.9035e-01,  7.8508e-03, -1.2478e-01, -1.7507e-01,
         -2.7296e-01, -1.0002e-01, -4.9363e-01, -1.3576e-01,  4.9917e-01,
          1.4438e-01,  2.1173e-02, -6.3535e-02,  1.0379e-01,  2.2184e-01,
         -1.0708e-01,  2.3881e-01]], device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
完成共1000000轮迭代 推荐参数如下：
收敛loss为： ('收敛', tensor(0.5079))
tensor([[ 0.1158, -0.6583,  0.2107, -0.5769, -0.5262, -0.2200,  0.1365, -0.9053,
         -0.9892, -0.8783, -0.3283,  1.2133, -0.0288, -0.0046,  0.0771,  0.1442,
          0.1707, -0.0764,  0.0538,  0.0469,  0.1721,  0.0541, -0.2035,  0.0374,
          0.1687,  0.0791,  0.0528,  0.0935, -0.0158,  0.2200,  0.0612, -0.0312,
          0.0527,  0.0566,  0.0352, -0.0902,  0.1168,  0.0438, -0.0472,  0.1796,
         -0.1723,  0.1410, -0.0774, -0.1528,  0.4049,  0.4036, -0.0229, -0.1840,
          0.4668, -0.2977,  0.1651,  0.0050, -0.1536,  0.1999, -0.0229,  0.2057,
         -0.1321,  0.0720,  0.2085,  0.3494, -0.3613,  0.2790,  0.4521,  0.0881,
         -0.3065, -0.0836, -0.1153,  0.0206,  0.5119, -0.0141, -0.2349,  0.0678]],
       device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.5406))
tensor([[ 9.4845e-01, -1.3103e-02, -2.3205e-01, -5.0153e-02, -3.3465e-01,
         -1.0525e-01,  1.0130e+00,  1.5314e-01, -5.0653e-02,  6.9616e-01,
         -1.7787e+00, -2.9840e-01, -1.4711e-02, -2.1826e-01, -5.7287e-02,
         -1.6039e-01, -3.1152e-02,  1.3398e-02, -5.7982e-02, -9.0802e-02,
         -1.6274e-01,  2.2661e-02, -1.0787e-01,  2.1597e-01, -2.6995e-02,
         -9.0889e-03, -9.3721e-02, -5.4017e-02, -9.5840e-02,  2.0900e-01,
          5.5128e-02,  6.9573e-02,  5.6645e-02, -1.0764e-01,  9.2607e-03,
          5.3726e-02, -1.3513e-02, -1.9412e-02,  3.4282e-02, -2.8051e-02,
          1.8900e-01,  1.7322e-02, -5.2944e-01, -1.0908e-01,  4.4772e-01,
          1.0202e-02,  1.0717e-02,  1.5110e-02, -2.2304e-01,  3.5849e-01,
         -3.3502e-01,  7.8177e-02, -8.0942e-02,  7.7516e-02, -6.0618e-02,
         -4.0486e-01, -5.2070e-01, -8.5828e-02, -1.0543e-01,  2.6036e-06,
         -8.9774e-02, -7.2808e-03,  4.9664e-01,  1.4185e-01,  2.8457e-01,
          2.1635e-01, -6.0049e-03,  9.4816e-02,  1.8270e-01,  9.5833e-02,
          1.0511e-01,  1.4032e-01]], device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.5572))
tensor([[-0.0213, -0.5679,  0.3778,  0.1554,  0.0724,  0.6125, -0.3637,  0.7401,
         -0.2639,  0.7780, -0.7477, -0.0641,  0.0118,  0.2047, -0.1895, -0.1171,
          0.2005, -0.1265,  0.0237, -0.0621, -0.0357,  0.0049,  0.0661,  0.1855,
         -0.0431,  0.0331,  0.0328,  0.0024, -0.0122,  0.0174, -0.0143, -0.0661,
         -0.0053,  0.2302,  0.0690, -0.1542,  0.2500, -0.2220, -0.0752, -0.0303,
         -0.1669, -0.0481, -0.4097,  0.0948,  0.0950,  0.1642, -0.0032, -0.1052,
         -0.1002,  0.3066,  0.2670,  0.1640,  0.3352,  0.2525,  0.3603,  0.0128,
         -0.4950, -0.0197,  0.4691, -0.0690, -0.4955,  0.0889, -0.2513, -0.1739,
         -0.0459,  0.1557,  0.1245,  0.0142,  0.6316, -0.0452, -0.1460,  0.1256]],
       device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.5574))
tensor([[ 1.0041e+00,  7.0061e-01, -3.0818e-01, -4.3447e-01, -8.7044e-01,
         -1.8723e-01, -4.5928e-01,  3.8644e-01, -4.8873e-01, -7.0168e-01,
         -3.8346e-01,  9.6480e-01, -9.0164e-03, -1.4813e-02, -4.1869e-02,
         -3.8721e-02, -1.2695e-01, -1.6893e-01,  1.5516e-01, -2.5090e-02,
          5.3007e-03,  2.3873e-01, -4.6819e-02,  1.2416e-01,  5.3851e-02,
         -3.2413e-02, -3.6075e-02, -1.1879e-01,  1.0384e-03,  7.3830e-02,
          5.8666e-02, -1.2851e-02,  1.0251e-01, -1.8864e-01,  6.4785e-02,
         -7.7645e-03, -2.0090e-03,  5.7913e-02, -6.0342e-02,  6.6636e-02,
          1.0505e-02, -6.1087e-02, -4.7929e-01,  3.5797e-01, -1.3576e-01,
         -1.6324e-03,  1.2857e-01, -1.9291e-01, -1.4485e-01,  3.8804e-01,
         -1.6482e-01,  2.8171e-04,  5.2695e-02,  1.6045e-01,  3.2590e-01,
          2.4132e-01,  1.0984e-01,  1.2035e-01,  4.2522e-03, -6.7770e-02,
         -5.8124e-01, -1.5140e-01, -2.4809e-01,  1.2556e-01, -2.2053e-01,
          1.1382e-01, -1.0980e-02,  7.5652e-02,  8.2511e-01,  2.0949e-01,
         -1.5243e-01,  4.0039e-02]], device='cuda:0')
收敛loss为： ('收敛', tensor(0.5582))
tensor([[ 0.0798, -0.4544,  0.2679, -0.4813, -0.5193, -0.1603,  0.0092, -0.3979,
         -0.3845, -0.7030,  0.3029, -0.0686,  0.0489, -0.2063,  0.2322, -0.0904,
          0.0352,  0.1745,  0.0912, -0.1042,  0.3149, -0.0154, -0.0063,  0.1737,
          0.1862,  0.1633, -0.1404, -0.0170,  0.0166,  0.1476,  0.0536, -0.0688,
          0.0851,  0.0657,  0.0177, -0.0117,  0.0553, -0.1122,  0.1541,  0.1022,
         -0.0978, -0.0794, -0.4159, -0.4442,  0.6257,  0.0526,  0.0724, -0.0959,
          0.3426, -0.1693,  0.2399, -0.0030, -0.1149,  0.1477, -0.0224,  0.0337,
         -0.2472,  0.1386, -0.1979,  0.1513,  0.5994, -0.0036,  0.3824,  0.0180,
         -0.3226,  0.0067,  0.2786,  0.2383, -0.5394,  0.1644,  0.4652,  0.1390]],
       device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.5759))
tensor([[ 5.7840e-01,  2.3992e-01, -2.6338e-01, -1.3650e-01, -4.7141e-01,
          4.3370e-01, -6.5448e-01,  2.6702e-01, -2.5981e-01,  1.7174e+00,
          5.3293e-01, -3.8941e-01, -2.2141e-01, -2.4614e-01,  1.3505e-02,
          8.0735e-02, -1.4983e-01,  3.9596e-02, -6.2414e-02, -1.4975e-02,
          5.9685e-02,  1.2249e-01, -5.7936e-02,  1.2236e-01, -2.7274e-02,
         -6.8152e-02,  1.0554e-01, -1.2317e-01,  6.2174e-02,  5.5501e-02,
          5.9896e-02,  2.7632e-02, -8.3490e-02, -6.2209e-03, -5.3445e-02,
          2.9479e-02,  5.3895e-03, -7.6646e-02,  6.5886e-02, -8.8923e-02,
          1.9843e-01,  9.3590e-02, -2.1179e-01,  2.2915e-01, -2.8700e-01,
         -1.4829e-01,  1.1581e-01, -9.1919e-02, -3.4038e-01,  7.4285e-01,
          2.5501e-01,  1.6958e-02, -6.8382e-02,  1.1965e-01,  1.8043e-02,
          1.3837e-04,  2.5461e-01,  1.9254e-01, -6.4150e-02, -5.7867e-02,
         -2.3736e-01,  6.0400e-02, -1.6784e-01,  4.3409e-02,  3.2468e-01,
          2.3700e-01, -9.3674e-02, -8.0595e-03, -5.0852e-01,  5.5921e-02,
         -3.8304e-01, -6.9700e-02]], device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.5778))
tensor([[-1.9965e-01,  3.6130e-01,  6.4970e-01,  1.0751e+00,  2.0673e-01,
         -6.5838e-01, -7.1610e-01,  6.2077e-01, -4.4668e-01,  1.0236e+00,
          4.6753e-01,  1.6072e-01,  6.0915e-02, -3.6412e-02, -1.4829e-01,
          1.4433e-02,  9.8488e-04, -1.4963e-01, -3.3873e-02, -3.8103e-02,
         -7.4565e-02, -6.3414e-03, -1.2059e-01,  1.1981e-01, -7.0791e-02,
         -1.2991e-02,  1.5865e-01, -1.1900e-01, -1.3388e-01,  4.3823e-04,
         -9.6289e-02,  9.1494e-02, -6.3127e-02, -3.1866e-02,  4.5547e-02,
          5.0062e-02,  6.8881e-02,  1.1886e-01,  1.5662e-01, -1.0675e-01,
         -1.0464e-01,  1.0226e-01, -1.3326e-01,  7.2944e-02,  7.2749e-02,
         -3.6222e-01, -6.7892e-02, -4.9159e-01,  3.8189e-01, -3.1473e-01,
          1.6069e-01,  1.6854e-01, -1.9926e-02,  2.7531e-01, -2.2652e-01,
         -1.8103e-01, -9.0418e-02,  5.4267e-05,  1.2635e-01, -5.7002e-02,
          4.2010e-01,  2.2318e-01, -4.7411e-01, -6.1033e-03, -3.7537e-02,
          9.3144e-02,  2.6595e-01,  4.1054e-02, -2.7177e-01,  4.9545e-02,
          3.9343e-02,  8.6778e-02]], device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.5861))
tensor([[ 0.3924,  1.0107, -0.0504, -0.3364, -0.8122,  0.3846,  0.6464,  0.2553,
          0.6127,  0.9629, -1.7733,  0.1043, -0.0708, -0.0064,  0.0332,  0.1167,
         -0.0215, -0.0424,  0.0785,  0.0263, -0.0463,  0.2452, -0.0741,  0.0140,
          0.1183,  0.0547,  0.1363, -0.0156, -0.0308, -0.0650, -0.0146, -0.0035,
         -0.0042, -0.1156, -0.0887, -0.0220, -0.0617, -0.0837,  0.0986, -0.0233,
          0.0684, -0.1275, -0.2559,  0.1302,  0.0197,  0.0298, -0.0413, -0.1955,
          0.5227, -0.3583,  0.4447,  0.0913,  0.0437, -0.0042,  0.0300, -0.1692,
         -0.1244,  0.2322,  0.1148,  0.1548,  0.2335,  0.0156, -0.5271, -0.1204,
         -0.3674,  0.2189, -0.1527,  0.0454, -0.0308,  0.0800, -0.0615,  0.0713]],
       device='cuda:0')
收敛loss为： ('收敛', tensor(0.5910))
tensor([[ 0.1734, -0.6079,  0.1138,  0.6575,  0.1292,  0.3323, -0.2072,  0.0195,
          0.6544, -0.4715, -0.8086, -0.7452,  0.0535, -0.2571,  0.1290,  0.0291,
          0.0374,  0.0171,  0.1112, -0.0301,  0.2202,  0.0124,  0.2275, -0.1167,
          0.0656, -0.0840, -0.0379,  0.0125, -0.1693,  0.0433,  0.1455,  0.1914,
         -0.0534, -0.0126, -0.0289,  0.0396,  0.0098, -0.2978, -0.1555,  0.0583,
          0.0717,  0.0253, -0.1781, -0.2832,  0.4603,  0.1824,  0.0061,  0.0241,
         -0.1004,  0.4224, -0.5831, -0.1205, -0.1240,  0.1624, -0.0210, -0.5068,
         -0.3879, -0.0813, -0.2197, -0.0493,  0.1101,  0.1069,  0.1773, -0.0606,
         -0.2822,  0.1300,  0.5439, -0.0693, -0.2898,  0.0642,  0.0789,  0.0435]],
       device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.6078))
tensor([[-3.8705e-01, -9.3742e-02,  4.6109e-01,  3.9692e-01, -4.6505e-01,
         -5.4965e-01,  3.8985e-01,  4.4493e-01, -7.9135e-02,  1.3850e+00,
          2.2530e-01,  1.6588e-01,  2.9015e-01, -5.6545e-02,  8.3100e-02,
         -9.5990e-02, -1.2718e-01, -1.1102e-01, -2.6972e-01,  6.7624e-02,
          5.5744e-02, -9.8245e-02,  5.9996e-02, -9.1107e-02, -5.3464e-02,
          6.7507e-02, -7.2193e-02, -4.9375e-02,  2.0611e-02, -8.4570e-02,
          6.7308e-02,  7.1564e-02,  3.3598e-02,  3.4849e-02,  1.2469e-02,
         -1.0195e-01, -9.7217e-02, -4.2816e-02,  1.6448e-01,  2.4086e-02,
         -1.9800e-01, -1.7352e-01, -2.2590e-01, -1.7323e-01,  3.4591e-01,
         -1.2945e-01,  5.6515e-02, -3.5488e-02, -1.6827e-02,  4.0079e-01,
         -3.9111e-01, -4.5630e-02, -1.1341e-03,  9.5325e-02,  1.6836e-01,
          1.8873e-01, -1.8641e-01,  1.9229e-01,  4.4927e-01, -2.6729e-01,
         -4.9791e-01,  3.3387e-03,  1.7780e-01,  1.1089e-02,  1.3775e-01,
          1.2997e-01, -2.7633e-01, -8.0810e-02, -1.3160e-01, -1.6961e-01,
          3.0483e-02,  1.0370e-01]], device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.6091))
tensor([[ 0.3206, -0.1142, -0.2785, -1.1646, -0.6307,  0.3039, -0.5406,  0.2858,
         -0.2620, -1.0633,  0.4905,  0.3590, -0.0992, -0.1110, -0.0221, -0.1045,
          0.0768, -0.0211, -0.1329, -0.0250, -0.0844,  0.1094, -0.1755,  0.0293,
          0.1043,  0.0369,  0.0045, -0.0047,  0.0074, -0.0471, -0.0203, -0.0545,
          0.1052,  0.3670, -0.1627, -0.0295,  0.1467,  0.1547, -0.0374,  0.0149,
         -0.1090, -0.1585, -0.0030, -0.0428,  0.4680, -0.1684, -0.0297, -0.0433,
         -0.2219,  0.5534,  0.3524,  0.0337, -0.1235,  0.0294, -0.1203,  0.1442,
         -0.5918,  0.0402, -0.0302, -0.5034,  0.2336,  0.0341, -0.4847,  0.0067,
          0.0068,  0.0724,  0.0096, -0.0334, -0.1989, -0.0093, -0.3815, -0.0239]],
       device='cuda:0')
收敛loss为： ('收敛', tensor(0.6122))
tensor([[ 0.1523, -0.0452,  0.1789, -0.2179, -0.1219, -0.5416,  0.2109, -1.3537,
          0.0360,  0.2863,  0.3168, -0.6254,  0.0221, -0.1559, -0.1497, -0.0596,
          0.0190,  0.1046,  0.0257,  0.0354,  0.1246,  0.0271,  0.0176,  0.1496,
         -0.1412, -0.2200,  0.0301,  0.1809, -0.0795,  0.0563, -0.1823,  0.0157,
         -0.0614,  0.0648,  0.0080,  0.0754,  0.1456,  0.1753,  0.0335, -0.0213,
          0.1895, -0.1314,  0.0238,  0.3517, -0.0657, -0.0230, -0.0363, -0.6252,
          0.0151, -0.0677,  0.0799, -0.0919,  0.1588,  0.1015, -0.2127, -0.2502,
         -0.0171,  0.1181, -0.4372,  0.0361,  0.0983,  0.1212,  0.0481,  0.0259,
         -0.2192,  0.4097, -0.7014, -0.1073, -0.3415,  0.0846,  0.2953, -0.1670]],
       device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.6152))
tensor([[-0.1888,  0.0313, -0.5950, -0.8694,  0.5433, -0.6031, -0.2366, -0.0340,
          0.5366, -0.9493,  1.3231, -0.0406,  0.0170, -0.1575,  0.1801, -0.0556,
          0.1304, -0.0036, -0.0618,  0.0798, -0.1194,  0.0407, -0.0400,  0.1110,
         -0.0733, -0.0200, -0.0883,  0.1674, -0.0551, -0.3078,  0.0473, -0.0172,
         -0.0298, -0.0150, -0.0866, -0.0229, -0.0152,  0.1131, -0.1133,  0.1195,
         -0.0328,  0.2157,  0.3765, -0.1329,  0.2664,  0.1778,  0.0080,  0.0814,
          0.3874, -0.3312,  0.4584,  0.0518, -0.4492,  0.0238, -0.0988,  0.2402,
         -0.3094,  0.1196, -0.0142, -0.4862, -0.1834,  0.0675, -0.1665,  0.0935,
         -0.2996, -0.0365, -0.0503,  0.0335, -0.6511,  0.2909, -0.2598,  0.2469]],
       device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.6157))
tensor([[-0.3398, -0.9328,  0.2405, -0.5955,  0.3612, -0.5725, -0.6777,  0.5783,
         -0.0734,  0.4361,  0.5124,  0.4989,  0.1939,  0.0593,  0.1524,  0.0334,
          0.0023, -0.0645, -0.1699,  0.0351, -0.0484,  0.1017,  0.0536, -0.0110,
         -0.0891, -0.2772,  0.0884,  0.2163, -0.0077,  0.2641, -0.2959, -0.0895,
         -0.0982,  0.0544, -0.0124,  0.0872, -0.0366, -0.0024,  0.0625,  0.0025,
          0.0120, -0.1692,  0.2288,  0.1578, -0.2005,  0.4032,  0.1623, -0.4008,
         -0.4191,  0.7012, -0.0043,  0.0422, -0.1469, -0.0919, -0.0033,  0.1407,
         -0.1916,  0.1919,  0.1729, -0.2843,  0.3087,  0.0669,  0.2103,  0.0883,
         -0.2304,  0.1073, -0.4044,  0.0448, -0.2421,  0.2783, -0.3154,  0.1312]],
       device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.6172))
tensor([[ 0.5767,  0.3731, -0.4661, -0.6288, -0.2090,  0.5036,  0.3315,  0.0588,
         -0.3659,  0.0815, -0.8862,  0.2923,  0.0981,  0.0432,  0.2351, -0.0056,
          0.0094, -0.0984,  0.1817,  0.0440, -0.2604, -0.0685, -0.1206,  0.1181,
          0.0406,  0.0312, -0.1236,  0.1390, -0.0154,  0.0397,  0.1476,  0.0709,
         -0.0468,  0.0569, -0.0126, -0.0989, -0.0902, -0.1376,  0.0954, -0.1152,
         -0.1785,  0.1180, -0.5979,  0.6534, -0.4053,  0.1364, -0.0207,  0.0551,
         -0.0721,  0.3899, -0.1512,  0.0026,  0.2099,  0.0817,  0.0729,  0.2554,
         -0.4291,  0.0052, -0.0331,  0.0479,  0.3384,  0.0665, -0.3529, -0.1107,
         -0.3181,  0.1914, -0.0267, -0.0605,  0.4317,  0.1743, -0.3292, -0.1582]],
       device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.6174))
tensor([[ 5.1441e-01, -3.9748e-01,  5.7749e-01,  2.5592e-01, -1.6434e+00,
         -2.0543e-01, -7.3358e-01, -4.3098e-01,  1.6176e-01,  8.4199e-02,
          1.2569e+00, -1.0656e+00, -1.6904e-02, -1.0858e-01,  4.8813e-02,
          1.1061e-01, -5.4690e-02,  1.6084e-01,  1.4880e-03, -1.3377e-01,
         -1.6515e-01, -1.0683e-01,  1.2029e-02, -4.4652e-02, -2.4132e-01,
         -1.1937e-01,  3.4529e-02,  5.2483e-03, -2.2298e-02, -8.1536e-02,
          3.2786e-01,  5.9408e-04,  1.6816e-02,  1.4673e-01, -3.6355e-02,
         -1.7225e-02, -1.4931e-01,  1.4746e-01, -7.1655e-02, -9.1188e-02,
          7.1560e-02,  1.2887e-01, -3.8312e-01, -1.3914e-01,  5.5841e-01,
          1.4949e-01,  3.3500e-02, -6.0264e-01,  1.0695e-01,  1.6352e-01,
          1.7517e-01,  1.3571e-02,  1.8908e-01,  1.9766e-01,  4.6647e-01,
          1.2570e-01,  1.1491e-01,  1.3072e-01,  1.6914e-01,  1.3917e-01,
          1.4888e-01, -1.2645e-01,  7.8046e-02,  5.3784e-02,  2.5535e-01,
          1.3495e-02,  2.3300e-01,  1.4220e-02, -1.2480e-01,  6.3473e-02,
          1.3744e-01,  1.8916e-02]], device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.6277))
tensor([[-3.0890e-02, -1.0006e+00, -3.1641e-01, -1.8605e-01,  4.4046e-02,
          2.3773e-01, -5.9804e-01,  3.8068e-01, -3.7561e-01, -5.5467e-01,
         -8.5009e-02,  1.3241e+00,  1.6949e-01,  7.9659e-02,  1.3230e-01,
         -7.7738e-02, -1.6522e-01,  1.0668e-01, -1.7299e-01, -7.1131e-05,
          1.4194e-02, -6.6788e-02,  2.1456e-01,  4.3797e-02, -1.3429e-01,
         -1.0627e-01,  6.6731e-02, -7.4402e-02,  5.1670e-03,  1.1679e-01,
         -1.7228e-01,  3.7654e-02, -1.0984e-01,  3.5034e-01, -1.2624e-02,
          2.5858e-02, -8.1542e-02, -1.2586e-01, -1.2787e-02,  1.8367e-02,
         -4.2590e-02, -1.0039e-02,  2.0502e-01,  1.5828e-01, -4.4406e-02,
          3.5557e-01,  1.5452e-01,  2.1292e-02, -6.6097e-02,  3.3876e-01,
         -1.9071e-01,  5.8011e-02,  1.8596e-01, -4.1506e-04, -2.7131e-01,
          2.1741e-01, -7.6650e-01,  1.3832e-01, -1.5243e-01, -4.0622e-01,
          2.4555e-01,  8.0304e-02, -4.1599e-02,  4.2660e-03, -5.0006e-01,
         -1.4041e-01, -9.1529e-02, -1.0327e-01, -3.5427e-01,  2.6785e-01,
         -4.3063e-01,  1.7847e-01]], device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.6293))
tensor([[-9.0021e-02,  6.4918e-01, -4.7462e-01, -3.8802e-04, -3.5510e-01,
         -4.4287e-01,  2.1727e-01,  1.1145e+00,  1.1527e+00, -6.8055e-01,
         -2.5562e-01,  6.4947e-01,  2.9648e-01, -1.5242e-01, -8.6856e-02,
          3.7713e-02,  3.3756e-02, -1.1843e-01,  9.5428e-02, -1.2741e-01,
         -5.3539e-02, -2.3196e-01, -1.2957e-01, -6.7997e-02, -9.9363e-03,
          1.0519e-02, -8.1739e-03,  1.8156e-01, -4.4185e-02, -5.0386e-02,
          6.5076e-02, -3.5907e-02, -6.0357e-02, -3.0020e-02,  4.0434e-02,
         -4.5380e-02,  7.3775e-02, -1.3183e-01, -7.9236e-02, -2.4590e-02,
         -2.3821e-03,  3.9750e-02, -2.1965e-01,  4.3505e-01, -4.4900e-01,
         -5.2590e-02, -1.3918e-01,  3.3484e-01, -1.1743e-01,  1.2405e-01,
         -2.5072e-01,  2.5054e-02, -2.7462e-01,  1.9982e-01,  4.6153e-01,
          1.8624e-01, -3.9413e-01,  1.2168e-01,  1.0977e-01, -4.4286e-02,
         -1.9219e-01,  2.6162e-01, -4.5441e-01, -2.6456e-02, -3.2760e-01,
          1.4379e-01, -1.2730e-02, -1.0327e-01,  2.4560e-01,  1.4531e-01,
         -4.9803e-01,  9.9976e-02]], device='cuda:0')
收敛loss为： ('收敛', tensor(0.6334))
tensor([[ 3.5750e-02,  1.7169e-01,  1.4082e-01, -3.9460e-01, -2.0286e-01,
          8.9000e-01, -7.9226e-01, -2.2006e-01, -8.3259e-01,  8.5063e-01,
          1.0143e+00, -5.0859e-01, -5.4861e-02, -2.1781e-01,  7.2186e-02,
         -6.2331e-02,  1.1498e-01,  7.7039e-02, -1.1897e-01,  8.7862e-02,
          6.0733e-02,  6.3849e-02, -4.7628e-02,  2.8587e-01,  1.0736e-02,
          1.2776e-01, -4.5413e-02, -1.1787e-01, -2.2438e-02,  1.0124e-02,
         -1.8876e-01,  1.1640e-02,  6.7909e-02, -1.1457e-02,  1.5384e-01,
         -7.2746e-02,  1.6805e-01, -1.3343e-02, -8.6279e-04,  4.4842e-02,
         -1.1550e-01,  3.4065e-01, -1.2433e-01, -6.9846e-04,  2.9146e-01,
          3.5110e-01,  2.1512e-01, -4.2611e-01, -4.2831e-01,  7.0213e-01,
          6.7111e-02,  7.3094e-02,  3.5027e-01,  8.5653e-04, -8.8855e-02,
          2.1599e-01,  1.0530e-01,  1.6723e-01,  1.0720e-01,  2.9069e-01,
          1.4656e-01, -4.6606e-02, -1.7234e-01, -9.9312e-02, -1.7186e-01,
          4.0937e-02, -6.4611e-01, -5.9950e-02, -3.5873e-01,  1.0693e-01,
         -1.5273e-01,  1.0463e-01]], device='cuda:0')
收敛loss为： ('收敛', tensor(0.6335))
tensor([[-0.7724, -0.5642, -0.1556, -0.2757,  0.2221,  1.3092,  1.4647, -0.2534,
         -1.0929,  0.4633, -0.6667,  0.4911,  0.1214, -0.0452, -0.0209, -0.2568,
          0.0642, -0.1043,  0.1781,  0.0932,  0.2063, -0.0691,  0.0777,  0.1007,
         -0.0410, -0.0598,  0.1005,  0.1500,  0.1173,  0.1219,  0.1897, -0.0482,
          0.0302, -0.1071,  0.0562,  0.0858, -0.0185,  0.0534, -0.0761, -0.1749,
         -0.0491,  0.1915,  0.0496,  0.3928, -0.6914,  0.5500, -0.0407, -0.1097,
          0.4850, -0.1608,  0.0515, -0.0214, -0.2475,  0.2931,  0.1993, -0.0278,
         -0.2501,  0.0389,  0.2156, -0.1411, -0.4440,  0.2365, -0.1846, -0.0029,
          0.5592,  0.1711, -0.0748, -0.0826,  0.0709,  0.0055, -0.7412,  0.1650]],
       device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.6418))
tensor([[ 1.1983, -0.3765, -0.0465, -0.5787, -0.8698, -0.0181, -0.2342,  0.9168,
         -1.0879, -0.8677,  0.7028, -0.9171, -0.1031,  0.1011,  0.1140,  0.2002,
          0.0589,  0.1828, -0.0456,  0.0354, -0.0613,  0.0151, -0.0092,  0.0771,
          0.0202, -0.1516, -0.1578,  0.0974,  0.0070, -0.0326,  0.2397, -0.0123,
         -0.0426,  0.1788, -0.0364,  0.0015, -0.0763, -0.0621, -0.0027,  0.0834,
         -0.0474,  0.0873, -0.5643,  0.0373,  0.4757,  0.2205, -0.1780, -0.2032,
          0.3583, -0.3934,  0.1468,  0.0107,  0.2742,  0.0319, -0.1100, -0.1801,
         -0.0901,  0.2509,  0.3597, -0.0356, -0.1740,  0.0545,  0.0332, -0.0938,
         -0.1522, -0.1579, -0.3475, -0.0127, -0.1950,  0.0533,  0.6689,  0.2025]],
       device='cuda:0')
收敛loss为： ('收敛', tensor(0.6432))
tensor([[-0.0201,  0.4652,  0.1739, -0.6574,  0.4851, -0.3654,  0.3294, -0.3177,
          0.2779,  0.2268, -0.7374, -0.3374, -0.2398, -0.0902,  0.0638, -0.0108,
         -0.0747, -0.2198, -0.1098,  0.0819, -0.0506,  0.1068,  0.0261,  0.0443,
          0.1951,  0.1782,  0.0943,  0.1836,  0.0545, -0.0429, -0.0150, -0.1515,
          0.1065,  0.2687,  0.1016, -0.0169, -0.0791, -0.0896, -0.1157, -0.0814,
          0.1692,  0.2509,  0.0645, -0.0375,  0.0350, -0.3023, -0.0818, -0.2332,
          0.1385,  0.1038,  0.0376,  0.0690, -0.4931, -0.0616, -0.3081, -0.0768,
         -0.1926,  0.1654,  0.4675,  0.2018, -0.0607,  0.2181,  0.2651,  0.0566,
         -0.0568,  0.1839, -0.3130, -0.0357,  0.6564,  0.1300, -0.7007,  0.0678]],
       device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.6448))
tensor([[-0.1353,  0.7673, -0.4520,  0.2719,  0.7170,  0.3214, -0.5296, -0.1412,
         -0.0553,  0.3396, -0.3527,  0.8259, -0.1906,  0.0953, -0.0428, -0.0358,
          0.1289, -0.1247, -0.1815,  0.0217, -0.0887,  0.2487,  0.2919,  0.0881,
         -0.0261,  0.0195,  0.1135, -0.0711, -0.0438, -0.1027, -0.0127, -0.0597,
          0.0157, -0.0118,  0.0176, -0.0190, -0.1536,  0.0286,  0.0763,  0.0257,
          0.0155,  0.1872,  0.1615,  0.3000, -0.1848, -0.3619, -0.2240, -0.1019,
         -0.3786,  0.6837, -0.0819,  0.1214,  0.2737,  0.1092,  0.0467,  0.0504,
         -0.4140, -0.0657, -0.0250, -0.0055,  0.3185,  0.1053, -0.2818,  0.0073,
         -0.8480,  0.0617,  0.1491,  0.0016, -0.1814,  0.1535, -0.4246,  0.1062]],
       device='cuda:0')
收敛loss为： ('收敛', tensor(0.6573))
tensor([[-0.1449, -0.9199,  0.1778, -0.3372, -0.2215, -0.6174,  0.1052,  0.3536,
          0.0176,  0.2919, -0.8015,  1.2697,  0.3169, -0.0073, -0.0352,  0.1002,
         -0.0016, -0.0505,  0.1353,  0.0621,  0.0306, -0.0454, -0.1494,  0.0930,
         -0.2282,  0.0715,  0.1604,  0.0812, -0.0231, -0.1225,  0.1447, -0.0460,
          0.1002, -0.0208, -0.0495, -0.0562, -0.2006,  0.0038, -0.1659, -0.0810,
         -0.0884,  0.0144, -0.1744,  0.3991, -0.3380,  0.0988,  0.1268, -0.2835,
         -0.4002,  0.6508,  0.3192,  0.0186,  0.0422,  0.1762,  0.0109,  0.3313,
         -0.3235,  0.1237,  0.0401, -0.1126,  0.1011,  0.0971, -0.2828,  0.0254,
         -0.2447, -0.2031,  0.1776, -0.0397,  0.4281,  0.2729, -0.2925,  0.1449]],
       device='cuda:0')
收敛loss为： ('收敛', tensor(0.6639))
tensor([[ 0.2764,  0.6302, -0.6687, -0.2034, -0.4790,  0.7551, -0.1401,  1.0776,
         -0.0351, -1.0378,  0.6884, -0.1378,  0.1044, -0.2273, -0.0673, -0.0033,
          0.0117, -0.0517,  0.1586, -0.0139,  0.0400,  0.0787, -0.0120,  0.0692,
          0.1316, -0.0914, -0.0607,  0.1745,  0.0274, -0.0965,  0.0213, -0.0396,
         -0.1005, -0.0431,  0.0074, -0.0570, -0.0557, -0.0226, -0.2628,  0.0757,
         -0.0653,  0.2401, -0.4253,  0.7491, -0.3596, -0.0303, -0.0665, -0.1068,
         -0.1723, -0.1727,  0.4874, -0.0188,  0.7399,  0.2700,  0.0302, -0.0050,
         -0.3209,  0.4036, -0.2100,  0.1292, -0.2622,  0.1087, -0.0495, -0.0228,
         -0.1478, -0.0143,  0.2851, -0.0254, -0.1369,  0.0191, -0.0228,  0.1043]],
       device='cuda:0')
收敛loss为： ('收敛', tensor(0.6689))
tensor([[ 0.2094,  0.1349,  0.0432,  0.3016, -0.2539, -0.0693, -0.4992,  1.0547,
          0.3646, -0.2284,  0.0779, -0.3187, -0.2339,  0.0552, -0.0998,  0.0230,
          0.0973, -0.0544,  0.2409,  0.1241, -0.0452, -0.0694,  0.1230,  0.2298,
         -0.1318, -0.2166, -0.0696, -0.1306, -0.0763,  0.0462,  0.2530,  0.0319,
          0.1483, -0.1652, -0.0310, -0.0416,  0.1783,  0.0320,  0.2397,  0.0834,
          0.0866,  0.2319, -0.2087, -0.0798,  0.2363,  0.0504, -0.1739, -0.1906,
          0.4236, -0.1445, -0.5218, -0.0472, -0.3209,  0.1515, -0.1412,  0.5534,
          0.0402,  0.1185,  0.1481, -0.2152,  0.3678,  0.1387, -0.2997, -0.1023,
         -0.5594,  0.0533, -0.0500, -0.0898, -0.0245, -0.0539,  0.1260,  0.0778]],
       device='cuda:0')
收敛loss为： ('超出最大迭代次数', tensor(0.6885))
tensor([[-0.5717, -0.4506,  0.1276,  0.0446, -0.0873,  0.8906,  0.8125,  0.2593,
         -0.0113, -0.5916, -0.0266, -0.7471,  0.0953,  0.0070,  0.1686, -0.1313,
         -0.0906,  0.1211, -0.2270, -0.0884,  0.2731, -0.1547, -0.0672, -0.2736,
          0.0743, -0.0660, -0.0802,  0.0485,  0.0202, -0.0364, -0.1145, -0.0482,
         -0.0909,  0.1392, -0.0837, -0.0745,  0.1288,  0.0240,  0.1068,  0.1096,
          0.0988, -0.0318, -0.0906, -0.3593,  0.7292,  0.1003, -0.0624,  0.0888,
          0.3329, -0.0605, -0.0626, -0.0519, -0.4507, -0.1438,  0.1478,  0.0048,
         -0.6105,  0.2069,  0.0199,  0.4108, -0.1081, -0.1027,  0.1663,  0.0410,
         -0.1003,  0.2852,  0.1326,  0.0369, -0.3111, -0.2092,  0.3580,  0.2788]],
       device='cuda:0')
4432.18581032753
         3404067842 function calls (3401389870 primitive calls) in 4478.296 seconds

   Ordered by: cumulative time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
   2837/1    0.064    0.000 4478.301 4478.301 {built-in method builtins.exec}
        1    0.001    0.001 4478.301 4478.301 test.py:1(<module>)
        1   61.719   61.719 4432.185 4432.185 para4band.py:230(train)
  1000000   10.559    0.000 1890.125    0.002 optimizer.py:265(wrapper)
  1000000    7.257    0.000 1852.728    0.002 optimizer.py:29(_use_grad)
  1000000    5.850    0.000 1842.075    0.002 adam.py:108(step)
  1000000   59.502    0.000 1629.084    0.002 adam.py:231(adam)
  1000000   14.349    0.000 1517.876    0.002 adam.py:396(_multi_tensor_adam)
  1000000   48.414    0.000 1382.256    0.001 para4band.py:168(loss)
  1000000    3.639    0.000  917.618    0.001 _tensor.py:428(backward)
  1000000    4.353    0.000  913.688    0.001 __init__.py:106(backward)
  1000000  888.874    0.001  888.874    0.001 {method 'run_backward' of 'torch._C._EngineBase' objects}
2000000/1000000    5.900    0.000  819.399    0.001 module.py:1494(_call_impl)
  1000000    7.183    0.000  815.171    0.001 para4band.py:111(forward)
  1000029    1.813    0.000  527.916    0.001 para4tb.py:113(create_model_function)
  1000029  169.617    0.000  526.104    0.001 para4tb.py:87(__create_TB_function)
  2000332  426.418    0.000  426.418    0.000 {built-in method torch._foreach_add_}
  1000029   12.794    0.000  280.215    0.000 para4tb.py:92(<listcomp>)
 73077088   23.762    0.000  267.714    0.000 container.py:629(<genexpr>)
 72076032   55.722    0.000  243.952    0.000 container.py:603(__getitem__)
  1000166  240.301    0.000  240.301    0.000 {built-in method torch._foreach_addcmul_}
  1000000   81.221    0.000  235.121    0.000 para4band.py:155(loss3)
  1000000  145.487    0.000  191.537    0.000 adam.py:66(_init_group)
  1000000    2.520    0.000  176.885    0.000 _contextlib.py:112(decorate_context)
  1004717   21.778    0.000  169.100    0.000 para4tb.py:101(matrix_function)
  1000000  136.747    0.000  167.328    0.000 _foreach_utils.py:20(_group_tensors_by_device_and_dtype)
  4004717  157.816    0.000  157.816    0.000 {built-in method torch.matmul}
      295    0.011    0.000  149.882    0.508 __init__.py:1(<module>)
  1000000   29.410    0.000  147.321    0.000 para4band.py:145(loss2)
144000332   88.979    0.000  145.320    0.000 optimizer.py:39(_get_value)
  1000000   28.776    0.000  124.473    0.000 para4band.py:136(loss1)
 72078048   51.915    0.000  102.822    0.000 container.py:586(_get_abs_string_index)
  1000166   25.609    0.000  102.286    0.000 adam.py:489(<listcomp>)
  2009434   12.002    0.000   99.744    0.000 functional.py:192(einsum)
  1000000    6.074    0.000   99.091    0.000 para4band.py:76(forward)
  1000166   91.071    0.000   91.071    0.000 {built-in method torch._foreach_add}
  1000166   22.428    0.000   91.070    0.000 adam.py:490(<listcomp>)
  1000166   87.915    0.000   87.915    0.000 {built-in method torch._foreach_sqrt}
  2009434   84.220    0.000   84.220    0.000 {built-in method torch.einsum}
 77186199   56.909    0.000   78.455    0.000 {built-in method builtins.getattr}
  1000166   13.729    0.000   75.464    0.000 adam.py:494(<listcomp>)
  1000000   43.887    0.000   73.947    0.000 optimizer.py:435(zero_grad)
  2000001   72.301    0.000   72.301    0.000 {built-in method torch.sort}
  6718824   71.179    0.000   71.179    0.000 {built-in method torch.mean}
   720929   65.252    0.000   65.252    0.000 {built-in method torch.tensor}
 72000166   42.654    0.000   61.735    0.000 optimizer.py:52(_dispatch_sqrt)
308681200/308678099   41.300    0.000   57.338    0.000 {built-in method builtins.len}
  3000000   56.309    0.000   56.309    0.000 {built-in method torch.abs}
  3000000   53.803    0.000   53.803    0.000 {built-in method torch.topk}
288000664   53.095    0.000   53.095    0.000 {built-in method torch.is_complex}
  3038441   12.843    0.000   49.761    0.000 {built-in method builtins.all}
145073639   46.810    0.000   46.810    0.000 {method 'item' of 'torch._C._TensorBase' objects}
722105546   43.216    0.000   43.216    0.000 {method 'append' of 'list' objects}
   2671/5    0.013    0.000   42.641    8.528 <frozen importlib._bootstrap>:1167(_find_and_load)
   2637/5    0.010    0.000   42.640    8.528 <frozen importlib._bootstrap>:1122(_find_and_load_unlocked)
  2361/12    0.008    0.000   42.624    3.552 <frozen importlib._bootstrap>:666(_load_unlocked)
   2163/5    0.005    0.000   42.624    8.525 <frozen importlib._bootstrap_external>:934(exec_module)
  5725/13    0.003    0.000   42.462    3.266 <frozen importlib._bootstrap>:233(_call_with_frames_removed)
  1001056   39.186    0.000   39.186    0.000 {built-in method torch.stack}
  1000166   38.734    0.000   38.734    0.000 {built-in method torch._foreach_div_}
  1074/92    0.002    0.000   37.314    0.406 {built-in method builtins.__import__}
  3004747   35.746    0.000   35.763    0.000 {method 'type' of 'torch._C._TensorBase' objects}
  1000166   34.257    0.000   34.257    0.000 {built-in method torch._foreach_addcdiv_}
  2000332   33.024    0.000   33.024    0.000 {built-in method torch._foreach_mul_}
     2163    0.014    0.000   30.545    0.014 <frozen importlib._bootstrap_external>:1007(get_code)
     2163    0.006    0.000   30.184    0.014 <frozen importlib._bootstrap_external>:1127(get_data)
 2430/662    0.005    0.000   29.620    0.045 <frozen importlib._bootstrap>:1209(_handle_fromlist)
  1000000    1.877    0.000   27.034    0.000 optimizer.py:64(_default_to_fused_or_foreach)
 78083848   26.860    0.000   26.865    0.000 module.py:1601(__getattr__)
  2000000    3.968    0.000   26.317    0.000 profiler.py:491(__enter__)
  1000166   13.081    0.000   26.303    0.000 adam.py:433(<listcomp>)
227162672/226147721   23.412    0.000   25.439    0.000 {built-in method builtins.isinstance}
  1000166   11.274    0.000   24.745    0.000 adam.py:436(<listcomp>)
  1000166   11.381    0.000   24.565    0.000 adam.py:434(<listcomp>)
  1000166   11.169    0.000   24.388    0.000 adam.py:435(<listcomp>)
2239/2169   23.869    0.011   24.008    0.011 {method 'read' of '_io.BufferedReader' objects}
  2000000    1.515    0.000   22.350    0.000 _ops.py:497(__call__)
  2000000    9.261    0.000   21.616    0.000 profiler.py:495(__exit__)
  2000000   20.835    0.000   20.835    0.000 {built-in method torch._ops.profiler._record_function_enter_new}
  1000031   20.139    0.000   20.139    0.000 {built-in method torch.zeros}
 72010386   13.420    0.000   19.863    0.000 _tensor.py:942(__hash__)
  1000000    3.966    0.000   18.768    0.000 __init__.py:50(_make_grads)
 73000166   14.746    0.000   18.664    0.000 adam.py:268(<genexpr>)
 73000166   18.241    0.000   18.241    0.000 optimizer.py:72(<genexpr>)
  1000001   17.584    0.000   17.584    0.000 {built-in method torch.diag_embed}
  1000000   16.684    0.000   16.684    0.000 {method 'repeat' of 'torch._C._TensorBase' objects}
145159195   16.037    0.000   16.037    0.000 container.py:625(__len__)
  1000000    1.956    0.000   15.294    0.000 optimizer.py:228(_cuda_graph_capture_health_check)
223008796   15.288    0.000   15.288    0.000 _jit_internal.py:1102(is_scripting)
  1000000   13.985    0.000   13.985    0.000 {built-in method torch.ones_like}
  2000000    1.462    0.000   11.677    0.000 _ops.py:286(__call__)
  1000002    1.557    0.000   10.969    0.000 __init__.py:94(is_available)
   718824    5.522    0.000   10.898    0.000 functional.py:1387(norm)
        1    0.000    0.000   10.434   10.434 _meta_registrations.py:1(<module>)
  2000000   10.285    0.000   10.285    0.000 {method 'view' of 'torch._C._TensorBase' objects}
  2000000   10.215    0.000   10.215    0.000 {built-in method torch._ops.profiler.}
        2    0.001    0.000   10.062    5.031 decompositions.py:1(<module>)
  2000000    9.903    0.000    9.903    0.000 {built-in method torch.diagonal}
        1    0.000    0.000    9.712    9.712 fake_tensor.py:1(<module>)
        1    0.000    0.000    9.658    9.658 _guards.py:1(<module>)
145000498    9.113    0.000    9.113    0.000 _utils.py:786(is_compiling)
  1018289    5.220    0.000    9.101    0.000 module.py:1617(__setattr__)
  2000001    8.843    0.000    8.843    0.000 {method 'transpose' of 'torch._C._TensorBase' objects}
        1    0.000    0.000    8.640    8.640 band_data_in.py:1(<module>)
  1000002    1.047    0.000    8.130    0.000 __init__.py:91(_nvml_based_avail)
  1004717    7.829    0.000    7.829    0.000 {built-in method torch.exp}
  1000027    7.529    0.000    7.529    0.000 {built-in method torch.randn}
  1000024    0.752    0.000    7.083    0.000 <frozen os>:772(getenv)
2361/2230    0.004    0.000    7.024    0.003 <frozen importlib._bootstrap>:566(module_from_spec)
  160/140    0.000    0.000    6.972    0.050 <frozen importlib._bootstrap_external>:1231(create_module)
  160/140    4.958    0.031    6.972    0.050 {built-in method _imp.create_dynamic}
  2000000    4.329    0.000    6.641    0.000 profiler.py:482(__init__)
 72033540    6.445    0.000    6.445    0.000 {built-in method builtins.id}
     2163    6.353    0.003    6.353    0.003 {built-in method io.open_code}
  1001245    1.822    0.000    6.331    0.000 <frozen _collections_abc>:771(get)
        1    0.000    0.000    6.072    6.072 outputs.py:1(<module>)
 72000173    5.875    0.000    5.875    0.000 {built-in method math.sqrt}
        1    0.000    0.000    5.240    5.240 dos.py:1(<module>)
 72084401    5.192    0.000    5.192    0.000 {built-in method _operator.index}
        3    0.000    0.000    5.151    1.717 _support_alternative_backends.py:1(<module>)
  1000166    5.093    0.000    5.093    0.000 adam.py:492(<listcomp>)
   718824    5.014    0.000    5.014    0.000 {built-in method torch._C._linalg.linalg_vector_norm}
  4016244    3.568    0.000    4.985    0.000 grad_mode.py:149(__init__)
        1    0.000    0.000    4.941    4.941 _signal_api.py:1(<module>)
  1000000    4.913    0.000    4.913    0.000 {built-in method torch.flatten}
     4717    0.039    0.000    4.758    0.001 para4band.py:101(init_trans_matrix)
2498/2416    0.019    0.000    4.742    0.002 <frozen importlib._bootstrap>:1056(_find_spec)
  1000356    3.082    0.000    4.509    0.000 <frozen os>:673(__getitem__)
  1000000    4.154    0.000    4.154    0.000 {built-in method torch.conj}
     2491    0.002    0.000    4.118    0.002 <frozen importlib._bootstrap_external>:1496(find_spec)
2504/2491    0.008    0.000    4.116    0.002 <frozen importlib._bootstrap_external>:1464(_get_spec)
     3709    0.028    0.000    4.094    0.001 <frozen importlib._bootstrap_external>:1604(find_spec)
        5    0.000    0.000    4.086    0.817 functional.py:1(<module>)
    10795    4.030    0.000    4.030    0.000 {built-in method posix.stat}
    10622    0.004    0.000    4.024    0.000 <frozen importlib._bootstrap_external>:140(_path_stat)
     4458    0.003    0.000    3.969    0.001 <frozen importlib._bootstrap_external>:150(_path_is_mode_type)
     4007    0.002    0.000    3.969    0.001 <frozen importlib._bootstrap_external>:159(_path_isfile)
  1000000    3.867    0.000    3.867    0.000 {method 'conj' of 'torch._C._TensorBase' objects}
        1    0.000    0.000    3.549    3.549 para4band.py:123(__init__)
        1    0.000    0.000    3.549    3.549 para4band.py:83(__init__)
        1    0.000    0.000    3.548    3.548 para4tb.py:13(__init__)
  1001056    2.086    0.000    3.523    0.000 container.py:628(__iter__)
  1000000    2.647    0.000    3.283    0.000 _foreach_utils.py:24(<listcomp>)
        1    0.000    0.000    3.057    3.057 tight_binding_hamiltonian.py:1(<module>)
    11181    1.548    0.000    2.939    0.000 {method 'to' of 'torch._C._TensorBase' objects}
       28    0.000    0.000    2.936    0.105 module.py:1039(to)
       28    0.006    0.000    2.936    0.105 module.py:795(_apply)
     2016    0.001    0.000    2.920    0.001 module.py:1139(convert)
        1    0.000    0.000    2.886    2.886 Orbit_spd_manager.py:1(<module>)
        1    0.000    0.000    2.867    2.867 Orbit_spd_with_spin.py:1(<module>)
        1    0.000    0.000    2.851    2.851 Orbit_spd_without_spin.py:1(<module>)
        1    0.000    0.000    2.849    2.849 Orbit_spd.py:1(<module>)
        1    0.000    0.000    2.817    2.817 band.py:1(<module>)
  1000000    0.894    0.000    2.747    0.000 _contextlib.py:141(clone)
  2006107    2.705    0.000    2.705    0.000 {built-in method torch._C._get_tracing_state}
  160/128    0.000    0.000    2.508    0.020 <frozen importlib._bootstrap_external>:1239(exec_module)
  160/128    0.015    0.000    2.508    0.020 {built-in method _imp.exec_dynamic}
        1    0.000    0.000    2.483    2.483 inputs.py:1(<module>)
  1008122    1.258    0.000    2.481    0.000 grad_mode.py:53(__enter__)
  1014609    1.818    0.000    2.259    0.000 parameter.py:8(__instancecheck__)
        1    0.000    0.000    2.218    2.218 polyfuncs.py:1(<module>)
        1    0.000    0.000    2.215    2.215 specialpolys.py:1(<module>)
        1    0.000    0.000    2.205    2.205 _spline_filters.py:1(<module>)
        1    0.000    0.000    2.180    2.180 _signaltools.py:1(<module>)
  1000000    0.390    0.000    2.159    0.000 graphs.py:19(is_current_stream_capturing)
     1087    0.013    0.000    2.157    0.002 {built-in method builtins.print}
        1    0.000    0.000    2.145    2.145 _ltisys.py:1(<module>)
     3053    0.009    0.000    2.144    0.001 _tensor.py:420(__repr__)
     3053    0.030    0.000    2.135    0.001 _tensor_str.py:633(_str)
2003902/2003650    2.052    0.000    2.100    0.000 typing.py:357(inner)
        1    0.000    0.000    2.065    2.065 _peak_finding.py:1(<module>)
     3053    0.087    0.000    2.052    0.001 _tensor_str.py:366(_str_intern)
     4717    1.954    0.000    1.954    0.000 {built-in method torch._C._linalg.linalg_eigh}
     3053    0.024    0.000    1.916    0.001 _tensor_str.py:287(_tensor_str)
        1    0.000    0.000    1.880    1.880 _interpolate.py:1(<module>)
  1008132    1.771    0.000    1.864    0.000 grad_mode.py:48(__init__)
    46/41    0.000    0.000    1.853    0.045 __init__.py:108(import_module)
    47/41    0.000    0.000    1.853    0.045 <frozen importlib._bootstrap>:1194(_gcd_import)
  1000166    1.224    0.000    1.843    0.000 _foreach_utils.py:27(<lambda>)
  1008122    0.849    0.000    1.841    0.000 grad_mode.py:57(__exit__)
        1    0.000    0.000    1.828    1.828 rings.py:1(<module>)
        1    0.000    0.000    1.781    1.781 _fitpack_py.py:1(<module>)
  1000000    1.769    0.000    1.769    0.000 {built-in method torch._C._cuda_isCurrentStreamCapturing}
2050515/2050174    0.708    0.000    1.750    0.000 {built-in method builtins.hasattr}
  1318205    1.105    0.000    1.711    0.000 {method 'format' of 'str' objects}
        1    0.000    0.000    1.696    1.696 _bsplines.py:1(<module>)
        1    0.000    0.000    1.664    1.664 pyplot.py:1(<module>)
     3053    0.380    0.000    1.663    0.001 _tensor_str.py:100(__init__)
  2009446    1.110    0.000    1.652    0.000 _VF.py:26(__getattr__)
  1000364    0.851    0.000    1.427    0.000 <frozen os>:755(encode)
      4/1    0.000    0.000    1.391    1.391 __init__.py:219(_lazy_init)
       10    0.000    0.000    1.376    0.138 linear.py:1(<module>)
  6024366    1.351    0.000    1.351    0.000 {built-in method torch.is_grad_enabled}
        1    1.350    1.350    1.350    1.350 {built-in method torch._C._cuda_init}
        1    0.000    0.000    1.222    1.222 _stats_py.py:1(<module>)
        1    0.000    0.000    1.143    1.143 _jit_internal.py:1(<module>)
        1    0.000    0.000    1.122    1.122 pycode.py:1(<module>)
        1    0.000    0.000    1.118    1.118 eager_transforms.py:1(<module>)
        1    0.000    0.000    1.117    1.117 codeprinter.py:1(<module>)
        1    0.000    0.000    1.045    1.045 distributions.py:1(<module>)
        1    0.000    0.000    1.023    1.023 partfrac.py:1(<module>)
        1    0.000    0.000    1.023    1.023 decorator.py:65(xthreaded)
        1    0.000    0.000    1.023    1.023 decorator.py:16(threaded_factory)
5017/4863    0.070    0.000    1.009    0.000 {built-in method builtins.__build_class__}
        3    0.000    0.000    0.998    0.333 __config__.py:1(<module>)
       31    0.000    0.000    0.954    0.031 __init__.py:129(__getattr__)
        1    0.000    0.000    0.931    0.931 polytools.py:1(<module>)
       19    0.001    0.000    0.913    0.048 utils.py:1(<module>)
  1000003    0.513    0.000    0.896    0.000 __init__.py:87(_is_compiled)
  4109672    0.841    0.000    0.841    0.000 {method 'get' of 'dict' objects}
        2    0.000    0.000    0.836    0.418 constructor.py:1(<module>)
        1    0.000    0.000    0.811    0.811 ctx_fp.py:1(<module>)
        1    0.000    0.000    0.792    0.792 hub.py:1(<module>)
        5    0.000    0.000    0.769    0.154 errors.py:1(<module>)
        2    0.000    0.000    0.765    0.383 python.py:1(<module>)
        1    0.000    0.000    0.760    0.760 ctx_base.py:1(<module>)
        1    0.000    0.000    0.752    0.752 proxy_tensor.py:1(<module>)
        6    0.000    0.000    0.727    0.121 __init__.py:274(load)
        1    0.000    0.000    0.726    0.726 sympify.py:1(<module>)
2500/2416    0.002    0.000    0.717    0.000 __init__.py:101(find_spec)
      2/1    0.000    0.000    0.714    0.714 __init__.py:111(spec_for_distutils)
        5    0.000    0.000    0.710    0.142 serialization.py:28(loadfn)
  1000166    0.586    0.000    0.705    0.000 optimizer.py:46(_stack_if_compiling)
        1    0.000    0.000    0.703    0.703 _diagnostic.py:1(<module>)
        1    0.000    0.000    0.698    0.698 _geometric_slerp.py:1(<module>)
        1    0.000    0.000    0.694    0.694 colorbar.py:1(<module>)
  4016244    0.692    0.000    0.692    0.000 {built-in method torch._C._set_grad_enabled}
        2    0.000    0.000    0.670    0.335 quantize.py:1(<module>)
        1    0.000    0.000    0.656    0.656 _kdtree.py:1(<module>)
        2    0.000    0.000    0.654    0.327 distance.py:1(<module>)
        1    0.000    0.000    0.652    0.652 _optimize.py:1(<module>)
        1    0.000    0.000    0.639    0.639 distributed_c10d.py:1(<module>)
        1    0.000    0.000    0.621    0.621 figure.py:1(<module>)
        1    0.000    0.000    0.609    0.609 _distn_infrastructure.py:1(<module>)
    75970    0.079    0.000    0.606    0.000 _tensor.py:868(__format__)
  2009434    0.602    0.000    0.602    0.000 {built-in method torch._C._has_torch_function}
        1    0.000    0.000    0.598    0.598 _infra.py:1(<module>)
  4011481    0.588    0.000    0.588    0.000 {method 'values' of 'collections.OrderedDict' objects}
        1    0.000    0.000    0.586    0.586 inputs.py:1947(PotcarSingle)
        1    0.000    0.000    0.580    0.580 expr.py:1(<module>)
  1000166    0.557    0.000    0.557    0.000 _foreach_utils.py:27(<listcomp>)
        1    0.000    0.000    0.543    0.543 formatter.py:1(<module>)
  1000000    0.531    0.000    0.531    0.000 {built-in method torch._C._are_functorch_transforms_active}
        1    0.000    0.000    0.528    0.528 _subplots.py:1(<module>)
  1797847    0.516    0.000    0.516    0.000 {built-in method torch._C._has_torch_function_unary}
        2    0.000    0.000    0.506    0.253 dense.py:1(<module>)
        1    0.000    0.000    0.504    0.504 _axes.py:1(<module>)
        1    0.004    0.004    0.503    0.503 {built-in method torch._C._initExtension}
        1    0.000    0.000    0.501    0.501 mock.py:1(<module>)
        1    0.000    0.000    0.489    0.489 request.py:1(<module>)
        7    0.004    0.001    0.489    0.070 __init__.py:299(loads)
        5    0.000    0.000    0.483    0.097 json.py:885(decode)
        1    0.000    0.000    0.474    0.474 json.py:1(<module>)
        1    0.000    0.000    0.470    0.470 contour.py:1(<module>)
  1000499    0.458    0.000    0.458    0.000 {method 'encode' of 'str' objects}
  1000000    0.452    0.000    0.452    0.000 __init__.py:98(_tensor_or_tensors_to_tuple)
        3    0.000    0.000    0.451    0.150 __init__.py:342(__init__)
        3    0.451    0.150    0.451    0.150 {built-in method _ctypes.dlopen}
  2000000    0.450    0.000    0.450    0.000 {method '__exit__' of 'torch._C.DisableTorchFunctionSubclass' objects}
        1    0.000    0.000    0.449    0.449 client.py:1(<module>)
        1    0.000    0.000    0.444    0.444 para4tb.py:32(load_and_check_matrix)
        2    0.000    0.000    0.443    0.222 structure.py:1(<module>)
        2    0.000    0.000    0.439    0.220 dist.py:1(<module>)
        3    0.000    0.000    0.438    0.146 numbers.py:1(<module>)
        1    0.000    0.000    0.434    0.434 __init__.py:159(_load_global_deps)
        1    0.000    0.000    0.425    0.425 immutable.py:1(<module>)
        1    0.000    0.000    0.419    0.419 matrixbase.py:1(<module>)
  1012212    0.412    0.000    0.412    0.000 {method 'numel' of 'torch._C._TensorBase' objects}
        1    0.000    0.000    0.398    0.398 cyaml.py:1(<module>)
     1000    0.028    0.000    0.396    0.000 para4band.py:321(<listcomp>)
       12    0.001    0.000    0.391    0.033 core.py:1(<module>)
 571498/5    0.176    0.000    0.389    0.078 json.py:728(process_decoded)
26830/756    0.064    0.000    0.388    0.001 json.py:876(<dictcomp>)
  1000002    0.387    0.000    0.387    0.000 {built-in method torch._C._cuda_getDeviceCount}
        1    0.000    0.000    0.385    0.385 _windows.py:1(<module>)
        1    0.000    0.000    0.384    0.384 symbolic_opset11.py:1(<module>)
        4    0.000    0.000    0.376    0.094 _base.py:1(<module>)
23121/12951    0.076    0.000    0.356    0.000 json.py:881(<listcomp>)
        1    0.000    0.000    0.356    0.356 _misc.py:1(<module>)
        1    0.000    0.000    0.354    0.354 wannier90.py:1(<module>)
        2    0.000    0.000    0.351    0.175 parser.py:1(<module>)
        4    0.000    0.000    0.343    0.086 basic.py:1(<module>)
        1    0.000    0.000    0.333    0.333 base_events.py:1(<module>)
        2    0.000    0.000    0.333    0.167 function.py:1(<module>)
        1    0.000    0.000    0.325    0.325 _pickle.py:1(<module>)
        4    0.000    0.000    0.324    0.081 random.py:1(<module>)
        1    0.000    0.000    0.320    0.320 _minimize.py:1(<module>)
        1    0.000    0.000    0.309    0.309 const_fold.py:1(<module>)
        1    0.000    0.000    0.307    0.307 _linprog.py:1(<module>)
        2    0.000    0.000    0.307    0.153 text.py:1(<module>)
     2163    0.006    0.000    0.301    0.000 <frozen importlib._bootstrap_external>:727(_compile_bytecode)
        1    0.000    0.000    0.298    0.298 mul.py:1(<module>)
        1    0.000    0.000    0.293    0.293 multiarray.py:1(<module>)
     2163    0.292    0.000    0.292    0.000 {built-in method marshal.loads}
        1    0.000    0.000    0.291    0.291 products.py:1(<module>)
        2    0.000    0.000    0.287    0.143 fake_quantize.py:1(<module>)
        1    0.000    0.000    0.279    0.279 index_tricks.py:1(<module>)
        1    0.000    0.000    0.275    0.275 _sputils.py:1(<module>)
        1    0.000    0.000    0.273    0.273 feedparser.py:1(<module>)
        1    0.000    0.000    0.273    0.273 algebraicfield.py:1(<module>)
        1    0.000    0.000    0.268    0.268 slice.py:1(<module>)
        2    0.000    0.000    0.265    0.133 overrides.py:1(<module>)
        3    0.000    0.000    0.263    0.088 reductions.py:1(<module>)
  2000000    0.262    0.000    0.262    0.000 __init__.py:89(annotate)
        2    0.000    0.000    0.258    0.129 utilities.py:1(<module>)
       10    0.097    0.010    0.258    0.026 {method 'read' of '_io.TextIOWrapper' objects}
        2    0.000    0.000    0.257    0.129 observer.py:1(<module>)
        1    0.000    0.000    0.256    0.256 textpath.py:1(<module>)
        1    0.000    0.000    0.254    0.254 matexpr.py:1(<module>)
1008241/1008236    0.250    0.000    0.250    0.000 {built-in method builtins.iter}
        3    0.000    0.000    0.248    0.083 serialization.py:1(<module>)
        2    0.000    0.000    0.247    0.124 _util.py:1(<module>)
        1    0.000    0.000    0.246    0.246 summations.py:1(<module>)
        1    0.000    0.000    0.243    0.243 _array_api.py:1(<module>)
        1    0.021    0.021    0.238    0.238 {built-in method _pickle.load}
        1    0.000    0.000    0.229    0.229 _policybase.py:1(<module>)
        1    0.000    0.000    0.227    0.227 polyclasses.py:1(<module>)
4080/3053    0.011    0.000    0.225    0.000 _tensor_str.py:250(_tensor_str_with_formatter)
        1    0.000    0.000    0.223    0.223 memory.py:1(<module>)
        1    0.000    0.000    0.222    0.222 plot.py:1(<module>)
        1    0.000    0.000    0.221    0.221 rcsetup.py:1(<module>)
        1    0.000    0.000    0.221    0.221 defmatrix.py:1(<module>)
        1    0.000    0.000    0.218    0.218 mathtext.py:1(<module>)
        6    0.000    0.000    0.218    0.036 linear_relu.py:1(<module>)
        1    0.000    0.000    0.218    0.218 _helper.py:1(<module>)
 2056/183    0.001    0.000    0.217    0.001 cache.py:69(wrapper)
    28/25    0.000    0.000    0.216    0.009 operations.py:62(__new__)
       29    0.000    0.000    0.215    0.007 para4tb.py:126(set_zero_and_init_matrix_fuction)
        1    0.000    0.000    0.215    0.215 blas.py:1(<module>)
        5    0.000    0.000    0.213    0.043 add.py:197(flatten)
        2    0.000    0.000    0.211    0.106 quantization_mappings.py:1(<module>)
        1    0.000    0.000    0.208    0.208 _multicomp.py:1(<module>)
        1    0.000    0.000    0.206    0.206 _utils_internal.py:1(<module>)
 1159/799    0.001    0.000    0.206    0.000 {built-in method builtins.sum}
        2    0.000    0.000    0.206    0.103 callable.py:1(<module>)
      300    0.003    0.000    0.205    0.001 matrix_element.py:127(__add__)
        1    0.000    0.000    0.205    0.205 tempfile.py:1(<module>)
        1    0.000    0.000    0.204    0.204 matmul.py:1(<module>)
  1014609    0.202    0.000    0.202    0.000 {function _ParameterMeta.__instancecheck__ at 0x146bab123920}
        1    0.000    0.000    0.200    0.200 _memory_viz.py:1(<module>)
        3    0.000    0.000    0.197    0.066 linalg.py:1(<module>)
        1    0.000    0.000    0.197    0.197 datapipe.py:1(<module>)
     6024    0.009    0.000    0.195    0.000 numeric.py:2170(allclose)
     1027    0.007    0.000    0.195    0.000 _tensor_str.py:276(<listcomp>)
      245    0.000    0.000    0.194    0.001 _docscrape.py:579(__init__)
        1    0.000    0.000    0.193    0.193 _continuous_distns.py:1(<module>)
        1    0.000    0.000    0.191    0.191 tensor.py:1(<module>)
        1    0.000    0.000    0.191    0.191 _qmc.py:1(<module>)
        1    0.000    0.000    0.190    0.190 _script.py:1(<module>)
        4    0.000    0.000    0.189    0.047 eigen.py:1(<module>)
        1    0.000    0.000    0.188    0.188 maggroups.py:1(<module>)
        3    0.000    0.000    0.186    0.062 solvers.py:1(<module>)
        2    0.000    0.000    0.186    0.093 domainmatrix.py:1(<module>)
        1    0.000    0.000    0.186    0.186 override.py:1(<module>)
        1    0.000    0.000    0.186    0.186 __init__.py:80(do_override)
        1    0.000    0.000    0.186    0.186 __init__.py:63(ensure_local_distutils)
     1027    0.009    0.000    0.185    0.000 _tensor_str.py:208(_vector_str)
        6    0.000    0.000    0.183    0.031 conv.py:1(<module>)
        1    0.000    0.000    0.179    0.179 autograd_function.py:1(<module>)
        1    0.000    0.000    0.177    0.177 _ndimage_api.py:1(<module>)
        1    0.000    0.000    0.174    0.174 image.py:1(<module>)
        1    0.000    0.000    0.173    0.173 simplify.py:1(<module>)
      251    0.001    0.000    0.173    0.001 _docscrape.py:140(__init__)
        1    0.000    0.000    0.173    0.173 Image.py:1(<module>)
     4717    0.023    0.000    0.168    0.000 para4band.py:73(__init__)
  1001328    0.168    0.000    0.168    0.000 {method 'values' of 'dict' objects}
        1    0.000    0.000    0.166    0.166 power.py:1(<module>)
        1    0.000    0.000    0.164    0.164 composition.py:1(<module>)
     6024    0.024    0.000    0.164    0.000 numeric.py:2249(isclose)
        3    0.000    0.000    0.163    0.054 _basic.py:1(<module>)
        1    0.000    0.000    0.162    0.162 find_first_use_of_broken_modules.py:1(<module>)
        1    0.000    0.000    0.162    0.162 _delegation.py:1(<module>)
        2    0.000    0.000    0.161    0.080 _compression.py:113(readall)
        1    0.000    0.000    0.161    0.161 package_exporter.py:1(<module>)
        1    0.000    0.000    0.159    0.159 bz2.py:157(read)
        9    0.000    0.000    0.157    0.017 _compression.py:72(read)
      300    0.000    0.000    0.156    0.001 matrix_element.py:14(__init__)
      300    0.005    0.000    0.155    0.001 matrix_element.py:21(check_input)
        1    0.000    0.000    0.155    0.155 _morestats.py:1(<module>)
        1    0.000    0.000    0.154    0.154 shutil.py:1(<module>)
      110    0.000    0.000    0.152    0.001 linecache.py:36(getlines)
        1    0.000    0.000    0.152    0.152 PngImagePlugin.py:1(<module>)
       51    0.000    0.000    0.152    0.003 linecache.py:80(updatecache)
        1    0.000    0.000    0.150    0.150 symbolic_caffe2.py:1(<module>)
       14    0.000    0.000    0.149    0.011 tokenize.py:392(open)
        1    0.000    0.000    0.149    0.149 base_backend.py:1(<module>)
        1    0.000    0.000    0.148    0.148 minimize_trustregion_constr.py:1(<module>)
        2    0.000    0.000    0.147    0.073 series.py:1(<module>)
       30    0.000    0.000    0.147    0.005 tokenize.py:299(detect_encoding)
       36    0.000    0.000    0.146    0.004 tokenize.py:323(read_or_stop)
       20    0.146    0.007    0.146    0.007 {method 'readline' of '_io.BufferedReader' objects}
        1    0.000    0.000    0.146    0.146 computed_entries.py:1(<module>)
     1027    0.016    0.000    0.145    0.000 _tensor_str.py:238(<listcomp>)
        1    0.000    0.000    0.145    0.145 fontconfig_pattern.py:1(<module>)
     3053    0.143    0.000    0.143    0.000 {built-in method torch.masked_select}
        1    0.000    0.000    0.143    0.143 gumbel.py:1(<module>)
  1000000    0.141    0.000    0.141    0.000 optimizer.py:249(_optimizer_step_code)
        2    0.000    0.000    0.139    0.070 context.py:1(<module>)
        1    0.000    0.000    0.139    0.139 numerictypes.py:1(<module>)
        1    0.000    0.000    0.139    0.139 pretty.py:1(<module>)
        1    0.000    0.000    0.138    0.138 band.py:29(get_data)
        1    0.000    0.000    0.138    0.138 band_data_in.py:13(__init__)
        1    0.000    0.000    0.138    0.138 band_data_in.py:29(__module_choose)
        1    0.001    0.001    0.138    0.138 band_data_in.py:36(__get_dat_content)
        1    0.000    0.000    0.137    0.137 bandstructure.py:1(<module>)
       39    0.136    0.003    0.136    0.003 {method 'decompress' of '_bz2.BZ2Decompressor' objects}
        2    0.000    0.000    0.135    0.068 _ops.py:1(<module>)
        1    0.000    0.000    0.135    0.135 ode.py:1(<module>)
        1    0.013    0.013    0.134    0.134 band_data_in.py:71(get_band)
        1    0.000    0.000    0.134    0.134 _funcs.py:1(<module>)
        2    0.000    0.000    0.134    0.067 bsplines.py:1(<module>)
      251    0.004    0.000    0.133    0.001 _docscrape.py:388(_parse)
        1    0.000    0.000    0.133    0.133 _svds.py:1(<module>)
        1    0.000    0.000    0.133    0.133 point.py:1(<module>)
        1    0.000    0.000    0.133    0.133 _tensor.py:1(<module>)
        1    0.000    0.000    0.131    0.131 _linprog_ip.py:1(<module>)
        1    0.000    0.000    0.130    0.130 evalf.py:1(<module>)
    73944    0.021    0.000    0.129    0.000 _tensor_str.py:219(_val_formatter)
        2    0.000    0.000    0.128    0.064 _parser.py:1(<module>)
        4    0.000    0.000    0.127    0.032 graph.py:1(<module>)
     3053    0.127    0.000    0.127    0.000 {built-in method torch.isfinite}
        1    0.000    0.000    0.127    0.127 secrets.py:1(<module>)
        1    0.000    0.000    0.126    0.126 sparse_adam.py:1(<module>)
        1    0.000    0.000    0.125    0.125 _functional.py:1(<module>)
        7    0.000    0.000    0.122    0.017 common.py:1(<module>)
        1    0.000    0.000    0.122    0.122 _mio.py:1(<module>)
        1    0.000    0.000    0.121    0.121 _conversion.py:1(<module>)
        1    0.000    0.000    0.120    0.120 graph_module.py:1(<module>)
     6107    0.011    0.000    0.119    0.000 _tensor.py:920(__iter__)
        1    0.000    0.000    0.118    0.118 header.py:1(<module>)
        1    0.000    0.000    0.118    0.118 ivp.py:1(<module>)
        1    0.000    0.000    0.117    0.117 _linprog_util.py:1(<module>)
        1    0.000    0.000    0.117    0.117 iterables.py:1(<module>)
        1    0.000    0.000    0.114    0.114 analyzer.py:1(<module>)
    75970    0.056    0.000    0.114    0.000 _tensor_str.py:176(format)
        1    0.000    0.000    0.113    0.113 cli.py:1(<module>)
        2    0.000    0.000    0.112    0.056 subprocess.py:1(<module>)
        1    0.000    0.000    0.112    0.112 periodic_table.py:1(<module>)
        1    0.000    0.000    0.112    0.112 numeric.py:1(<module>)
        2    0.000    0.000    0.110    0.055 kind.py:1(<module>)
        3    0.000    0.000    0.109    0.036 profiler.py:1(<module>)
        1    0.000    0.000    0.108    0.108 _code_flow.py:1(<module>)
        1    0.000    0.000    0.107    0.107 _svdp.py:1(<module>)
        1    0.000    0.000    0.106    0.106 limits.py:1(<module>)
        1    0.000    0.000    0.106    0.106 symbolic_helper.py:1(<module>)
        1    0.000    0.000    0.106    0.106 Periodicity_System.py:1(<module>)
        1    0.000    0.000    0.105    0.105 kl.py:1(<module>)
        1    0.000    0.000    0.105    0.105 gmpy.py:1(<module>)
    30998    0.105    0.000    0.105    0.000 {method 'split' of 'str' objects}
        1    0.000    0.000    0.104    0.104 category.py:1(<module>)
        1    0.000    0.000    0.103    0.103 transformed_distribution.py:1(<module>)
        1    0.000    0.000    0.102    0.102 entity.py:1(<module>)
    78661    0.101    0.000    0.101    0.000 {method 'detach' of 'torch._C._TensorBase' objects}
        2    0.000    0.000    0.101    0.050 exponential.py:1(<module>)
        1    0.000    0.000    0.101    0.101 pyfunctorch.py:1(<module>)
     6024    0.034    0.000    0.101    0.000 numeric.py:2330(within_tol)
        1    0.000    0.000    0.100    0.100 _recursive.py:1(<module>)
     6107    0.099    0.000    0.099    0.000 {method 'unbind' of 'torch._C._TensorBase' objects}
       84    0.000    0.000    0.099    0.001 linecache.py:26(getline)
        1    0.000    0.000    0.098    0.098 _type_aliases.py:1(<module>)
        1    0.000    0.000    0.098    0.098 ddm.py:1(<module>)
        1    0.000    0.000    0.098    0.098 integrals.py:1(<module>)
        1    0.000    0.000    0.097    0.097 _filters.py:1(<module>)
        1    0.000    0.000    0.097    0.097 single.py:1(<module>)
        1    0.000    0.000    0.097    0.097 _thread_flow.py:1(<module>)
        1    0.000    0.000    0.097    0.097 _entry_points.py:1(<module>)
       10    0.096    0.010    0.096    0.010 {orjson.loads}
        1    0.000    0.000    0.095    0.095 _thread_flow_location.py:1(<module>)
        1    0.000    0.000    0.095    0.095 net_min_base.py:1(<module>)
        2    0.000    0.000    0.094    0.047 linsolve.py:1(<module>)
       27    0.001    0.000    0.093    0.003 para4tb.py:118(init_para)
        1    0.000    0.000    0.093    0.093 _at.py:1(<module>)
        1    0.000    0.000    0.092    0.092 split_utils.py:1(<module>)
     6407    0.005    0.000    0.091    0.000 __init__.py:272(_compile)
       16    0.000    0.000    0.089    0.006 traceback.py:220(extract_stack)
       16    0.000    0.000    0.089    0.006 traceback.py:375(extract)
        6    0.000    0.000    0.089    0.015 rnn.py:1(<module>)
       16    0.000    0.000    0.089    0.006 traceback.py:397(_extract_from_extended_frame_gen)
        1    0.000    0.000    0.088    0.088 _root.py:1(<module>)
        1    0.000    0.000    0.088    0.088 _linprog_highs.py:1(<module>)
        1    0.000    0.000    0.086    0.086 minpoly.py:1(<module>)
        1    0.000    0.000    0.086    0.086 _kde.py:1(<module>)
     2500    0.002    0.000    0.085    0.000 inspect.py:3270(signature)
3228/2522    0.014    0.000    0.085    0.000 inspect.py:2422(_signature_from_callable)
        2    0.000    0.000    0.084    0.042 _matfuncs.py:1(<module>)
     2500    0.002    0.000    0.083    0.000 inspect.py:3016(from_callable)
       97    0.001    0.000    0.083    0.001 _array_api.py:806(decorator)
      295    0.001    0.000    0.082    0.000 _compiler.py:738(compile)
        1    0.000    0.000    0.082    0.082 spglib.py:1(<module>)
      181    0.000    0.000    0.082    0.000 traceback.py:316(line)
        1    0.000    0.000    0.082    0.082 cmd.py:1(<module>)
        1    0.000    0.000    0.081    0.081 domain.py:1(<module>)
        1    0.000    0.000    0.080    0.080 complexes.py:1(<module>)
        2    0.000    0.000    0.080    0.040 batchnorm.py:1(<module>)
        1    0.000    0.000    0.079    0.079 para4tb.py:73(__get_TB_fix_data)
        1    0.000    0.000    0.079    0.079 singularity_functions.py:1(<module>)
        1    0.000    0.000    0.079    0.079 _mio5.py:1(<module>)
        2    0.000    0.000    0.079    0.039 scanner.py:1(<module>)
        1    0.000    0.000    0.078    0.078 gradcheck.py:1(<module>)
        1    0.000    0.000    0.078    0.078 staggered.py:1(<module>)
        1    0.000    0.000    0.077    0.077 _minpack_py.py:1(<module>)
        1    0.000    0.000    0.077    0.077 lambdify.py:1(<module>)
        2    0.000    0.000    0.077    0.038 distributed.py:1(<module>)
        1    0.000    0.000    0.074    0.074 _multivariate.py:1(<module>)
      376    0.000    0.000    0.074    0.000 __init__.py:686(__getitem__)
        1    0.000    0.000    0.074    0.074 _highs_wrapper.py:1(<module>)
      3/2    0.000    0.000    0.074    0.037 pyplot.py:216(switch_backend)
       10    0.000    0.000    0.074    0.007 version.py:1(<module>)
        2    0.000    0.000    0.074    0.037 events.py:1(<module>)
        1    0.000    0.000    0.073    0.073 uarray.py:1(<module>)
        2    0.000    0.000    0.073    0.037 shape_base.py:1(<module>)
        1    0.000    0.000    0.073    0.073 _ode.py:1(<module>)
        1    0.000    0.000    0.073    0.073 dataloader.py:1(<module>)
        1    0.000    0.000    0.073    0.073 py3k.py:1(<module>)
      110    0.002    0.000    0.073    0.001 _distn_infrastructure.py:1863(__init__)
        1    0.000    0.000    0.072    0.072 ssl.py:1(<module>)
       28    0.048    0.002    0.071    0.003 __init__.py:785(_rc_params_in_file)
      531    0.000    0.000    0.071    0.000 __init__.py:225(compile)
        1    0.000    0.000    0.071    0.071 _cubature.py:1(<module>)
        1    0.000    0.000    0.071    0.071 groups.py:1(<module>)
        1    0.000    0.000    0.070    0.070 blocking_input.py:1(<module>)
        1    0.000    0.000    0.070    0.070 hmac.py:1(<module>)
       26    0.000    0.000    0.070    0.003 _jit_internal.py:847(_check_overload_body)
       26    0.000    0.000    0.070    0.003 _sources.py:119(parse_def)
        2    0.000    0.000    0.069    0.035 __init__.py:12(__getattr__)
        1    0.000    0.000    0.069    0.069 formal.py:1(<module>)
       26    0.000    0.000    0.067    0.003 _sources.py:11(get_source_lines_and_file)
        1    0.000    0.000    0.067    0.067 data_parallel.py:1(<module>)
        1    0.000    0.000    0.067    0.067 pyprojecttoml.py:1(<module>)
       26    0.000    0.000    0.067    0.003 inspect.py:1243(getsourcelines)
        1    0.000    0.000    0.066    0.066 hierarchy.py:1(<module>)
        1    0.000    0.000    0.065    0.065 _apply_pyprojecttoml.py:1(<module>)
       20    0.000    0.000    0.065    0.003 _jit_internal.py:875(_overload)
     3025    0.040    0.000    0.065    0.000 inspect.py:867(cleandoc)
      130    0.000    0.000    0.065    0.000 dataclasses.py:1210(wrap)
      130    0.005    0.000    0.065    0.000 dataclasses.py:885(_process_class)
        1    0.000    0.000    0.064    0.064 bz2.py:1(<module>)
        1    0.000    0.000    0.064    0.064 polyhedron.py:1(<module>)
        1    0.000    0.000    0.064    0.064 __init__.py:155(_check_versions)
        2    0.000    0.000    0.063    0.032 pyplot.py:276(backend_mod)
        1    0.000    0.000    0.063    0.063 replicate.py:1(<module>)
       11    0.000    0.000    0.063    0.006 artist.py:1613(kwdoc)
        1    0.000    0.000    0.063    0.063 collections.py:1(<module>)
     1400    0.005    0.000    0.062    0.000 _docscrape.py:201(_read_to_next_section)
        1    0.000    0.000    0.062    0.062 graph_settings.py:1(<module>)
        1    0.000    0.000    0.062    0.062 mg_operation.py:1(<module>)
        1    0.000    0.000    0.061    0.061 assumptions.py:1(<module>)
        1    0.000    0.000    0.061    0.061 least_squares.py:1(<module>)
     1444    0.002    0.000    0.061    0.000 _docscrape.py:212(_read_sections)
        1    0.000    0.000    0.060    0.060 contingency.py:1(<module>)
        1    0.000    0.000    0.060    0.060 factor_.py:1(<module>)
        1    0.000    0.000    0.060    0.060 difflib.py:1(<module>)
       63    0.001    0.000    0.060    0.001 _axis_nan_policy.py:418(axis_nan_policy_decorator)
        1    0.000    0.000    0.059    0.059 lattice.py:1(<module>)
        1    0.000    0.000    0.059    0.059 nvfuser_prims.py:1(<module>)
        1    0.000    0.000    0.059    0.059 symbol.py:1(<module>)
        1    0.000    0.000    0.058    0.058 core.py:164(load_base_library)
        1    0.000    0.000    0.058    0.058 core.py:196(read_style_directory)
        2    0.000    0.000    0.058    0.029 _helpers.py:1(<module>)
        1    0.000    0.000    0.058    0.058 partitions_.py:1(<module>)
        1    0.000    0.000    0.058    0.058 node.py:1(<module>)
        1    0.000    0.000    0.057    0.057 bernoulli.py:1(<module>)
       26    0.000    0.000    0.057    0.002 __init__.py:859(rc_params_from_file)
        2    0.000    0.000    0.057    0.028 markers.py:1(<module>)
        1    0.000    0.000    0.057    0.057 message.py:1(<module>)
        1    0.000    0.000    0.056    0.056 _tool.py:1(<module>)
     2632    0.002    0.000    0.056    0.000 inspect.py:848(getdoc)
        2    0.000    0.000    0.056    0.028 abc.py:1(<module>)
        4    0.000    0.000    0.056    0.014 transforms.py:1(<module>)
        1    0.000    0.000    0.055    0.055 delta_functions.py:1(<module>)
        1    0.000    0.000    0.055    0.055 trigonometric.py:1(<module>)
        1    0.000    0.000    0.055    0.055 tokens.py:1(<module>)
       26    0.000    0.000    0.055    0.002 inspect.py:1055(findsource)
     2667    0.003    0.000    0.055    0.000 <frozen importlib._bootstrap>:169(__enter__)
     4746    0.044    0.000    0.055    0.000 module.py:437(__init__)
        1    0.000    0.000    0.055    0.055 _remove_redundancy.py:1(<module>)
    18072    0.011    0.000    0.055    0.000 fromnumeric.py:2421(all)
      130    0.000    0.000    0.054    0.000 dataclasses.py:1193(dataclass)
      295    0.001    0.000    0.054    0.000 _parser.py:970(parse)
     2005    0.016    0.000    0.054    0.000 inspect.py:2327(_signature_from_function)
        1    0.000    0.000    0.053    0.053 npyio.py:1(<module>)
        1    0.000    0.000    0.053    0.053 fromnumeric.py:1(<module>)
        1    0.000    0.000    0.053    0.053 backend_bases.py:1(<module>)
     6733    0.020    0.000    0.052    0.000 module.py:539(register_parameter)
        1    0.000    0.000    0.052    0.052 locks.py:1(<module>)
  877/295    0.003    0.000    0.052    0.000 _parser.py:447(_parse_sub)
        1    0.000    0.000    0.051    0.051 _discrete_distns.py:1(<module>)
        1    0.000    0.000    0.051    0.051 arpack.py:1(<module>)
        1    0.000    0.000    0.051    0.051 forward_ad.py:1(<module>)
        1    0.000    0.000    0.051    0.051 _testutils.py:1(<module>)
        1    0.000    0.000    0.050    0.050 sslproto.py:1(<module>)
 1297/316    0.019    0.000    0.050    0.000 _parser.py:507(_parse)
13065/11848    0.011    0.000    0.050    0.000 {built-in method __new__ of type object at 0x864300}
        1    0.000    0.000    0.050    0.050 ctx_mp.py:1(<module>)
        1    0.000    0.000    0.050    0.050 dbapi2.py:1(<module>)
       13    0.000    0.000    0.049    0.004 library.py:32(__init__)
       68    0.000    0.000    0.049    0.001 _util.py:1195(decorator)
        5    0.000    0.000    0.049    0.010 _common.py:1(<module>)
      462    0.001    0.000    0.049    0.000 basic.py:212(__init_subclass__)
     2361    0.009    0.000    0.049    0.000 <frozen importlib._bootstrap>:493(_init_module_attrs)
        1    0.000    0.000    0.049    0.049 ring_series.py:1(<module>)
      463    0.022    0.000    0.049    0.000 assumptions.py:614(_prepare_class_assumptions)
        1    0.000    0.000    0.048    0.048 _csr.py:1(<module>)
        1    0.000    0.000    0.048    0.048 generate.py:1(<module>)
        1    0.000    0.000    0.048    0.048 stringpict.py:1(<module>)
        1    0.000    0.000    0.048    0.048 ask.py:1(<module>)
        2    0.000    0.000    0.048    0.024 bessel.py:1(<module>)
        2    0.000    0.000    0.047    0.024 path.py:1(<module>)
        1    0.000    0.000    0.047    0.047 interpolative.py:1(<module>)
       11    0.001    0.000    0.047    0.004 artist.py:1386(pprint_setters)
        1    0.000    0.000    0.047    0.047 interval_arithmetic.py:1(<module>)
        1    0.001    0.001    0.047    0.047 groups.py:293(SpaceGroup)
        1    0.000    0.000    0.045    0.045 charset.py:1(<module>)
        1    0.000    0.000    0.045    0.045 _fitpack_impl.py:1(<module>)
        1    0.000    0.000    0.045    0.045 dataframes.py:1(<module>)
        1    0.000    0.000    0.045    0.045 _rotation_groups.py:1(<module>)
        1    0.000    0.000    0.044    0.044 dense_ndim_array.py:1(<module>)
        1    0.000    0.000    0.044    0.044 _external_properties.py:1(<module>)
      521    0.005    0.000    0.044    0.000 _docscrape.py:224(_parse_param_list)
        1    0.000    0.000    0.044    0.044 ellipse.py:1(<module>)
    18109    0.018    0.000    0.044    0.000 fromnumeric.py:71(_wrapreduction)
       87    0.000    0.000    0.044    0.001 dispatcher.py:178(add)
      449    0.001    0.000    0.044    0.000 __init__.py:80(decomposition_decorator)
        1    0.000    0.000    0.044    0.044 discovery.py:1(<module>)
        1    0.000    0.000    0.044    0.044 encoders.py:1(<module>)
       87    0.000    0.000    0.044    0.001 dispatcher.py:222(reorder)
        1    0.000    0.000    0.044    0.044 _shgo.py:1(<module>)
        1    0.000    0.000    0.044    0.044 _rbfinterp.py:1(<module>)
        1    0.000    0.000    0.043    0.043 mutable_ndim_array.py:1(<module>)
     4862    0.042    0.000    0.043    0.000 <frozen importlib._bootstrap>:100(acquire)
        1    0.000    0.000    0.043    0.043 error_functions.py:1(<module>)
      463    0.009    0.000    0.043    0.000 doccer.py:29(docformat)
        1    0.000    0.000    0.043    0.043 font_manager.py:1(<module>)
       91    0.002    0.000    0.043    0.000 enum.py:466(__new__)
        1    0.001    0.001    0.043    0.043 para4tb.py:45(__get_exp)
        1    0.000    0.000    0.043    0.043 _modified.py:1(<module>)
        1    0.000    0.000    0.042    0.042 _tokenizer.py:1(<module>)
        1    0.000    0.000    0.042    0.042 comments.py:1(<module>)
        1    0.000    0.000    0.042    0.042 _beartype.py:1(<module>)
     2700    0.007    0.000    0.042    0.000 textwrap.py:419(dedent)
        1    0.000    0.000    0.041    0.041 __init__.py:128(_check_capability)
        1    0.000    0.000    0.041    0.041 engine.py:1(<module>)
        1    0.000    0.000    0.041    0.041 gmpyfinitefield.py:1(<module>)
        1    0.000    0.000    0.041    0.041 headerregistry.py:1(<module>)
        1    0.000    0.000    0.041    0.041 _artifact_change.py:1(<module>)
        1    0.000    0.000    0.040    0.040 _measurements.py:1(<module>)
        1    0.000    0.000    0.040    0.040 __init__.py:645(device_count)
        1    0.000    0.000    0.040    0.040 __init__.py:616(_device_count_nvml)
        1    0.023    0.023    0.040    0.040 __init__.py:539(_raw_device_count_nvml)
        1    0.000    0.000    0.040    0.040 std.py:1(<module>)
        1    0.000    0.000    0.040    0.040 tz.py:1(<module>)
        1    0.000    0.000    0.040    0.040 scatter_gather.py:1(<module>)
        1    0.000    0.000    0.039    0.039 lines.py:1(<module>)
        1    0.000    0.000    0.039    0.039 trigsimp.py:1(<module>)
        1    0.000    0.000    0.039    0.039 half_normal.py:1(<module>)
      131    0.001    0.000    0.039    0.000 _distn_infrastructure.py:830(_construct_doc)
        1    0.000    0.000    0.039    0.039 splitter_base.py:1(<module>)
        2    0.000    0.000    0.038    0.019 __init__.py:181(_lazy_call)
        2    0.000    0.000    0.038    0.019 traceback.py:213(format_stack)
    18680    0.007    0.000    0.038    0.000 {built-in method builtins.next}
      550    0.001    0.000    0.038    0.000 _pytree.py:194(tree_map)
        1    0.000    0.000    0.037    0.037 gtk.py:1(<module>)
        1    0.000    0.000    0.037    0.037 basis.py:1(<module>)
        1    0.000    0.000    0.037    0.037 _location.py:1(<module>)
        1    0.000    0.000    0.037    0.037 pythonmpq.py:1(<module>)
        1    0.000    0.000    0.037    0.037 grad_mode.py:1(<module>)
     5425    0.016    0.000    0.037    0.000 _docscrape.py:67(read_to_condition)
     1002    0.007    0.000    0.037    0.000 enum.py:233(__set_name__)
      421    0.002    0.000    0.037    0.000 dataclasses.py:413(_create_fn)
        4    0.000    0.000    0.036    0.009 _utils.py:1(<module>)
        1    0.000    0.000    0.036    0.036 logging.py:1(<module>)
        1    0.000    0.000    0.036    0.036 frontend.py:1(<module>)
        1    0.000    0.000    0.036    0.036 comm.py:1(<module>)
        1    0.000    0.000    0.036    0.036 sg_operation.py:1(<module>)
     4326    0.013    0.000    0.036    0.000 <frozen importlib._bootstrap_external>:437(cache_from_source)
        1    0.000    0.000    0.036    0.036 pathlib.py:1(<module>)
        1    0.000    0.000    0.036    0.036 module.py:1(<module>)
        1    0.000    0.000    0.036    0.036 rk.py:1(<module>)
        1    0.000    0.000    0.035    0.035 finitefield.py:1(<module>)
        1    0.000    0.000    0.035    0.035 facts.py:1(<module>)
    75970    0.035    0.000    0.035    0.000 {method '__format__' of 'float' objects}
    21317    0.014    0.000    0.035    0.000 <frozen importlib._bootstrap_external>:126(_path_join)
        2    0.000    0.000    0.035    0.017 function_base.py:1(<module>)
        1    0.000    0.000    0.035    0.035 lapack.py:1(<module>)
        2    0.000    0.000    0.033    0.017 fourier.py:1(<module>)
        1    0.000    0.000    0.033    0.033 monkey.py:1(<module>)
        1    0.000    0.000    0.033    0.033 dispatcher.py:1(<module>)
        1    0.000    0.000    0.033    0.033 pickle.py:1(<module>)
        1    0.000    0.000    0.033    0.033 axes3d.py:1(<module>)
       28    0.000    0.000    0.032    0.001 container.py:580(__init__)
      550    0.000    0.000    0.032    0.000 _pytree.py:196(<listcomp>)
        1    0.000    0.000    0.032    0.032 _result.py:1(<module>)
        1    0.000    0.000    0.032    0.032 galoisgroups.py:1(<module>)
      592    0.003    0.000    0.032    0.000 __init__.py:31(_add_op_to_registry)
       28    0.000    0.000    0.032    0.001 container.py:631(__iadd__)
        1    0.000    0.000    0.032    0.032 conflict.py:1(<module>)
     3969    0.002    0.000    0.032    0.000 _docscrape.py:77(read_to_next_empty_line)
       28    0.001    0.000    0.031    0.001 container.py:650(extend)
     3053    0.031    0.000    0.031    0.000 {method 'min' of 'torch._C._TensorBase' objects}
        2    0.000    0.000    0.031    0.016 _backend.py:1(<module>)
        1    0.000    0.000    0.031    0.031 jit_utils.py:1(<module>)
      454    0.000    0.000    0.031    0.000 __init__.py:127(register)
        1    0.000    0.000    0.031    0.031 band_data_out.py:1(<module>)
        1    0.000    0.000    0.031    0.031 scimath.py:1(<module>)
        2    0.000    0.000    0.031    0.015 laplace.py:1(<module>)
        1    0.000    0.000    0.031    0.031 line.py:1(<module>)
        1    0.000    0.000    0.031    0.031 _gauss_kronrod.py:1(<module>)
     4220    0.015    0.000    0.030    0.000 _docscrape.py:168(_is_at_section)
     2016    0.002    0.000    0.030    0.000 container.py:639(append)
        1    0.000    0.000    0.030    0.030 visualization.py:1(<module>)
        1    0.000    0.000    0.030    0.030 _spectral_py.py:1(<module>)
        1    0.000    0.000    0.030    0.030 artist.py:1(<module>)
        1    0.000    0.000    0.030    0.030 structures.py:1(<module>)
        1    0.000    0.000    0.030    0.030 backend_agg.py:1(<module>)
        2    0.000    0.000    0.030    0.015 main.py:1(<module>)
        1    0.000    0.000    0.029    0.029 gamma_functions.py:1(<module>)
    12084    0.014    0.000    0.029    0.000 _ufunc_config.py:33(seterr)
     1465    0.005    0.000    0.029    0.000 _ops.py:447(__getattr__)
      398    0.003    0.000    0.029    0.000 _util.py:504(getfullargspec_no_self)
        1    0.000    0.000    0.029    0.029 package_importer.py:1(<module>)
        1    0.000    0.000    0.029    0.029 datetime.py:1(<module>)
        1    0.000    0.000    0.029    0.029 combsimp.py:1(<module>)
        1    0.000    0.000    0.029    0.029 adadelta.py:1(<module>)
        2    0.000    0.000    0.029    0.014 inverse.py:1(<module>)
     9109    0.004    0.000    0.028    0.000 contextlib.py:132(__enter__)
     3053    0.028    0.000    0.028    0.000 {built-in method torch.ceil}
        1    0.000    0.000    0.028    0.028 bdf.py:1(<module>)
     9159    0.007    0.000    0.028    0.000 _tensor_str.py:94(tensor_totype)
        1    0.000    0.000    0.028    0.028 vq.py:1(<module>)
     4486    0.002    0.000    0.028    0.000 <frozen importlib._bootstrap>:392(cached)
        1    0.000    0.000    0.027    0.027 lowrank_multivariate_normal.py:1(<module>)
        1    0.000    0.000    0.027    0.027 densebasic.py:1(<module>)
      295    0.001    0.000    0.027    0.000 _compiler.py:571(_code)
        1    0.000    0.000    0.027    0.027 smtlib.py:1(<module>)
        1    0.000    0.000    0.027    0.027 axis.py:1(<module>)
        3    0.000    0.000    0.027    0.009 __init__.py:984(version)
        1    0.000    0.000    0.026    0.026 onnx_proto_utils.py:1(<module>)
        1    0.003    0.003    0.026    0.026 _meta_registrations.py:2649(activate_meta)
        1    0.000    0.000    0.026    0.026 _lil.py:1(<module>)
        1    0.000    0.000    0.026    0.026 matpow.py:1(<module>)
        1    0.000    0.000    0.026    0.026 mod.py:1(<module>)
        1    0.000    0.000    0.026    0.026 exp_family.py:1(<module>)
        1    0.000    0.000    0.026    0.026 legend.py:1(<module>)
       26    0.000    0.000    0.026    0.001 _util.py:277(decorator)
      120    0.001    0.000    0.026    0.000 periodic_table.py:77(__init__)
        1    0.000    0.000    0.026    0.026 decimal.py:1(<module>)
        1    0.000    0.000    0.026    0.026 _expm_multiply.py:1(<module>)
        2    0.000    0.000    0.025    0.013 _adapters.py:1(<module>)
        1    0.000    0.000    0.025    0.025 polyroots.py:1(<module>)
     6733    0.008    0.000    0.025    0.000 parameter.py:30(__new__)
     2323    0.003    0.000    0.025    0.000 <frozen importlib._bootstrap_external>:567(_get_cached)
        1    0.000    0.000    0.025    0.025 _lbfgsb_py.py:1(<module>)
        1    0.000    0.000    0.025    0.025 parameters.py:1(<module>)
     3053    0.025    0.000    0.025    0.000 {method 'max' of 'torch._C._TensorBase' objects}
        9    0.000    0.000    0.025    0.003 util.py:1(<module>)
        1    0.000    0.000    0.025    0.025 reduction.py:1(<module>)
        1    0.000    0.000    0.025    0.025 graphs.py:1(<module>)
        5    0.000    0.000    0.025    0.005 polyhedron.py:34(__new__)
        1    0.000    0.000    0.025    0.025 io.py:1(<module>)
        1    0.000    0.000    0.025    0.025 _odepack_py.py:1(<module>)
        1    0.000    0.000    0.025    0.025 equality_constrained_sqp.py:1(<module>)
        1    0.000    0.000    0.024    0.024 ImagePalette.py:1(<module>)
        1    0.000    0.000    0.024    0.024 _ccallback.py:1(<module>)
     1111    0.004    0.000    0.024    0.000 typing.py:1336(__init__)
       68    0.024    0.000    0.024    0.000 {built-in method io.open}
       12    0.002    0.000    0.024    0.002 artist.py:1337(get_setters)
        1    0.000    0.000    0.024    0.024 heapq.py:1(<module>)
        1    0.000    0.000    0.024    0.024 gridspec.py:1(<module>)
      426    0.001    0.000    0.024    0.000 units.py:153(__init__)
       43    0.000    0.000    0.024    0.001 dispatcher.py:147(_)
        1    0.000    0.000    0.024    0.024 _new_distributions.py:1(<module>)
        2    0.000    0.000    0.024    0.012 grouping.py:1(<module>)
        3    0.000    0.000    0.024    0.008 _distribution_infrastructure.py:1317(_combine_docs)
    29601    0.011    0.000    0.023    0.000 {built-in method builtins.setattr}
     4088    0.023    0.000    0.023    0.000 {built-in method torch.zeros_like}
        3    0.000    0.000    0.023    0.008 __init__.py:625(version)
       23    0.023    0.001    0.023    0.001 {method 'readlines' of '_io._IOBase' objects}
        1    0.000    0.000    0.023    0.023 _mstats_basic.py:1(<module>)
        3    0.000    0.000    0.023    0.008 __init__.py:598(metadata)
        2    0.000    0.000    0.023    0.012 traverse.py:1(<module>)
        1    0.000    0.000    0.023    0.023 blockmatrix.py:1(<module>)
      425    0.001    0.000    0.023    0.000 artist.py:1290(get_valid_values)
        1    0.000    0.000    0.023    0.023 storage.py:1(<module>)
        1    0.000    0.000    0.023    0.023 _reporting_descriptor_reference.py:1(<module>)
    83002    0.019    0.000    0.023    0.000 {built-in method builtins.max}
     3053    0.023    0.000    0.023    0.000 {method 'ne' of 'torch._C._TensorBase' objects}
       87    0.000    0.000    0.023    0.000 conflict.py:24(ambiguities)
        1    0.000    0.000    0.023    0.023 _upfirdn.py:1(<module>)
     2137    0.002    0.000    0.023    0.000 _docscrape.py:573(dedent_lines)
       87    0.005    0.000    0.022    0.000 conflict.py:27(<setcomp>)
        1    0.000    0.000    0.022    0.022 hashlib.py:1(<module>)
        1    0.000    0.000    0.022    0.022 distribution.py:1(<module>)
       14    0.000    0.000    0.022    0.002 hashlib.py:126(__get_openssl_constructor)
     6709    0.013    0.000    0.022    0.000 inspect.py:2676(__init__)
      426    0.012    0.000    0.022    0.000 units.py:163(check_mappings)
        2    0.000    0.000    0.022    0.011 hashlib.py:82(__get_builtin_constructor)
        1    0.000    0.000    0.022    0.022 libmpf.py:1(<module>)
     1747    0.001    0.000    0.022    0.000 artist.py:1356(is_alias)
        1    0.000    0.000    0.022    0.022 animation.py:1(<module>)
        1    0.000    0.000    0.022    0.022 homomorphisms.py:1(<module>)
        2    0.000    0.000    0.022    0.011 fnmatch.py:1(<module>)
        1    0.000    0.000    0.022    0.022 grad.py:1(<module>)
        1    0.000    0.000    0.022    0.022 typing_extensions.py:1(<module>)
  583/432    0.000    0.000    0.022    0.000 typing.py:477(__getitem__)
        1    0.000    0.000    0.022    0.022 pc_groups.py:1(<module>)
        1    0.000    0.000    0.022    0.022 composer.py:1(<module>)
     3053    0.022    0.000    0.022    0.000 {method 'abs' of 'torch._C._TensorBase' objects}
 9538/251    0.010    0.000    0.022    0.000 copy.py:128(deepcopy)
        1    0.000    0.000    0.022    0.022 lzma.py:1(<module>)
65763/65760    0.019    0.000    0.022    0.000 {method 'join' of 'str' objects}
        2    0.000    0.000    0.022    0.011 polyutils.py:1(<module>)
        2    0.000    0.000    0.021    0.011 polynomial.py:1(<module>)
        1    0.000    0.000    0.021    0.021 lambdarepr.py:1(<module>)
     1411    0.005    0.000    0.021    0.000 library.py:71(impl)
        1    0.000    0.000    0.021    0.021 lie_group.py:1(<module>)
     2026    0.002    0.000    0.021    0.000 _tensor_str.py:195(_scalar_str)
     2016    0.002    0.000    0.021    0.000 container.py:614(__setitem__)
        5    0.000    0.000    0.021    0.004 pathlib.py:1053(read_text)
        1    0.000    0.000    0.021    0.021 api.py:1(<module>)
        1    0.000    0.000    0.021    0.021 _compressed.py:1(<module>)
        1    0.000    0.000    0.021    0.021 font_manager.py:1004(json_load)
       35    0.000    0.000    0.021    0.001 core.py:59(_)
 2251/295    0.009    0.000    0.021    0.000 _compiler.py:37(_compile)
        1    0.000    0.000    0.021    0.021 _directory_reader.py:1(<module>)
        1    0.000    0.000    0.021    0.021 timeutils.py:1(<module>)
        4    0.000    0.000    0.021    0.005 __init__.py:926(read_text)
       87    0.001    0.000    0.021    0.000 conflict.py:56(ordering)
      778    0.003    0.000    0.021    0.000 _ops.py:553(__getattr__)
  502/251    0.003    0.000    0.021    0.000 copy.py:227(_deepcopy_dict)
        1    0.000    0.000    0.021    0.021 coord.py:1(<module>)
        1    0.000    0.000    0.021    0.021 _filter_design.py:1(<module>)
        2    0.000    0.000    0.021    0.010 sysconfig.py:710(get_config_var)
      4/3    0.000    0.000    0.021    0.007 sysconfig.py:629(get_config_vars)
      481    0.013    0.000    0.020    0.000 doccer.py:225(indentcount_lines)
        1    0.000    0.000    0.020    0.020 _memory_profiler.py:1(<module>)
     1027    0.020    0.000    0.020    0.000 {method 'tolist' of 'torch._C._TensorBase' objects}
        1    0.000    0.000    0.020    0.020 reader.py:1(<module>)
        1    0.000    0.000    0.020    0.020 graph_drawer.py:1(<module>)
        1    0.000    0.000    0.020    0.020 tarfile.py:1(<module>)
        1    0.000    0.000    0.020    0.020 uuid.py:1(<module>)
        1    0.000    0.000    0.020    0.020 tags.py:1(<module>)
     3054    0.020    0.000    0.020    0.000 {method 'reshape' of 'torch._C._TensorBase' objects}
        1    0.000    0.000    0.020    0.020 _artifact.py:1(<module>)
        1    0.000    0.000    0.020    0.020 _numdiff.py:1(<module>)
        1    0.000    0.000    0.020    0.020 base64.py:1(<module>)
      131    0.001    0.000    0.020    0.000 _distn_infrastructure.py:749(_construct_argparser)
      431    0.002    0.000    0.020    0.000 typing.py:652(Union)
        1    0.000    0.000    0.019    0.019 _tool_component.py:1(<module>)
        1    0.000    0.000    0.019    0.019 _ni_docstrings.py:1(<module>)
     6042    0.004    0.000    0.019    0.000 _ufunc_config.py:430(__enter__)
      130    0.001    0.000    0.019    0.000 dataclasses.py:530(_init_fn)
    18116    0.019    0.000    0.019    0.000 {method 'reduce' of 'numpy.ufunc' objects}
        1    0.000    0.000    0.019    0.019 sysconfig.py:527(_init_posix)
        1    0.000    0.000    0.019    0.019 _qmvnt.py:1(<module>)
        1    0.000    0.000    0.019    0.019 libmpc.py:1(<module>)
     9109    0.008    0.000    0.019    0.000 contextlib.py:141(__exit__)
     9109    0.007    0.000    0.019    0.000 contextlib.py:284(helper)
        1    0.000    0.000    0.019    0.019 hyperexpand.py:1(<module>)
        1    0.000    0.000    0.018    0.018 pythonfinitefield.py:1(<module>)
     6042    0.004    0.000    0.018    0.000 _ufunc_config.py:435(__exit__)
        1    0.000    0.000    0.018    0.018 type_check.py:1(<module>)
        1    0.000    0.000    0.018    0.018 setupcfg.py:1(<module>)
        1    0.000    0.000    0.018    0.018 archive_util.py:1(<module>)
        1    0.000    0.000    0.018    0.018 libhyper.py:1(<module>)
       12    0.000    0.000    0.017    0.001 artist.py:1242(__init__)
     6733    0.017    0.000    0.017    0.000 {built-in method _make_subclass}
       12    0.001    0.000    0.017    0.001 artist.py:1262(get_aliases)
    21317    0.013    0.000    0.017    0.000 <frozen importlib._bootstrap_external>:128(<listcomp>)
        1    0.000    0.000    0.017    0.017 colors.py:1(<module>)
        1    0.000    0.000    0.017    0.017 twodim_base.py:1(<module>)
        1    0.000    0.000    0.017    0.017 intersection.py:1(<module>)
        1    0.000    0.000    0.017    0.017 _support_alternative_backends.py:294(<dictcomp>)
       23    0.000    0.000    0.017    0.001 _support_alternative_backends.py:46(wrapper)
     3053    0.012    0.000    0.017    0.000 _tensor_str.py:331(_add_suffixes)
        1    0.000    0.000    0.017    0.017 _replacement.py:1(<module>)
        1    0.000    0.000    0.017    0.017 warnings.py:96(_showwarnmsg)
        1    0.000    0.000    0.017    0.017 warnings.py:20(_showwarnmsg_impl)
        2    0.000    0.000    0.017    0.008 fuse_modules.py:1(<module>)
        1    0.000    0.000    0.017    0.017 warnings.py:117(_formatwarnmsg)
        1    0.000    0.000    0.017    0.017 warnings.py:35(_formatwarnmsg_impl)
        1    0.000    0.000    0.017    0.017 _entropy.py:1(<module>)
      121    0.001    0.000    0.017    0.000 __init__.py:259(_make_prim)
        1    0.000    0.000    0.017    0.017 unix_events.py:1(<module>)
       87    0.002    0.000    0.017    0.000 conflict.py:62(<listcomp>)
        1    0.000    0.000    0.017    0.017 worker.py:1(<module>)
        1    0.000    0.000    0.017    0.017 _invocation.py:1(<module>)
        5    0.000    0.000    0.017    0.003 polyhedron.py:388(<listcomp>)
        1    0.000    0.000    0.017    0.017 _trustregion_krylov.py:1(<module>)
      251    0.001    0.000    0.017    0.000 _docscrape.py:366(_parse_summary)
       50    0.000    0.000    0.017    0.000 iterables.py:2618(minlex)
        6    0.000    0.000    0.016    0.003 _docscrape.py:626(__init__)
        1    0.000    0.000    0.016    0.016 constraint_registry.py:1(<module>)
        1    0.000    0.000    0.016    0.016 _methods.py:1(<module>)
        1    0.000    0.000    0.016    0.016 _distribution_infrastructure.py:1(<module>)
        1    0.000    0.000    0.016    0.016 __init__.py:351(_sanity_check)
        1    0.000    0.000    0.016    0.016 _differentiable_functions.py:1(<module>)
        1    0.016    0.016    0.016    0.016 {method 'dot' of 'numpy.ndarray' objects}
      778    0.016    0.000    0.016    0.000 {built-in method torch._C._jit_get_operation}
     4862    0.010    0.000    0.016    0.000 <frozen importlib._bootstrap>:179(_get_module_lock)
     3197    0.010    0.000    0.016    0.000 functools.py:35(update_wrapper)
        1    0.000    0.000    0.016    0.016 loss.py:1(<module>)
        1    0.000    0.000    0.015    0.015 beta.py:1(<module>)
     6176    0.002    0.000    0.015    0.000 conflict.py:19(ambiguous)
      232    0.001    0.000    0.015    0.000 function.py:164(__init__)
     6043    0.015    0.000    0.015    0.000 {method 'sub' of 're.Pattern' objects}
        1    0.000    0.000    0.015    0.015 _decomp_lu.py:1(<module>)
    86157    0.015    0.000    0.015    0.000 {method 'dim' of 'torch._C._TensorBase' objects}
      245    0.001    0.000    0.015    0.000 _docscrape.py:599(__str__)
        1    0.000    0.000    0.015    0.015 iterative.py:1(<module>)
     3146    0.010    0.000    0.015    0.000 inspect.py:2962(__init__)
2164/2161    0.002    0.000    0.015    0.000 <frozen importlib._bootstrap_external>:599(_check_name_wrapper)
        1    0.000    0.000    0.014    0.014 result.py:1(<module>)
      524    0.000    0.000    0.014    0.000 __init__.py:173(search)
        1    0.000    0.000    0.014    0.014 _package_pickler.py:1(<module>)
    13223    0.003    0.000    0.014    0.000 conflict.py:43(edge)
        1    0.000    0.000    0.014    0.014 compat.py:1(<module>)
     2700    0.014    0.000    0.014    0.000 {method 'findall' of 're.Pattern' objects}
        1    0.000    0.000    0.014    0.014 server_process_global_profiler.py:1(<module>)
       21    0.000    0.000    0.014    0.001 _distn_infrastructure.py:3319(__init__)
        2    0.000    0.000    0.014    0.007 operations.py:1(<module>)
        1    0.000    0.000    0.014    0.014 _isotonic.py:1(<module>)
     1241    0.001    0.000    0.014    0.000 __init__.py:655(__setitem__)
        1    0.000    0.000    0.014    0.014 pretty_symbology.py:1(<module>)
        2    0.000    0.000    0.014    0.007 decorator.py:1(<module>)
     2163    0.002    0.000    0.014    0.000 <frozen importlib._bootstrap_external>:1146(path_stats)
      248    0.002    0.000    0.013    0.000 _docscrape.py:548(__str__)
      367    0.001    0.000    0.013    0.000 permutations.py:1628(__call__)
     2324    0.003    0.000    0.013    0.000 <frozen importlib._bootstrap_external>:1599(_get_spec)
    89492    0.013    0.000    0.013    0.000 {method 'startswith' of 'str' objects}
        1    0.000    0.000    0.013    0.013 actions.py:1(<module>)
      131    0.000    0.000    0.013    0.000 _distn_infrastructure.py:735(_attach_argparser_methods)
        6    0.000    0.000    0.013    0.002 _typing.py:1(<module>)
        1    0.000    0.000    0.013    0.013 _tanhsinh.py:1(<module>)
        2    0.000    0.000    0.013    0.006 decoder.py:1(<module>)
      110    0.001    0.000    0.013    0.000 _distn_infrastructure.py:1923(_attach_methods)
     3879    0.003    0.000    0.013    0.000 <frozen importlib._bootstrap_external>:1421(_path_importer_cache)
     1465    0.011    0.000    0.013    0.000 _ops.py:239(__init__)
        2    0.000    0.000    0.013    0.006 readers.py:1(<module>)
     4326    0.006    0.000    0.013    0.000 <frozen importlib._bootstrap_external>:132(_path_split)
      213    0.000    0.000    0.013    0.000 units.py:318(__new__)
     2195    0.002    0.000    0.013    0.000 <frozen importlib._bootstrap>:216(_lock_unlock_module)
      213    0.000    0.000    0.012    0.000 units.py:299(__init__)
     6176    0.006    0.000    0.012    0.000 conflict.py:12(consistent)
      232    0.001    0.000    0.012    0.000 function.py:124(arity)
        1    0.012    0.012    0.012    0.012 {built-in method torch.max}
    71960    0.010    0.000    0.012    0.000 {built-in method builtins.min}
        1    0.000    0.000    0.012    0.012 _lowrank.py:1(<module>)
        1    0.000    0.000    0.012    0.012 _reporting_descriptor.py:1(<module>)
        1    0.000    0.000    0.012    0.012 _notification.py:1(<module>)
     1411    0.012    0.000    0.012    0.000 {built-in method torch._C.impl}
     9109    0.010    0.000    0.012    0.000 contextlib.py:104(__init__)
        2    0.000    0.000    0.012    0.006 _aliases.py:1(<module>)
     1456    0.001    0.000    0.012    0.000 _docscrape.py:85(read_to_next_unindented_line)
        1    0.000    0.000    0.012    0.012 _common.py:17(files)
      142    0.005    0.000    0.012    0.000 __init__.py:348(namedtuple)
        1    0.000    0.000    0.012    0.012 _common.py:59(from_package)
        1    0.000    0.000    0.012    0.012 _adapters.py:28(get_resource_reader)
        1    0.000    0.000    0.012    0.012 _adapters.py:151(_native)
        1    0.000    0.000    0.012    0.012 _adapters.py:146(_reader)
        1    0.000    0.000    0.012    0.012 afm.py:1(<module>)
        1    0.000    0.000    0.012    0.012 <frozen importlib._bootstrap_external>:1136(get_resource_reader)
    16142    0.008    0.000    0.012    0.000 conflict.py:7(supercedes)
        1    0.000    0.000    0.012    0.012 singleton.py:1(<module>)
        1    0.000    0.000    0.012    0.012 _artifact_content.py:1(<module>)
        1    0.000    0.000    0.012    0.012 more.py:1(<module>)
        1    0.000    0.000    0.012    0.012 _stack.py:1(<module>)
       26    0.001    0.000    0.012    0.000 inspect.py:1232(getblock)
     2245    0.005    0.000    0.011    0.000 typing.py:168(_type_check)
       27    0.008    0.000    0.011    0.000 para4tb.py:121(<listcomp>)
        1    0.000    0.000    0.011    0.011 dates.py:1(<module>)
        1    0.000    0.000    0.011    0.011 _compat.py:1(<module>)
        1    0.000    0.000    0.011    0.011 field.py:1(<module>)
        1    0.000    0.000    0.011    0.011 _axes.py:71(Axes)
        1    0.000    0.000    0.011    0.011 trf.py:1(<module>)
        1    0.000    0.000    0.011    0.011 _builtins.py:1(<module>)
     1503    0.003    0.000    0.011    0.000 tokenize.py:433(_tokenize)
      131    0.000    0.000    0.011    0.000 _distn_infrastructure.py:683(__init__)
     2221    0.011    0.000    0.011    0.000 {method '__exit__' of '_io._IOBase' objects}
     4774    0.011    0.000    0.011    0.000 {built-in method torch._C._log_api_usage_once}
       56    0.000    0.000    0.011    0.000 __init__.py:770(_open_file_or_url)
        1    0.000    0.000    0.011    0.011 _text.py:1(<module>)
    19254    0.006    0.000    0.011    0.000 _parser.py:252(get)
    34455    0.008    0.000    0.011    0.000 _docscrape.py:64(eof)
    12084    0.010    0.000    0.011    0.000 _ufunc_config.py:132(geterr)
        1    0.000    0.000    0.011    0.011 _validation.py:1(<module>)
      100    0.002    0.000    0.011    0.000 iterables.py:1165(least_rotation)
       55    0.000    0.000    0.011    0.000 __init__.py:388(inner)
        1    0.000    0.000    0.010    0.010 _linprog_rs.py:1(<module>)
      222    0.002    0.000    0.010    0.000 wrappers.py:191(_out_wrapper)
        1    0.000    0.000    0.010    0.010 _normalization.py:1(<module>)
      129    0.000    0.000    0.010    0.000 dataclasses.py:589(_repr_fn)
        1    0.000    0.000    0.010    0.010 _run.py:1(<module>)
        1    0.000    0.000    0.010    0.010 nvfuser_prims.py:806(register_nvprims)
     8262    0.005    0.000    0.010    0.000 typing.py:1280(__setattr__)
      292    0.001    0.000    0.010    0.000 <frozen importlib._bootstrap_external>:1408(_path_hooks)
     6106    0.008    0.000    0.010    0.000 _python_dispatch.py:86(_disable_current_modes)
     3310    0.002    0.000    0.010    0.000 __init__.py:178(sub)
        1    0.000    0.000    0.010    0.010 bisect.py:1(<module>)
        1    0.000    0.000    0.010    0.010 fancy_getopt.py:1(<module>)
        1    0.000    0.000    0.009    0.009 cm.py:1(<module>)
      128    0.000    0.000    0.009    0.000 dataclasses.py:625(_cmp_fn)
     8189    0.006    0.000    0.009    0.000 _docscrape.py:57(seek_next_non_empty_line)
      403    0.001    0.000    0.009    0.000 <frozen abc>:105(__new__)
        1    0.000    0.000    0.009    0.009 lgmres.py:1(<module>)
     2324    0.006    0.000    0.009    0.000 <frozen importlib._bootstrap_external>:778(spec_from_file_location)
      191    0.007    0.000    0.009    0.000 {built-in method builtins.eval}
        1    0.000    0.000    0.009    0.009 _slsqp_py.py:1(<module>)
        1    0.000    0.000    0.009    0.009 _decomp.py:1(<module>)
      292    0.001    0.000    0.009    0.000 <frozen importlib._bootstrap_external>:1655(_fill_cache)
       28    0.000    0.000    0.009    0.000 adam.py:14(__init__)
       36    0.000    0.000    0.009    0.000 __init__.py:893(inner)
       28    0.001    0.000    0.009    0.000 optimizer.py:169(__init__)
     7323    0.006    0.000    0.009    0.000 enum.py:669(__call__)
       11    0.000    0.000    0.009    0.001 __init__.py:10(partialclass)
      300    0.009    0.000    0.009    0.000 {built-in method posix.listdir}
      465    0.001    0.000    0.009    0.000 permutations.py:902(__new__)
2659/2614    0.002    0.000    0.009    0.000 {built-in method builtins.any}
        1    0.000    0.000    0.009    0.009 lsq_linear.py:1(<module>)
     4862    0.007    0.000    0.009    0.000 <frozen importlib._bootstrap>:125(release)
        1    0.008    0.008    0.009    0.009 para4tb.py:55(__get_values_and_index)
     1465    0.009    0.000    0.009    0.000 {built-in method torch._C._get_operation_overload}
      393    0.001    0.000    0.009    0.000 typing.py:1539(copy_with)
      325    0.001    0.000    0.008    0.000 function_base.py:497(add_newdoc)
        1    0.000    0.000    0.008    0.008 _rgi.py:1(<module>)
        2    0.000    0.000    0.008    0.004 _add_newdocs.py:1(<module>)
      257    0.001    0.000    0.008    0.000 typing.py:1530(__getitem__)
        1    0.000    0.000    0.008    0.008 _linesearch.py:1(<module>)
     2038    0.008    0.000    0.008    0.000 {built-in method torch._C._dispatch_has_kernel_for_dispatch_key}
      965    0.002    0.000    0.008    0.000 typing_extensions.py:3177(_collect_parameters)
    95906    0.008    0.000    0.008    0.000 {method 'lstrip' of 'str' objects}
    12610    0.008    0.000    0.008    0.000 {method 'expandtabs' of 'str' objects}
        1    0.000    0.000    0.008    0.008 assume.py:1(<module>)
       70    0.001    0.000    0.008    0.000 __init__.py:1364(_preprocess_data)
        9    0.000    0.000    0.008    0.001 exceptions.py:1(<module>)
        1    0.000    0.000    0.008    0.008 mstats.py:1(<module>)
        1    0.000    0.000    0.008    0.008 _resampling.py:1(<module>)
      151    0.000    0.000    0.008    0.000 typing.py:692(Optional)
     3053    0.004    0.000    0.008    0.000 forward_ad.py:114(unpack_dual)
     2163    0.004    0.000    0.008    0.000 <frozen importlib._bootstrap_external>:642(_classify_pyc)
        2    0.000    0.000    0.008    0.004 _globals.py:1(<module>)
      189    0.000    0.000    0.007    0.000 library.py:50(define)
        1    0.000    0.000    0.007    0.007 _graph.py:1(<module>)
        1    0.000    0.000    0.007    0.007 expand.py:1(<module>)
        1    0.000    0.000    0.007    0.007 _tnc.py:1(<module>)
      189    0.007    0.000    0.007    0.000 {built-in method torch._C.define}
     2667    0.002    0.000    0.007    0.000 <frozen importlib._bootstrap>:173(__exit__)
    11478    0.007    0.000    0.007    0.000 module.py:1618(remove_from)
     1318    0.003    0.000    0.007    0.000 enum.py:352(__setitem__)
        1    0.000    0.000    0.007    0.007 groundtypes.py:1(<module>)
        1    0.000    0.000    0.007    0.007 specifiers.py:1(<module>)
        1    0.000    0.000    0.007    0.007 patches.py:1(<module>)
        1    0.000    0.000    0.007    0.007 hb.py:1(<module>)
    10171    0.005    0.000    0.007    0.000 _docscrape.py:91(peek)
       93    0.000    0.000    0.007    0.000 pydoc.py:186(getdoc)
        1    0.000    0.000    0.007    0.007 common.py:8(pyparsing_common)
       97    0.001    0.000    0.007    0.000 __init__.py:427(_make_inplace)
     9689    0.007    0.000    0.007    0.000 {method 'splitlines' of 'str' objects}
1062/1021    0.003    0.000    0.007    0.000 sorting.py:10(default_sort_key)
   112/79    0.000    0.000    0.007    0.000 <frozen importlib._bootstrap_external>:1311(__iter__)
     2232    0.004    0.000    0.007    0.000 _docscrape.py:475(_str_param_list)
        1    0.000    0.000    0.007    0.007 union.py:1(<module>)
        1    0.000    0.000    0.007    0.007 subsets.py:1(<module>)
   164/92    0.000    0.000    0.007    0.000 <frozen importlib._bootstrap_external>:1297(_recalculate)
       41    0.001    0.000    0.007    0.000 typing.py:2817(__new__)
      748    0.003    0.000    0.007    0.000 dataclasses.py:724(_get_field)
        2    0.000    0.000    0.007    0.003 modules.py:1(<module>)
       17    0.001    0.000    0.007    0.000 para4band.py:307(<listcomp>)
    12048    0.004    0.000    0.007    0.000 _ufunc_config.py:452(_no_nep50_warning)
     1115    0.001    0.000    0.007    0.000 typing.py:1241(__init__)
       93    0.000    0.000    0.007    0.000 pydoc.py:170(_getdoc)
        1    0.000    0.000    0.007    0.007 specifiers.py:99(Specifier)
        2    0.000    0.000    0.007    0.003 fft.py:1(<module>)
        1    0.000    0.000    0.007    0.007 dir_util.py:1(<module>)
        3    0.000    0.000    0.007    0.002 _distribution_infrastructure.py:1368(_generate_example)
  515/173    0.001    0.000    0.007    0.000 sorting.py:202(ordered)
     2603    0.004    0.000    0.007    0.000 inspect.py:735(unwrap)
    21761    0.005    0.000    0.007    0.000 _docscrape.py:80(is_empty)
        2    0.000    0.000    0.006    0.003 spawn.py:1(<module>)
        1    0.000    0.000    0.006    0.006 ExifTags.py:1(<module>)
       82    0.000    0.000    0.006    0.000 linecache.py:52(checkcache)
      665    0.005    0.000    0.006    0.000 _compiler.py:241(_optimize_charset)
    14840    0.005    0.000    0.006    0.000 _parser.py:162(__getitem__)
       47    0.000    0.000    0.006    0.000 __init__.py:424(_make_elementwise_unary_prim)
    12544    0.006    0.000    0.006    0.000 {built-in method builtins.abs}
    18109    0.006    0.000    0.006    0.000 fromnumeric.py:72(<dictcomp>)
      459    0.001    0.000    0.006    0.000 permutations.py:354(list)
       21    0.000    0.000    0.006    0.000 _distn_infrastructure.py:3380(_construct_docstrings)
     6489    0.004    0.000    0.006    0.000 <frozen importlib._bootstrap_external>:84(_unpack_uint32)
        5    0.000    0.000    0.006    0.001 sets.py:1982(__new__)
        1    0.000    0.000    0.006    0.006 ElementTree.py:1(<module>)
    28116    0.005    0.000    0.006    0.000 units.py:166(<genexpr>)
        1    0.000    0.000    0.006    0.006 tokenize.py:99(_compile)
     9305    0.003    0.000    0.006    0.000 typing.py:1229(_is_dunder)
    22106    0.006    0.000    0.006    0.000 _parser.py:231(__next)
     5726    0.004    0.000    0.006    0.000 _docscrape.py:86(is_unindented)
     2163    0.003    0.000    0.006    0.000 <frozen importlib._bootstrap_external>:675(_validate_timestamp_pyc)
        1    0.000    0.000    0.006    0.006 _codata.py:1(<module>)
       44    0.000    0.000    0.006    0.000 typing.py:2797(_make_nmtuple)
      428    0.002    0.000    0.006    0.000 rcsetup.py:360(validate_color)
        1    0.000    0.000    0.006    0.006 nonhomogeneous.py:1(<module>)
    66802    0.006    0.000    0.006    0.000 {method 'strip' of 'str' objects}
      317    0.001    0.000    0.006    0.000 overrides.py:142(decorator)
      706    0.002    0.000    0.005    0.000 inspect.py:2042(_signature_bound_method)
    30618    0.005    0.000    0.005    0.000 _docscrape.py:43(__getitem__)
    30632    0.005    0.000    0.005    0.000 assumptions.py:489(as_property)
    21721    0.005    0.000    0.005    0.000 <frozen importlib._bootstrap>:244(_verbose_message)
        1    0.000    0.000    0.005    0.005 relational.py:1(<module>)
        1    0.000    0.000    0.005    0.005 _docscrape.py:1(<module>)
 2638/706    0.004    0.000    0.005    0.000 _parser.py:172(getwidth)
        1    0.000    0.000    0.005    0.005 comparison.py:1(<module>)
     1027    0.005    0.000    0.005    0.000 {built-in method torch.transpose}
      472    0.001    0.000    0.005    0.000 assumptions.py:469(__init__)
      295    0.001    0.000    0.005    0.000 _compiler.py:509(_compile_info)
      136    0.000    0.000    0.005    0.000 typing.py:1614(__getitem__)
        6    0.000    0.000    0.005    0.001 _jit_internal.py:928(_overload_method)
    67958    0.005    0.000    0.005    0.000 {method 'items' of 'dict' objects}
        1    0.000    0.000    0.005    0.005 _hypotests.py:1(<module>)
      292    0.001    0.000    0.005    0.000 <frozen importlib._bootstrap_external>:1696(path_hook_for_FileFinder)
    53199    0.005    0.000    0.005    0.000 {method 'rstrip' of 'str' objects}
      459    0.001    0.000    0.005    0.000 permutations.py:385(<listcomp>)
      901    0.001    0.000    0.005    0.000 inspect.py:3032(replace)
3977/3797    0.003    0.000    0.005    0.000 sympify.py:124(sympify)
        1    0.000    0.000    0.005    0.005 cm.py:53(_gen_cmap_registry)
      700    0.001    0.000    0.005    0.000 colors.py:161(to_rgba)
     2072    0.001    0.000    0.005    0.000 module.py:2059(parameters)
        1    0.000    0.000    0.005    0.005 _manylinux.py:1(<module>)
     1477    0.001    0.000    0.005    0.000 typing.py:684(<genexpr>)
      134    0.000    0.000    0.005    0.000 wrappers.py:105(__call__)
     3626    0.001    0.000    0.005    0.000 <frozen abc>:117(__instancecheck__)
     7790    0.003    0.000    0.005    0.000 <frozen importlib._bootstrap>:405(parent)
     1644    0.002    0.000    0.005    0.000 dataclasses.py:665(_is_type)
       68    0.000    0.000    0.005    0.000 _internal.py:31(inner)
    13536    0.003    0.000    0.005    0.000 conflict.py:15(<genexpr>)
        1    0.000    0.000    0.005    0.005 wavfile.py:1(<module>)
        1    0.000    0.000    0.005    0.005 _symbolic_trace.py:1(<module>)
    93/40    0.000    0.000    0.005    0.000 typing.py:1363(__getitem__)
       81    0.000    0.000    0.004    0.000 docstring.py:77(dedent_interpd)
     2492    0.002    0.000    0.004    0.000 <frozen importlib._bootstrap>:922(find_spec)
     1027    0.002    0.000    0.004    0.000 _tensor_str.py:243(<listcomp>)
      131    0.002    0.000    0.004    0.000 facts.py:599(deduce_all_facts)
     2005    0.003    0.000    0.004    0.000 inspect.py:167(get_annotations)
       97    0.000    0.000    0.004    0.000 _array_api.py:733(_make_capabilities_note)
  580/530    0.001    0.000    0.004    0.000 containers.py:54(__new__)
       17    0.000    0.000    0.004    0.000 rcsetup.py:928(validate_cycler)
     6077    0.004    0.000    0.004    0.000 {method 'match' of 're.Pattern' objects}
       29    0.000    0.000    0.004    0.000 __init__.py:439(_make_elementwise_binary_prim)
       11    0.000    0.000    0.004    0.000 core.py:1152(parse_string)
     1467    0.004    0.000    0.004    0.000 {built-in method numpy.array}
      459    0.001    0.000    0.004    0.000 permutations.py:433(__init__)
     9982    0.003    0.000    0.004    0.000 <frozen importlib._bootstrap>:1032(__exit__)
        1    0.000    0.000    0.004    0.004 rl.py:1(<module>)
41415/39575    0.004    0.000    0.004    0.000 {built-in method builtins.hash}
       13    0.000    0.000    0.004    0.000 enum.py:874(_convert_)
       14    0.000    0.000    0.004    0.000 inspect.py:592(getmembers)
     2072    0.001    0.000    0.004    0.000 module.py:2084(named_parameters)
     2597    0.003    0.000    0.004    0.000 <frozen importlib._bootstrap>:198(cb)
        1    0.000    0.000    0.004    0.004 _configuration_override.py:1(<module>)
       14    0.001    0.000    0.004    0.000 inspect.py:550(_getmembers)
     2597    0.002    0.000    0.004    0.000 <frozen importlib._bootstrap>:71(__init__)
      905    0.001    0.000    0.004    0.000 {built-in method builtins.sorted}
       20    0.002    0.000    0.004    0.000 enum.py:1625(convert_class)
    19564    0.004    0.000    0.004    0.000 {method 'rpartition' of 'str' objects}
        1    0.000    0.000    0.004    0.004 _root_scalar.py:1(<module>)
        1    0.000    0.000    0.004    0.004 mathtext.py:2275(Parser)
        1    0.000    0.000    0.004    0.004 _decomp_svd.py:1(<module>)
       10    0.000    0.000    0.004    0.000 para4band.py:294(<listcomp>)
       64    0.000    0.000    0.004    0.000 core.py:1449(__add__)
     1298    0.004    0.000    0.004    0.000 {built-in method torch._C._dispatch_has_kernel}
        1    0.000    0.000    0.004    0.004 platform.py:1(<module>)
      160    0.001    0.000    0.004    0.000 _docscrape.py:290(_parse_see_also)
        1    0.000    0.000    0.004    0.004 mathtext.py:2845(<lambda>)
        1    0.000    0.000    0.004    0.004 mathtext.py:2845(<listcomp>)
        1    0.000    0.000    0.004    0.004 helpers.py:1(<module>)
        1    0.000    0.000    0.004    0.004 _solvers.py:1(<module>)
     1602    0.001    0.000    0.004    0.000 __init__.py:163(match)
     9982    0.003    0.000    0.004    0.000 <frozen importlib._bootstrap>:1028(__enter__)
        1    0.000    0.000    0.004    0.004 _differentialevolution.py:1(<module>)
       36    0.000    0.000    0.004    0.000 __init__.py:1329(_add_data_doc)
     8132    0.004    0.000    0.004    0.000 {method 'replace' of 'str' objects}
        8    0.000    0.000    0.004    0.000 core.py:5842(__init__)
       65    0.000    0.000    0.004    0.000 core.py:4081(__init__)
      292    0.001    0.000    0.004    0.000 <frozen zipimport>:64(__init__)
       32    0.001    0.000    0.004    0.000 colors.py:776(from_list)
     3626    0.001    0.000    0.004    0.000 {built-in method _abc._abc_instancecheck}
        1    0.000    0.000    0.004    0.004 socket.py:1(<module>)
     28/7    0.000    0.000    0.004    0.001 core.py:4715(leave_whitespace)
  628/550    0.001    0.000    0.004    0.000 _pytree.py:143(tree_flatten)
    58/39    0.000    0.000    0.004    0.000 functools.py:981(__get__)
     1048    0.003    0.000    0.004    0.000 _ops.py:314(inner)
       45    0.000    0.000    0.004    0.000 core.py:3146(mayReturnEmpty)
     8288    0.003    0.000    0.004    0.000 inspect.py:3011(<genexpr>)
 2209/389    0.000    0.000    0.004    0.000 <frozen abc>:121(__subclasscheck__)
     8652    0.003    0.000    0.004    0.000 <frozen importlib._bootstrap_external>:134(<genexpr>)
     2072    0.002    0.000    0.004    0.000 module.py:2045(_named_members)
        1    0.001    0.001    0.004    0.004 symbolic_opset9.py:1(<module>)
     2015    0.001    0.000    0.004    0.000 containers.py:60(__getitem__)
        1    0.000    0.000    0.004    0.004 ops.py:205(add_arithmetic_ops)
    38/19    0.000    0.000    0.004    0.000 core.py:3119(re)
      138    0.000    0.000    0.004    0.000 rcsetup.py:87(f)
        1    0.000    0.000    0.004    0.004 polyoptions.py:1(<module>)
      426    0.000    0.000    0.004    0.000 colors.py:129(is_color_like)
        1    0.000    0.000    0.004    0.004 _array_like.py:1(<module>)
        1    0.000    0.000    0.004    0.004 rnn.py:340(RNN)
 2209/389    0.003    0.000    0.003    0.000 {built-in method _abc._abc_subclasscheck}
        1    0.000    0.000    0.003    0.003 residue_ntheory.py:1(<module>)
     4952    0.001    0.000    0.003    0.000 permutations.py:320(__missing__)
       18    0.000    0.000    0.003    0.000 ops.py:348(_wrap)
        4    0.003    0.001    0.003    0.001 _codata.py:1993(parse_constants_2002to2014)
       22    0.000    0.000    0.003    0.000 inspect.py:1344(getfullargspec)
      278    0.001    0.000    0.003    0.000 overrides.py:83(verify_matching_signatures)
        1    0.000    0.000    0.003    0.003 _complex.py:1(<module>)
     3514    0.003    0.000    0.003    0.000 copy.py:201(_deepcopy_list)
     2568    0.001    0.000    0.003    0.000 typing.py:159(_type_convert)
       42    0.000    0.000    0.003    0.000 doccer.py:283(decorate)
        1    0.000    0.000    0.003    0.003 _max_len_seq.py:1(<module>)
      401    0.000    0.000    0.003    0.000 _parser.py:94(closegroup)
        1    0.000    0.000    0.003    0.003 binary.py:1(<module>)
        1    0.000    0.000    0.003    0.003 radsimp.py:1(<module>)
      786    0.001    0.000    0.003    0.000 _builtins.py:161(_register_builtin)
      436    0.000    0.000    0.003    0.000 core.py:526(copy)
       30    0.000    0.000    0.003    0.000 __init__.py:652(__init__)
      370    0.001    0.000    0.003    0.000 colors.py:197(_to_rgba_no_colorcycle)
    12085    0.003    0.000    0.003    0.000 {built-in method numpy.seterrobj}
       87    0.000    0.000    0.003    0.000 typing.py:483(__getitem__)
        1    0.000    0.000    0.003    0.003 trajectory.py:1(<module>)
       30    0.000    0.000    0.003    0.000 <frozen _collections_abc>:941(update)
       28    0.002    0.000    0.003    0.000 optimizer.py:489(add_param_group)
      125    0.000    0.000    0.003    0.000 cache.py:66(func_wrapper)
        3    0.000    0.000    0.003    0.001 __init__.py:958(distribution)
        5    0.000    0.000    0.003    0.001 io.py:28(zopen)
   260/11    0.001    0.000    0.003    0.000 core.py:813(_parseNoCache)
        3    0.000    0.000    0.003    0.001 __init__.py:545(from_name)
      213    0.003    0.000    0.003    0.000 {built-in method builtins.compile}
      140    0.001    0.000    0.003    0.000 deprecation.py:168(deprecate)
     3053    0.003    0.000    0.003    0.000 {built-in method torch._C._functorch.is_functorch_wrapped_tensor}
     6266    0.002    0.000    0.003    0.000 misc.py:500(as_int)
      129    0.000    0.000    0.003    0.000 typing.py:1585(__getitem__)
     2016    0.002    0.000    0.003    0.000 module.py:799(compute_should_use_set_data)
       18    0.000    0.000    0.003    0.000 rcsetup.py:437(validate_font_properties)
    63/11    0.000    0.000    0.003    0.000 core.py:4172(parseImpl)
     1513    0.001    0.000    0.003    0.000 sympify.py:514(_sympify)
        9    0.000    0.000    0.003    0.000 fontconfig_pattern.py:119(parse)
       16    0.000    0.000    0.003    0.000 util.py:412(_inner)
        1    0.000    0.000    0.003    0.003 polynomialring.py:1(<module>)
2950/2720    0.001    0.000    0.003    0.000 containers.py:56(<genexpr>)
       15    0.000    0.000    0.003    0.000 _bunch.py:32(_make_tuple_bunch)
       71    0.000    0.000    0.003    0.000 typing.py:701(Literal)
        1    0.000    0.000    0.003    0.003 _decomp_schur.py:1(<module>)
    10738    0.002    0.000    0.003    0.000 mathtext.py:2847(<genexpr>)
        6    0.000    0.000    0.003    0.001 _docscrape.py:680(methods)
        1    0.000    0.000    0.003    0.003 _construct.py:1(<module>)
        2    0.000    0.000    0.003    0.001 deprecation.py:208(_inner_deprecate_positional_args)
        1    0.000    0.000    0.003    0.003 rootoftools.py:1(<module>)
        1    0.000    0.000    0.003    0.003 _pep440.py:1(<module>)
       21    0.000    0.000    0.003    0.000 __init__.py:910(<genexpr>)
     7638    0.003    0.000    0.003    0.000 {method 'rfind' of 'str' objects}
      100    0.000    0.000    0.003    0.000 iterables.py:1127(rotate_left)
      436    0.001    0.000    0.003    0.000 copy.py:66(copy)
       18    0.000    0.000    0.003    0.000 __init__.py:808(search)
        1    0.000    0.000    0.003    0.003 _plotutils.py:1(<module>)
     59/7    0.000    0.000    0.003    0.000 core.py:3923(leave_whitespace)
    20723    0.003    0.000    0.003    0.000 {method 'get' of 'mappingproxy' objects}
      239    0.000    0.000    0.003    0.000 rcsetup.py:353(validate_color_for_prop_cycle)
       64    0.000    0.000    0.003    0.000 rcsetup.py:106(<listcomp>)
        1    0.000    0.000    0.003    0.003 _reqs.py:1(<module>)
        1    0.000    0.000    0.003    0.003 hyper.py:1(<module>)
   127/59    0.000    0.000    0.003    0.000 core.py:4015(copy)
       16    0.000    0.000    0.003    0.000 inspect.py:2311(_signature_from_builtin)
        1    0.000    0.000    0.003    0.003 _comparison.py:1(<module>)
      544    0.000    0.000    0.003    0.000 registration.py:296(wrapper)
    18215    0.003    0.000    0.003    0.000 {built-in method numpy.asanyarray}
        1    0.000    0.000    0.003    0.003 hyperbolic.py:1(<module>)
        1    0.000    0.000    0.003    0.003 integerring.py:1(<module>)
       12    0.000    0.000    0.003    0.000 dataclasses.py:600(_frozen_get_del_attr)
        2    0.000    0.000    0.003    0.001 _pytree.py:1(<module>)
       87    0.001    0.000    0.003    0.000 utils.py:25(_toposort)
        1    0.000    0.000    0.003    0.003 boolalg.py:1(<module>)
     4016    0.002    0.000    0.003    0.000 copy.py:243(_keep_alive)
       16    0.000    0.000    0.003    0.000 inspect.py:2177(_signature_fromstr)
    93/40    0.000    0.000    0.003    0.000 typing.py:1395(_determine_new_args)
     3053    0.003    0.000    0.003    0.000 {built-in method torch._C._get_default_device}
        1    0.000    0.000    0.003    0.003 interpreter.py:1(<module>)
        1    0.000    0.000    0.003    0.003 configparser.py:1(<module>)
       74    0.000    0.000    0.003    0.000 typing.py:1599(__getitem_inner__)
      292    0.001    0.000    0.003    0.000 <frozen importlib._bootstrap_external>:1559(__init__)
        1    0.000    0.000    0.003    0.003 table.py:1(<module>)
        1    0.000    0.000    0.003    0.003 _fit.py:1(<module>)
     2163    0.003    0.000    0.003    0.000 {built-in method _imp._fix_co_filename}
        1    0.000    0.000    0.003    0.003 message.py:135(Message)
        1    0.000    0.000    0.003    0.003 _info.py:1(<module>)
        1    0.000    0.000    0.003    0.003 _stats_mstats_common.py:1(<module>)
       64    0.000    0.000    0.003    0.000 util.py:401(replaced_by_pep8)
       69    0.003    0.000    0.003    0.000 {built-in method builtins.dir}
       16    0.000    0.000    0.003    0.000 _functools.py:75(wrapper)
      140    0.000    0.000    0.003    0.000 core.py:4109(<genexpr>)
        8    0.000    0.000    0.003    0.000 __init__.py:817(lookup)
       21    0.000    0.000    0.003    0.000 _distn_infrastructure.py:3358(_attach_methods)
        8    0.000    0.000    0.003    0.000 __init__.py:823(__init__)
      101    0.000    0.000    0.003    0.000 _meta_registrations.py:33(wrapper)
      786    0.000    0.000    0.003    0.000 _builtins.py:128(_get_builtin_table)
        1    0.000    0.000    0.003    0.003 structure.py:5581(<dictcomp>)
        3    0.000    0.000    0.002    0.001 ctx_mp.py:63(__init__)
        1    0.000    0.000    0.002    0.002 _logsumexp.py:1(<module>)
       16    0.000    0.000    0.002    0.000 structure.py:5069(__init__)
       57    0.000    0.000    0.002    0.000 <frozen genericpath>:16(exists)
        1    0.000    0.000    0.002    0.002 version.py:161(Version)
       16    0.000    0.000    0.002    0.000 structure.py:3449(__init__)
       24    0.001    0.000    0.002    0.000 util.py:210(_collapse_string_to_ranges)
      431    0.001    0.000    0.002    0.000 typing.py:320(_remove_dups_flatten)
    24170    0.002    0.000    0.002    0.000 {built-in method numpy.geterrobj}
        1    0.000    0.000    0.002    0.002 _pep440.py:285(Version)
        1    0.000    0.000    0.002    0.002 _decomp_qr.py:1(<module>)
        1    0.000    0.000    0.002    0.002 _basinhopping.py:1(<module>)
       54    0.000    0.000    0.002    0.000 deprecation.py:333(_delete_parameter)
        7    0.000    0.000    0.002    0.000 core.py:2833(__init__)
        1    0.000    0.000    0.002    0.002 _dtype_like.py:1(<module>)
      367    0.001    0.000    0.002    0.000 permutations.py:1323(__mul__)
      451    0.000    0.000    0.002    0.000 <frozen importlib._bootstrap_external>:164(_path_isdir)
        1    0.000    0.000    0.002    0.002 diophantine.py:1(<module>)
    17313    0.002    0.000    0.002    0.000 {built-in method builtins.issubclass}
       93    0.000    0.000    0.002    0.000 _compatibility.py:10(mark_back_compat)
        6    0.000    0.000    0.002    0.000 _docscrape.py:694(properties)
        1    0.000    0.000    0.002    0.002 _decomp_qz.py:1(<module>)
        1    0.000    0.000    0.002    0.002 meta_utils.py:1(<module>)
       16    0.000    0.000    0.002    0.000 rcsetup.py:843(cycler)
      512    0.000    0.000    0.002    0.000 numbers.py:1984(__lt__)
      291    0.000    0.000    0.002    0.000 <frozen codecs>:319(decode)
    17441    0.002    0.000    0.002    0.000 {built-in method _imp.acquire_lock}
        2    0.000    0.000    0.002    0.001 polynomials.py:1(<module>)
        1    0.000    0.000    0.002    0.002 _decomp_cholesky.py:1(<module>)
    10202    0.002    0.000    0.002    0.000 {method 'endswith' of 'str' objects}
    18072    0.002    0.000    0.002    0.000 fromnumeric.py:2416(_all_dispatcher)
       78    0.000    0.000    0.002    0.000 typing.py:1772(__class_getitem__)
        3    0.000    0.000    0.002    0.001 _distribution_infrastructure.py:2043(_draw)
      605    0.001    0.000    0.002    0.000 _inspect.py:96(getargspec)
   127/59    0.000    0.000    0.002    0.000 core.py:4018(<listcomp>)
       21    0.000    0.000    0.002    0.000 decompositions.py:3288(register_inplace)
        1    0.000    0.000    0.002    0.002 chi2.py:1(<module>)
       20    0.000    0.000    0.002    0.000 mul.py:205(flatten)
        1    0.000    0.000    0.002    0.002 permutations.py:1(<module>)
     1465    0.002    0.000    0.002    0.000 {built-in method torch._C._get_schema}
     1027    0.002    0.000    0.002    0.000 _tensor_str.py:240(<listcomp>)
    12404    0.002    0.000    0.002    0.000 {method 'add' of 'set' objects}
    17441    0.002    0.000    0.002    0.000 {built-in method _imp.release_lock}
       15    0.000    0.000    0.002    0.000 core.py:1601(__or__)
     5359    0.002    0.000    0.002    0.000 {method 'update' of 'dict' objects}
        1    0.000    0.000    0.002    0.002 __init__.py:1129(manager_path)
        3    0.000    0.000    0.002    0.001 patches.py:1867(pprint_styles)
        3    0.000    0.000    0.002    0.001 __init__.py:32(message_from_string)
        1    0.000    0.000    0.002    0.002 _docscrape.py:112(NumpyDocString)
        1    0.000    0.000    0.002    0.002 clip_grad.py:1(<module>)
       93    0.000    0.000    0.002    0.000 sites.py:38(__init__)
        1    0.000    0.000    0.002    0.002 galoistools.py:1(<module>)
     1193    0.002    0.000    0.002    0.000 _docscrape.py:188(_strip)
      291    0.002    0.000    0.002    0.000 {built-in method _codecs.utf_8_decode}
       15    0.000    0.000    0.002    0.000 core.py:4399(__init__)
        5    0.000    0.000    0.002    0.000 pathlib.py:1036(open)
        3    0.000    0.000    0.002    0.001 parser.py:59(parsestr)
      165    0.000    0.000    0.002    0.000 typing.py:832(__init__)
        1    0.000    0.000    0.002    0.002 common_types.py:1(<module>)
        1    0.000    0.000    0.002    0.002 c10d_error_logger.py:1(<module>)
        2    0.001    0.001    0.002    0.001 _codata.py:2019(parse_constants_2018toXXXX)
     6251    0.001    0.000    0.002    0.000 _parser.py:247(match)
     3053    0.002    0.000    0.002    0.000 {built-in method torch._is_functional_tensor}
        3    0.000    0.000    0.002    0.001 parser.py:41(parse)
      965    0.002    0.000    0.002    0.000 typing_extensions.py:3092(_has_generic_or_protocol_as_origin)
       59    0.000    0.000    0.002    0.000 core.py:3931(<listcomp>)
       28    0.000    0.000    0.002    0.000 _basic.py:16(_dispatch)
        1    0.002    0.002    0.002    0.002 {built-in method torch._C._c10d_init}
        5    0.000    0.000    0.002    0.000 ctx_base.py:42(__init__)
        2    0.000    0.000    0.002    0.001 decoder.py:332(decode)
        1    0.000    0.000    0.002    0.002 _ufunc_config.py:1(<module>)
       28    0.000    0.000    0.002    0.000 _backend.py:174(generate_multimethod)
        1    0.000    0.000    0.002    0.002 _address.py:1(<module>)
        2    0.001    0.000    0.002    0.001 decoder.py:343(raw_decode)
        1    0.000    0.000    0.002    0.002 routeddecoder.py:1(<module>)
        1    0.000    0.000    0.002    0.002 _mannwhitneyu.py:1(<module>)
        1    0.000    0.000    0.002    0.002 unary.py:1(<module>)
        2    0.002    0.001    0.002    0.001 {method 'join' of 'bytes' objects}
     2602    0.001    0.000    0.002    0.000 numbers.py:1965(__eq__)
        1    0.000    0.000    0.002    0.002 integers.py:1(<module>)
        1    0.000    0.000    0.002    0.002 pyplot.py:2138(_setup_pyplot_info_docstrings)
        7    0.001    0.000    0.002    0.000 _builtins.py:134(register_all)
        1    0.000    0.000    0.002    0.002 _parseaddr.py:1(<module>)
        1    0.000    0.000    0.002    0.002 Bravais_Lattice.py:1(<module>)
      607    0.000    0.000    0.002    0.000 typing.py:1535(<genexpr>)
        1    0.000    0.000    0.002    0.002 symbolic_shapes.py:1(<module>)
        1    0.000    0.000    0.002    0.002 expr_with_intlimits.py:1(<module>)
      590    0.001    0.000    0.002    0.000 enum.py:1483(__and__)
        3    0.000    0.000    0.002    0.001 patches.py:1871(<listcomp>)
     5212    0.002    0.000    0.002    0.000 {built-in method _thread.allocate_lock}
     1800    0.001    0.000    0.002    0.000 _docscrape.py:457(_str_indent)
      100    0.000    0.000    0.002    0.000 matrix_element.py:167(__radd__)
        1    0.000    0.000    0.002    0.002 _artifact_location.py:1(<module>)
        1    0.000    0.000    0.002    0.002 _arffread.py:1(<module>)
       64    0.000    0.000    0.002    0.000 wrappers.py:285(backwards_not_supported)
        1    0.000    0.000    0.002    0.002 ctx_mp_python.py:1(<module>)
      200    0.000    0.000    0.002    0.000 containers.py:75(__add__)
     2616    0.001    0.000    0.002    0.000 <frozen importlib._bootstrap_external>:180(_path_isabs)
        3    0.000    0.000    0.002    0.001 _distribution_infrastructure.py:868(draw)
        1    0.000    0.000    0.002    0.002 _attachment.py:1(<module>)
        5    0.001    0.000    0.002    0.000 functions.py:18(__init__)
        1    0.000    0.000    0.002    0.002 proxy.py:1(<module>)
       71    0.000    0.000    0.002    0.000 enum.py:451(__prepare__)
       28    0.000    0.000    0.002    0.000 _backend.py:312(get_defaults)
        4    0.000    0.000    0.002    0.000 feedparser.py:173(feed)
     7319    0.002    0.000    0.002    0.000 enum.py:1074(__new__)
     2776    0.001    0.000    0.002    0.000 inspect.py:755(_is_wrapper)
        6    0.000    0.000    0.002    0.000 _distribution_infrastructure.py:605(draw)
     4901    0.001    0.000    0.002    0.000 inspect.py:378(isfunction)
      664    0.002    0.000    0.002    0.000 {built-in method torch.view_as_real}
     5579    0.001    0.000    0.002    0.000 _ops.py:289(__hash__)
        1    0.000    0.000    0.002    0.002 perm_groups.py:1(<module>)
        1    0.000    0.000    0.002    0.002 parametrizations.py:1(<module>)
       74    0.000    0.000    0.002    0.000 typing.py:1580(copy_with)
       22    0.000    0.000    0.002    0.000 core.py:620(set_parse_action)
      544    0.001    0.000    0.002    0.000 registration.py:213(register)
        1    0.000    0.000    0.002    0.002 gzip.py:296(read)
        1    0.000    0.000    0.002    0.002 _dual_annealing.py:1(<module>)
       35    0.000    0.000    0.002    0.000 _typing.py:346(__new__)
        1    0.000    0.000    0.002    0.002 _header_value_parser.py:1(<module>)
       44    0.000    0.000    0.002    0.000 typing.py:2799(<dictcomp>)
     1043    0.001    0.000    0.002    0.000 typing.py:1270(__getattr__)
       22    0.000    0.000    0.002    0.000 _distribution_infrastructure.py:1083(filtered)
        2    0.000    0.000    0.002    0.001 error.py:1(<module>)
        7    0.000    0.000    0.002    0.000 feedparser.py:178(_call_parse)
        1    0.000    0.000    0.002    0.002 vmap.py:1(<module>)
        1    0.000    0.000    0.002    0.002 _fftlog.py:1(<module>)
       22    0.000    0.000    0.002    0.000 core.py:701(<listcomp>)
     1126    0.000    0.000    0.002    0.000 colors.py:124(_is_nth_color)
      459    0.001    0.000    0.002    0.000 iterables.py:1923(has_dups)
       26    0.000    0.000    0.002    0.000 core.py:257(_trim_arity)
        1    0.000    0.000    0.002    0.002 _static.py:1(<module>)
        7    0.000    0.000    0.002    0.000 feedparser.py:218(_parsegen)
     4289    0.001    0.000    0.002    0.000 _parser.py:170(append)
        7    0.000    0.000    0.002    0.000 gzip.py:474(read)
      243    0.000    0.000    0.002    0.000 functools.py:518(decorating_function)
     1456    0.001    0.000    0.002    0.000 _docscrape.py:49(read)
        2    0.000    0.000    0.002    0.001 sets.py:1(<module>)
        7    0.000    0.000    0.002    0.000 ctx_mp_python.py:279(binary_op)
  108/107    0.000    0.000    0.002    0.000 __init__.py:235(wrapper)
     4881    0.001    0.000    0.002    0.000 _parser.py:158(__len__)
        1    0.000    0.000    0.002    0.002 depends.py:1(<module>)
        2    0.000    0.000    0.002    0.001 factorials.py:1(<module>)
        1    0.000    0.000    0.002    0.002 realfield.py:1(<module>)
     2194    0.002    0.000    0.002    0.000 <frozen importlib._bootstrap>:48(_new_module)
        1    0.000    0.000    0.002    0.002 _char_codes.py:1(<module>)
        1    0.000    0.000    0.002    0.002 relativedelta.py:1(<module>)
       72    0.000    0.000    0.002    0.000 inspect.py:3224(__str__)
        1    0.000    0.000    0.002    0.002 monomials.py:1(<module>)
      976    0.001    0.000    0.002    0.000 _compiler.py:396(_simple)
        3    0.000    0.000    0.002    0.001 _constants.py:1(<module>)
      592    0.000    0.000    0.002    0.000 _pytree.py:136(__init__)
     2869    0.002    0.000    0.002    0.000 functools.py:65(wraps)
     9727    0.002    0.000    0.002    0.000 {method '__exit__' of '_thread.lock' objects}
        1    0.000    0.000    0.002    0.002 realfield.py:87(__init__)
      532    0.001    0.000    0.002    0.000 function_base.py:2285(__init__)
        1    0.000    0.000    0.002    0.002 ExifTags.py:21(Base)
      961    0.002    0.000    0.002    0.000 {method 'search' of 're.Pattern' objects}
     6106    0.002    0.000    0.002    0.000 {built-in method torch.get_default_dtype}
        1    0.000    0.000    0.002    0.002 zeta_functions.py:1(<module>)
     2492    0.002    0.000    0.002    0.000 {built-in method _imp.find_frozen}
        1    0.000    0.000    0.001    0.001 <frozen importlib._bootstrap>:977(exec_module)
       13    0.000    0.000    0.001    0.000 enum.py:891(<listcomp>)
        1    0.000    0.000    0.001    0.001 _direct_py.py:1(<module>)
        1    0.000    0.000    0.001    0.001 <frozen ntpath>:1(<module>)
        2    0.000    0.000    0.001    0.001 fractions.py:1(<module>)
      317    0.000    0.000    0.001    0.000 font_manager.py:962(_json_decode)
        1    0.000    0.000    0.001    0.001 _mio4.py:1(<module>)
      403    0.001    0.000    0.001    0.000 {built-in method _abc._abc_init}
        2    0.000    0.000    0.001    0.001 sysconfig.py:185(_safe_realpath)
        1    0.000    0.000    0.001    0.001 parsing.py:1(<module>)
        2    0.000    0.000    0.001    0.001 <frozen posixpath>:411(realpath)
     2671    0.001    0.000    0.001    0.000 <frozen importlib._bootstrap>:357(__init__)
       20    0.000    0.000    0.001    0.000 core.py:5363(parseImpl)
        1    0.000    0.000    0.001    0.001 _nonlin.py:1(<module>)
        1    0.000    0.000    0.001    0.001 core.py:6281(<listcomp>)
        1    0.000    0.000    0.001    0.001 monomials.py:387(MonomialOps)
        1    0.000    0.000    0.001    0.001 monkey.py:72(patch_all)
      3/2    0.000    0.000    0.001    0.001 <frozen posixpath>:420(_joinrealpath)
        1    0.000    0.000    0.001    0.001 annotations.py:1(<module>)
        1    0.000    0.000    0.001    0.001 monkey.py:93(_patch_distribution_metadata)
        1    0.000    0.000    0.001    0.001 accumulationbounds.py:1(<module>)
     1482    0.001    0.000    0.001    0.000 enum.py:809(__setattr__)
        1    0.000    0.000    0.001    0.001 backend_tools.py:1(<module>)
        1    0.000    0.000    0.001    0.001 wavfile.py:72(WAVE_FORMAT)
        1    0.000    0.000    0.001    0.001 module.py:366(Module)
     3053    0.001    0.000    0.001    0.000 {method '_is_zerotensor' of 'torch._C._TensorBase' objects}
        1    0.000    0.000    0.001    0.001 queue.py:1(<module>)
     2209    0.001    0.000    0.001    0.000 {method 'extend' of 'list' objects}
        1    0.000    0.000    0.001    0.001 _expm_frechet.py:1(<module>)
        1    0.000    0.000    0.001    0.001 core.py:389(ParserElement)
        1    0.000    0.000    0.001    0.001 fancysets.py:1(<module>)
        1    0.000    0.000    0.001    0.001 polyoptions.py:397(Domain)
  274/176    0.000    0.000    0.001    0.000 core.py:1947(name)
        1    0.000    0.000    0.001    0.001 csv.py:1(<module>)
        1    0.000    0.000    0.001    0.001 connection.py:1(<module>)
       83    0.000    0.000    0.001    0.000 core.py:3887(__init__)
       35    0.000    0.000    0.001    0.000 core.py:76(ismethod)
     6493    0.001    0.000    0.001    0.000 {built-in method from_bytes}
       19    0.001    0.000    0.001    0.000 {built-in method posix.lstat}
     6024    0.001    0.000    0.001    0.000 {method 'set' of '_contextvars.ContextVar' objects}
      248    0.001    0.000    0.001    0.000 _docscrape.py:499(_str_see_also)
       97    0.001    0.000    0.001    0.000 {method 'sort' of 'list' objects}
        1    0.000    0.000    0.001    0.001 _pocketfft.py:1(<module>)
     9746    0.001    0.000    0.001    0.000 {built-in method _thread.get_ident}
  206/114    0.000    0.000    0.001    0.000 core.py:1910(default_name)
      502    0.001    0.000    0.001    0.000 typing.py:306(_deduplicate)
      927    0.001    0.000    0.001    0.000 permutations.py:1028(_af_new)
      541    0.000    0.000    0.001    0.000 dataclasses.py:828(_set_new_attribute)
        1    0.000    0.000    0.001    0.001 stateless.py:1(<module>)
        2    0.000    0.000    0.001    0.001 core.py:6134(srange)
       12    0.001    0.000    0.001    0.000 artist.py:1273(<listcomp>)
     3872    0.001    0.000    0.001    0.000 typing.py:1348(__eq__)
      365    0.000    0.000    0.001    0.000 typing.py:1623(<genexpr>)
     1627    0.001    0.000    0.001    0.000 enum.py:78(_is_private)
        1    0.000    0.000    0.001    0.001 _spherical_voronoi.py:1(<module>)
       29    0.000    0.000    0.001    0.000 typing.py:1628(copy_with)
      628    0.000    0.000    0.001    0.000 _pytree.py:105(_is_leaf)
       14    0.000    0.000    0.001    0.000 core.py:115(doc_note)
        1    0.000    0.000    0.001    0.001 configparser.py:569(RawConfigParser)
        1    0.000    0.000    0.001    0.001 bonds.py:1(<module>)
        7    0.000    0.000    0.001    0.000 _nonlin.py:1584(_nonlin_wrapper)
     1366    0.000    0.000    0.001    0.000 {built-in method builtins.delattr}
    28/22    0.000    0.000    0.001    0.000 _distribution_infrastructure.py:1136(wrapped)
       20    0.000    0.000    0.001    0.000 core.py:5119(parseImpl)
     22/3    0.000    0.000    0.001    0.000 core.py:4122(streamline)
      104    0.000    0.000    0.001    0.000 typing.py:1006(__init__)
      436    0.001    0.000    0.001    0.000 copy.py:259(_reconstruct)
        1    0.000    0.000    0.001    0.001 art3d.py:1(<module>)
       42    0.000    0.000    0.001    0.000 _typing.py:257(__new__)
     4191    0.001    0.000    0.001    0.000 numbers.py:2011(__hash__)
     6034    0.001    0.000    0.001    0.000 _ufunc_config.py:426(__init__)
        1    0.000    0.000    0.001    0.001 bonds.py:21(_load_bond_length_data)
        1    0.000    0.000    0.001    0.001 getlimits.py:162(_register_known_types)
     2016    0.001    0.000    0.001    0.000 {built-in method torch._has_compatible_shallow_copy_type}
       43    0.000    0.000    0.001    0.000 ast.py:33(parse)
     72/4    0.000    0.000    0.001    0.000 core.py:980(_parseCache)
    11121    0.001    0.000    0.001    0.000 inspect.py:2729(name)
        5    0.000    0.000    0.001    0.000 perm_groups.py:124(__new__)
     2994    0.001    0.000    0.001    0.000 _parser.py:284(tell)
     1662    0.001    0.000    0.001    0.000 basic.py:288(__new__)
      822    0.000    0.000    0.001    0.000 typing_extensions.py:3114(_is_unpacked_typevartuple)
      755    0.001    0.000    0.001    0.000 dataclasses.py:451(_field_init)
        1    0.000    0.000    0.001    0.001 helpers.py:634(make_html_tags)
       75    0.000    0.000    0.001    0.000 pathlib.py:868(__new__)
     6024    0.001    0.000    0.001    0.000 {method 'reset' of '_contextvars.ContextVar' objects}
        1    0.000    0.000    0.001    0.001 helpers.py:576(_makeTags)
     6106    0.001    0.000    0.001    0.000 {method 'has_names' of 'torch._C._TensorBase' objects}
        1    0.000    0.000    0.001    0.001 sequences.py:1(<module>)
     8013    0.001    0.000    0.001    0.000 _docscrape.py:153(__getitem__)
      628    0.000    0.000    0.001    0.000 <string>:2(__init__)
       82    0.000    0.000    0.001    0.000 pathlib.py:504(_from_parts)
        1    0.000    0.000    0.001    0.001 _sketches.py:1(<module>)
       44    0.000    0.000    0.001    0.000 core.py:4404(<genexpr>)
        1    0.000    0.000    0.001    0.001 _correlation.py:1(<module>)
1647/1434    0.001    0.000    0.001    0.000 typing.py:1354(__hash__)
     7528    0.001    0.000    0.001    0.000 {built-in method posix.fspath}
     30/4    0.000    0.000    0.001    0.000 core.py:3963(streamline)
     8747    0.001    0.000    0.001    0.000 {method 'isidentifier' of 'str' objects}
        1    0.000    0.000    0.001    0.001 _torch_docs.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _quadpack_py.py:1(<module>)
       96    0.000    0.000    0.001    0.000 pathlib.py:484(_parse_args)
     6941    0.001    0.000    0.001    0.000 {method 'pop' of 'list' objects}
        1    0.000    0.000    0.001    0.001 _sensitivity_analysis.py:1(<module>)
      199    0.000    0.000    0.001    0.000 typing.py:245(_collect_parameters)
       64    0.000    0.000    0.001    0.000 typing.py:1470(copy_with)
        1    0.000    0.000    0.001    0.001 contextvars.py:1(<module>)
       31    0.000    0.000    0.001    0.000 _base.py:56(__set_name__)
      992    0.001    0.000    0.001    0.000 _docscrape.py:491(_str_section)
        1    0.000    0.000    0.001    0.001 trf_linear.py:1(<module>)
  755/724    0.001    0.000    0.001    0.000 typing.py:1636(__hash__)
     3053    0.001    0.000    0.001    0.000 {built-in method torch._C._len_torch_dispatch_stack}
     1456    0.001    0.000    0.001    0.000 _docscrape.py:16(strip_blank_lines)
      105    0.000    0.000    0.001    0.000 typing.py:1822(__init_subclass__)
        1    0.000    0.000    0.001    0.001 extras.py:1(<module>)
       55    0.000    0.000    0.001    0.000 __init__.py:2081(getLogger)
      748    0.001    0.000    0.001    0.000 dataclasses.py:347(field)
        1    0.000    0.000    0.001    0.001 unary.py:167(<dictcomp>)
      215    0.000    0.000    0.001    0.000 symbolic_helper.py:263(decorator)
      141    0.000    0.000    0.001    0.000 sorting.py:179(_nodes)
        1    0.000    0.000    0.001    0.001 _survival.py:1(<module>)
        1    0.000    0.000    0.001    0.001 struct.py:1(<module>)
        1    0.000    0.000    0.001    0.001 dviread.py:1(<module>)
        1    0.000    0.000    0.001    0.001 fontconfig_pattern.py:62(__init__)
      129    0.000    0.000    0.001    0.000 dataclasses.py:394(_recursive_repr)
     3666    0.001    0.000    0.001    0.000 facts.py:633(<genexpr>)
    11885    0.001    0.000    0.001    0.000 inspect.py:2741(kind)
      586    0.001    0.000    0.001    0.000 _inspect.py:65(getargs)
     1800    0.001    0.000    0.001    0.000 _docscrape.py:458(<listcomp>)
        6    0.000    0.000    0.001    0.000 warnings.py:130(filterwarnings)
      138    0.000    0.000    0.001    0.000 _meta_registrations.py:34(register)
        1    0.000    0.000    0.001    0.001 subgraph_rewriter.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _decomp_ldl.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _miobase.py:1(<module>)
        9    0.000    0.000    0.001    0.000 assume.py:175(__new__)
        1    0.000    0.000    0.001    0.001 graph.py:675(Graph)
       37    0.001    0.000    0.001    0.000 function_base.py:24(linspace)
    11079    0.001    0.000    0.001    0.000 {built-in method builtins.callable}
        6    0.000    0.000    0.001    0.000 getlimits.py:34(__init__)
        2    0.000    0.000    0.001    0.001 __init__.py:456(_get_config_or_cache_dir)
        1    0.000    0.000    0.001    0.001 rnn.py:551(LSTM)
      146    0.000    0.000    0.001    0.000 enum.py:923(_get_mixins_)
        1    0.000    0.000    0.001    0.001 _rules.py:1(<module>)
       16    0.000    0.000    0.001    0.000 inspect.py:2105(_signature_strip_non_python_syntax)
     2546    0.001    0.000    0.001    0.000 _docscrape.py:403(<genexpr>)
        1    0.000    0.000    0.001    0.001 grad_scaler.py:1(<module>)
       52    0.000    0.000    0.001    0.000 inspect.py:936(getsourcefile)
        1    0.000    0.000    0.001    0.001 __init__.py:454(StrFormatStyle)
  518/510    0.000    0.000    0.001    0.000 {built-in method builtins.repr}
        1    0.000    0.000    0.001    0.001 _zeros_py.py:1(<module>)
       21    0.000    0.000    0.001    0.000 arrayprint.py:506(wrapper)
      459    0.000    0.000    0.001    0.000 permutations.py:455(<listcomp>)
        1    0.000    0.000    0.001    0.001 tools_common.py:1(<module>)
        2    0.000    0.000    0.001    0.000 base.py:1(<module>)
        2    0.000    0.000    0.001    0.000 __init__.py:368(get_device_capability)
      665    0.001    0.000    0.001    0.000 _compiler.py:214(_compile_charset)
        2    0.000    0.000    0.001    0.000 container.py:1(<module>)
       17    0.000    0.000    0.001    0.000 deprecation.py:416(_make_keyword_only)
      426    0.000    0.000    0.001    0.000 __init__.py:218(finditer)
       69    0.000    0.000    0.001    0.000 _compatibility.py:24(mark_not_back_compat)
     7354    0.001    0.000    0.001    0.000 {method '__contains__' of 'frozenset' objects}
        1    0.000    0.000    0.001    0.001 _trustregion_dogleg.py:1(<module>)
        2    0.000    0.000    0.001    0.000 combining.py:1(<module>)
        2    0.000    0.000    0.001    0.000 pathlib.py:1111(mkdir)
        3    0.000    0.000    0.001    0.000 __init__.py:385(get_device_properties)
      425    0.000    0.000    0.001    0.000 artist.py:1363(aliased_name)
        1    0.000    0.000    0.001    0.001 miscellaneous.py:1(<module>)
     10/3    0.000    0.000    0.001    0.000 unicode.py:14(__get__)
       90    0.000    0.000    0.001    0.000 basic.py:447(sort_key)
     3053    0.001    0.000    0.001    0.000 {method 'is_neg' of 'torch._C._TensorBase' objects}
        1    0.000    0.000    0.001    0.001 torch_version.py:1(<module>)
     2686    0.001    0.000    0.001    0.000 util.py:202(__call__)
       59    0.000    0.000    0.001    0.000 __init__.py:791(joinpath)
      205    0.000    0.000    0.001    0.000 inspect.py:2763(__str__)
      277    0.001    0.000    0.001    0.000 results.py:153(__new__)
        1    0.000    0.000    0.001    0.001 _variation.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _external_property_file_references.py:1(<module>)
        3    0.000    0.000    0.001    0.000 ctx_mp.py:96(init_builtins)
       54    0.000    0.000    0.001    0.000 __init__.py:1327(getLogger)
       80    0.000    0.000    0.001    0.000 _array_api.py:757(xp_capabilities)
        2    0.001    0.000    0.001    0.000 {built-in method posix.mkdir}
        1    0.000    0.000    0.001    0.001 binary.py:171(<dictcomp>)
        1    0.000    0.000    0.001    0.001 operator_schemas.py:1(<module>)
     20/6    0.000    0.000    0.001    0.000 core.py:4741(streamline)
     1375    0.001    0.000    0.001    0.000 enum.py:37(_is_descriptor)
        3    0.000    0.000    0.001    0.000 string.py:1(<module>)
        3    0.001    0.000    0.001    0.000 {built-in method torch.cuda._get_device_properties}
      115    0.000    0.000    0.001    0.000 inspect.py:786(_finddoc)
        1    0.000    0.000    0.001    0.001 elliptic_integrals.py:1(<module>)
  628/550    0.001    0.000    0.001    0.000 _pytree.py:165(tree_unflatten)
        8    0.000    0.000    0.001    0.000 __init__.py:794(children)
     1747    0.001    0.000    0.001    0.000 enum.py:47(_is_dunder)
       27    0.000    0.000    0.001    0.000 pathlib.py:940(glob)
        1    0.000    0.000    0.001    0.001 _distribution_infrastructure.py:2297(entropy)
      182    0.000    0.000    0.001    0.000 numbers.py:1975(__gt__)
        1    0.000    0.000    0.001    0.001 runner.py:1(<module>)
      542    0.001    0.000    0.001    0.000 _parser.py:367(_escape)
        6    0.000    0.000    0.001    0.000 _docscrape.py:698(<listcomp>)
        1    0.000    0.000    0.001    0.001 __init__.py:42(_load_pmg_settings)
        2    0.000    0.000    0.001    0.000 _internal.py:1(<module>)
        1    0.000    0.000    0.001    0.001 mathieu_functions.py:1(<module>)
        1    0.000    0.000    0.001    0.001 ImageMode.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _distribution_infrastructure.py:2317(_entropy_quadrature)
        2    0.000    0.000    0.001    0.000 gzip.py:467(_read_gzip_header)
       50    0.000    0.000    0.001    0.000 basic.py:737(as_dummy)
        1    0.000    0.000    0.001    0.001 _distribution_infrastructure.py:2076(_quadrature)
      106    0.000    0.000    0.001    0.000 contextlib.py:257(contextmanager)
        2    0.000    0.000    0.001    0.000 gzip.py:418(_read_gzip_header)
        1    0.000    0.000    0.001    0.001 defchararray.py:1(<module>)
      772    0.001    0.000    0.001    0.000 _docscrape.py:28(__init__)
       98    0.000    0.000    0.001    0.000 pathlib.py:56(parse_parts)
      628    0.001    0.000    0.001    0.000 _pytree.py:120(__post_init__)
       53    0.000    0.000    0.001    0.000 core.py:3161(parseImpl)
       14    0.000    0.000    0.001    0.000 periodic_table.py:1608(get_el_sp)
       15    0.000    0.000    0.001    0.000 typing.py:2893(__new__)
        1    0.000    0.000    0.001    0.001 _interpolation.py:1(<module>)
     1027    0.001    0.000    0.001    0.000 {method 'size' of 'torch._C._TensorBase' objects}
      886    0.001    0.000    0.001    0.000 typing.py:2374(get_origin)
       31    0.000    0.000    0.001    0.000 gzip.py:86(read)
        6    0.000    0.000    0.001    0.000 pathlib.py:1245(is_dir)
     2237    0.001    0.000    0.001    0.000 inspect.py:292(isclass)
       12    0.000    0.000    0.001    0.000 __init__.py:1852(_define_aliases)
     1286    0.001    0.000    0.001    0.000 enum.py:728(__delattr__)
      395    0.000    0.000    0.001    0.000 containers.py:110(__hash__)
      401    0.000    0.000    0.001    0.000 _parser.py:82(opengroup)
        6    0.000    0.000    0.001    0.000 pathlib.py:1008(stat)
        1    0.000    0.000    0.001    0.001 indexed.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _nnls.py:1(<module>)
        8    0.000    0.000    0.001    0.000 core.py:2951(_generateDefaultName)
     5813    0.001    0.000    0.001    0.000 {method 'group' of 're.Match' objects}
        1    0.000    0.000    0.001    0.001 unary.py:170(<dictcomp>)
        1    0.001    0.001    0.001    0.001 {built-in method torch._C._autograd_init}
     6024    0.001    0.000    0.001    0.000 numeric.py:2166(_allclose_dispatcher)
    24/12    0.000    0.000    0.001    0.000 core.py:4425(parseImpl)
        1    0.000    0.000    0.001    0.001 matcher_utils.py:1(<module>)
        2    0.000    0.000    0.001    0.000 _procrustes.py:1(<module>)
        1    0.000    0.000    0.001    0.001 signal.py:1(<module>)
      485    0.001    0.000    0.001    0.000 _array_api.py:676(__str__)
      664    0.000    0.000    0.001    0.000 _pytree.py:99(_get_node_type)
       11    0.000    0.000    0.001    0.000 core.py:2952(charsAsStr)
        1    0.000    0.000    0.001    0.001 special.py:1(<module>)
        1    0.000    0.000    0.001    0.001 scalarstring.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _region.py:1(<module>)
      468    0.000    0.000    0.001    0.000 _parser.py:444(_uniq)
        1    0.000    0.000    0.001    0.001 scale.py:1(<module>)
     1721    0.001    0.000    0.001    0.000 typing.py:1631(__eq__)
        1    0.000    0.000    0.001    0.001 _type_utils.py:1(<module>)
       80    0.001    0.000    0.001    0.000 function.py:289(__init__)
        1    0.000    0.000    0.001    0.001 string.py:69(__init_subclass__)
      347    0.000    0.000    0.001    0.000 pretty_symbology.py:10(U)
        1    0.000    0.000    0.001    0.001 _tanhsinh.py:958(nsum)
     1820    0.001    0.000    0.001    0.000 _docscrape.py:156(__setitem__)
        1    0.000    0.000    0.001    0.001 _tensor_docs.py:1(<module>)
      235    0.001    0.000    0.001    0.000 core.py:456(__init__)
      398    0.001    0.000    0.001    0.000 _util.py:526(<listcomp>)
        1    0.001    0.001    0.001    0.001 helpers.py:678(<dictcomp>)
        1    0.000    0.000    0.001    0.001 gammazeta.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _short_time_fft.py:1(<module>)
     3053    0.001    0.000    0.001    0.000 _python_dispatch.py:89(<listcomp>)
        1    0.000    0.000    0.001    0.001 ElementPath.py:1(<module>)
       18    0.000    0.000    0.001    0.000 core.py:5230(parseImpl)
        1    0.001    0.001    0.001    0.001 events.py:644(BaseDefaultEventLoopPolicy)
     2667    0.001    0.000    0.001    0.000 <frozen importlib._bootstrap>:165(__init__)
        1    0.000    0.000    0.001    0.001 para4tb.py:24(<listcomp>)
      110    0.000    0.000    0.001    0.000 _compiler.py:384(_mk_bitmap)
        1    0.000    0.000    0.001    0.001 std.py:245(tqdm)
        3    0.000    0.000    0.001    0.000 feedparser.py:471(_parse_headers)
     2412    0.001    0.000    0.001    0.000 _parser.py:109(__init__)
        1    0.000    0.000    0.001    0.001 sites.py:1(<module>)
      349    0.000    0.000    0.001    0.000 _docscrape.py:303(parse_item_name)
       84    0.000    0.000    0.001    0.000 __init__.py:1641(get_aten_op)
        1    0.000    0.000    0.001    0.001 pydoc.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _decomp_polar.py:1(<module>)
     3208    0.001    0.000    0.001    0.000 {method 'pop' of 'dict' objects}
      327    0.001    0.000    0.001    0.000 <frozen posixpath>:60(isabs)
     1627    0.001    0.000    0.001    0.000 enum.py:58(_is_sunder)
     1008    0.000    0.000    0.001    0.000 colors.py:266(<genexpr>)
        1    0.000    0.000    0.001    0.001 rnn.py:830(GRU)
      266    0.000    0.000    0.001    0.000 <frozen _collections_abc>:859(__iter__)
       65    0.000    0.000    0.001    0.000 assumptions.py:497(getit)
      750    0.000    0.000    0.001    0.000 numbers.py:1972(__ne__)
        2    0.000    0.000    0.001    0.000 combinatorics.py:1(<module>)
        1    0.000    0.000    0.001    0.001 unicode.py:80(alphanums)
       63    0.000    0.000    0.001    0.000 colors.py:829(reversed)
       15    0.000    0.000    0.001    0.000 _distribution_infrastructure.py:3136(moment)
      300    0.000    0.000    0.001    0.000 matrix_element.py:41(<listcomp>)
        4    0.000    0.000    0.001    0.000 enum.py:822(_create_)
        1    0.000    0.000    0.001    0.001 gammazeta.py:1372(<listcomp>)
        1    0.000    0.000    0.001    0.001 equality.py:1(<module>)
        1    0.000    0.000    0.001    0.001 __init__.py:505(get_cachedir)
        1    0.000    0.000    0.001    0.001 complexfield.py:1(<module>)
       80    0.001    0.000    0.001    0.000 _array_api.py:682(_make_sphinx_capabilities)
      347    0.001    0.000    0.001    0.000 {built-in method unicodedata.lookup}
     6024    0.001    0.000    0.001    0.000 numeric.py:2245(_isclose_dispatcher)
       93    0.000    0.000    0.001    0.000 composition.py:141(__init__)
        5    0.000    0.000    0.001    0.000 polyhedron.py:390(<listcomp>)
      269    0.000    0.000    0.001    0.000 __init__.py:304(<genexpr>)
       38    0.000    0.000    0.001    0.000 getlimits.py:111(_float_to_str)
       28    0.000    0.000    0.001    0.000 _distribution_infrastructure.py:305(get_numerical_endpoints)
      423    0.001    0.000    0.001    0.000 {method 'copy' of 'dict' objects}
        1    0.000    0.000    0.001    0.001 pkgutil.py:506(extend_path)
        6    0.000    0.000    0.001    0.000 _distribution_infrastructure.py:1597(__init__)
       10    0.000    0.000    0.001    0.000 extras.py:233(__init__)
        6    0.000    0.000    0.001    0.000 _docscrape.py:684(<listcomp>)
      428    0.001    0.000    0.001    0.000 libmpf.py:291(from_man_exp)
        1    0.000    0.000    0.001    0.001 tools_common.py:78(FxNetAccFusionsFinder)
        1    0.000    0.000    0.001    0.001 parse.py:1(<module>)
     2496    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap>:748(find_spec)
        3    0.000    0.000    0.001    0.000 activation.py:1(<module>)
       20    0.000    0.000    0.001    0.000 typing.py:1357(__or__)
       10    0.000    0.000    0.001    0.000 extras.py:237(getdoc)
      300    0.001    0.000    0.001    0.000 matrix_element.py:90(__extract_var)
        1    0.000    0.000    0.001    0.001 unicode.py:70(alphas)
       58    0.000    0.000    0.001    0.000 wrappers.py:328(elementwise_unary_scalar_wrapper)
        1    0.001    0.001    0.001    0.001 {built-in method torch._C._rpc_init}
     20/6    0.000    0.000    0.001    0.000 core.py:4698(parseImpl)
        6    0.001    0.000    0.001    0.000 {method 'decompress' of 'zlib.Decompress' objects}
        1    0.000    0.000    0.001    0.001 pickletools.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _web_request.py:1(<module>)
        2    0.000    0.000    0.001    0.000 unicode.py:55(_chars_for_ranges)
  335/280    0.000    0.000    0.001    0.000 _compiler.py:434(_get_literal_prefix)
     6092    0.001    0.000    0.001    0.000 multiarray.py:669(result_type)
       71    0.000    0.000    0.001    0.000 enum.py:987(_find_new_)
        1    0.000    0.000    0.001    0.001 complexfield.py:48(__init__)
        1    0.000    0.000    0.001    0.001 _web_response.py:1(<module>)
        1    0.000    0.000    0.001    0.001 latex.py:1(<module>)
       42    0.000    0.000    0.001    0.000 {numpy.random._generator.default_rng}
        1    0.000    0.000    0.001    0.001 pooling.py:1(<module>)
      431    0.000    0.000    0.001    0.000 _util.py:541(<genexpr>)
        1    0.000    0.000    0.001    0.001 _add_docstring.py:1(<module>)
      297    0.000    0.000    0.001    0.000 _parser.py:222(__init__)
      186    0.000    0.000    0.001    0.000 typing.py:1673(__hash__)
       83    0.000    0.000    0.001    0.000 deprecation.py:222(finalize)
      106    0.000    0.000    0.001    0.000 typing.py:932(__init__)
      266    0.000    0.000    0.001    0.000 dataclasses.py:380(_tuple_str)
       34    0.000    0.000    0.001    0.000 symbol.py:494(__new__)
     2811    0.001    0.000    0.001    0.000 facts.py:582(_tell)
     1246    0.000    0.000    0.001    0.000 _docscrape.py:454(_str_header)
        1    0.000    0.000    0.001    0.001 beta_functions.py:1(<module>)
        1    0.000    0.000    0.001    0.001 tensor_functions.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _realtransforms.py:1(<module>)
      129    0.001    0.000    0.001    0.000 ctx_mp_python.py:979(_wrap_libmp_function)
      639    0.000    0.000    0.001    0.000 ctx_mp_python.py:1014(_wrap_specfun)
     2164    0.001    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:1097(__init__)
        1    0.000    0.000    0.001    0.001 periodic_table.py:865(Element)
       90    0.000    0.000    0.001    0.000 basic.py:475(<listcomp>)
        1    0.000    0.000    0.001    0.001 texmanager.py:1(<module>)
        6    0.000    0.000    0.001    0.000 _distribution_infrastructure.py:1616(_update_parameters)
       61    0.000    0.000    0.001    0.000 core.py:4672(__init__)
        1    0.000    0.000    0.001    0.001 __init__.py:149(EntryPoint)
        1    0.000    0.000    0.001    0.001 libintmath.py:1(<module>)
        1    0.000    0.000    0.001    0.001 dataset.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _exception.py:1(<module>)
        1    0.000    0.000    0.001    0.001 ctx_iv.py:306(__init__)
        1    0.000    0.000    0.001    0.001 _graph_traversal.py:1(<module>)
        1    0.000    0.000    0.001    0.001 TiffTags.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _suppression.py:1(<module>)
      130    0.000    0.000    0.001    0.000 dataclasses.py:371(_fields_in_init_order)
        1    0.000    0.000    0.001    0.001 figure.py:220(Figure)
       29    0.000    0.000    0.001    0.000 _array_api.py:553(xp_promote)
        1    0.000    0.000    0.001    0.001 symbolic_opset10.py:1(<module>)
     3959    0.001    0.000    0.001    0.000 typing.py:1341(<genexpr>)
        1    0.000    0.000    0.001    0.001 reinplace.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _add_docstring.py:27(_parse_docstrings)
        1    0.000    0.000    0.001    0.001 _result_provenance.py:1(<module>)
        3    0.000    0.000    0.001    0.000 arrayprint.py:1487(_array_repr_implementation)
        1    0.000    0.000    0.001    0.001 _linalg.py:1(<module>)
       45    0.000    0.000    0.001    0.000 basic.py:1386(has)
      544    0.000    0.000    0.001    0.000 registration.py:159(add)
        5    0.000    0.000    0.001    0.000 decorator.py:177(create)
        1    0.000    0.000    0.001    0.001 ctx_iv.py:1(<module>)
       26    0.000    0.000    0.001    0.000 _hook_iterator.py:102(hook_iterator)
     3970    0.001    0.000    0.001    0.000 {method 'values' of 'mappingproxy' objects}
        1    0.000    0.000    0.001    0.001 _rectangle.py:1(<module>)
       72    0.000    0.000    0.001    0.000 pydoc.py:104(_finddoc)
        1    0.000    0.000    0.001    0.001 __init__.py:569(matplotlib_fname)
        1    0.000    0.000    0.001    0.001 sampler.py:1(<module>)
        1    0.000    0.000    0.001    0.001 ase.py:1(<module>)
      540    0.000    0.000    0.001    0.000 _tensor_docs.py:8(add_docstr_all)
        4    0.000    0.000    0.001    0.000 __init__.py:2295(_make_reduction_prim)
        1    0.000    0.000    0.001    0.001 _translation_metadata.py:1(<module>)
        2    0.000    0.000    0.001    0.000 loader.py:1(<module>)
        1    0.000    0.000    0.001    0.001 __init__.py:1151(<listcomp>)
        1    0.000    0.000    0.001    0.001 ticker.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _special_matrices.py:1(<module>)
        3    0.000    0.000    0.001    0.000 arrayprint.py:561(array2string)
        1    0.001    0.001    0.001    0.001 comments.py:1007(CommentedKeyMap)
      237    0.000    0.000    0.001    0.000 libmpf.py:330(from_int)
       19    0.000    0.000    0.001    0.000 functools.py:852(register)
       63    0.000    0.000    0.001    0.000 colors.py:848(<dictcomp>)
     6709    0.001    0.000    0.001    0.000 {built-in method builtins.ord}
     2016    0.001    0.000    0.001    0.000 {method 'is_floating_point' of 'torch._C._TensorBase' objects}
        1    0.000    0.000    0.001    0.001 texmanager.py:47(TexManager)
        1    0.000    0.000    0.001    0.001 _logical_location.py:1(<module>)
      664    0.000    0.000    0.001    0.000 _pytree.py:89(_is_namedtuple_instance)
      185    0.000    0.000    0.001    0.000 inspect.py:1449(formatannotation)
        1    0.000    0.000    0.001    0.001 bz2.py:271(open)
        1    0.000    0.000    0.001    0.001 polar.py:1(<module>)
       87    0.000    0.000    0.001    0.000 utils.py:83(groupby)
     4835    0.001    0.000    0.001    0.000 _ops.py:398(name)
       42    0.000    0.000    0.001    0.000 symbol.py:359(__xnew__)
     4878    0.001    0.000    0.001    0.000 basic.py:906(args)
     5303    0.001    0.000    0.001    0.000 inspect.py:3024(parameters)
       82    0.000    0.000    0.001    0.000 __init__.py:1873(make_alias)
        1    0.000    0.000    0.001    0.001 _elffile.py:1(<module>)
      245    0.000    0.000    0.001    0.000 _docscrape.py:591(get_func)
       45    0.000    0.000    0.001    0.000 basic.py:1507(_has)
        1    0.000    0.000    0.001    0.001 _page_trend_test.py:1(<module>)
        1    0.000    0.000    0.001    0.001 six.py:1(<module>)
       24    0.000    0.000    0.001    0.000 _distribution_infrastructure.py:386(draw)
        1    0.001    0.001    0.001    0.001 platform.py:781(uname_result)
        1    0.000    0.000    0.001    0.001 operator_support.py:1(<module>)
      130    0.000    0.000    0.001    0.000 dataclasses.py:574(<listcomp>)
        1    0.000    0.000    0.001    0.001 __init__.py:345(<listcomp>)
      420    0.000    0.000    0.001    0.000 _ops.py:505(overloads)
        1    0.000    0.000    0.001    0.001 ordinals.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _version_control_details.py:1(<module>)
        1    0.000    0.000    0.001    0.001 __init__.py:421(PercentStyle)
      790    0.000    0.000    0.001    0.000 containers.py:66(__len__)
       10    0.000    0.000    0.001    0.000 dataclasses.py:846(_hash_add)
       12    0.000    0.000    0.001    0.000 _distribution_infrastructure.py:943(filtered)
        1    0.000    0.000    0.001    0.001 _message.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _node.py:1(<module>)
        1    0.000    0.000    0.001    0.001 _stack_frame.py:1(<module>)
        4    0.000    0.000    0.001    0.000 __init__.py:590(gen_candidates)
      146    0.000    0.000    0.001    0.000 deprecation.py:24(_generate_deprecation_warning)
       58    0.000    0.000    0.001    0.000 <frozen abc>:110(register)
        1    0.000    0.000    0.001    0.001 registration.py:1(<module>)
        1    0.001    0.001    0.001    0.001 relativedelta.py:18(relativedelta)
        2    0.000    0.000    0.001    0.000 __init__.py:474(_get_data_path)
        1    0.000    0.000    0.001    0.001 _short_time_fft.py:229(ShortTimeFFT)
        1    0.000    0.000    0.000    0.000 diagonal.py:1(<module>)
        1    0.000    0.000    0.000    0.000 bz2.py:37(__init__)
       14    0.000    0.000    0.000    0.000 __init__.py:2089(_warn_external)
     1318    0.000    0.000    0.000    0.000 enum.py:69(_is_internal_class)
       18    0.000    0.000    0.000    0.000 arrayprint.py:1595(_array_str_implementation)
      271    0.000    0.000    0.000    0.000 _parser.py:307(_class_escape)
     1164    0.000    0.000    0.000    0.000 {built-in method torch._C._add_docstr}
        1    0.000    0.000    0.000    0.000 binary.py:174(<dictcomp>)
        1    0.000    0.000    0.000    0.000 internal.py:1(<module>)
     1406    0.000    0.000    0.000    0.000 _parser.py:79(groups)
        3    0.000    0.000    0.000    0.000 arrayprint.py:523(_array2string)
        7    0.000    0.000    0.000    0.000 periodic_table.py:1223(from_str)
      330    0.000    0.000    0.000    0.000 basic.py:468(inner_key)
        1    0.000    0.000    0.000    0.000 widgets.py:1(<module>)
     5522    0.000    0.000    0.000    0.000 copy.py:182(_deepcopy_atomic)
        1    0.000    0.000    0.000    0.000 node.py:105(Node)
       16    0.000    0.000    0.000    0.000 arraypad.py:533(pad)
       40    0.000    0.000    0.000    0.000 mul.py:483(_gather)
      248    0.000    0.000    0.000    0.000 _docscrape.py:531(_str_index)
       87    0.000    0.000    0.000    0.000 conflict.py:67(<dictcomp>)
        2    0.000    0.000    0.000    0.000 qconfig.py:1(<module>)
      217    0.000    0.000    0.000    0.000 enum.py:913(_check_for_existing_members_)
      544    0.000    0.000    0.000    0.000 registration.py:135(__init__)
       63    0.000    0.000    0.000    0.000 _axis_nan_policy.py:291(_get_axis_params)
       58    0.000    0.000    0.000    0.000 {built-in method _abc._abc_register}
      540    0.000    0.000    0.000    0.000 dataclasses.py:821(_set_qualname)
       10    0.000    0.000    0.000    0.000 dataclasses.py:639(_hash_fn)
     2213    0.000    0.000    0.000    0.000 {method 'find' of 'bytearray' objects}
      146    0.000    0.000    0.000    0.000 enum.py:959(_find_data_type_)
        1    0.000    0.000    0.000    0.000 pathlib.py:313(select_from)
        1    0.000    0.000    0.000    0.000 polygon.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pyplot.py:1872(get_plot_commands)
        1    0.000    0.000    0.000    0.000 __init__.py:486(get_configdir)
      163    0.000    0.000    0.000    0.000 fromnumeric.py:53(_wrapfunc)
     2449    0.000    0.000    0.000    0.000 {method 'setdefault' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 return_types.py:1(<module>)
     3709    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:71(_relax_case)
        6    0.000    0.000    0.000    0.000 deprecation.py:56(warn_deprecated)
      325    0.000    0.000    0.000    0.000 function_base.py:483(_add_docstring)
      163    0.000    0.000    0.000    0.000 iterables.py:585(sift)
        1    0.000    0.000    0.000    0.000 _sarif_log.py:1(<module>)
   190/92    0.000    0.000    0.000    0.000 core.py:1956(__str__)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1(<module>)
        1    0.000    0.000    0.000    0.000 libintmath.py:127(<listcomp>)
        1    0.000    0.000    0.000    0.000 _physical_location.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _run_automation_details.py:1(<module>)
     10/4    0.000    0.000    0.000    0.000 core.py:4409(streamline)
      115    0.000    0.000    0.000    0.000 containers.py:100(__eq__)
     1191    0.000    0.000    0.000    0.000 libintmath.py:91(python_bitcount)
        1    0.000    0.000    0.000    0.000 _location_relationship.py:1(<module>)
     2336    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1565(<genexpr>)
     1293    0.000    0.000    0.000    0.000 inspect.py:1182(tokeneater)
      748    0.000    0.000    0.000    0.000 dataclasses.py:267(__init__)
        1    0.000    0.000    0.000    0.000 _cm_listed.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _edge.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _edge_traversal.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _reporting_configuration.py:1(<module>)
       18    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3211(_moment_central_dispatch)
        1    0.000    0.000    0.000    0.000 _multiformat_message_string.py:1(<module>)
     1027    0.000    0.000    0.000    0.000 {built-in method math.floor}
      129    0.000    0.000    0.000    0.000 fromnumeric.py:1025(argsort)
        1    0.000    0.000    0.000    0.000 _add_newdocs_scalars.py:1(<module>)
       15    0.000    0.000    0.000    0.000 typing.py:2916(<dictcomp>)
        1    0.000    0.000    0.000    0.000 backend_agg.py:389(FigureCanvasAgg)
      117    0.000    0.000    0.000    0.000 typing.py:1020(__typing_subst__)
        1    0.000    0.000    0.000    0.000 _reporting_descriptor_relationship.py:1(<module>)
        1    0.000    0.000    0.000    0.000 utils.py:34(envwrap)
       25    0.000    0.000    0.000    0.000 decorator.py:317(deprecated_decorator)
        1    0.000    0.000    0.000    0.000 ops.py:1(<module>)
        1    0.000    0.000    0.000    0.000 spherical_harmonics.py:1(<module>)
        1    0.000    0.000    0.000    0.000 encoder.py:1(<module>)
       87    0.000    0.000    0.000    0.000 utils.py:61(reverse_dict)
        1    0.000    0.000    0.000    0.000 gzip.py:25(open)
        1    0.000    0.000    0.000    0.000 __init__.py:516(get_data_path)
       28    0.000    0.000    0.000    0.000 _decorator.py:23(__call__)
        1    0.000    0.000    0.000    0.000 projections.py:1(<module>)
        6    0.000    0.000    0.000    0.000 _version.py:55(__init__)
       18    0.000    0.000    0.000    0.000 arrayprint.py:1588(_guarded_repr_or_str)
        1    0.000    0.000    0.000    0.000 band_data_in.py:60(generate_k_path)
        1    0.000    0.000    0.000    0.000 utils.py:73(<dictcomp>)
     1272    0.000    0.000    0.000    0.000 typing.py:882(__eq__)
      174    0.000    0.000    0.000    0.000 <frozen posixpath>:71(join)
        1    0.000    0.000    0.000    0.000 timeouts.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _trace.py:1(<module>)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1779(_validate)
        2    0.000    0.000    0.000    0.000 sysconfig.py:621(get_path)
        1    0.000    0.000    0.000    0.000 interpreter.py:16(Interpreter)
     1036    0.000    0.000    0.000    0.000 _parser.py:166(__setitem__)
        1    0.000    0.000    0.000    0.000 request.py:939(AbstractBasicAuthHandler)
        2    0.000    0.000    0.000    0.000 sysconfig.py:609(get_paths)
        1    0.000    0.000    0.000    0.000 join.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _external_property_file_reference.py:1(<module>)
       10    0.000    0.000    0.000    0.000 contextlib.py:78(inner)
        1    0.000    0.000    0.000    0.000 due.py:1(<module>)
      398    0.000    0.000    0.000    0.000 _util.py:531(<listcomp>)
        1    0.000    0.000    0.000    0.000 _scalars.py:1(<module>)
       49    0.000    0.000    0.000    0.000 core.py:131(get_object_signature)
       86    0.000    0.000    0.000    0.000 _parser.py:265(getuntil)
        1    0.000    0.000    0.000    0.000 graph_manipulation.py:1(<module>)
  460/100    0.000    0.000    0.000    0.000 sorting.py:168(_node_count)
        5    0.000    0.000    0.000    0.000 perm_groups.py:144(<listcomp>)
      459    0.000    0.000    0.000    0.000 iterables.py:1943(<genexpr>)
        1    0.000    0.000    0.000    0.000 version.py:112(StrictVersion)
        1    0.000    0.000    0.000    0.000 _tool_component_reference.py:1(<module>)
        2    0.000    0.000    0.000    0.000 sysconfig.py:261(_expand_vars)
      436    0.000    0.000    0.000    0.000 {method '__reduce_ex__' of 'object' objects}
        1    0.000    0.000    0.000    0.000 _relative_risk.py:1(<module>)
      148    0.000    0.000    0.000    0.000 enum.py:753(__getattr__)
        1    0.000    0.000    0.000    0.000 __init__.py:537(_get_data_path)
        1    0.000    0.000    0.000    0.000 options.py:1(<module>)
        1    0.000    0.000    0.000    0.000 gzip.py:134(__init__)
        1    0.000    0.000    0.000    0.000 modules.py:606(SubModule)
        1    0.000    0.000    0.000    0.000 dataloader.py:129(DataLoader)
      135    0.000    0.000    0.000    0.000 pyplot.py:1884(<genexpr>)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:833(validation)
      471    0.000    0.000    0.000    0.000 {built-in method fromkeys}
        1    0.000    0.000    0.000    0.000 ImageFile.py:1(<module>)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3276(_moment_standardized)
        2    0.000    0.000    0.000    0.000 _functions.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _fix.py:1(<module>)
        1    0.000    0.000    0.000    0.000 artist.py:1236(ArtistInspector)
       82    0.000    0.000    0.000    0.000 symbolic_helper.py:358(decorator)
       52    0.000    0.000    0.000    0.000 core.py:894(__init__)
      110    0.000    0.000    0.000    0.000 _compiler.py:386(<listcomp>)
        1    0.000    0.000    0.000    0.000 para4band.py:122(Para4Band_train)
        1    0.000    0.000    0.000    0.000 _lobpcg.py:1(<module>)
       73    0.000    0.000    0.000    0.000 {built-in method torch.ones}
      266    0.000    0.000    0.000    0.000 inspect.py:973(getmodule)
        1    0.000    0.000    0.000    0.000 main.py:57(__init__)
        5    0.000    0.000    0.000    0.000 ctx_iv.py:244(_binary_op)
     1694    0.000    0.000    0.000    0.000 unicode.py:63(<genexpr>)
      188    0.000    0.000    0.000    0.000 colors.py:850(<listcomp>)
        1    0.000    0.000    0.000    0.000 reductions.py:148(<dictcomp>)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3282(_moment_standardized_dispatch)
       26    0.000    0.000    0.000    0.000 core.py:6855(__init__)
       91    0.000    0.000    0.000    0.000 core.py:2408(__init__)
      109    0.000    0.000    0.000    0.000 inspect.py:2068(_signature_is_builtin)
       68    0.000    0.000    0.000    0.000 _internal.py:14(get_xp)
        1    0.000    0.000    0.000    0.000 ops.py:89(get_ops_with_reflection)
     4061    0.000    0.000    0.000    0.000 inspect.py:2733(default)
        2    0.000    0.000    0.000    0.000 __init__.py:2078(_make_copy_from_view)
        1    0.000    0.000    0.000    0.000 collate.py:1(<module>)
      140    0.000    0.000    0.000    0.000 basic.py:497(__eq__)
        1    0.000    0.000    0.000    0.000 backend.py:1(<module>)
  157/148    0.000    0.000    0.000    0.000 fake_tensor.py:92(contains_tensor_types)
        1    0.000    0.000    0.000    0.000 backend_registry.py:1(<module>)
       54    0.000    0.000    0.000    0.000 decorators.py:46(deco)
        1    0.000    0.000    0.000    0.000 _property_bag.py:1(<module>)
        6    0.000    0.000    0.000    0.000 rcsetup.py:340(validate_color_or_inherit)
        6    0.000    0.000    0.000    0.000 printer.py:424(decorator)
       25    0.000    0.000    0.000    0.000 typing.py:2013(__init_subclass__)
       57    0.000    0.000    0.000    0.000 <frozen posixpath>:228(expanduser)
     2169    0.000    0.000    0.000    0.000 typing.py:1662(<genexpr>)
        2    0.000    0.000    0.000    0.000 _distn_infrastructure.py:4172(get_distribution_names)
     2603    0.000    0.000    0.000    0.000 {built-in method sys.getrecursionlimit}
        1    0.000    0.000    0.000    0.000 entities.py:1(<module>)
      231    0.000    0.000    0.000    0.000 _compiler.py:465(_get_charset_prefix)
        1    0.000    0.000    0.000    0.000 ExifTags.py:295(<dictcomp>)
       26    0.000    0.000    0.000    0.000 core.py:6860(getdoc)
      154    0.000    0.000    0.000    0.000 <frozen _collections_abc>:428(__new__)
       87    0.000    0.000    0.000    0.000 _docscrape.py:658(splitlines_x)
     3221    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}
      398    0.000    0.000    0.000    0.000 _util.py:536(<listcomp>)
        6    0.000    0.000    0.000    0.000 printer.py:392(__init__)
        1    0.000    0.000    0.000    0.000 main.py:761(official_plug_ins)
        1    0.000    0.000    0.000    0.000 ctx_fp.py:18(__init__)
        9    0.000    0.000    0.000    0.000 _multivariate.py:5755(_docfill)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3308(_moment_standardized_normalize)
        4    0.000    0.000    0.000    0.000 assumptions.py:509(_ask)
     1760    0.000    0.000    0.000    0.000 dataclasses.py:427(<genexpr>)
       13    0.000    0.000    0.000    0.000 _deprecation.py:20(decorator)
      776    0.000    0.000    0.000    0.000 enum.py:188(__get__)
       62    0.000    0.000    0.000    0.000 decorator.py:233(memoize_property)
        1    0.000    0.000    0.000    0.000 mlab.py:1(<module>)
      778    0.000    0.000    0.000    0.000 _ops.py:419(__init__)
        1    0.000    0.000    0.000    0.000 hadamard.py:1(<module>)
       54    0.000    0.000    0.000    0.000 decorators.py:52(__sympifyit)
       50    0.000    0.000    0.000    0.000 numbers.py:1622(__eq__)
      398    0.000    0.000    0.000    0.000 _util.py:553(<dictcomp>)
        1    0.000    0.000    0.000    0.000 piecewise.py:1(<module>)
        1    0.000    0.000    0.000    0.000 shape_prop.py:1(<module>)
     3327    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}
        1    0.000    0.000    0.000    0.000 selectors.py:1(<module>)
     1282    0.000    0.000    0.000    0.000 dataclasses.py:647(_is_classvar)
        1    0.000    0.000    0.000    0.000 glob.py:13(glob)
       19    0.000    0.000    0.000    0.000 path.py:98(__init__)
        1    0.000    0.000    0.000    0.000 dlpack.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _symbolic_trace.py:204(Tracer)
       12    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:724(validate)
        1    0.000    0.000    0.000    0.000 ask.py:21(AssumptionKeys)
      398    0.000    0.000    0.000    0.000 _util.py:546(<listcomp>)
        1    0.000    0.000    0.000    0.000 symbolic_opset8.py:1(<module>)
        5    0.000    0.000    0.000    0.000 decorator.py:144(make)
        1    0.000    0.000    0.000    0.000 nvfuser_prims.py:664(register_var_mean)
        1    0.000    0.000    0.000    0.000 colorbar.py:321(ColorbarBase)
        3    0.000    0.000    0.000    0.000 <decorator-gen-1>:1(_held_figure)
        1    0.000    0.000    0.000    0.000 _multiufuncs.py:1(<module>)
        1    0.000    0.000    0.000    0.000 gammasimp.py:1(<module>)
        1    0.000    0.000    0.000    0.000 matadd.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _spdx.py:1(<module>)
        6    0.000    0.000    0.000    0.000 typing.py:1360(__ror__)
     1371    0.000    0.000    0.000    0.000 {method 'capitalize' of 'str' objects}
     2361    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:413(has_location)
      482    0.000    0.000    0.000    0.000 dataclasses.py:306(__set_name__)
        3    0.000    0.000    0.000    0.000 typing.py:2852(NamedTuple)
        3    0.000    0.000    0.000    0.000 decorator.py:200(decorate)
      456    0.000    0.000    0.000    0.000 feedparser.py:128(__next__)
       50    0.000    0.000    0.000    0.000 containers.py:177(<lambda>)
      194    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1293(_get_parent_path)
      398    0.000    0.000    0.000    0.000 _util.py:550(<dictcomp>)
        1    0.000    0.000    0.000    0.000 pickle.py:197(<listcomp>)
        1    0.000    0.000    0.000    0.000 polyerrors.py:1(<module>)
       13    0.000    0.000    0.000    0.000 deprecation.py:277(_rename_parameter)
        1    0.000    0.000    0.000    0.000 permutation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 expr_with_limits.py:1(<module>)
        2    0.000    0.000    0.000    0.000 determinant.py:1(<module>)
        1    0.000    0.000    0.000    0.000 datapipes.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1506(UnivariateDistribution)
       35    0.000    0.000    0.000    0.000 transforms.py:1251(__init_subclass__)
       28    0.000    0.000    0.000    0.000 inspect.py:2248(p)
  224/112    0.000    0.000    0.000    0.000 module.py:2224(named_modules)
        4    0.000    0.000    0.000    0.000 core.py:1518(__mul__)
      171    0.000    0.000    0.000    0.000 typing.py:1287(__instancecheck__)
        1    0.000    0.000    0.000    0.000 _special_locations.py:1(<module>)
       34    0.000    0.000    0.000    0.000 core.py:3064(__init__)
       26    0.000    0.000    0.000    0.000 _sources.py:102(make_source_context)
      100    0.000    0.000    0.000    0.000 iterables.py:1970(uniq)
        3    0.000    0.000    0.000    0.000 arrayprint.py:452(_get_format_function)
      590    0.000    0.000    0.000    0.000 _compiler.py:568(isstring)
        3    0.000    0.000    0.000    0.000 decorators.py:123(sympify_method_args)
      3/1    0.000    0.000    0.000    0.000 glob.py:60(_iglob)
       10    0.000    0.000    0.000    0.000 _torch_docs.py:10(parse_kwargs)
      240    0.000    0.000    0.000    0.000 functools.py:479(lru_cache)
        1    0.000    0.000    0.000    0.000 threading.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _meta.py:1(<module>)
       40    0.000    0.000    0.000    0.000 core.py:2462(__init__)
        1    0.000    0.000    0.000    0.000 constraints.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _sources.py:1(<module>)
      824    0.000    0.000    0.000    0.000 {method 'update' of 'set' objects}
      216    0.000    0.000    0.000    0.000 _policybase.py:293(header_source_parse)
      191    0.000    0.000    0.000    0.000 typing.py:1608(<genexpr>)
       26    0.000    0.000    0.000    0.000 _jit_internal.py:1125(_qualified_name)
     2163    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1122(get_filename)
       24    0.000    0.000    0.000    0.000 core.py:5818(__init__)
      115    0.000    0.000    0.000    0.000 inspect.py:776(_findclass)
     2016    0.000    0.000    0.000    0.000 __future__.py:20(get_overwrite_module_params_on_conversion)
      536    0.000    0.000    0.000    0.000 function_base.py:348(iterable)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3017(sample)
        7    0.000    0.000    0.000    0.000 power.py:136(__new__)
       10    0.000    0.000    0.000    0.000 symbol.py:654(symbols)
        1    0.000    0.000    0.000    0.000 _named_member_accessor.py:1(<module>)
       52    0.000    0.000    0.000    0.000 package_importer.py:687(_patched_getfile)
       30    0.000    0.000    0.000    0.000 _array_api.py:503(xp_result_type)
      129    0.000    0.000    0.000    0.000 {method 'argsort' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.000    0.000 _base.py:422(_AxesBase)
        1    0.000    0.000    0.000    0.000 types.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _script.py:892(_get_methods)
       22    0.000    0.000    0.000    0.000 core.py:4215(_generateDefaultName)
       21    0.000    0.000    0.000    0.000 symbol.py:325(__new__)
        1    0.000    0.000    0.000    0.000 argparse.py:1(<module>)
       54    0.000    0.000    0.000    0.000 __init__.py:1378(_fixupParents)
        4    0.000    0.000    0.000    0.000 assumptions.py:481(copy)
       17    0.000    0.000    0.000    0.000 getlimits.py:484(__new__)
       62    0.000    0.000    0.000    0.000 __init__.py:873(normalize)
        1    0.000    0.000    0.000    0.000 markers.py:145(MarkerStyle)
      735    0.000    0.000    0.000    0.000 dataclasses.py:511(_init_param)
        1    0.000    0.000    0.000    0.000 importtools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _color_data.py:1(<module>)
      436    0.000    0.000    0.000    0.000 copyreg.py:104(__newobj__)
        1    0.000    0.000    0.000    0.000 __init__.py:258(WordSet)
        1    0.000    0.000    0.000    0.000 gaussiandomains.py:1(<module>)
        1    0.000    0.000    0.000    0.000 para4band.py:1(<module>)
       43    0.000    0.000    0.000    0.000 decompositions.py:43(type_casts)
       12    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:352(contains)
        1    0.000    0.000    0.000    0.000 geo.py:1(<module>)
        1    0.000    0.000    0.000    0.000 containers.py:1(<module>)
        1    0.000    0.000    0.000    0.000 periodic_table.py:72(ElementBase)
        1    0.000    0.000    0.000    0.000 glob.py:1(<module>)
        1    0.000    0.000    0.000    0.000 gmpy.py:110(_get_flint)
        1    0.000    0.000    0.000    0.000 axis.py:628(Axis)
        1    0.000    0.000    0.000    0.000 sharding.py:1(<module>)
     1282    0.000    0.000    0.000    0.000 dataclasses.py:655(_is_initvar)
        1    0.000    0.000    0.000    0.000 nanfunctions.py:1(<module>)
       73    0.000    0.000    0.000    0.000 rcsetup.py:90(<listcomp>)
       18    0.000    0.000    0.000    0.000 message.py:489(get)
        1    0.000    0.000    0.000    0.000 symbolic_opset12.py:1(<module>)
      757    0.000    0.000    0.000    0.000 __init__.py:907(<lambda>)
       26    0.000    0.000    0.000    0.000 _sources.py:37(normalize_source_lines)
        1    0.000    0.000    0.000    0.000 partitions.py:1(<module>)
        2    0.000    0.000    0.000    0.000 doccer.py:263(filldoc)
      453    0.000    0.000    0.000    0.000 {built-in method numpy.asarray}
       71    0.000    0.000    0.000    0.000 typing.py:335(_flatten_literal_params)
        1    0.000    0.000    0.000    0.000 split_module.py:1(<module>)
      295    0.000    0.000    0.000    0.000 _distn_infrastructure.py:839(<genexpr>)
        1    0.000    0.000    0.000    0.000 periodic_table.py:1536(from_str)
      295    0.000    0.000    0.000    0.000 {built-in method _sre.compile}
        1    0.000    0.000    0.000    0.000 _tensor.py:81(Tensor)
      200    0.000    0.000    0.000    0.000 {built-in method builtins.locals}
        3    0.000    0.000    0.000    0.000 arrayprint.py:411(<lambda>)
        1    0.000    0.000    0.000    0.000 _foreach_utils.py:1(<module>)
        2    0.000    0.000    0.000    0.000 doccer.py:292(unindent_dict)
        1    0.000    0.000    0.000    0.000 binrel.py:1(<module>)
     1330    0.000    0.000    0.000    0.000 {built-in method sys.intern}
        1    0.000    0.000    0.000    0.000 symbolic_opset13.py:1(<module>)
        1    0.000    0.000    0.000    0.000 collections.py:22(Collection)
      958    0.000    0.000    0.000    0.000 utils.py:56(<genexpr>)
        1    0.000    0.000    0.000    0.000 _named_member_accessor.py:85(NamedMemberAccessor)
        1    0.000    0.000    0.000    0.000 profiler_util.py:1(<module>)
        2    0.000    0.000    0.000    0.000 _new_distributions.py:49(__init__)
        1    0.000    0.000    0.000    0.000 pkgutil.py:1(<module>)
        3    0.000    0.000    0.000    0.000 arrayprint.py:907(__init__)
      187    0.000    0.000    0.000    0.000 typing.py:908(_is_unpacked_typevartuple)
        1    0.000    0.000    0.000    0.000 _mgc.py:1(<module>)
  420/397    0.000    0.000    0.000    0.000 basic.py:315(__hash__)
       10    0.000    0.000    0.000    0.000 _contextlib.py:123(__call__)
        1    0.000    0.000    0.000    0.000 passthrough.py:1(<module>)
        1    0.000    0.000    0.000    0.000 add.py:1(<module>)
       41    0.000    0.000    0.000    0.000 decorators.py:110(priority_decorator)
       77    0.000    0.000    0.000    0.000 <frozen posixpath>:150(dirname)
        1    0.000    0.000    0.000    0.000 _lobpcg.py:257(LOBPCGAutogradFunction)
        5    0.000    0.000    0.000    0.000 perm_groups.py:146(<listcomp>)
        3    0.000    0.000    0.000    0.000 streams.py:1(<module>)
        8    0.000    0.000    0.000    0.000 _multiufuncs.py:25(__init__)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2391(skewness)
       26    0.000    0.000    0.000    0.000 _sources.py:87(__init__)
      605    0.000    0.000    0.000    0.000 _inspect.py:13(ismethod)
        1    0.000    0.000    0.000    0.000 ctypeslib.py:1(<module>)
     12/2    0.000    0.000    0.000    0.000 core.py:1578(makeOptionalList)
        1    0.000    0.000    0.000    0.000 proxy.py:83(TracerBase)
       17    0.000    0.000    0.000    0.000 {built-in method _functools.reduce}
      367    0.000    0.000    0.000    0.000 permutations.py:1385(<listcomp>)
     2163    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:931(create_module)
       24    0.000    0.000    0.000    0.000 doccer.py:311(unindent_string)
        1    0.000    0.000    0.000    0.000 _conversions.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sysconfig.py:1(<module>)
        1    0.000    0.000    0.000    0.000 zipfile.py:1(<module>)
        7    0.000    0.000    0.000    0.000 pathlib.py:909(home)
       14    0.000    0.000    0.000    0.000 __init__.py:198(split)
      790    0.000    0.000    0.000    0.000 containers.py:63(<genexpr>)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3247(_moment_central_transform)
        1    0.000    0.000    0.000    0.000 sympy_parser.py:1(<module>)
      190    0.000    0.000    0.000    0.000 pyplot.py:82(_copy_docstring_and_deprecators)
     1027    0.000    0.000    0.000    0.000 _tensor_str.py:173(width)
        1    0.000    0.000    0.000    0.000 numpy.py:1(<module>)
        2    0.000    0.000    0.000    0.000 decorator.py:215(decorator)
        2    0.000    0.000    0.000    0.000 conv_fused.py:1(<module>)
       71    0.000    0.000    0.000    0.000 inspect.py:2745(replace)
        1    0.000    0.000    0.000    0.000 array_comprehension.py:1(<module>)
        1    0.000    0.000    0.000    0.000 conventions.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dviread.py:185(Dvi)
      156    0.000    0.000    0.000    0.000 inspect.py:330(isdatadescriptor)
        1    0.000    0.000    0.000    0.000 callable.py:171(CollatorIterDataPipe)
       48    0.000    0.000    0.000    0.000 pretty_symbology.py:100(<lambda>)
       10    0.000    0.000    0.000    0.000 typing_extensions.py:633(__new__)
      686    0.000    0.000    0.000    0.000 inspect.py:2457(<lambda>)
       30    0.000    0.000    0.000    0.000 symbolic_opset9.py:292(_apply)
        1    0.000    0.000    0.000    0.000 padding.py:1(<module>)
        3    0.000    0.000    0.000    0.000 arrayprint.py:934(fillFormat)
       48    0.000    0.000    0.000    0.000 periodic_table.py:1057(__hash__)
       73    0.000    0.000    0.000    0.000 _internal.py:872(_ufunc_doc_signature_formatter)
        1    0.000    0.000    0.000    0.000 adjoint.py:1(<module>)
        2    0.000    0.000    0.000    0.000 units.py:1(<module>)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _musllinux.py:1(<module>)
        1    0.000    0.000    0.000    0.000 compatibility.py:1(<module>)
        8    0.000    0.000    0.000    0.000 typing.py:2248(get_type_hints)
        1    0.000    0.000    0.000    0.000 unicode.py:1(<module>)
        2    0.000    0.000    0.000    0.000 quant_type.py:1(<module>)
        1    0.000    0.000    0.000    0.000 functional_call.py:1(<module>)
       87    0.000    0.000    0.000    0.000 docstring.py:38(__call__)
        1    0.000    0.000    0.000    0.000 nvfuser_prims.py:771(register_view)
        2    0.000    0.000    0.000    0.000 normalization.py:1(<module>)
      268    0.000    0.000    0.000    0.000 libmpf.py:322(<genexpr>)
        1    0.000    0.000    0.000    0.000 matrixbase.py:99(MatrixBase)
       30    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1276(__init__)
        1    0.000    0.000    0.000    0.000 _exporter_states.py:1(<module>)
      171    0.000    0.000    0.000    0.000 typing.py:1546(__subclasscheck__)
        2    0.000    0.000    0.000    0.000 sysconfig.py:253(_extend_dict)
        1    0.000    0.000    0.000    0.000 glob.py:105(_glob1)
        1    0.000    0.000    0.000    0.000 nvfuser_prims.py:385(register_full)
        1    0.000    0.000    0.000    0.000 _decorator.py:1(<module>)
    429/1    0.000    0.000    0.000    0.000 __config__.py:14(_cleanup)
        2    0.000    0.000    0.000    0.000 traceback.py:29(format_list)
        1    0.000    0.000    0.000    0.000 pickletools.py:2224(assure_pickle_consistency)
      325    0.000    0.000    0.000    0.000 function_base.py:465(_needs_add_docstring)
        1    0.000    0.000    0.000    0.000 __init__.py:917(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _comparison.py:310(Pair)
     49/1    0.000    0.000    0.000    0.000 __config__.py:20(<dictcomp>)
       79    0.000    0.000    0.000    0.000 core.py:4216(<genexpr>)
       12    0.000    0.000    0.000    0.000 message.py:591(get_content_type)
        3    0.000    0.000    0.000    0.000 functions.py:1(<module>)
       52    0.000    0.000    0.000    0.000 inspect.py:896(getfile)
      606    0.000    0.000    0.000    0.000 <frozen posixpath>:41(_get_sep)
       24    0.000    0.000    0.000    0.000 _add_newdocs_scalars.py:71(add_newdoc_for_scalar_type)
     2914    0.000    0.000    0.000    0.000 basic.py:208(__sympy__)
        1    0.000    0.000    0.000    0.000 pretty_symbology.py:108(<dictcomp>)
        2    0.000    0.000    0.000    0.000 traceback.py:1(<module>)
       95    0.000    0.000    0.000    0.000 permutations.py:2051(is_identity)
      259    0.000    0.000    0.000    0.000 dataclasses.py:389(<listcomp>)
        1    0.000    0.000    0.000    0.000 kronecker.py:1(<module>)
      172    0.000    0.000    0.000    0.000 decorator.py:184(public)
     1239    0.000    0.000    0.000    0.000 {built-in method sys._getframe}
        1    0.000    0.000    0.000    0.000 transformer.py:1(<module>)
       27    0.000    0.000    0.000    0.000 singleton.py:190(__init__)
      135    0.000    0.000    0.000    0.000 core.py:2016(__eq__)
       32    0.000    0.000    0.000    0.000 rcsetup.py:925(<genexpr>)
        3    0.000    0.000    0.000    0.000 pyplot.py:794(close)
        4    0.000    0.000    0.000    0.000 sparse.py:1(<module>)
      251    0.000    0.000    0.000    0.000 _docscrape.py:393(<setcomp>)
      232    0.000    0.000    0.000    0.000 function.py:147(<listcomp>)
      737    0.000    0.000    0.000    0.000 dataclasses.py:439(_field_assign)
      295    0.000    0.000    0.000    0.000 _parser.py:954(fix_flags)
        1    0.000    0.000    0.000    0.000 case.py:1(<module>)
        1    0.000    0.000    0.000    0.000 TiffTags.py:439(_populate)
        1    0.000    0.000    0.000    0.000 graph_module.py:283(GraphModule)
        1    0.000    0.000    0.000    0.000 rcsetup.py:1504(<dictcomp>)
       10    0.000    0.000    0.000    0.000 {function SeedSequence.generate_state at 0x146baba82a20}
        1    0.000    0.000    0.000    0.000 triinterpolate.py:1(<module>)
        1    0.000    0.000    0.000    0.000 streamreader.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _monkeytype_config.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _meta.py:7(PackageMetadata)
      248    0.000    0.000    0.000    0.000 _docscrape.py:465(_str_summary)
        1    0.000    0.000    0.000    0.000 sysconfig.py:443(get_makefile_filename)
        1    0.000    0.000    0.000    0.000 axis.py:34(Tick)
        1    0.000    0.000    0.000    0.000 quaternion.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _binned_statistic.py:1(<module>)
      970    0.000    0.000    0.000    0.000 _array_api.py:665(_render)
       26    0.000    0.000    0.000    0.000 _mangling.py:44(is_mangled)
        3    0.000    0.000    0.000    0.000 _pylab_helpers.py:79(destroy_all)
        1    0.000    0.000    0.000    0.000 artist.py:60(Artist)
        2    0.000    0.000    0.000    0.000 operations.py:623(register_handlerclass)
       26    0.000    0.000    0.000    0.000 {slot wrapper '__init__' of 'object' objects}
      130    0.000    0.000    0.000    0.000 dataclasses.py:550(<dictcomp>)
        1    0.000    0.000    0.000    0.000 isoparser.py:1(<module>)
        1    0.000    0.000    0.000    0.000 runners.py:1(<module>)
       23    0.000    0.000    0.000    0.000 overrides.py:177(decorator)
      449    0.000    0.000    0.000    0.000 __init__.py:57(register_decomposition)
        1    0.000    0.000    0.000    0.000 nccl.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pydoc.py:465(Doc)
     1623    0.000    0.000    0.000    0.000 permutations.py:456(<genexpr>)
      519    0.000    0.000    0.000    0.000 inspect.py:300(ismethod)
        1    0.000    0.000    0.000    0.000 fileopener.py:1(<module>)
        1    0.000    0.000    0.000    0.000 str.py:1(<module>)
      243    0.000    0.000    0.000    0.000 iterables.py:3083(is_sequence)
       12    0.000    0.000    0.000    0.000 core.py:6035(__init__)
       26    0.000    0.000    0.000    0.000 core.py:921(__init__)
       30    0.000    0.000    0.000    0.000 _inspect.py:140(formatargspec)
        4    0.000    0.000    0.000    0.000 constants.py:1(<module>)
        1    0.000    0.000    0.000    0.000 parametrize.py:1(<module>)
        2    0.000    0.000    0.000    0.000 _new_distributions.py:391(__init__)
       24    0.000    0.000    0.000    0.000 dviread.py:167(decorate)
       37    0.000    0.000    0.000    0.000 decorators.py:214(make_wrapped)
       16    0.000    0.000    0.000    0.000 structure.py:3569(nelectrons)
        1    0.000    0.000    0.000    0.000 rrule.py:1(<module>)
       42    0.000    0.000    0.000    0.000 core.py:277(wrapper)
        1    0.000    0.000    0.000    0.000 container.py:42(Sequential)
        1    0.000    0.000    0.000    0.000 path.py:23(Path)
        1    0.000    0.000    0.000    0.000 _comparison.py:30(ErrorMeta)
        2    0.000    0.000    0.000    0.000 traceback.py:513(format)
        1    0.000    0.000    0.000    0.000 flatten.py:1(<module>)
       16    0.000    0.000    0.000    0.000 __init__.py:482(cycler)
        1    0.000    0.000    0.000    0.000 options.py:43(TensorPipeRpcBackendOptions)
      453    0.000    0.000    0.000    0.000 wrappers.py:210(<genexpr>)
      231    0.000    0.000    0.000    0.000 inspect.py:1950(_signature_get_user_defined_method)
        2    0.000    0.000    0.000    0.000 getlimits.py:540(_init)
       23    0.000    0.000    0.000    0.000 core.py:5355(__init__)
      267    0.000    0.000    0.000    0.000 function.py:152(<lambda>)
      456    0.000    0.000    0.000    0.000 feedparser.py:78(readline)
        1    0.000    0.000    0.000    0.000 net_min_base.py:89(_MinimizerBase)
        1    0.000    0.000    0.000    0.000 _interface.py:1(<module>)
       48    0.000    0.000    0.000    0.000 periodic_table.py:1485(__str__)
        1    0.000    0.000    0.000    0.000 _crosstab.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _multivariate.py:2694(__init__)
        1    0.000    0.000    0.000    0.000 nvfuser_prims.py:605(register_rand_like)
       24    0.000    0.000    0.000    0.000 dtypes.py:66(_add_dtype_helper)
        2    0.000    0.000    0.000    0.000 _shape.py:1(<module>)
        1    0.000    0.000    0.000    0.000 scale.py:670(_get_scale_docs)
       27    0.000    0.000    0.000    0.000 pathlib.py:353(_select_from)
        3    0.000    0.000    0.000    0.000 _version.py:114(_compare)
        1    0.000    0.000    0.000    0.000 expr.py:46(Expr)
        1    0.000    0.000    0.000    0.000 tasks.py:1(<module>)
        1    0.000    0.000    0.000    0.000 polyoptions.py:300(Wrt)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2394(kurtosis)
        1    0.000    0.000    0.000    0.000 instancenorm.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ExifTags.py:305(GPS)
        2    0.000    0.000    0.000    0.000 kind.py:287(_)
        1    0.000    0.000    0.000    0.000 _type_utils.py:58(JitScalarType)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3336(_moment_transform_center)
        7    0.000    0.000    0.000    0.000 ops.py:136(<listcomp>)
        1    0.000    0.000    0.000    0.000 tensor_can.py:1(<module>)
     1019    0.000    0.000    0.000    0.000 permutations.py:1065(array_form)
        2    0.000    0.000    0.000    0.000 _multivariate.py:2009(__init__)
       10    0.000    0.000    0.000    0.000 _contextlib.py:69(context_decorator)
        1    0.000    0.000    0.000    0.000 plane.py:1(<module>)
     1048    0.000    0.000    0.000    0.000 _ops.py:313(py_impl)
     1023    0.000    0.000    0.000    0.000 _docscrape.py:46(reset)
       95    0.000    0.000    0.000    0.000 permutations.py:2055(is_Identity)
       55    0.000    0.000    0.000    0.000 __init__.py:1447(__init__)
        2    0.000    0.000    0.000    0.000 _version.py:151(__ge__)
      420    0.000    0.000    0.000    0.000 _ops.py:506(<listcomp>)
      552    0.000    0.000    0.000    0.000 <frozen os>:759(decode)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:29(_initialize)
        1    0.000    0.000    0.000    0.000 funcmatrix.py:1(<module>)
     1282    0.000    0.000    0.000    0.000 dataclasses.py:661(_is_kw_only)
       43    0.000    0.000    0.000    0.000 pathlib.py:546(__fspath__)
    347/1    0.000    0.000    0.000    0.000 __config__.py:19(_cleanup)
        1    0.000    0.000    0.000    0.000 animation.py:408(FileMovieWriter)
      108    0.000    0.000    0.000    0.000 typing.py:2532(overload)
        1    0.000    0.000    0.000    0.000 _hook_iterator.py:1(<module>)
        1    0.000    0.000    0.000    0.000 isoparser.py:42(isoparser)
       19    0.000    0.000    0.000    0.000 _continuous_distns.py:59(_call_super_mom)
        1    0.000    0.000    0.000    0.000 gmpy.py:135(_get_gmpy2)
        2    0.000    0.000    0.000    0.000 _new_distributions.py:296(__init__)
        1    0.000    0.000    0.000    0.000 selecting.py:1(<module>)
     39/1    0.000    0.000    0.000    0.000 __config__.py:25(<dictcomp>)
        3    0.000    0.000    0.000    0.000 {built-in method gc.collect}
       82    0.000    0.000    0.000    0.000 return_types.py:9(pytree_register_structseq)
        5    0.000    0.000    0.000    0.000 symbol.py:339(_canonical_assumptions)
      472    0.000    0.000    0.000    0.000 facts.py:579(__init__)
        3    0.000    0.000    0.000    0.000 _itertools.py:1(<module>)
      222    0.000    0.000    0.000    0.000 wrappers.py:187(out_wrapper)
      605    0.000    0.000    0.000    0.000 _inspect.py:26(isfunction)
        1    0.000    0.000    0.000    0.000 graycode.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _interpolate.py:282(__init__)
       13    0.000    0.000    0.000    0.000 enum.py:1473(__or__)
        1    0.000    0.000    0.000    0.000 __init__.py:746(copy)
        1    0.000    0.000    0.000    0.000 param_fetch.py:1(<module>)
     1260    0.000    0.000    0.000    0.000 colors.py:276(<genexpr>)
        1    0.000    0.000    0.000    0.000 ndim_array.py:1(<module>)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:922(ShapeEnv)
      309    0.000    0.000    0.000    0.000 types.py:164(__init__)
       56    0.000    0.000    0.000    0.000 pathlib.py:536(__str__)
        1    0.000    0.000    0.000    0.000 process.py:1(<module>)
       20    0.000    0.000    0.000    0.000 numbers.py:3148(__eq__)
        1    0.000    0.000    0.000    0.000 __init__.py:747(<dictcomp>)
        3    0.000    0.000    0.000    0.000 _adapters.py:35(__init__)
        1    0.000    0.000    0.000    0.000 _decomp_cossin.py:1(<module>)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2385(variance)
        1    0.000    0.000    0.000    0.000 _encoded_words.py:1(<module>)
        2    0.000    0.000    0.000    0.000 fused.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _decorator.py:63(non_deterministic)
        1    0.000    0.000    0.000    0.000 widgets.py:1087(SubplotTool)
      273    0.000    0.000    0.000    0.000 typing_extensions.py:3054(_check_generic)
        1    0.000    0.000    0.000    0.000 importtools.py:48(import_module)
       27    0.000    0.000    0.000    0.000 artist.py:20(allow_rasterization)
       27    0.000    0.000    0.000    0.000 pretty_symbology.py:121(<genexpr>)
       72    0.000    0.000    0.000    0.000 pydoc.py:94(_findclass)
      544    0.000    0.000    0.000    0.000 registration.py:267(onnx_symbolic)
      248    0.000    0.000    0.000    0.000 _docscrape.py:470(_str_extended_summary)
       27    0.000    0.000    0.000    0.000 <frozen genericpath>:27(isfile)
        2    0.000    0.000    0.000    0.000 fuser_method_mappings.py:1(<module>)
        1    0.000    0.000    0.000    0.000 container.py:684(ParameterDict)
        3    0.000    0.000    0.000    0.000 _adapters.py:42(_repair_headers)
        1    0.000    0.000    0.000    0.000 transpose.py:1(<module>)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:1(<module>)
        5    0.000    0.000    0.000    0.000 decorator.py:75(__init__)
        1    0.000    0.000    0.000    0.000 representer.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _covariance.py:1(<module>)
        1    0.000    0.000    0.000    0.000 graph.py:19(Node)
     1326    0.000    0.000    0.000    0.000 _builtins.py:124(_is_special_functional_bound_op)
        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1536(find_distributions)
        1    0.000    0.000    0.000    0.000 polytools.py:106(Poly)
        1    0.000    0.000    0.000    0.000 package_exporter.py:186(PackageExporter)
      363    0.000    0.000    0.000    0.000 socket.py:78(<lambda>)
      248    0.000    0.000    0.000    0.000 _docscrape.py:460(_str_signature)
      213    0.000    0.000    0.000    0.000 ctx_fp.py:51(_wrap_specfun)
        1    0.000    0.000    0.000    0.000 arraysetops.py:1(<module>)
       54    0.000    0.000    0.000    0.000 typing.py:1620(<genexpr>)
     1191    0.000    0.000    0.000    0.000 {built-in method _bisect.bisect_right}
        1    0.000    0.000    0.000    0.000 pathlib.py:281(_make_selector)
       32    0.000    0.000    0.000    0.000 basic.py:2117(_exec_constructor_postprocessors)
        1    0.000    0.000    0.000    0.000 filelister.py:1(<module>)
      295    0.000    0.000    0.000    0.000 _parser.py:73(__init__)
        1    0.000    0.000    0.000    0.000 calendar.py:1(<module>)
        9    0.000    0.000    0.000    0.000 message.py:615(get_content_maintype)
        1    0.000    0.000    0.000    0.000 timeouts.py:26(Timeout)
        1    0.000    0.000    0.000    0.000 order.py:1(<module>)
     2730    0.000    0.000    0.000    0.000 inspect.py:589(<lambda>)
       16    0.000    0.000    0.000    0.000 __init__.py:546(_cycler)
        1    0.000    0.000    0.000    0.000 join.py:112(Join)
        1    0.000    0.000    0.000    0.000 ctypeslib.py:360(_get_scalar_type_map)
        1    0.000    0.000    0.000    0.000 companion.py:1(<module>)
        1    0.000    0.000    0.000    0.000 quiver.py:1(<module>)
        1    0.000    0.000    0.000    0.000 radau.py:1(<module>)
       26    0.000    0.000    0.000    0.000 pretty_symbology.py:118(<lambda>)
      586    0.000    0.000    0.000    0.000 _inspect.py:41(iscode)
        1    0.000    0.000    0.000    0.000 _guards.py:83(Guard)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:1(<module>)
        1    0.000    0.000    0.000    0.000 utils.py:76(wrap)
        1    0.000    0.000    0.000    0.000 mathml.py:1(<module>)
        7    0.000    0.000    0.000    0.000 pathlib.py:1377(expanduser)
        1    0.000    0.000    0.000    0.000 ctypeslib.py:371(<dictcomp>)
       23    0.000    0.000    0.000    0.000 distributed_c10d.py:1432(exception_handler)
      426    0.000    0.000    0.000    0.000 {method 'finditer' of 're.Pattern' objects}
     2343    0.000    0.000    0.000    0.000 {built-in method builtins.chr}
        5    0.000    0.000    0.000    0.000 core.py:1485(__radd__)
       93    0.000    0.000    0.000    0.000 typing.py:277(_unpack_args)
        1    0.000    0.000    0.000    0.000 _cubic.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sparse_ndim_array.py:1(<module>)
       32    0.000    0.000    0.000    0.000 arraypad.py:458(_as_pairs)
      628    0.000    0.000    0.000    0.000 _pytree.py:121(<listcomp>)
       13    0.000    0.000    0.000    0.000 core.py:8389(__init__)
      266    0.000    0.000    0.000    0.000 <frozen os>:696(__iter__)
        1    0.000    0.000    0.000    0.000 upsampling.py:1(<module>)
      366    0.000    0.000    0.000    0.000 socket.py:93(<lambda>)
       89    0.000    0.000    0.000    0.000 _parser.py:894(_parse_flags)
        1    0.000    0.000    0.000    0.000 _vmap_internals.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pathlib.py:349(__init__)
      364    0.000    0.000    0.000    0.000 socket.py:83(<lambda>)
      365    0.000    0.000    0.000    0.000 socket.py:88(<lambda>)
        1    0.000    0.000    0.000    0.000 __init__.py:342(<listcomp>)
       15    0.000    0.000    0.000    0.000 symbolic_opset10.py:67(_apply)
       55    0.000    0.000    0.000    0.000 symbol.py:294(_sanitize)
        1    0.000    0.000    0.000    0.000 prufer.py:1(<module>)
       68    0.000    0.000    0.000    0.000 _util.py:1165(_apply_over_batch)
        6    0.000    0.000    0.000    0.000 deprecation.py:272(__set_name__)
       36    0.000    0.000    0.000    0.000 inspect.py:402(isgeneratorfunction)
       18    0.000    0.000    0.000    0.000 __init__.py:811(mtime)
        1    0.000    0.000    0.000    0.000 _hessian_update_strategy.py:1(<module>)
      226    0.000    0.000    0.000    0.000 rcsetup.py:150(validate_bool)
      265    0.000    0.000    0.000    0.000 {method 'find' of 'str' objects}
        1    0.000    0.000    0.000    0.000 importer.py:1(<module>)
        2    0.000    0.000    0.000    0.000 helper.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _creation.py:1(<module>)
      750    0.000    0.000    0.000    0.000 rcsetup.py:234(validator)
        1    0.000    0.000    0.000    0.000 _color_data.py:995(<dictcomp>)
        1    0.000    0.000    0.000    0.000 repmatrix.py:566(__new__)
      544    0.000    0.000    0.000    0.000 registration.py:76(set_base)
       42    0.000    0.000    0.000    0.000 traceback.py:458(format_frame_summary)
        1    0.000    0.000    0.000    0.000 axis3d.py:1(<module>)
        1    0.000    0.000    0.000    0.000 matexpr.py:37(MatrixExpr)
      304    0.000    0.000    0.000    0.000 _docscrape.py:374(<listcomp>)
     1534    0.000    0.000    0.000    0.000 {method 'isupper' of 'str' objects}
      126    0.000    0.000    0.000    0.000 colors.py:704(__init__)
        1    0.000    0.000    0.000    0.000 _mio5_params.py:1(<module>)
        1    0.000    0.000    0.000    0.000 conditionset.py:1(<module>)
        1    0.000    0.000    0.000    0.000 selector_events.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pathlib.py:260(compile_pattern)
        1    0.000    0.000    0.000    0.000 mathtext.py:1925(<dictcomp>)
      367    0.000    0.000    0.000    0.000 permutations.py:381(<listcomp>)
       21    0.000    0.000    0.000    0.000 deprecation.py:178(finalize)
       17    0.000    0.000    0.000    0.000 __init__.py:416(by_key)
       40    0.000    0.000    0.000    0.000 rcsetup.py:51(__init__)
       19    0.000    0.000    0.000    0.000 deprecation.py:372(<listcomp>)
        3    0.000    0.000    0.000    0.000 __init__.py:893(find_distributions)
        8    0.000    0.000    0.000    0.000 symbol.py:393(__xnew_cached_)
      117    0.000    0.000    0.000    0.000 __init__.py:321(filter)
        1    0.000    0.000    0.000    0.000 flatten.py:54(Unflatten)
        1    0.000    0.000    0.000    0.000 adam.py:1(<module>)
        1    0.000    0.000    0.000    0.000 shlex.py:1(<module>)
        1    0.000    0.000    0.000    0.000 exprtools.py:1(<module>)
        3    0.000    0.000    0.000    0.000 ctx_mp_python.py:585(__init__)
        1    0.000    0.000    0.000    0.000 container.py:408(ModuleDict)
      113    0.000    0.000    0.000    0.000 typing.py:1926(_caller)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1385(AnnotationBbox)
      185    0.000    0.000    0.000    0.000 {built-in method _imp.is_builtin}
        1    0.000    0.000    0.000    0.000 groups.py:316(<dictcomp>)
        3    0.000    0.000    0.000    0.000 embedding_ops.py:1(<module>)
      237    0.000    0.000    0.000    0.000 pydoc.py:155(_getowndoc)
       39    0.000    0.000    0.000    0.000 inspect.py:391(_has_code_flag)
        1    0.000    0.000    0.000    0.000 repmatrix.py:569(_new)
       28    0.000    0.000    0.000    0.000 module.py:2167(children)
      129    0.000    0.000    0.000    0.000 dataclasses.py:593(<listcomp>)
        1    0.000    0.000    0.000    0.000 __init__.py:2306(_make_var_reduction_prim)
       14    0.000    0.000    0.000    0.000 pathlib.py:530(_make_child)
      865    0.000    0.000    0.000    0.000 dataclasses.py:375(<genexpr>)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:75(TensorKey)
       58    0.000    0.000    0.000    0.000 _utils.py:779(classproperty)
       40    0.000    0.000    0.000    0.000 getlimits.py:91(_float_to_float)
        1    0.000    0.000    0.000    0.000 ctx_iv.py:324(_init_builtins)
       23    0.000    0.000    0.000    0.000 symbolic_shapes.py:699(_make_node_magic)
        1    0.000    0.000    0.000    0.000 meijerint.py:1(<module>)
        1    0.000    0.000    0.000    0.000 testing.py:1(<module>)
        9    0.000    0.000    0.000    0.000 deprecation.py:435(<listcomp>)
      109    0.000    0.000    0.000    0.000 inspect.py:310(ismethoddescriptor)
        7    0.000    0.000    0.000    0.000 ops.py:140(<listcomp>)
        1    0.000    0.000    0.000    0.000 _polybase.py:1(<module>)
      635    0.000    0.000    0.000    0.000 typing.py:729(<genexpr>)
       13    0.000    0.000    0.000    0.000 core.py:8394(getdoc)
        1    0.000    0.000    0.000    0.000 core.py:6550(__new__)
       20    0.000    0.000    0.000    0.000 colors.py:929(reversed)
        1    0.000    0.000    0.000    0.000 _quadrature.py:1(<module>)
        1    0.000    0.000    0.000    0.000 analyzer.py:1018(PointGroupAnalyzer)
        3    0.000    0.000    0.000    0.000 __init__.py:801(zip_children)
       28    0.000    0.000    0.000    0.000 <frozen _collections_abc>:778(__contains__)
       16    0.000    0.000    0.000    0.000 __init__.py:226(_from_iter)
        1    0.000    0.000    0.000    0.000 smtlib.py:25(SMTLibPrinter)
       52    0.000    0.000    0.000    0.000 singleton.py:131(__getattr__)
        7    0.000    0.000    0.000    0.000 __init__.py:72(CFUNCTYPE)
        9    0.000    0.000    0.000    0.000 fromnumeric.py:2177(sum)
        1    0.000    0.000    0.000    0.000 legend_handler.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _nested_sequence.py:1(<module>)
        9    0.000    0.000    0.000    0.000 functools.py:800(singledispatch)
       30    0.000    0.000    0.000    0.000 utils.py:104(__init__)
        1    0.000    0.000    0.000    0.000 nvfuser_prims.py:526(register_native_batch_norm)
        1    0.000    0.000    0.000    0.000 configparser.py:376(BasicInterpolation)
       20    0.000    0.000    0.000    0.000 numbers.py:3314(__eq__)
      163    0.000    0.000    0.000    0.000 function.py:149(<listcomp>)
       46    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:276(__init__)
       17    0.000    0.000    0.000    0.000 stride_tricks.py:480(broadcast_arrays)
        1    0.000    0.000    0.000    0.000 backend_managers.py:1(<module>)
      130    0.000    0.000    0.000    0.000 dataclasses.py:1018(<listcomp>)
        1    0.000    0.000    0.000    0.000 pretty_symbology.py:120(<dictcomp>)
       40    0.000    0.000    0.000    0.000 colors.py:889(__init__)
        3    0.000    0.000    0.000    0.000 __init__.py:906(_search_paths)
        1    0.000    0.000    0.000    0.000 common.py:432(<listcomp>)
      494    0.000    0.000    0.000    0.000 _compiler.py:31(_combine_flags)
        1    0.000    0.000    0.000    0.000 results.py:1(<module>)
        1    0.000    0.000    0.000    0.000 immutable_collections.py:1(<module>)
      255    0.000    0.000    0.000    0.000 traversal.py:12(iterargs)
     1080    0.000    0.000    0.000    0.000 inspect.py:729(getmro)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2894(icdf)
       93    0.000    0.000    0.000    0.000 inspect.py:2080(_signature_is_functionlike)
       68    0.000    0.000    0.000    0.000 pickletools.py:1124(__init__)
        3    0.000    0.000    0.000    0.000 autocast_mode.py:1(<module>)
       16    0.000    0.000    0.000    0.000 tokenize.py:408(tokenize)
      108    0.000    0.000    0.000    0.000 iterables.py:3025(iterable)
        1    0.000    0.000    0.000    0.000 trace.py:1(<module>)
        1    0.000    0.000    0.000    0.000 profiler.py:306(profile)
       19    0.000    0.000    0.000    0.000 pythonmpq.py:57(__new__)
    52/46    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1320(__len__)
        1    0.000    0.000    0.000    0.000 configparser.py:522(LegacyInterpolation)
        1    0.000    0.000    0.000    0.000 series_class.py:1(<module>)
        1    0.000    0.000    0.000    0.000 container.py:250(ModuleList)
      306    0.000    0.000    0.000    0.000 rcsetup.py:1043(_convert_validator_spec)
      582    0.000    0.000    0.000    0.000 __init__.py:422(<genexpr>)
        3    0.000    0.000    0.000    0.000 arrayprint.py:780(_formatArray)
      386    0.000    0.000    0.000    0.000 inspect.py:283(ismodule)
       17    0.000    0.000    0.000    0.000 ctx_iv.py:407(_mpq)
      162    0.000    0.000    0.000    0.000 core.py:2446(__new__)
        8    0.000    0.000    0.000    0.000 deprecation.py:231(wrapper)
        1    0.000    0.000    0.000    0.000 _tanhsinh.py:1254(_direct)
        1    0.000    0.000    0.000    0.000 _axis_nan_policy.py:1(<module>)
        1    0.000    0.000    0.000    0.000 bezier.py:1(<module>)
      871    0.000    0.000    0.000    0.000 conflict.py:67(<listcomp>)
        1    0.000    0.000    0.000    0.000 curve.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fnmatch.py:48(filter)
        1    0.000    0.000    0.000    0.000 powerset.py:1(<module>)
        1    0.000    0.000    0.000    0.000 expressiondomain.py:1(<module>)
        1    0.000    0.000    0.000    0.000 parabola.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _parser.py:58(_timelex)
        1    0.000    0.000    0.000    0.000 _collections.py:1(<module>)
       26    0.000    0.000    0.000    0.000 pretty_symbology.py:117(<lambda>)
        1    0.000    0.000    0.000    0.000 _trace.py:566(ignore_lib_warnings)
        1    0.000    0.000    0.000    0.000 base_subprocess.py:1(<module>)
        1    0.000    0.000    0.000    0.000 patches.py:2812(ArrowStyle)
        1    0.000    0.000    0.000    0.000 axes3d.py:44(Axes3D)
       12    0.000    0.000    0.000    0.000 datetime.py:592(__new__)
        1    0.000    0.000    0.000    0.000 operations.py:415(inversion)
        1    0.000    0.000    0.000    0.000 _vertex.py:1(<module>)
        1    0.000    0.000    0.000    0.000 combinatorics.py:17(SamplerIterDataPipe)
       18    0.000    0.000    0.000    0.000 core.py:997(__init__)
        1    0.000    0.000    0.000    0.000 unicode.py:123(pyparsing_unicode)
        1    0.000    0.000    0.000    0.000 adaptive.py:1(<module>)
       63    0.000    0.000    0.000    0.000 _axis_nan_policy.py:340(_axis_nan_policy_factory)
        1    0.000    0.000    0.000    0.000 resolver.py:1(<module>)
        1    0.000    0.000    0.000    0.000 helpers.py:1084(<listcomp>)
       28    0.000    0.000    0.000    0.000 {built-in method torch._C._nn._parse_to}
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:634(MemoryProfile)
      871    0.000    0.000    0.000    0.000 {method 'popitem' of 'collections.OrderedDict' objects}
        1    0.000    0.000    0.000    0.000 backend_registry.py:56(register_backend)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:393(DataFlowNode)
        4    0.000    0.000    0.000    0.000 feedparser.py:101(push)
        1    0.000    0.000    0.000    0.000 gruntz.py:1(<module>)
        1    0.000    0.000    0.000    0.000 wishart.py:1(<module>)
        1    0.000    0.000    0.000    0.000 testing.py:17(pyparsing_test)
        1    0.000    0.000    0.000    0.000 _basic.py:33(<dictcomp>)
        1    0.000    0.000    0.000    0.000 contains.py:1(<module>)
     1269    0.000    0.000    0.000    0.000 {method 'clear' of 'dict' objects}
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1249(wrapped)
       42    0.000    0.000    0.000    0.000 results.py:573(copy)
       12    0.000    0.000    0.000    0.000 doccer.py:161(_doc)
        1    0.000    0.000    0.000    0.000 mathtext.py:1863(Glue)
        1    0.000    0.000    0.000    0.000 {built-in method torch._C._dist_autograd_init}
      151    0.000    0.000    0.000    0.000 libintmath.py:353(ifac)
        1    0.000    0.000    0.000    0.000 _recursive.py:354(ConcreteTypeStore)
        1    0.000    0.000    0.000    0.000 polar.py:776(PolarAxes)
      194    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1283(_find_parent_path_names)
     15/3    0.000    0.000    0.000    0.000 arrayprint.py:789(recurser)
        1    0.000    0.000    0.000    0.000 patches.py:617(Shadow)
     1282    0.000    0.000    0.000    0.000 {method 'span' of 're.Match' objects}
        1    0.000    0.000    0.000    0.000 _mathtext_data.py:1(<module>)
      786    0.000    0.000    0.000    0.000 utils.py:45(<genexpr>)
        3    0.000    0.000    0.000    0.000 __init__.py:866(__init__)
        2    0.000    0.000    0.000    0.000 bn_relu.py:1(<module>)
        3    0.000    0.000    0.000    0.000 zipfile.py:2370(__init__)
        1    0.000    0.000    0.000    0.000 suite.py:1(<module>)
      544    0.000    0.000    0.000    0.000 registration.py:71(__init__)
        1    0.000    0.000    0.000    0.000 rcsetup.py:96(<listcomp>)
        1    0.000    0.000    0.000    0.000 _qmc.py:802(QMCEngine)
      130    0.000    0.000    0.000    0.000 <frozen abc>:146(update_abstractmethods)
        3    0.000    0.000    0.000    0.000 _new_distributions.py:108(_moment_central_formula)
       18    0.000    0.000    0.000    0.000 _static.py:27(_prevent_modification)
        2    0.000    0.000    0.000    0.000 _delegators.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _type_aliases.py:94(_add_aliases)
        9    0.000    0.000    0.000    0.000 textwrap.py:470(indent)
     1185    0.000    0.000    0.000    0.000 enum.py:1125(__init__)
        1    0.000    0.000    0.000    0.000 _iotools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dotproduct.py:1(<module>)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2318(integrand)
       11    0.000    0.000    0.000    0.000 fractions.py:62(__new__)
        1    0.000    0.000    0.000    0.000 lattice.py:38(Lattice)
        1    0.000    0.000    0.000    0.000 fnmatch.py:38(_compile_pattern)
       21    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1118(_dispatch)
        1    0.000    0.000    0.000    0.000 grad_scaler.py:45(GradScaler)
        1    0.000    0.000    0.000    0.000 solveset.py:1(<module>)
        1    0.000    0.000    0.000    0.000 mul.py:91(Mul)
        3    0.000    0.000    0.000    0.000 feedparser.py:184(close)
        2    0.000    0.000    0.000    0.000 windows.py:1(<module>)
     1297    0.000    0.000    0.000    0.000 permutations.py:1613(__iter__)
       40    0.000    0.000    0.000    0.000 rcsetup.py:63(<dictcomp>)
        1    0.000    0.000    0.000    0.000 hooks.py:1(<module>)
      566    0.000    0.000    0.000    0.000 _compiler.py:426(_get_iscased)
        1    0.000    0.000    0.000    0.000 ExifTags.py:361(LightSource)
      130    0.000    0.000    0.000    0.000 dataclasses.py:1044(<listcomp>)
        5    0.000    0.000    0.000    0.000 core.py:6040(__add__)
       64    0.000    0.000    0.000    0.000 wrappers.py:294(BackwardsNotSupported)
        1    0.000    0.000    0.000    0.000 jit_utils.py:22(GraphContext)
       32    0.000    0.000    0.000    0.000 basic.py:2128(<setcomp>)
        1    0.000    0.000    0.000    0.000 backend_agg.py:71(RendererAgg)
        1    0.000    0.000    0.000    0.000 domainmatrix.py:86(DomainMatrix)
        1    0.000    0.000    0.000    0.000 _bsr.py:1(<module>)
        7    0.000    0.000    0.000    0.000 numeric.py:1393(moveaxis)
        5    0.000    0.000    0.000    0.000 core.py:589(_setResultsName)
      416    0.000    0.000    0.000    0.000 typing.py:1667(__eq__)
       10    0.000    0.000    0.000    0.000 version.py:52(__init__)
        1    0.000    0.000    0.000    0.000 _multivariate.py:394(__init__)
        1    0.000    0.000    0.000    0.000 _exceptions.py:1(<module>)
       15    0.000    0.000    0.000    0.000 _bunch.py:5(_validate_names)
        1    0.000    0.000    0.000    0.000 storage.py:18(_StorageBase)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:149(Backend)
        1    0.000    0.000    0.000    0.000 kl.py:818(_add_kl_info)
      138    0.000    0.000    0.000    0.000 {built-in method builtins.round}
      432    0.000    0.000    0.000    0.000 colors.py:224(<genexpr>)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:593(CategoryElement)
        1    0.000    0.000    0.000    0.000 matcher_utils.py:15(_init_logger)
        2    0.000    0.000    0.000    0.000 mixins.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _adapters.py:8(Message)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2382(mean)
        1    0.000    0.000    0.000    0.000 _tanhsinh.py:899(_nsum_iv)
        2    0.000    0.000    0.000    0.000 dropout.py:1(<module>)
      166    0.000    0.000    0.000    0.000 pathlib.py:239(splitroot)
        1    0.000    0.000    0.000    0.000 parameter.py:1(<module>)
        6    0.000    0.000    0.000    0.000 _codata.py:2045(replace_exact)
        1    0.000    0.000    0.000    0.000 polyoptions.py:187(_init_dependencies_order)
     1790    0.000    0.000    0.000    0.000 __init__.py:785(<lambda>)
        1    0.000    0.000    0.000    0.000 periodic_table.py:1660(ElementType)
      865    0.000    0.000    0.000    0.000 dataclasses.py:1102(<genexpr>)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3206(_moment_central)
        1    0.000    0.000    0.000    0.000 mathematica.py:1(<module>)
       13    0.000    0.000    0.000    0.000 {built-in method torch._C._dispatch_library}
        1    0.000    0.000    0.000    0.000 configparser.py:448(ExtendedInterpolation)
       34    0.000    0.000    0.000    0.000 {method 'split' of 're.Pattern' objects}
       71    0.000    0.000    0.000    0.000 enum.py:345(__init__)
        2    0.000    0.000    0.000    0.000 typing.py:1556(__or__)
        1    0.000    0.000    0.000    0.000 profiler.py:47(_KinetoProfile)
      158    0.000    0.000    0.000    0.000 typing.py:1800(<genexpr>)
        3    0.000    0.000    0.000    0.000 zipfile.py:2251(make)
        1    0.000    0.000    0.000    0.000 spines.py:1(<module>)
       62    0.000    0.000    0.000    0.000 rational.py:31(__new__)
     1002    0.000    0.000    0.000    0.000 enum.py:230(__init__)
        1    0.000    0.000    0.000    0.000 find_file_dependencies.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dirichlet.py:1(<module>)
       26    0.000    0.000    0.000    0.000 _basic.py:33(<listcomp>)
       54    0.000    0.000    0.000    0.000 typing.py:1496(__mro_entries__)
        1    0.000    0.000    0.000    0.000 stride_tricks.py:1(<module>)
        1    0.000    0.000    0.000    0.000 numbers.py:329(tribonacci)
        1    0.000    0.000    0.000    0.000 _coo.py:1(<module>)
        1    0.000    0.000    0.000    0.000 serializer.py:1(<module>)
        1    0.000    0.000    0.000    0.000 unicode.py:85(identchars)
        1    0.000    0.000    0.000    0.000 legend.py:269(Legend)
        1    0.000    0.000    0.000    0.000 _probability_distribution.py:1(<module>)
        4    0.000    0.000    0.000    0.000 enum.py:1357(_missing_)
        1    0.000    0.000    0.000    0.000 _rules.py:382(_POERules)
        1    0.000    0.000    0.000    0.000 core.py:52(Orbital)
      200    0.000    0.000    0.000    0.000 matrix_element.py:157(<listcomp>)
      117    0.000    0.000    0.000    0.000 _parser.py:1090(expand_template)
     1616    0.000    0.000    0.000    0.000 {built-in method builtins.globals}
        1    0.000    0.000    0.000    0.000 backend_bases.py:121(RendererBase)
       15    0.000    0.000    0.000    0.000 fromnumeric.py:2979(prod)
        1    0.000    0.000    0.000    0.000 weak.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fake_utils.py:1(<module>)
       23    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:593(__init__)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:181(SymNode)
       21    0.000    0.000    0.000    0.000 domain.py:379(__call__)
      513    0.000    0.000    0.000    0.000 {method 'items' of 'mappingproxy' objects}
       27    0.000    0.000    0.000    0.000 singleton.py:125(register)
        1    0.000    0.000    0.000    0.000 _dok.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:191(SchemaMatcher)
        1    0.000    0.000    0.000    0.000 tricontour.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sequences.py:26(SeqBase)
        2    0.000    0.000    0.000    0.000 _basic.py:3190(factorial2)
        5    0.000    0.000    0.000    0.000 backend_bases.py:1580(_check_savefig_extra_args)
       28    0.000    0.000    0.000    0.000 optimizer.py:291(_patch_step_function)
        1    0.000    0.000    0.000    0.000 von_mises.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1339(_generate_domain_support)
        1    0.000    0.000    0.000    0.000 sampler.py:210(BatchSampler)
        1    0.000    0.000    0.000    0.000 mathtext.py:219(MathtextBackendPs)
        1    0.000    0.000    0.000    0.000 configparser.py:1325(ConverterMapping)
        1    0.000    0.000    0.000    0.000 gzip.py:1(<module>)
      307    0.000    0.000    0.000    0.000 __init__.py:722(__iter__)
        2    0.000    0.000    0.000    0.000 conv_relu.py:1(<module>)
      166    0.000    0.000    0.000    0.000 colors.py:521(__init__)
        1    0.000    0.000    0.000    0.000 _secondary_axes.py:1(<module>)
       10    0.000    0.000    0.000    0.000 _text.py:79(__hash__)
        1    0.000    0.000    0.000    0.000 _tukeylambda_stats.py:1(<module>)
       16    0.000    0.000    0.000    0.000 _internal.py:32(wrapped_f)
        1    0.000    0.000    0.000    0.000 polyclasses.py:138(DMP)
        1    0.000    0.000    0.000    0.000 ddm.py:102(DDM)
      688    0.000    0.000    0.000    0.000 {method 'decode' of 'bytes' objects}
        1    0.000    0.000    0.000    0.000 combinatorics.py:14(ShufflerIterDataPipe)
       15    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2007(_validate_order_kind)
      147    0.000    0.000    0.000    0.000 TiffTags.py:35(__new__)
        1    0.000    0.000    0.000    0.000 repmatrix.py:209(_flat_list_to_DomainMatrix)
        1    0.000    0.000    0.000    0.000 backend_bases.py:2785(NavigationToolbar2)
      694    0.000    0.000    0.000    0.000 boolalg.py:480(<lambda>)
       92    0.000    0.000    0.000    0.000 _collections.py:20(__missing__)
        1    0.000    0.000    0.000    0.000 fu.py:1(<module>)
    27/23    0.000    0.000    0.000    0.000 basic.py:366(compare)
        5    0.000    0.000    0.000    0.000 random.py:119(__init__)
       43    0.000    0.000    0.000    0.000 symbolic_shapes.py:817(_make_user_magic)
        1    0.000    0.000    0.000    0.000 _legacy.py:1(<module>)
       16    0.000    0.000    0.000    0.000 {method 'uniform' of 'numpy.random._generator.Generator' objects}
        4    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2249(_support)
        6    0.000    0.000    0.000    0.000 ctx_iv.py:413(convert)
        1    0.000    0.000    0.000    0.000 _data.py:1(<module>)
       37    0.000    0.000    0.000    0.000 mul.py:494(<listcomp>)
        3    0.000    0.000    0.000    0.000 typing_extensions.py:2894(__call__)
        6    0.000    0.000    0.000    0.000 symbolic_opset9.py:1652(_avg_pool)
       15    0.000    0.000    0.000    0.000 decorator.py:170(depends_on_deco)
       18    0.000    0.000    0.000    0.000 __init__.py:844(search)
      261    0.000    0.000    0.000    0.000 dispatcher.py:204(<genexpr>)
        1    0.000    0.000    0.000    0.000 quoprimime.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _hessian_update_strategy.py:107(FullHessianUpdateStrategy)
        1    0.000    0.000    0.000    0.000 patches.py:1909(BoxStyle)
        1    0.000    0.000    0.000    0.000 repr.py:1(<module>)
       44    0.000    0.000    0.000    0.000 core.py:4124(<genexpr>)
       16    0.000    0.000    0.000    0.000 _type_aliases.py:58(bitname)
      216    0.000    0.000    0.000    0.000 typing.py:1389(<genexpr>)
       21    0.000    0.000    0.000    0.000 __init__.py:315(_subx)
        1    0.000    0.000    0.000    0.000 transports.py:1(<module>)
       34    0.000    0.000    0.000    0.000 libmpf.py:491(from_rational)
        1    0.000    0.000    0.000    0.000 unicode.py:99(identbodychars)
        1    0.000    0.000    0.000    0.000 adam.py:13(Adam)
        1    0.000    0.000    0.000    0.000 _endian.py:1(<module>)
        1    0.000    0.000    0.000    0.000 glob_group.py:1(<module>)
       37    0.000    0.000    0.000    0.000 numeric.py:1855(isscalar)
        1    0.000    0.000    0.000    0.000 rootisolation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _adapters.py:42(CompatibilityFiles)
        1    0.000    0.000    0.000    0.000 records.py:1(<module>)
        1    0.000    0.000    0.000    0.000 routeddecoder.py:17(RoutedDecoderIterDataPipe)
       29    0.000    0.000    0.000    0.000 _array_api.py:576(<listcomp>)
        1    0.000    0.000    0.000    0.000 _multivariate.py:4994(__init__)
        1    0.000    0.000    0.000    0.000 transformer.py:17(Transformer)
        1    0.000    0.000    0.000    0.000 doccer.py:1(<module>)
        1    0.000    0.000    0.000    0.000 tritools.py:1(<module>)
        4    0.000    0.000    0.000    0.000 _pep440.py:292(__init__)
       92    0.000    0.000    0.000    0.000 permutations.py:463(size)
        1    0.000    0.000    0.000    0.000 pyplot.py:2172(<listcomp>)
        1    0.000    0.000    0.000    0.000 _fir_filter_design.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:5241(__init__)
        1    0.000    0.000    0.000    0.000 spglib.py:84(DictInterface)
        1    0.000    0.000    0.000    0.000 hermite.py:1(<module>)
        1    0.000    0.000    0.000    0.000 repmatrix.py:183(_dod_to_DomainMatrix)
       41    0.000    0.000    0.000    0.000 deprecation.py:365(<genexpr>)
        1    0.000    0.000    0.000    0.000 _multivariate.py:1128(__init__)
        1    0.000    0.000    0.000    0.000 expressiondomain.py:15(ExpressionDomain)
        1    0.000    0.000    0.000    0.000 pythonrationalfield.py:1(<module>)
       18    0.000    0.000    0.000    0.000 _compiler.py:389(_bytes_to_codes)
        1    0.000    0.000    0.000    0.000 animation.py:96(MovieWriterRegistry)
        1    0.000    0.000    0.000    0.000 _base.py:85(_spbase)
        1    0.000    0.000    0.000    0.000 _multivariate.py:1655(__init__)
       48    0.000    0.000    0.000    0.000 pretty_symbology.py:101(<lambda>)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:410(ints)
      711    0.000    0.000    0.000    0.000 {built-in method builtins.vars}
        1    0.000    0.000    0.000    0.000 exponential.py:1108(LambertW)
        1    0.000    0.000    0.000    0.000 _polyint.py:1(<module>)
       55    0.000    0.000    0.000    0.000 <frozen codecs>:309(__init__)
      135    0.000    0.000    0.000    0.000 containers.py:72(__iter__)
       36    0.000    0.000    0.000    0.000 tokenize.py:329(find_cookie)
        1    0.000    0.000    0.000    0.000 _wilcoxon.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _multivariate.py:6108(__init__)
      114    0.000    0.000    0.000    0.000 textwrap.py:482(prefixed_lines)
        1    0.000    0.000    0.000    0.000 _csc.py:1(<module>)
       58    0.000    0.000    0.000    0.000 core.py:1922(set_name)
        1    0.000    0.000    0.000    0.000 _freeze.py:1(<module>)
       25    0.000    0.000    0.000    0.000 pretty_symbology.py:109(<genexpr>)
      143    0.000    0.000    0.000    0.000 core.py:794(preParse)
        3    0.000    0.000    0.000    0.000 blas.py:395(getter)
       16    0.000    0.000    0.000    0.000 arraypad.py:86(_pad_simple)
      107    0.000    0.000    0.000    0.000 rcsetup.py:65(__call__)
        1    0.000    0.000    0.000    0.000 dumper.py:1(<module>)
       10    0.000    0.000    0.000    0.000 symbolic_opset11.py:87(_apply)
       83    0.000    0.000    0.000    0.000 linecache.py:147(lazycache)
        1    0.000    0.000    0.000    0.000 free_groups.py:1(<module>)
       21    0.000    0.000    0.000    0.000 domain.py:371(new)
        1    0.000    0.000    0.000    0.000 splitter_base.py:256(_SplitterBase)
        1    0.000    0.000    0.000    0.000 sdm.py:1(<module>)
        1    0.000    0.000    0.000    0.000 queues.py:1(<module>)
       43    0.000    0.000    0.000    0.000 core.py:3157(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 linear.py:9(Linear)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:582(_ReducedHCT_Element)
        1    0.000    0.000    0.000    0.000 find_file_dependencies.py:7(_ExtractModuleReferences)
        1    0.000    0.000    0.000    0.000 package_importer.py:48(PackageImporter)
        1    0.000    0.000    0.000    0.000 zetazeros.py:1(<module>)
       12    0.000    0.000    0.000    0.000 weakref.py:104(__init__)
        3    0.000    0.000    0.000    0.000 {method 'integers' of 'numpy.random._generator.Generator' objects}
       90    0.000    0.000    0.000    0.000 _pytree.py:47(_register_pytree_node)
       19    0.000    0.000    0.000    0.000 __init__.py:1281(_to_unmasked_float_array)
        1    0.000    0.000    0.000    0.000 getlimits.py:1(<module>)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1656(DraggableBase)
       20    0.000    0.000    0.000    0.000 mul.py:34(_mulsort)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3267(__init__)
        1    0.000    0.000    0.000    0.000 para4tb.py:74(<listcomp>)
        1    0.000    0.000    0.000    0.000 _state.py:1(<module>)
        1    0.000    0.000    0.000    0.000 histograms.py:1(<module>)
       87    0.000    0.000    0.000    0.000 utils.py:44(<dictcomp>)
        1    0.000    0.000    0.000    0.000 rootoftools.py:166(ComplexRootOf)
        1    0.000    0.000    0.000    0.000 conv.py:1195(LazyConv1d)
        1    0.000    0.000    0.000    0.000 fields.py:1(<module>)
      544    0.000    0.000    0.000    0.000 registration.py:81(in_base)
       34    0.000    0.000    0.000    0.000 operations.py:118(_from_args)
        1    0.000    0.000    0.000    0.000 para4band.py:14(Stiefel_Frame)
        1    0.000    0.000    0.000    0.000 interpolate.py:1(<module>)
        2    0.000    0.000    0.000    0.000 _basic.py:3035(_factorialx_wrapper)
        1    0.000    0.000    0.000    0.000 testing.py:22(reset_pyparsing_context)
        9    0.000    0.000    0.000    0.000 pathlib.py:765(__truediv__)
      480    0.000    0.000    0.000    0.000 artist.py:1371(<genexpr>)
        1    0.000    0.000    0.000    0.000 colors.py:97(<dictcomp>)
        1    0.000    0.000    0.000    0.000 numbers.py:1211(Rational)
        4    0.000    0.000    0.000    0.000 _new_distributions.py:412(_icdf_formula)
        9    0.000    0.000    0.000    0.000 typing_extensions.py:757(__init_subclass__)
        1    0.000    0.000    0.000    0.000 optimization.py:1(<module>)
        4    0.000    0.000    0.000    0.000 random.py:128(seed)
       23    0.000    0.000    0.000    0.000 functools.py:841(_is_union_type)
        1    0.000    0.000    0.000    0.000 upsampling.py:11(Upsample)
        6    0.000    0.000    0.000    0.000 numeric.py:2507(extend_all)
        5    0.000    0.000    0.000    0.000 pathlib.py:757(joinpath)
       15    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2223(support)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:90(<listcomp>)
        1    0.000    0.000    0.000    0.000 uuid.py:85(UUID)
        6    0.000    0.000    0.000    0.000 core.py:1737(__call__)
        4    0.000    0.000    0.000    0.000 ctx_iv.py:43(__new__)
        1    0.000    0.000    0.000    0.000 _dia.py:1(<module>)
      254    0.000    0.000    0.000    0.000 core.py:3902(<genexpr>)
       99    0.000    0.000    0.000    0.000 traceback.py:389(extended_frame_gen)
       16    0.000    0.000    0.000    0.000 sysconfig.py:244(_subst_vars)
        1    0.000    0.000    0.000    0.000 emitter.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _netcdf.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _qmc.py:2312(MultivariateNormalQMC)
        1    0.000    0.000    0.000    0.000 libelefun.py:1(<module>)
       66    0.000    0.000    0.000    0.000 __init__.py:228(_acquireLock)
        9    0.000    0.000    0.000    0.000 fontconfig_pattern.py:138(_family)
        1    0.000    0.000    0.000    0.000 serialization.py:281(_open_zipfile_reader)
        1    0.000    0.000    0.000    0.000 symbolic_opset7.py:1(<module>)
        1    0.000    0.000    0.000    0.000 glob.py:175(_listdir)
        1    0.000    0.000    0.000    0.000 proxy.py:476(ParameterProxy)
        6    0.000    0.000    0.000    0.000 abc.py:32(_register)
       71    0.000    0.000    0.000    0.000 enum.py:945(_find_data_repr_)
        1    0.000    0.000    0.000    0.000 conv.py:272(Conv1d)
      224    0.000    0.000    0.000    0.000 {method 'setter' of 'property' objects}
      350    0.000    0.000    0.000    0.000 {built-in method numpy.core._multiarray_umath.add_docstring}
       10    0.000    0.000    0.000    0.000 util.py:421(_inner)
        2    0.000    0.000    0.000    0.000 extension.py:1(<module>)
        1    0.000    0.000    0.000    0.000 spines.py:11(Spine)
        1    0.000    0.000    0.000    0.000 structure.py:1006(IStructure)
        1    0.000    0.000    0.000    0.000 basic.py:156(Basic)
      149    0.000    0.000    0.000    0.000 _util.py:373(check_random_state)
        1    0.000    0.000    0.000    0.000 sampler.py:18(Sampler)
        1    0.000    0.000    0.000    0.000 _decomp_lu.py:16(<dictcomp>)
        8    0.000    0.000    0.000    0.000 kind.py:43(__new__)
        3    0.000    0.000    0.000    0.000 blas.py:422(get_blas_funcs)
        4    0.000    0.000    0.000    0.000 ssl.py:461(__new__)
        3    0.000    0.000    0.000    0.000 zipfile.py:1242(__init__)
        1    0.000    0.000    0.000    0.000 repmatrix.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1379(<listcomp>)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:4440(TruncatedDistribution)
        4    0.000    0.000    0.000    0.000 polynomial.py:1227(__init__)
        1    0.000    0.000    0.000    0.000 bdist.py:1(<module>)
      309    0.000    0.000    0.000    0.000 enum.py:220(__set_name__)
       26    0.000    0.000    0.000    0.000 pathlib.py:657(stem)
        1    0.000    0.000    0.000    0.000 chebyshev.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _interface.py:55(LinearOperator)
        1    0.000    0.000    0.000    0.000 __init__.py:666(<listcomp>)
        1    0.000    0.000    0.000    0.000 _distr_params.py:1(<module>)
       49    0.000    0.000    0.000    0.000 _compiler.py:405(_generate_overlap_table)
        2    0.000    0.000    0.000    0.000 deprecation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 operator_schemas.py:29(_nonzero_schemas)
       48    0.000    0.000    0.000    0.000 string.py:139(formula_double_format)
        1    0.000    0.000    0.000    0.000 patches.py:3564(FancyBboxPatch)
       15    0.000    0.000    0.000    0.000 warnings.py:181(_add_filter)
        1    0.000    0.000    0.000    0.000 orderings.py:1(<module>)
        4    0.000    0.000    0.000    0.000 functools.py:861(<lambda>)
        3    0.000    0.000    0.000    0.000 design_patterns.py:43(cached_class)
        1    0.000    0.000    0.000    0.000 distribution.py:10(Distribution)
      200    0.000    0.000    0.000    0.000 _ops.py:437(__hash__)
        1    0.000    0.000    0.000    0.000 exceptions.py:30(ParseBaseException)
        1    0.000    0.000    0.000    0.000 _special_sparse_arrays.py:1(<module>)
      317    0.000    0.000    0.000    0.000 overrides.py:105(array_function_dispatch)
       47    0.000    0.000    0.000    0.000 numbers.py:1927(__mul__)
      213    0.000    0.000    0.000    0.000 ctx_iv.py:369(_wrap_specfun)
       10    0.000    0.000    0.000    0.000 deprecation.py:83(wrap)
        1    0.000    0.000    0.000    0.000 core.py:141(MaskedTensor)
        3    0.000    0.000    0.000    0.000 _adapters.py:49(<listcomp>)
        1    0.000    0.000    0.000    0.000 hooks.py:9(RemovableHandle)
        5    0.000    0.000    0.000    0.000 matrices.py:749(__init__)
        1    0.000    0.000    0.000    0.000 gaussiandomains.py:517(GaussianRationalField)
       72    0.000    0.000    0.000    0.000 util.py:113(set_)
        8    0.000    0.000    0.000    0.000 typing.py:2345(<dictcomp>)
       72    0.000    0.000    0.000    0.000 util.py:110(get)
        1    0.000    0.000    0.000    0.000 conv.py:103(Conv1d)
       28    0.000    0.000    0.000    0.000 module.py:2176(named_children)
        6    0.000    0.000    0.000    0.000 {method 'multinomial' of 'numpy.random._generator.Generator' objects}
      160    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1220(__init__)
      127    0.000    0.000    0.000    0.000 {method 'copy' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.000    0.000 backend_managers.py:39(ToolManager)
       12    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:913(_set_invalid_nan)
        1    0.000    0.000    0.000    0.000 hermite_e.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _sysconfigdata__linux_x86_64-linux-gnu.py:1(<module>)
        1    0.000    0.000    0.000    0.000 streamplot.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _guards.py:26(GuardSource)
       62    0.000    0.000    0.000    0.000 rational.py:7(create_reduced)
        1    0.000    0.000    0.000    0.000 rational.py:1(<module>)
        1    0.000    0.000    0.000    0.000 systems.py:1(<module>)
      257    0.000    0.000    0.000    0.000 typing.py:1661(_value_and_type_iter)
        1    0.000    0.000    0.000    0.000 basic.py:2233(Atom)
        1    0.000    0.000    0.000    0.000 patches.py:1185(Arrow)
        1    0.000    0.000    0.000    0.000 optimizer.py:1(<module>)
        1    0.000    0.000    0.000    0.000 mathtext.py:261(MathtextBackendPdf)
        2    0.000    0.000    0.000    0.000 _distributor_init.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _multivariate.py:4391(__init__)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3646(_logpxf_dispatch)
      841    0.000    0.000    0.000    0.000 inspect.py:2737(annotation)
        3    0.000    0.000    0.000    0.000 message.py:243(get_payload)
       40    0.000    0.000    0.000    0.000 getlimits.py:24(_fr1)
       22    0.000    0.000    0.000    0.000 numbers.py:1811(__new__)
        1    0.000    0.000    0.000    0.000 _orthogonal.py:1(<module>)
        2    0.000    0.000    0.000    0.000 twodim_base.py:158(eye)
        1    0.000    0.000    0.000    0.000 conv.py:182(ConvTranspose1d)
        1    0.000    0.000    0.000    0.000 interpreter.py:370(Transformer)
       23    0.000    0.000    0.000    0.000 rcsetup.py:347(validate_color_or_auto)
        8    0.000    0.000    0.000    0.000 core.py:5098(__init__)
        1    0.000    0.000    0.000    0.000 gaussiandomains.py:328(GaussianIntegerRing)
        1    0.000    0.000    0.000    0.000 rnn.py:18(LSTMCell)
        1    0.000    0.000    0.000    0.000 container.py:552(ParameterList)
      212    0.000    0.000    0.000    0.000 transforms.py:1256(<genexpr>)
        1    0.000    0.000    0.000    0.000 expr.py:266(__pow__)
       51    0.000    0.000    0.000    0.000 nvfuser_prims.py:144(_assert_nvfuser_op_exists)
        1    0.000    0.000    0.000    0.000 _secondary_axes.py:37(SecondaryAxis)
    18/17    0.000    0.000    0.000    0.000 typing.py:1474(__repr__)
       23    0.000    0.000    0.000    0.000 pythonmpq.py:103(_new)
       38    0.000    0.000    0.000    0.000 assumptions.py:494(make_property)
        1    0.000    0.000    0.000    0.000 symbolic_opset14.py:1(<module>)
      128    0.000    0.000    0.000    0.000 dataclasses.py:1053(<listcomp>)
       26    0.000    0.000    0.000    0.000 {built-in method torch._C.call_stack}
        1    0.000    0.000    0.000    0.000 cnf.py:1(<module>)
        1    0.000    0.000    0.000    0.000 conv_add.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:5544(Forward)
        1    0.000    0.000    0.000    0.000 wishart.py:30(Wishart)
      157    0.000    0.000    0.000    0.000 {built-in method torch._C.isSubtypeOf}
        1    0.000    0.000    0.000    0.000 _compression.py:1(<module>)
      216    0.000    0.000    0.000    0.000 message.py:506(set_raw)
      576    0.000    0.000    0.000    0.000 {method '__init_subclass__' of 'object' objects}
        1    0.000    0.000    0.000    0.000 maple.py:1(<module>)
        1    0.000    0.000    0.000    0.000 logic.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:437(_get_xdg_config_dir)
        1    0.000    0.000    0.000    0.000 functional_modules.py:1(<module>)
        2    0.000    0.000    0.000    0.000 typing.py:2962(TypedDict)
        1    0.000    0.000    0.000    0.000 lazy.py:1(<module>)
       37    0.000    0.000    0.000    0.000 libmpf.py:950(mpf_div)
        2    0.000    0.000    0.000    0.000 core.py:6169(<listcomp>)
        1    0.000    0.000    0.000    0.000 core.py:3882(ParseExpression)
        1    0.000    0.000    0.000    0.000 _guards.py:318(TracingContext)
        1    0.000    0.000    0.000    0.000 swa_utils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _compat_pickle.py:1(<module>)
        1    0.000    0.000    0.000    0.000 abc.py:56(Traversable)
        1    0.000    0.000    0.000    0.000 decorators.py:236(_func)
      748    0.000    0.000    0.000    0.000 {method 'remove' of 'set' objects}
        2    0.000    0.000    0.000    0.000 __init__.py:305(_compile_repl)
       16    0.000    0.000    0.000    0.000 __init__.py:150(__init__)
       24    0.000    0.000    0.000    0.000 {built-in method _warnings.warn}
        1    0.000    0.000    0.000    0.000 _at.py:27(_AtOp)
        1    0.000    0.000    0.000    0.000 assumptions_generated.py:1(<module>)
        2    0.000    0.000    0.000    0.000 core.py:555(set_results_name)
        1    0.000    0.000    0.000    0.000 laguerre.py:1(<module>)
      729    0.000    0.000    0.000    0.000 conflict.py:63(<lambda>)
        2    0.000    0.000    0.000    0.000 version.py:47(parse)
        1    0.000    0.000    0.000    0.000 _cubic.py:378(Akima1DInterpolator)
        1    0.000    0.000    0.000    0.000 __init__.py:414(StreamContext)
       29    0.000    0.000    0.000    0.000 _array_api.py:571(<listcomp>)
      130    0.000    0.000    0.000    0.000 dataclasses.py:325(__init__)
        4    0.000    0.000    0.000    0.000 typing.py:349(_tp_cache)
       58    0.000    0.000    0.000    0.000 results.py:454(__iadd__)
        1    0.000    0.000    0.000    0.000 _tzpath.py:1(<module>)
      250    0.000    0.000    0.000    0.000 {method 'indices' of 'slice' objects}
      567    0.000    0.000    0.000    0.000 permutations.py:1184(size)
        1    0.000    0.000    0.000    0.000 legendre.py:1(<module>)
  277/275    0.000    0.000    0.000    0.000 results.py:176(__init__)
        1    0.000    0.000    0.000    0.000 spectral_norm.py:1(<module>)
        4    0.000    0.000    0.000    0.000 {built-in method _ssl.txt2obj}
      129    0.000    0.000    0.000    0.000 dataclasses.py:1047(<listcomp>)
      108    0.000    0.000    0.000    0.000 typing.py:1015(<genexpr>)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:37(Category)
        1    0.000    0.000    0.000    0.000 _fuser.py:1(<module>)
        2    0.000    0.000    0.000    0.000 _pep440.py:117(parse)
        1    0.000    0.000    0.000    0.000 __init__.py:979(ComplexFloatStorage)
        9    0.000    0.000    0.000    0.000 numeric.py:136(ones)
       10    0.000    0.000    0.000    0.000 typing_extensions.py:649(__init__)
      130    0.000    0.000    0.000    0.000 core.py:1785(set_whitespace_chars)
        1    0.000    0.000    0.000    0.000 patches.py:3828(FancyArrowPatch)
        1    0.000    0.000    0.000    0.000 _trigonometric_special.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _fortran_format_parser.py:1(<module>)
        7    0.000    0.000    0.000    0.000 dev.py:112(decorator)
        4    0.000    0.000    0.000    0.000 _script.py:265(__init__)
        1    0.000    0.000    0.000    0.000 _multicomp.py:25(DunnettResult)
        1    0.000    0.000    0.000    0.000 activation.py:889(MultiheadAttention)
        1    0.000    0.000    0.000    0.000 futures.py:1(<module>)
        3    0.000    0.000    0.000    0.000 patches.py:1885(<listcomp>)
       19    0.000    0.000    0.000    0.000 __init__.py:2271(_check_shape)
       37    0.000    0.000    0.000    0.000 rcsetup.py:558(_validate_linestyle)
      777    0.000    0.000    0.000    0.000 {built-in method _sre.unicode_iscased}
        1    0.000    0.000    0.000    0.000 sgd.py:1(<module>)
        1    0.000    0.000    0.000    0.000 relaxed_bernoulli.py:1(<module>)
       93    0.000    0.000    0.000    0.000 _script.py:897(<lambda>)
       55    0.000    0.000    0.000    0.000 numbers.py:3145(__hash__)
        1    0.000    0.000    0.000    0.000 scale.py:204(LogTransform)
        9    0.000    0.000    0.000    0.000 warnings.py:165(simplefilter)
        1    0.000    0.000    0.000    0.000 pooling.py:257(MaxUnpool1d)
        6    0.000    0.000    0.000    0.000 constraints.py:192(__init__)
      4/3    0.000    0.000    0.000    0.000 {method 'view' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.000    0.000 typing_extensions.py:2835(deprecated)
        1    0.000    0.000    0.000    0.000 ellipse.py:41(Ellipse)
        4    0.000    0.000    0.000    0.000 {function Random.seed at 0x146c65f518a0}
       28    0.000    0.000    0.000    0.000 ops.py:324(__getitem__)
        1    0.000    0.000    0.000    0.000 fake_tensor.py:169(FakeTensorConverter)
        1    0.000    0.000    0.000    0.000 core.py:4667(ParseElementEnhance)
      377    0.000    0.000    0.000    0.000 enum.py:779(<genexpr>)
        1    0.000    0.000    0.000    0.000 scalarint.py:1(<module>)
        1    0.000    0.000    0.000    0.000 add.py:93(Add)
        2    0.000    0.000    0.000    0.000 warnings.py:1(<module>)
        1    0.000    0.000    0.000    0.000 docstring.py:1(<module>)
       15    0.000    0.000    0.000    0.000 <frozen _collections_abc>:933(clear)
        1    0.000    0.000    0.000    0.000 ask_generated.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ntheory.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fancysets.py:1386(CartesianComplexRegion)
        1    0.000    0.000    0.000    0.000 libintmath.py:126(<listcomp>)
       45    0.000    0.000    0.000    0.000 pathlib.py:523(_format_parsed_parts)
        6    0.000    0.000    0.000    0.000 symbolic_opset9.py:1539(_max_pool)
        1    0.000    0.000    0.000    0.000 rnn.py:32(RNNBase)
        1    0.000    0.000    0.000    0.000 core.py:125(Diagnostics)
      130    0.000    0.000    0.000    0.000 dataclasses.py:376(<genexpr>)
        7    0.000    0.000    0.000    0.000 enum.py:1532(unique)
        1    0.000    0.000    0.000    0.000 core.py:2697(MaskedArray)
        1    0.000    0.000    0.000    0.000 importer.py:28(Importer)
      682    0.000    0.000    0.000    0.000 {function RcParams.__getitem__ at 0x146b7c570c20}
        8    0.000    0.000    0.000    0.000 deprecation.py:493(_suppress_matplotlib_deprecation_warning)
        1    0.000    0.000    0.000    0.000 transforms.py:213(BboxBase)
        1    0.000    0.000    0.000    0.000 cse_main.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dlpack.py:10(DLDeviceType)
        1    0.000    0.000    0.000    0.000 nodes.py:1(<module>)
        1    0.000    0.000    0.000    0.000 operator_support.py:37(OperatorSupport)
        1    0.000    0.000    0.000    0.000 _fft.py:1(<module>)
       40    0.000    0.000    0.000    0.000 numbers.py:780(__new__)
       76    0.000    0.000    0.000    0.000 signal.py:9(<lambda>)
        1    0.000    0.000    0.000    0.000 _dataclass_impls.py:1(<module>)
        1    0.000    0.000    0.000    0.000 streams.py:395(StreamReader)
        6    0.000    0.000    0.000    0.000 symbolic_opset10.py:129(_max_pool)
        1    0.000    0.000    0.000    0.000 observer.py:154(UniformQuantizationObserverBase)
        1    0.000    0.000    0.000    0.000 decorators.py:111(binary_op_wrapper)
        1    0.000    0.000    0.000    0.000 para4tb.py:1(<module>)
        1    0.000    0.000    0.000    0.000 module.py:53(_WrappedHook)
        1    0.000    0.000    0.000    0.000 ordinals.py:56(Ordinal)
        1    0.000    0.000    0.000    0.000 selectors.py:341(_PollLikeSelector)
        1    0.000    0.000    0.000    0.000 accumulationbounds.py:14(AccumulationBounds)
       40    0.000    0.000    0.000    0.000 _parser.py:256(getwhile)
        1    0.000    0.000    0.000    0.000 polar.py:225(ThetaLocator)
       24    0.000    0.000    0.000    0.000 constructor.py:337(add_default_constructor)
        1    0.000    0.000    0.000    0.000 core.py:2808(__new__)
        2    0.000    0.000    0.000    0.000 expressiondomain.py:26(__init__)
        1    0.000    0.000    0.000    0.000 einsumfunc.py:1(<module>)
        2    0.000    0.000    0.000    0.000 sysconfig.py:109(_getuserbase)
        1    0.000    0.000    0.000    0.000 fake_utils.py:48(CrossRefFakeMode)
        1    0.000    0.000    0.000    0.000 negative_binomial.py:1(<module>)
        4    0.000    0.000    0.000    0.000 typing.py:353(decorator)
        1    0.000    0.000    0.000    0.000 __init__.py:892(MetadataPathFinder)
        1    0.000    0.000    0.000    0.000 galois_resolvents.py:1(<module>)
      208    0.000    0.000    0.000    0.000 inspect.py:946(<genexpr>)
        1    0.000    0.000    0.000    0.000 expr_with_limits.py:199(ExprWithLimits)
        3    0.000    0.000    0.000    0.000 blas.py:337(_get_funcs)
        8    0.000    0.000    0.000    0.000 core.py:4464(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 mixins.py:59(NDArrayOperatorsMixin)
        1    0.000    0.000    0.000    0.000 _ir_utils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _cm.py:1(<module>)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:508(contains)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1644(FigureCanvasBase)
        1    0.000    0.000    0.000    0.000 composition.py:38(Composition)
        1    0.000    0.000    0.000    0.000 pythonrationalfield.py:9(PythonRationalField)
        1    0.000    0.000    0.000    0.000 filelist.py:1(<module>)
        1    0.000    0.000    0.000    0.000 expr.py:261(_pow)
        2    0.000    0.000    0.000    0.000 version.py:188(__init__)
       80    0.000    0.000    0.000    0.000 _sources.py:51(remove_prefix)
        4    0.000    0.000    0.000    0.000 stride_tricks.py:367(broadcast_to)
       14    0.000    0.000    0.000    0.000 _infra.py:65(from_sarif)
        4    0.000    0.000    0.000    0.000 {method 'close' of '_io.BufferedReader' objects}
        1    0.000    0.000    0.000    0.000 numbers.py:281(Number)
    32/24    0.000    0.000    0.000    0.000 typing.py:2348(_strip_annotations)
        2    0.000    0.000    0.000    0.000 _new_distributions.py:397(_logpmf_formula)
       26    0.000    0.000    0.000    0.000 _decomp_lu.py:16(<listcomp>)
        6    0.000    0.000    0.000    0.000 core.py:5220(__init__)
        1    0.000    0.000    0.000    0.000 json.py:111(MSONable)
       12    0.000    0.000    0.000    0.000 polytools.py:69(_polifyit)
        1    0.000    0.000    0.000    0.000 polytools.py:4542(PurePoly)
        1    0.000    0.000    0.000    0.000 polyconfig.py:1(<module>)
        1    0.000    0.000    0.000    0.000 lines.py:200(Line2D)
        1    0.000    0.000    0.000    0.000 base_subprocess.py:255(WriteSubprocessPipeProto)
        2    0.000    0.000    0.000    0.000 glob.py:141(_iterdir)
        1    0.000    0.000    0.000    0.000 binomial.py:1(<module>)
      212    0.000    0.000    0.000    0.000 transforms.py:1262(<genexpr>)
        1    0.000    0.000    0.000    0.000 _parser.py:569(__init__)
       62    0.000    0.000    0.000    0.000 __init__.py:26(__new__)
        1    0.000    0.000    0.000    0.000 symbolic_opset15.py:1(<module>)
        1    0.000    0.000    0.000    0.000 adamw.py:1(<module>)
      140    0.000    0.000    0.000    0.000 deprecation.py:112(deprecated)
       66    0.000    0.000    0.000    0.000 __init__.py:237(_releaseLock)
    35/24    0.000    0.000    0.000    0.000 typing.py:371(_eval_type)
        1    0.000    0.000    0.000    0.000 inputs.py:1182(KpointsSupportedModes)
       55    0.000    0.000    0.000    0.000 {built-in method numpy.empty}
        1    0.000    0.000    0.000    0.000 patches.py:4184(ConnectionPatch)
        1    0.000    0.000    0.000    0.000 Image.py:138(Transpose)
        1    0.000    0.000    0.000    0.000 <frozen os>:44(_get_exports_list)
      174    0.000    0.000    0.000    0.000 _docscrape.py:713(_should_skip_member)
        1    0.000    0.000    0.000    0.000 threading.py:1402(__init__)
        1    0.000    0.000    0.000    0.000 _comparison.py:484(NumberPair)
       14    0.000    0.000    0.000    0.000 numeric.py:1330(normalize_axis_tuple)
       68    0.000    0.000    0.000    0.000 _internal.py:38(<listcomp>)
        1    0.000    0.000    0.000    0.000 continuous_bernoulli.py:1(<module>)
        1    0.000    0.000    0.000    0.000 polyquinticconst.py:1(<module>)
        1    0.000    0.000    0.000    0.000 lbfgs.py:1(<module>)
        1    0.000    0.000    0.000    0.000 trigonometry.py:1(<module>)
        5    0.000    0.000    0.000    0.000 iterables.py:1948(has_variety)
        1    0.000    0.000    0.000    0.000 multivariate_normal.py:1(<module>)
       10    0.000    0.000    0.000    0.000 version.py:314(parse)
      120    0.000    0.000    0.000    0.000 periodic_table.py:170(__getattr__)
        1    0.000    0.000    0.000    0.000 transforms.py:270(ComposeTransform)
       30    0.000    0.000    0.000    0.000 warnings.py:466(__enter__)
        1    0.000    0.000    0.000    0.000 printer.py:1(<module>)
       59    0.000    0.000    0.000    0.000 _array_api.py:170(_asarray)
        9    0.000    0.000    0.000    0.000 _util.py:981(decorator)
        1    0.000    0.000    0.000    0.000 combining.py:56(ZipperMapDataPipe)
       28    0.000    0.000    0.000    0.000 locale.py:678(getpreferredencoding)
        1    0.000    0.000    0.000    0.000 _parser.py:294(__init__)
        3    0.000    0.000    0.000    0.000 six.py:887(wrapper)
      156    0.000    0.000    0.000    0.000 inspect.py:943(<genexpr>)
        1    0.000    0.000    0.000    0.000 ticker.py:1689(Locator)
       40    0.000    0.000    0.000    0.000 {built-in method numpy.arange}
        1    0.000    0.000    0.000    0.000 facts.py:380(FactRules)
        2    0.000    0.000    0.000    0.000 multinomial.py:1(<module>)
        1    0.000    0.000    0.000    0.000 band_data_in.py:40(get_Kpoint)
        6    0.000    0.000    0.000    0.000 gzip.py:525(_add_read_data)
        1    0.000    0.000    0.000    0.000 win.py:1(<module>)
        4    0.000    0.000    0.000    0.000 _miobase.py:134(convert_dtypes)
        1    0.000    0.000    0.000    0.000 _reporting_descriptor.py:17(ReportingDescriptor)
       11    0.000    0.000    0.000    0.000 __init__.py:119(inplace_wrapper)
       27    0.000    0.000    0.000    0.000 functools.py:845(_is_valid_dispatch_type)
       26    0.000    0.000    0.000    0.000 _sources.py:72(<listcomp>)
        1    0.000    0.000    0.000    0.000 polar.py:407(RadialLocator)
        1    0.000    0.000    0.000    0.000 wrappers.py:1(<module>)
       51    0.000    0.000    0.000    0.000 rcsetup.py:407(validate_fontsize)
        1    0.000    0.000    0.000    0.000 _compatibility.py:1(<module>)
        1    0.000    0.000    0.000    0.000 grouping.py:144(GrouperIterDataPipe)
       85    0.000    0.000    0.000    0.000 _parser.py:295(checkgroupname)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2457(pdf)
       65    0.000    0.000    0.000    0.000 core.py:4087(<listcomp>)
        1    0.000    0.000    0.000    0.000 dataset.py:202(ConcatDataset)
        1    0.000    0.000    0.000    0.000 _subplots.py:11(SubplotBase)
        1    0.000    0.000    0.000    0.000 _warnings_errors.py:1(<module>)
        1    0.000    0.000    0.000    0.000 conv.py:465(Conv3d)
        1    0.000    0.000    0.000    0.000 symbol.py:456(Dummy)
        1    0.000    0.000    0.000    0.000 graycode.py:6(GrayCode)
       23    0.000    0.000    0.000    0.000 stride_tricks.py:416(_broadcast_shape)
       11    0.000    0.000    0.000    0.000 _tensor.py:31(_handle_torch_function_and_wrap_type_error_to_not_implemented)
      502    0.000    0.000    0.000    0.000 {method 'copy' of 'list' objects}
        4    0.000    0.000    0.000    0.000 typing_extensions.py:491(__init__)
        1    0.000    0.000    0.000    0.000 polysys.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:204(_LogUniform)
        1    0.000    0.000    0.000    0.000 dense_ndim_array.py:13(DenseNDimArray)
    36/32    0.000    0.000    0.000    0.000 typing.py:224(_type_repr)
        2    0.000    0.000    0.000    0.000 linear_fused.py:1(<module>)
        5    0.000    0.000    0.000    0.000 functools.py:188(total_ordering)
        1    0.000    0.000    0.000    0.000 pathlib.py:857(Path)
        1    0.000    0.000    0.000    0.000 mathtext.py:1078(StandardPsFonts)
      157    0.000    0.000    0.000    0.000 {built-in method torch._C.get}
        1    0.000    0.000    0.000    0.000 weight_norm.py:1(<module>)
      152    0.000    0.000    0.000    0.000 typing.py:456(__repr__)
        2    0.000    0.000    0.000    0.000 core.py:2978(__array_finalize__)
       19    0.000    0.000    0.000    0.000 fromnumeric.py:3269(round)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4472(halfcauchy_gen)
      101    0.000    0.000    0.000    0.000 core.py:6161(_expanded)
        1    0.000    0.000    0.000    0.000 resource_sharer.py:1(<module>)
        1    0.000    0.000    0.000    0.000 single.py:1107(Liouville)
        1    0.000    0.000    0.000    0.000 suite.py:328(_ErrorHolder)
       88    0.000    0.000    0.000    0.000 six.py:146(__init__)
        1    0.000    0.000    0.000    0.000 categorical.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pooling.py:331(MaxUnpool2d)
        1    0.000    0.000    0.000    0.000 pooling.py:735(FractionalMaxPool2d)
        1    0.000    0.000    0.000    0.000 _datasource.py:1(<module>)
        1    0.000    0.000    0.000    0.000 numbers.py:419(bernoulli)
       20    0.000    0.000    0.000    0.000 core.py:1030(reset_cache)
        1    0.000    0.000    0.000    0.000 tensor.py:968(TensorIndexType)
        1    0.000    0.000    0.000    0.000 bz2.py:97(close)
        1    0.000    0.000    0.000    0.000 filelister.py:13(FileListerIterDataPipe)
        1    0.000    0.000    0.000    0.000 pprint.py:1(<module>)
        2    0.000    0.000    0.000    0.000 _parser.py:997(parse_template)
        1    0.000    0.000    0.000    0.000 _constraints.py:1(<module>)
        8    0.000    0.000    0.000    0.000 {built-in method zlib.crc32}
        4    0.000    0.000    0.000    0.000 stride_tricks.py:340(_broadcast_to)
        1    0.000    0.000    0.000    0.000 assumptions.py:220(_load_pre_generated_assumption_rules)
        1    0.000    0.000    0.000    0.000 response.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pooling.py:805(FractionalMaxPool3d)
      673    0.000    0.000    0.000    0.000 _beartype.py:34(_no_op_decorator)
        1    0.000    0.000    0.000    0.000 one_hot_categorical.py:1(<module>)
       30    0.000    0.000    0.000    0.000 _array_api.py:523(<listcomp>)
        1    0.000    0.000    0.000    0.000 proxy.py:321(Proxy)
        5    0.000    0.000    0.000    0.000 symbolic_shapes.py:858(_lru_cache)
        1    0.000    0.000    0.000    0.000 split_utils.py:31(Component)
        1    0.000    0.000    0.000    0.000 patches.py:2376(ConnectionStyle)
       13    0.000    0.000    0.000    0.000 sympy_parser.py:1239(<genexpr>)
      397    0.000    0.000    0.000    0.000 enum.py:1226(value)
        1    0.000    0.000    0.000    0.000 octave.py:1(<module>)
        1    0.000    0.000    0.000    0.000 package_exporter.py:74(PackagingErrorReason)
        1    0.000    0.000    0.000    0.000 _weights_only_unpickler.py:1(<module>)
        1    0.000    0.000    0.000    0.000 parametrize.py:69(ParametrizationList)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2388(standard_deviation)
        1    0.000    0.000    0.000    0.000 _ksstats.py:1(<module>)
        1    0.000    0.000    0.000    0.000 mixture_same_family.py:1(<module>)
        1    0.000    0.000    0.000    0.000 scalarfloat.py:1(<module>)
        3    0.000    0.000    0.000    0.000 core.py:1627(__xor__)
        1    0.000    0.000    0.000    0.000 pooling.py:418(MaxUnpool3d)
        1    0.000    0.000    0.000    0.000 cm.py:211(ScalarMappable)
        1    0.000    0.000    0.000    0.000 scale.py:263(LogScale)
        1    0.000    0.000    0.000    0.000 puiseux.py:1(<module>)
       11    0.000    0.000    0.000    0.000 __init__.py:1467(debug)
        6    0.000    0.000    0.000    0.000 {method 'permuted' of 'numpy.random._generator.Generator' objects}
        1    0.000    0.000    0.000    0.000 uniform.py:1(<module>)
        1    0.000    0.000    0.000    0.000 datapipe.py:42(IterDataPipe)
        1    0.000    0.000    0.000    0.000 colorbar.py:1186(Colorbar)
        4    0.000    0.000    0.000    0.000 doccer.py:202(_doc)
        1    0.000    0.000    0.000    0.000 fold.py:1(<module>)
        1    0.000    0.000    0.000    0.000 relaxed_categorical.py:1(<module>)
        4    0.000    0.000    0.000    0.000 enum.py:1420(<listcomp>)
       26    0.000    0.000    0.000    0.000 _sources.py:75(<listcomp>)
        1    0.000    0.000    0.000    0.000 datetime.py:1311(time)
        1    0.000    0.000    0.000    0.000 inverselaplace.py:1(<module>)
       13    0.000    0.000    0.000    0.000 _dtype_ctypes.py:100(dtype_from_ctypes_type)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1502(<listcomp>)
       13    0.000    0.000    0.000    0.000 core.py:8406(_replace_return_type)
        1    0.000    0.000    0.000    0.000 extrapolation.py:1(<module>)
        7    0.000    0.000    0.000    0.000 dev.py:80(deprecated_function_decorator)
        1    0.000    0.000    0.000    0.000 pydoc.py:1803(Helper)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:14(Normal)
       42    0.000    0.000    0.000    0.000 ctx_mp_python.py:336(__new__)
        1    0.000    0.000    0.000    0.000 rationalfield.py:1(<module>)
       12    0.000    0.000    0.000    0.000 matexpr.py:23(deco)
        6    0.000    0.000    0.000    0.000 core.py:1146(__init__)
        1    0.000    0.000    0.000    0.000 facts.py:474(_from_python)
        1    0.000    0.000    0.000    0.000 _quad_vec.py:1(<module>)
       10    0.000    0.000    0.000    0.000 typing_extensions.py:567(_get_protocol_attrs)
        5    0.000    0.000    0.000    0.000 _basic.py:3009(_is_subdtype)
        1    0.000    0.000    0.000    0.000 coreerrors.py:1(<module>)
        3    0.000    0.000    0.000    0.000 symbolic_opset10.py:240(_avg_pool)
        1    0.000    0.000    0.000    0.000 iterables.py:781(topological_sort)
        1    0.000    0.000    0.000    0.000 _fftlog_backend.py:1(<module>)
        2    0.000    0.000    0.000    0.000 _compression.py:39(__init__)
        1    0.000    0.000    0.000    0.000 _infra.py:13(Level)
        2    0.000    0.000    0.000    0.000 init.py:1(<module>)
       15    0.000    0.000    0.000    0.000 copyreg.py:113(_slotnames)
        5    0.000    0.000    0.000    0.000 add.py:40(_addsort)
      507    0.000    0.000    0.000    0.000 boolalg.py:440(__bool__)
        2    0.000    0.000    0.000    0.000 log.py:1(<module>)
        1    0.000    0.000    0.000    0.000 conv.py:47(_ConvNd)
        3    0.000    0.000    0.000    0.000 __init__.py:882(__init__)
        1    0.000    0.000    0.000    0.000 selecting.py:19(FilterIterDataPipe)
        1    0.000    0.000    0.000    0.000 symbolic_opset16.py:1(<module>)
       95    0.000    0.000    0.000    0.000 permutations.py:1060(_hashable_content)
       26    0.000    0.000    0.000    0.000 pathlib.py:877(_make_child_relpath)
        1    0.000    0.000    0.000    0.000 conv.py:180(Conv1d)
      144    0.000    0.000    0.000    0.000 core.py:2025(__hash__)
        1    0.000    0.000    0.000    0.000 tokens.py:334(CommentToken)
        1    0.000    0.000    0.000    0.000 _qmc.py:1960(PoissonDisk)
        1    0.000    0.000    0.000    0.000 geometric.py:1(<module>)
        1    0.000    0.000    0.000    0.000 logging_handlers.py:1(<module>)
        2    0.000    0.000    0.000    0.000 __init__.py:653(get_arch_list)
        1    0.000    0.000    0.000    0.000 _bary_rational.py:1(<module>)
       46    0.000    0.000    0.000    0.000 getlimits.py:101(_float_conv)
        1    0.000    0.000    0.000    0.000 _qmc.py:1609(Sobol)
        1    0.000    0.000    0.000    0.000 lll.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _contextlib.py:1(<module>)
        1    0.000    0.000    0.000    0.000 package_exporter.py:53(_ModuleProviderAction)
        1    0.000    0.000    0.000    0.000 adagrad.py:1(<module>)
        1    0.000    0.000    0.000    0.000 gzip.py:456(__init__)
        1    0.000    0.000    0.000    0.000 _sf_error.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _factories.py:1(<module>)
       19    0.000    0.000    0.000    0.000 path.py:193(_update_values)
        1    0.000    0.000    0.000    0.000 conv.py:156(Conv2d)
        2    0.000    0.000    0.000    0.000 hypergeometric.py:1(<module>)
      252    0.000    0.000    0.000    0.000 rcsetup.py:58(func)
        1    0.000    0.000    0.000    0.000 graph.py:131(saved_tensors_hooks)
        1    0.000    0.000    0.000    0.000 numbers.py:594(Float)
       84    0.000    0.000    0.000    0.000 module.py:2113(<lambda>)
        1    0.000    0.000    0.000    0.000 fake_tensor.py:748(FakeTensor)
      643    0.000    0.000    0.000    0.000 {built-in method _sre.unicode_tolower}
        1    0.000    0.000    0.000    0.000 rmsprop.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _bvp.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pixelshuffle.py:1(<module>)
        1    0.000    0.000    0.000    0.000 transforms.py:543(PowerTransform)
        1    0.000    0.000    0.000    0.000 trace_dependencies.py:1(<module>)
       16    0.000    0.000    0.000    0.000 arraypad.py:129(_set_pad_area)
        1    0.000    0.000    0.000    0.000 storage.py:318(TypedStorage)
        1    0.000    0.000    0.000    0.000 glsl.py:1(<module>)
        7    0.000    0.000    0.000    0.000 decoder.py:284(__init__)
        1    0.000    0.000    0.000    0.000 umath.py:1(<module>)
        1    0.000    0.000    0.000    0.000 von_mises.py:70(VonMises)
        1    0.000    0.000    0.000    0.000 adamax.py:1(<module>)
        2    0.000    0.000    0.000    0.000 getlimits.py:307(_get_machar)
       15    0.000    0.000    0.000    0.000 arrayprint.py:989(<genexpr>)
        8    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:422(spec_from_loader)
        1    0.000    0.000    0.000    0.000 cauchy.py:1(<module>)
        2    0.000    0.000    0.000    0.000 polyclasses.py:146(__new__)
      130    0.000    0.000    0.000    0.000 unicode.py:105(<genexpr>)
        1    0.000    0.000    0.000    0.000 quiver.py:195(QuiverKey)
        1    0.000    0.000    0.000    0.000 autocast_mode.py:18(autocast)
        1    0.000    0.000    0.000    0.000 quadrature.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:1122(ELEMENTWISE_TYPE_PROMOTION_KIND)
        1    0.000    0.000    0.000    0.000 qconfig_mapping.py:1(<module>)
        1    0.000    0.000    0.000    0.000 radam.py:1(<module>)
       28    0.000    0.000    0.000    0.000 <frozen posixpath>:388(normpath)
        1    0.000    0.000    0.000    0.000 symbol.py:212(Symbol)
        1    0.000    0.000    0.000    0.000 extensions.py:1(<module>)
        1    0.000    0.000    0.000    0.000 miscellaneous.py:35(IdentityFunction)
        1    0.000    0.000    0.000    0.000 modularinteger.py:1(<module>)
        1    0.000    0.000    0.000    0.000 asgd.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _rules.py:22(_NodeMissingOnnxShapeInference)
        1    0.000    0.000    0.000    0.000 protocols.py:1(<module>)
        1    0.000    0.000    0.000    0.000 memmap.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _python_dispatch.py:1(<module>)
        1    0.000    0.000    0.000    0.000 arraypad.py:1(<module>)
        4    0.000    0.000    0.000    0.000 typing.py:1520(__init__)
        1    0.000    0.000    0.000    0.000 julia.py:1(<module>)
        1    0.000    0.000    0.000    0.000 scale.py:560(LogitScale)
       10    0.000    0.000    0.000    0.000 _torch_docs.py:24(<dictcomp>)
        1    0.000    0.000    0.000    0.000 graph.py:267(_PyTreeInfo)
       50    0.000    0.000    0.000    0.000 sets.py:125(_infimum_key)
      362    0.000    0.000    0.000    0.000 inspect.py:3028(return_annotation)
      110    0.000    0.000    0.000    0.000 {method 'translate' of 'bytearray' objects}
        1    0.000    0.000    0.000    0.000 combining.py:313(DemultiplexerIterDataPipe)
        1    0.000    0.000    0.000    0.000 conv.py:316(Conv2d)
      109    0.000    0.000    0.000    0.000 inspect.py:505(isbuiltin)
        3    0.000    0.000    0.000    0.000 patches.py:1878(<listcomp>)
       16    0.000    0.000    0.000    0.000 _type_aliases.py:44(_bits_of)
        1    0.000    0.000    0.000    0.000 nadam.py:1(<module>)
        1    0.000    0.000    0.000    0.000 graph.py:275(CodeGen)
        1    0.000    0.000    0.000    0.000 _tensor_str.py:1(<module>)
        1    0.000    0.000    0.000    0.000 powsimp.py:1(<module>)
        1    0.000    0.000    0.000    0.000 simplex.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:447(_get_xdg_cache_dir)
        1    0.000    0.000    0.000    0.000 ExifTags.py:341(<dictcomp>)
       26    0.000    0.000    0.000    0.000 _util.py:188(_transition_to_rng)
        5    0.000    0.000    0.000    0.000 version.py:70(__lt__)
      215    0.000    0.000    0.000    0.000 symbolic_helper.py:234(parse_args)
        1    0.000    0.000    0.000    0.000 _fortran.py:1(<module>)
        7    0.000    0.000    0.000    0.000 symbolic_opset11.py:345(_interpolate)
        1    0.000    0.000    0.000    0.000 power.py:22(Pow)
      231    0.000    0.000    0.000    0.000 periodic_table.py:237(__hash__)
       13    0.000    0.000    0.000    0.000 enum.py:1347(_iter_member_by_def_)
    18/17    0.000    0.000    0.000    0.000 typing.py:1480(<listcomp>)
        3    0.000    0.000    0.000    0.000 core.py:4241(__init__)
        1    0.000    0.000    0.000    0.000 _globals.py:65(_CopyMode)
        1    0.000    0.000    0.000    0.000 _spherical_bessel.py:1(<module>)
        9    0.000    0.000    0.000    0.000 api.py:74(_require_initialized)
        1    0.000    0.000    0.000    0.000 _mmio.py:1(<module>)
       30    0.000    0.000    0.000    0.000 core.py:4465(<genexpr>)
        1    0.000    0.000    0.000    0.000 ast.py:54(literal_eval)
       28    0.000    0.000    0.000    0.000 {method 'remove' of 'list' objects}
        3    0.000    0.000    0.000    0.000 monkey.py:44(get_unpatched)
        1    0.000    0.000    0.000    0.000 gamma.py:1(<module>)
        1    0.000    0.000    0.000    0.000 gridspec.py:602(SubplotSpec)
        4    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:772(create_module)
        1    0.000    0.000    0.000    0.000 weak.py:79(WeakIdKeyDictionary)
        1    0.000    0.000    0.000    0.000 meta_utils.py:70(MetaConverter)
        8    0.000    0.000    0.000    0.000 _ops.py:603(__getattr__)
        1    0.000    0.000    0.000    0.000 _path.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _dtype_like.py:65(_DTypeDictBase)
        1    0.000    0.000    0.000    0.000 _pytree.py:114(TreeSpec)
        1    0.000    0.000    0.000    0.000 report.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:491(_parse_visible_devices)
       12    0.000    0.000    0.000    0.000 __init__.py:1893(get_aliased_and_aliases)
        1    0.000    0.000    0.000    0.000 compositedomain.py:1(<module>)
        6    0.000    0.000    0.000    0.000 {method 'any' of 'numpy.ndarray' objects}
       10    0.000    0.000    0.000    0.000 basic.py:135(_get_postprocessors)
        1    0.000    0.000    0.000    0.000 backend_tools.py:31(Cursors)
        1    0.000    0.000    0.000    0.000 _layoutbox.py:1(<module>)
        2    0.000    0.000    0.000    0.000 sysconfig.py:118(joinuser)
      423    0.000    0.000    0.000    0.000 typing.py:2216(cast)
        1    0.000    0.000    0.000    0.000 collections.py:1306(LineCollection)
        1    0.000    0.000    0.000    0.000 matplotlib.py:1(<module>)
        1    0.000    0.000    0.000    0.000 registration.py:123(_SymbolicFunctionGroup)
        1    0.000    0.000    0.000    0.000 recipes.py:1(<module>)
        1    0.000    0.000    0.000    0.000 scale.py:515(LogitTransform)
        6    0.000    0.000    0.000    0.000 libmpf.py:410(from_float)
        1    0.000    0.000    0.000    0.000 latex.py:142(LatexPrinter)
       99    0.000    0.000    0.000    0.000 traceback.py:325(walk_stack)
        1    0.000    0.000    0.000    0.000 factortools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 conv.py:214(Conv3d)
       10    0.000    0.000    0.000    0.000 getlimits.py:685(__init__)
        1    0.000    0.000    0.000    0.000 registration.py:64(OverrideDict)
        2    0.000    0.000    0.000    0.000 traversal.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _ellip_harm.py:1(<module>)
       85    0.000    0.000    0.000    0.000 typing.py:891(__hash__)
      391    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}
        1    0.000    0.000    0.000    0.000 _fitpack_repro.py:1(<module>)
        1    0.000    0.000    0.000    0.000 independent.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:863(__str__)
        1    0.000    0.000    0.000    0.000 _ndbspline.py:1(<module>)
        2    0.000    0.000    0.000    0.000 cache.py:168(lazy_function)
        1    0.000    0.000    0.000    0.000 half_cauchy.py:1(<module>)
        1    0.000    0.000    0.000    0.000 numbers.py:2986(Infinity)
        1    0.000    0.000    0.000    0.000 _idl.py:1(<module>)
        1    0.000    0.000    0.000    0.000 studentT.py:1(<module>)
        1    0.000    0.000    0.000    0.000 requirements.py:1(<module>)
        7    0.000    0.000    0.000    0.000 memoization.py:27(decorator)
        1    0.000    0.000    0.000    0.000 libmpi.py:1(<module>)
        1    0.000    0.000    0.000    0.000 structure.py:213(SiteCollection)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3145(_moment_raw)
        7    0.000    0.000    0.000    0.000 <frozen posixpath>:396(abspath)
        1    0.000    0.000    0.000    0.000 rprop.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _comparison.py:607(TensorLikePair)
        1    0.000    0.000    0.000    0.000 fishersnedecor.py:1(<module>)
       11    0.000    0.000    0.000    0.000 __init__.py:12(NewCls)
        2    0.000    0.000    0.000    0.000 stubs.py:1(<module>)
       14    0.000    0.000    0.000    0.000 numerictypes.py:357(issubdtype)
        1    0.000    0.000    0.000    0.000 _bws_test.py:1(<module>)
        1    0.000    0.000    0.000    0.000 profiler_legacy.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ImageColor.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _web_request.py:15(WebRequest)
        1    0.000    0.000    0.000    0.000 cache.py:1(<module>)
       30    0.000    0.000    0.000    0.000 _array_api.py:531(<listcomp>)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2494(pmf)
        1    0.000    0.000    0.000    0.000 numbers.py:4474(_register_classes)
        1    0.000    0.000    0.000    0.000 patches.py:1551(Arc)
        1    0.000    0.000    0.000    0.000 quoprimime.py:55(<listcomp>)
        1    0.000    0.000    0.000    0.000 numbers.py:3176(NegativeInfinity)
        1    0.000    0.000    0.000    0.000 matrices.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:298(OpTree)
        1    0.000    0.000    0.000    0.000 rcode.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _exporter_states.py:43(RuntimeTypeCheckState)
       42    0.000    0.000    0.000    0.000 docstring.py:43(update)
       24    0.000    0.000    0.000    0.000 proxy.py:514(_scope)
       38    0.000    0.000    0.000    0.000 constructor.py:321(add_constructor)
        1    0.000    0.000    0.000    0.000 ufunclike.py:1(<module>)
        1    0.000    0.000    0.000    0.000 polynomial.py:1472(Polynomial)
        2    0.000    0.000    0.000    0.000 domainmatrix.py:138(__new__)
        1    0.000    0.000    0.000    0.000 kumaraswamy.py:1(<module>)
        1    0.000    0.000    0.000    0.000 expressionrawdomain.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dist.py:77(Distribution)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:47(Action)
        1    0.000    0.000    0.000    0.000 _polyint.py:108(_reshape_yi)
        1    0.000    0.000    0.000    0.000 ideals.py:1(<module>)
        1    0.000    0.000    0.000    0.000 rings.py:586(PolyElement)
        1    0.000    0.000    0.000    0.000 ExifTags.py:352(IFD)
       93    0.000    0.000    0.000    0.000 sites.py:138(species)
        1    0.000    0.000    0.000    0.000 trigonometric.py:2029(InverseTrigonometricFunction)
       87    0.000    0.000    0.000    0.000 kl.py:41(register_kl)
        1    0.000    0.000    0.000    0.000 geo.py:252(AitoffAxes)
        1    0.000    0.000    0.000    0.000 sslproto.py:19(SSLProtocolState)
        1    0.000    0.000    0.000    0.000 readers.py:16(__init__)
        8    0.000    0.000    0.000    0.000 _aliases.py:89(asarray)
      191    0.000    0.000    0.000    0.000 <frozen abc>:7(abstractmethod)
        1    0.000    0.000    0.000    0.000 pareto.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:1103(enable_packrat)
        2    0.000    0.000    0.000    0.000 lsoda.py:1(<module>)
        1    0.000    0.000    0.000    0.000 polyconfig.py:52(configure)
        1    0.000    0.000    0.000    0.000 parametrizations.py:33(_OrthMaps)
        1    0.000    0.000    0.000    0.000 _web_response.py:15(WebResponse)
        7    0.000    0.000    0.000    0.000 _parser.py:309(_convert)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:4590(ShiftedScaledDistribution)
        3    0.000    0.000    0.000    0.000 feedparser.py:139(__init__)
        1    0.000    0.000    0.000    0.000 _result.py:28(Result)
        6    0.000    0.000    0.000    0.000 ctx_mp_python.py:47(__new__)
        7    0.000    0.000    0.000    0.000 symbolic_helper.py:1064(_interpolate_helper)
        4    0.000    0.000    0.000    0.000 fromnumeric.py:2692(max)
        1    0.000    0.000    0.000    0.000 design_patterns.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _kdtree.py:206(KDTree)
       62    0.000    0.000    0.000    0.000 unary.py:149(_torch_unary)
        1    0.000    0.000    0.000    0.000 Image.py:158(Resampling)
       12    0.000    0.000    0.000    0.000 misc.py:304(func_name)
        1    0.000    0.000    0.000    0.000 scale.py:431(SymmetricalLogScale)
        1    0.000    0.000    0.000    0.000 normal.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pretty.py:30(PrettyPrinter)
        1    0.000    0.000    0.000    0.000 _policybase.py:99(_extend_docstrings)
        1    0.000    0.000    0.000    0.000 timeouts.py:18(_State)
        1    0.000    0.000    0.000    0.000 transforms.py:2038(IdentityTransform)
       13    0.000    0.000    0.000    0.000 {method 'random' of 'numpy.random._generator.Generator' objects}
       30    0.000    0.000    0.000    0.000 warnings.py:487(__exit__)
        4    0.000    0.000    0.000    0.000 platform.py:915(system)
        7    0.000    0.000    0.000    0.000 core.py:3633(__init__)
        1    0.000    0.000    0.000    0.000 _comparison.py:430(BooleanPair)
        1    0.000    0.000    0.000    0.000 observer.py:888(HistogramObserver)
        1    0.000    0.000    0.000    0.000 _core_metadata.py:1(<module>)
        3    0.000    0.000    0.000    0.000 numbers.py:1306(__new__)
        8    0.000    0.000    0.000    0.000 core.py:1031(deprecation_wrapper)
        1    0.000    0.000    0.000    0.000 proxy_tensor.py:516(ProxySymDispatchMode)
        1    0.000    0.000    0.000    0.000 primes.py:1(<module>)
        1    0.000    0.000    0.000    0.000 padding.py:82(ConstantPad2d)
        1    0.000    0.000    0.000    0.000 poisson.py:1(<module>)
      124    0.000    0.000    0.000    0.000 functions.py:85(defun)
       62    0.000    0.000    0.000    0.000 __init__.py:202(_checkLevel)
        1    0.000    0.000    0.000    0.000 _run.py:30(Run)
        1    0.000    0.000    0.000    0.000 docstring.py:6(Substitution)
        1    0.000    0.000    0.000    0.000 internal.py:23(RPCExecMode)
        1    0.000    0.000    0.000    0.000 ExifTags.py:344(Interop)
        1    0.000    0.000    0.000    0.000 rendezvous.py:1(<module>)
        1    0.000    0.000    0.000    0.000 symbolic_opset17.py:1(<module>)
       61    0.000    0.000    0.000    0.000 _inspect.py:144(<lambda>)
        1    0.000    0.000    0.000    0.000 domainmatrix.py:506(convert_to)
        1    0.000    0.000    0.000    0.000 recurr.py:1(<module>)
       43    0.000    0.000    0.000    0.000 pathlib.py:515(_from_parsed_parts)
        1    0.000    0.000    0.000    0.000 const_fold.py:11(FoldedGraphModule)
        2    0.000    0.000    0.000    0.000 __init__.py:386(__getattr__)
      169    0.000    0.000    0.000    0.000 contextlib.py:431(__exit__)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:3841(Format)
        1    0.000    0.000    0.000    0.000 weibull.py:1(<module>)
        1    0.000    0.000    0.000    0.000 throughput_benchmark.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fractionfield.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _ir_utils.py:4(_InsertPoint)
        1    0.000    0.000    0.000    0.000 jiterator.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:172(SDPBackend)
      141    0.000    0.000    0.000    0.000 __init__.py:259(__iter__)
        5    0.000    0.000    0.000    0.000 version.py:334(_cmp)
        1    0.000    0.000    0.000    0.000 __init__.py:354(<listcomp>)
        1    0.000    0.000    0.000    0.000 math2.py:1(<module>)
        4    0.000    0.000    0.000    0.000 __init__.py:511(cast)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:387(_WorldMeta)
        3    0.000    0.000    0.000    0.000 core.py:1667(__invert__)
        1    0.000    0.000    0.000    0.000 _classes.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _monitor.py:1(<module>)
        1    0.000    0.000    0.000    0.000 reductions.py:379(init_reductions)
       25    0.000    0.000    0.000    0.000 pretty_symbology.py:133(<genexpr>)
        1    0.000    0.000    0.000    0.000 plane.py:27(<listcomp>)
        1    0.000    0.000    0.000    0.000 docinfo.py:1(<module>)
        1    0.000    0.000    0.000    0.000 polygon.py:25(<listcomp>)
        1    0.000    0.000    0.000    0.000 core.py:39(OrbitalType)
        1    0.000    0.000    0.000    0.000 sets.py:47(Set)
       57    0.000    0.000    0.000    0.000 {method 'reshape' of 'numpy.ndarray' objects}
        3    0.000    0.000    0.000    0.000 TiffTags.py:450(<dictcomp>)
       11    0.000    0.000    0.000    0.000 __init__.py:1734(isEnabledFor)
        1    0.000    0.000    0.000    0.000 _mio5.py:149(MatFile5Reader)
        1    0.000    0.000    0.000    0.000 facts.py:411(__init__)
        1    0.000    0.000    0.000    0.000 core.py:3127(view)
        3    0.000    0.000    0.000    0.000 functools.py:651(cache)
        2    0.000    0.000    0.000    0.000 immutable_collections.py:18(_create_immutable_container)
        1    0.000    0.000    0.000    0.000 core.py:23(Spin)
       83    0.000    0.000    0.000    0.000 traceback.py:264(__init__)
        1    0.000    0.000    0.000    0.000 matcher_utils.py:50(SubgraphMatcher)
        1    0.000    0.000    0.000    0.000 constants.py:31(_SendfileMode)
        1    0.000    0.000    0.000    0.000 inference.py:1(<module>)
       58    0.000    0.000    0.000    0.000 unary.py:158(_torch_inplace_unary)
        1    0.000    0.000    0.000    0.000 lkj_cholesky.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sdm.py:25(SDM)
        1    0.000    0.000    0.000    0.000 _trustregion_exact.py:1(<module>)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1366(MouseButton)
       29    0.000    0.000    0.000    0.000 constraint_registry.py:106(<lambda>)
        1    0.000    0.000    0.000    0.000 linalg.py:97(_determine_error_states)
        6    0.000    0.000    0.000    0.000 stride_tricks.py:433(broadcast_shapes)
      127    0.000    0.000    0.000    0.000 ssl.py:135(<lambda>)
        1    0.000    0.000    0.000    0.000 registration.py:202(SymbolicRegistry)
       48    0.000    0.000    0.000    0.000 lapack.py:908(backtickrepl)
        1    0.000    0.000    0.000    0.000 table.py:30(Cell)
        1    0.000    0.000    0.000    0.000 taskgroups.py:1(<module>)
       91    0.000    0.000    0.000    0.000 dataclasses.py:604(<genexpr>)
        3    0.000    0.000    0.000    0.000 rcsetup.py:701(_validate_hinting)
        1    0.000    0.000    0.000    0.000 _threadsafety.py:1(<module>)
        1    0.000    0.000    0.000    0.000 rrule.py:1307(rruleset)
        1    0.000    0.000    0.000    0.000 _common.py:47(get_package)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:865(<listcomp>)
        3    0.000    0.000    0.000    0.000 misc.py:1(<module>)
        1    0.000    0.000    0.000    0.000 c10d_error_logger.py:17(_get_or_create_logger)
        1    0.000    0.000    0.000    0.000 profiler.py:230(ProfilerAction)
        1    0.000    0.000    0.000    0.000 _tool_component.py:19(ToolComponent)
      162    0.000    0.000    0.000    0.000 _compatibility.py:7(compatibility)
       93    0.000    0.000    0.000    0.000 exceptions.py:49(__init__)
        1    0.000    0.000    0.000    0.000 backend_bases.py:2772(_Mode)
        1    0.000    0.000    0.000    0.000 quant_type.py:9(QuantType)
        1    0.000    0.000    0.000    0.000 jscode.py:1(<module>)
        1    0.000    0.000    0.000    0.000 scale.py:541(LogisticTransform)
        1    0.000    0.000    0.000    0.000 _czt.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _signal_api.py:30(<listcomp>)
      127    0.000    0.000    0.000    0.000 ssl.py:125(<lambda>)
        1    0.000    0.000    0.000    0.000 <frozen _collections_abc>:835(__iter__)
       15    0.000    0.000    0.000    0.000 weakref.py:495(popitem)
        1    0.000    0.000    0.000    0.000 _stats.py:1(<module>)
        1    0.000    0.000    0.000    0.000 mock.py:44(<setcomp>)
       55    0.000    0.000    0.000    0.000 numbers.py:546(__hash__)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:888(Symbol)
        1    0.000    0.000    0.000    0.000 symbolic_opset18.py:1(<module>)
       71    0.000    0.000    0.000    0.000 {method 'translate' of 'str' objects}
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:393(norm_gen)
        1    0.000    0.000    0.000    0.000 variable.py:1(<module>)
        1    0.000    0.000    0.000    0.000 getlimits.py:612(tiny)
        4    0.000    0.000    0.000    0.000 {built-in method _imp.create_builtin}
       38    0.000    0.000    0.000    0.000 observer.py:77(_with_args)
        1    0.000    0.000    0.000    0.000 anomaly_mode.py:1(<module>)
        1    0.000    0.000    0.000    0.000 trifinder.py:1(<module>)
        2    0.000    0.000    0.000    0.000 dispatcher.py:46(ambiguity_register_error_ignore_dup)
        2    0.000    0.000    0.000    0.000 densebasic.py:343(dmp_validate)
       16    0.000    0.000    0.000    0.000 __init__.py:62(_process_keys)
       14    0.000    0.000    0.000    0.000 rcsetup.py:623(validate_capstyle)
       28    0.000    0.000    0.000    0.000 typing_extensions.py:495(__setattr__)
        1    0.000    0.000    0.000    0.000 _elffile.py:33(EMachine)
       36    0.000    0.000    0.000    0.000 constraints.py:170(__init__)
        1    0.000    0.000    0.000    0.000 log_normal.py:1(<module>)
       38    0.000    0.000    0.000    0.000 getlimits.py:16(_fr0)
        3    0.000    0.000    0.000    0.000 __init__.py:36(__deprecate_private_class)
        6    0.000    0.000    0.000    0.000 fromnumeric.py:2322(any)
        1    0.000    0.000    0.000    0.000 _string_helpers.py:1(<module>)
       87    0.000    0.000    0.000    0.000 kl.py:72(decorator)
        1    0.000    0.000    0.000    0.000 _cm_listed.py:2061(<dictcomp>)
        1    0.000    0.000    0.000    0.000 dates.py:589(DateFormatter)
        3    0.000    0.000    0.000    0.000 core.py:5079(__init__)
        1    0.000    0.000    0.000    0.000 gmpyintegerring.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:604(CategoryDict)
        1    0.000    0.000    0.000    0.000 _polybase.py:18(ABCPolyBase)
      120    0.000    0.000    0.000    0.000 _multiufuncs.py:43(<genexpr>)
        1    0.000    0.000    0.000    0.000 Image.py:149(Transform)
       52    0.000    0.000    0.000    0.000 _add_newdocs.py:6754(refer_to_array_attribute)
       14    0.000    0.000    0.000    0.000 <frozen posixpath>:140(basename)
        7    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:464(__str__)
        1    0.000    0.000    0.000    0.000 _genz_malik.py:1(<module>)
        1    0.000    0.000    0.000    0.000 widgets.py:672(TextBox)
        1    0.000    0.000    0.000    0.000 padding.py:133(ConstantPad3d)
        1    0.000    0.000    0.000    0.000 evalf.py:1395(_create_evalf_table)
        1    0.000    0.000    0.000    0.000 geo.py:416(LambertAxes)
       15    0.000    0.000    0.000    0.000 arrayprint.py:984(<genexpr>)
        6    0.000    0.000    0.000    0.000 symbolic_opset9.py:1730(_adaptive_pool)
       23    0.000    0.000    0.000    0.000 qconfig.py:98(__new__)
       42    0.000    0.000    0.000    0.000 typing.py:1803(<genexpr>)
        1    0.000    0.000    0.000    0.000 sslproto.py:27(AppProtocolState)
        1    0.000    0.000    0.000    0.000 _version.py:20(get_versions)
        7    0.000    0.000    0.000    0.000 _legacy.py:15(deprecated)
      127    0.000    0.000    0.000    0.000 ssl.py:130(<lambda>)
        6    0.000    0.000    0.000    0.000 gaussiandomains.py:23(__new__)
        4    0.000    0.000    0.000    0.000 getlimits.py:62(smallest_subnormal)
        3    0.000    0.000    0.000    0.000 monkey.py:54(get_unpatched_class)
        1    0.000    0.000    0.000    0.000 combining.py:362(_DemultiplexerIterDataPipe)
       47    0.000    0.000    0.000    0.000 core.py:2501(parseImpl)
       14    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3153(_moment_raw_dispatch)
        1    0.000    0.000    0.000    0.000 pythonintegerring.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _invocation.py:17(Invocation)
       13    0.000    0.000    0.000    0.000 mixins.py:44(_numeric_methods)
       47    0.000    0.000    0.000    0.000 enum.py:1128(_generate_next_value_)
        1    0.000    0.000    0.000    0.000 plotgrid.py:1(<module>)
       63    0.000    0.000    0.000    0.000 _axis_nan_policy.py:659(<listcomp>)
        1    0.000    0.000    0.000    0.000 compatibility.py:240(IPolys)
        3    0.000    0.000    0.000    0.000 core.py:2488(__init__)
        3    0.000    0.000    0.000    0.000 symbolic_opset11.py:577(_avg_pool)
       92    0.000    0.000    0.000    0.000 {built-in method math.log}
        1    0.000    0.000    0.000    0.000 _translation_metadata.py:15(TranslationMetadata)
      377    0.000    0.000    0.000    0.000 enum.py:1221(name)
        1    0.000    0.000    0.000    0.000 fancysets.py:1440(PolarComplexRegion)
        1    0.000    0.000    0.000    0.000 pg_operation.py:1(<module>)
       20    0.000    0.000    0.000    0.000 <frozen io>:60(__getattr__)
       12    0.000    0.000    0.000    0.000 weakref.py:289(update)
        2    0.000    0.000    0.000    0.000 getlimits.py:86(_str_smallest_subnormal)
        1    0.000    0.000    0.000    0.000 rings.py:196(PolyRing)
        1    0.000    0.000    0.000    0.000 _hook_iterator.py:8(_SnapshotState)
        1    0.000    0.000    0.000    0.000 _mio5.py:817(MatFile5Writer)
        1    0.000    0.000    0.000    0.000 locks.py:439(_BarrierState)
        6    0.000    0.000    0.000    0.000 bessel.py:893(assume_integer_order)
      253    0.000    0.000    0.000    0.000 {method 'items' of 'collections.OrderedDict' objects}
        5    0.000    0.000    0.000    0.000 misc.py:181(debug_decorator)
        1    0.000    0.000    0.000    0.000 _rbf.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dop853_coefficients.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:231(<listcomp>)
       12    0.000    0.000    0.000    0.000 {built-in method numpy.zeros}
        1    0.000    0.000    0.000    0.000 GimpGradientFile.py:1(<module>)
        1    0.000    0.000    0.000    0.000 combining.py:562(ZipperIterDataPipe)
        1    0.000    0.000    0.000    0.000 profiler.py:820(KinetoStepTracker)
        1    0.000    0.000    0.000    0.000 importtools.py:14(__sympy_debug)
        1    0.000    0.000    0.000    0.000 core.py:2510(Keyword)
        2    0.000    0.000    0.000    0.000 realfield.py:121(dtype)
        4    0.000    0.000    0.000    0.000 ctx_base.py:52(_init_aliases)
        9    0.000    0.000    0.000    0.000 typing.py:1639(__repr__)
       12    0.000    0.000    0.000    0.000 arrayprint.py:753(_extendLine_pretty)
        1    0.000    0.000    0.000    0.000 ctx_fp.py:12(FPContext)
    54/46    0.000    0.000    0.000    0.000 fake_tensor.py:94(<genexpr>)
       90    0.000    0.000    0.000    0.000 basic.py:938(_sorted_args)
        6    0.000    0.000    0.000    0.000 <frozen posixpath>:117(splitext)
        1    0.000    0.000    0.000    0.000 geo.py:346(MollweideAxes)
        1    0.000    0.000    0.000    0.000 order.py:11(Order)
        6    0.000    0.000    0.000    0.000 symbolic_opset9.py:3376(_unsupported_dropout)
        1    0.000    0.000    0.000    0.000 channelshuffle.py:1(<module>)
        3    0.000    0.000    0.000    0.000 <frozen os>:681(__setitem__)
       13    0.000    0.000    0.000    0.000 fromnumeric.py:200(reshape)
       14    0.000    0.000    0.000    0.000 __init__.py:144(_check_size)
        3    0.000    0.000    0.000    0.000 symbolic_opset9.py:4792(_one_hidden_rnn)
       26    0.000    0.000    0.000    0.000 basic.py:88(_cmp_name)
        1    0.000    0.000    0.000    0.000 sqrtdenest.py:1(<module>)
        5    0.000    0.000    0.000    0.000 decorator.py:127(update)
        1    0.000    0.000    0.000    0.000 gmpyrationalfield.py:1(<module>)
        1    0.000    0.000    0.000    0.000 operations.py:29(AssocOp)
        1    0.000    0.000    0.000    0.000 quiver.py:442(Quiver)
      127    0.000    0.000    0.000    0.000 ssl.py:140(<lambda>)
        5    0.000    0.000    0.000    0.000 inverselaplace.py:668(__init__)
        1    0.000    0.000    0.000    0.000 _lazy.py:1(<module>)
      104    0.000    0.000    0.000    0.000 inspect.py:456(istraceback)
      105    0.000    0.000    0.000    0.000 textwrap.py:479(predicate)
       10    0.000    0.000    0.000    0.000 __init__.py:216(_logged_cached)
        1    0.000    0.000    0.000    0.000 spectrum.py:1(<module>)
        1    0.000    0.000    0.000    0.000 settings.py:1(<module>)
      116    0.000    0.000    0.000    0.000 typing.py:1812(<genexpr>)
        2    0.000    0.000    0.000    0.000 blas.py:388(_memoize_get_funcs)
      127    0.000    0.000    0.000    0.000 ssl.py:145(<lambda>)
        1    0.000    0.000    0.000    0.000 patches.py:1242(FancyArrow)
        3    0.000    0.000    0.000    0.000 numbers.py:1374(_new)
      127    0.000    0.000    0.000    0.000 ssl.py:150(<lambda>)
        1    0.000    0.000    0.000    0.000 _support_alternative_backends.py:16(_FuncInfo)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:225(BackendConfig)
      100    0.000    0.000    0.000    0.000 perm_groups.py:136(<genexpr>)
       36    0.000    0.000    0.000    0.000 deprecation.py:192(_deprecated_property)
        1    0.000    0.000    0.000    0.000 _pylab_helpers.py:1(<module>)
       58    0.000    0.000    0.000    0.000 constraint_registry.py:87(register)
        1    0.000    0.000    0.000    0.000 _morphology.py:1(<module>)
        2    0.000    0.000    0.000    0.000 contextlib.py:77(__call__)
        1    0.000    0.000    0.000    0.000 __init__.py:42(__sympy_debug)
        1    0.000    0.000    0.000    0.000 combining.py:23(ConcaterIterDataPipe)
        1    0.000    0.000    0.000    0.000 text.py:104(Text)
        1    0.000    0.000    0.000    0.000 _tzpath.py:5(reset_tzpath)
        1    0.000    0.000    0.000    0.000 enumerative.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fetch.py:1(<module>)
        8    0.000    0.000    0.000    0.000 resolver.py:131(add_implicit_resolver_base)
        1    0.000    0.000    0.000    0.000 profiler.py:446(record_function)
        1    0.000    0.000    0.000    0.000 _odds_ratio.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:456(<listcomp>)
        1    0.000    0.000    0.000    0.000 reinplace.py:16(_ViewType)
        1    0.000    0.000    0.000    0.000 _utils.py:46(EventKey)
        1    0.000    0.000    0.000    0.000 grad_scaler.py:35(OptState)
      112    0.000    0.000    0.000    0.000 patches.py:1885(<genexpr>)
        1    0.000    0.000    0.000    0.000 contour.py:670(ContourSet)
        1    0.000    0.000    0.000    0.000 core.py:5454(__init__)
        6    0.000    0.000    0.000    0.000 symbolic_opset10.py:262(_interpolate)
        1    0.000    0.000    0.000    0.000 numeric.py:2123(identity)
        1    0.000    0.000    0.000    0.000 __init__.py:1131(REDUCTION_OUTPUT_TYPE_KIND)
       89    0.000    0.000    0.000    0.000 operations.py:73(<genexpr>)
       12    0.000    0.000    0.000    0.000 arrayprint.py:1018(__call__)
        1    0.000    0.000    0.000    0.000 bdist.py:48(bdist)
        3    0.000    0.000    0.000    0.000 __init__.py:576(__init__)
        1    0.000    0.000    0.000    0.000 getlimits.py:589(smallest_normal)
       95    0.000    0.000    0.000    0.000 iterables.py:2000(check)
       47    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:1103(_sanity_check)
        1    0.000    0.000    0.000    0.000 bivariate.py:1(<module>)
        1    0.000    0.000    0.000    0.000 subgraph_rewriter.py:21(ReplacedPatterns)
        1    0.000    0.000    0.000    0.000 __init__.py:264(_reset_cache)
        1    0.000    0.000    0.000    0.000 Image.py:177(Dither)
       13    0.000    0.000    0.000    0.000 weakref.py:367(__init__)
        1    0.000    0.000    0.000    0.000 groups.py:317(<dictcomp>)
        1    0.000    0.000    0.000    0.000 qs.py:1(<module>)
       15    0.000    0.000    0.000    0.000 _jit_internal.py:465(boolean_dispatch)
      104    0.000    0.000    0.000    0.000 inspect.py:466(isframe)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:11012(vonmises_gen)
        1    0.000    0.000    0.000    0.000 _spectral.py:1(<module>)
        1    0.000    0.000    0.000    0.000 {built-in method torch._C._init_names}
        1    0.000    0.000    0.000    0.000 _polyint.py:53(__init__)
        1    0.000    0.000    0.000    0.000 transforms.py:1746(Affine2DBase)
        1    0.000    0.000    0.000    0.000 ctx_mp_python.py:512(__div__)
        1    0.000    0.000    0.000    0.000 core.py:6568(__array_finalize__)
        1    0.000    0.000    0.000    0.000 _mio4.py:316(MatFile4Reader)
        1    0.000    0.000    0.000    0.000 __init__.py:319(ELEMENTWISE_PRIM_TYPE_PROMOTION_KIND)
        5    0.000    0.000    0.000    0.000 transforms.py:242(make_wrapper)
        1    0.000    0.000    0.000    0.000 Image.py:190(Quantize)
       23    0.000    0.000    0.000    0.000 pkgutil.py:407(get_importer)
      124    0.000    0.000    0.000    0.000 {method 'index' of 'list' objects}
        2    0.000    0.000    0.000    0.000 __init__.py:1460(setLevel)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1744(_broadcast)
        1    0.000    0.000    0.000    0.000 pycode.py:79(AbstractPythonCodePrinter)
        1    0.000    0.000    0.000    0.000 geo.py:301(HammerAxes)
        1    0.000    0.000    0.000    0.000 _binomtest.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sampler.py:160(WeightedRandomSampler)
        1    0.000    0.000    0.000    0.000 common.py:286(StreamWrapper)
        1    0.000    0.000    0.000    0.000 _location.py:19(Location)
        3    0.000    0.000    0.000    0.000 coroutines.py:21(iscoroutinefunction)
        2    0.000    0.000    0.000    0.000 conflict.py:34(super_signature)
        1    0.000    0.000    0.000    0.000 library.py:1(<module>)
        1    0.000    0.000    0.000    0.000 {built-in method torch._C._multiprocessing_init}
       49    0.000    0.000    0.000    0.000 results.py:215(__getitem__)
        1    0.000    0.000    0.000    0.000 sparse_adam.py:7(SparseAdam)
        1    0.000    0.000    0.000    0.000 _type_aliases.py:211(_set_array_types)
        1    0.000    0.000    0.000    0.000 <string>:2(__div__)
        1    0.000    0.000    0.000    0.000 rnn.py:382(LSTM)
        2    0.000    0.000    0.000    0.000 rationaltools.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2327(median)
        1    0.000    0.000    0.000    0.000 lbfgs.py:184(LBFGS)
        1    0.000    0.000    0.000    0.000 _backend.py:51(set_global_backend)
        1    0.000    0.000    0.000    0.000 distributed.py:148(_BufferCommHookLocation)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:601(__str__)
       93    0.000    0.000    0.000    0.000 composition.py:207(items)
        1    0.000    0.000    0.000    0.000 combinatorics.py:54(ShufflerIterDataPipe)
        1    0.000    0.000    0.000    0.000 arrayop.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:270(Uniform)
        1    0.000    0.000    0.000    0.000 base_events.py:387(BaseEventLoop)
       49    0.000    0.000    0.000    0.000 core.py:2472(_generateDefaultName)
       15    0.000    0.000    0.000    0.000 rcsetup.py:84(_listify_validator)
        1    0.000    0.000    0.000    0.000 patches.py:698(Rectangle)
        1    0.000    0.000    0.000    0.000 runners.py:15(_State)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:5382(MonotonicTransformedDistribution)
        1    0.000    0.000    0.000    0.000 remote_device.py:1(<module>)
        2    0.000    0.000    0.000    0.000 calculus.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sharding.py:16(SHARDING_PRIORITIES)
        4    0.000    0.000    0.000    0.000 platform.py:1107(python_implementation)
        1    0.000    0.000    0.000    0.000 libmpf.py:136(<listcomp>)
        3    0.000    0.000    0.000    0.000 core.py:3727(__init__)
       44    0.000    0.000    0.000    0.000 typing.py:2798(<listcomp>)
        1    0.000    0.000    0.000    0.000 core.py:3696(__init__)
        2    0.000    0.000    0.000    0.000 fnmatch.py:74(translate)
        1    0.000    0.000    0.000    0.000 _VF.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _miobase.py:351(MatFileReader)
       41    0.000    0.000    0.000    0.000 _add_newdocs_scalars.py:83(<genexpr>)
        1    0.000    0.000    0.000    0.000 helpers.py:692(OpAssoc)
        1    0.000    0.000    0.000    0.000 Image.py:527(Image)
        1    0.000    0.000    0.000    0.000 core.py:231(reload_library)
        1    0.000    0.000    0.000    0.000 numbers.py:3343(NaN)
       41    0.000    0.000    0.000    0.000 numbers.py:442(sort_key)
        1    0.000    0.000    0.000    0.000 pretty_symbology.py:132(<dictcomp>)
        1    0.000    0.000    0.000    0.000 datetime.py:2293(timezone)
        1    0.000    0.000    0.000    0.000 decompositions.py:34(Reduction)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:370(Binomial)
        1    0.000    0.000    0.000    0.000 _external_properties.py:25(ExternalProperties)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:107(Disposal)
        1    0.000    0.000    0.000    0.000 tensor.py:2417(TensAdd)
        2    0.000    0.000    0.000    0.000 signals.py:1(<module>)
      196    0.000    0.000    0.000    0.000 core.py:485(mayReturnEmpty)
      134    0.000    0.000    0.000    0.000 wrappers.py:96(__init__)
        2    0.000    0.000    0.000    0.000 complexfield.py:81(dtype)
        2    0.000    0.000    0.000    0.000 {built-in method posix.scandir}
        1    0.000    0.000    0.000    0.000 core.py:4777(IndentedBlock)
        1    0.000    0.000    0.000    0.000 _guards.py:253(GuardsCheckpointState)
       25    0.000    0.000    0.000    0.000 polyoptions.py:64(__init__)
        1    0.000    0.000    0.000    0.000 outputs.py:205(Vasprun)
        1    0.000    0.000    0.000    0.000 subscheck.py:1(<module>)
        9    0.000    0.000    0.000    0.000 mul.py:844(as_coeff_Mul)
        1    0.000    0.000    0.000    0.000 _linalg_utils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:154(_check_cubins)
        1    0.000    0.000    0.000    0.000 pretty_symbology.py:57(pretty_try_use_unicode)
        1    0.000    0.000    0.000    0.000 numerictypes.py:589(_register_types)
        1    0.000    0.000    0.000    0.000 distributed.py:256(DistributedDataParallel)
        1    0.000    0.000    0.000    0.000 generate.py:45(__init__)
      100    0.000    0.000    0.000    0.000 perm_groups.py:134(<genexpr>)
        1    0.000    0.000    0.000    0.000 patches.py:883(RegularPolygon)
        1    0.000    0.000    0.000    0.000 quasirandom.py:1(<module>)
        1    0.000    0.000    0.000    0.000 euclidtools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 operations.py:575(AssocOpDispatcher)
       24    0.000    0.000    0.000    0.000 {built-in method numpy.core._multiarray_umath.dragon4_positional}
        1    0.000    0.000    0.000    0.000 ellipse.py:38(<listcomp>)
        1    0.000    0.000    0.000    0.000 index_methods.py:1(<module>)
       42    0.000    0.000    0.000    0.000 _typing.py:275(__init__)
       14    0.000    0.000    0.000    0.000 constraints.py:175(__call__)
      110    0.000    0.000    0.000    0.000 _internal.py:883(<genexpr>)
       93    0.000    0.000    0.000    0.000 _inspect.py:131(strseq)
        1    0.000    0.000    0.000    0.000 _structures.py:1(<module>)
        3    0.000    0.000    0.000    0.000 core.py:5901(__init__)
        1    0.000    0.000    0.000    0.000 numbers.py:1770(Integer)
        1    0.000    0.000    0.000    0.000 _machar.py:1(<module>)
        1    0.000    0.000    0.000    0.000 callable.py:21(MapperIterDataPipe)
        2    0.000    0.000    0.000    0.000 __future__.py:1(<module>)
      116    0.000    0.000    0.000    0.000 typing.py:1814(<genexpr>)
        1    0.000    0.000    0.000    0.000 grouping.py:10(BatcherMapDataPipe)
        1    0.000    0.000    0.000    0.000 logistic_normal.py:1(<module>)
        5    0.000    0.000    0.000    0.000 _version.py:1(<module>)
       10    0.000    0.000    0.000    0.000 pretty_symbology.py:175(<lambda>)
        1    0.000    0.000    0.000    0.000 sysconfig.py:219(is_python_build)
        1    0.000    0.000    0.000    0.000 autograd_function.py:511(WrappedCtx)
        1    0.000    0.000    0.000    0.000 inequalities.py:1(<module>)
        1    0.000    0.000    0.000    0.000 function.py:296(_SingleLevelFunction)
        1    0.000    0.000    0.000    0.000 polyhedron.py:1019(<listcomp>)
        9    0.000    0.000    0.000    0.000 typing_extensions.py:776(runtime_checkable)
        1    0.000    0.000    0.000    0.000 combining.py:10(ConcaterMapDataPipe)
        1    0.000    0.000    0.000    0.000 case.py:344(TestCase)
       28    0.000    0.000    0.000    0.000 {built-in method _locale.getencoding}
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:707(beta_gen)
       28    0.000    0.000    0.000    0.000 core.py:17(__setattr__)
        3    0.000    0.000    0.000    0.000 core.py:1757(suppress)
        1    0.000    0.000    0.000    0.000 entity.py:67(<listcomp>)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2345(mode)
        1    0.000    0.000    0.000    0.000 zeta.py:1(<module>)
        1    0.000    0.000    0.000    0.000 distributed.py:13(DistributedSampler)
        1    0.000    0.000    0.000    0.000 _cm.py:158(<dictcomp>)
        1    0.000    0.000    0.000    0.000 core.py:3589(__init__)
      186    0.000    0.000    0.000    0.000 __init__.py:108(<lambda>)
        1    0.000    0.000    0.000    0.000 exponential.py:219(exp)
        1    0.000    0.000    0.000    0.000 glob.py:111(_glob0)
        1    0.000    0.000    0.000    0.000 binomial.py:13(Binomial)
        1    0.000    0.000    0.000    0.000 line.py:47(<listcomp>)
        9    0.000    0.000    0.000    0.000 deprecation.py:433(<listcomp>)
       12    0.000    0.000    0.000    0.000 core.py:6117(<lambda>)
        1    0.000    0.000    0.000    0.000 _asarray.py:1(<module>)
      256    0.000    0.000    0.000    0.000 libintmath.py:62(python_trailing)
       17    0.000    0.000    0.000    0.000 stride_tricks.py:538(<listcomp>)
        1    0.000    0.000    0.000    0.000 _rotation_spline.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _parser.py:1371(_tzparser)
        1    0.000    0.000    0.000    0.000 domainscalar.py:1(<module>)
      449    0.000    0.000    0.000    0.000 {method 'popleft' of 'collections.deque' objects}
        4    0.000    0.000    0.000    0.000 _pep440.py:437(_cmpkey)
       27    0.000    0.000    0.000    0.000 pathlib.py:622(name)
        2    0.000    0.000    0.000    0.000 {built-in method zlib.decompressobj}
        2    0.000    0.000    0.000    0.000 _codata.py:1533(exact2018)
        1    0.000    0.000    0.000    0.000 _gauss_legendre.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _mode_utils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 tensor.py:3394(TensMul)
        1    0.000    0.000    0.000    0.000 dataframe_wrapper.py:1(<module>)
        1    0.000    0.000    0.000    0.000 elliptic.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:6024(laplace_gen)
        1    0.000    0.000    0.000    0.000 typing.py:611(ClassVar)
       36    0.000    0.000    0.000    0.000 deprecation.py:211(finalize)
        1    0.000    0.000    0.000    0.000 core.py:3839(Tag)
        2    0.000    0.000    0.000    0.000 core.py:6744(__init__)
        1    0.000    0.000    0.000    0.000 trirefine.py:1(<module>)
        1    0.000    0.000    0.000    0.000 intfunc.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9038(rayleigh_gen)
        2    0.000    0.000    0.000    0.000 {built-in method _ctypes.POINTER}
        1    0.000    0.000    0.000    0.000 _external_property_file_references.py:15(ExternalPropertyFileReferences)
        6    0.000    0.000    0.000    0.000 basic.py:147(_get_postprocessors_for_type)
        1    0.000    0.000    0.000    0.000 _milp.py:1(<module>)
        4    0.000    0.000    0.000    0.000 vmap.py:30(doesnt_support_saved_tensors_hooks)
        1    0.000    0.000    0.000    0.000 patches.py:19(Patch)
        1    0.000    0.000    0.000    0.000 ssl.py:477(Purpose)
       24    0.000    0.000    0.000    0.000 datapipe.py:133(register_datapipe_as_function)
        1    0.000    0.000    0.000    0.000 parametrizations.py:39(_Orthogonal)
      147    0.000    0.000    0.000    0.000 <frozen _collections_abc>:477(_is_param_expr)
       16    0.000    0.000    0.000    0.000 fake_quantize.py:106(with_args)
       36    0.000    0.000    0.000    0.000 binary.py:153(_torch_binary)
        1    0.000    0.000    0.000    0.000 _trustregion.py:1(<module>)
        1    0.000    0.000    0.000    0.000 util.py:49(get_platform)
       36    0.000    0.000    0.000    0.000 _string_helpers.py:16(english_lower)
        1    0.000    0.000    0.000    0.000 format.py:1(<module>)
        1    0.000    0.000    0.000    0.000 negative_binomial.py:9(NegativeBinomial)
       59    0.000    0.000    0.000    0.000 {method 'astype' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.000    0.000 datapipe.py:358(_IterDataPipeSerializationWrapper)
        1    0.000    0.000    0.000    0.000 inputs.py:2869(Potcar)
        1    0.000    0.000    0.000    0.000 subfield.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _polyint.py:116(_set_yi)
      235    0.000    0.000    0.000    0.000 basic.py:324(_hashable_content)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2037(expon_gen)
        1    0.000    0.000    0.000    0.000 immutable.py:30(ImmutableRepMatrix)
        1    0.000    0.000    0.000    0.000 trigonometric.py:2584(atan)
        1    0.000    0.000    0.000    0.000 _check.py:1(<module>)
      161    0.000    0.000    0.000    0.000 core.py:1774(leave_whitespace)
        1    0.000    0.000    0.000    0.000 identification.py:1(<module>)
      166    0.000    0.000    0.000    0.000 enum.py:897(<lambda>)
        1    0.000    0.000    0.000    0.000 ring.py:1(<module>)
        6    0.000    0.000    0.000    0.000 _methods.py:55(_any)
        1    0.000    0.000    0.000    0.000 backend_bases.py:2630(FigureManagerBase)
        1    0.000    0.000    0.000    0.000 patches.py:1375(Ellipse)
        1    0.000    0.000    0.000    0.000 orthopolys.py:1(<module>)
        1    0.000    0.000    0.000    0.000 transforms.py:821(InverseMellinTransform)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3040(_sample_inverse_transform)
        3    0.000    0.000    0.000    0.000 sdm.py:78(__init__)
        4    0.000    0.000    0.000    0.000 platform.py:826(uname)
      169    0.000    0.000    0.000    0.000 contextlib.py:425(__init__)
        1    0.000    0.000    0.000    0.000 grouping.py:29(BatcherIterDataPipe)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:487(DataFlowGraph)
        1    0.000    0.000    0.000    0.000 ssl.py:1006(SSLSocket)
        6    0.000    0.000    0.000    0.000 rcsetup.py:264(validate_fonttype)
        1    0.000    0.000    0.000    0.000 _mstats_extras.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dates.py:1124(RRuleLocator)
       97    0.000    0.000    0.000    0.000 core.py:6163(<genexpr>)
        3    0.000    0.000    0.000    0.000 rcsetup.py:487(validate_whiskers)
       55    0.000    0.000    0.000    0.000 logic.py:92(fuzzy_bool)
        1    0.000    0.000    0.000    0.000 gui.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _index.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _digraph.py:1(<module>)
        1    0.000    0.000    0.000    0.000 laplace.py:2203(InverseLaplaceTransform)
        1    0.000    0.000    0.000    0.000 matpow.py:12(MatPow)
        1    0.000    0.000    0.000    0.000 __init__.py:58(Sectioned)
        9    0.000    0.000    0.000    0.000 pythonmpq.py:93(_new_check)
        2    0.000    0.000    0.000    0.000 __init__.py:144(is_cpython)
        2    0.000    0.000    0.000    0.000 __init__.py:1415(_clear_cache)
        1    0.000    0.000    0.000    0.000 result.py:24(TestResult)
        1    0.000    0.000    0.000    0.000 function.py:281(Application)
        1    0.000    0.000    0.000    0.000 base_tasks.py:1(<module>)
        2    0.000    0.000    0.000    0.000 _new_distributions.py:70(_icdf_formula)
        1    0.000    0.000    0.000    0.000 riccati.py:1(<module>)
       82    0.000    0.000    0.000    0.000 typing.py:2823(<genexpr>)
        1    0.000    0.000    0.000    0.000 _thread_flow_location.py:19(ThreadFlowLocation)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:4810(OrderStatisticDistribution)
        1    0.000    0.000    0.000    0.000 __init__.py:1145(RETURN_TYPE)
        1    0.000    0.000    0.000    0.000 timestamp.py:1(<module>)
        1    0.000    0.000    0.000    0.000 refine.py:1(<module>)
        1    0.000    0.000    0.000    0.000 util.py:35(get_host_platform)
        4    0.000    0.000    0.000    0.000 rrule.py:80(_invalidates_cache)
        1    0.000    0.000    0.000    0.000 _sparse.py:1(<module>)
        4    0.000    0.000    0.000    0.000 _spherical_bessel.py:14(decorator)
        3    0.000    0.000    0.000    0.000 {built-in method _csv.register_dialect}
        1    0.000    0.000    0.000    0.000 densetools.py:1(<module>)
        3    0.000    0.000    0.000    0.000 symbolic_opset9.py:804(_reduce_with_dtype)
      4/2    0.000    0.000    0.000    0.000 _aliases.py:594(isdtype)
      216    0.000    0.000    0.000    0.000 _adapters.py:43(redent)
       32    0.000    0.000    0.000    0.000 decorators.py:202(wrapper)
       25    0.000    0.000    0.000    0.000 rcsetup.py:773(_validate_greaterequal0_lessequal1)
      102    0.000    0.000    0.000    0.000 patches.py:1878(<genexpr>)
        1    0.000    0.000    0.000    0.000 dataset.py:63(IterableDataset)
       45    0.000    0.000    0.000    0.000 {built-in method torch._C.containedTypes}
       17    0.000    0.000    0.000    0.000 _multivariate.py:216(__init__)
        1    0.000    0.000    0.000    0.000 ecm.py:1(<module>)
        1    0.000    0.000    0.000    0.000 lowrank_multivariate_normal.py:48(LowRankMultivariateNormal)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3643(_pxf_dispatch)
        5    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1074(_set_invalid_nan_property)
        1    0.000    0.000    0.000    0.000 defaults.py:1(<module>)
        1    0.000    0.000    0.000    0.000 kind.py:190(KindDispatcher)
       14    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:473(_get_endpoint_str)
        1    0.000    0.000    0.000    0.000 datapipe.py:377(DataChunk)
        7    0.000    0.000    0.000    0.000 core.py:4767(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 ctx_iv.py:153(__new__)
        2    0.000    0.000    0.000    0.000 ctx_mp_python.py:368(__new__)
       57    0.000    0.000    0.000    0.000 core.py:4169(<genexpr>)
        4    0.000    0.000    0.000    0.000 isoparser.py:22(_takes_ascii)
        1    0.000    0.000    0.000    0.000 polyclasses.py:1735(DUP_Flint)
      195    0.000    0.000    0.000    0.000 permutations.py:2083(<genexpr>)
       12    0.000    0.000    0.000    0.000 fake_tensor.py:328(impl_decorator)
       66    0.000    0.000    0.000    0.000 {method 'acquire' of '_thread.RLock' objects}
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3968(genhyperbolic_gen)
        9    0.000    0.000    0.000    0.000 fontconfig_pattern.py:150(_families)
        1    0.000    0.000    0.000    0.000 __config__.py:14(DisplayModes)
        1    0.000    0.000    0.000    0.000 animation.py:789(HTMLWriter)
        1    0.000    0.000    0.000    0.000 _script.py:1506(_ScriptProfileTable)
        3    0.000    0.000    0.000    0.000 __init__.py:503(PYFUNCTYPE)
        1    0.000    0.000    0.000    0.000 tr_interior_point.py:1(<module>)
        1    0.000    0.000    0.000    0.000 subprocess.py:693(_use_posix_spawn)
       44    0.000    0.000    0.000    0.000 unicode.py:17(<genexpr>)
        5    0.000    0.000    0.000    0.000 quadrature.py:461(__init__)
        1    0.000    0.000    0.000    0.000 file_structure_representation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _ndgriddata.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _backend.py:330(set_global_backend)
        1    0.000    0.000    0.000    0.000 _elffile.py:23(EIClass)
        1    0.000    0.000    0.000    0.000 _qap.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _common.py:132(_validate_fromutc_inputs)
        1    0.000    0.000    0.000    0.000 _matrix.py:1(<module>)
       24    0.000    0.000    0.000    0.000 pickletools.py:193(__init__)
       53    0.000    0.000    0.000    0.000 six.py:182(_add_module)
        1    0.000    0.000    0.000    0.000 __init__.py:1243(__init__)
        5    0.000    0.000    0.000    0.000 symbolic_opset9.py:2119(wrap_logical_op_with_negation)
        1    0.000    0.000    0.000    0.000 json.py:46(_load_redirect)
        1    0.000    0.000    0.000    0.000 base_futures.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _exception.py:16(Exception)
        3    0.000    0.000    0.000    0.000 {built-in method posix.putenv}
        1    0.000    0.000    0.000    0.000 typing_extensions.py:227(_SpecialForm)
        1    0.000    0.000    0.000    0.000 rszeta.py:1(<module>)
        9    0.000    0.000    0.000    0.000 overrides.py:23(set_array_function_like_doc)
        1    0.000    0.000    0.000    0.000 tableform.py:1(<module>)
       12    0.000    0.000    0.000    0.000 _basic.py:3032(<genexpr>)
        1    0.000    0.000    0.000    0.000 factorials.py:285(subfactorial)
       78    0.000    0.000    0.000    0.000 inspect.py:480(iscode)
        1    0.000    0.000    0.000    0.000 unicode.py:75(nums)
        1    0.000    0.000    0.000    0.000 appellseqs.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _package_unpickler.py:1(<module>)
        1    0.000    0.000    0.000    0.000 characteristiczero.py:1(<module>)
       26    0.000    0.000    0.000    0.000 _hook_iterator.py:110(IteratorDecorator)
        3    0.000    0.000    0.000    0.000 numeric.py:67(zeros_like)
        1    0.000    0.000    0.000    0.000 dist.py:144(<listcomp>)
       46    0.000    0.000    0.000    0.000 six.py:110(__init__)
        1    0.000    0.000    0.000    0.000 gzip.py:327(close)
        1    0.000    0.000    0.000    0.000 {method 'write' of '_io.TextIOWrapper' objects}
        1    0.000    0.000    0.000    0.000 __config__.py:9(DisplayModes)
        1    0.000    0.000    0.000    0.000 core.py:177(update_user_library)
        5    0.000    0.000    0.000    0.000 functools.py:191(<setcomp>)
        1    0.000    0.000    0.000    0.000 _fourier.py:1(<module>)
       26    0.000    0.000    0.000    0.000 {method 'fullmatch' of 're.Pattern' objects}
        1    0.000    0.000    0.000    0.000 polyutils.py:188(<listcomp>)
       21    0.000    0.000    0.000    0.000 _distn_infrastructure.py:3308(__new__)
       17    0.000    0.000    0.000    0.000 <frozen _collections_abc>:78(_check_methods)
        1    0.000    0.000    0.000    0.000 getopt.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:6801(lognorm_gen)
        1    0.000    0.000    0.000    0.000 backend_bases.py:3548(export)
        3    0.000    0.000    0.000    0.000 inspect.py:409(iscoroutinefunction)
        3    0.000    0.000    0.000    0.000 feedparser.py:197(_new_message)
        2    0.000    0.000    0.000    0.000 _new_distributions.py:165(_icdf_formula)
        1    0.000    0.000    0.000    0.000 _iotools.py:450(StringConverter)
        1    0.000    0.000    0.000    0.000 canonical_constraint.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fractions.py:38(Fraction)
        2    0.000    0.000    0.000    0.000 quantize_jit.py:1(<module>)
       42    0.000    0.000    0.000    0.000 typing.py:266(_check_generic)
        1    0.000    0.000    0.000    0.000 _reporting_descriptor_reference.py:15(ReportingDescriptorReference)
        1    0.000    0.000    0.000    0.000 error_functions.py:49(erf)
       16    0.000    0.000    0.000    0.000 {method 'popitem' of 'dict' objects}
        2    0.000    0.000    0.000    0.000 rcsetup.py:130(_validate_date)
        4    0.000    0.000    0.000    0.000 shape_base.py:23(atleast_1d)
       41    0.000    0.000    0.000    0.000 typing.py:2885(_namedtuple_mro_entries)
       82    0.000    0.000    0.000    0.000 core.py:1962(streamline)
       81    0.000    0.000    0.000    0.000 __init__.py:25(decorator)
        1    0.000    0.000    0.000    0.000 _subplots.py:199(subplot_class_factory)
        1    0.000    0.000    0.000    0.000 preview.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:8375(pearson3_gen)
        2    0.000    0.000    0.000    0.000 tools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 polyclasses.py:1236(DMP_Python)
        4    0.000    0.000    0.000    0.000 random.py:797(getrandbits)
       23    0.000    0.000    0.000    0.000 functools.py:966(__init__)
       81    0.000    0.000    0.000    0.000 __init__.py:14(set_module)
        1    0.000    0.000    0.000    0.000 _basic_backend.py:1(<module>)
       19    0.000    0.000    0.000    0.000 {method 'round' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.000    0.000 lobpcg.py:1(<module>)
        1    0.000    0.000    0.000    0.000 glob.py:191(_lexists)
        1    0.000    0.000    0.000    0.000 _ndimage_api.py:16(<listcomp>)
        1    0.000    0.000    0.000    0.000 sampler.py:64(SequentialSampler)
       97    0.000    0.000    0.000    0.000 docstring.py:63(copy)
        1    0.000    0.000    0.000    0.000 _typing.py:248(_DataPipeMeta)
        3    0.000    0.000    0.000    0.000 message.py:409(__getitem__)
        1    0.000    0.000    0.000    0.000 _parser.py:568(parser)
      230    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
        8    0.000    0.000    0.000    0.000 ctx_iv.py:30(convert_mpf_)
       26    0.000    0.000    0.000    0.000 core.py:4417(<genexpr>)
        1    0.000    0.000    0.000    0.000 __init__.py:327(<listcomp>)
       18    0.000    0.000    0.000    0.000 conflict.py:30(<genexpr>)
        1    0.000    0.000    0.000    0.000 perm_groups.py:26(PermutationGroup)
       25    0.000    0.000    0.000    0.000 {built-in method _struct.calcsize}
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:311(SizeMap)
        1    0.000    0.000    0.000    0.000 results.py:39(ParseResults)
        7    0.000    0.000    0.000    0.000 _aliases.py:447(reshape)
        1    0.000    0.000    0.000    0.000 pde.py:1(<module>)
      174    0.000    0.000    0.000    0.000 _docscrape.py:724(_is_show_member)
        1    0.000    0.000    0.000    0.000 _complex.py:13(Complex)
       58    0.000    0.000    0.000    0.000 __init__.py:795(__init__)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:8574(powerlaw_gen)
        1    0.000    0.000    0.000    0.000 dev.py:1(<module>)
        1    0.000    0.000    0.000    0.000 series_class.py:11(SeriesBase)
        1    0.000    0.000    0.000    0.000 core.py:3494(__init__)
      161    0.000    0.000    0.000    0.000 util.py:242(escape_re_range_char)
        1    0.000    0.000    0.000    0.000 {method 'sum' of 'numpy.ndarray' objects}
        2    0.000    0.000    0.000    0.000 <frozen _collections_abc>:440(__repr__)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_md5}
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:128(Blend)
        1    0.000    0.000    0.000    0.000 activation.py:15(MultiheadAttention)
       28    0.000    0.000    0.000    0.000 power.py:803(as_base_exp)
        1    0.000    0.000    0.000    0.000 tarfile.py:715(TarInfo)
        1    0.000    0.000    0.000    0.000 multivariate_normal.py:80(MultivariateNormal)
        1    0.000    0.000    0.000    0.000 calendar.py:52(_localized_month)
        1    0.000    0.000    0.000    0.000 py39.py:1(<module>)
        1    0.000    0.000    0.000    0.000 backend_tools.py:524(ToolViewsPositions)
        2    0.000    0.000    0.000    0.000 _mio5_params.py:184(_convert_codecs)
        1    0.000    0.000    0.000    0.000 __init__.py:221(<listcomp>)
        1    0.000    0.000    0.000    0.000 _censored_data.py:1(<module>)
        2    0.000    0.000    0.000    0.000 __init__.py:393(__getitem__)
        1    0.000    0.000    0.000    0.000 libintmath.py:89(<listcomp>)
        3    0.000    0.000    0.000    0.000 datetime.py:1673(__new__)
       30    0.000    0.000    0.000    0.000 binary.py:162(_torch_inplace_binary)
        1    0.000    0.000    0.000    0.000 arrayterator.py:1(<module>)
        1    0.000    0.000    0.000    0.000 simpledomain.py:1(<module>)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3605(_pmf_formula)
        1    0.000    0.000    0.000    0.000 {built-in method uarray._uarray.set_global_backend}
       97    0.000    0.000    0.000    0.000 docstring.py:65(do_copy)
       13    0.000    0.000    0.000    0.000 enum.py:1337(_iter_member_by_value_)
       14    0.000    0.000    0.000    0.000 __init__.py:253(escape)
        1    0.000    0.000    0.000    0.000 categorical.py:9(Categorical)
        1    0.000    0.000    0.000    0.000 _dtype_like.py:71(_DTypeDict)
       13    0.000    0.000    0.000    0.000 enum.py:901(<dictcomp>)
        1    0.000    0.000    0.000    0.000 request.py:317(Request)
        1    0.000    0.000    0.000    0.000 trigonometric.py:1255(cot)
        1    0.000    0.000    0.000    0.000 dfm.py:1(<module>)
        1    0.000    0.000    0.000    0.000 realtransforms.py:1(<module>)
        1    0.000    0.000    0.000    0.000 error_functions.py:2383(fresnels)
        1    0.000    0.000    0.000    0.000 Orbit.py:1(<module>)
        2    0.000    0.000    0.000    0.000 datetime.py:765(__neg__)
        1    0.000    0.000    0.000    0.000 _common.py:42(resolve)
       90    0.000    0.000    0.000    0.000 {method 'insert' of 'list' objects}
        1    0.000    0.000    0.000    0.000 timeit.py:1(<module>)
        1    0.000    0.000    0.000    0.000 multidimensional.py:1(<module>)
        6    0.000    0.000    0.000    0.000 _jit_internal.py:895(get_class_name_lineno)
        1    0.000    0.000    0.000    0.000 interval_membership.py:1(<module>)
        1    0.000    0.000    0.000    0.000 lsqr.py:1(<module>)
       12    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3600(_overrides)
       10    0.000    0.000    0.000    0.000 pretty_symbology.py:171(<lambda>)
      101    0.000    0.000    0.000    0.000 _meta_registrations.py:32(register_meta)
        1    0.000    0.000    0.000    0.000 Lattice.py:1(<module>)
        6    0.000    0.000    0.000    0.000 numbers.py:3598(__hash__)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:4238(<dictcomp>)
        1    0.000    0.000    0.000    0.000 domain.py:18(Domain)
      257    0.000    0.000    0.000    0.000 hmac.py:19(<genexpr>)
       56    0.000    0.000    0.000    0.000 patches.py:1901(_register_style)
        7    0.000    0.000    0.000    0.000 rcsetup.py:292(validate_backend)
      187    0.000    0.000    0.000    0.000 boolalg.py:365(__bool__)
        1    0.000    0.000    0.000    0.000 _elffile.py:28(EIData)
        2    0.000    0.000    0.000    0.000 typing.py:1211(__init__)
        6    0.000    0.000    0.000    0.000 rcsetup.py:228(_make_type_validator)
       12    0.000    0.000    0.000    0.000 rcsetup.py:200(validate_axisbelow)
        1    0.000    0.000    0.000    0.000 _async.py:1(<module>)
        1    0.000    0.000    0.000    0.000 {built-in method posix.readlink}
        1    0.000    0.000    0.000    0.000 core.py:170(iter_user_libraries)
        1    0.000    0.000    0.000    0.000 Image.py:185(Palette)
       55    0.000    0.000    0.000    0.000 <frozen codecs>:260(__init__)
       15    0.000    0.000    0.000    0.000 proxy.py:524(_define_reflectable)
        1    0.000    0.000    0.000    0.000 exponential.py:607(log)
        1    0.000    0.000    0.000    0.000 _artifact.py:17(Artifact)
        1    0.000    0.000    0.000    0.000 _waveforms.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dogbox.py:1(<module>)
       89    0.000    0.000    0.000    0.000 functions.py:81(defun_wrapped)
        3    0.000    0.000    0.000    0.000 blas.py:270(find_best_blas_type)
        3    0.000    0.000    0.000    0.000 _new_distributions.py:394(_pmf_formula)
        1    0.000    0.000    0.000    0.000 __init__.py:1076(__init__)
       28    0.000    0.000    0.000    0.000 numerictypes.py:283(issubclass_)
       16    0.000    0.000    0.000    0.000 pretty_symbology.py:169(<lambda>)
        2    0.000    0.000    0.000    0.000 traceback.py:439(from_list)
        1    0.000    0.000    0.000    0.000 GimpPaletteFile.py:1(<module>)
       18    0.000    0.000    0.000    0.000 {method 'tolist' of 'memoryview' objects}
        4    0.000    0.000    0.000    0.000 symbolic_opset9.py:787(overload_by_arg_count)
        1    0.000    0.000    0.000    0.000 linalg.py:39(EigResult)
        4    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:780(exec_module)
        1    0.000    0.000    0.000    0.000 pickle.py:1137(_Unpickler)
        1    0.000    0.000    0.000    0.000 codeprinter.py:53(CodePrinter)
        1    0.000    0.000    0.000    0.000 _infra.py:270(__post_init__)
       39    0.000    0.000    0.000    0.000 functools.py:421(_unwrap_partial)
        1    0.000    0.000    0.000    0.000 numbers.py:609(bell)
        3    0.000    0.000    0.000    0.000 typing.py:856(_evaluate)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9339(irwinhall_gen)
        1    0.000    0.000    0.000    0.000 trigonometric.py:2797(acot)
        1    0.000    0.000    0.000    0.000 decorators.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pin_memory.py:1(<module>)
        1    0.000    0.000    0.000    0.000 geo.py:14(GeoAxes)
        1    0.000    0.000    0.000    0.000 __init__.py:39(_get_running_interactive_framework)
        4    0.000    0.000    0.000    0.000 fontconfig_pattern.py:158(_property)
        1    0.000    0.000    0.000    0.000 approximants.py:1(<module>)
        1    0.000    0.000    0.000    0.000 <frozen posixpath>:174(lexists)
       55    0.000    0.000    0.000    0.000 __init__.py:382(_make_elementwise_unary_reference)
       82    0.000    0.000    0.000    0.000 symbolic_helper.py:313(quantized_args)
        2    0.000    0.000    0.000    0.000 tree.py:1(<module>)
        3    0.000    0.000    0.000    0.000 arrayprint.py:64(_make_options_dict)
       23    0.000    0.000    0.000    0.000 {built-in method math.gcd}
        1    0.000    0.000    0.000    0.000 function.py:382(Function)
        8    0.000    0.000    0.000    0.000 _nonlin.py:119(_set_doc)
        1    0.000    0.000    0.000    0.000 trigonometric.py:915(tan)
        1    0.000    0.000    0.000    0.000 _qmc.py:1117(Halton)
        1    0.000    0.000    0.000    0.000 <frozen os>:48(<listcomp>)
        1    0.000    0.000    0.000    0.000 cmd.py:34(Command)
        1    0.000    0.000    0.000    0.000 bessel.py:1374(airyai)
       35    0.000    0.000    0.000    0.000 core.py:13(dispatch)
        1    0.000    0.000    0.000    0.000 egyptian_fraction.py:1(<module>)
       30    0.000    0.000    0.000    0.000 warnings.py:440(__init__)
        1    0.000    0.000    0.000    0.000 deltafunctions.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _array_api_compat_vendor.py:1(<module>)
        1    0.000    0.000    0.000    0.000 trsock.py:1(<module>)
        1    0.000    0.000    0.000    0.000 more.py:2049(numeric_range)
        1    0.000    0.000    0.000    0.000 tag.py:1(<module>)
        1    0.000    0.000    0.000    0.000 trigonometric.py:243(sin)
        1    0.000    0.000    0.000    0.000 _at.py:52(Undef)
        6    0.000    0.000    0.000    0.000 stride_tricks.py:472(<listcomp>)
        1    0.000    0.000    0.000    0.000 domainelement.py:1(<module>)
        1    0.000    0.000    0.000    0.000 unicode.py:236(Japanese)
        1    0.000    0.000    0.000    0.000 {built-in method torch._C._distributed_c10d.set_debug_level_from_env}
        1    0.000    0.000    0.000    0.000 matrix_element.py:1(<module>)
        1    0.000    0.000    0.000    0.000 differentiation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:367(<listcomp>)
       90    0.000    0.000    0.000    0.000 basic.py:442(class_key)
        1    0.000    0.000    0.000    0.000 _region.py:16(Region)
        2    0.000    0.000    0.000    0.000 numbers.py:408(__float__)
        1    0.000    0.000    0.000    0.000 numerictypes.py:441(_construct_lookups)
      122    0.000    0.000    0.000    0.000 core.py:2459(__getnewargs__)
        2    0.000    0.000    0.000    0.000 __init__.py:912(createLock)
        1    0.000    0.000    0.000    0.000 fromnumeric.py:95(take)
        1    0.000    0.000    0.000    0.000 __init__.py:850(TarInfo)
        1    0.000    0.000    0.000    0.000 reader.py:59(Reader)
        4    0.000    0.000    0.000    0.000 _ops.py:130(inner)
        1    0.000    0.000    0.000    0.000 trigonometric.py:553(cos)
        2    0.000    0.000    0.000    0.000 ctx_mp_python.py:612(_set_prec)
        1    0.000    0.000    0.000    0.000 mathml.py:547(MathMLPresentationPrinter)
        3    0.000    0.000    0.000    0.000 fromnumeric.py:2836(min)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:153(sinh)
      130    0.000    0.000    0.000    0.000 __init__.py:247(<genexpr>)
        1    0.000    0.000    0.000    0.000 signal_handling.py:1(<module>)
        1    0.000    0.000    0.000    0.000 permutations.py:473(Permutation)
       18    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2149(_overrides)
        1    0.000    0.000    0.000    0.000 expintegrals.py:1(<module>)
        1    0.000    0.000    0.000    0.000 threading.py:849(__init__)
       40    0.000    0.000    0.000    0.000 libmpf.py:208(_normalize1)
        1    0.000    0.000    0.000    0.000 scalarbool.py:1(<module>)
       85    0.000    0.000    0.000    0.000 __init__.py:185(keys)
        4    0.000    0.000    0.000    0.000 enum.py:1727(<listcomp>)
        2    0.000    0.000    0.000    0.000 conflict.py:39(<listcomp>)
        1    0.000    0.000    0.000    0.000 frontend.py:682(ExprBuilder)
        3    0.000    0.000    0.000    0.000 _stats.py:14(count)
        1    0.000    0.000    0.000    0.000 PaletteFile.py:1(<module>)
        1    0.000    0.000    0.000    0.000 bernoulli.py:12(Bernoulli)
       16    0.000    0.000    0.000    0.000 doccer.py:126(_doc)
        4    0.000    0.000    0.000    0.000 {built-in method posix.uname}
        1    0.000    0.000    0.000    0.000 _add_newdocs_scalars.py:18(numeric_type_aliases)
        1    0.000    0.000    0.000    0.000 discovery.py:210(FlatLayoutPackageFinder)
        1    0.000    0.000    0.000    0.000 _await.py:1(<module>)
        6    0.000    0.000    0.000    0.000 rcsetup.py:617(validate_joinstyle)
        1    0.000    0.000    0.000    0.000 parametrizations.py:288(_SpectralNorm)
        8    0.000    0.000    0.000    0.000 sympify.py:78(_is_numpy_instance)
        1    0.000    0.000    0.000    0.000 _polyint.py:136(_set_dtype)
        3    0.000    0.000    0.000    0.000 expr.py:220(__neg__)
      257    0.000    0.000    0.000    0.000 hmac.py:20(<genexpr>)
        1    0.000    0.000    0.000    0.000 triangulation.py:1(<module>)
       16    0.000    0.000    0.000    0.000 arraypad.py:58(_view_roi)
        1    0.000    0.000    0.000    0.000 printing.py:1(<module>)
       45    0.000    0.000    0.000    0.000 fromnumeric.py:3176(ndim)
        1    0.000    0.000    0.000    0.000 _globals.py:24(__init__)
        1    0.000    0.000    0.000    0.000 _lti_conversion.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3028(_sample_dispatch)
        1    0.000    0.000    0.000    0.000 tensor.py:2845(Tensor)
       38    0.000    0.000    0.000    0.000 __init__.py:23(<genexpr>)
        1    0.000    0.000    0.000    0.000 ImageSequence.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _mathtext_data.py:628(<dictcomp>)
        3    0.000    0.000    0.000    0.000 result.py:12(failfast)
        1    0.000    0.000    0.000    0.000 dates.py:1475(YearLocator)
        1    0.000    0.000    0.000    0.000 _norm.py:1(<module>)
        1    0.000    0.000    0.000    0.000 engine.py:177(DiagnosticContext)
        1    0.000    0.000    0.000    0.000 str.py:20(StrPrinter)
        1    0.000    0.000    0.000    0.000 singularities.py:1(<module>)
        6    0.000    0.000    0.000    0.000 numeric.py:274(full)
        2    0.000    0.000    0.000    0.000 orthogonal.py:1(<module>)
        3    0.000    0.000    0.000    0.000 __init__.py:435(validate)
        1    0.000    0.000    0.000    0.000 epathtools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 limitseq.py:1(<module>)
       28    0.000    0.000    0.000    0.000 inspect.py:2211(parse_name)
       18    0.000    0.000    0.000    0.000 _ops.py:31(_apply_docstring_templates)
        1    0.000    0.000    0.000    0.000 pycode.py:753(MpmathPrinter)
        1    0.000    0.000    0.000    0.000 lib_interval.py:1(<module>)
       18    0.000    0.000    0.000    0.000 {method 'cast' of 'memoryview' objects}
        1    0.000    0.000    0.000    0.000 trigonometric.py:3246(acsc)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:365(cosh)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9661(skewnorm_gen)
        1    0.000    0.000    0.000    0.000 _disjoint_set.py:1(<module>)
       18    0.000    0.000    0.000    0.000 pickletools.py:961(__init__)
        1    0.000    0.000    0.000    0.000 _trustregion_ncg.py:1(<module>)
       62    0.000    0.000    0.000    0.000 _bunch.py:128(<genexpr>)
        1    0.000    0.000    0.000    0.000 mock.py:402(NonCallableMock)
        1    0.000    0.000    0.000    0.000 calendar.py:54(<listcomp>)
       96    0.000    0.000    0.000    0.000 {built-in method math.isclose}
        1    0.000    0.000    0.000    0.000 error_functions.py:288(erfc)
        1    0.000    0.000    0.000    0.000 bessel.py:1546(airybi)
       24    0.000    0.000    0.000    0.000 numerictypes.py:514(_scalar_type_key)
        1    0.000    0.000    0.000    0.000 trigonometric.py:1800(csc)
        1    0.000    0.000    0.000    0.000 pyplot.py:1891(colormaps)
        1    0.000    0.000    0.000    0.000 ctx_base.py:24(StandardBaseContext)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:611(tanh)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4259(gumbel_r_gen)
        1    0.000    0.000    0.000    0.000 tz.py:1470(__get_gettz)
        1    0.000    0.000    0.000    0.000 dates.py:1230(AutoDateLocator)
       18    0.000    0.000    0.000    0.000 transforms.py:52(_make_str_method)
        1    0.000    0.000    0.000    0.000 para4band.py:329(<listcomp>)
        1    0.000    0.000    0.000    0.000 _storage_docs.py:1(<module>)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:1884(asech)
        1    0.000    0.000    0.000    0.000 parallel_apply.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _interpolate.py:434(fill_value)
       32    0.000    0.000    0.000    0.000 _type_aliases.py:46(<genexpr>)
       36    0.000    0.000    0.000    0.000 __init__.py:884(_make_elementwise_binary_reference)
        1    0.000    0.000    0.000    0.000 formatting.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ast.py:82(_convert)
        7    0.000    0.000    0.000    0.000 feedparser.py:122(pushlines)
        1    0.000    0.000    0.000    0.000 series.py:126(BaseSeries)
        1    0.000    0.000    0.000    0.000 rationalfield.py:14(RationalField)
        1    0.000    0.000    0.000    0.000 error_functions.py:482(erfi)
        1    0.000    0.000    0.000    0.000 core.py:4055(And)
        1    0.000    0.000    0.000    0.000 __init__.py:277(DeprecatedList)
        1    0.000    0.000    0.000    0.000 trigonometric.py:2110(asin)
        5    0.000    0.000    0.000    0.000 perm_groups.py:149(__init__)
       41    0.000    0.000    0.000    0.000 representer.py:131(add_representer)
        1    0.000    0.000    0.000    0.000 powerset.py:10(PowerSet)
       21    0.000    0.000    0.000    0.000 symbolic_opset9.py:301(wrapper)
        1    0.000    0.000    0.000    0.000 _address.py:12(Address)
        1    0.000    0.000    0.000    0.000 densearith.py:1(<module>)
        1    0.000    0.000    0.000    0.000 continuous_bernoulli.py:12(ContinuousBernoulli)
        1    0.000    0.000    0.000    0.000 boolalg.py:972(Xor)
       28    0.000    0.000    0.000    0.000 para4band.py:131(mask)
        1    0.000    0.000    0.000    0.000 __init__.py:727(DistributionFinder)
        1    0.000    0.000    0.000    0.000 sym_operation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 polyhedron.py:1017(<listcomp>)
        1    0.000    0.000    0.000    0.000 pathlib.py:112(_WindowsFlavour)
        1    0.000    0.000    0.000    0.000 bvls.py:1(<module>)
        1    0.000    0.000    0.000    0.000 minres.py:1(<module>)
       28    0.000    0.000    0.000    0.000 {built-in method posix._path_normpath}
       21    0.000    0.000    0.000    0.000 _codata.py:2127(value)
        4    0.000    0.000    0.000    0.000 uuid.py:139(__init__)
        2    0.000    0.000    0.000    0.000 util.py:171(register_after_fork)
        1    0.000    0.000    0.000    0.000 function.py:1045(Derivative)
       20    0.000    0.000    0.000    0.000 mixins.py:16(_binary_method)
        4    0.000    0.000    0.000    0.000 platform.py:1003(_sys_version)
        1    0.000    0.000    0.000    0.000 core.py:720(add_condition)
        1    0.000    0.000    0.000    0.000 optimizer.py:262(profile_hook_step)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4094(<lambda>)
        2    0.000    0.000    0.000    0.000 core.py:3529(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 sysconfig.py:719(get_platform)
        6    0.000    0.000    0.000    0.000 _weakrefset.py:37(__init__)
        1    0.000    0.000    0.000    0.000 _constrained_layout.py:1(<module>)
       10    0.000    0.000    0.000    0.000 _torch_docs.py:22(<listcomp>)
        1    0.000    0.000    0.000    0.000 geometric.py:11(Geometric)
        1    0.000    0.000    0.000    0.000 pyplot.py:111(install_repl_displayhook)
        1    0.000    0.000    0.000    0.000 __init__.py:22(<listcomp>)
       13    0.000    0.000    0.000    0.000 _dtype_ctypes.py:71(_from_ctypes_scalar)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1689(<lambda>)
        2    0.000    0.000    0.000    0.000 multidimensional.py:93(__call__)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:1206(asinh)
        1    0.000    0.000    0.000    0.000 property.py:1(<module>)
      208    0.000    0.000    0.000    0.000 multiarray.py:503(can_cast)
        1    0.000    0.000    0.000    0.000 sorting.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:55(_pdf_formula)
       11    0.000    0.000    0.000    0.000 init.py:531(_make_deprecate)
        1    0.000    0.000    0.000    0.000 table.py:232(Table)
       58    0.000    0.000    0.000    0.000 results.py:269(__bool__)
        1    0.000    0.000    0.000    0.000 ratsimp.py:1(<module>)
        1    0.000    0.000    0.000    0.000 Image.py:3874(_apply_env_variables)
        1    0.000    0.000    0.000    0.000 threading.py:583(set)
       15    0.000    0.000    0.000    0.000 pretty_symbology.py:417(<lambda>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9162(reciprocal_gen)
       30    0.000    0.000    0.000    0.000 _type_aliases.py:203(_add_array_type)
        1    0.000    0.000    0.000    0.000 dos.py:644(CompleteDos)
        1    0.000    0.000    0.000    0.000 _mangling.py:1(<module>)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:490(_SpecialGenericAlias)
        1    0.000    0.000    0.000    0.000 _qmc.py:1286(LatinHypercube)
        1    0.000    0.000    0.000    0.000 plot_implicit.py:1(<module>)
        1    0.000    0.000    0.000    0.000 image.py:215(_ImageBase)
        1    0.000    0.000    0.000    0.000 transforms.py:995(CatTransform)
        3    0.000    0.000    0.000    0.000 __init__.py:863(_addHandlerRef)
       28    0.000    0.000    0.000    0.000 typing_extensions.py:486(_is_dunder)
        1    0.000    0.000    0.000    0.000 _dcsrch.py:1(<module>)
        1    0.000    0.000    0.000    0.000 error_functions.py:2544(fresnelc)
        1    0.000    0.000    0.000    0.000 trigonometric.py:2343(acos)
        1    0.000    0.000    0.000    0.000 {method 'take' of 'numpy.ndarray' objects}
        6    0.000    0.000    0.000    0.000 operations.py:135(_new_rawargs)
        1    0.000    0.000    0.000    0.000 Files_in.py:1(<module>)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:1384(acosh)
       22    0.000    0.000    0.000    0.000 <string>:1(<lambda>)
      169    0.000    0.000    0.000    0.000 contextlib.py:428(__enter__)
        1    0.000    0.000    0.000    0.000 __init__.py:1635(TarFile)
        1    0.000    0.000    0.000    0.000 patches.py:1001(Polygon)
        2    0.000    0.000    0.000    0.000 <frozen os>:687(__delitem__)
       20    0.000    0.000    0.000    0.000 __init__.py:2254(_check_in_list)
        1    0.000    0.000    0.000    0.000 __init__.py:118(<listcomp>)
        1    0.000    0.000    0.000    0.000 normalforms.py:1(<module>)
        2    0.000    0.000    0.000    0.000 __init__.py:394(pass_none)
       12    0.000    0.000    0.000    0.000 typing.py:2356(<genexpr>)
        1    0.000    0.000    0.000    0.000 resource_sharer.py:63(__init__)
       30    0.000    0.000    0.000    0.000 {method 'startswith' of 'bytes' objects}
       22    0.000    0.000    0.000    0.000 util.py:197(__init__)
        1    0.000    0.000    0.000    0.000 tarfile.py:1445(TarFile)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3545(gamma_gen)
       26    0.000    0.000    0.000    0.000 _jit_internal.py:860(is_pass)
        1    0.000    0.000    0.000    0.000 core.py:336(AffineScalarFunc)
        1    0.000    0.000    0.000    0.000 _onenormest.py:1(<module>)
       21    0.000    0.000    0.000    0.000 fancy_getopt.py:443(translate_longopt)
        9    0.000    0.000    0.000    0.000 _ops.py:545(__init__)
        3    0.000    0.000    0.000    0.000 monkey.py:26(_get_mro)
        1    0.000    0.000    0.000    0.000 transforms.py:685(Bbox)
       15    0.000    0.000    0.000    0.000 pretty_symbology.py:235(<lambda>)
       23    0.000    0.000    0.000    0.000 <frozen os>:817(fsdecode)
        1    0.000    0.000    0.000    0.000 patches.py:1347(CirclePolygon)
       12    0.000    0.000    0.000    0.000 functools.py:355(__init__)
        9    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3622(_overrides)
        1    0.000    0.000    0.000    0.000 _stack.py:16(Stack)
        1    0.000    0.000    0.000    0.000 axis3d.py:35(Axis)
       10    0.000    0.000    0.000    0.000 _torch_docs.py:23(<listcomp>)
        1    0.000    0.000    0.000    0.000 inputs.py:1212(Kpoints)
        1    0.000    0.000    0.000    0.000 trigonometric.py:3015(asec)
        1    0.000    0.000    0.000    0.000 uniform.py:11(Uniform)
       16    0.000    0.000    0.000    0.000 structure.py:230(__iter__)
        2    0.000    0.000    0.000    0.000 types.py:247(coroutine)
        1    0.000    0.000    0.000    0.000 text.py:1521(Annotation)
        1    0.000    0.000    0.000    0.000 __init__.py:144(<listcomp>)
        1    0.000    0.000    0.000    0.000 anchor.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _gcrotmk.py:1(<module>)
        1    0.000    0.000    0.000    0.000 patches.py:1095(Wedge)
        4    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1159(_cdf2_input_validation)
        1    0.000    0.000    0.000    0.000 odes.py:1(<module>)
      115    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}
       15    0.000    0.000    0.000    0.000 decorator.py:132(doctest_depends_on)
        1    0.000    0.000    0.000    0.000 _polyint.py:533(BarycentricInterpolator)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:2080(acsch)
        2    0.000    0.000    0.000    0.000 core.py:3767(__init__)
        1    0.000    0.000    0.000    0.000 inputs.py:82(Poscar)
        1    0.000    0.000    0.000    0.000 timeutils.py:37(__do_timings)
        3    0.000    0.000    0.000    0.000 six.py:96(__get__)
       87    0.000    0.000    0.000    0.000 kl.py:822(<lambda>)
        1    0.000    0.000    0.000    0.000 reductions.py:151(<dictcomp>)
      134    0.000    0.000    0.000    0.000 six.py:93(__init__)
        1    0.000    0.000    0.000    0.000 scanner.py:71(Scanner)
        1    0.000    0.000    0.000    0.000 convert_parameters.py:1(<module>)
        1    0.000    0.000    0.000    0.000 trigonometric.py:1692(sec)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:355(_Gamma)
        1    0.000    0.000    0.000    0.000 boolalg.py:1286(Equivalent)
        1    0.000    0.000    0.000    0.000 pydoc.py:565(HTMLDoc)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:513(__str__)
       28    0.000    0.000    0.000    0.000 operations.py:101(<listcomp>)
        2    0.000    0.000    0.000    0.000 _compression.py:59(close)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:89(<listcomp>)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1381(<listcomp>)
        1    0.000    0.000    0.000    0.000 _factories.py:26(__init__)
        1    0.000    0.000    0.000    0.000 sdm.py:910(convert_to)
       56    0.000    0.000    0.000    0.000 {method 'newbyteorder' of 'numpy.dtype' objects}
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1713(_identify_parameterization)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2697(weibull_min_gen)
        2    0.000    0.000    0.000    0.000 __init__.py:16(_deprecation_notice)
        1    0.000    0.000    0.000    0.000 bessel.py:1028(yn)
        1    0.000    0.000    0.000    0.000 eigen_symmetric.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sqfreetools.py:1(<module>)
        4    0.000    0.000    0.000    0.000 pretty_symbology.py:232(<lambda>)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:1737(acoth)
       39    0.000    0.000    0.000    0.000 _jit_internal.py:530(export)
       89    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.RLock' objects}
        1    0.000    0.000    0.000    0.000 primetest.py:1(<module>)
        9    0.000    0.000    0.000    0.000 <frozen _collections_abc>:516(__subclasshook__)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:125(StandardNormal)
        1    0.000    0.000    0.000    0.000 pathlib.py:455(PurePath)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:6455(logistic_gen)
       24    0.000    0.000    0.000    0.000 calculus.py:4(defun)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:124(<listcomp>)
       12    0.000    0.000    0.000    0.000 domain.py:403(convert)
        1    0.000    0.000    0.000    0.000 _serialization.py:1(<module>)
      144    0.000    0.000    0.000    0.000 periodic_table.py:1519(oxi_state)
       14    0.000    0.000    0.000    0.000 numeric.py:1380(<listcomp>)
        1    0.000    0.000    0.000    0.000 Files_out.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ctx_mp_python.py:434(mpc_convert_lhs)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:1070(csch)
        1    0.000    0.000    0.000    0.000 _notification.py:18(Notification)
        1    0.000    0.000    0.000    0.000 quaternion.py:58(Quaternion)
       22    0.000    0.000    0.000    0.000 __init__.py:1273(append)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:1572(atanh)
        1    0.000    0.000    0.000    0.000 format_helpers.py:1(<module>)
        7    0.000    0.000    0.000    0.000 {method 'deleter' of 'property' objects}
        1    0.000    0.000    0.000    0.000 matmul.py:24(MatMul)
        1    0.000    0.000    0.000    0.000 main.py:56(YAML)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:1141(sech)
        1    0.000    0.000    0.000    0.000 random.py:358(randint)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:6694(loglaplace_gen)
        2    0.000    0.000    0.000    0.000 core.py:2952(_update_from)
        1    0.000    0.000    0.000    0.000 _coo.py:26(_coo_base)
        1    0.000    0.000    0.000    0.000 nvtx.py:1(<module>)
       25    0.000    0.000    0.000    0.000 enum.py:787(__members__)
       15    0.000    0.000    0.000    0.000 _util.py:356(<listcomp>)
        3    0.000    0.000    0.000    0.000 libmpf.py:59(prec_to_dps)
       23    0.000    0.000    0.000    0.000 __init__.py:1267(__init__)
        1    0.000    0.000    0.000    0.000 _pytesttester.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dist.py:244(Distribution)
        1    0.000    0.000    0.000    0.000 mock.py:1256(_patch)
        1    0.000    0.000    0.000    0.000 symbol.py:524(Wild)
        1    0.000    0.000    0.000    0.000 function.py:818(DefinedFunction)
        1    0.000    0.000    0.000    0.000 pprint.py:106(PrettyPrinter)
        1    0.000    0.000    0.000    0.000 transformed_distribution.py:11(TransformedDistribution)
        1    0.000    0.000    0.000    0.000 rules.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pathlib.py:934(_scandir)
       26    0.000    0.000    0.000    0.000 inspect.py:1172(__init__)
       22    0.000    0.000    0.000    0.000 typing.py:913(_is_typevar_like)
        3    0.000    0.000    0.000    0.000 _array_api.py:485(xp_ravel)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:824(coth)
        1    0.000    0.000    0.000    0.000 itt.py:1(<module>)
        2    0.000    0.000    0.000    0.000 datetime.py:923(__new__)
        1    0.000    0.000    0.000    0.000 _type_aliases.py:74(_add_types)
        1    0.000    0.000    0.000    0.000 outputs.py:1962(Outcar)
        1    0.000    0.000    0.000    0.000 pathlib.py:667(with_name)
       78    0.000    0.000    0.000    0.000 {method 'partition' of 'str' objects}
        1    0.000    0.000    0.000    0.000 _realtransforms_backend.py:1(<module>)
       12    0.000    0.000    0.000    0.000 arrayprint.py:739(_extendLine)
        1    0.000    0.000    0.000    0.000 relaxed_bernoulli.py:11(LogitRelaxedBernoulli)
        1    0.000    0.000    0.000    0.000 core.py:103(__diag__)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:8154(pareto_gen)
       18    0.000    0.000    0.000    0.000 _add_newdocs_scalars.py:19(type_aliases_gen)
        1    0.000    0.000    0.000    0.000 ssl.py:484(SSLContext)
        1    0.000    0.000    0.000    0.000 events.py:203(AbstractEventLoop)
       29    0.000    0.000    0.000    0.000 __init__.py:1830(_str_equal)
        1    0.000    0.000    0.000    0.000 pytree_hacks.py:1(<module>)
       44    0.000    0.000    0.000    0.000 core.py:699(<genexpr>)
        1    0.000    0.000    0.000    0.000 _multivariate.py:5334(random_table_gen)
        3    0.000    0.000    0.000    0.000 _codata.py:478(exact2006)
        1    0.000    0.000    0.000    0.000 _type_aliases.py:123(_add_integer_aliases)
        1    0.000    0.000    0.000    0.000 _logical_location.py:12(LogicalLocation)
        1    0.000    0.000    0.000    0.000 rnn.py:518(GRU)
        1    0.000    0.000    0.000    0.000 linalg.py:55(SVDResult)
       32    0.000    0.000    0.000    0.000 arraypad.py:109(<genexpr>)
       15    0.000    0.000    0.000    0.000 __init__.py:593(<genexpr>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3758(erlang_gen)
        1    0.000    0.000    0.000    0.000 _dtype.py:1(<module>)
      138    0.000    0.000    0.000    0.000 core.py:809(postParse)
        1    0.000    0.000    0.000    0.000 patches.py:1510(Circle)
        1    0.000    0.000    0.000    0.000 Physics_System.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4565(halflogistic_gen)
        1    0.000    0.000    0.000    0.000 continued_fraction.py:1(<module>)
        4    0.000    0.000    0.000    0.000 {built-in method _imp.exec_builtin}
        1    0.000    0.000    0.000    0.000 singularityfunctions.py:1(<module>)
        1    0.000    0.000    0.000    0.000 backend_registry.py:43(backend_registered)
        6    0.000    0.000    0.000    0.000 <frozen genericpath>:121(_splitext)
        1    0.000    0.000    0.000    0.000 _version_control_details.py:15(VersionControlDetails)
        2    0.000    0.000    0.000    0.000 _utils_internal.py:23(get_file_path)
       16    0.000    0.000    0.000    0.000 inspect.py:2124(<listcomp>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:10433(truncpareto_gen)
        1    0.000    0.000    0.000    0.000 __init__.py:775(FastPath)
        4    0.000    0.000    0.000    0.000 legend_handler.py:181(__init__)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:117(_sample_formula)
        1    0.000    0.000    0.000    0.000 patches.py:973(PathPatch)
        1    0.000    0.000    0.000    0.000 polyclasses.py:2845(ANP)
        1    0.000    0.000    0.000    0.000 _memory_viz.py:119(__repr__)
       75    0.000    0.000    0.000    0.000 {built-in method _warnings._filters_mutated}
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:276(__init__)
       20    0.000    0.000    0.000    0.000 rcsetup.py:600(_deprecate_case_insensitive_join_cap)
        1    0.000    0.000    0.000    0.000 Manager.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _parser.py:1373(_result)
        3    0.000    0.000    0.000    0.000 intfunc.py:162(igcd)
        1    0.000    0.000    0.000    0.000 _compressed.py:25(_cs_matrix)
        3    0.000    0.000    0.000    0.000 symbolic_opset9.py:2108(decorator)
        2    0.000    0.000    0.000    0.000 {method 'newbyteorder' of 'numpy.generic' objects}
        1    0.000    0.000    0.000    0.000 hamiltonian.py:1(<module>)
        1    0.000    0.000    0.000    0.000 gosper.py:1(<module>)
        4    0.000    0.000    0.000    0.000 gaussiandomains.py:56(__neg__)
        1    0.000    0.000    0.000    0.000 tensor.py:1984(TensExpr)
        3    0.000    0.000    0.000    0.000 {method 'clear' of 'collections.OrderedDict' objects}
        1    0.000    0.000    0.000    0.000 textpath.py:18(TextToPath)
        1    0.000    0.000    0.000    0.000 function_docs.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _infra.py:36(Tag)
        2    0.000    0.000    0.000    0.000 sparsetools.py:1(<module>)
        2    0.000    0.000    0.000    0.000 ordinals.py:81(__new__)
        1    0.000    0.000    0.000    0.000 numbers.py:189(fibonacci)
        1    0.000    0.000    0.000    0.000 sites.py:28(Site)
      115    0.000    0.000    0.000    0.000 dataclasses.py:843(_hash_set_none)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:302(_World)
        1    0.000    0.000    0.000    0.000 proxy_tensor.py:475(ProxyTorchDispatchMode)
        1    0.000    0.000    0.000    0.000 fake_tensor.py:951(FakeTensorMode)
        1    0.000    0.000    0.000    0.000 reductions.py:154(<dictcomp>)
        1    0.000    0.000    0.000    0.000 dirichlet.py:16(_Dirichlet)
       14    0.000    0.000    0.000    0.000 dispatcher.py:113(__init__)
       61    0.000    0.000    0.000    0.000 stride_tricks.py:542(<genexpr>)
        1    0.000    0.000    0.000    0.000 Orbit_spd_without_spin.py:15(orbit_spd_without_spin)
       27    0.000    0.000    0.000    0.000 _testutils.py:86(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:119(Cycler)
       25    0.000    0.000    0.000    0.000 decorator.py:251(deprecated)
        6    0.000    0.000    0.000    0.000 {built-in method math.frexp}
        2    0.000    0.000    0.000    0.000 datetime.py:1336(__new__)
       15    0.000    0.000    0.000    0.000 {method 'item' of 'numpy.generic' objects}
        1    0.000    0.000    0.000    0.000 mathtext.py:3302(MathTextParser)
       79    0.000    0.000    0.000    0.000 reduction.py:43(register)
        3    0.000    0.000    0.000    0.000 arrayprint.py:403(_get_formatdict)
        1    0.000    0.000    0.000    0.000 matcher_utils.py:31(InternalMatch)
       43    0.000    0.000    0.000    0.000 dispatcher.py:120(register)
        7    0.000    0.000    0.000    0.000 getlimits.py:709(max)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:150(_pdf_formula)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:677(rv_generic)
        3    0.000    0.000    0.000    0.000 _adapters.py:30(__new__)
        1    0.000    0.000    0.000    0.000 _rectangle.py:12(Rectangle)
        1    0.000    0.000    0.000    0.000 matadd.py:19(MatAdd)
        2    0.000    0.000    0.000    0.000 libmpi.py:454(mpi_from_str)
        1    0.000    0.000    0.000    0.000 rnn.py:62(RNNBase)
       57    0.000    0.000    0.000    0.000 __init__.py:2291(<genexpr>)
       24    0.000    0.000    0.000    0.000 ctx_iv.py:397(make_mpf)
        1    0.000    0.000    0.000    0.000 observer.py:611(PerChannelMinMaxObserver)
        5    0.000    0.000    0.000    0.000 datetime.py:515(_check_date_fields)
        1    0.000    0.000    0.000    0.000 matrixbase.py:3796(_handle_creation_inputs)
        1    0.000    0.000    0.000    0.000 frontend.py:531(StmtBuilder)
        1    0.000    0.000    0.000    0.000 _graph_traversal.py:16(GraphTraversal)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4391(gumbel_l_gen)
       16    0.000    0.000    0.000    0.000 inspect.py:2230(RewriteSymbolics)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4694(halfnorm_gen)
        1    0.000    0.000    0.000    0.000 _dok.py:17(_dok_base)
        1    0.000    0.000    0.000    0.000 __init__.py:638(levy_stable_gen)
        3    0.000    0.000    0.000    0.000 core.py:708(add_parse_action)
        1    0.000    0.000    0.000    0.000 engine.py:28(Diagnostic)
        4    0.000    0.000    0.000    0.000 function_base.py:1804(trim_zeros)
        1    0.000    0.000    0.000    0.000 _result_provenance.py:15(ResultProvenance)
      129    0.000    0.000    0.000    0.000 fromnumeric.py:1021(_argsort_dispatcher)
        3    0.000    0.000    0.000    0.000 _policybase.py:311(header_fetch_parse)
       18    0.000    0.000    0.000    0.000 traceback.py:310(_original_line)
        1    0.000    0.000    0.000    0.000 subprocess.py:747(Popen)
       54    0.000    0.000    0.000    0.000 decorators.py:23(_sympifyit)
        1    0.000    0.000    0.000    0.000 computed_entries.py:696(GibbsComputedStructureEntry)
        1    0.000    0.000    0.000    0.000 _mio5.py:516(VarWriter5)
       66    0.000    0.000    0.000    0.000 {method 'release' of '_thread.RLock' objects}
       26    0.000    0.000    0.000    0.000 inspect.py:752(_is_wrapper)
        7    0.000    0.000    0.000    0.000 _nonlin.py:1596(<listcomp>)
        1    0.000    0.000    0.000    0.000 polyhedron.py:1015(<listcomp>)
        4    0.000    0.000    0.000    0.000 core.py:5381(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 dbapi2.py:54(register_adapters_and_converters)
        1    0.000    0.000    0.000    0.000 _common.py:149(_tzinfo)
        1    0.000    0.000    0.000    0.000 _message.py:12(Message)
        1    0.000    0.000    0.000    0.000 utilities.py:8(__init__)
       76    0.000    0.000    0.000    0.000 {method 'bit_length' of 'int' objects}
        1    0.000    0.000    0.000    0.000 precedence.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _crash_handler.py:1(<module>)
        2    0.000    0.000    0.000    0.000 numerictypes.py:229(obj2sctype)
        1    0.000    0.000    0.000    0.000 coreerrors.py:14(LazyExceptionMessage)
        1    0.000    0.000    0.000    0.000 emitter.py:103(Emitter)
        1    0.000    0.000    0.000    0.000 bessel.py:1094(SphericalHankelBase)
       26    0.000    0.000    0.000    0.000 tokenize.py:616(generate_tokens)
        1    0.000    0.000    0.000    0.000 unary.py:75(<listcomp>)
        1    0.000    0.000    0.000    0.000 filelist.py:21(FileList)
        1    0.000    0.000    0.000    0.000 boolalg.py:68(Boolean)
       10    0.000    0.000    0.000    0.000 inspect.py:1754(currentframe)
        1    0.000    0.000    0.000    0.000 groebnertools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 periodic_table.py:1431(__init__)
        5    0.000    0.000    0.000    0.000 {built-in method posix.urandom}
        1    0.000    0.000    0.000    0.000 ctx_mp.py:58(MPContext)
        1    0.000    0.000    0.000    0.000 _quantile.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _replicated_tensor_ddp_utils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _tokenizer.py:91(Tokenizer)
        1    0.000    0.000    0.000    0.000 process.py:71(BaseProcess)
       93    0.000    0.000    0.000    0.000 composition.py:542(num_atoms)
        3    0.000    0.000    0.000    0.000 __init__.py:290(__getattr__)
        1    0.000    0.000    0.000    0.000 rk.py:293(RK45)
        1    0.000    0.000    0.000    0.000 _memory_viz.py:104(_format_size)
        1    0.000    0.000    0.000    0.000 threading.py:389(notify_all)
        1    0.000    0.000    0.000    0.000 core.py:321(condition_as_parse_action)
       11    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2035(_preserve_type)
        1    0.000    0.000    0.000    0.000 puiseux.py:231(PuiseuxPoly)
        1    0.000    0.000    0.000    0.000 threads.py:1(<module>)
        1    0.000    0.000    0.000    0.000 font_manager.py:1022(FontManager)
        8    0.000    0.000    0.000    0.000 copyreg.py:12(pickle)
        1    0.000    0.000    0.000    0.000 decompogen.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:136(script_if_tracing)
        1    0.000    0.000    0.000    0.000 _state.py:18(__init__)
       13    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:807(__init__)
        3    0.000    0.000    0.000    0.000 _aliases.py:612(<genexpr>)
        8    0.000    0.000    0.000    0.000 rrule.py:77(<genexpr>)
        1    0.000    0.000    0.000    0.000 batch_norm_replacement.py:1(<module>)
        1    0.000    0.000    0.000    0.000 generators.py:1(<module>)
        5    0.000    0.000    0.000    0.000 assume.py:305(__new__)
        1    0.000    0.000    0.000    0.000 pareto.py:9(Pareto)
        1    0.000    0.000    0.000    0.000 pythonrational.py:1(<module>)
        1    0.000    0.000    0.000    0.000 mock.py:1960(<setcomp>)
        1    0.000    0.000    0.000    0.000 _laplacian.py:1(<module>)
        8    0.000    0.000    0.000    0.000 util.py:119(clear)
        1    0.000    0.000    0.000    0.000 datetime.py:1665(datetime)
      8/2    0.000    0.000    0.000    0.000 densebasic.py:315(_rec_validate)
        1    0.000    0.000    0.000    0.000 sslproto.py:262(SSLProtocol)
        1    0.000    0.000    0.000    0.000 _savitzky_golay.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _suppression.py:12(Suppression)
        1    0.000    0.000    0.000    0.000 para4band.py:327(<listcomp>)
        1    0.000    0.000    0.000    0.000 common.py:449(PMGDir)
       16    0.000    0.000    0.000    0.000 _collections.py:23(freeze)
        8    0.000    0.000    0.000    0.000 {method 'removeprefix' of 'str' objects}
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2898(_icdf_dispatch)
        1    0.000    0.000    0.000    0.000 transforms.py:209(_InverseTransform)
        1    0.000    0.000    0.000    0.000 __init__.py:121(<listcomp>)
        1    0.000    0.000    0.000    0.000 mathtext.py:966(StixFonts)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _methods.py:47(_sum)
        1    0.000    0.000    0.000    0.000 testing.py:126(TestParseResultsAsserts)
        3    0.000    0.000    0.000    0.000 legend_handler.py:341(__init__)
        4    0.000    0.000    0.000    0.000 <frozen os>:1080(__subclasshook__)
        1    0.000    0.000    0.000    0.000 compat.py:62(with_metaclass)
        1    0.000    0.000    0.000    0.000 sites.py:289(PeriodicSite)
       71    0.000    0.000    0.000    0.000 <frozen _collections_abc>:409(__subclasshook__)
        1    0.000    0.000    0.000    0.000 polyclasses.py:2448(DMF)
        2    0.000    0.000    0.000    0.000 cache.py:123(_getenv)
        1    0.000    0.000    0.000    0.000 animation.py:172(AbstractMovieWriter)
        1    0.000    0.000    0.000    0.000 convolutions.py:1(<module>)
        5    0.000    0.000    0.000    0.000 _torch_docs.py:27(merge_dicts)
        1    0.000    0.000    0.000    0.000 sslproto.py:78(_SSLProtocolTransport)
        1    0.000    0.000    0.000    0.000 _probability_distribution.py:5(_ProbabilityDistribution)
        1    0.000    0.000    0.000    0.000 tz.py:41(tzutc)
        1    0.000    0.000    0.000    0.000 resolver.py:106(BaseResolver)
       50    0.000    0.000    0.000    0.000 typing.py:2018(<genexpr>)
       30    0.000    0.000    0.000    0.000 core.py:4416(<genexpr>)
        1    0.000    0.000    0.000    0.000 conv.py:36(_ConvNd)
        1    0.000    0.000    0.000    0.000 tight_binding_hamiltonian.py:18(TBHamiltonian)
        1    0.000    0.000    0.000    0.000 _util.py:671(_workers_wrapper)
        1    0.000    0.000    0.000    0.000 _print_helpers.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _lil.py:20(_lil_base)
        1    0.000    0.000    0.000    0.000 linalg.py:43(EighResult)
        1    0.000    0.000    0.000    0.000 _mmio.py:248(MMFile)
        3    0.000    0.000    0.000    0.000 numbers.py:1397(from_coprime_ints)
       74    0.000    0.000    0.000    0.000 {built-in method builtins.divmod}
        1    0.000    0.000    0.000    0.000 chebyshev.py:1995(Chebyshev)
        1    0.000    0.000    0.000    0.000 dot.py:1(<module>)
        1    0.000    0.000    0.000    0.000 case.py:44(_Outcome)
        1    0.000    0.000    0.000    0.000 _cubature.py:29(CubatureRegion)
        1    0.000    0.000    0.000    0.000 {method 'normal' of 'numpy.random._generator.Generator' objects}
        1    0.000    0.000    0.000    0.000 {built-in method math.log2}
        6    0.000    0.000    0.000    0.000 deprecation.py:269(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:236(SymInt)
        1    0.000    0.000    0.000    0.000 fake_tensor.py:744(FakeTensorConfig)
        1    0.000    0.000    0.000    0.000 argparse.py:157(HelpFormatter)
        1    0.000    0.000    0.000    0.000 mixture_same_family.py:9(MixtureSameFamily)
       33    0.000    0.000    0.000    0.000 {method 'ravel' of 'numpy.ndarray' objects}
        3    0.000    0.000    0.000    0.000 feedparser.py:70(close)
       56    0.000    0.000    0.000    0.000 __init__.py:1894(<genexpr>)
        1    0.000    0.000    0.000    0.000 _thread_flow.py:16(ThreadFlow)
       36    0.000    0.000    0.000    0.000 symbol.py:410(_hashable_content)
        1    0.000    0.000    0.000    0.000 typing.py:1563(__repr__)
        1    0.000    0.000    0.000    0.000 numbers.py:2955(motzkin)
        1    0.000    0.000    0.000    0.000 proxy_tensor.py:397(PythonKeyTracer)
        2    0.000    0.000    0.000    0.000 __init__.py:256(_register_at_fork_reinit_lock)
        1    0.000    0.000    0.000    0.000 single.py:42(SingleODEProblem)
        2    0.000    0.000    0.000    0.000 _helpers.py:310(is_numpy_namespace)
        2    0.000    0.000    0.000    0.000 version.py:523(_cmpkey)
        1    0.000    0.000    0.000    0.000 groups.py:66(SymmetryGroup)
        1    0.000    0.000    0.000    0.000 _run_automation_details.py:12(RunAutomationDetails)
        1    0.000    0.000    0.000    0.000 gzip.py:529(_read_eof)
        6    0.000    0.000    0.000    0.000 _policybase.py:94(_append_doc)
        1    0.000    0.000    0.000    0.000 context.py:30(BaseContext)
        1    0.000    0.000    0.000    0.000 sets.py:1819(EmptySet)
        7    0.000    0.000    0.000    0.000 {method 'read' of '_io.StringIO' objects}
        1    0.000    0.000    0.000    0.000 threading.py:1008(_set_tstate_lock)
        1    0.000    0.000    0.000    0.000 modular.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _edge.py:12(Edge)
        1    0.000    0.000    0.000    0.000 __init__.py:129(Command)
       32    0.000    0.000    0.000    0.000 typing.py:2906(<genexpr>)
        2    0.000    0.000    0.000    0.000 weakref.py:164(__setitem__)
        1    0.000    0.000    0.000    0.000 _spfun_stats.py:1(<module>)
       10    0.000    0.000    0.000    0.000 _text.py:90(lower)
       59    0.000    0.000    0.000    0.000 {function FreezableDefaultDict.__missing__ at 0x146b827f5c60}
        2    0.000    0.000    0.000    0.000 densebasic.py:333(_rec_strip)
        1    0.000    0.000    0.000    0.000 outputs.py:5920(Vaspout)
        1    0.000    0.000    0.000    0.000 ImageChops.py:1(<module>)
        1    0.000    0.000    0.000    0.000 qp_subproblem.py:1(<module>)
        1    0.000    0.000    0.000    0.000 point.py:42(Point)
        1    0.000    0.000    0.000    0.000 _dtype_ctypes.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _threadsafety.py:25(__init__)
        1    0.000    0.000    0.000    0.000 _decomposition_utils.py:1(<module>)
       93    0.000    0.000    0.000    0.000 {method 'ljust' of 'str' objects}
       15    0.000    0.000    0.000    0.000 _helpers.py:660(_check_device)
       16    0.000    0.000    0.000    0.000 doccer.py:82(inherit_docstring_from)
        6    0.000    0.000    0.000    0.000 ctx_mp_python.py:82(mpf_convert_arg)
        1    0.000    0.000    0.000    0.000 datetime.py:893(date)
        1    0.000    0.000    0.000    0.000 linear.py:9(LinearPackedParams)
       40    0.000    0.000    0.000    0.000 typing_extensions.py:723(__hash__)
        1    0.000    0.000    0.000    0.000 _sarif_log.py:16(SarifLog)
        1    0.000    0.000    0.000    0.000 rcode.py:78(RCodePrinter)
        6    0.000    0.000    0.000    0.000 glob.py:222(has_magic)
        1    0.000    0.000    0.000    0.000 __init__.py:112(<listcomp>)
        2    0.000    0.000    0.000    0.000 __init__.py:12(<listcomp>)
        1    0.000    0.000    0.000    0.000 hermite_e.py:1650(HermiteE)
        1    0.000    0.000    0.000    0.000 approximation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 context.py:79(_compose)
       57    0.000    0.000    0.000    0.000 <frozen _collections_abc>:315(__subclasshook__)
       14    0.000    0.000    0.000    0.000 libmpf.py:153(_normalize)
        1    0.000    0.000    0.000    0.000 lsmr.py:1(<module>)
        2    0.000    0.000    0.000    0.000 arrayprint.py:503(decorating_function)
       40    0.000    0.000    0.000    0.000 enum.py:92(_is_single_bit)
       11    0.000    0.000    0.000    0.000 threading.py:90(RLock)
        1    0.000    0.000    0.000    0.000 periodic_table.py:993(Species)
        1    0.000    0.000    0.000    0.000 _rgi.py:56(RegularGridInterpolator)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2067(_num_parameters)
       36    0.000    0.000    0.000    0.000 _pytree.py:59(_list_unflatten)
        1    0.000    0.000    0.000    0.000 numbers.py:32(Complex)
        1    0.000    0.000    0.000    0.000 core.py:87(Magmom)
        1    0.000    0.000    0.000    0.000 _qmc.py:2486(MultinomialQMC)
       12    0.000    0.000    0.000    0.000 {method 'islower' of 'str' objects}
        1    0.000    0.000    0.000    0.000 representer.py:238(SafeRepresenter)
        3    0.000    0.000    0.000    0.000 __init__.py:4998(_make_r_binary_op)
       13    0.000    0.000    0.000    0.000 {method 'index' of 'tuple' objects}
        1    0.000    0.000    0.000    0.000 core.py:5959(__init__)
        1    0.000    0.000    0.000    0.000 octave.py:65(OctaveCodePrinter)
        1    0.000    0.000    0.000    0.000 _node.py:17(Node)
        1    0.000    0.000    0.000    0.000 symbolic_opset13.py:26(_apply)
        1    0.000    0.000    0.000    0.000 _reduction.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _cobyla_py.py:1(<module>)
        1    0.000    0.000    0.000    0.000 futures.py:30(Future)
        1    0.000    0.000    0.000    0.000 trajectory.py:42(Trajectory)
        1    0.000    0.000    0.000    0.000 art3d.py:74(Text3D)
        1    0.000    0.000    0.000    0.000 {built-in method posix.confstr}
        1    0.000    0.000    0.000    0.000 multinomial.py:11(Multinomial)
       32    0.000    0.000    0.000    0.000 arraypad.py:33(_slice_at_axis)
        1    0.000    0.000    0.000    0.000 theta.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:142(CudnnModule)
        1    0.000    0.000    0.000    0.000 legendre.py:1619(Legendre)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:282(define_parameters)
        1    0.000    0.000    0.000    0.000 inputs.py:3075(VaspInput)
        6    0.000    0.000    0.000    0.000 parse.py:786(__getattr__)
        1    0.000    0.000    0.000    0.000 linalg.py:51(SlogdetResult)
        1    0.000    0.000    0.000    0.000 glsl.py:30(GLSLPrinter)
       19    0.000    0.000    0.000    0.000 {method 'mro' of 'type' objects}
        1    0.000    0.000    0.000    0.000 _stats_py.py:9096(QuantileTestResult)
        1    0.000    0.000    0.000    0.000 colors.py:81(__init__)
       41    0.000    0.000    0.000    0.000 typing.py:2835(<listcomp>)
       85    0.000    0.000    0.000    0.000 _compat_pickle.py:167(<genexpr>)
        1    0.000    0.000    0.000    0.000 tempfile.py:665(SpooledTemporaryFile)
        1    0.000    0.000    0.000    0.000 rk.py:183(RK23)
        3    0.000    0.000    0.000    0.000 feedparser.py:53(__init__)
        1    0.000    0.000    0.000    0.000 pickle.py:407(_Pickler)
        1    0.000    0.000    0.000    0.000 datapipe.py:212(MapDataPipe)
        1    0.000    0.000    0.000    0.000 formal.py:968(FormalPowerSeries)
        1    0.000    0.000    0.000    0.000 julia.py:48(JuliaCodePrinter)
        1    0.000    0.000    0.000    0.000 inputs.py:791(Incar)
        1    0.000    0.000    0.000    0.000 ops.py:726(add_comparative_ops)
        1    0.000    0.000    0.000    0.000 parameter.py:81(UninitializedTensorMixin)
        2    0.000    0.000    0.000    0.000 selectors.py:583(_can_use)
        3    0.000    0.000    0.000    0.000 six.py:194(find_spec)
        1    0.000    0.000    0.000    0.000 dev.py:159(__call__)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha224}
        1    0.000    0.000    0.000    0.000 piecewise.py:65(Piecewise)
        1    0.000    0.000    0.000    0.000 __init__.py:192(<dictcomp>)
        1    0.000    0.000    0.000    0.000 dviread.py:789(PsfontsMap)
       16    0.000    0.000    0.000    0.000 ctx_mp_python.py:597(make_mpf)
        1    0.000    0.000    0.000    0.000 _trace.py:1215(_script_if_tracing)
        1    0.000    0.000    0.000    0.000 __init__.py:45(enabled)
        9    0.000    0.000    0.000    0.000 __init__.py:163(__new__)
        1    0.000    0.000    0.000    0.000 independent.py:9(Independent)
        1    0.000    0.000    0.000    0.000 storage.py:981(_LegacyStorage)
        1    0.000    0.000    0.000    0.000 polyhedron.py:1013(<listcomp>)
        5    0.000    0.000    0.000    0.000 pretty_symbology.py:170(<lambda>)
        1    0.000    0.000    0.000    0.000 laguerre.py:1606(Laguerre)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:10826(uniform_gen)
        1    0.000    0.000    0.000    0.000 array_comprehension.py:10(ArrayComprehension)
        1    0.000    0.000    0.000    0.000 repmatrix.py:23(RepMatrix)
        2    0.000    0.000    0.000    0.000 charset.py:211(__init__)
        1    0.000    0.000    0.000    0.000 _linprog_simplex.py:1(<module>)
        7    0.000    0.000    0.000    0.000 dev.py:20(deprecated)
        1    0.000    0.000    0.000    0.000 _survival.py:17(EmpiricalDistributionFunction)
        1    0.000    0.000    0.000    0.000 _physical_location.py:17(PhysicalLocation)
        1    0.000    0.000    0.000    0.000 rref.py:1(<module>)
        1    0.000    0.000    0.000    0.000 euler.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _base.py:352(ProductNestedFixed)
       31    0.000    0.000    0.000    0.000 laplace.py:48(DEBUG_WRAP)
        1    0.000    0.000    0.000    0.000 animation.py:256(MovieWriter)
        1    0.000    0.000    0.000    0.000 std.py:76(TqdmDefaultWriteLock)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:1657(rv_continuous)
        1    0.000    0.000    0.000    0.000 _edge_traversal.py:12(EdgeTraversal)
        1    0.000    0.000    0.000    0.000 hb.py:354(HBMatrixType)
        1    0.000    0.000    0.000    0.000 _state.py:23(parse_env)
        1    0.000    0.000    0.000    0.000 _location_relationship.py:12(LocationRelationship)
        1    0.000    0.000    0.000    0.000 defmatrix.py:73(matrix)
        1    0.000    0.000    0.000    0.000 _stack_frame.py:12(StackFrame)
       14    0.000    0.000    0.000    0.000 util.py:30(__init__)
       28    0.000    0.000    0.000    0.000 {method 'isdisjoint' of 'set' objects}
       12    0.000    0.000    0.000    0.000 patches.py:1883(<genexpr>)
        8    0.000    0.000    0.000    0.000 fontconfig_pattern.py:144(_name)
        1    0.000    0.000    0.000    0.000 dos.py:171(Dos)
       30    0.000    0.000    0.000    0.000 _array_api.py:525(<listcomp>)
        1    0.000    0.000    0.000    0.000 _bsplines.py:69(BSpline)
        1    0.000    0.000    0.000    0.000 ndim_array.py:86(NDimArray)
        4    0.000    0.000    0.000    0.000 libmpf.py:631(mpf_le)
        1    0.000    0.000    0.000    0.000 selector_events.py:43(BaseSelectorEventLoop)
        1    0.000    0.000    0.000    0.000 linalg.py:47(QRResult)
        1    0.000    0.000    0.000    0.000 _reporting_descriptor_relationship.py:16(ReportingDescriptorRelationship)
       12    0.000    0.000    0.000    0.000 typing.py:389(<genexpr>)
        1    0.000    0.000    0.000    0.000 _reporting_configuration.py:12(ReportingConfiguration)
        1    0.000    0.000    0.000    0.000 session.py:1(<module>)
        1    0.000    0.000    0.000    0.000 libmpc.py:205(mpc_div_mpf)
        1    0.000    0.000    0.000    0.000 collections.py:1233(RegularPolyCollection)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3635(_pdf_formula)
        1    0.000    0.000    0.000    0.000 polynomial.py:1077(poly1d)
        1    0.000    0.000    0.000    0.000 hermite.py:1658(Hermite)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1692(reset_cache)
        1    0.000    0.000    0.000    0.000 facts.py:95(deduce_alpha_implications)
        1    0.000    0.000    0.000    0.000 client.py:789(HTTPConnection)
        1    0.000    0.000    0.000    0.000 _external_property_file_reference.py:15(ExternalPropertyFileReference)
        1    0.000    0.000    0.000    0.000 unicode.py:31(unicode_set)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:122(<listcomp>)
        1    0.000    0.000    0.000    0.000 ast.py:74(_convert_signed_num)
        1    0.000    0.000    0.000    0.000 stringpict.py:22(stringPict)
       32    0.000    0.000    0.000    0.000 arraypad.py:120(<genexpr>)
        1    0.000    0.000    0.000    0.000 _attachment.py:18(Attachment)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:348(_sample_formula)
       44    0.000    0.000    0.000    0.000 core.py:4405(<genexpr>)
        1    0.000    0.000    0.000    0.000 core.py:4918(__init__)
        1    0.000    0.000    0.000    0.000 transforms.py:687(AffineTransform)
       10    0.000    0.000    0.000    0.000 version.py:319(<listcomp>)
        1    0.000    0.000    0.000    0.000 defchararray.py:1922(chararray)
       41    0.000    0.000    0.000    0.000 decorators.py:83(call_highest_priority)
        1    0.000    0.000    0.000    0.000 argparse.py:1142(_SubParsersAction)
        1    0.000    0.000    0.000    0.000 _version.py:136(__lt__)
        1    0.000    0.000    0.000    0.000 ctx_mp_python.py:39(_mpf)
        2    0.000    0.000    0.000    0.000 ctx_mp_python.py:145(__float__)
        1    0.000    0.000    0.000    0.000 operations.py:29(SymmOp)
        1    0.000    0.000    0.000    0.000 _type_aliases.py:151(_set_up_aliases)
        1    0.000    0.000    0.000    0.000 _lobpcg.py:695(LOBPCG)
        2    0.000    0.000    0.000    0.000 densebasic.py:255(dup_strip)
        3    0.000    0.000    0.000    0.000 zipfile.py:1868(__del__)
        1    0.000    0.000    0.000    0.000 computed_entries.py:287(ComputedEntry)
        1    0.000    0.000    0.000    0.000 free_groups.py:350(FreeGroupElement)
        1    0.000    0.000    0.000    0.000 sparse.py:13(Embedding)
        1    0.000    0.000    0.000    0.000 structure.py:3439(IMolecule)
        1    0.000    0.000    0.000    0.000 _ltisys.py:490(TransferFunction)
        1    0.000    0.000    0.000    0.000 linear.py:99(Linear)
        8    0.000    0.000    0.000    0.000 {method 'transpose' of 'numpy.ndarray' objects}
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3121(_one)
        8    0.000    0.000    0.000    0.000 __init__.py:56(__init_subclass__)
        1    0.000    0.000    0.000    0.000 _script.py:562(RecursiveScriptModule)
        7    0.000    0.000    0.000    0.000 legend_handler.py:136(__init__)
       10    0.000    0.000    0.000    0.000 gaussiandomains.py:27(new)
        1    0.000    0.000    0.000    0.000 _script.py:486(ScriptModule)
        3    0.000    0.000    0.000    0.000 core.py:5093(_generateDefaultName)
       24    0.000    0.000    0.000    0.000 dviread.py:168(<listcomp>)
        1    0.000    0.000    0.000    0.000 sparse.py:226(EmbeddingBag)
        7    0.000    0.000    0.000    0.000 core.py:2544(_arraymethod)
        1    0.000    0.000    0.000    0.000 transformer.py:593(TransformerDecoderLayer)
        1    0.000    0.000    0.000    0.000 conv.py:675(ConvTranspose1d)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:5028(Mixture)
       13    0.000    0.000    0.000    0.000 enum.py:775(__iter__)
        1    0.000    0.000    0.000    0.000 _tool_component_reference.py:12(ToolComponentReference)
        1    0.000    0.000    0.000    0.000 analyzer.py:84(SpacegroupAnalyzer)
        1    0.000    0.000    0.000    0.000 cse_opts.py:1(<module>)
        1    0.000    0.000    0.000    0.000 conditionset.py:19(ConditionSet)
        1    0.000    0.000    0.000    0.000 entity.py:71(GeometryEntity)
        1    0.000    0.000    0.000    0.000 transformer.py:370(TransformerEncoderLayer)
       59    0.000    0.000    0.000    0.000 {method 'pop' of 'set' objects}
        1    0.000    0.000    0.000    0.000 queues.py:21(Queue)
        1    0.000    0.000    0.000    0.000 sparse.py:9(Embedding)
        1    0.000    0.000    0.000    0.000 core.py:2420(__init__)
       18    0.000    0.000    0.000    0.000 _data.py:142(_create_method)
        1    0.000    0.000    0.000    0.000 _artifact_location.py:12(ArtifactLocation)
        2    0.000    0.000    0.000    0.000 pathlib.py:777(parent)
        1    0.000    0.000    0.000    0.000 _matrix.py:1(spmatrix)
        1    0.000    0.000    0.000    0.000 finite_diff.py:1(<module>)
       33    0.000    0.000    0.000    0.000 _collections.py:24(<lambda>)
        1    0.000    0.000    0.000    0.000 algebraicfield.py:15(AlgebraicField)
        1    0.000    0.000    0.000    0.000 __init__.py:869(ByteStorage)
        2    0.000    0.000    0.000    0.000 _importlib.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _finite_differences.py:1(<module>)
       13    0.000    0.000    0.000    0.000 enum.py:116(_iter_bits_lsb)
        1    0.000    0.000    0.000    0.000 _pylab_helpers.py:10(Gcf)
        1    0.000    0.000    0.000    0.000 tight_layout.py:1(<module>)
        1    0.000    0.000    0.000    0.000 structure.py:4137(Structure)
        5    0.000    0.000    0.000    0.000 ctx_base.py:458(memoize)
        1    0.000    0.000    0.000    0.000 function.py:517(once_differentiable)
        1    0.000    0.000    0.000    0.000 tripcolor.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:21(__deprecated_private_func)
        1    0.000    0.000    0.000    0.000 prufer.py:11(Prufer)
        7    0.000    0.000    0.000    0.000 {method 'extend' of 'collections.deque' objects}
        1    0.000    0.000    0.000    0.000 symbolic_opset13.py:425(_reduce_with_dtype)
        1    0.000    0.000    0.000    0.000 fusion.py:1(<module>)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:71(_export_c_types)
       17    0.000    0.000    0.000    0.000 __init__.py:438(<dictcomp>)
        5    0.000    0.000    0.000    0.000 __init__.py:750(__init__)
        1    0.000    0.000    0.000    0.000 tz.py:132(tzoffset)
        1    0.000    0.000    0.000    0.000 dir_util.py:30(wrap)
        1    0.000    0.000    0.000    0.000 _tzpath.py:31(_parse_python_tzpath)
       12    0.000    0.000    0.000    0.000 fake_tensor.py:327(register_op_impl)
        1    0.000    0.000    0.000    0.000 polynomialring.py:10(PolynomialRing)
        2    0.000    0.000    0.000    0.000 matexpr.py:81(__new__)
        5    0.000    0.000    0.000    0.000 __init__.py:10(set_module)
        1    0.000    0.000    0.000    0.000 _pade.py:1(<module>)
        1    0.000    0.000    0.000    0.000 tensor.py:416(_TensorDataLazyEvaluator)
       18    0.000    0.000    0.000    0.000 __init__.py:788(__init__)
        1    0.000    0.000    0.000    0.000 _aliases.py:122(ones)
        1    0.000    0.000    0.000    0.000 _artifact_content.py:15(ArtifactContent)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1832(tol)
        1    0.000    0.000    0.000    0.000 image.py:1010(NonUniformImage)
        1    0.000    0.000    0.000    0.000 fake_quantize.py:60(FakeQuantizeBase)
       14    0.000    0.000    0.000    0.000 {method 'seek' of '_io.BufferedReader' objects}
        1    0.000    0.000    0.000    0.000 complexfield.py:16(ComplexField)
        5    0.000    0.000    0.000    0.000 {method 'write' of '_io.StringIO' objects}
        1    0.000    0.000    0.000    0.000 patches.py:2415(_Base)
        1    0.000    0.000    0.000    0.000 residues.py:1(<module>)
        4    0.000    0.000    0.000    0.000 results.py:224(__setitem__)
        1    0.000    0.000    0.000    0.000 comments.py:706(CommentedMap)
       15    0.000    0.000    0.000    0.000 ssl.py:1000(_sslcopydoc)
        1    0.000    0.000    0.000    0.000 _data.py:168(_minmax_mixin)
        1    0.000    0.000    0.000    0.000 core.py:238(<listcomp>)
        1    0.000    0.000    0.000    0.000 io_utils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sets.py:1035(Interval)
        1    0.000    0.000    0.000    0.000 utils.py:17(LinearBlockSparsePattern)
        1    0.000    0.000    0.000    0.000 exponential.py:10(Exponential)
        3    0.000    0.000    0.000    0.000 message.py:150(__init__)
        1    0.000    0.000    0.000    0.000 loss.py:1498(TripletMarginWithDistanceLoss)
        1    0.000    0.000    0.000    0.000 rnn.py:178(LSTMCell)
        1    0.000    0.000    0.000    0.000 repr.py:18(ReprPrinter)
        1    0.000    0.000    0.000    0.000 __init__.py:527(Distribution)
        1    0.000    0.000    0.000    0.000 monomials.py:512(Monomial)
       36    0.000    0.000    0.000    0.000 {method 'issuperset' of 'set' objects}
        8    0.000    0.000    0.000    0.000 __init__.py:150(<genexpr>)
        1    0.000    0.000    0.000    0.000 miscellaneous.py:379(MinMaxBase)
       38    0.000    0.000    0.000    0.000 ops.py:33(set_doc_string)
        2    0.000    0.000    0.000    0.000 _adapters.py:165(wrap_spec)
        5    0.000    0.000    0.000    0.000 _torch_docs.py:28(<dictcomp>)
       36    0.000    0.000    0.000    0.000 __init__.py:888(__bool__)
       36    0.000    0.000    0.000    0.000 discovery.py:252(<genexpr>)
       15    0.000    0.000    0.000    0.000 weakref.py:427(__setitem__)
        1    0.000    0.000    0.000    0.000 numpy.py:37(NumPyPrinter)
        1    0.000    0.000    0.000    0.000 base64mime.py:1(<module>)
        1    0.000    0.000    0.000    0.000 mathtext.py:642(BakomaFonts)
        1    0.000    0.000    0.000    0.000 reductions.py:52(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:939(ByteStorage)
        1    0.000    0.000    0.000    0.000 art3d.py:128(Line3D)
        1    0.000    0.000    0.000    0.000 qmc.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _multiformat_message_string.py:12(MultiformatMessageString)
        1    0.000    0.000    0.000    0.000 abc.py:14(ResourceReader)
        5    0.000    0.000    0.000    0.000 {built-in method posix.register_at_fork}
        5    0.000    0.000    0.000    0.000 core.py:6175(token_map)
        1    0.000    0.000    0.000    0.000 ctx_mp_python.py:623(convert)
        6    0.000    0.000    0.000    0.000 libmpf.py:653(mpf_pos)
        1    0.000    0.000    0.000    0.000 {built-in method time.localtime}
        1    0.000    0.000    0.000    0.000 numpy.py:9(<listcomp>)
        6    0.000    0.000    0.000    0.000 {method 'copy' of 'numpy.generic' objects}
        4    0.000    0.000    0.000    0.000 kind.py:75(__new__)
       28    0.000    0.000    0.000    0.000 _decorator.py:14(__init__)
        1    0.000    0.000    0.000    0.000 common.py:465(<dictcomp>)
        1    0.000    0.000    0.000    0.000 dist.py:1109(DistributionMetadata)
        1    0.000    0.000    0.000    0.000 _text.py:7(FoldedCase)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2331(_median_dispatch)
        1    0.000    0.000    0.000    0.000 dataclasses.py:1224(fields)
        2    0.000    0.000    0.000    0.000 <frozen _collections_abc>:444(<listcomp>)
        1    0.000    0.000    0.000    0.000 axis.py:1965(XAxis)
        1    0.000    0.000    0.000    0.000 conv.py:16(_ConvNd)
        1    0.000    0.000    0.000    0.000 memory_format.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:71(MkldnnModule)
        1    0.000    0.000    0.000    0.000 _interpolate.py:173(interp1d)
        1    0.000    0.000    0.000    0.000 __init__.py:353(get_device_name)
        1    0.000    0.000    0.000    0.000 random.py:284(randrange)
        1    0.000    0.000    0.000    0.000 finitefield.py:108(FiniteField)
        2    0.000    0.000    0.000    0.000 {built-in method posix.access}
        6    0.000    0.000    0.000    0.000 monkey.py:60(<genexpr>)
        2    0.000    0.000    0.000    0.000 {built-in method posix.unsetenv}
       37    0.000    0.000    0.000    0.000 numbers.py:1761(as_coeff_Mul)
        1    0.000    0.000    0.000    0.000 base_backend.py:49(Plot)
        1    0.000    0.000    0.000    0.000 _internal.py:240(_missing_ctypes)
        1    0.000    0.000    0.000    0.000 named_groups.py:1(<module>)
       20    0.000    0.000    0.000    0.000 enum.py:1609(_simple_enum)
       14    0.000    0.000    0.000    0.000 libelefun.py:85(constant_memo)
       10    0.000    0.000    0.000    0.000 symbol.py:798(<listcomp>)
        1    0.000    0.000    0.000    0.000 _bracket.py:1(<module>)
        1    0.000    0.000    0.000    0.000 subsets.py:6(Subset)
        8    0.000    0.000    0.000    0.000 mock.py:322(_delegating_property)
       38    0.000    0.000    0.000    0.000 ops.py:25(set_doc)
        1    0.000    0.000    0.000    0.000 _data.py:20(_data_matrix)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:307(_pdf_formula)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:506(rv_frozen)
        1    0.000    0.000    0.000    0.000 _graph.py:17(Graph)
        1    0.000    0.000    0.000    0.000 random.py:103(Random)
        1    0.000    0.000    0.000    0.000 _conversion.py:17(Conversion)
       10    0.000    0.000    0.000    0.000 dataclasses.py:847(<listcomp>)
        6    0.000    0.000    0.000    0.000 basic.py:149(<genexpr>)
        1    0.000    0.000    0.000    0.000 _diagnostic.py:99(__init__)
        1    0.000    0.000    0.000    0.000 ssl.py:845(SSLObject)
        1    0.000    0.000    0.000    0.000 matexpr.py:739(_LeftRightArgs)
        1    0.000    0.000    0.000    0.000 modularinteger.py:15(ModularInteger)
        1    0.000    0.000    0.000    0.000 embedding_ops.py:70(Embedding)
       58    0.000    0.000    0.000    0.000 _utils.py:770(__init__)
        1    0.000    0.000    0.000    0.000 mathematica.py:122(MCodePrinter)
        1    0.000    0.000    0.000    0.000 gaussiandomains.py:16(GaussianElement)
        1    0.000    0.000    0.000    0.000 polytools.py:7556(GroebnerBasis)
        2    0.000    0.000    0.000    0.000 gzip.py:463(_init_read)
        1    0.000    0.000    0.000    0.000 difflib.py:44(SequenceMatcher)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:418(_mode_formula)
        9    0.000    0.000    0.000    0.000 core.py:3771(parseImpl)
        4    0.000    0.000    0.000    0.000 serialization.py:90(register_package)
        1    0.000    0.000    0.000    0.000 client.py:108(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _stdlib.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _csr.py:18(_csr_base)
        1    0.000    0.000    0.000    0.000 bessel.py:1207(hn2)
        1    0.000    0.000    0.000    0.000 _differentialevolution.py:507(DifferentialEvolutionSolver)
       74    0.000    0.000    0.000    0.000 util.py:245(no_escape_re_range_char)
        1    0.000    0.000    0.000    0.000 polyhedron.py:1011(<listcomp>)
        1    0.000    0.000    0.000    0.000 conv.py:806(ConvTranspose2d)
        1    0.000    0.000    0.000    0.000 _ltisys.py:1221(StateSpace)
        1    0.000    0.000    0.000    0.000 ast.py:70(_convert_num)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:816(matches)
        1    0.000    0.000    0.000    0.000 subspaces.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pycode.py:664(CmathPrinter)
        1    0.000    0.000    0.000    0.000 constructor.py:62(BaseConstructor)
        1    0.000    0.000    0.000    0.000 conv.py:961(ConvTranspose3d)
        5    0.000    0.000    0.000    0.000 <frozen _collections_abc>:489(_type_repr)
        1    0.000    0.000    0.000    0.000 debug.py:1(<module>)
        4    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:254(_requires_builtin_wrapper)
        2    0.000    0.000    0.000    0.000 _parser.py:1006(addgroup)
        1    0.000    0.000    0.000    0.000 queue.py:28(Queue)
        1    0.000    0.000    0.000    0.000 _trustregion_exact.py:185(IterativeSubproblem)
        1    0.000    0.000    0.000    0.000 embedding_ops.py:195(EmbeddingBag)
        5    0.000    0.000    0.000    0.000 pretty_symbology.py:176(<lambda>)
        1    0.000    0.000    0.000    0.000 glob.py:31(iglob)
        1    0.000    0.000    0.000    0.000 _bsr.py:24(_bsr_base)
        1    0.000    0.000    0.000    0.000 re.py:1(<module>)
        1    0.000    0.000    0.000    0.000 comments.py:88(Comment)
        1    0.000    0.000    0.000    0.000 gamma.py:14(Gamma)
        1    0.000    0.000    0.000    0.000 _extract.py:1(<module>)
        5    0.000    0.000    0.000    0.000 pretty_symbology.py:172(<lambda>)
        1    0.000    0.000    0.000    0.000 tasks.py:78(Task)
        1    0.000    0.000    0.000    0.000 optimizer.py:154(Optimizer)
        1    0.000    0.000    0.000    0.000 digits.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:1329(make_mask_descr)
       13    0.000    0.000    0.000    0.000 basic.py:539(__ne__)
        1    0.000    0.000    0.000    0.000 _tool.py:12(Tool)
        1    0.000    0.000    0.000    0.000 zipfile.py:1216(ZipFile)
        1    0.000    0.000    0.000    0.000 context.py:297(passes)
        1    0.000    0.000    0.000    0.000 threading.py:838(Thread)
        1    0.000    0.000    0.000    0.000 file_util.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dispatcher.py:89(Dispatcher)
       11    0.000    0.000    0.000    0.000 eigen.py:41(defun)
        1    0.000    0.000    0.000    0.000 _lebedev.py:1(<module>)
        1    0.000    0.000    0.000    0.000 matrices.py:9(_matrix)
        1    0.000    0.000    0.000    0.000 socket.py:214(socket)
       14    0.000    0.000    0.000    0.000 mixins.py:26(_reflected_binary_method)
       52    0.000    0.000    0.000    0.000 pathlib.py:327(_select_from)
        1    0.000    0.000    0.000    0.000 _interpolate.py:1279(BPoly)
        1    0.000    0.000    0.000    0.000 _infra.py:272(<setcomp>)
        1    0.000    0.000    0.000    0.000 textplot.py:1(<module>)
       55    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1867(validation_policy)
        1    0.000    0.000    0.000    0.000 modules.py:1280(ModuleElement)
        1    0.000    0.000    0.000    0.000 linear.py:17(LinearPackedParams)
        1    0.000    0.000    0.000    0.000 mock.py:2158(AsyncMockMixin)
        1    0.000    0.000    0.000    0.000 distance.py:1796(MetricInfo)
        1    0.000    0.000    0.000    0.000 periodic_table.py:1413(DummySpecies)
        1    0.000    0.000    0.000    0.000 deutils.py:1(<module>)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1759(<listcomp>)
       31    0.000    0.000    0.000    0.000 _base.py:51(__init__)
       11    0.000    0.000    0.000    0.000 windows.py:53(decorator)
       59    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1846(cache_policy)
        1    0.000    0.000    0.000    0.000 factor_.py:665(FactorCache)
        1    0.000    0.000    0.000    0.000 setupcfg.py:228(ConfigHandler)
       13    0.000    0.000    0.000    0.000 _conversions.py:38(_make_conversion_method)
        1    0.000    0.000    0.000    0.000 ctx_iv.py:304(MPIntervalContext)
        1    0.000    0.000    0.000    0.000 datetime.py:573(timedelta)
        1    0.000    0.000    0.000    0.000 _array_api.py:659(_XPSphinxCapability)
        1    0.000    0.000    0.000    0.000 fontconfig_pattern.py:27(FontconfigPatternParser)
        1    0.000    0.000    0.000    0.000 _fix.py:16(Fix)
        1    0.000    0.000    0.000    0.000 rnn.py:111(RNNCell)
        2    0.000    0.000    0.000    0.000 operations.py:613(__init__)
        1    0.000    0.000    0.000    0.000 tensor.py:812(__init__)
        1    0.000    0.000    0.000    0.000 collections.py:1824(TriMesh)
        1    0.000    0.000    0.000    0.000 numbers.py:294(Integral)
        1    0.000    0.000    0.000    0.000 core.py:3750(__init__)
        1    0.000    0.000    0.000    0.000 core.py:191(<listcomp>)
        1    0.000    0.000    0.000    0.000 ctx_mp_python.py:359(_mpc)
       45    0.000    0.000    0.000    0.000 fromnumeric.py:3172(_ndim_dispatcher)
        1    0.000    0.000    0.000    0.000 message.py:972(MIMEPart)
        1    0.000    0.000    0.000    0.000 index_tricks.py:310(AxisConcatenator)
        2    0.000    0.000    0.000    0.000 {method 'replace' of 'code' objects}
        1    0.000    0.000    0.000    0.000 function.py:2101(Subs)
       13    0.000    0.000    0.000    0.000 utils.py:35(wrapper)
        1    0.000    0.000    0.000    0.000 blockmatrix.py:24(BlockMatrix)
        1    0.000    0.000    0.000    0.000 pythonmpq.py:46(PythonMPQ)
        1    0.000    0.000    0.000    0.000 line.py:50(LinearEntity)
        1    0.000    0.000    0.000    0.000 units.py:141(<dictcomp>)
        1    0.000    0.000    0.000    0.000 series.py:989(Line2DBaseSeries)
        1    0.000    0.000    0.000    0.000 band.py:16(Band)
        1    0.000    0.000    0.000    0.000 _cobyqa_py.py:1(<module>)
       38    0.000    0.000    0.000    0.000 observer.py:53(__init__)
       77    0.000    0.000    0.000    0.000 signal.py:16(<lambda>)
       13    0.000    0.000    0.000    0.000 _internal.py:920(npy_ctypes_check)
        1    0.000    0.000    0.000    0.000 polygon.py:28(Polygon)
       29    0.000    0.000    0.000    0.000 {method 'rsplit' of 'str' objects}
       58    0.000    0.000    0.000    0.000 units.py:138(<genexpr>)
        3    0.000    0.000    0.000    0.000 core.py:714(<listcomp>)
        1    0.000    0.000    0.000    0.000 _property_bag.py:10(PropertyBag)
        1    0.000    0.000    0.000    0.000 shape_prop.py:11(TensorMetadata)
        1    0.000    0.000    0.000    0.000 _deprecate.py:1(<module>)
        1    0.000    0.000    0.000    0.000 integerring.py:20(IntegerRing)
       37    0.000    0.000    0.000    0.000 function_base.py:19(_linspace_dispatcher)
        1    0.000    0.000    0.000    0.000 qfunctions.py:1(<module>)
        1    0.000    0.000    0.000    0.000 exponential.py:35(ExpBase)
       12    0.000    0.000    0.000    0.000 doccer.py:139(extend_notes_in_docstring)
        1    0.000    0.000    0.000    0.000 settings.py:27(JonesFaithfulTransformation)
        7    0.000    0.000    0.000    0.000 fractions.py:277(_operator_fallbacks)
        7    0.000    0.000    0.000    0.000 graph.py:57(_register_custom_builtin)
       30    0.000    0.000    0.000    0.000 symbolic_opset9.py:289(_apply_params)
        1    0.000    0.000    0.000    0.000 threading.py:555(__init__)
        6    0.000    0.000    0.000    0.000 symbolic_opset8.py:70(_apply)
        1    0.000    0.000    0.000    0.000 coroutines.py:1(<module>)
       18    0.000    0.000    0.000    0.000 ops.py:312(__init__)
        1    0.000    0.000    0.000    0.000 _lambertw.py:1(<module>)
        1    0.000    0.000    0.000    0.000 representer.py:52(BaseRepresenter)
        1    0.000    0.000    0.000    0.000 pooling.py:16(_MaxPoolNd)
        1    0.000    0.000    0.000    0.000 tensor.py:98(_IndexStructure)
        2    0.000    0.000    0.000    0.000 core.py:3613(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 {method 'view' of 'numpy.generic' objects}
       10    0.000    0.000    0.000    0.000 axis.py:1935(_make_getset_interval)
        1    0.000    0.000    0.000    0.000 std.py:131(Bar)
        1    0.000    0.000    0.000    0.000 __init__.py:98(<listcomp>)
        1    0.000    0.000    0.000    0.000 _bunch.py:1(<module>)
        2    0.000    0.000    0.000    0.000 polyclasses.py:155(new)
        1    0.000    0.000    0.000    0.000 _testutils.py:138(_TestPythranFunc)
        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:1037(_resolve_name)
        1    0.000    0.000    0.000    0.000 core.py:3039(Regex)
        1    0.000    0.000    0.000    0.000 canonical_constraint.py:5(CanonicalConstraint)
       32    0.000    0.000    0.000    0.000 decorators.py:210(__init__)
        1    0.000    0.000    0.000    0.000 collections.py:1684(EllipseCollection)
        1    0.000    0.000    0.000    0.000 transforms.py:391(IndependentTransform)
        1    0.000    0.000    0.000    0.000 _covariance.py:11(Covariance)
        5    0.000    0.000    0.000    0.000 _compression.py:12(_check_not_closed)
       78    0.000    0.000    0.000    0.000 signal.py:21(<lambda>)
        1    0.000    0.000    0.000    0.000 collections.py:887(_CollectionWithSizes)
        1    0.000    0.000    0.000    0.000 ImagePalette.py:31(ImagePalette)
        4    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3125(_constants)
       20    0.000    0.000    0.000    0.000 inverselaplace.py:17(__init__)
        1    0.000    0.000    0.000    0.000 is_from_package.py:1(<module>)
        1    0.000    0.000    0.000    0.000 normal.py:12(Normal)
        2    0.000    0.000    0.000    0.000 __init__.py:1646(addHandler)
        1    0.000    0.000    0.000    0.000 plane.py:30(Plane)
       20    0.000    0.000    0.000    0.000 _parser.py:160(__delitem__)
        1    0.000    0.000    0.000    0.000 _chandrupatla.py:1(<module>)
        3    0.000    0.000    0.000    0.000 typing_extensions.py:2877(__init__)
        1    0.000    0.000    0.000    0.000 tfqmr.py:1(<module>)
        1    0.000    0.000    0.000    0.000 specifiers.py:44(BaseSpecifier)
        5    0.000    0.000    0.000    0.000 datetime.py:528(_check_time_fields)
       32    0.000    0.000    0.000    0.000 decorators.py:196(sympify_return)
        1    0.000    0.000    0.000    0.000 _code_flow.py:16(CodeFlow)
        1    0.000    0.000    0.000    0.000 modules.py:840(Submodule)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha512}
        1    0.000    0.000    0.000    0.000 relational.py:65(Relational)
        1    0.000    0.000    0.000    0.000 error.py:35(HTTPError)
       29    0.000    0.000    0.000    0.000 core.py:4695(recurse)
        1    0.000    0.000    0.000    0.000 _shgo.py:488(SHGO)
        1    0.000    0.000    0.000    0.000 operations.py:516(MagSymmOp)
        1    0.000    0.000    0.000    0.000 bessel.py:1151(hn1)
        1    0.000    0.000    0.000    0.000 bandstructure.py:38(Kpoint)
        1    0.000    0.000    0.000    0.000 _builtins.py:114(_gen_torch_functional_registered_ops)
        1    0.000    0.000    0.000    0.000 _symbolic_trace.py:994(wrap)
       48    0.000    0.000    0.000    0.000 periodic_table.py:1531(symbol)
        1    0.000    0.000    0.000    0.000 linear_relu.py:12(LinearReLU)
        3    0.000    0.000    0.000    0.000 bz2.py:135(readable)
        1    0.000    0.000    0.000    0.000 decorator.py:85(conserve_mpmath_dps)
        1    0.000    0.000    0.000    0.000 pydoc.py:1159(TextDoc)
        1    0.000    0.000    0.000    0.000 distance.py:1984(<dictcomp>)
        1    0.000    0.000    0.000    0.000 __init__.py:1803(LoggerAdapter)
        1    0.000    0.000    0.000    0.000 conv.py:588(_ConvTransposeNd)
        1    0.000    0.000    0.000    0.000 maple.py:84(MapleCodePrinter)
        1    0.000    0.000    0.000    0.000 _digraph.py:5(DiGraph)
       13    0.000    0.000    0.000    0.000 mixins.py:36(_inplace_binary_method)
        1    0.000    0.000    0.000    0.000 _factories.py:56(__init__)
       43    0.000    0.000    0.000    0.000 _compat_pickle.py:165(<genexpr>)
        1    0.000    0.000    0.000    0.000 client.py:239(HTTPResponse)
        1    0.000    0.000    0.000    0.000 modules.py:204(Module)
        5    0.000    0.000    0.000    0.000 _basic.py:3031(<listcomp>)
       45    0.000    0.000    0.000    0.000 ctx_iv.py:394(<lambda>)
       36    0.000    0.000    0.000    0.000 _pytree.py:56(_list_flatten)
        1    0.000    0.000    0.000    0.000 comments.py:273(CommentedBase)
        1    0.000    0.000    0.000    0.000 hyper.py:866(HyperRep_power1)
        2    0.000    0.000    0.000    0.000 <frozen _collections_abc>:262(__subclasshook__)
        1    0.000    0.000    0.000    0.000 font_manager.py:618(FontProperties)
        1    0.000    0.000    0.000    0.000 observer.py:1365(RecordingObserver)
        1    0.000    0.000    0.000    0.000 typing.py:1258(__mro_entries__)
        1    0.000    0.000    0.000    0.000 homomorphisms.py:18(ModuleHomomorphism)
        1    0.000    0.000    0.000    0.000 core.py:80(__compat__)
        1    0.000    0.000    0.000    0.000 legend_handler.py:545(__init__)
        1    0.000    0.000    0.000    0.000 dirichlet.py:30(Dirichlet)
        1    0.000    0.000    0.000    0.000 __init__.py:37(FoldedCase)
        4    0.000    0.000    0.000    0.000 assumptions.py:484(generator)
        1    0.000    0.000    0.000    0.000 iterators.py:1(<module>)
        1    0.000    0.000    0.000    0.000 jscode.py:46(JavascriptCodePrinter)
        1    0.000    0.000    0.000    0.000 remote_device.py:6(_remote_device)
        1    0.000    0.000    0.000    0.000 pycode.py:763(<listcomp>)
        1    0.000    0.000    0.000    0.000 collections.py:1888(QuadMesh)
        1    0.000    0.000    0.000    0.000 error_functions.py:1828(Si)
       23    0.000    0.000    0.000    0.000 functools.py:972(__set_name__)
        1    0.000    0.000    0.000    0.000 _text_layout.py:1(<module>)
       14    0.000    0.000    0.000    0.000 pathlib.py:94(join_parsed_parts)
        1    0.000    0.000    0.000    0.000 _replacement.py:16(Replacement)
        1    0.000    0.000    0.000    0.000 bz2.py:131(seekable)
        1    0.000    0.000    0.000    0.000 hyper.py:90(hyper)
        1    0.000    0.000    0.000    0.000 _special_locations.py:15(SpecialLocations)
        1    0.000    0.000    0.000    0.000 linear.py:67(Linear)
        1    0.000    0.000    0.000    0.000 special.py:181(__new__)
        1    0.000    0.000    0.000    0.000 domainscalar.py:17(DomainScalar)
        7    0.000    0.000    0.000    0.000 rrule.py:70(__init__)
        9    0.000    0.000    0.000    0.000 _apply_pyprojecttoml.py:388(_attrgetter)
        1    0.000    0.000    0.000    0.000 _csc.py:17(_csc_base)
        1    0.000    0.000    0.000    0.000 cnf.py:270(CNF)
        6    0.000    0.000    0.000    0.000 _exceptions.py:17(_display_as_base)
        1    0.000    0.000    0.000    0.000 ctx_iv.py:386(_set_prec)
        1    0.000    0.000    0.000    0.000 __init__.py:1327(_TorchCompileInductorWrapper)
        2    0.000    0.000    0.000    0.000 _helpers.py:305(_compat_module_name)
        1    0.000    0.000    0.000    0.000 _binary.py:1(<module>)
        1    0.000    0.000    0.000    0.000 transforms.py:1098(StackTransform)
        1    0.000    0.000    0.000    0.000 polygon.py:1420(RegularPolygon)
        1    0.000    0.000    0.000    0.000 parser.py:102(Parser)
        1    0.000    0.000    0.000    0.000 _configuration_override.py:16(ConfigurationOverride)
        1    0.000    0.000    0.000    0.000 expressionrawdomain.py:12(ExpressionRawDomain)
        1    0.000    0.000    0.000    0.000 typing.py:1569(<listcomp>)
        1    0.000    0.000    0.000    0.000 _interpolate.py:151(_check_broadcast_up_to)
        1    0.000    0.000    0.000    0.000 _resampling.py:2175(PermutationMethod)
        1    0.000    0.000    0.000    0.000 core.py:1315(_replace_dtype_fields)
        1    0.000    0.000    0.000    0.000 util.py:103(__init__)
        1    0.000    0.000    0.000    0.000 backend_bases.py:733(GraphicsContextBase)
        1    0.000    0.000    0.000    0.000 fourier.py:127(FourierSeries)
        3    0.000    0.000    0.000    0.000 _weakrefset.py:85(add)
        1    0.000    0.000    0.000    0.000 realfield.py:54(RealField)
        3    0.000    0.000    0.000    0.000 _policybase.py:281(_sanitize_header)
        1    0.000    0.000    0.000    0.000 _kde.py:36(gaussian_kde)
        1    0.000    0.000    0.000    0.000 units.py:277(FloatWithUnit)
        1    0.000    0.000    0.000    0.000 transforms.py:2266(CompositeGenericTransform)
        1    0.000    0.000    0.000    0.000 proxy.py:455(Attribute)
        1    0.000    0.000    0.000    0.000 axis.py:2253(YAxis)
        1    0.000    0.000    0.000    0.000 request.py:1694(URLopener)
        1    0.000    0.000    0.000    0.000 _multivariate.py:295(multivariate_normal_gen)
        3    0.000    0.000    0.000    0.000 domainmatrix.py:225(from_rep)
       10    0.000    0.000    0.000    0.000 rcsetup.py:765(_validate_greaterequal0_lessthan1)
       24    0.000    0.000    0.000    0.000 sympify.py:84(<genexpr>)
        1    0.000    0.000    0.000    0.000 _artifact_change.py:16(ArtifactChange)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2461(_pdf_dispatch)
        1    0.000    0.000    0.000    0.000 tensor.py:1695(TensorHead)
        1    0.000    0.000    0.000    0.000 formatting.py:112(<dictcomp>)
        1    0.000    0.000    0.000    0.000 numpy.py:348(SciPyPrinter)
       70    0.000    0.000    0.000    0.000 _jit_internal.py:1091(__getitem__)
        1    0.000    0.000    0.000    0.000 __init__.py:221(<dictcomp>)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2349(_mode_dispatch)
        1    0.000    0.000    0.000    0.000 rnn.py:334(LSTM)
        1    0.000    0.000    0.000    0.000 _dia.py:20(_dia_base)
        1    0.000    0.000    0.000    0.000 dataframe_wrapper.py:23(PandasWrapper)
        1    0.000    0.000    0.000    0.000 _polyutils.py:1(<module>)
       11    0.000    0.000    0.000    0.000 results.py:272(__iter__)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4981(invgauss_gen)
        1    0.000    0.000    0.000    0.000 transforms.py:1080(LockableBbox)
        2    0.000    0.000    0.000    0.000 reprlib.py:12(decorating_function)
        1    0.000    0.000    0.000    0.000 numbers.py:147(Real)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2342(_median_icdf)
        1    0.000    0.000    0.000    0.000 _polyint.py:19(_Interpolator1D)
        1    0.000    0.000    0.000    0.000 numbers.py:2231(AlgebraicNumber)
        1    0.000    0.000    0.000    0.000 headerregistry.py:156(BaseHeader)
        1    0.000    0.000    0.000    0.000 widgets.py:1893(RectangleSelector)
        1    0.000    0.000    0.000    0.000 series.py:2180(ImplicitSeries)
        1    0.000    0.000    0.000    0.000 _ops.py:597(__init__)
        4    0.000    0.000    0.000    0.000 generate.py:67(<genexpr>)
        6    0.000    0.000    0.000    0.000 _version.py:62(<listcomp>)
        3    0.000    0.000    0.000    0.000 arrayprint.py:1415(dtype_is_implied)
       10    0.000    0.000    0.000    0.000 quadrature.py:21(__init__)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:3161(rv_discrete)
        1    0.000    0.000    0.000    0.000 cauchy.py:12(Cauchy)
        1    0.000    0.000    0.000    0.000 conv.py:39(Conv1d)
        8    0.000    0.000    0.000    0.000 relativedelta.py:13(<genexpr>)
        1    0.000    0.000    0.000    0.000 gmpyrationalfield.py:12(GMPYRationalField)
        1    0.000    0.000    0.000    0.000 _namedtensor_internals.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:117(<listcomp>)
        1    0.000    0.000    0.000    0.000 tensor.py:1392(TensorSymmetry)
        1    0.000    0.000    0.000    0.000 main.py:56(TestProgram)
        1    0.000    0.000    0.000    0.000 art3d.py:246(Line3DCollection)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:382(PngStream)
        1    0.000    0.000    0.000    0.000 sparse.py:49(EmbeddingBag)
        1    0.000    0.000    0.000    0.000 sysconfig.py:456(_get_sysconfigdata_name)
        1    0.000    0.000    0.000    0.000 binrel.py:15(BinaryRelation)
       10    0.000    0.000    0.000    0.000 _policybase.py:104(<genexpr>)
        1    0.000    0.000    0.000    0.000 context.py:99(compose_two)
        2    0.000    0.000    0.000    0.000 <frozen _collections_abc>:790(items)
        1    0.000    0.000    0.000    0.000 connection.py:114(_ConnectionBase)
        2    0.000    0.000    0.000    0.000 typing.py:3089(__init__)
        1    0.000    0.000    0.000    0.000 _inspect.py:1(<module>)
        1    0.000    0.000    0.000    0.000 filters.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _header_value_parser.py:876(__new__)
        6    0.000    0.000    0.000    0.000 six.py:131(__init__)
        1    0.000    0.000    0.000    0.000 _matfuncs.py:337(_ExpmPadeHelper)
        6    0.000    0.000    0.000    0.000 utils.py:51(_has_surrogates)
        1    0.000    0.000    0.000    0.000 gmpyintegerring.py:14(GMPYIntegerRing)
        1    0.000    0.000    0.000    0.000 rk.py:407(DOP853)
        1    0.000    0.000    0.000    0.000 _netcdf.py:98(netcdf_file)
        1    0.000    0.000    0.000    0.000 byteordercodes.py:1(<module>)
        5    0.000    0.000    0.000    0.000 decorator.py:152(<listcomp>)
        2    0.000    0.000    0.000    0.000 sysconfig.py:311(get_default_scheme)
        2    0.000    0.000    0.000    0.000 integerring.py:54(__eq__)
        2    0.000    0.000    0.000    0.000 _compression.py:160(tell)
       21    0.000    0.000    0.000    0.000 symbolic_opset9.py:298(_export)
        1    0.000    0.000    0.000    0.000 tokens.py:13(Token)
       10    0.000    0.000    0.000    0.000 __init__.py:318(_wrap_deprecated_method)
        1    0.000    0.000    0.000    0.000 context.py:270(raises)
        1    0.000    0.000    0.000    0.000 profiler.py:59(profile)
        1    0.000    0.000    0.000    0.000 ElementTree.py:125(Element)
        1    0.000    0.000    0.000    0.000 linear.py:12(Linear)
        4    0.000    0.000    0.000    0.000 __init__.py:798(__init__)
        1    0.000    0.000    0.000    0.000 assume.py:224(Predicate)
       32    0.000    0.000    0.000    0.000 expr.py:185(_hashable_content)
        1    0.000    0.000    0.000    0.000 _log.py:1(<module>)
        3    0.000    0.000    0.000    0.000 symbolic_opset9.py:765(_reduce_op_symbolic)
        1    0.000    0.000    0.000    0.000 process.py:399(__init__)
       23    0.000    0.000    0.000    0.000 _support_alternative_backends.py:35(name)
        2    0.000    0.000    0.000    0.000 _aliases.py:116(astype)
        2    0.000    0.000    0.000    0.000 results.py:462(<listcomp>)
        5    0.000    0.000    0.000    0.000 _new_distributions.py:339(_moment_raw_formula)
       41    0.000    0.000    0.000    0.000 numbers.py:438(class_key)
        1    0.000    0.000    0.000    0.000 csv.py:80(DictReader)
        1    0.000    0.000    0.000    0.000 profiler_util.py:352(FormattedTimesMixin)
        1    0.000    0.000    0.000    0.000 _imp.py:1(<module>)
        1    0.000    0.000    0.000    0.000 rnn.py:261(LSTM)
        1    0.000    0.000    0.000    0.000 polyoptions.py:18(Option)
        1    0.000    0.000    0.000    0.000 ast.py:65(_raise_malformed_node)
        1    0.000    0.000    0.000    0.000 special.py:75(__new__)
        1    0.000    0.000    0.000    0.000 ordinals.py:273(__new__)
       31    0.000    0.000    0.000    0.000 singleton.py:192(<lambda>)
        1    0.000    0.000    0.000    0.000 rootoftools.py:1101(RootSum)
        1    0.000    0.000    0.000    0.000 sets.py:1496(Intersection)
        1    0.000    0.000    0.000    0.000 spectral_norm.py:12(SpectralNorm)
        4    0.000    0.000    0.000    0.000 core.py:5236(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 sets.py:1947(FiniteSet)
        1    0.000    0.000    0.000    0.000 kind.py:64(__new__)
       24    0.000    0.000    0.000    0.000 dviread.py:135(_dispatch)
        1    0.000    0.000    0.000    0.000 patches.py:1824(_simpleprint_styles)
        1    0.000    0.000    0.000    0.000 rootisolation.py:1881(ComplexInterval)
        1    0.000    0.000    0.000    0.000 log_normal.py:8(LogNormal)
        1    0.000    0.000    0.000    0.000 _resampling.py:2261(BootstrapMethod)
        1    0.000    0.000    0.000    0.000 products.py:17(Product)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha1}
        1    0.000    0.000    0.000    0.000 quasirandom.py:5(SobolEngine)
        1    0.000    0.000    0.000    0.000 readers.py:53(MultiplexedPath)
        1    0.000    0.000    0.000    0.000 adaptive.py:19(AdaptiveLogSoftmaxWithLoss)
        2    0.000    0.000    0.000    0.000 kind.py:266(register)
        1    0.000    0.000    0.000    0.000 printer.py:235(Printer)
       12    0.000    0.000    0.000    0.000 rcsetup.py:424(validate_fontweight)
       15    0.000    0.000    0.000    0.000 arrayprint.py:993(<genexpr>)
        1    0.000    0.000    0.000    0.000 functions.py:3(SpecialFunctions)
        1    0.000    0.000    0.000    0.000 polygon.py:2053(Triangle)
        5    0.000    0.000    0.000    0.000 typing.py:2191(runtime_checkable)
       21    0.000    0.000    0.000    0.000 _script.py:940(_make_fail)
        1    0.000    0.000    0.000    0.000 ticker.py:468(ScalarFormatter)
        1    0.000    0.000    0.000    0.000 error_functions.py:1502(li)
       23    0.000    0.000    0.000    0.000 overrides.py:173(array_function_from_dispatcher)
       12    0.000    0.000    0.000    0.000 domain.py:470(of_type)
        1    0.000    0.000    0.000    0.000 hyper.py:391(meijerg)
        1    0.000    0.000    0.000    0.000 _trace.py:1202(TopLevelTracedModule)
       15    0.000    0.000    0.000    0.000 libelefun.py:106(def_mpf_constant)
        1    0.000    0.000    0.000    0.000 numpy.py:503(<dictcomp>)
        2    0.000    0.000    0.000    0.000 {built-in method numpy.core._multiarray_umath.normalize_axis_index}
        1    0.000    0.000    0.000    0.000 compositedomain.py:9(CompositeDomain)
        1    0.000    0.000    0.000    0.000 trigonometric.py:1572(ReciprocalTrigonometricFunction)
        8    0.000    0.000    0.000    0.000 __init__.py:463(_asdict)
        1    0.000    0.000    0.000    0.000 poisson.py:10(Poisson)
        1    0.000    0.000    0.000    0.000 summations.py:42(Sum)
        1    0.000    0.000    0.000    0.000 conv.py:617(_ConvTransposeNd)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1879(validation_policy)
        1    0.000    0.000    0.000    0.000 ctx_mp_python.py:583(PythonMPContext)
        1    0.000    0.000    0.000    0.000 integrals.py:35(Integral)
       22    0.000    0.000    0.000    0.000 reductions.py:123(_torch_grad_reduce)
        1    0.000    0.000    0.000    0.000 mio4.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pathlib.py:971(absolute)
        1    0.000    0.000    0.000    0.000 _ltisys.py:879(ZerosPolesGain)
        1    0.000    0.000    0.000    0.000 fractionfield.py:9(FractionField)
       10    0.000    0.000    0.000    0.000 bz2.py:121(closed)
        1    0.000    0.000    0.000    0.000 functional_modules.py:9(FloatFunctional)
        1    0.000    0.000    0.000    0.000 conv.py:232(ConvTranspose2d)
       16    0.000    0.000    0.000    0.000 _pep440.py:301(<genexpr>)
        1    0.000    0.000    0.000    0.000 types.py:39(Storage)
        1    0.000    0.000    0.000    0.000 transforms.py:41(Transform)
        1    0.000    0.000    0.000    0.000 _builtins.py:120(<setcomp>)
       24    0.000    0.000    0.000    0.000 expr.py:2053(as_base_exp)
        1    0.000    0.000    0.000    0.000 complexes.py:265(sign)
        1    0.000    0.000    0.000    0.000 parse.py:143(_NetlocResultMixinBase)
        1    0.000    0.000    0.000    0.000 zipfile.py:344(ZipInfo)
        3    0.000    0.000    0.000    0.000 rcsetup.py:459(_validate_mathtext_fallback)
        5    0.000    0.000    0.000    0.000 datapipe.py:265(register_datapipe_as_function)
        1    0.000    0.000    0.000    0.000 <frozen genericpath>:39(isdir)
       25    0.000    0.000    0.000    0.000 {method 'discard' of 'set' objects}
        1    0.000    0.000    0.000    0.000 rcsetup.py:1407(<listcomp>)
        1    0.000    0.000    0.000    0.000 sympy_parser.py:1105(EvaluateFalseTransformer)
        1    0.000    0.000    0.000    0.000 complexes.py:446(Abs)
        1    0.000    0.000    0.000    0.000 contour.py:48(ContourLabeler)
        1    0.000    0.000    0.000    0.000 __init__.py:283(SymFloat)
        1    0.000    0.000    0.000    0.000 sparse.py:21(SparseRepMatrix)
        1    0.000    0.000    0.000    0.000 repmatrix.py:555(MutableRepMatrix)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:73(UnivariateSpline)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:12328(rel_breitwigner_gen)
       15    0.000    0.000    0.000    0.000 math2.py:27(_mathfun_real)
        1    0.000    0.000    0.000    0.000 _infra.py:309(DiagnosticOptions)
        2    0.000    0.000    0.000    0.000 {built-in method _sqlite3.register_adapter}
        6    0.000    0.000    0.000    0.000 {method 'union' of 'set' objects}
        1    0.000    0.000    0.000    0.000 _layoutbox.py:46(LayoutBox)
        1    0.000    0.000    0.000    0.000 indexed.py:362(IndexedBase)
        2    0.000    0.000    0.000    0.000 {built-in method _struct.unpack}
        1    0.000    0.000    0.000    0.000 conv_fused.py:25(_ConvBnNd)
        1    0.000    0.000    0.000    0.000 __init__.py:165(<listcomp>)
        1    0.000    0.000    0.000    0.000 pycode.py:707(<listcomp>)
        1    0.000    0.000    0.000    0.000 integers.py:496(frac)
       13    0.000    0.000    0.000    0.000 utils.py:34(exposed_in)
        1    0.000    0.000    0.000    0.000 wannier90.py:24(Unk)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha256}
        1    0.000    0.000    0.000    0.000 tz.py:1545(__init__)
        1    0.000    0.000    0.000    0.000 bonds.py:58(CovalentBond)
        1    0.000    0.000    0.000    0.000 serializer.py:33(Serializer)
        1    0.000    0.000    0.000    0.000 computed_entries.py:47(EnergyAdjustment)
        1    0.000    0.000    0.000    0.000 offsetbox.py:179(OffsetBox)
       11    0.000    0.000    0.000    0.000 legend_handler.py:59(__init__)
        1    0.000    0.000    0.000    0.000 adadelta.py:12(Adadelta)
        1    0.000    0.000    0.000    0.000 rrule.py:1418(_rrulestr)
        1    0.000    0.000    0.000    0.000 upsampling.py:168(UpsamplingNearest2d)
        3    0.000    0.000    0.000    0.000 legend_handler.py:212(__init__)
        6    0.000    0.000    0.000    0.000 __init__.py:784(__new__)
        1    0.000    0.000    0.000    0.000 core.py:6540(MaskedConstant)
       15    0.000    0.000    0.000    0.000 serialization.py:59(<genexpr>)
        1    0.000    0.000    0.000    0.000 _base.py:325(Future)
        3    0.000    0.000    0.000    0.000 ctx_mp_python.py:602(make_mpc)
        6    0.000    0.000    0.000    0.000 _parser.py:286(seek)
       15    0.000    0.000    0.000    0.000 _jit_internal.py:747(_copy_to_script_wrapper)
        1    0.000    0.000    0.000    0.000 coord.py:362(Simplex)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:282(nbinom_gen)
        1    0.000    0.000    0.000    0.000 _ltisys.py:46(LinearTimeInvariant)
        1    0.000    0.000    0.000    0.000 report.py:3(ReportBase)
        1    0.000    0.000    0.000    0.000 rnn.py:163(_LSTMLayer)
       17    0.000    0.000    0.000    0.000 ctx_fp.py:28(<lambda>)
        1    0.000    0.000    0.000    0.000 gammazeta.py:394(bernoulli_size)
        1    0.000    0.000    0.000    0.000 Image.py:3915(Exif)
        1    0.000    0.000    0.000    0.000 bessel.py:438(besseli)
        5    0.000    0.000    0.000    0.000 __init__.py:20(is_available)
        1    0.000    0.000    0.000    0.000 pydoc.py:525(__init__)
        1    0.000    0.000    0.000    0.000 polyhedron.py:11(Polyhedron)
        1    0.000    0.000    0.000    0.000 data.py:1(<module>)
        1    0.000    0.000    0.000    0.000 free_groups.py:114(FreeGroup)
        2    0.000    0.000    0.000    0.000 {built-in method posix.getcwd}
        2    0.000    0.000    0.000    0.000 <frozen posixpath>:100(split)
        1    0.000    0.000    0.000    0.000 _aliases.py:536(floor)
        1    0.000    0.000    0.000    0.000 activation.py:175(Hardtanh)
        1    0.000    0.000    0.000    0.000 __init__.py:1019(BoolStorage)
        3    0.000    0.000    0.000    0.000 message.py:330(set_payload)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1364(<listcomp>)
        1    0.000    0.000    0.000    0.000 conv.py:382(Conv2d)
        1    0.000    0.000    0.000    0.000 six.py:236(create_module)
        1    0.000    0.000    0.000    0.000 interval_arithmetic.py:42(interval)
        1    0.000    0.000    0.000    0.000 ctx_iv.py:145(__neg__)
        1    0.000    0.000    0.000    0.000 wavelets.py:1(<module>)
        1    0.000    0.000    0.000    0.000 heuristicgcd.py:1(<module>)
        1    0.000    0.000    0.000    0.000 group_constructs.py:1(<module>)
        2    0.000    0.000    0.000    0.000 _functools.py:6(method_cache)
        9    0.000    0.000    0.000    0.000 fontconfig_pattern.py:151(<listcomp>)
        4    0.000    0.000    0.000    0.000 libmpf.py:1313(from_str)
        1    0.000    0.000    0.000    0.000 bz2.py:26(BZ2File)
        1    0.000    0.000    0.000    0.000 _netcdf.py:811(netcdf_variable)
        1    0.000    0.000    0.000    0.000 sdm.py:186(new)
        1    0.000    0.000    0.000    0.000 Orbit_spd_with_spin.py:19(orbit_spd_with_spin)
        1    0.000    0.000    0.000    0.000 polyquinticconst.py:22(PolyQuintic)
        1    0.000    0.000    0.000    0.000 overrides.py:1786(TorchFunctionMode)
        1    0.000    0.000    0.000    0.000 base_events.py:274(Server)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:996(ReciprocalHyperbolicFunction)
        1    0.000    0.000    0.000    0.000 {built-in method math.exp}
        3    0.000    0.000    0.000    0.000 six.py:85(_import_module)
        1    0.000    0.000    0.000    0.000 _ufunc_config.py:441(_setdef)
        1    0.000    0.000    0.000    0.000 logic.py:221(Logic)
        1    0.000    0.000    0.000    0.000 quopri.py:1(<module>)
        1    0.000    0.000    0.000    0.000 constructor.py:348(SafeConstructor)
        1    0.000    0.000    0.000    0.000 _censored_data.py:60(CensoredData)
        1    0.000    0.000    0.000    0.000 transforms.py:1203(Transform)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1052(TimerBase)
        1    0.000    0.000    0.000    0.000 request.py:2139(FancyURLopener)
        2    0.000    0.000    0.000    0.000 __init__.py:2356(_backend_module_name)
        1    0.000    0.000    0.000    0.000 __init__.py:1792(__init__)
        1    0.000    0.000    0.000    0.000 _ltisys.py:299(dlti)
        2    0.000    0.000    0.000    0.000 decorator.py:319(wrapper)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1612(<dictcomp>)
        1    0.000    0.000    0.000    0.000 mstats_extras.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fancysets.py:291(ImageSet)
        1    0.000    0.000    0.000    0.000 pooling.py:564(AvgPool2d)
       11    0.000    0.000    0.000    0.000 optimizer.py:28(_use_grad_for_differentiable)
       25    0.000    0.000    0.000    0.000 symbolic_helper.py:664(_block_list_in_opset)
        1    0.000    0.000    0.000    0.000 _policybase.py:112(Policy)
        8    0.000    0.000    0.000    0.000 core.py:5113(stopOn)
        2    0.000    0.000    0.000    0.000 {method 'difference_update' of 'set' objects}
        1    0.000    0.000    0.000    0.000 _type_aliases.py:41(<setcomp>)
        1    0.000    0.000    0.000    0.000 mathml.py:84(MathMLContentPrinter)
        1    0.000    0.000    0.000    0.000 num.py:1(<module>)
       21    0.000    0.000    0.000    0.000 _codata.py:2121(_check_obsolete)
        1    0.000    0.000    0.000    0.000 adamw.py:12(AdamW)
        1    0.000    0.000    0.000    0.000 _multivariate.py:1897(wishart_gen)
        1    0.000    0.000    0.000    0.000 numbers.py:59(carmichael)
        1    0.000    0.000    0.000    0.000 pycode.py:87(<listcomp>)
        1    0.000    0.000    0.000    0.000 fields.py:103(FracField)
        9    0.000    0.000    0.000    0.000 typing_extensions.py:712(__eq__)
        1    0.000    0.000    0.000    0.000 subprocess.py:126(CalledProcessError)
        1    0.000    0.000    0.000    0.000 outputs.py:4448(Oszicar)
        3    0.000    0.000    0.000    0.000 __init__.py:42(__init__)
        1    0.000    0.000    0.000    0.000 unix_events.py:57(_UnixSelectorEventLoop)
        1    0.000    0.000    0.000    0.000 std.py:67(TRLock)
        1    0.000    0.000    0.000    0.000 loader.py:66(TestLoader)
        1    0.000    0.000    0.000    0.000 _kdtree.py:287(node)
        1    0.000    0.000    0.000    0.000 gumbel.py:12(Gumbel)
        5    0.000    0.000    0.000    0.000 rszeta.py:54(__init__)
        1    0.000    0.000    0.000    0.000 traceback.py:636(TracebackException)
        2    0.000    0.000    0.000    0.000 reprlib.py:38(__init__)
        1    0.000    0.000    0.000    0.000 _aliases.py:24(arange)
        2    0.000    0.000    0.000    0.000 _aliases.py:51(empty_like)
        1    0.000    0.000    0.000    0.000 constructor.py:664(Constructor)
       17    0.000    0.000    0.000    0.000 __init__.py:190(change_key)
        1    0.000    0.000    0.000    0.000 tz.py:386(tzfile)
        1    0.000    0.000    0.000    0.000 __init__.py:909(LongStorage)
       20    0.000    0.000    0.000    0.000 core.py:3915(recurse)
       35    0.000    0.000    0.000    0.000 core.py:1967(recurse)
        1    0.000    0.000    0.000    0.000 _ni_support.py:1(<module>)
        1    0.000    0.000    0.000    0.000 main.py:1489(YAMLObject)
        1    0.000    0.000    0.000    0.000 comments.py:1089(CommentedSet)
        1    0.000    0.000    0.000    0.000 selectors.py:80(BaseSelector)
        1    0.000    0.000    0.000    0.000 _fortran_format_parser.py:36(IntFormat)
        1    0.000    0.000    0.000    0.000 ideals.py:7(Ideal)
        1    0.000    0.000    0.000    0.000 proj3d.py:1(<module>)
       13    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:808(<dictcomp>)
        1    0.000    0.000    0.000    0.000 comments.py:467(CommentedSeq)
        1    0.000    0.000    0.000    0.000 pyprojecttoml.py:172(_ConfigExpander)
        1    0.000    0.000    0.000    0.000 beta.py:11(Beta)
        1    0.000    0.000    0.000    0.000 context.py:206(ExceptionTrap)
        1    0.000    0.000    0.000    0.000 ctx_iv.py:38(ivmpf)
        2    0.000    0.000    0.000    0.000 six.py:119(_resolve)
        1    0.000    0.000    0.000    0.000 outputs.py:4596(Xdatcar)
        1    0.000    0.000    0.000    0.000 _genz_malik.py:11(GenzMalikCubature)
        1    0.000    0.000    0.000    0.000 sgd.py:10(SGD)
        1    0.000    0.000    0.000    0.000 one_hot_categorical.py:8(OneHotCategorical)
        1    0.000    0.000    0.000    0.000 numpy.py:34(<dictcomp>)
        1    0.000    0.000    0.000    0.000 fglmtools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _globals.py:17(_InternalGlobals)
        1    0.000    0.000    0.000    0.000 constructor.py:932(RoundTripConstructor)
        1    0.000    0.000    0.000    0.000 binary.py:48(<listcomp>)
        2    0.000    0.000    0.000    0.000 _adapters.py:12(__init__)
        1    0.000    0.000    0.000    0.000 lambdarepr.py:75(NumExprPrinter)
        1    0.000    0.000    0.000    0.000 observer.py:124(ObserverBase)
        1    0.000    0.000    0.000    0.000 reduction.py:33(ForkingPickler)
        1    0.000    0.000    0.000    0.000 factorials.py:36(factorial)
        1    0.000    0.000    0.000    0.000 contextlib.py:344(__exit__)
        1    0.000    0.000    0.000    0.000 common.py:32(VolumetricData)
        1    0.000    0.000    0.000    0.000 nadam.py:10(NAdam)
        1    0.000    0.000    0.000    0.000 tempfile.py:840(TemporaryDirectory)
        1    0.000    0.000    0.000    0.000 {built-in method numpy.core._multiarray_umath.set_typeDict}
        1    0.000    0.000    0.000    0.000 _tensor_str.py:9(__PrinterOptions)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:11322(wrapcauchy_gen)
        1    0.000    0.000    0.000    0.000 {built-in method _ctypes.byref}
        1    0.000    0.000    0.000    0.000 base_subprocess.py:10(BaseSubprocessTransport)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:190(_Domain)
        1    0.000    0.000    0.000    0.000 laplace.py:9(Laplace)
        1    0.000    0.000    0.000    0.000 streams.py:140(Event)
        1    0.000    0.000    0.000    0.000 quiver.py:904(Barbs)
        1    0.000    0.000    0.000    0.000 idl.py:1(<module>)
        2    0.000    0.000    0.000    0.000 Files_in.py:4(__init__)
        1    0.000    0.000    0.000    0.000 tensor.py:815(_comm_init)
        1    0.000    0.000    0.000    0.000 stats.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _infra.py:266(RuleCollection)
        1    0.000    0.000    0.000    0.000 curve.py:22(Curve)
        1    0.000    0.000    0.000    0.000 outputs.py:5666(Waveder)
        1    0.000    0.000    0.000    0.000 __init__.py:959(FloatStorage)
        1    0.000    0.000    0.000    0.000 linear_fused.py:13(LinearBn1d)
        1    0.000    0.000    0.000    0.000 upsampling.py:213(UpsamplingBilinear2d)
        1    0.000    0.000    0.000    0.000 decorator.py:65(FunctionMaker)
        1    0.000    0.000    0.000    0.000 series.py:1861(SurfaceOver2DRangeSeries)
        1    0.000    0.000    0.000    0.000 _storage_docs.py:12(add_docstr_all)
        1    0.000    0.000    0.000    0.000 exprtools.py:288(Factors)
        1    0.000    0.000    0.000    0.000 para4tb.py:12(ParaTB)
       26    0.000    0.000    0.000    0.000 core.py:4415(<genexpr>)
        1    0.000    0.000    0.000    0.000 __init__.py:33(Entry)
        1    0.000    0.000    0.000    0.000 zipfile.py:2290(Path)
        1    0.000    0.000    0.000    0.000 numbers.py:4083(ImaginaryUnit)
        1    0.000    0.000    0.000    0.000 locks.py:446(Barrier)
        1    0.000    0.000    0.000    0.000 profiler_legacy.py:18(profile)
        1    0.000    0.000    0.000    0.000 fields.py:292(FracElement)
        1    0.000    0.000    0.000    0.000 numbers.py:2771(Zero)
        1    0.000    0.000    0.000    0.000 __init__.py:873(Handler)
        1    0.000    0.000    0.000    0.000 bandstructure.py:157(BandStructure)
        1    0.000    0.000    0.000    0.000 rational.py:24(mpq)
        1    0.000    0.000    0.000    0.000 gzip.py:121(GzipFile)
        1    0.000    0.000    0.000    0.000 join.py:88(_JoinConfig)
        1    0.000    0.000    0.000    0.000 _iotools.py:229(NameValidator)
       18    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1761(<genexpr>)
        1    0.000    0.000    0.000    0.000 axis3d.py:470(XAxis)
        8    0.000    0.000    0.000    0.000 version.py:207(<genexpr>)
        1    0.000    0.000    0.000    0.000 _interpolate.py:816(PPoly)
        1    0.000    0.000    0.000    0.000 __init__.py:37(cuFFTPlanCache)
        1    0.000    0.000    0.000    0.000 dop.py:1(<module>)
        1    0.000    0.000    0.000    0.000 delta_functions.py:393(Heaviside)
        6    0.000    0.000    0.000    0.000 signal.py:49(decorator)
        1    0.000    0.000    0.000    0.000 containers.py:219(Dict)
        1    0.000    0.000    0.000    0.000 conv.py:10(_ConvNd)
        1    0.000    0.000    0.000    0.000 zipfile.py:802(ZipExtFile)
        1    0.000    0.000    0.000    0.000 _ndbspline.py:26(NdBSpline)
        1    0.000    0.000    0.000    0.000 _disjoint_set.py:6(DisjointSet)
        1    0.000    0.000    0.000    0.000 factor_.py:700(__init__)
        1    0.000    0.000    0.000    0.000 _index.py:25(IndexMixin)
        1    0.000    0.000    0.000    0.000 tensor.py:4488(TensorElement)
       21    0.000    0.000    0.000    0.000 multiarray.py:153(concatenate)
        1    0.000    0.000    0.000    0.000 hierarchy.py:1074(ClusterNode)
        1    0.000    0.000    0.000    0.000 case.py:243(_AssertRaisesContext)
        1    0.000    0.000    0.000    0.000 embedding_ops.py:11(EmbeddingPackedParams)
        1    0.000    0.000    0.000    0.000 join.py:43(Joinable)
        1    0.000    0.000    0.000    0.000 version.py:280(LooseVersion)
        1    0.000    0.000    0.000    0.000 __init__.py:1067(StreamHandler)
        1    0.000    0.000    0.000    0.000 _helpers.py:487(_AutoJITWrapper)
        3    0.000    0.000    0.000    0.000 __init__.py:590(_discover_resolvers)
        1    0.000    0.000    0.000    0.000 spherical_harmonics.py:15(Ynm)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha384}
        1    0.000    0.000    0.000    0.000 _common.py:127(_TZifHeader)
        1    0.000    0.000    0.000    0.000 lzma.py:38(LZMAFile)
        1    0.000    0.000    0.000    0.000 error_functions.py:674(erf2)
        1    0.000    0.000    0.000    0.000 _covariance.py:463(CovViaPrecision)
        1    0.000    0.000    0.000    0.000 sets.py:1319(Union)
        1    0.000    0.000    0.000    0.000 rk.py:74(RungeKutta)
       22    0.000    0.000    0.000    0.000 symbol.py:799(<genexpr>)
        3    0.000    0.000    0.000    0.000 mock.py:298(__getattr__)
        1    0.000    0.000    0.000    0.000 modules.py:698(PowerBasis)
        1    0.000    0.000    0.000    0.000 internal.py:30(_InternalRPCPickler)
        1    0.000    0.000    0.000    0.000 extract.py:1(<module>)
        1    0.000    0.000    0.000    0.000 annotations.py:41(EvalEnv)
        1    0.000    0.000    0.000    0.000 subprocess.py:469(CompletedProcess)
        1    0.000    0.000    0.000    0.000 core.py:51(InputFile)
        1    0.000    0.000    0.000    0.000 observer.py:383(MinMaxObserver)
        2    0.000    0.000    0.000    0.000 matfuncs.py:1(<module>)
        1    0.000    0.000    0.000    0.000 transforms.py:280(__init__)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2498(_pmf_dispatch)
        1    0.000    0.000    0.000    0.000 _classes.py:18(_Classes)
        1    0.000    0.000    0.000    0.000 netcdf.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:30(binom_gen)
        2    0.000    0.000    0.000    0.000 _distn_infrastructure.py:841(<genexpr>)
        1    0.000    0.000    0.000    0.000 conv.py:277(ConvTranspose3d)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:123(<listcomp>)
        1    0.000    0.000    0.000    0.000 rnn.py:1159(LSTMCell)
        1    0.000    0.000    0.000    0.000 __init__.py:1432(Logger)
        1    0.000    0.000    0.000    0.000 backend_tools.py:40(ToolBase)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3621(DiscreteDistribution)
        4    0.000    0.000    0.000    0.000 pythonmpq.py:194(__neg__)
       29    0.000    0.000    0.000    0.000 {method 'groupdict' of 're.Match' objects}
        1    0.000    0.000    0.000    0.000 __init__.py:439(LibraryLoader)
       14    0.000    0.000    0.000    0.000 mock.py:1936(<genexpr>)
        1    0.000    0.000    0.000    0.000 dfm.py:18(DFM_dummy)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:129(bernoulli_gen)
        1    0.000    0.000    0.000    0.000 expressiondomain.py:21(Expression)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:10191(truncnorm_gen)
        9    0.000    0.000    0.000    0.000 core.py:4246(<genexpr>)
        1    0.000    0.000    0.000    0.000 studentT.py:11(StudentT)
        1    0.000    0.000    0.000    0.000 __init__.py:273(<dictcomp>)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:287(CubicTriInterpolator)
        1    0.000    0.000    0.000    0.000 Image.py:3765(register_extensions)
        1    0.000    0.000    0.000    0.000 transforms.py:1827(Affine2D)
        1    0.000    0.000    0.000    0.000 gamma_functions.py:1060(digamma)
        1    0.000    0.000    0.000    0.000 pathlib.py:128(<setcomp>)
        2    0.000    0.000    0.000    0.000 _jit_internal.py:576(unused)
        1    0.000    0.000    0.000    0.000 galois_resolvents.py:47(Resolvent)
        7    0.000    0.000    0.000    0.000 _nonlin.py:1599(<listcomp>)
        1    0.000    0.000    0.000    0.000 numbers.py:1204(catalan)
        1    0.000    0.000    0.000    0.000 util.py:15(__config_flags)
        1    0.000    0.000    0.000    0.000 biasedurn.py:1(<module>)
        2    0.000    0.000    0.000    0.000 math2.py:53(_mathfun_n)
        4    0.000    0.000    0.000    0.000 {method '__exit__' of 'numpy.nditer' objects}
        1    0.000    0.000    0.000    0.000 tags.py:42(Tag)
        1    0.000    0.000    0.000    0.000 __init__.py:1079(QInt32Storage)
        1    0.000    0.000    0.000    0.000 __init__.py:949(DoubleStorage)
        1    0.000    0.000    0.000    0.000 _covariance.py:562(CovViaEigendecomposition)
        1    0.000    0.000    0.000    0.000 __init__.py:637(RcParams)
        1    0.000    0.000    0.000    0.000 core.py:109(InputSet)
        1    0.000    0.000    0.000    0.000 __init__.py:855(_CudaLegacyStorage)
        4    0.000    0.000    0.000    0.000 libmpf.py:454(to_float)
        1    0.000    0.000    0.000    0.000 trsock.py:4(TransportSocket)
        4    0.000    0.000    0.000    0.000 libmpf.py:574(mpf_cmp)
        1    0.000    0.000    0.000    0.000 _aliases.py:665(finfo)
       18    0.000    0.000    0.000    0.000 multiarray.py:1080(copyto)
       11    0.000    0.000    0.000    0.000 ctx_iv.py:293(__new__)
        1    0.000    0.000    0.000    0.000 _interpolate.py:1836(NdPPoly)
        1    0.000    0.000    0.000    0.000 afm.py:358(AFM)
        1    0.000    0.000    0.000    0.000 typing.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:1039(ComplexDoubleStorage)
        1    0.000    0.000    0.000    0.000 polar.py:17(PolarTransform)
        1    0.000    0.000    0.000    0.000 backend_tools.py:800(ToolZoom)
        3    0.000    0.000    0.000    0.000 ctx_mp_python.py:607(default)
        1    0.000    0.000    0.000    0.000 random.py:235(_randbelow_with_getrandbits)
        1    0.000    0.000    0.000    0.000 argparse.py:1708(ArgumentParser)
        1    0.000    0.000    0.000    0.000 Image.py:3689(register_open)
       13    0.000    0.000    0.000    0.000 _deprecation.py:8(deprecated)
        1    0.000    0.000    0.000    0.000 decoder.py:254(JSONDecoder)
        1    0.000    0.000    0.000    0.000 _add_newdocs_scalars.py:54(_get_platform_and_machine)
        1    0.000    0.000    0.000    0.000 _exceptions.py:116(_ArrayMemoryError)
        1    0.000    0.000    0.000    0.000 rnn.py:1000(LSTMCell)
        1    0.000    0.000    0.000    0.000 padding.py:31(ConstantPad1d)
        5    0.000    0.000    0.000    0.000 sets.py:2010(__iter__)
        1    0.000    0.000    0.000    0.000 tensor_functions.py:90(KroneckerDelta)
        3    0.000    0.000    0.000    0.000 __init__.py:753(path)
        1    0.000    0.000    0.000    0.000 radam.py:13(RAdam)
       11    0.000    0.000    0.000    0.000 _color_data.py:31(<genexpr>)
        1    0.000    0.000    0.000    0.000 qconfig_mapping.py:157(QConfigMapping)
        1    0.000    0.000    0.000    0.000 contains.py:10(Contains)
        1    0.000    0.000    0.000    0.000 units.py:494(ArrayWithUnit)
        1    0.000    0.000    0.000    0.000 rootisolation.py:1728(RealInterval)
        1    0.000    0.000    0.000    0.000 composer.py:31(Composer)
        1    0.000    0.000    0.000    0.000 indexed.py:124(Indexed)
        1    0.000    0.000    0.000    0.000 _ops.py:238(OpOverload)
        1    0.000    0.000    0.000    0.000 fishersnedecor.py:11(FisherSnedecor)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1744(dgamma_gen)
        2    0.000    0.000    0.000    0.000 gzip.py:402(_read_exact)
        1    0.000    0.000    0.000    0.000 animation.py:895(Animation)
        1    0.000    0.000    0.000    0.000 __init__.py:83(OptEinsumModule)
        1    0.000    0.000    0.000    0.000 threading.py:236(__init__)
        1    0.000    0.000    0.000    0.000 _infra.py:55(Rule)
        1    0.000    0.000    0.000    0.000 dataframes.py:60(Capture)
        1    0.000    0.000    0.000    0.000 spawn.py:39(ProcessExitedException)
        1    0.000    0.000    0.000    0.000 tight_bbox.py:1(<module>)
       27    0.000    0.000    0.000    0.000 singleton.py:152(__repr__)
        1    0.000    0.000    0.000    0.000 matexpr.py:666(MatrixSymbol)
        1    0.000    0.000    0.000    0.000 error_functions.py:1092(Ei)
        1    0.000    0.000    0.000    0.000 __init__.py:545(Stack)
        1    0.000    0.000    0.000    0.000 operator_support.py:177(OpSupports)
        1    0.000    0.000    0.000    0.000 weight_norm.py:11(WeightNorm)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:4158(Sentinel)
       22    0.000    0.000    0.000    0.000 core.py:3595(<genexpr>)
        3    0.000    0.000    0.000    0.000 arrayprint.py:72(<dictcomp>)
        1    0.000    0.000    0.000    0.000 rnn.py:135(_LSTMSingleLayer)
        1    0.000    0.000    0.000    0.000 core.py:3237(QuotedString)
        1    0.000    0.000    0.000    0.000 throughput_benchmark.py:27(ExecutionStats)
        1    0.000    0.000    0.000    0.000 backend_bases.py:3460(_Backend)
        1    0.000    0.000    0.000    0.000 operator_support.py:27(OperatorSupportBase)
        1    0.000    0.000    0.000    0.000 _multivariate.py:1027(matrix_normal_gen)
        1    0.000    0.000    0.000    0.000 _ode.py:110(ode)
        1    0.000    0.000    0.000    0.000 <frozen _collections_abc>:362(__subclasshook__)
        3    0.000    0.000    0.000    0.000 __init__.py:7(is_available)
        1    0.000    0.000    0.000    0.000 abc.py:177(InspectLoader)
        1    0.000    0.000    0.000    0.000 __init__.py:70(__init__)
        1    0.000    0.000    0.000    0.000 adamax.py:12(Adamax)
        1    0.000    0.000    0.000    0.000 sequences.py:726(RecursiveSeq)
        1    0.000    0.000    0.000    0.000 hyper.py:1087(HyperRep_cosasin)
        1    0.000    0.000    0.000    0.000 file_structure_representation.py:9(Directory)
        1    0.000    0.000    0.000    0.000 _machar.py:17(MachAr)
        1    0.000    0.000    0.000    0.000 creation.py:1(<module>)
        9    0.000    0.000    0.000    0.000 _util.py:949(_rename_parameter)
       15    0.000    0.000    0.000    0.000 arrayprint.py:994(<genexpr>)
        1    0.000    0.000    0.000    0.000 lambdify.py:1123(_EvaluatorPrinter)
        1    0.000    0.000    0.000    0.000 worker.py:64(WorkerInfo)
        1    0.000    0.000    0.000    0.000 numpy.py:480(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _ccallback.py:26(LowLevelCallable)
       10    0.000    0.000    0.000    0.000 _pytesttester.py:76(__init__)
        1    0.000    0.000    0.000    0.000 glob_group.py:7(GlobGroup)
        7    0.000    0.000    0.000    0.000 __init__.py:101(CFunctionType)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1257(burr12_gen)
        1    0.000    0.000    0.000    0.000 __init__.py:969(HalfStorage)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:11558(crystalball_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1824(dpareto_lognorm_gen)
        1    0.000    0.000    0.000    0.000 operator_schemas.py:19(ArgsKwargsPair)
        1    0.000    0.000    0.000    0.000 matplotlib.py:43(MatplotlibBackend)
        1    0.000    0.000    0.000    0.000 maggroups.py:33(MagneticSpaceGroup)
        1    0.000    0.000    0.000    0.000 six.py:498(Module_six_moves_urllib)
        1    0.000    0.000    0.000    0.000 _multiufuncs.py:24(MultiUFunc)
        1    0.000    0.000    0.000    0.000 numpy.py:345(<dictcomp>)
        1    0.000    0.000    0.000    0.000 calendar.py:71(_localized_day)
        1    0.000    0.000    0.000    0.000 linear.py:15(Linear)
        2    0.000    0.000    0.000    0.000 results.py:441(__getattr__)
        1    0.000    0.000    0.000    0.000 expr.py:3989(AtomicExpr)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7648(nakagami_gen)
        1    0.000    0.000    0.000    0.000 numbers.py:3602(Exp1)
        1    0.000    0.000    0.000    0.000 _mannwhitneyu.py:21(_MWU)
        1    0.000    0.000    0.000    0.000 representer.py:492(RoundTripRepresenter)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:553(_Parameter)
        1    0.000    0.000    0.000    0.000 _util.py:13(DeferredError)
        1    0.000    0.000    0.000    0.000 vode.py:1(<module>)
        1    0.000    0.000    0.000    0.000 graphs.py:40(CUDAGraph)
        1    0.000    0.000    0.000    0.000 __init__.py:385(check_sparse_tensor_invariants)
        1    0.000    0.000    0.000    0.000 boolalg.py:741(Or)
        1    0.000    0.000    0.000    0.000 partitions.py:308(IntegerPartition)
       24    0.000    0.000    0.000    0.000 traceback.py:307(__len__)
        1    0.000    0.000    0.000    0.000 functional_modules.py:82(FXFloatFunctional)
        1    0.000    0.000    0.000    0.000 pooling.py:643(AvgPool3d)
        1    0.000    0.000    0.000    0.000 core.py:237(LinearCombination)
        1    0.000    0.000    0.000    0.000 conv.py:856(ConvTranspose3d)
        1    0.000    0.000    0.000    0.000 log.py:41(Log)
        1    0.000    0.000    0.000    0.000 dos.py:395(FermiDos)
        1    0.000    0.000    0.000    0.000 transforms.py:1613(TransformWrapper)
        1    0.000    0.000    0.000    0.000 __init__.py:282(Throttler)
        1    0.000    0.000    0.000    0.000 boolalg.py:483(BooleanFunction)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3046(genlogistic_gen)
        1    0.000    0.000    0.000    0.000 adagrad.py:12(Adagrad)
        1    0.000    0.000    0.000    0.000 special_matrices.py:1(<module>)
        1    0.000    0.000    0.000    0.000 conv.py:672(ConvTranspose1d)
        1    0.000    0.000    0.000    0.000 tz.py:201(tzlocal)
        1    0.000    0.000    0.000    0.000 {built-in method numpy._using_numpy2_behavior}
       39    0.000    0.000    0.000    0.000 {built-in method _ctypes.sizeof}
        1    0.000    0.000    0.000    0.000 pooling.py:874(_LPPoolNd)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:8080(nct_gen)
        1    0.000    0.000    0.000    0.000 _parser.py:241(parserinfo)
        4    0.000    0.000    0.000    0.000 core.py:3536(parseImpl)
        1    0.000    0.000    0.000    0.000 axis.py:30(<listcomp>)
        1    0.000    0.000    0.000    0.000 transforms.py:80(TransformNode)
        1    0.000    0.000    0.000    0.000 fromnumeric.py:588(transpose)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:11258(wald_gen)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2301(_entropy_dispatch)
        1    0.000    0.000    0.000    0.000 bessel.py:607(besselk)
        4    0.000    0.000    0.000    0.000 mixins.py:51(_unary_method)
        1    0.000    0.000    0.000    0.000 linear_relu.py:9(LinearReLU)
        1    0.000    0.000    0.000    0.000 __init__.py:1059(QUInt8Storage)
       30    0.000    0.000    0.000    0.000 polyoptions.py:196(<genexpr>)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1767(yulesimon_gen)
        1    0.000    0.000    0.000    0.000 structure.py:5062(Molecule)
        1    0.000    0.000    0.000    0.000 gridspec.py:26(GridSpecBase)
        1    0.000    0.000    0.000    0.000 hyper.py:796(HyperRep)
        1    0.000    0.000    0.000    0.000 kind.py:97(__new__)
        1    0.000    0.000    0.000    0.000 _ode.py:843(vode)
        5    0.000    0.000    0.000    0.000 cache.py:155(cached_property)
        5    0.000    0.000    0.000    0.000 due.py:28(dcite)
        1    0.000    0.000    0.000    0.000 relaxed_categorical.py:11(ExpRelaxedCategorical)
        9    0.000    0.000    0.000    0.000 timeutils.py:54(decorator)
        1    0.000    0.000    0.000    0.000 activation.py:14(ReLU6)
        1    0.000    0.000    0.000    0.000 conv_relu.py:19(ConvReLU1d)
        1    0.000    0.000    0.000    0.000 transforms.py:955(LowerCholeskyTransform)
        1    0.000    0.000    0.000    0.000 art3d.py:557(Poly3DCollection)
        1    0.000    0.000    0.000    0.000 __init__.py:463(SelectableGroups)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:8315(lomax_gen)
        1    0.000    0.000    0.000    0.000 facts.py:75(transitive_closure)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1432(cauchy_gen)
        1    0.000    0.000    0.000    0.000 depends.py:20(Require)
        1    0.000    0.000    0.000    0.000 series.py:1496(ParametricLineBaseSeries)
        1    0.000    0.000    0.000    0.000 _infra.py:180(Stack)
        1    0.000    0.000    0.000    0.000 _multivariate.py:6257(vonmises_fisher_gen)
        1    0.000    0.000    0.000    0.000 more.py:2733(seekable)
        1    0.000    0.000    0.000    0.000 __init__.py:6(HTTPStatus)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:118(<listcomp>)
        1    0.000    0.000    0.000    0.000 _datasource.py:196(DataSource)
        1    0.000    0.000    0.000    0.000 _script.py:1478(_ScriptProfileColumn)
        1    0.000    0.000    0.000    0.000 trace.py:11(Trace)
        1    0.000    0.000    0.000    0.000 core.py:115(<listcomp>)
        2    0.000    0.000    0.000    0.000 deprecation.py:184(_deprecate_positional_args)
       16    0.000    0.000    0.000    0.000 _dtype.py:24(_kind_name)
        1    0.000    0.000    0.000    0.000 transforms.py:1702(__init__)
        1    0.000    0.000    0.000    0.000 arrayterator.py:16(Arrayterator)
        1    0.000    0.000    0.000    0.000 figure.py:47(_AxesStack)
        1    0.000    0.000    0.000    0.000 numbers.py:3465(ComplexInfinity)
        1    0.000    0.000    0.000    0.000 function.py:1941(Lambda)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:11392(gennorm_gen)
        2    0.000    0.000    0.000    0.000 sysconfig.py:299(get_preferred_scheme)
        1    0.000    0.000    0.000    0.000 sampler.py:82(RandomSampler)
        1    0.000    0.000    0.000    0.000 miobase.py:1(<module>)
        1    0.000    0.000    0.000    0.000 function.py:674(NestedIOFunction)
        1    0.000    0.000    0.000    0.000 profiler_util.py:385(FunctionEvent)
        1    0.000    0.000    0.000    0.000 discovery.py:132(PackageFinder)
        1    0.000    0.000    0.000    0.000 _common.py:267(tzrangebase)
        1    0.000    0.000    0.000    0.000 stringpict.py:354(prettyForm)
        1    0.000    0.000    0.000    0.000 __init__.py:222(__exit__)
        1    0.000    0.000    0.000    0.000 numbers.py:762(harmonic)
        1    0.000    0.000    0.000    0.000 internal.py:41(__init__)
       10    0.000    0.000    0.000    0.000 symbolic_opset11.py:84(_apply_params)
        1    0.000    0.000    0.000    0.000 _wavelets.py:1(<module>)
        1    0.000    0.000    0.000    0.000 functional_modules.py:129(QFunctional)
        1    0.000    0.000    0.000    0.000 assume.py:358(UndefinedPredicate)
        1    0.000    0.000    0.000    0.000 core.py:726(Variable)
        1    0.000    0.000    0.000    0.000 ticker.py:1218(LogitFormatter)
        1    0.000    0.000    0.000    0.000 scalarfloat.py:98(ExponentialFloat)
        1    0.000    0.000    0.000    0.000 linear.py:11(Linear)
        1    0.000    0.000    0.000    0.000 bessel.py:36(BesselBase)
        1    0.000    0.000    0.000    0.000 rnn.py:1248(GRUCell)
        1    0.000    0.000    0.000    0.000 modules.py:44(Module)
        1    0.000    0.000    0.000    0.000 feedparser.py:136(FeedParser)
       15    0.000    0.000    0.000    0.000 symbolic_opset10.py:64(_apply_params)
        1    0.000    0.000    0.000    0.000 tag.py:20(Tag)
       14    0.000    0.000    0.000    0.000 _common.py:9(__init__)
        1    0.000    0.000    0.000    0.000 headerregistry.py:260(UnstructuredHeader)
        2    0.000    0.000    0.000    0.000 {method 'tobytes' of 'numpy.generic' objects}
        1    0.000    0.000    0.000    0.000 __init__.py:434(Stripper)
        1    0.000    0.000    0.000    0.000 dataloader.py:684(_MultiProcessingDataLoaderIter)
        1    0.000    0.000    0.000    0.000 __init__.py:17(Future)
        1    0.000    0.000    0.000    0.000 error_functions.py:1964(Ci)
        2    0.000    0.000    0.000    0.000 constraints.py:126(__call__)
        1    0.000    0.000    0.000    0.000 spline.py:1(<module>)
        3    0.000    0.000    0.000    0.000 _new_distributions.py:433(_moment_central_formula)
        1    0.000    0.000    0.000    0.000 resource_sharer.py:61(_ResourceSharer)
        1    0.000    0.000    0.000    0.000 __init__.py:13(register)
       20    0.000    0.000    0.000    0.000 mul.py:571(<listcomp>)
        1    0.000    0.000    0.000    0.000 conv.py:82(Conv2d)
        1    0.000    0.000    0.000    0.000 selector_events.py:744(_SelectorTransport)
        1    0.000    0.000    0.000    0.000 npyio.py:106(NpzFile)
        1    0.000    0.000    0.000    0.000 fake_quantize.py:290(FusedMovingAvgObsFakeQuantize)
        1    0.000    0.000    0.000    0.000 abc.py:131(TraversableResources)
        1    0.000    0.000    0.000    0.000 _arffread.py:339(RelationalAttribute)
        1    0.000    0.000    0.000    0.000 __init__.py:531(Formatter)
        1    0.000    0.000    0.000    0.000 fancysets.py:519(Range)
        1    0.000    0.000    0.000    0.000 matrix_element.py:5(Matrix_Ele)
       24    0.000    0.000    0.000    0.000 {method 'squeeze' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.000    0.000 rmsprop.py:11(RMSprop)
        1    0.000    0.000    0.000    0.000 extensions.py:11(ExtensionElement)
        3    0.000    0.000    0.000    0.000 __init__.py:6(is_available)
        1    0.000    0.000    0.000    0.000 taskgroups.py:12(TaskGroup)
        1    0.000    0.000    0.000    0.000 _interpolate.py:592(_PPolyBase)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1595(chi2_gen)
        1    0.000    0.000    0.000    0.000 ideals.py:282(ModuleImplementedIdeal)
       51    0.000    0.000    0.000    0.000 iterables.py:861(key)
        1    0.000    0.000    0.000    0.000 utils.py:8(IterableWrapperIterDataPipe)
        1    0.000    0.000    0.000    0.000 __init__.py:347(EntryPoints)
        1    0.000    0.000    0.000    0.000 gaussiandomains.py:246(GaussianDomain)
        1    0.000    0.000    0.000    0.000 __init__.py:879(DoubleStorage)
        1    0.000    0.000    0.000    0.000 Periodicity_System.py:12(PeriodicityPhysicsSystem)
        1    0.000    0.000    0.000    0.000 triangulation.py:4(Triangulation)
        1    0.000    0.000    0.000    0.000 operations.py:38(__init__)
        4    0.000    0.000    0.000    0.000 pretty_symbology.py:233(<lambda>)
        1    0.000    0.000    0.000    0.000 primes.py:41(PrimeIdeal)
        1    0.000    0.000    0.000    0.000 rprop.py:11(Rprop)
        1    0.000    0.000    0.000    0.000 pycode.py:552(PythonCodePrinter)
        1    0.000    0.000    0.000    0.000 structure.py:25(SymmetrizedStructure)
       12    0.000    0.000    0.000    0.000 matexpr.py:21(_sympifyit)
        1    0.000    0.000    0.000    0.000 collections.py:1464(EventCollection)
        1    0.000    0.000    0.000    0.000 header.py:413(_ValueFormatter)
        1    0.000    0.000    0.000    0.000 colors.py:1238(SymLogNorm)
        1    0.000    0.000    0.000    0.000 extensions.py:219(MonogenicFiniteExtension)
        1    0.000    0.000    0.000    0.000 elliptic_integrals.py:103(elliptic_f)
        1    0.000    0.000    0.000    0.000 _nonlin.py:615(LowRankMatrix)
        4    0.000    0.000    0.000    0.000 pretty_symbology.py:236(<lambda>)
        1    0.000    0.000    0.000    0.000 padding.py:15(_ConstantPadNd)
        1    0.000    0.000    0.000    0.000 wrappers.py:78(elementwise_type_promotion_wrapper)
        1    0.000    0.000    0.000    0.000 bessel.py:106(besselj)
        1    0.000    0.000    0.000    0.000 _multivariate.py:2578(invwishart_gen)
        1    0.000    0.000    0.000    0.000 image.py:1134(PcolorImage)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4780(hypsecant_gen)
        1    0.000    0.000    0.000    0.000 legend_handler.py:436(__init__)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:8859(powerlognorm_gen)
        3    0.000    0.000    0.000    0.000 __init__.py:1720(getEffectiveLevel)
        1    0.000    0.000    0.000    0.000 unix_events.py:457(_UnixReadPipeTransport)
        1    0.000    0.000    0.000    0.000 __init__.py:918(PathDistribution)
        1    0.000    0.000    0.000    0.000 exceptions.py:11(SymPyDeprecationWarning)
        1    0.000    0.000    0.000    0.000 kind.py:257(__init__)
        1    0.000    0.000    0.000    0.000 contour.py:1388(QuadContourSet)
        1    0.000    0.000    0.000    0.000 add_newdocs.py:1(<module>)
        1    0.000    0.000    0.000    0.000 blocking_input.py:101(BlockingMouseInput)
        1    0.000    0.000    0.000    0.000 _spherical_voronoi.py:36(SphericalVoronoi)
        2    0.000    0.000    0.000    0.000 domain.py:846(__eq__)
        1    0.000    0.000    0.000    0.000 conv.py:1470(LazyConvTranspose2d)
        1    0.000    0.000    0.000    0.000 batchnorm.py:552(SyncBatchNorm)
        2    0.000    0.000    0.000    0.000 _new_distributions.py:324(_icdf_formula)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:10074(truncexpon_gen)
        1    0.000    0.000    0.000    0.000 special.py:213(OneMatrix)
       30    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1363(exec_module)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:1632(TypeVar)
        1    0.000    0.000    0.000    0.000 para4band.py:331(<listcomp>)
        1    0.000    0.000    0.000    0.000 transformer.py:317(TransformerDecoder)
        1    0.000    0.000    0.000    0.000 __init__.py:979(LongStorage)
        1    0.000    0.000    0.000    0.000 setupcfg.py:603(ConfigOptionsHandler)
        1    0.000    0.000    0.000    0.000 outputs.py:177(KpointOptProps)
        1    0.000    0.000    0.000    0.000 autograd_function.py:30(__init__)
        1    0.000    0.000    0.000    0.000 integers.py:297(ceiling)
        1    0.000    0.000    0.000    0.000 rnn.py:230(GRUCell)
        1    0.000    0.000    0.000    0.000 _backend.py:36(_backend_from_arg)
        1    0.000    0.000    0.000    0.000 utils.py:11(WeightedQuantizedModule)
        1    0.000    0.000    0.000    0.000 core.py:6345(mvoid)
        1    0.000    0.000    0.000    0.000 tarfile.py:328(_Stream)
        1    0.000    0.000    0.000    0.000 hadamard.py:313(HadamardPower)
        4    0.000    0.000    0.000    0.000 pretty_symbology.py:237(<lambda>)
        1    0.000    0.000    0.000    0.000 _special_sparse_arrays.py:10(LaplacianNd)
        1    0.000    0.000    0.000    0.000 ctx_mp_python.py:163(__neg__)
        1    0.000    0.000    0.000    0.000 __init__.py:1402(_fixupChildren)
        3    0.000    0.000    0.000    0.000 glob.py:213(_join)
        2    0.000    0.000    0.000    0.000 polyclasses.py:1241(_new)
        1    0.000    0.000    0.000    0.000 asgd.py:18(ASGD)
        1    0.000    0.000    0.000    0.000 minpack2.py:1(<module>)
        1    0.000    0.000    0.000    0.000 traceback.py:372(StackSummary)
        1    0.000    0.000    0.000    0.000 __init__.py:331(_Stream)
        1    0.000    0.000    0.000    0.000 combining.py:117(_ForkerIterDataPipe)
        2    0.000    0.000    0.000    0.000 facts.py:305(rules_beta)
        1    0.000    0.000    0.000    0.000 containers.py:23(Tuple)
        1    0.000    0.000    0.000    0.000 widgets.py:1417(_SelectorWidget)
        1    0.000    0.000    0.000    0.000 autocast_mode.py:6(autocast)
        1    0.000    0.000    0.000    0.000 fancysets.py:166(Integers)
        1    0.000    0.000    0.000    0.000 Orbit_spd.py:16(orbit_spd)
        1    0.000    0.000    0.000    0.000 isolve.py:1(<module>)
        1    0.000    0.000    0.000    0.000 selector_events.py:888(_SelectorSocketTransport)
        1    0.000    0.000    0.000    0.000 series.py:1978(ParametricSurfaceSeries)
        1    0.000    0.000    0.000    0.000 ops.py:153(<listcomp>)
        1    0.000    0.000    0.000    0.000 __init__.py:989(IntStorage)
        1    0.000    0.000    0.000    0.000 dos.py:37(DOS)
        1    0.000    0.000    0.000    0.000 distance.py:1990(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _base.py:174(_process_plot_var_args)
        1    0.000    0.000    0.000    0.000 graph_module.py:230(_WrappedCall)
        1    0.000    0.000    0.000    0.000 __init__.py:60(Quantize)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:3579(TypeAliasType)
        1    0.000    0.000    0.000    0.000 transforms.py:1012(TransformedBbox)
        1    0.000    0.000    0.000    0.000 integers.py:21(RoundFunction)
        1    0.000    0.000    0.000    0.000 generate.py:26(Sieve)
        1    0.000    0.000    0.000    0.000 _script.py:179(OrderedDictWrapper)
        1    0.000    0.000    0.000    0.000 partitions.py:15(Partition)
        1    0.000    0.000    0.000    0.000 warnings.py:25(SetuptoolsWarning)
        1    0.000    0.000    0.000    0.000 _ltisys.py:132(lti)
        1    0.000    0.000    0.000    0.000 importer.py:183(OrderedImporter)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1007(AnchoredOffsetbox)
       18    0.000    0.000    0.000    0.000 typing_extensions.py:762(<genexpr>)
        1    0.000    0.000    0.000    0.000 patches.py:1833(_Style)
        1    0.000    0.000    0.000    0.000 error_functions.py:2710(_erfs)
        1    0.000    0.000    0.000    0.000 _docscrape.py:623(ClassDoc)
        1    0.000    0.000    0.000    0.000 conv_add.py:52(ConvAddReLU2d)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1074(bradford_gen)
        1    0.000    0.000    0.000    0.000 function_base.py:2314(<listcomp>)
        1    0.000    0.000    0.000    0.000 dense_ndim_array.py:132(ImmutableDenseNDimArray)
        1    0.000    0.000    0.000    0.000 _zeros_py.py:1122(TOMS748Solver)
        1    0.000    0.000    0.000    0.000 _symbolic_trace.py:900(_Patcher)
        1    0.000    0.000    0.000    0.000 pg_operation.py:10(PointGroupOp)
        2    0.000    0.000    0.000    0.000 _new_distributions.py:299(_process_parameters)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:634(DomainLiteral)
        1    0.000    0.000    0.000    0.000 swa_utils.py:200(SWALR)
        1    0.000    0.000    0.000    0.000 __init__.py:104(CallbackRegistry)
        1    0.000    0.000    0.000    0.000 __init__.py:143(__init__)
        1    0.000    0.000    0.000    0.000 axis.py:29(<listcomp>)
        1    0.000    0.000    0.000    0.000 __init__.py:1009(CharStorage)
        1    0.000    0.000    0.000    0.000 sequences.py:415(SeqExpr)
        1    0.000    0.000    0.000    0.000 adjoint.py:6(Adjoint)
        1    0.000    0.000    0.000    0.000 specifiers.py:690(SpecifierSet)
        1    0.000    0.000    0.000    0.000 single.py:211(SingleODESolver)
        1    0.000    0.000    0.000    0.000 bdist.py:37(ListCompat)
        1    0.000    0.000    0.000    0.000 outputs.py:4975(Wavecar)
        1    0.000    0.000    0.000    0.000 __init__.py:899(HalfStorage)
        1    0.000    0.000    0.000    0.000 __init__.py:999(ShortStorage)
        1    0.000    0.000    0.000    0.000 threading.py:822(_maintain_shutdown_locks)
        1    0.000    0.000    0.000    0.000 __init__.py:1224(levy_stable_frozen)
        1    0.000    0.000    0.000    0.000 dataframes.py:417(DataFrameTracer)
        1    0.000    0.000    0.000    0.000 connection.py:431(Listener)
        2    0.000    0.000    0.000    0.000 core.py:6643(__setattr__)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:961(poisson_gen)
       19    0.000    0.000    0.000    0.000 fromnumeric.py:3265(_round_dispatcher)
        2    0.000    0.000    0.000    0.000 util.py:289(<listcomp>)
        1    0.000    0.000    0.000    0.000 _rules.py:182(_FxFrontendAotautograd)
       11    0.000    0.000    0.000    0.000 reductions.py:110(_torch_reduce)
        1    0.000    0.000    0.000    0.000 gamma_functions.py:398(uppergamma)
        1    0.000    0.000    0.000    0.000 sets.py:10(MatrixSet)
       16    0.000    0.000    0.000    0.000 _add_newdocs_scalars.py:79(<genexpr>)
        1    0.000    0.000    0.000    0.000 warnings.py:403(__init__)
        1    0.000    0.000    0.000    0.000 _utils.py:93(BasicEvaluation)
        1    0.000    0.000    0.000    0.000 _sensitivity_analysis.py:161(SobolResult)
        1    0.000    0.000    0.000    0.000 property.py:3(Property)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:740(nhypergeom_gen)
        1    0.000    0.000    0.000    0.000 __init__.py:72(__init__)
        1    0.000    0.000    0.000    0.000 backend_tools.py:394(ToolQuit)
        1    0.000    0.000    0.000    0.000 graph_module.py:27(_EvalCacheLoader)
        1    0.000    0.000    0.000    0.000 _support_alternative_backends.py:295(<listcomp>)
        1    0.000    0.000    0.000    0.000 threading.py:224(Condition)
        1    0.000    0.000    0.000    0.000 socket.py:662(SocketIO)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha3_224}
        1    0.000    0.000    0.000    0.000 conv_relu.py:119(ConvReLU3d)
        1    0.000    0.000    0.000    0.000 __init__.py:959(BFloat16Storage)
        1    0.000    0.000    0.000    0.000 ctx_iv.py:151(ivmpc)
        1    0.000    0.000    0.000    0.000 transforms.py:2503(BboxTransformTo)
        1    0.000    0.000    0.000    0.000 __init__.py:79(method_cache)
        1    0.000    0.000    0.000    0.000 mod.py:12(Mod)
        1    0.000    0.000    0.000    0.000 __init__.py:889(FloatStorage)
        1    0.000    0.000    0.000    0.000 difflib.py:1666(HtmlDiff)
        1    0.000    0.000    0.000    0.000 scalarint.py:12(ScalarInt)
        1    0.000    0.000    0.000    0.000 core.py:3553(White)
        1    0.000    0.000    0.000    0.000 ticker.py:1413(EngFormatter)
        1    0.000    0.000    0.000    0.000 nodes.py:11(Node)
        1    0.000    0.000    0.000    0.000 splitter_base.py:81(FxNetAccNodesFinder)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:565(anglit_gen)
        1    0.000    0.000    0.000    0.000 numbers.py:2839(One)
       11    0.000    0.000    0.000    0.000 api.py:488(method_factory)
        1    0.000    0.000    0.000    0.000 half_cauchy.py:12(HalfCauchy)
        3    0.000    0.000    0.000    0.000 __init__.py:880(legacy_normalize)
        1    0.000    0.000    0.000    0.000 function_base.py:2117(vectorize)
        1    0.000    0.000    0.000    0.000 singleton.py:24(SingletonRegistry)
        1    0.000    0.000    0.000    0.000 rnn.py:749(RNNCellBase)
        1    0.000    0.000    0.000    0.000 graph.py:113(_Namespace)
        1    0.000    0.000    0.000    0.000 msgpack.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _differentiable_functions.py:119(ScalarFunction)
        1    0.000    0.000    0.000    0.000 _gauss_legendre.py:10(GaussLegendreQuadrature)
        1    0.000    0.000    0.000    0.000 _structures.py:6(InfinityType)
        1    0.000    0.000    0.000    0.000 conv_add.py:9(ConvAdd2d)
        1    0.000    0.000    0.000    0.000 normalization.py:87(LayerNorm)
        1    0.000    0.000    0.000    0.000 ticker.py:2084(MaxNLocator)
        1    0.000    0.000    0.000    0.000 dataset.py:280(Subset)
       20    0.000    0.000    0.000    0.000 mul.py:672(<listcomp>)
        1    0.000    0.000    0.000    0.000 _internal.py:217(_getintp_ctype)
        1    0.000    0.000    0.000    0.000 integers.py:97(floor)
        3    0.000    0.000    0.000    0.000 constraints.py:109(__init__)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2460(foldcauchy_gen)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:476(Hyper_Function)
        1    0.000    0.000    0.000    0.000 subprocess.py:17(SubprocessStreamProtocol)
        6    0.000    0.000    0.000    0.000 ops.py:752(force_aff_func_args)
       16    0.000    0.000    0.000    0.000 dataclasses.py:1239(<genexpr>)
        1    0.000    0.000    0.000    0.000 _apply_pyprojecttoml.py:503(_MissingDynamic)
        1    0.000    0.000    0.000    0.000 units.py:110(ConversionInterface)
        2    0.000    0.000    0.000    0.000 traceback.py:297(__getitem__)
        6    0.000    0.000    0.000    0.000 rcsetup.py:177(_validate_tex_preamble)
        1    0.000    0.000    0.000    0.000 gamma_functions.py:34(gamma)
        1    0.000    0.000    0.000    0.000 _guards.py:238(Checkpointable)
        1    0.000    0.000    0.000    0.000 mock.py:2422(_Call)
        1    0.000    0.000    0.000    0.000 _structures.py:35(NegativeInfinityType)
        1    0.000    0.000    0.000    0.000 _docscrape.py:25(Reader)
        1    0.000    0.000    0.000    0.000 transforms.py:459(ReshapeTransform)
        1    0.000    0.000    0.000    0.000 polyoptions.py:76(Options)
        1    0.000    0.000    0.000    0.000 ase.py:86(AseAtomsAdaptor)
        1    0.000    0.000    0.000    0.000 outputs.py:4849(Dynmat)
        3    0.000    0.000    0.000    0.000 __init__.py:370(_FuncPtr)
        1    0.000    0.000    0.000    0.000 mio_utils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:1089(QUInt4x2Storage)
        1    0.000    0.000    0.000    0.000 axis.py:553(Ticker)
        1    0.000    0.000    0.000    0.000 {built-in method torch._C._tracer_warn_use_python}
        1    0.000    0.000    0.000    0.000 boolalg.py:230(BooleanAtom)
        1    0.000    0.000    0.000    0.000 _multivariate.py:211(multi_rv_generic)
        1    0.000    0.000    0.000    0.000 loss.py:622(BCEWithLogitsLoss)
        1    0.000    0.000    0.000    0.000 __init__.py:919(IntStorage)
        1    0.000    0.000    0.000    0.000 arffread.py:1(<module>)
       10    0.000    0.000    0.000    0.000 wrappers.py:198(<genexpr>)
        1    0.000    0.000    0.000    0.000 ElementTree.py:1767(C14NWriterTarget)
        1    0.000    0.000    0.000    0.000 functions.py:11(TensorProduct)
        1    0.000    0.000    0.000    0.000 utils.py:8(ReferenceQuantizedModule)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3162(multinomial_gen)
        1    0.000    0.000    0.000    0.000 point.py:1073(Point3D)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:428(FloorDiv)
        1    0.000    0.000    0.000    0.000 _trustregion.py:30(BaseQuadraticSubproblem)
        1    0.000    0.000    0.000    0.000 batchnorm.py:17(_NormBase)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:115(TokenList)
        1    0.000    0.000    0.000    0.000 __init__.py:43(QuantizedEngine)
        1    0.000    0.000    0.000    0.000 _multivariate.py:1547(dirichlet_gen)
        1    0.000    0.000    0.000    0.000 diophantine.py:1213(<setcomp>)
        1    0.000    0.000    0.000    0.000 groups.py:139(PointGroup)
        1    0.000    0.000    0.000    0.000 streams.py:301(StreamWriter)
        1    0.000    0.000    0.000    0.000 conv.py:483(Conv3d)
        1    0.000    0.000    0.000    0.000 lkj_cholesky.py:19(LKJCholesky)
        1    0.000    0.000    0.000    0.000 conv.py:118(Conv3d)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7199(kappa4_gen)
        1    0.000    0.000    0.000    0.000 activation.py:1492(LogSoftmax)
        1    0.000    0.000    0.000    0.000 complexes.py:20(re)
        1    0.000    0.000    0.000    0.000 units.py:682(_my_partial)
        1    0.000    0.000    0.000    0.000 __init__.py:939(CharStorage)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3629(__init__)
        1    0.000    0.000    0.000    0.000 configparser.py:1210(ConfigParser)
        1    0.000    0.000    0.000    0.000 mio5_utils.py:1(<module>)
       10    0.000    0.000    0.000    0.000 __future__.py:83(__init__)
        1    0.000    0.000    0.000    0.000 delta_functions.py:17(DiracDelta)
        1    0.000    0.000    0.000    0.000 sets.py:1893(UniversalSet)
        1    0.000    0.000    0.000    0.000 singleton.py:114(__init__)
        1    0.000    0.000    0.000    0.000 six.py:164(_resolve)
        7    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:30(_isnull)
        1    0.000    0.000    0.000    0.000 fileopener.py:13(FileOpenerIterDataPipe)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3321(genextreme_gen)
        1    0.000    0.000    0.000    0.000 base_events.py:206(_SendfileFallbackProtocol)
        1    0.000    0.000    0.000    0.000 _pep440.py:140(__lt__)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:379(DataFlowEdge)
       18    0.000    0.000    0.000    0.000 {built-in method _stat.S_ISLNK}
        1    0.000    0.000    0.000    0.000 polynomials.py:290(gegenbauer)
        8    0.000    0.000    0.000    0.000 mathtext.py:1903(__init__)
        1    0.000    0.000    0.000    0.000 core.py:5478(_update_ignorer)
        1    0.000    0.000    0.000    0.000 _byteordercodes.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:5836(johnsonsu_gen)
        1    0.000    0.000    0.000    0.000 interval_membership.py:4(intervalMembership)
        1    0.000    0.000    0.000    0.000 special.py:10(ZeroMatrix)
        1    0.000    0.000    0.000    0.000 sequences.py:962(SeqExprOp)
        1    0.000    0.000    0.000    0.000 error_functions.py:2104(Shi)
        1    0.000    0.000    0.000    0.000 enumerative.py:368(MultisetPartitionTraverser)
        1    0.000    0.000    0.000    0.000 ticker.py:1909(LinearLocator)
        1    0.000    0.000    0.000    0.000 constraints.py:515(_Cat)
        1    0.000    0.000    0.000    0.000 discovery.py:185(ModuleFinder)
        1    0.000    0.000    0.000    0.000 structure.py:83(Neighbor)
        1    0.000    0.000    0.000    0.000 complexes.py:142(im)
        1    0.000    0.000    0.000    0.000 __config__.py:95(<listcomp>)
        1    0.000    0.000    0.000    0.000 configparser.py:297(ParsingError)
        1    0.000    0.000    0.000    0.000 ticker.py:232(Formatter)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2861(truncweibull_min_gen)
        1    0.000    0.000    0.000    0.000 discovery.py:298(ConfigDiscovery)
        1    0.000    0.000    0.000    0.000 decomp.py:1(<module>)
        1    0.000    0.000    0.000    0.000 repmatrix.py:585(_fromrep)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:674(Formula)
        1    0.000    0.000    0.000    0.000 bn_relu.py:12(BNReLU2d)
        1    0.000    0.000    0.000    0.000 relaxed_categorical.py:88(RelaxedOneHotCategorical)
        1    0.000    0.000    0.000    0.000 splitter_base.py:193(SplitResult)
        1    0.000    0.000    0.000    0.000 kronecker.py:86(KroneckerProduct)
        1    0.000    0.000    0.000    0.000 mathtext.py:291(MathtextBackendSvg)
        1    0.000    0.000    0.000    0.000 extras.py:1607(MAxisConcatenator)
        1    0.000    0.000    0.000    0.000 fake_quantize.py:114(FakeQuantize)
        1    0.000    0.000    0.000    0.000 relational.py:549(Equality)
        1    0.000    0.000    0.000    0.000 structure.py:142(PeriodicNeighbor)
        1    0.000    0.000    0.000    0.000 distributed.py:164(_DDPSink)
       17    0.000    0.000    0.000    0.000 stride_tricks.py:476(_broadcast_arrays_dispatcher)
        3    0.000    0.000    0.000    0.000 typing.py:900(__repr__)
        1    0.000    0.000    0.000    0.000 __init__.py:1148(<listcomp>)
        1    0.000    0.000    0.000    0.000 _version.py:14(NumpyVersion)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1857(cache_policy)
        1    0.000    0.000    0.000    0.000 exprtools.py:809(Term)
        3    0.000    0.000    0.000    0.000 rcsetup.py:754(validate_sketch)
        3    0.000    0.000    0.000    0.000 rcsetup.py:990(validate_hist_bins)
        1    0.000    0.000    0.000    0.000 fitpack.py:1(<module>)
       20    0.000    0.000    0.000    0.000 numbers.py:2835(__bool__)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2479(_logpmf_dispatch)
        1    0.000    0.000    0.000    0.000 linear.py:48(Linear)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:886(SupportsAbs)
       16    0.000    0.000    0.000    0.000 results.py:29(__getitem__)
        2    0.000    0.000    0.000    0.000 _pep440.py:158(_compare)
        1    0.000    0.000    0.000    0.000 __init__.py:949(BoolStorage)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3254(genexpon_gen)
        1    0.000    0.000    0.000    0.000 core.py:97(<listcomp>)
        1    0.000    0.000    0.000    0.000 events.py:610(AbstractEventLoopPolicy)
        1    0.000    0.000    0.000    0.000 normalization.py:5(LayerNorm)
        1    0.000    0.000    0.000    0.000 colors.py:371(ColorConverter)
        3    0.000    0.000    0.000    0.000 __init__.py:1319(disable)
        1    0.000    0.000    0.000    0.000 _ops.py:589(__init__)
        1    0.000    0.000    0.000    0.000 cobyla.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:1049(ComplexFloatStorage)
        1    0.000    0.000    0.000    0.000 _vertex.py:9(VertexBase)
        1    0.000    0.000    0.000    0.000 _cubic.py:160(PchipInterpolator)
        1    0.000    0.000    0.000    0.000 suite.py:16(BaseTestSuite)
        1    0.000    0.000    0.000    0.000 discovery.py:84(_Finder)
        1    0.000    0.000    0.000    0.000 orderings.py:63(ProductOrder)
        1    0.000    0.000    0.000    0.000 single.py:341(NthAlgebraic)
        1    0.000    0.000    0.000    0.000 gzip.py:455(_GzipReader)
        1    0.000    0.000    0.000    0.000 _functions.py:10(Broadcast)
        1    0.000    0.000    0.000    0.000 sets.py:854(ProductSet)
        2    0.000    0.000    0.000    0.000 distributed_c10d.py:393(WORLD)
        1    0.000    0.000    0.000    0.000 container.py:5(Container)
        1    0.000    0.000    0.000    0.000 pkgutil.py:269(ImpLoader)
        3    0.000    0.000    0.000    0.000 feedparser.py:210(_pop_message)
        1    0.000    0.000    0.000    0.000 binrel.py:135(AppliedBinaryRelation)
       10    0.000    0.000    0.000    0.000 decorator.py:195(<genexpr>)
        1    0.000    0.000    0.000    0.000 outputs.py:5824(WSWQ)
        1    0.000    0.000    0.000    0.000 _differentiable_functions.py:516(VectorFunction)
        1    0.000    0.000    0.000    0.000 modules.py:1339(QuotientModule)
        1    0.000    0.000    0.000    0.000 factorials.py:828(binomial)
        1    0.000    0.000    0.000    0.000 _globals.py:52(__new__)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:913(ReduceLROnPlateau)
        1    0.000    0.000    0.000    0.000 ckdtree.py:1(<module>)
        4    0.000    0.000    0.000    0.000 sympify.py:28(__init__)
        1    0.000    0.000    0.000    0.000 parabola.py:20(Parabola)
        1    0.000    0.000    0.000    0.000 profiler_util.py:16(EventList)
        1    0.000    0.000    0.000    0.000 __init__.py:84(__init__)
        1    0.000    0.000    0.000    0.000 _atfork.py:1(<module>)
        1    0.000    0.000    0.000    0.000 six.py:205(load_module)
        1    0.000    0.000    0.000    0.000 modules.py:1647(PowerBasisElement)
        1    0.000    0.000    0.000    0.000 _functions.py:6(SyncBatchNorm)
        1    0.000    0.000    0.000    0.000 _nbit.py:1(<module>)
        1    0.000    0.000    0.000    0.000 tritools.py:11(TriAnalyzer)
        1    0.000    0.000    0.000    0.000 __init__.py:929(ShortStorage)
        1    0.000    0.000    0.000    0.000 text.py:1326(_AnnotationBase)
        1    0.000    0.000    0.000    0.000 _mangling.py:9(PackageMangler)
        8    0.000    0.000    0.000    0.000 unicode.py:9(__init__)
        1    0.000    0.000    0.000    0.000 _multivariate.py:5835(__init__)
        1    0.000    0.000    0.000    0.000 argparse.py:1328(_ActionsContainer)
        1    0.000    0.000    0.000    0.000 transforms.py:634(TanhTransform)
        1    0.000    0.000    0.000    0.000 codata.py:1(<module>)
        1    0.000    0.000    0.000    0.000 cpp_backtrace.py:1(<module>)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:753(PngImageFile)
        1    0.000    0.000    0.000    0.000 _at.py:61(at)
        1    0.000    0.000    0.000    0.000 __init__.py:969(ComplexDoubleStorage)
        1    0.000    0.000    0.000    0.000 __init__.py:1029(BFloat16Storage)
        1    0.000    0.000    0.000    0.000 backend_tools.py:694(ToolHome)
        1    0.000    0.000    0.000    0.000 mvn.py:1(<module>)
        1    0.000    0.000    0.000    0.000 kumaraswamy.py:20(Kumaraswamy)
        6    0.000    0.000    0.000    0.000 sdm.py:85(<genexpr>)
        2    0.000    0.000    0.000    0.000 _new_distributions.py:44(__new__)
        1    0.000    0.000    0.000    0.000 __init__.py:219(__enter__)
        1    0.000    0.000    0.000    0.000 dense.py:28(DenseMatrix)
        1    0.000    0.000    0.000    0.000 difflib.py:724(Differ)
        1    0.000    0.000    0.000    0.000 mio.py:1(<module>)
        7    0.000    0.000    0.000    0.000 getlimits.py:157(_register_type)
        1    0.000    0.000    0.000    0.000 embedding_ops.py:8(Embedding)
       14    0.000    0.000    0.000    0.000 {method 'seek' of '_io.StringIO' objects}
        1    0.000    0.000    0.000    0.000 _ode.py:1121(dopri5)
        1    0.000    0.000    0.000    0.000 conv.py:1141(_LazyConvXdMixin)
        1    0.000    0.000    0.000    0.000 activation.py:161(Softmax)
        1    0.000    0.000    0.000    0.000 rnn.py:30(PackedSequence)
        1    0.000    0.000    0.000    0.000 line.py:1343(Ray)
        1    0.000    0.000    0.000    0.000 inverse.py:8(Inverse)
        1    0.000    0.000    0.000    0.000 queue.py:258(_PySimpleQueue)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:498(geom_gen)
        1    0.000    0.000    0.000    0.000 fft.py:250(_ShapeAndDims)
        1    0.000    0.000    0.000    0.000 blockmatrix.py:560(BlockDiagMatrix)
        1    0.000    0.000    0.000    0.000 connection.py:347(Connection)
        1    0.000    0.000    0.000    0.000 pythonintegerring.py:13(PythonIntegerRing)
        1    0.000    0.000    0.000    0.000 sampler.py:139(SubsetRandomSampler)
        1    0.000    0.000    0.000    0.000 batchnorm.py:9(_BatchNorm)
        1    0.000    0.000    0.000    0.000 _datasource.py:536(Repository)
        1    0.000    0.000    0.000    0.000 lbfgsb.py:1(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:1303(Manager)
        1    0.000    0.000    0.000    0.000 outputs.py:4024(Procar)
        2    0.000    0.000    0.000    0.000 cache.py:190(LazyFunction)
        1    0.000    0.000    0.000    0.000 single.py:1297(SeparableReduced)
        1    0.000    0.000    0.000    0.000 activation.py:1249(PReLU)
        1    0.000    0.000    0.000    0.000 fft.py:409(_CanonicalizeC2rReturn)
        1    0.000    0.000    0.000    0.000 lti_conversion.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:4006(rv_sample)
        1    0.000    0.000    0.000    0.000 conv.py:765(ConvTranspose2d)
        1    0.000    0.000    0.000    0.000 constraints.py:96(_Dependent)
        1    0.000    0.000    0.000    0.000 backend_tools.py:992(ToolHelpBase)
        3    0.000    0.000    0.000    0.000 zipfile.py:689(_check_compression)
        1    0.000    0.000    0.000    0.000 expr.py:4134(ExprBuilder)
        1    0.000    0.000    0.000    0.000 half_normal.py:12(HalfNormal)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3599(ContinuousDistribution)
        1    0.000    0.000    0.000    0.000 util.py:182(Finalize)
        1    0.000    0.000    0.000    0.000 pycode.py:765(<dictcomp>)
        1    0.000    0.000    0.000    0.000 perm_groups.py:5342(Coset)
        3    0.000    0.000    0.000    0.000 rcsetup.py:541(validate_ps_distiller)
        1    0.000    0.000    0.000    0.000 conv_fused.py:695(ConvBnReLU3d)
        1    0.000    0.000    0.000    0.000 beta_functions.py:20(beta)
        1    0.000    0.000    0.000    0.000 unix_events.py:1337(ThreadedChildWatcher)
        1    0.000    0.000    0.000    0.000 pycode.py:416(ArrayPrinter)
        1    0.000    0.000    0.000    0.000 error_functions.py:2210(Chi)
        1    0.000    0.000    0.000    0.000 para4band.py:53(Stiefel_Frame_Function)
        1    0.000    0.000    0.000    0.000 rnn.py:1061(RNNCell)
        4    0.000    0.000    0.000    0.000 doccer.py:180(replace_notes_in_docstring)
        1    0.000    0.000    0.000    0.000 stackplot.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fancy_getopt.py:37(FancyGetopt)
        1    0.000    0.000    0.000    0.000 __init__.py:1099(QUInt2x4Storage)
        1    0.000    0.000    0.000    0.000 polyint.py:1(<module>)
        1    0.000    0.000    0.000    0.000 engine.py:342(DiagnosticEngine)
        3    0.000    0.000    0.000    0.000 rcsetup.py:740(validate_bbox)
        7    0.000    0.000    0.000    0.000 __init__.py:27(__init__)
        1    0.000    0.000    0.000    0.000 spglib.py:108(SpglibDataset)
        1    0.000    0.000    0.000    0.000 _typing.py:36(JustInt)
        1    0.000    0.000    0.000    0.000 fitpack2.py:1(<module>)
        3    0.000    0.000    0.000    0.000 message.py:211(is_multipart)
        1    0.000    0.000    0.000    0.000 extras.py:1655(__init__)
        1    0.000    0.000    0.000    0.000 gamma_functions.py:564(polygamma)
        1    0.000    0.000    0.000    0.000 blocking_input.py:32(BlockingInput)
        1    0.000    0.000    0.000    0.000 matexpr.py:597(MatrixElement)
        1    0.000    0.000    0.000    0.000 mathtext.py:1444(Char)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1235(_kwargs2args)
        1    0.000    0.000    0.000    0.000 inference.py:252(KB)
       16    0.000    0.000    0.000    0.000 structure.py:3559(charge)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1347(ReduceOrder)
        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:897(_resolve_filename)
        1    0.000    0.000    0.000    0.000 __init__.py:606(_FileInFile)
        1    0.000    0.000    0.000    0.000 rnn.py:7(LSTM)
        1    0.000    0.000    0.000    0.000 immutable.py:82(ImmutableDenseMatrix)
        1    0.000    0.000    0.000    0.000 hmac.py:27(HMAC)
       15    0.000    0.000    0.000    0.000 fromnumeric.py:2974(_prod_dispatcher)
       12    0.000    0.000    0.000    0.000 patches.py:1879(<genexpr>)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3858(random_correlation_gen)
        1    0.000    0.000    0.000    0.000 compat.py:187(MutableSliceableSequence)
        1    0.000    0.000    0.000    0.000 mock.py:293(_Sentinel)
        1    0.000    0.000    0.000    0.000 pretty_symbology.py:191(<listcomp>)
        1    0.000    0.000    0.000    0.000 rotation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:11948(rv_histogram)
        1    0.000    0.000    0.000    0.000 textpath.py:24(__init__)
        2    0.000    0.000    0.000    0.000 __init__.py:132(DistutilsLoader)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7768(ncx2_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7553(moyal_gen)
        1    0.000    0.000    0.000    0.000 core.py:2372(_MaskedPrintOption)
        1    0.000    0.000    0.000    0.000 markers.py:274(Marker)
        1    0.000    0.000    0.000    0.000 ndim_array.py:15(ArrayKind)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:608(G_Function)
        1    0.000    0.000    0.000    0.000 ElementTree.py:1506(XMLParser)
        1    0.000    0.000    0.000    0.000 _internal.py:249(_ctypes)
        1    0.000    0.000    0.000    0.000 __init__.py:1069(QInt8Storage)
        1    0.000    0.000    0.000    0.000 series.py:1289(LineOver1DRangeSeries)
        1    0.000    0.000    0.000    0.000 harwell_boeing.py:1(<module>)
        1    0.000    0.000    0.000    0.000 sputils.py:1(<module>)
        9    0.000    0.000    0.000    0.000 core.py:1550(<genexpr>)
        2    0.000    0.000    0.000    0.000 scale.py:634(get_scale_names)
        1    0.000    0.000    0.000    0.000 elliptic_integrals.py:13(elliptic_k)
        1    0.000    0.000    0.000    0.000 unix_events.py:1033(SafeChildWatcher)
        1    0.000    0.000    0.000    0.000 colors.py:509(Colormap)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1347(fisk_gen)
        1    0.000    0.000    0.000    0.000 core.py:5202(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 axis3d.py:477(YAxis)
        1    0.000    0.000    0.000    0.000 linear_relu.py:50(LinearLeakyReLU)
        1    0.000    0.000    0.000    0.000 getlimits.py:378(finfo)
        1    0.000    0.000    0.000    0.000 weibull.py:11(Weibull)
        9    0.000    0.000    0.000    0.000 enum.py:1354(<lambda>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1962(dweibull_gen)
        1    0.000    0.000    0.000    0.000 transformer.py:166(TransformerEncoder)
        1    0.000    0.000    0.000    0.000 hyper.py:959(HyperRep_asin1)
        1    0.000    0.000    0.000    0.000 bessel.py:282(bessely)
        6    0.000    0.000    0.000    0.000 symbolic_opset8.py:67(_apply_params)
       12    0.000    0.000    0.000    0.000 symbol.py:784(literal)
       32    0.000    0.000    0.000    0.000 {method 'is_dir' of 'posix.DirEntry' objects}
        1    0.000    0.000    0.000    0.000 core.py:116(<listcomp>)
        1    0.000    0.000    0.000    0.000 combining.py:93(_ContainerTemplate)
        1    0.000    0.000    0.000    0.000 gamma_functions.py:222(lowergamma)
        1    0.000    0.000    0.000    0.000 __init__.py:2401(_CustomTextWrap)
        1    0.000    0.000    0.000    0.000 libmpi.py:96(mpi_neg)
        1    0.000    0.000    0.000    0.000 mathtext.py:1557(List)
        1    0.000    0.000    0.000    0.000 tr_interior_point.py:23(BarrierSubproblem)
        1    0.000    0.000    0.000    0.000 point.py:860(Point2D)
        1    0.000    0.000    0.000    0.000 ticker.py:1564(PercentFormatter)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:2447(_UnpackAlias)
        1    0.000    0.000    0.000    0.000 odepack.py:1(<module>)
        1    0.000    0.000    0.000    0.000 mstats_basic.py:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:877(_DomainGreaterEqual)
        1    0.000    0.000    0.000    0.000 rbf.py:1(<module>)
        1    0.000    0.000    0.000    0.000 mock.py:1761(_patch_dict)
        4    0.000    0.000    0.000    0.000 typing.py:442(__init__)
        1    0.000    0.000    0.000    0.000 ndgriddata.py:1(<module>)
        1    0.000    0.000    0.000    0.000 hierarchy.py:1105(__init__)
        1    0.000    0.000    0.000    0.000 proxy_tensor.py:579(DecompositionInterpreter)
        1    0.000    0.000    0.000    0.000 formal.py:1492(FiniteFormalPowerSeries)
       14    0.000    0.000    0.000    0.000 mock.py:1937(<genexpr>)
        1    0.000    0.000    0.000    0.000 trigonometric.py:1905(sinc)
        1    0.000    0.000    0.000    0.000 numbers.py:1350(genocchi)
        1    0.000    0.000    0.000    0.000 dos.py:1413(LobsterCompleteDos)
       25    0.000    0.000    0.000    0.000 polyoptions.py:198(<genexpr>)
        6    0.000    0.000    0.000    0.000 docstring.py:33(__init__)
        1    0.000    0.000    0.000    0.000 dsolve.py:1(<module>)
        1    0.000    0.000    0.000    0.000 solvers.py:23(RawMatrix)
        1    0.000    0.000    0.000    0.000 hyper.py:918(HyperRep_log1)
        1    0.000    0.000    0.000    0.000 decoder.py:269(Decoder)
        1    0.000    0.000    0.000    0.000 io.py:344(FileLock)
        1    0.000    0.000    0.000    0.000 dates.py:1052(DateLocator)
        1    0.000    0.000    0.000    0.000 locks.py:158(Event)
        1    0.000    0.000    0.000    0.000 function.py:155(FunctionClass)
        1    0.000    0.000    0.000    0.000 pydoc.py:1129(__init__)
        1    0.000    0.000    0.000    0.000 para4tb.py:132(ParaTB_train)
        1    0.000    0.000    0.000    0.000 numbers.py:3888(TribonacciConstant)
        1    0.000    0.000    0.000    0.000 <frozen _collections_abc>:786(keys)
        1    0.000    0.000    0.000    0.000 __init__.py:1308(__init__)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7473(kappa3_gen)
        5    0.000    0.000    0.000    0.000 typing.py:2588(final)
        1    0.000    0.000    0.000    0.000 lazy.py:10(_LazyProtocol)
        1    0.000    0.000    0.000    0.000 singularity_functions.py:14(SingularityFunction)
        8    0.000    0.000    0.000    0.000 animation.py:116(wrapper)
        1    0.000    0.000    0.000    0.000 core.py:2766(Word)
        1    0.000    0.000    0.000    0.000 _ode.py:600(complex_ode)
        1    0.000    0.000    0.000    0.000 backend_tools.py:926(ToolPan)
        1    0.000    0.000    0.000    0.000 slice.py:31(MatrixSlice)
        1    0.000    0.000    0.000    0.000 colors.py:695(LinearSegmentedColormap)
        1    0.000    0.000    0.000    0.000 filter_design.py:1(<module>)
        7    0.000    0.000    0.000    0.000 memoization.py:4(recurrence_memo)
        1    0.000    0.000    0.000    0.000 ssl.py:456(_ASN1Object)
        1    0.000    0.000    0.000    0.000 events.py:98(TimerHandle)
        2    0.000    0.000    0.000    0.000 {method 'cache_clear' of 'functools._lru_cache_wrapper' objects}
        1    0.000    0.000    0.000    0.000 diophantine.py:40(DiophantineSolutionSet)
        1    0.000    0.000    0.000    0.000 _type_utils.py:270(<dictcomp>)
        1    0.000    0.000    0.000    0.000 activation.py:1361(Softmin)
        1    0.000    0.000    0.000    0.000 error_functions.py:1275(expint)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:582(hypergeom_gen)
        1    0.000    0.000    0.000    0.000 function.py:882(UndefinedFunction)
        1    0.000    0.000    0.000    0.000 fir_filter_design.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7864(ncf_gen)
        1    0.000    0.000    0.000    0.000 indexed.py:580(Idx)
        1    0.000    0.000    0.000    0.000 textpath.py:336(TextPath)
        1    0.000    0.000    0.000    0.000 polyoptions.py:349(Order)
        1    0.000    0.000    0.000    0.000 core.py:8376(_convert2ma)
        1    0.000    0.000    0.000    0.000 morestats.py:1(<module>)
        1    0.000    0.000    0.000    0.000 scale.py:686(<listcomp>)
        1    0.000    0.000    0.000    0.000 minpack.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fancysets.py:1110(ComplexRegion)
        1    0.000    0.000    0.000    0.000 _gauss_kronrod.py:9(GaussKronrodQuadrature)
        1    0.000    0.000    0.000    0.000 memoization.py:1(<module>)
       12    0.000    0.000    0.000    0.000 _pep440.py:392(_parse_letter_version)
        1    0.000    0.000    0.000    0.000 gammasimp.py:463(_rf)
       11    0.000    0.000    0.000    0.000 windows.py:41(_add_docstr)
        1    0.000    0.000    0.000    0.000 ElementTree.py:525(ElementTree)
        1    0.000    0.000    0.000    0.000 assume.py:80(AppliedPredicate)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3772(__init__)
        1    0.000    0.000    0.000    0.000 polynomials.py:443(chebyshevt)
        1    0.000    0.000    0.000    0.000 computed_entries.py:549(ComputedStructureEntry)
        1    0.000    0.000    0.000    0.000 fancy_getopt.py:386(<dictcomp>)
        1    0.000    0.000    0.000    0.000 calendar.py:150(Calendar)
        1    0.000    0.000    0.000    0.000 transforms.py:60(IntegralTransform)
        4    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:4367(_shift_scale_inverse_function)
        1    0.000    0.000    0.000    0.000 proxy.py:53(ScopeContextManager)
        1    0.000    0.000    0.000    0.000 rrule.py:1112(_iterinfo)
        1    0.000    0.000    0.000    0.000 six.py:219(is_package)
        1    0.000    0.000    0.000    0.000 decomp_cholesky.py:1(<module>)
        1    0.000    0.000    0.000    0.000 gzip.py:75(_PaddedFile)
        1    0.000    0.000    0.000    0.000 _deprecation.py:1(<module>)
       12    0.000    0.000    0.000    0.000 comments.py:55(__call__)
        1    0.000    0.000    0.000    0.000 decomp_lu.py:1(<module>)
        3    0.000    0.000    0.000    0.000 datetime.py:46(_days_before_year)
        1    0.000    0.000    0.000    0.000 gridspec.py:362(GridSpec)
        1    0.000    0.000    0.000    0.000 Image.py:468(ImagePointTransform)
        1    0.000    0.000    0.000    0.000 events.py:24(Handle)
        1    0.000    0.000    0.000    0.000 tz.py:1167(_tzicalvtz)
        1    0.000    0.000    0.000    0.000 _special_sparse_arrays.py:518(Sakurai)
        1    0.000    0.000    0.000    0.000 tnc.py:1(<module>)
        1    0.000    0.000    0.000    0.000 tricontour.py:8(TriContourSet)
        1    0.000    0.000    0.000    0.000 backend_registration.py:1(<module>)
        1    0.000    0.000    0.000    0.000 linear.py:134(Bilinear)
        1    0.000    0.000    0.000    0.000 _typing.py:210(_DataPipeType)
        1    0.000    0.000    0.000    0.000 string.py:57(Template)
        1    0.000    0.000    0.000    0.000 calculus.py:5(MatrixCalculusMethods)
        1    0.000    0.000    0.000    0.000 traceback.py:247(FrameSummary)
        2    0.000    0.000    0.000    0.000 weakref.py:347(__new__)
        1    0.000    0.000    0.000    0.000 kde.py:1(<module>)
        7    0.000    0.000    0.000    0.000 __init__.py:176(is_initialized)
        1    0.000    0.000    0.000    0.000 calendar.py:295(TextCalendar)
        1    0.000    0.000    0.000    0.000 rnn.py:1018(RNNCellBase)
        1    0.000    0.000    0.000    0.000 _atfork.py:18(register_after_fork)
        1    0.000    0.000    0.000    0.000 morphology.py:1(<module>)
        1    0.000    0.000    0.000    0.000 normalization.py:14(LocalResponseNorm)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:960(betaprime_gen)
       16    0.000    0.000    0.000    0.000 structure.py:244(sites)
        1    0.000    0.000    0.000    0.000 loss.py:1414(TripletMarginLoss)
        1    0.000    0.000    0.000    0.000 _backend.py:7(_ScipyBackend)
        1    0.000    0.000    0.000    0.000 _multivariate.py:6001(dirichlet_multinomial_gen)
        1    0.000    0.000    0.000    0.000 distance.py:8(PairwiseDistance)
        1    0.000    0.000    0.000    0.000 configparser.py:1255(SectionProxy)
        1    0.000    0.000    0.000    0.000 zeta_functions.py:223(polylog)
        1    0.000    0.000    0.000    0.000 rnn.py:948(RNNCell)
        1    0.000    0.000    0.000    0.000 boolalg.py:572(And)
        1    0.000    0.000    0.000    0.000 core.py:1283(_replace_dtype_fields_recursive)
        1    0.000    0.000    0.000    0.000 _aliases.py:147(zeros)
        1    0.000    0.000    0.000    0.000 _kdtree.py:98(Rectangle)
        1    0.000    0.000    0.000    0.000 profiler.py:553(ExecutionGraphObserver)
        2    0.000    0.000    0.000    0.000 pretty_symbology.py:174(<lambda>)
        1    0.000    0.000    0.000    0.000 dropout.py:5(Dropout)
        1    0.000    0.000    0.000    0.000 proxy_tensor.py:215(_ProxyTensor)
        1    0.000    0.000    0.000    0.000 subgraph_rewriter.py:14(Match)
       15    0.000    0.000    0.000    0.000 dataclasses.py:179(__repr__)
        9    0.000    0.000    0.000    0.000 typing.py:3026(<lambda>)
        1    0.000    0.000    0.000    0.000 periodic_table.py:637(is_valid_symbol)
        1    0.000    0.000    0.000    0.000 ImageFile.py:113(ImageFile)
        1    0.000    0.000    0.000    0.000 _matrix_io.py:1(<module>)
        1    0.000    0.000    0.000    0.000 offsetbox.py:651(DrawingArea)
        1    0.000    0.000    0.000    0.000 __init__.py:732(Context)
        1    0.000    0.000    0.000    0.000 cnf.py:15(Literal)
        1    0.000    0.000    0.000    0.000 tz.py:1475(GettzFunc)
        1    0.000    0.000    0.000    0.000 colors.py:861(ListedColormap)
        1    0.000    0.000    0.000    0.000 _arraytools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 rnn.py:282(RNNBase)
        1    0.000    0.000    0.000    0.000 py38.py:1(<module>)
        1    0.000    0.000    0.000    0.000 constraints.py:328(_GreaterThanEq)
        1    0.000    0.000    0.000    0.000 triplot.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pyfunctorch.py:51(FuncTorchInterpreter)
        1    0.000    0.000    0.000    0.000 complexes.py:696(arg)
        1    0.000    0.000    0.000    0.000 extrapolation.py:266(levin_class)
        1    0.000    0.000    0.000    0.000 kdtree.py:1(<module>)
        4    0.000    0.000    0.000    0.000 polynomial.py:1218(_coeffs)
        1    0.000    0.000    0.000    0.000 ltisys.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pycode.py:89(<dictcomp>)
        1    0.000    0.000    0.000    0.000 tensor.py:4928(_WildTensExpr)
        1    0.000    0.000    0.000    0.000 numpy.py:506(JaxPrinter)
        1    0.000    0.000    0.000    0.000 __init__.py:35(_SupportedQEnginesProp)
        1    0.000    0.000    0.000    0.000 _nested_sequence.py:18(_NestedSequence)
        1    0.000    0.000    0.000    0.000 _cubature.py:48(CubatureResult)
        1    0.000    0.000    0.000    0.000 _sources.py:111(ParsedDef)
        6    0.000    0.000    0.000    0.000 printer.py:422(print_function)
        1    0.000    0.000    0.000    0.000 animation.py:696(ImageMagickBase)
        1    0.000    0.000    0.000    0.000 zeta_functions.py:25(lerchphi)
        1    0.000    0.000    0.000    0.000 mio5_params.py:1(<module>)
        1    0.000    0.000    0.000    0.000 streams.py:12(Stream)
        1    0.000    0.000    0.000    0.000 colors.py:1681(LightSource)
        1    0.000    0.000    0.000    0.000 hyper.py:890(HyperRep_power2)
        1    0.000    0.000    0.000    0.000 activation.py:140(Sigmoid)
       16    0.000    0.000    0.000    0.000 arraypad.py:525(_pad_dispatcher)
        1    0.000    0.000    0.000    0.000 mio5.py:1(<module>)
        1    0.000    0.000    0.000    0.000 bandstructure.py:909(LobsterBandStructureSymmLine)
        1    0.000    0.000    0.000    0.000 special.py:104(Identity)
        1    0.000    0.000    0.000    0.000 headerregistry.py:276(DateHeader)
        1    0.000    0.000    0.000    0.000 numbers.py:3757(Pi)
        1    0.000    0.000    0.000    0.000 transforms.py:521(ExpTransform)
        1    0.000    0.000    0.000    0.000 fancysets.py:24(Rationals)
        1    0.000    0.000    0.000    0.000 utils.py:163(SimpleTextIOWrapper)
        1    0.000    0.000    0.000    0.000 events.py:189(ScalarEvent)
        1    0.000    0.000    0.000    0.000 facts.py:135(apply_beta_to_alpha_route)
        1    0.000    0.000    0.000    0.000 spectrum.py:38(Spectrum)
        1    0.000    0.000    0.000    0.000 case.py:1388(FunctionTestCase)
        1    0.000    0.000    0.000    0.000 __init__.py:106(__version__)
        1    0.000    0.000    0.000    0.000 sets.py:2261(DisjointUnion)
        1    0.000    0.000    0.000    0.000 <frozen _collections_abc>:381(__subclasshook__)
        1    0.000    0.000    0.000    0.000 ase.py:55(MSONAtoms)
        1    0.000    0.000    0.000    0.000 headerregistry.py:12(Address)
        2    0.000    0.000    0.000    0.000 _jit_internal.py:639(ignore)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:11743(argus_gen)
        1    0.000    0.000    0.000    0.000 zeta_functions.py:395(zeta)
        1    0.000    0.000    0.000    0.000 grad_mode.py:293(_unsafe_preserve_version_counter)
        1    0.000    0.000    0.000    0.000 polynomials.py:1006(hermite)
        1    0.000    0.000    0.000    0.000 distance.py:1983(<dictcomp>)
        1    0.000    0.000    0.000    0.000 autocast_mode.py:13(autocast)
        1    0.000    0.000    0.000    0.000 Orbit.py:2(orbit)
        1    0.000    0.000    0.000    0.000 loss.py:28(_WeightedLoss)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:3789(Doc)
        2    0.000    0.000    0.000    0.000 multidimensional.py:81(__init__)
        1    0.000    0.000    0.000    0.000 dbapi2.py:48(<listcomp>)
        1    0.000    0.000    0.000    0.000 fold.py:10(Fold)
        1    0.000    0.000    0.000    0.000 band.py:17(__init__)
        1    0.000    0.000    0.000    0.000 pc_groups.py:42(Collector)
        1    0.000    0.000    0.000    0.000 quadpack.py:1(<module>)
        1    0.000    0.000    0.000    0.000 zipfile.py:2222(CompleteDirs)
        1    0.000    0.000    0.000    0.000 GimpPaletteFile.py:23(GimpPaletteFile)
        1    0.000    0.000    0.000    0.000 core.py:2430(Literal)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:302(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _encoded_words.py:73(_QByteMap)
        1    0.000    0.000    0.000    0.000 abc.py:230(ExecutionLoader)
        1    0.000    0.000    0.000    0.000 permutation.py:9(PermutationMatrix)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2380(fatiguelife_gen)
        1    0.000    0.000    0.000    0.000 activation.py:18(Threshold)
        1    0.000    0.000    0.000    0.000 __init__.py:99(version_info)
        1    0.000    0.000    0.000    0.000 _ode.py:1250(lsoda)
        1    0.000    0.000    0.000    0.000 unix_events.py:823(AbstractChildWatcher)
        1    0.000    0.000    0.000    0.000 sets.py:1726(Complement)
        1    0.000    0.000    0.000    0.000 mathml.py:21(MathMLPrinterBase)
        1    0.000    0.000    0.000    0.000 _parser.py:394(_ymd)
        1    0.000    0.000    0.000    0.000 image.py:1288(FigureImage)
        3    0.000    0.000    0.000    0.000 index_tricks.py:320(__init__)
        1    0.000    0.000    0.000    0.000 dia.py:1(<module>)
        1    0.000    0.000    0.000    0.000 observer.py:1273(FixedQParamsObserver)
        1    0.000    0.000    0.000    0.000 conv.py:19(Conv1d)
        1    0.000    0.000    0.000    0.000 _script.py:413(RecursiveScriptClass)
        4    0.000    0.000    0.000    0.000 timeutils.py:53(timethis)
        1    0.000    0.000    0.000    0.000 dviread.py:516(DviFont)
        1    0.000    0.000    0.000    0.000 spfun_stats.py:1(<module>)
        1    0.000    0.000    0.000    0.000 shlex.py:19(shlex)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1132(burr_gen)
        1    0.000    0.000    0.000    0.000 {method 'close' of 'select.epoll' objects}
        1    0.000    0.000    0.000    0.000 sparse_ndim_array.py:11(SparseNDimArray)
        1    0.000    0.000    0.000    0.000 conv_fused.py:407(ConvBnReLU1d)
        1    0.000    0.000    0.000    0.000 mathtext.py:535(TruetypeFonts)
        1    0.000    0.000    0.000    0.000 diophantine.py:146(DiophantineEquationType)
        1    0.000    0.000    0.000    0.000 elliptic_integrals.py:188(elliptic_e)
        1    0.000    0.000    0.000    0.000 lazy.py:53(LazyModuleMixin)
        1    0.000    0.000    0.000    0.000 coo.py:1(<module>)
        1    0.000    0.000    0.000    0.000 outputs.py:3969(Elfcar)
        1    0.000    0.000    0.000    0.000 interface.py:1(<module>)
        1    0.000    0.000    0.000    0.000 requirements.py:21(Requirement)
        1    0.000    0.000    0.000    0.000 qhull.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _package_unpickler.py:7(PackageUnpickler)
        1    0.000    0.000    0.000    0.000 more.py:2880(run_length)
        5    0.000    0.000    0.000    0.000 constructor.py:331(add_multi_constructor)
        1    0.000    0.000    0.000    0.000 ctypeslib.py:202(_concrete_ndptr)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7963(t_gen)
        1    0.000    0.000    0.000    0.000 hadamard.py:41(HadamardProduct)
        9    0.000    0.000    0.000    0.000 multiarray.py:346(where)
        1    0.000    0.000    0.000    0.000 mathtext.py:378(Fonts)
        3    0.000    0.000    0.000    0.000 _utils.py:7(_get_device_index)
        1    0.000    0.000    0.000    0.000 tarfile.py:600(_FileInFile)
        1    0.000    0.000    0.000    0.000 scale.py:26(ScaleBase)
        6    0.000    0.000    0.000    0.000 core.py:3614(<genexpr>)
        1    0.000    0.000    0.000    0.000 immutable.py:140(ImmutableSparseMatrix)
        1    0.000    0.000    0.000    0.000 zeros.py:1(<module>)
        1    0.000    0.000    0.000    0.000 transpose.py:5(Transpose)
        1    0.000    0.000    0.000    0.000 _infra.py:129(Location)
        1    0.000    0.000    0.000    0.000 dir_util.py:15(SkipRepeatAbsolutePaths)
        1    0.000    0.000    0.000    0.000 optimize.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7002(gibrat_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:5604(invweibull_gen)
        1    0.000    0.000    0.000    0.000 conv.py:155(Conv3d)
        1    0.000    0.000    0.000    0.000 polar.py:666(RadialAxis)
        1    0.000    0.000    0.000    0.000 specfun.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _arffread.py:65(Attribute)
        1    0.000    0.000    0.000    0.000 index_tricks.py:530(__init__)
        5    0.000    0.000    0.000    0.000 {built-in method atexit.register}
        1    0.000    0.000    0.000    0.000 bn_relu.py:48(BNReLU3d)
        1    0.000    0.000    0.000    0.000 _typing.py:72(HasShape)
       13    0.000    0.000    0.000    0.000 fromnumeric.py:195(_reshape_dispatcher)
        1    0.000    0.000    0.000    0.000 six.py:108(MovedModule)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:2062(_num_parameterizations)
        1    0.000    0.000    0.000    0.000 flatten.py:9(Flatten)
        1    0.000    0.000    0.000    0.000 loss.py:1614(CTCLoss)
        1    0.000    0.000    0.000    0.000 numbers.py:267(Rational)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:5454(norminvgauss_gen)
        1    0.000    0.000    0.000    0.000 miscellaneous.py:683(Max)
        1    0.000    0.000    0.000    0.000 _multivariate.py:877(multivariate_normal_frozen)
        1    0.000    0.000    0.000    0.000 mathtext.py:2632(State)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:412(AngleAddr)
        1    0.000    0.000    0.000    0.000 hb.py:414(HBFile)
        1    0.000    0.000    0.000    0.000 frontend.py:519(WithItemBuilder)
        4    0.000    0.000    0.000    0.000 ops.py:52(nan_if_exception)
        6    0.000    0.000    0.000    0.000 profiler_util.py:348(_attr_formatter)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9528(semicircular_gen)
        1    0.000    0.000    0.000    0.000 outputs.py:3699(VolumetricData)
        1    0.000    0.000    0.000    0.000 decomp_svd.py:1(<module>)
        1    0.000    0.000    0.000    0.000 numbers.py:3545(NumberSymbol)
        1    0.000    0.000    0.000    0.000 streams.py:181(StreamReaderProtocol)
        1    0.000    0.000    0.000    0.000 _base.py:569(Executor)
        1    0.000    0.000    0.000    0.000 threading.py:544(Event)
        1    0.000    0.000    0.000    0.000 _fit.py:41(FitResult)
        1    0.000    0.000    0.000    0.000 fancysets.py:73(Naturals)
        1    0.000    0.000    0.000    0.000 _windows.py:2509(<listcomp>)
        3    0.000    0.000    0.000    0.000 __init__.py:43(private_class)
        1    0.000    0.000    0.000    0.000 linalg.py:108(LinearAlgebraMethods)
        1    0.000    0.000    0.000    0.000 _python_dispatch.py:14(TorchDispatchMode)
        1    0.000    0.000    0.000    0.000 worker.py:124(_ResumeIteration)
        1    0.000    0.000    0.000    0.000 activation.py:568(SELU)
        1    0.000    0.000    0.000    0.000 transforms.py:2380(CompositeAffine2D)
        1    0.000    0.000    0.000    0.000 hyper.py:1002(HyperRep_sqrts1)
        1    0.000    0.000    0.000    0.000 transforms.py:976(PositiveDefiniteTransform)
        1    0.000    0.000    0.000    0.000 trigonometric.py:45(TrigonometricFunction)
        1    0.000    0.000    0.000    0.000 __init__.py:742(SpecialFileError)
        1    0.000    0.000    0.000    0.000 _covariance.py:538(CovViaCholesky)
        1    0.000    0.000    0.000    0.000 sg_operation.py:11(SpaceGroupOp)
        1    0.000    0.000    0.000    0.000 _parser.py:219(_resultbase)
        1    0.000    0.000    0.000    0.000 _cubature.py:535(_VariableTransform)
        1    0.000    0.000    0.000    0.000 gamma_functions.py:1154(trigamma)
        1    0.000    0.000    0.000    0.000 relational.py:752(Unequality)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1511(chi_gen)
        1    0.000    0.000    0.000    0.000 spectral.py:1(<module>)
        1    0.000    0.000    0.000    0.000 bsr.py:1(<module>)
        1    0.000    0.000    0.000    0.000 activation.py:241(PReLU)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1171(randint_gen)
       10    0.000    0.000    0.000    0.000 case.py:1366(_deprecate)
        1    0.000    0.000    0.000    0.000 polar.py:111(PolarAffine)
        1    0.000    0.000    0.000    0.000 core.py:6004(Suppress)
       12    0.000    0.000    0.000    0.000 message.py:633(get_default_type)
        1    0.000    0.000    0.000    0.000 _mio4.py:601(MatFile4Writer)
        6    0.000    0.000    0.000    0.000 conflict.py:37(<genexpr>)
        2    0.000    0.000    0.000    0.000 main.py:1482(__init__)
        1    0.000    0.000    0.000    0.000 compressed.py:1(<module>)
        6    0.000    0.000    0.000    0.000 expr.py:1021(_eval_power)
        1    0.000    0.000    0.000    0.000 polynomials.py:561(chebyshevu)
        1    0.000    0.000    0.000    0.000 instancenorm.py:9(_InstanceNorm)
        1    0.000    0.000    0.000    0.000 moduleTNC.py:1(<module>)
        1    0.000    0.000    0.000    0.000 kind.py:156(__new__)
       10    0.000    0.000    0.000    0.000 ctx_iv.py:355(_wrap_mpi_function)
        1    0.000    0.000    0.000    0.000 callable.py:18(MapperMapDataPipe)
        1    0.000    0.000    0.000    0.000 _bary_rational.py:36(_BarycentricRational)
        1    0.000    0.000    0.000    0.000 radau.py:179(Radau)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:6574(loggamma_gen)
        1    0.000    0.000    0.000    0.000 dates.py:1872(DateConverter)
        1    0.000    0.000    0.000    0.000 decomp_qr.py:1(<module>)
        1    0.000    0.000    0.000    0.000 activation.py:52(Hardswish)
        1    0.000    0.000    0.000    0.000 _multivariate.py:6468(__init__)
        1    0.000    0.000    0.000    0.000 tensor.py:1270(TensorIndex)
        1    0.000    0.000    0.000    0.000 conv_relu.py:69(ConvReLU2d)
        1    0.000    0.000    0.000    0.000 nonlin.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _typing.py:7(RingElement)
        1    0.000    0.000    0.000    0.000 tempfile.py:459(_TemporaryFileWrapper)
        1    0.000    0.000    0.000    0.000 _bary_rational.py:196(AAA)
        1    0.000    0.000    0.000    0.000 function.py:410(Function)
        1    0.000    0.000    0.000    0.000 plotgrid.py:16(PlotGrid)
        1    0.000    0.000    0.000    0.000 ElementTree.py:477(QName)
        3    0.000    0.000    0.000    0.000 units.py:808(wrap)
        1    0.000    0.000    0.000    0.000 mmio.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _svdp.py:50(_AProd)
        1    0.000    0.000    0.000    0.000 _check.py:8(AttributeTypeIsSupportedChecker)
        1    0.000    0.000    0.000    0.000 __init__.py:61(get_calls)
        1    0.000    0.000    0.000    0.000 _compression.py:9(BaseStream)
        1    0.000    0.000    0.000    0.000 unix_events.py:593(_UnixWritePipeTransport)
        1    0.000    0.000    0.000    0.000 outputs.py:194(BandgapProps)
        1    0.000    0.000    0.000    0.000 _tqdm_pandas.py:1(<module>)
        5    0.000    0.000    0.000    0.000 core.py:3142(re_match)
        3    0.000    0.000    0.000    0.000 <frozen _collections_abc>:812(__init__)
        1    0.000    0.000    0.000    0.000 waveforms.py:1(<module>)
        1    0.000    0.000    0.000    0.000 numbers.py:2890(NegativeOne)
        1    0.000    0.000    0.000    0.000 platform.py:739(_Processor)
        2    0.000    0.000    0.000    0.000 legend_handler.py:264(__init__)
        1    0.000    0.000    0.000    0.000 padding.py:341(ReplicationPad1d)
        1    0.000    0.000    0.000    0.000 interpolation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 logistic_normal.py:8(LogisticNormal)
        3    0.000    0.000    0.000    0.000 datetime.py:2313(_create)
        1    0.000    0.000    0.000    0.000 units.py:148(Unit)
        1    0.000    0.000    0.000    0.000 ctypeslib.py:181(_ndptr)
        1    0.000    0.000    0.000    0.000 spglib.py:254(SpglibMagneticDataset)
        1    0.000    0.000    0.000    0.000 line.py:2362(Segment2D)
        1    0.000    0.000    0.000    0.000 _utils.py:25(EventMetrics)
        1    0.000    0.000    0.000    0.000 band_data_in.py:12(BandDataIn)
        1    0.000    0.000    0.000    0.000 construct.py:1(<module>)
        1    0.000    0.000    0.000    0.000 gamma_functions.py:865(loggamma)
        1    0.000    0.000    0.000    0.000 setupcfg.py:520(ConfigMetadataHandler)
        1    0.000    0.000    0.000    0.000 measurements.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _rbf.py:55(Rbf)
        1    0.000    0.000    0.000    0.000 interpnd.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _rules.py:231(_FxIrAddNode)
        1    0.000    0.000    0.000    0.000 ElementTree.py:1105(_ListDataStream)
        1    0.000    0.000    0.000    0.000 scalarfloat.py:13(ScalarFloat)
        1    0.000    0.000    0.000    0.000 dataset.py:181(TensorDataset)
        1    0.000    0.000    0.000    0.000 piecewise.py:19(ExprCondPair)
        1    0.000    0.000    0.000    0.000 sf_error.py:1(<module>)
        1    0.000    0.000    0.000    0.000 error_functions.py:2327(FresnelIntegral)
        1    0.000    0.000    0.000    0.000 _multivariate.py:4776(multivariate_t_frozen)
        1    0.000    0.000    0.000    0.000 test.py:56(<listcomp>)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1030(planck_gen)
        1    0.000    0.000    0.000    0.000 modules.py:260(FreeModuleElement)
        1    0.000    0.000    0.000    0.000 request.py:426(OpenerDirector)
        1    0.000    0.000    0.000    0.000 single.py:1046(SecondNonlinearAutonomousConserved)
        1    0.000    0.000    0.000    0.000 utils.py:183(DisableOnWriteError)
       12    0.000    0.000    0.000    0.000 distance.py:1814(<lambda>)
        1    0.000    0.000    0.000    0.000 parse.py:353(_fix_result_transcoding)
        1    0.000    0.000    0.000    0.000 json.py:713(MontyDecoder)
        1    0.000    0.000    0.000    0.000 dataloader.py:567(_BaseDataLoaderIter)
        1    0.000    0.000    0.000    0.000 headerregistry.py:327(AddressHeader)
        1    0.000    0.000    0.000    0.000 constraints.py:550(_Stack)
        1    0.000    0.000    0.000    0.000 linesearch.py:1(<module>)
        1    0.000    0.000    0.000    0.000 single.py:2012(SecondHypergeometric)
        1    0.000    0.000    0.000    0.000 core.py:4491(Each)
        1    0.000    0.000    0.000    0.000 _multivariate.py:4308(multivariate_t_gen)
        1    0.000    0.000    0.000    0.000 hyper.py:978(HyperRep_asin2)
        1    0.000    0.000    0.000    0.000 base.py:28(OdeSolver)
        1    0.000    0.000    0.000    0.000 dataloader.py:661(_SingleProcessDataLoaderIter)
        1    0.000    0.000    0.000    0.000 core.py:5392(SkipTo)
        1    0.000    0.000    0.000    0.000 axis3d.py:484(ZAxis)
        1    0.000    0.000    0.000    0.000 colors.py:102(<dictcomp>)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:253(iTXt)
        4    0.000    0.000    0.000    0.000 results.py:266(__len__)
        1    0.000    0.000    0.000    0.000 docinfo.py:25(Version)
        1    0.000    0.000    0.000    0.000 dataloader.py:71(_DatasetKind)
        1    0.000    0.000    0.000    0.000 permutations.py:244(Cycle)
        1    0.000    0.000    0.000    0.000 polynomials.py:1210(laguerre)
        1    0.000    0.000    0.000    0.000 function.py:16(FunctionCtx)
        1    0.000    0.000    0.000    0.000 _parseaddr.py:512(AddressList)
        1    0.000    0.000    0.000    0.000 ticker.py:333(FixedFormatter)
        1    0.000    0.000    0.000    0.000 importer.py:170(_SysImporter)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3112(_moment_methods)
        1    0.000    0.000    0.000    0.000 single.py:646(AlmostLinear)
        1    0.000    0.000    0.000    0.000 orderings.py:10(MonomialOrder)
        6    0.000    0.000    0.000    0.000 deprecation.py:81(_deprecated)
        1    0.000    0.000    0.000    0.000 threading.py:637(Barrier)
        1    0.000    0.000    0.000    0.000 transforms.py:900(StickBreakingTransform)
        1    0.000    0.000    0.000    0.000 pyfunctorch.py:83(VmapInterpreter)
        1    0.000    0.000    0.000    0.000 _VF.py:22(__init__)
        1    0.000    0.000    0.000    0.000 tensor.py:792(_TensorManager)
        1    0.000    0.000    0.000    0.000 complexes.py:820(conjugate)
        1    0.000    0.000    0.000    0.000 dok.py:1(<module>)
        1    0.000    0.000    0.000    0.000 tensor.py:1597(TensorType)
        1    0.000    0.000    0.000    0.000 dataframes.py:371(CaptureDataFrameWithDataPipeOps)
        1    0.000    0.000    0.000    0.000 datapipes.py:42(ConcatDataFramesPipe)
        1    0.000    0.000    0.000    0.000 _trace.py:565(TracerWarning)
        1    0.000    0.000    0.000    0.000 calendar.py:74(<listcomp>)
        1    0.000    0.000    0.000    0.000 category.py:26(StrCategoryConverter)
        1    0.000    0.000    0.000    0.000 _type_utils.py:338(<dictcomp>)
        1    0.000    0.000    0.000    0.000 polar.py:464(_ThetaShift)
        1    0.000    0.000    0.000    0.000 runner.py:30(TextTestResult)
        1    0.000    0.000    0.000    0.000 bezier.py:182(BezierSegment)
        1    0.000    0.000    0.000    0.000 image.py:841(AxesImage)
        1    0.000    0.000    0.000    0.000 _fortran.py:33(FortranFile)
        2    0.000    0.000    0.000    0.000 pretty_symbology.py:234(<lambda>)
        1    0.000    0.000    0.000    0.000 slsqp.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:5508(FoldedDistribution)
        1    0.000    0.000    0.000    0.000 core.py:451(DebugActions)
        1    0.000    0.000    0.000    0.000 loss.py:104(NLLLoss)
        3    0.000    0.000    0.000    0.000 __init__.py:428(__init__)
        2    0.000    0.000    0.000    0.000 Image.py:3754(register_extension)
        1    0.000    0.000    0.000    0.000 _parseaddr.py:211(AddrlistClass)
        1    0.000    0.000    0.000    0.000 context.py:276(ForkProcess)
        1    0.000    0.000    0.000    0.000 random.py:215(__init_subclass__)
        1    0.000    0.000    0.000    0.000 Image.py:3018(ImagePointHandler)
        1    0.000    0.000    0.000    0.000 __init__.py:408(Deprecated)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:810(__len__)
        1    0.000    0.000    0.000    0.000 ellipse.py:1477(Circle)
        1    0.000    0.000    0.000    0.000 evalf.py:1560(EvalfMixin)
        1    0.000    0.000    0.000    0.000 _arffread.py:95(NominalAttribute)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3134(genpareto_gen)
        1    0.000    0.000    0.000    0.000 batchnorm.py:48(BatchNorm2d)
        1    0.000    0.000    0.000    0.000 hyper.py:1109(HyperRep_sinasin)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:6247(levy_gen)
        1    0.000    0.000    0.000    0.000 activation.py:1408(Softmax)
        1    0.000    0.000    0.000    0.000 unix_events.py:1212(MultiLoopChildWatcher)
        1    0.000    0.000    0.000    0.000 streamplot.py:365(StreamMask)
        1    0.000    0.000    0.000    0.000 patches.py:2349(Roundtooth)
        1    0.000    0.000    0.000    0.000 outputs.py:3920(Chgcar)
        1    0.000    0.000    0.000    0.000 _rules.py:42(_MissingCustomSymbolicFunction)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:5777(johnsonsb_gen)
        1    0.000    0.000    0.000    0.000 csc.py:1(<module>)
        1    0.000    0.000    0.000    0.000 signaltools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 mock.py:1084(CallableMixin)
        1    0.000    0.000    0.000    0.000 polynomials.py:1108(hermite_prob)
        1    0.000    0.000    0.000    0.000 activation.py:617(GLU)
        1    0.000    0.000    0.000    0.000 band_data_out.py:9(BandDataOut)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:159(ChunkStream)
        3    0.000    0.000    0.000    0.000 rcsetup.py:520(_update_savefig_format)
        1    0.000    0.000    0.000    0.000 ElementTree.py:1384(TreeBuilder)
        2    0.000    0.000    0.000    0.000 constraints.py:315(__init__)
        1    0.000    0.000    0.000    0.000 backend_tools.py:703(ToolBack)
        1    0.000    0.000    0.000    0.000 transforms.py:2106(BlendedGenericTransform)
        1    0.000    0.000    0.000    0.000 polynomials.py:773(legendre)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:902(logser_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:196(kstwo_gen)
        1    0.000    0.000    0.000    0.000 special.py:68(GenericZeroMatrix)
        1    0.000    0.000    0.000    0.000 _dok.py:589(dok_matrix)
        1    0.000    0.000    0.000    0.000 numbers.py:1490(andre)
        1    0.000    0.000    0.000    0.000 headerregistry.py:402(MIMEVersionHeader)
        1    0.000    0.000    0.000    0.000 polyoptions.py:327(Sort)
        1    0.000    0.000    0.000    0.000 para4band.py:330(<listcomp>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3816(gengamma_gen)
        1    0.000    0.000    0.000    0.000 transports.py:197(SubprocessTransport)
        1    0.000    0.000    0.000    0.000 polynomials.py:45(jacobi)
        1    0.000    0.000    0.000    0.000 activation.py:109(LeakyReLU)
        1    0.000    0.000    0.000    0.000 scanner.py:2211(RoundTripScannerSC)
        1    0.000    0.000    0.000    0.000 ssl.py:185(_TLSAlertType)
        1    0.000    0.000    0.000    0.000 _compression.py:33(DecompressReader)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3936(__init__)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7066(maxwell_gen)
        1    0.000    0.000    0.000    0.000 csr.py:1(<module>)
        1    0.000    0.000    0.000    0.000 getlimits.py:32(MachArLike)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:1140(_fdat)
        1    0.000    0.000    0.000    0.000 _mio4.py:107(VarReader4)
        3    0.000    0.000    0.000    0.000 __init__.py:421(<genexpr>)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:408(Pow)
        1    0.000    0.000    0.000    0.000 mathtext.py:1899(GlueSpec)
        1    0.000    0.000    0.000    0.000 formal.py:958(Coeff)
        1    0.000    0.000    0.000    0.000 ring.py:9(Ring)
        1    0.000    0.000    0.000    0.000 pathlib.py:129(<setcomp>)
        1    0.000    0.000    0.000    0.000 _infra.py:203(ThreadFlowLocation)
        1    0.000    0.000    0.000    0.000 pooling.py:935(LPPool2d)
        1    0.000    0.000    0.000    0.000 decomp_schur.py:1(<module>)
        1    0.000    0.000    0.000    0.000 funcmatrix.py:9(FunctionMatrix)
        1    0.000    0.000    0.000    0.000 _pep440.py:149(__ge__)
        1    0.000    0.000    0.000    0.000 zeta_functions.py:584(dirichlet_eta)
        1    0.000    0.000    0.000    0.000 compat.py:38(ordereddict)
        1    0.000    0.000    0.000    0.000 _tensor_str.py:99(_Formatter)
        1    0.000    0.000    0.000    0.000 __init__.py:503(PackagePath)
        1    0.000    0.000    0.000    0.000 _memory_profiler.py:54(_Storage)
        1    0.000    0.000    0.000    0.000 threading.py:359(notify)
        1    0.000    0.000    0.000    0.000 relaxed_bernoulli.py:94(RelaxedBernoulli)
        4    0.000    0.000    0.000    0.000 dataclasses.py:566(<genexpr>)
        1    0.000    0.000    0.000    0.000 colors.py:956(Normalize)
        1    0.000    0.000    0.000    0.000 zipfile.py:782(_Tellable)
        1    0.000    0.000    0.000    0.000 miscellaneous.py:864(Rem)
        1    0.000    0.000    0.000    0.000 pixelshuffle.py:8(PixelShuffle)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:508(alpha_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9998(triang_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2511(f_gen)
        2    0.000    0.000    0.000    0.000 glob.py:108(<genexpr>)
        1    0.000    0.000    0.000    0.000 threading.py:1005(_set_native_id)
        1    0.000    0.000    0.000    0.000 core.py:117(<listcomp>)
      2/1    0.000    0.000    0.000    0.000 {method 'seekable' of '_io.BufferedReader' objects}
        1    0.000    0.000    0.000    0.000 comments.py:692(CommentedMapValuesView)
        8    0.000    0.000    0.000    0.000 animation.py:106(register)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:6351(levy_l_gen)
        1    0.000    0.000    0.000    0.000 backend_tools.py:459(ToolMinorGrid)
        1    0.000    0.000    0.000    0.000 outputs.py:3894(Locpot)
        1    0.000    0.000    0.000    0.000 bandstructure.py:707(BandStructureSymmLine)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:282(<listcomp>)
        1    0.000    0.000    0.000    0.000 trigonometric.py:3448(atan2)
        1    0.000    0.000    0.000    0.000 runners.py:21(Runner)
        1    0.000    0.000    0.000    0.000 permutation.py:168(MatrixPermute)
        1    0.000    0.000    0.000    0.000 polar.py:144(InvertedPolarTransform)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1686(cosine_gen)
        1    0.000    0.000    0.000    0.000 operations.py:487(LatticeOp)
        1    0.000    0.000    0.000    0.000 trirefine.py:47(UniformTriRefiner)
        4    0.000    0.000    0.000    0.000 _apply_pyprojecttoml.py:403(_some_attrgetter)
        1    0.000    0.000    0.000    0.000 embedding_ops.py:75(EmbeddingBag)
        1    0.000    0.000    0.000    0.000 field.py:8(Field)
        1    0.000    0.000    0.000    0.000 animation.py:657(AVConvBase)
        3    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1384(<listcomp>)
        1    0.000    0.000    0.000    0.000 functions.py:89(defun_static)
        1    0.000    0.000    0.000    0.000 argparse.py:691(ArgumentDefaultsHelpFormatter)
        1    0.000    0.000    0.000    0.000 lil.py:1(<module>)
        1    0.000    0.000    0.000    0.000 polynomials.py:889(assoc_legendre)
        1    0.000    0.000    0.000    0.000 sequences.py:1020(SeqAdd)
        1    0.000    0.000    0.000    0.000 _functools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pydoc.py:1855(<listcomp>)
        1    0.000    0.000    0.000    0.000 _ode.py:781(IntegratorBase)
        1    0.000    0.000    0.000    0.000 composition.py:1400(ChemicalPotential)
        1    0.000    0.000    0.000    0.000 bessel.py:940(jn)
        6    0.000    0.000    0.000    0.000 sdm.py:83(<genexpr>)
        1    0.000    0.000    0.000    0.000 ticker.py:2903(AutoMinorLocator)
        1    0.000    0.000    0.000    0.000 numbers.py:1604(partition)
        1    0.000    0.000    0.000    0.000 factorials.py:664(FallingFactorial)
        1    0.000    0.000    0.000    0.000 diophantine.py:1029(GeneralPythagorean)
        1    0.000    0.000    0.000    0.000 tempfile.py:132(_RandomNameSequence)
        1    0.000    0.000    0.000    0.000 rnn.py:1043(GRUCell)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4200(gompertz_gen)
        1    0.000    0.000    0.000    0.000 representer.py:383(Representer)
        1    0.000    0.000    0.000    0.000 _wilcoxon.py:12(WilcoxonDistribution)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9274(rice_gen)
        1    0.000    0.000    0.000    0.000 hb.py:44(HBInfo)
        1    0.000    0.000    0.000    0.000 conv_fused.py:458(ConvReLU1d)
        1    0.000    0.000    0.000    0.000 backend_tools.py:319(ToolCursorPosition)
        1    0.000    0.000    0.000    0.000 loader.py:71(RoundTripLoader)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:5135(geninvgauss_gen)
        1    0.000    0.000    0.000    0.000 modules.py:160(ModuleElement)
        1    0.000    0.000    0.000    0.000 _type_utils.py:293(<dictcomp>)
        1    0.000    0.000    0.000    0.000 modules.py:1847(ModuleEndomorphism)
        1    0.000    0.000    0.000    0.000 linear_relu.py:116(LinearTanh)
        1    0.000    0.000    0.000    0.000 reduction.py:251(AbstractReducer)
        1    0.000    0.000    0.000    0.000 loss.py:1336(MultiMarginLoss)
        1    0.000    0.000    0.000    0.000 _matfuncs.py:171(MatrixPowerOperator)
        1    0.000    0.000    0.000    0.000 loss.py:474(MSELoss)
        1    0.000    0.000    0.000    0.000 __init__.py:7(ProjectionRegistry)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:965(__new__)
        6    0.000    0.000    0.000    0.000 _type_aliases.py:92(<genexpr>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:10754(tukeylambda_gen)
        1    0.000    0.000    0.000    0.000 loss.py:1032(CrossEntropyLoss)
        1    0.000    0.000    0.000    0.000 mock.py:2069(MagicMixin)
        1    0.000    0.000    0.000    0.000 diagonal.py:9(DiagonalMatrix)
        1    0.000    0.000    0.000    0.000 widgets.py:63(Widget)
        1    0.000    0.000    0.000    0.000 comments.py:654(CommentedMapKeysView)
        1    0.000    0.000    0.000    0.000 grad_mode.py:258(_force_original_view_tracking)
        1    0.000    0.000    0.000    0.000 animation.py:1452(ArtistAnimation)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1567(poisson_binom_gen)
        3    0.000    0.000    0.000    0.000 parser.py:17(__init__)
        1    0.000    0.000    0.000    0.000 {built-in method posix.sysconf}
        7    0.000    0.000    0.000    0.000 {method 'truncate' of '_io.StringIO' objects}
        1    0.000    0.000    0.000    0.000 outputs.py:1766(BSVasprun)
        1    0.000    0.000    0.000    0.000 index_tricks.py:255(__init__)
        1    0.000    0.000    0.000    0.000 colorbar.py:229(_ColorbarAutoLocator)
        3    0.000    0.000    0.000    0.000 utils.py:16(<genexpr>)
        1    0.000    0.000    0.000    0.000 utils.py:104(_Deprecate)
        1    0.000    0.000    0.000    0.000 __init__.py:79(_TextToBytesWrapper)
        1    0.000    0.000    0.000    0.000 elliptic_integrals.py:310(elliptic_pi)
        1    0.000    0.000    0.000    0.000 _arffread.py:256(DateAttribute)
        1    0.000    0.000    0.000    0.000 subprocess.py:115(Process)
        1    0.000    0.000    0.000    0.000 _resampling.py:740(MonteCarloTestResult)
        4    0.000    0.000    0.000    0.000 numbers.py:2871(__neg__)
        1    0.000    0.000    0.000    0.000 header.py:541(_Accumulator)
        7    0.000    0.000    0.000    0.000 numeric.py:1455(<listcomp>)
        1    0.000    0.000    0.000    0.000 mock.py:2891(PropertyMock)
        1    0.000    0.000    0.000    0.000 dropout.py:8(_DropoutNd)
        1    0.000    0.000    0.000    0.000 more.py:3665(callback_iter)
        1    0.000    0.000    0.000    0.000 geo.py:390(InvertedMollweideTransform)
        1    0.000    0.000    0.000    0.000 _multivariate.py:5401(__init__)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2972(weibull_max_gen)
        1    0.000    0.000    0.000    0.000 ticker.py:2735(LogitLocator)
        1    0.000    0.000    0.000    0.000 _multivariate.py:6964(normal_inverse_gamma_gen)
        1    0.000    0.000    0.000    0.000 filelist.py:335(_UniqueDirs)
        1    0.000    0.000    0.000    0.000 hyper.py:1062(HyperRep_log2)
        1    0.000    0.000    0.000    0.000 utils.py:97(lazy_property)
        1    0.000    0.000    0.000    0.000 normalization.py:63(CrossMapLRN2d)
        1    0.000    0.000    0.000    0.000 mock.py:2441(__new__)
        1    0.000    0.000    0.000    0.000 __init__.py:531(__init__)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:5932(landau_gen)
        1    0.000    0.000    0.000    0.000 special.py:174(GenericIdentity)
        1    0.000    0.000    0.000    0.000 polynomials.py:28(OrthogonalPolynomial)
        1    0.000    0.000    0.000    0.000 loader.py:77(__init__)
        3    0.000    0.000    0.000    0.000 _add_docstring.py:11(add_newdoc)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:232(LinearTriInterpolator)
        6    0.000    0.000    0.000    0.000 core.py:5906(postParse)
        1    0.000    0.000    0.000    0.000 headerregistry.py:468(ContentTypeHeader)
        1    0.000    0.000    0.000    0.000 _ufunc_config.py:30(<dictcomp>)
        1    0.000    0.000    0.000    0.000 diagonal.py:86(DiagonalOf)
        1    0.000    0.000    0.000    0.000 fourier.py:475(FiniteFourierSeries)
        1    0.000    0.000    0.000    0.000 __init__.py:764(Grouper)
        1    0.000    0.000    0.000    0.000 dropout.py:195(AlphaDropout)
        3    0.000    0.000    0.000    0.000 wrappers.py:204(<listcomp>)
        1    0.000    0.000    0.000    0.000 patches.py:2923(_Curve)
        1    0.000    0.000    0.000    0.000 string.py:188(Formatter)
        1    0.000    0.000    0.000    0.000 backend_tools.py:444(ToolGrid)
        1    0.000    0.000    0.000    0.000 _diagnostic.py:40(ExportDiagnostic)
        1    0.000    0.000    0.000    0.000 events.py:161(AbstractServer)
        1    0.000    0.000    0.000    0.000 abc.py:43(Finder)
        1    0.000    0.000    0.000    0.000 dense_ndim_array.py:160(MutableDenseNDimArray)
        1    0.000    0.000    0.000    0.000 bessel.py:1723(airyaiprime)
        1    0.000    0.000    0.000    0.000 wavfile.py:31(SeekEmulatingReader)
        1    0.000    0.000    0.000    0.000 _jit_internal.py:1395(_TensorExtractor)
        1    0.000    0.000    0.000    0.000 animation.py:534(PillowWriter)
        1    0.000    0.000    0.000    0.000 polyoptions.py:512(Split)
        1    0.000    0.000    0.000    0.000 linear_relu.py:6(LinearReLU)
        1    0.000    0.000    0.000    0.000 polyoptions.py:648(Formal)
        4    0.000    0.000    0.000    0.000 math2.py:42(_mathfun)
        1    0.000    0.000    0.000    0.000 __init__.py:758(is_url)
        1    0.000    0.000    0.000    0.000 relational.py:909(GreaterThan)
        1    0.000    0.000    0.000    0.000 ImageFile.py:449(StubHandler)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:103(ksone_gen)
        2    0.000    0.000    0.000    0.000 pyplot.py:211(_get_required_interactive_framework)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:509(LinearLR)
        1    0.000    0.000    0.000    0.000 ordinals.py:5(OmegaPower)
        1    0.000    0.000    0.000    0.000 mg_operation.py:10(MagneticGroupOp)
        1    0.000    0.000    0.000    0.000 padding.py:173(_ReflectionPadNd)
        1    0.000    0.000    0.000    0.000 cm.py:75(_DeprecatedCmapDictWrapper)
        1    0.000    0.000    0.000    0.000 ssl.py:227(_TLSMessageType)
        1    0.000    0.000    0.000    0.000 sets.py:2192(SymmetricDifference)
        9    0.000    0.000    0.000    0.000 core.py:4247(<genexpr>)
        1    0.000    0.000    0.000    0.000 extension.py:38(Extension)
        1    0.000    0.000    0.000    0.000 _tanhsinh.py:1197(<listcomp>)
        1    0.000    0.000    0.000    0.000 computed_entries.py:112(ConstantEnergyAdjustment)
        3    0.000    0.000    0.000    0.000 units.py:791(unitized)
        1    0.000    0.000    0.000    0.000 function.py:252(_HookMixin)
        1    0.000    0.000    0.000    0.000 widgets.py:91(AxesWidget)
        6    0.000    0.000    0.000    0.000 iterables.py:858(<genexpr>)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:870(Terminal)
        1    0.000    0.000    0.000    0.000 ImageFile.py:488(Parser)
        1    0.000    0.000    0.000    0.000 linear.py:208(LazyLinear)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4888(invgamma_gen)
        1    0.000    0.000    0.000    0.000 factorials.py:503(RisingFactorial)
        2    0.000    0.000    0.000    0.000 weakref.py:352(__init__)
        1    0.000    0.000    0.000    0.000 channelshuffle.py:8(ChannelShuffle)
        1    0.000    0.000    0.000    0.000 batchnorm.py:78(BatchNorm3d)
        1    0.000    0.000    0.000    0.000 _pep440.py:165(LegacyVersion)
        7    0.000    0.000    0.000    0.000 {built-in method _stat.S_ISDIR}
        1    0.000    0.000    0.000    0.000 _resampling.py:257(BootstrapResult)
        1    0.000    0.000    0.000    0.000 loss.py:228(PoissonNLLLoss)
        1    0.000    0.000    0.000    0.000 _ops.py:116(__init__)
        1    0.000    0.000    0.000    0.000 client.py:1398(HTTPSConnection)
        9    0.000    0.000    0.000    0.000 fromnumeric.py:2172(_sum_dispatcher)
        1    0.000    0.000    0.000    0.000 perm_groups.py:5258(SymmetricPermutationGroup)
        1    0.000    0.000    0.000    0.000 _special_sparse_arrays.py:757(MikotaK)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1490(KeyEvent)
        1    0.000    0.000    0.000    0.000 tensor_functions.py:42(LeviCivita)
        1    0.000    0.000    0.000    0.000 backend_bases.py:3282(ToolContainerBase)
        1    0.000    0.000    0.000    0.000 _optimize.py:2439(Brent)
        1    0.000    0.000    0.000    0.000 scalarstring.py:23(ScalarString)
        1    0.000    0.000    0.000    0.000 animation.py:561(FFMpegBase)
        3    0.000    0.000    0.000    0.000 zipfile.py:1872(close)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1783(DraggableOffsetBox)
        1    0.000    0.000    0.000    0.000 __init__.py:23(get_projection_names)
        1    0.000    0.000    0.000    0.000 epathtools.py:6(EPath)
        1    0.000    0.000    0.000    0.000 __init__.py:321(CDLL)
        1    0.000    0.000    0.000    0.000 {built-in method torch._C._jit_init}
        1    0.000    0.000    0.000    0.000 normalization.py:198(GroupNorm)
        2    0.000    0.000    0.000    0.000 _parser.py:96(checkgroup)
        1    0.000    0.000    0.000    0.000 computed_entries.py:168(CompositionEnergyAdjustment)
        1    0.000    0.000    0.000    0.000 quadrature.py:5(QuadratureRule)
        1    0.000    0.000    0.000    0.000 hyper.py:1031(HyperRep_sqrts2)
        1    0.000    0.000    0.000    0.000 complexes.py:897(transpose)
        1    0.000    0.000    0.000    0.000 autograd_function.py:536(CtxWithSavedTensors)
        2    0.000    0.000    0.000    0.000 __init__.py:87(__setattr__)
        1    0.000    0.000    0.000    0.000 pooling.py:497(AvgPool1d)
        1    0.000    0.000    0.000    0.000 collections.py:1769(PatchCollection)
        1    0.000    0.000    0.000    0.000 backend_tools.py:474(ToolFullScreen)
        1    0.000    0.000    0.000    0.000 text.py:1243(OffsetFrom)
        1    0.000    0.000    0.000    0.000 scanner.py:1979(CommentBase)
        1    0.000    0.000    0.000    0.000 observer.py:520(MovingAverageMinMaxObserver)
        1    0.000    0.000    0.000    0.000 instancenorm.py:385(LazyInstanceNorm3d)
        1    0.000    0.000    0.000    0.000 main.py:1477(YAMLObjectMetaclass)
        1    0.000    0.000    0.000    0.000 bessel.py:2044(marcumq)
        1    0.000    0.000    0.000    0.000 index_tricks.py:717(IndexExpression)
        2    0.000    0.000    0.000    0.000 {method 'title' of 'str' objects}
        1    0.000    0.000    0.000    0.000 fake_quantize.py:261(FixedQParamsFakeQuantize)
        1    0.000    0.000    0.000    0.000 pyplot.py:92(<dictcomp>)
        1    0.000    0.000    0.000    0.000 feedparser.py:45(BufferedSubFile)
        1    0.000    0.000    0.000    0.000 ssl.py:159(TLSVersion)
        2    0.000    0.000    0.000    0.000 constraints.py:332(__init__)
        1    0.000    0.000    0.000    0.000 more.py:270(peekable)
        1    0.000    0.000    0.000    0.000 complexes.py:1105(periodic_argument)
        1    0.000    0.000    0.000    0.000 tensor.py:5253(get_postprocessor)
        1    0.000    0.000    0.000    0.000 normalization.py:46(GroupNorm)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1104(boltzmann_gen)
        3    0.000    0.000    0.000    0.000 core.py:1362(getmask)
        1    0.000    0.000    0.000    0.000 _multivariate.py:4881(multivariate_hypergeom_gen)
        1    0.000    0.000    0.000    0.000 determinant.py:9(Determinant)
        1    0.000    0.000    0.000    0.000 gruntz.py:155(SubsSet)
        1    0.000    0.000    0.000    0.000 mathtext.py:755(UnicodeFonts)
        1    0.000    0.000    0.000    0.000 bessel.py:1880(airybiprime)
        6    0.000    0.000    0.000    0.000 symbolic_opset8.py:76(_interpolate)
        1    0.000    0.000    0.000    0.000 serialization.py:294(_open_zipfile_writer_buffer)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:238(_Interval)
        1    0.000    0.000    0.000    0.000 polar.py:720(_WedgeBbox)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:8974(rdist_gen)
        1    0.000    0.000    0.000    0.000 collections.py:1190(BrokenBarHCollection)
        1    0.000    0.000    0.000    0.000 scanner.py:1730(RoundTripScanner)
        1    0.000    0.000    0.000    0.000 tableform.py:9(TableForm)
        1    0.000    0.000    0.000    0.000 _interface.py:593(_CustomLinearOperator)
        1    0.000    0.000    0.000    0.000 _kdtree.py:327(innernode)
        1    0.000    0.000    0.000    0.000 headerregistry.py:504(ContentTransferEncodingHeader)
        1    0.000    0.000    0.000    0.000 polyoptions.py:602(Symmetric)
        1    0.000    0.000    0.000    0.000 _interface.py:846(IdentityOperator)
        1    0.000    0.000    0.000    0.000 mathtext.py:2107(Ship)
        1    0.000    0.000    0.000    0.000 line.py:1578(Segment)
        1    0.000    0.000    0.000    0.000 backend_tools.py:414(_ToolEnableAllNavigation)
        1    0.000    0.000    0.000    0.000 widgets.py:2443(PolygonSelector)
        1    0.000    0.000    0.000    0.000 factorials.py:383(factorial2)
        1    0.000    0.000    0.000    0.000 calendar.py:412(HTMLCalendar)
        1    0.000    0.000    0.000    0.000 lambdarepr.py:20(LambdaPrinter)
        1    0.000    0.000    0.000    0.000 docinfo.py:112(DocInfo)
        1    0.000    0.000    0.000    0.000 ImageFile.py:458(StubImageFile)
        1    0.000    0.000    0.000    0.000 spglib.py:365(SpaceGroupType)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:842(SupportsInt)
        1    0.000    0.000    0.000    0.000 boolalg.py:1370(ITE)
        1    0.000    0.000    0.000    0.000 transforms.py:2460(BboxTransform)
        3    0.000    0.000    0.000    0.000 {built-in method time.time}
        1    0.000    0.000    0.000    0.000 backend_tools.py:728(SaveFigureBase)
        1    0.000    0.000    0.000    0.000 graph.py:607(_PyTreeCodeGen)
        1    0.000    0.000    0.000    0.000 boolalg.py:856(Not)
        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:964(create_module)
        2    0.000    0.000    0.000    0.000 representer.py:137(add_multi_representer)
        1    0.000    0.000    0.000    0.000 ctx_mp_python.py:330(_constant)
        1    0.000    0.000    0.000    0.000 _mio4.py:461(VarWriter4)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:2443(__init__)
        1    0.000    0.000    0.000    0.000 function.py:263(BackwardCFunction)
        1    0.000    0.000    0.000    0.000 observer.py:804(MovingAveragePerChannelMinMaxObserver)
        1    0.000    0.000    0.000    0.000 version.py:69(_BaseVersion)
        1    0.000    0.000    0.000    0.000 _threadsafety.py:13(ReentrancyLock)
        3    0.000    0.000    0.000    0.000 tag.py:25(__init__)
        1    0.000    0.000    0.000    0.000 observer.py:1311(PlaceholderObserver)
        1    0.000    0.000    0.000    0.000 unix_events.py:1107(FastChildWatcher)
        1    0.000    0.000    0.000    0.000 _vertex.py:247(VertexCacheField)
        1    0.000    0.000    0.000    0.000 puiseux.py:59(PuiseuxRing)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:402(betanbinom_gen)
        1    0.000    0.000    0.000    0.000 kind.py:165(_BooleanKind)
        1    0.000    0.000    0.000    0.000 _multivariate.py:123(_PSD)
        1    0.000    0.000    0.000    0.000 axis.py:409(XTick)
        1    0.000    0.000    0.000    0.000 facts.py:257(Prover)
        1    0.000    0.000    0.000    0.000 _atfork.py:15(_register)
        1    0.000    0.000    0.000    0.000 _base.py:245(NestedFixedRule)
       12    0.000    0.000    0.000    0.000 core.py:970(clear)
        1    0.000    0.000    0.000    0.000 blocking_input.py:330(BlockingKeyMouseInput)
        1    0.000    0.000    0.000    0.000 activation.py:199(MultiheadAttention)
        1    0.000    0.000    0.000    0.000 charset.py:167(Charset)
        1    0.000    0.000    0.000    0.000 subprocess.py:163(TimeoutExpired)
        1    0.000    0.000    0.000    0.000 gamma_functions.py:1255(multigamma)
        2    0.000    0.000    0.000    0.000 <frozen posixpath>:52(normcase)
        1    0.000    0.000    0.000    0.000 Image.py:521(SupportsGetData)
        1    0.000    0.000    0.000    0.000 _functions.py:180(CrossMapLRN2d)
        1    0.000    0.000    0.000    0.000 datetime.py:1280(IsoCalendarDate)
        1    0.000    0.000    0.000    0.000 numbers.py:1037(euler)
        1    0.000    0.000    0.000    0.000 error_functions.py:1669(Li)
        1    0.000    0.000    0.000    0.000 padding.py:184(ReflectionPad1d)
        1    0.000    0.000    0.000    0.000 scanner.py:2044(ScannedComments)
        1    0.000    0.000    0.000    0.000 gzip.py:80(__init__)
        3    0.000    0.000    0.000    0.000 _version.py:78(_compare_version)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1367(StructuredVoidFormat)
        1    0.000    0.000    0.000    0.000 _cubature.py:589(_InfiniteLimitsTransform)
        1    0.000    0.000    0.000    0.000 padding.py:225(ReflectionPad2d)
        1    0.000    0.000    0.000    0.000 backend_registry.py:74(<dictcomp>)
        1    0.000    0.000    0.000    0.000 widgets.py:2647(Lasso)
        1    0.000    0.000    0.000    0.000 selectors.py:290(SelectSelector)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:402(MultiStepLR)
        1    0.000    0.000    0.000    0.000 backend_tools.py:160(ToolToggleBase)
        1    0.000    0.000    0.000    0.000 patches.py:2850(_Base)
        1    0.000    0.000    0.000    0.000 decoder.py:236(MatHandler)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:721(MimeParameters)
        1    0.000    0.000    0.000    0.000 complexes.py:1020(polar_lift)
        1    0.000    0.000    0.000    0.000 _stats_py.py:5955(TtestResult)
        1    0.000    0.000    0.000    0.000 _linprog_doc.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _lbfgsb_py.py:513(LbfgsInvHessProduct)
        9    0.000    0.000    0.000    0.000 _globals.py:58(__repr__)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1162(MeijerUnShiftA)
        1    0.000    0.000    0.000    0.000 core.py:4862(AtLineStart)
        1    0.000    0.000    0.000    0.000 data_parallel.py:42(DataParallel)
        1    0.000    0.000    0.000    0.000 complexes.py:954(adjoint)
        1    0.000    0.000    0.000    0.000 _contextlib.py:120(_DecoratorContextManager)
        1    0.000    0.000    0.000    0.000 threading.py:1421(_DummyThread)
        7    0.000    0.000    0.000    0.000 typing.py:406(__init_subclass__)
        4    0.000    0.000    0.000    0.000 _multiufuncs.py:72(_override_resolve_out_shapes)
        1    0.000    0.000    0.000    0.000 boolalg.py:397(BooleanFalse)
        1    0.000    0.000    0.000    0.000 _diagnostic.py:81(ExportDiagnosticEngine)
        1    0.000    0.000    0.000    0.000 markers.py:52(Environment)
        1    0.000    0.000    0.000    0.000 ElementTree.py:1272(XMLPullParser)
        1    0.000    0.000    0.000    0.000 __init__.py:123(DeprecatedTuple)
        1    0.000    0.000    0.000    0.000 error_functions.py:1765(TrigonometricIntegral)
        1    0.000    0.000    0.000    0.000 relational.py:1150(LessThan)
        1    0.000    0.000    0.000    0.000 mathtext.py:82(MathtextBackend)
        1    0.000    0.000    0.000    0.000 matrices.py:747(MatrixMethods)
        1    0.000    0.000    0.000    0.000 _multivariate.py:4186(__init__)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:6099(laplace_asymmetric_gen)
        1    0.000    0.000    0.000    0.000 formal.py:1690(FormalPowerSeriesInverse)
        1    0.000    0.000    0.000    0.000 batchnorm.py:519(LazyBatchNorm3d)
        1    0.000    0.000    0.000    0.000 _comparison.py:74(<dictcomp>)
        1    0.000    0.000    0.000    0.000 threading.py:103(_RLock)
        1    0.000    0.000    0.000    0.000 _symbolic_trace.py:895(_PatchedFnSetAttr)
        1    0.000    0.000    0.000    0.000 units.py:153(DecimalConverter)
        1    0.000    0.000    0.000    0.000 numbers.py:1801(legendre_symbol)
       10    0.000    0.000    0.000    0.000 contextlib.py:65(_recreate_cm)
        1    0.000    0.000    0.000    0.000 __init__.py:230(_remove_shim)
        1    0.000    0.000    0.000    0.000 modules.py:286(FreeModule)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1849(_nchypergeom_gen)
        1    0.000    0.000    0.000    0.000 __init__.py:858(Prepared)
        1    0.000    0.000    0.000    0.000 limits.py:132(Limit)
        2    0.000    0.000    0.000    0.000 cache.py:183(LazyFunctionMeta)
        1    0.000    0.000    0.000    0.000 activation.py:110(RReLU)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2632(foldnorm_gen)
        1    0.000    0.000    0.000    0.000 conv_fused.py:539(ConvBnReLU2d)
        1    0.000    0.000    0.000    0.000 offsetbox.py:770(TextArea)
        1    0.000    0.000    0.000    0.000 scanner.py:2023(EOLComment)
        1    0.000    0.000    0.000    0.000 mathieu_functions.py:24(mathieus)
        1    0.000    0.000    0.000    0.000 graph.py:214(PythonCode)
        1    0.000    0.000    0.000    0.000 bdf.py:72(BDF)
        1    0.000    0.000    0.000    0.000 sequences.py:378(EmptySequence)
        1    0.000    0.000    0.000    0.000 dos.py:622(DosFingerprint)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:1001(_DOF_estimator)
        1    0.000    0.000    0.000    0.000 _info.py:33(__array_namespace_info__)
        3    0.000    0.000    0.000    0.000 <frozen _collections_abc>:98(__subclasshook__)
        1    0.000    0.000    0.000    0.000 polyoptions.py:621(Auto)
        2    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3117(_zero)
        1    0.000    0.000    0.000    0.000 observer.py:1393(NoopObserver)
        1    0.000    0.000    0.000    0.000 assumptions.py:464(StdFactKB)
        1    0.000    0.000    0.000    0.000 graph_drawer.py:322(FxGraphDrawer)
        1    0.000    0.000    0.000    0.000 function.py:826(AppliedUndef)
        1    0.000    0.000    0.000    0.000 memmap.py:22(memmap)
        1    0.000    0.000    0.000    0.000 queues.py:218(PriorityQueue)
        1    0.000    0.000    0.000    0.000 rrule.py:94(rrulebase)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9471(recipinvgauss_gen)
        5    0.000    0.000    0.000    0.000 transforms.py:224(_noconds_)
        1    0.000    0.000    0.000    0.000 equality.py:25(EqualityPredicate)
        1    0.000    0.000    0.000    0.000 encoder.py:74(JSONEncoder)
        1    0.000    0.000    0.000    0.000 six.py:169(_SixMetaPathImporter)
        4    0.000    0.000    0.000    0.000 _array_api.py:131(array_namespace)
        1    0.000    0.000    0.000    0.000 pydoc.py:523(HTMLRepr)
        1    0.000    0.000    0.000    0.000 transforms.py:1696(AffineBase)
        1    0.000    0.000    0.000    0.000 common.py:137(OdeSolution)
        1    0.000    0.000    0.000    0.000 parser.py:818(RoundTripParserSC)
        1    0.000    0.000    0.000    0.000 miscellaneous.py:801(Min)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:923(ValueTerminal)
        1    0.000    0.000    0.000    0.000 _resampling.py:2105(MonteCarloMethod)
        1    0.000    0.000    0.000    0.000 containers.py:339(OrderedSet)
        1    0.000    0.000    0.000    0.000 index_tricks.py:562(__init__)
        1    0.000    0.000    0.000    0.000 core.py:190(<listcomp>)
        1    0.000    0.000    0.000    0.000 _relative_risk.py:19(RelativeRiskResult)
        1    0.000    0.000    0.000    0.000 dviread.py:955(Encoding)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2324(exponpow_gen)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1390(zipfian_gen)
        1    0.000    0.000    0.000    0.000 net_min_base.py:58(_MinimizerSettingBase)
        1    0.000    0.000    0.000    0.000 transforms.py:1169(CumulativeDistributionTransform)
        4    0.000    0.000    0.000    0.000 stride_tricks.py:25(_maybe_view_as_subclass)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:197(betabinom_gen)
        1    0.000    0.000    0.000    0.000 _adapters.py:48(SpecPath)
        1    0.000    0.000    0.000    0.000 cnf.py:394(EncodedCNF)
        1    0.000    0.000    0.000    0.000 polyoptions.py:271(Gens)
        1    0.000    0.000    0.000    0.000 _docs.py:1(<module>)
        1    0.000    0.000    0.000    0.000 modules.py:1106(SubModulePolyRing)
        1    0.000    0.000    0.000    0.000 polyoptions.py:543(Extension)
        1    0.000    0.000    0.000    0.000 boolalg.py:281(BooleanTrue)
        1    0.000    0.000    0.000    0.000 numbers.py:2194(reduced_totient)
        1    0.000    0.000    0.000    0.000 _special_sparse_arrays.py:688(MikotaM)
        1    0.000    0.000    0.000    0.000 __config__.py:98(<listcomp>)
        1    0.000    0.000    0.000    0.000 core.py:376(dtype)
        1    0.000    0.000    0.000    0.000 _pep440.py:45(Infinity)
        1    0.000    0.000    0.000    0.000 category.py:133(StrCategoryFormatter)
        1    0.000    0.000    0.000    0.000 pathlib.py:231(_PosixFlavour)
        5    0.000    0.000    0.000    0.000 datetime.py:51(_days_in_month)
        1    0.000    0.000    0.000    0.000 _util.py:1062(_RichResult)
        1    0.000    0.000    0.000    0.000 dist.py:75(__getattr__)
        1    0.000    0.000    0.000    0.000 backend_tools.py:404(ToolQuitAll)
        1    0.000    0.000    0.000    0.000 _cubic.py:569(CubicSpline)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:928(_BivariateSplineBase)
        5    0.000    0.000    0.000    0.000 six.py:186(_get_module)
        1    0.000    0.000    0.000    0.000 relational.py:1167(StrictGreaterThan)
        2    0.000    0.000    0.000    0.000 constraint_registry.py:83(__init__)
        1    0.000    0.000    0.000    0.000 loss.py:301(GaussianNLLLoss)
        1    0.000    0.000    0.000    0.000 _input_validation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 header.py:179(Header)
        1    0.000    0.000    0.000    0.000 _factories.py:9(__init__)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9591(skewcauchy_gen)
        1    0.000    0.000    0.000    0.000 _ops.py:418(OpOverloadPacket)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2249(exponweib_gen)
        1    0.000    0.000    0.000    0.000 combining.py:238(_ChildDataPipe)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:11491(halfgennorm_gen)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:26(LRScheduler)
        1    0.000    0.000    0.000    0.000 _parser.py:661(_result)
        1    0.000    0.000    0.000    0.000 _constraints.py:127(LinearConstraint)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1483(dlaplace_gen)
        1    0.000    0.000    0.000    0.000 _vertex.py:75(VertexScalarField)
        1    0.000    0.000    0.000    0.000 expand.py:379(EnsurePackagesDiscovered)
        1    0.000    0.000    0.000    0.000 backend_tools.py:504(ToolYScale)
        1    0.000    0.000    0.000    0.000 polynomials.py:1320(assoc_laguerre)
        1    0.000    0.000    0.000    0.000 error_functions.py:819(erfinv)
        1    0.000    0.000    0.000    0.000 _ops.py:44(PyOperatorABC)
        2    0.000    0.000    0.000    0.000 constraints.py:366(__init__)
        1    0.000    0.000    0.000    0.000 linear.py:21(Identity)
        1    0.000    0.000    0.000    0.000 error_functions.py:912(erfcinv)
        1    0.000    0.000    0.000    0.000 dataframes.py:282(CaptureSetItem)
        1    0.000    0.000    0.000    0.000 __init__.py:169(<listcomp>)
        1    0.000    0.000    0.000    0.000 transforms.py:2598(ScaledTranslation)
        1    0.000    0.000    0.000    0.000 zeta_functions.py:667(riemann_xi)
        1    0.000    0.000    0.000    0.000 rnn.py:40(RNNCellBase)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:4387(TransformedDistribution)
        1    0.000    0.000    0.000    0.000 companion.py:8(CompanionMatrix)
        1    0.000    0.000    0.000    0.000 numbers.py:1662(divisor_sigma)
        1    0.000    0.000    0.000    0.000 _cm.py:66(cubehelix)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:12129(studentized_range_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:8917(powernorm_gen)
        1    0.000    0.000    0.000    0.000 blas.py:249(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1295(zipf_gen)
        1    0.000    0.000    0.000    0.000 distance.py:56(CosineSimilarity)
        1    0.000    0.000    0.000    0.000 weak.py:37(WeakIdRef)
        1    0.000    0.000    0.000    0.000 fancysets.py:239(Reals)
        1    0.000    0.000    0.000    0.000 activation.py:80(ELU)
        1    0.000    0.000    0.000    0.000 pyplot.py:514(_xkcd)
        1    0.000    0.000    0.000    0.000 Files_in.py:3(FilesIn)
        1    0.000    0.000    0.000    0.000 conv.py:1264(LazyConv2d)
        1    0.000    0.000    0.000    0.000 optimization.py:7(OptimizationMethods)
        4    0.000    0.000    0.000    0.000 core.py:3417(dtype)
        1    0.000    0.000    0.000    0.000 encoder.py:105(__init__)
        1    0.000    0.000    0.000    0.000 _ode.py:1209(dop853)
        1    0.000    0.000    0.000    0.000 mathieu_functions.py:86(mathieuc)
        1    0.000    0.000    0.000    0.000 numbers.py:1729(udivisor_sigma)
        1    0.000    0.000    0.000    0.000 dataset.py:252(ChainDataset)
        1    0.000    0.000    0.000    0.000 _optimize.py:61(MemoizeJac)
        1    0.000    0.000    0.000    0.000 argparse.py:1047(_AppendConstAction)
        1    0.000    0.000    0.000    0.000 context.py:220(Process)
        1    0.000    0.000    0.000    0.000 exp_family.py:6(ExponentialFamily)
        4    0.000    0.000    0.000    0.000 {built-in method from_iterable}
        1    0.000    0.000    0.000    0.000 polyoptions.py:576(Modulus)
        1    0.000    0.000    0.000    0.000 transforms.py:2624(AffineDeltaTransform)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:1087(CyclicLR)
        1    0.000    0.000    0.000    0.000 _typing.py:44(JustFloat)
        1    0.000    0.000    0.000    0.000 dates.py:947(rrulewrapper)
        1    0.000    0.000    0.000    0.000 colorsys.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _functions.py:37(ReduceAddCoalesced)
        1    0.000    0.000    0.000    0.000 transforms.py:2088(_BlendedMixin)
        1    0.000    0.000    0.000    0.000 loss.py:539(BCELoss)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:7134(mielke_gen)
        1    0.000    0.000    0.000    0.000 _guards.py:354(Source)
        1    0.000    0.000    0.000    0.000 _multivariate.py:245(multi_rv_frozen)
        1    0.000    0.000    0.000    0.000 _hessian_update_strategy.py:11(HessianUpdateStrategy)
        1    0.000    0.000    0.000    0.000 beta_functions.py:282(betainc_regularized)
        1    0.000    0.000    0.000    0.000 chi2.py:6(Chi2)
        1    0.000    0.000    0.000    0.000 dropout.py:62(Dropout1d)
        1    0.000    0.000    0.000    0.000 _stats_py.py:4297(PearsonRResult)
        1    0.000    0.000    0.000    0.000 fold.py:156(Unfold)
        1    0.000    0.000    0.000    0.000 collections.py:934(PathCollection)
        1    0.000    0.000    0.000    0.000 csv.py:23(Dialect)
        4    0.000    0.000    0.000    0.000 utils.py:8(_ntuple)
        1    0.000    0.000    0.000    0.000 _compression.py:16(_check_can_read)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:505(IsNonOverlappingAndDenseIndicator)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2149(exponnorm_gen)
        1    0.000    0.000    0.000    0.000 normalization.py:81(InstanceNorm1d)
        1    0.000    0.000    0.000    0.000 _infra.py:230(Graph)
        1    0.000    0.000    0.000    0.000 pickle.py:200(_Framer)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:775(_Parameterization)
        1    0.000    0.000    0.000    0.000 fused.py:113(BNReLU3d)
        1    0.000    0.000    0.000    0.000 colors.py:1099(TwoSlopeNorm)
        1    0.000    0.000    0.000    0.000 _fortran_format_parser.py:96(ExpFormat)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:9889(trapezoid_gen)
        1    0.000    0.000    0.000    0.000 diagonal.py:157(DiagMatrix)
        1    0.000    0.000    0.000    0.000 __init__.py:44(__init__)
        3    0.000    0.000    0.000    0.000 __init__.py:504(CFunctionType)
        1    0.000    0.000    0.000    0.000 transforms.py:2562(BboxTransformFrom)
        1    0.000    0.000    0.000    0.000 arpack.py:990(IterOpInv)
        1    0.000    0.000    0.000    0.000 sequences.py:1126(SeqMul)
        1    0.000    0.000    0.000    0.000 logic.py:320(AndOr_Base)
        1    0.000    0.000    0.000    0.000 records.py:223(record)
        1    0.000    0.000    0.000    0.000 art3d.py:293(Patch3D)
        1    0.000    0.000    0.000    0.000 request.py:1080(AbstractDigestAuthHandler)
        1    0.000    0.000    0.000    0.000 expr_with_intlimits.py:13(ExprWithIntLimits)
        1    0.000    0.000    0.000    0.000 _ode.py:1049(zvode)
        3    0.000    0.000    0.000    0.000 utils.py:17(<genexpr>)
        1    0.000    0.000    0.000    0.000 cse_main.py:218(FuncArgTracker)
        1    0.000    0.000    0.000    0.000 pooling.py:249(_MaxUnpoolNd)
        1    0.000    0.000    0.000    0.000 _base.py:154(FixedRule)
       11    0.000    0.000    0.000    0.000 {built-in method io.text_encoding}
        1    0.000    0.000    0.000    0.000 records.py:308(recarray)
        1    0.000    0.000    0.000    0.000 _policybase.py:18(_PolicyBase)
        1    0.000    0.000    0.000    0.000 resolver.py:303(VersionedResolver)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:930(Writer)
        1    0.000    0.000    0.000    0.000 widgets.py:1836(ToolHandles)
        1    0.000    0.000    0.000    0.000 relational.py:827(_Inequality)
        1    0.000    0.000    0.000    0.000 scalarfloat.py:103(ExponentialCapsFloat)
        1    0.000    0.000    0.000    0.000 Files_out.py:2(FilesOut)
        1    0.000    0.000    0.000    0.000 padding.py:277(ReflectionPad3d)
        1    0.000    0.000    0.000    0.000 numbers.py:1959(mobius)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:913(Reader)
        1    0.000    0.000    0.000    0.000 _differentiable_functions.py:53(_ScalarHessWrapper)
        1    0.000    0.000    0.000    0.000 observer.py:52(_PartialWrapper)
        1    0.000    0.000    0.000    0.000 __init__.py:226(insert_shim)
        1    0.000    0.000    0.000    0.000 response.py:68(addinfourl)
        1    0.000    0.000    0.000    0.000 tz.py:874(tzrange)
        1    0.000    0.000    0.000    0.000 sequences.py:466(SeqPer)
        1    0.000    0.000    0.000    0.000 __init__.py:1198(is_interactive)
        1    0.000    0.000    0.000    0.000 unix_events.py:902(PidfdChildWatcher)
        1    0.000    0.000    0.000    0.000 timeit.py:84(Timer)
        1    0.000    0.000    0.000    0.000 __init__.py:199(strict_fusion)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:611(arcsine_gen)
        1    0.000    0.000    0.000    0.000 shape_prop.py:68(ShapeProp)
        1    0.000    0.000    0.000    0.000 numbers.py:2039(primenu)
        1    0.000    0.000    0.000    0.000 _root_scalar.py:20(MemoizeDer)
        1    0.000    0.000    0.000    0.000 json.py:552(MontyEncoder)
        2    0.000    0.000    0.000    0.000 {built-in method _sqlite3.register_converter}
        1    0.000    0.000    0.000    0.000 random.py:784(SystemRandom)
        1    0.000    0.000    0.000    0.000 transports.py:251(_FlowControlMixin)
        1    0.000    0.000    0.000    0.000 inputs.py:3071(UnknownPotcarWarning)
        1    0.000    0.000    0.000    0.000 gui.py:24(tqdm_gui)
        1    0.000    0.000    0.000    0.000 complexes.py:1233(principal_branch)
        1    0.000    0.000    0.000    0.000 __init__.py:7(Warning)
        1    0.000    0.000    0.000    0.000 _morestats.py:2625(_ABW)
        1    0.000    0.000    0.000    0.000 context.py:230(DefaultContext)
        1    0.000    0.000    0.000    0.000 polyoptions.py:258(Expand)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:420(TrueDiv)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3915(genhalflogistic_gen)
        8    0.000    0.000    0.000    0.000 _pep440.py:70(__neg__)
        1    0.000    0.000    0.000    0.000 cnf.py:77(OR)
        1    0.000    0.000    0.000    0.000 _weights_only_unpickler.py:113(Unpickler)
        1    0.000    0.000    0.000    0.000 __init__.py:936(setLevel)
        1    0.000    0.000    0.000    0.000 _base.py:6(Rule)
        1    0.000    0.000    0.000    0.000 numbers.py:1849(jacobi_symbol)
        1    0.000    0.000    0.000    0.000 due.py:22(InactiveDueCreditCollector)
        1    0.000    0.000    0.000    0.000 transports.py:9(BaseTransport)
        1    0.000    0.000    0.000    0.000 line.py:2670(Ray3D)
        1    0.000    0.000    0.000    0.000 stubs.py:38(QuantWrapper)
        1    0.000    0.000    0.000    0.000 padding.py:330(_ReplicationPadNd)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:5674(jf_skew_t_gen)
        1    0.000    0.000    0.000    0.000 sharding.py:25(ShardingFilterIterDataPipe)
        1    0.000    0.000    0.000    0.000 backend_tools.py:514(ToolXScale)
        1    0.000    0.000    0.000    0.000 single.py:443(FirstExact)
        1    0.000    0.000    0.000    0.000 _functions.py:273(BackwardHookFunction)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1304(OffsetImage)
        1    0.000    0.000    0.000    0.000 ticker.py:923(LogFormatter)
        1    0.000    0.000    0.000    0.000 periodic_table.py:852(_ElementMeta)
        1    0.000    0.000    0.000    0.000 numbers.py:2144(totient)
        1    0.000    0.000    0.000    0.000 numbers.py:2954(Half)
        1    0.000    0.000    0.000    0.000 numbers.py:1920(kronecker_symbol)
        3    0.000    0.000    0.000    0.000 rcsetup.py:217(validate_dpi)
        1    0.000    0.000    0.000    0.000 version.py:38(_Version)
        3    0.000    0.000    0.000    0.000 __init__.py:919(__init__)
        1    0.000    0.000    0.000    0.000 zipfile.py:1131(_ZipWriteFile)
        1    0.000    0.000    0.000    0.000 ticker.py:183(_DummyAxis)
        1    0.000    0.000    0.000    0.000 outputs.py:5528(Eigenval)
        1    0.000    0.000    0.000    0.000 loss.py:35(L1Loss)
        8    0.000    0.000    0.000    0.000 six.py:80(_add_doc)
        1    0.000    0.000    0.000    0.000 distance.py:1744(CDistMetricWrapper)
        1    0.000    0.000    0.000    0.000 widgets.py:25(LockDraw)
        4    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:4346(_shift_scale_distribution_function)
        1    0.000    0.000    0.000    0.000 _trace.py:1111(TracedModule)
        1    0.000    0.000    0.000    0.000 hyper.py:937(HyperRep_atanh)
        1    0.000    0.000    0.000    0.000 TiffTags.py:32(TagInfo)
        1    0.000    0.000    0.000    0.000 transforms.py:783(CorrCholeskyTransform)
        1    0.000    0.000    0.000    0.000 _elffile.py:41(ELFFile)
        1    0.000    0.000    0.000    0.000 inputs.py:1927(OrbitalDescription)
        1    0.000    0.000    0.000    0.000 beta_functions.py:173(betainc)
        1    0.000    0.000    0.000    0.000 _rules.py:126(_FxTracerSuccess)
        6    0.000    0.000    0.000    0.000 signal.py:48(_wraps)
        1    0.000    0.000    0.000    0.000 homomorphisms.py:444(MatrixHomomorphism)
        1    0.000    0.000    0.000    0.000 _rbfinterp.py:134(RBFInterpolator)
        1    0.000    0.000    0.000    0.000 numbers.py:2252(primepi)
        1    0.000    0.000    0.000    0.000 rnn.py:492(GRU)
        3    0.000    0.000    0.000    0.000 _new_distributions.py:343(_moment_central_formula)
        1    0.000    0.000    0.000    0.000 numbers.py:3825(GoldenRatio)
        1    0.000    0.000    0.000    0.000 transforms.py:1428(HankelTypeTransform)
        1    0.000    0.000    0.000    0.000 _nonlin.py:454(InverseJacobian)
        2    0.000    0.000    0.000    0.000 _adapters.py:16(__getattr__)
        8    0.000    0.000    0.000    0.000 _multiufuncs.py:61(_override_key)
        1    0.000    0.000    0.000    0.000 pathlib.py:304(__init__)
        1    0.000    0.000    0.000    0.000 mathtext.py:137(MathtextBackendAgg)
        1    0.000    0.000    0.000    0.000 bz2.py:140(writable)
        1    0.000    0.000    0.000    0.000 collections.py:1102(PolyCollection)
        1    0.000    0.000    0.000    0.000 lsoda.py:7(LSODA)
        1    0.000    0.000    0.000    0.000 _nonlin.py:318(TerminationCondition)
        1    0.000    0.000    0.000    0.000 normalization.py:121(InstanceNorm2d)
        1    0.000    0.000    0.000    0.000 _collections.py:27(Pair)
        1    0.000    0.000    0.000    0.000 _factories.py:13(__call__)
        1    0.000    0.000    0.000    0.000 comments.py:230(LineCol)
        1    0.000    0.000    0.000    0.000 dispatcher.py:366(MethodDispatcher)
        1    0.000    0.000    0.000    0.000 request.py:645(HTTPRedirectHandler)
        1    0.000    0.000    0.000    0.000 autograd_function.py:547(CtxCustomSave)
        1    0.000    0.000    0.000    0.000 conv_fused.py:590(ConvReLU2d)
        1    0.000    0.000    0.000    0.000 single.py:294(SinglePatternODESolver)
        1    0.000    0.000    0.000    0.000 events.py:17(Event)
        1    0.000    0.000    0.000    0.000 normalization.py:161(InstanceNorm3d)
        1    0.000    0.000    0.000    0.000 _VF.py:19(VFModule)
        1    0.000    0.000    0.000    0.000 __init__.py:110(DeQuantize)
        1    0.000    0.000    0.000    0.000 __init__.py:2111(_OrderedSet)
        1    0.000    0.000    0.000    0.000 error_functions.py:2759(_eis)
        1    0.000    0.000    0.000    0.000 getlimits.py:630(iinfo)
        1    0.000    0.000    0.000    0.000 mathieu_functions.py:148(mathieusprime)
        1    0.000    0.000    0.000    0.000 axis.py:482(YTick)
        1    0.000    0.000    0.000    0.000 streamplot.py:249(DomainMap)
        1    0.000    0.000    0.000    0.000 numbers.py:277(lucas)
        1    0.000    0.000    0.000    0.000 _policybase.py:271(Compat32)
        1    0.000    0.000    0.000    0.000 _nonlin.py:1175(DiagBroyden)
        1    0.000    0.000    0.000    0.000 spherical_harmonics.py:267(Znm)
        1    0.000    0.000    0.000    0.000 boolalg.py:1202(Implies)
        4    0.000    0.000    0.000    0.000 _spherical_bessel.py:9(use_reflection)
        1    0.000    0.000    0.000    0.000 ImageFile.py:812(PyDecoder)
        1    0.000    0.000    0.000    0.000 backend_tools.py:1030(ToolCopyToClipboardBase)
        1    0.000    0.000    0.000    0.000 core.py:2589(MaskedIterator)
        1    0.000    0.000    0.000    0.000 core.py:2362(_PendingSkip)
        1    0.000    0.000    0.000    0.000 _decorator.py:11(functional_datapipe)
        1    0.000    0.000    0.000    0.000 results.py:22(_ParseResultsWithOffset)
        1    0.000    0.000    0.000    0.000 font_manager.py:338(FontEntry)
        1    0.000    0.000    0.000    0.000 grad_mode.py:9(no_grad)
        1    0.000    0.000    0.000    0.000 _hypotests.py:705(SomersDResult)
        1    0.000    0.000    0.000    0.000 activation.py:478(ELU)
        1    0.000    0.000    0.000    0.000 rules.py:5(Transform)
        1    0.000    0.000    0.000    0.000 _util.py:597(MapWrapper)
        1    0.000    0.000    0.000    0.000 distributed.py:194(_DDPJoinHook)
        1    0.000    0.000    0.000    0.000 _stats_py.py:4063(AlexanderGovernResult)
        1    0.000    0.000    0.000    0.000 series.py:1229(List2DSeries)
        1    0.000    0.000    0.000    0.000 kind.py:181(__new__)
        1    0.000    0.000    0.000    0.000 reductions.py:22(StorageWeakRef)
        1    0.000    0.000    0.000    0.000 error.py:24(StreamMark)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:985(__new__)
        1    0.000    0.000    0.000    0.000 pycode.py:837(SymPyPrinter)
        1    0.000    0.000    0.000    0.000 backend_tools.py:712(ToolForward)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:1189(BivariateSpline)
        1    0.000    0.000    0.000    0.000 suite.py:92(TestSuite)
        1    0.000    0.000    0.000    0.000 _resampling.py:1314(PermutationTestResult)
        1    0.000    0.000    0.000    0.000 _interpolate.py:125(interp2d)
        1    0.000    0.000    0.000    0.000 sym_operation.py:4(SymOp)
        9    0.000    0.000    0.000    0.000 typing.py:495(__repr__)
        1    0.000    0.000    0.000    0.000 timeutils.py:40(<listcomp>)
        1    0.000    0.000    0.000    0.000 __init__.py:303(device)
        1    0.000    0.000    0.000    0.000 _dual_annealing.py:20(VisitingDistribution)
        1    0.000    0.000    0.000    0.000 request.py:908(HTTPPasswordMgrWithPriorAuth)
        1    0.000    0.000    0.000    0.000 activation.py:807(Softplus)
        1    0.000    0.000    0.000    0.000 request.py:1588(CacheFTPHandler)
        1    0.000    0.000    0.000    0.000 category.py:163(UnitData)
        1    0.000    0.000    0.000    0.000 headerregistry.py:490(ContentDispositionHeader)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:293(kstwobign_gen)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:751(Protocol)
        1    0.000    0.000    0.000    0.000 __init__.py:290(_DeviceGuard)
        1    0.000    0.000    0.000    0.000 _classes.py:21(__init__)
        1    0.000    0.000    0.000    0.000 Bravais_Lattice.py:10(bravaislattice)
        1    0.000    0.000    0.000    0.000 legend_handler.py:43(HandlerBase)
        1    0.000    0.000    0.000    0.000 _odds_ratio.py:174(OddsRatioResult)
        1    0.000    0.000    0.000    0.000 factor_.py:740(maxsize)
        1    0.000    0.000    0.000    0.000 __init__.py:154(HTTPMethod)
        1    0.000    0.000    0.000    0.000 activation.py:68(ReLU)
        1    0.000    0.000    0.000    0.000 enumerative.py:92(PartComponent)
        1    0.000    0.000    0.000    0.000 _common.py:6(weekday)
        1    0.000    0.000    0.000    0.000 sparse_ndim_array.py:138(MutableSparseNDimArray)
        1    0.000    0.000    0.000    0.000 relational.py:1185(StrictLessThan)
        6    0.000    0.000    0.000    0.000 fuser_method_mappings.py:153(_sequential_wrapper2)
        1    0.000    0.000    0.000    0.000 conv_fused.py:763(ConvReLU3d)
        1    0.000    0.000    0.000    0.000 cse_main.py:345(Unevaluated)
        1    0.000    0.000    0.000    0.000 error_functions.py:995(erf2inv)
        2    0.000    0.000    0.000    0.000 {function DecompressReader.close at 0x146c65f1d3a0}
        1    0.000    0.000    0.000    0.000 _arffread.py:170(NumericAttribute)
        1    0.000    0.000    0.000    0.000 tools.py:38(typed)
        1    0.000    0.000    0.000    0.000 spglib.py:402(MagneticSpaceGroupType)
        1    0.000    0.000    0.000    0.000 anomaly_mode.py:9(detect_anomaly)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:897(SupportsRound)
        1    0.000    0.000    0.000    0.000 package_importer.py:697(_PackageResourceReader)
        1    0.000    0.000    0.000    0.000 numbers.py:2091(primeomega)
        5    0.000    0.000    0.000    0.000 _inspect.py:143(<lambda>)
        1    0.000    0.000    0.000    0.000 _base.py:33(_axis_method_wrapper)
        1    0.000    0.000    0.000    0.000 _iotools.py:133(LineSplitter)
        1    0.000    0.000    0.000    0.000 headerregistry.py:439(ParameterizedMIMEHeader)
        1    0.000    0.000    0.000    0.000 unix_events.py:1426(_UnixDefaultEventLoopPolicy)
        1    0.000    0.000    0.000    0.000 formal.py:1613(FormalPowerSeriesCompose)
        1    0.000    0.000    0.000    0.000 tempfile.py:416(_TemporaryFileCloser)
        1    0.000    0.000    0.000    0.000 utilities.py:166(AlgIntPowers)
        1    0.000    0.000    0.000    0.000 qconfig.py:106(QConfigDynamic)
        1    0.000    0.000    0.000    0.000 padding.py:475(ZeroPad2d)
        1    0.000    0.000    0.000    0.000 _page_trend_test.py:417(_PageL)
        1    0.000    0.000    0.000    0.000 _directory_reader.py:17(DirectoryReader)
        1    0.000    0.000    0.000    0.000 formal.py:1543(FormalPowerSeriesProduct)
        1    0.000    0.000    0.000    0.000 kind.py:7(MatrixKind)
        1    0.000    0.000    0.000    0.000 __init__.py:329(SymBool)
        1    0.000    0.000    0.000    0.000 colors.py:80(_ColorMapping)
        1    0.000    0.000    0.000    0.000 equality.py:113(StrictGreaterThanPredicate)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:385(NameAddr)
        1    0.000    0.000    0.000    0.000 _resampling.py:981(PowerResult)
        1    0.000    0.000    0.000    0.000 request.py:2399(ftpwrapper)
        1    0.000    0.000    0.000    0.000 version.py:78(__lt__)
        1    0.000    0.000    0.000    0.000 scalarbool.py:21(ScalarBoolean)
        1    0.000    0.000    0.000    0.000 {built-in method torch._C._cuda_isInBadFork}
        1    0.000    0.000    0.000    0.000 _matfuncs.py:207(ProductOperator)
        1    0.000    0.000    0.000    0.000 version.py:45(Version)
        1    0.000    0.000    0.000    0.000 comments.py:591(CommentedKeySeq)
        1    0.000    0.000    0.000    0.000 _decorator.py:47(guaranteed_datapipes_determinism)
        1    0.000    0.000    0.000    0.000 _decorator.py:148(runtime_validation_disabled)
        1    0.000    0.000    0.000    0.000 line.py:2504(Line3D)
        1    0.000    0.000    0.000    0.000 selectors.py:60(_SelectorMapping)
        1    0.000    0.000    0.000    0.000 function.py:966(WildFunction)
        1    0.000    0.000    0.000    0.000 package_exporter.py:103(_PatternInfo)
        1    0.000    0.000    0.000    0.000 para4band.py:82(Para4Band)
        1    0.000    0.000    0.000    0.000 comments.py:671(CommentedMapItemsView)
        1    0.000    0.000    0.000    0.000 _rules.py:62(_MissingStandardSymbolicFunction)
        2    0.000    0.000    0.000    0.000 {built-in method sys.getfilesystemencoding}
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:1615(_ShapeInfo)
        1    0.000    0.000    0.000    0.000 swa_utils.py:13(AveragedModel)
        1    0.000    0.000    0.000    0.000 __init__.py:280(LogRecord)
        1    0.000    0.000    0.000    0.000 selector_events.py:1126(_SelectorDatagramTransport)
        1    0.000    0.000    0.000    0.000 spawn.py:12(ProcessException)
        1    0.000    0.000    0.000    0.000 pixelshuffle.py:60(PixelUnshuffle)
        1    0.000    0.000    0.000    0.000 _codata.py:142(exact2002)
        1    0.000    0.000    0.000    0.000 response.py:14(addbase)
        1    0.000    0.000    0.000    0.000 mathtext.py:1994(Kern)
        1    0.000    0.000    0.000    0.000 sequences.py:611(SeqFormula)
        1    0.000    0.000    0.000    0.000 constraints.py:384(__init__)
        2    0.000    0.000    0.000    0.000 glob.py:229(_ishidden)
        4    0.000    0.000    0.000    0.000 function.py:613(_iter_filter)
        1    0.000    0.000    0.000    0.000 _multivariate.py:2512(wishart_frozen)
        4    0.000    0.000    0.000    0.000 expr.py:3570(as_coeff_Mul)
        1    0.000    0.000    0.000    0.000 streamplot.py:313(Grid)
        1    0.000    0.000    0.000    0.000 polyoptions.py:711(Symbols)
        1    0.000    0.000    0.000    0.000 pythonmpq.py:122(__bool__)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4829(gausshyper_gen)
        1    0.000    0.000    0.000    0.000 __init__.py:488(StringTemplateStyle)
        4    0.000    0.000    0.000    0.000 _pytree.py:8(register_pytree_flatten_spec)
        1    0.000    0.000    0.000    0.000 ssl.py:154(<dictcomp>)
        1    0.000    0.000    0.000    0.000 offsetbox.py:918(AuxTransformBox)
        1    0.000    0.000    0.000    0.000 numbers.py:4020(Catalan)
        1    0.000    0.000    0.000    0.000 _trace.py:75(ONNXTracedModule)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:1044(_TypedDictMeta)
        1    0.000    0.000    0.000    0.000 _resampling.py:2082(ResamplingMethod)
        1    0.000    0.000    0.000    0.000 _adapters.py:83(ChildPath)
        1    0.000    0.000    0.000    0.000 ecm.py:17(Point)
        1    0.000    0.000    0.000    0.000 selectors.py:206(_BaseSelectorImpl)
        1    0.000    0.000    0.000    0.000 single.py:976(RationalRiccati)
        1    0.000    0.000    0.000    0.000 activation.py:691(Hardshrink)
        1    0.000    0.000    0.000    0.000 __init__.py:2317(JupyterHTMLStr)
        1    0.000    0.000    0.000    0.000 colors.py:1174(LogNorm)
        4    0.000    0.000    0.000    0.000 numbers.py:1444(_eval_is_zero)
        1    0.000    0.000    0.000    0.000 utils.py:117(Comparable)
        1    0.000    0.000    0.000    0.000 rootoftools.py:38(_pure_key_dict)
        1    0.000    0.000    0.000    0.000 _rules.py:92(_OperatorSupportedInNewerOpsetVersion)
        2    0.000    0.000    0.000    0.000 reprlib.py:9(recursive_repr)
        1    0.000    0.000    0.000    0.000 mathtext.py:1527(Accent)
        1    0.000    0.000    0.000    0.000 _basinhopping.py:18(Storage)
        1    0.000    0.000    0.000    0.000 figure.py:159(SubplotParams)
        1    0.000    0.000    0.000    0.000 calendar.py:156(__init__)
        1    0.000    0.000    0.000    0.000 argparse.py:109(_AttributeHolder)
        1    0.000    0.000    0.000    0.000 tz.py:328(_ttinfo)
        1    0.000    0.000    0.000    0.000 _backend.py:412(Dispatchable)
        1    0.000    0.000    0.000    0.000 core.py:6735(_extrema_operation)
        1    0.000    0.000    0.000    0.000 _hessian_update_strategy.py:285(BFGS)
        1    0.000    0.000    0.000    0.000 line.py:1109(Line)
        1    0.000    0.000    0.000    0.000 threading.py:1317(_make_invoke_excepthook)
        1    0.000    0.000    0.000    0.000 mathtext.py:1731(Vlist)
        1    0.000    0.000    0.000    0.000 core.py:4223(Or)
        4    0.000    0.000    0.000    0.000 core.py:6544(__has_singleton)
        5    0.000    0.000    0.000    0.000 due.py:43(_donothing_func)
        1    0.000    0.000    0.000    0.000 loss.py:1179(MultiLabelSoftMarginLoss)
        1    0.000    0.000    0.000    0.000 padding.py:434(ReplicationPad3d)
        1    0.000    0.000    0.000    0.000 Image.py:3029(ImageTransformHandler)
        1    0.000    0.000    0.000    0.000 _expm_multiply.py:396(LazyOperatorNormInfo)
        1    0.000    0.000    0.000    0.000 mathieu_functions.py:210(mathieucprime)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:455(Mailbox)
        1    0.000    0.000    0.000    0.000 _idl.py:629(AttrDict)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1701(skellam_gen)
        1    0.000    0.000    0.000    0.000 conv_fused.py:363(ConvBn1d)
        1    0.000    0.000    0.000    0.000 threading.py:264(__enter__)
        2    0.000    0.000    0.000    0.000 pathlib.py:53(__init__)
        1    0.000    0.000    0.000    0.000 python.py:10(PythonPrinter)
        1    0.000    0.000    0.000    0.000 boolalg.py:1171(Xnor)
        1    0.000    0.000    0.000    0.000 headerregistry.py:525(MessageIDHeader)
        3    0.000    0.000    0.000    0.000 libmpf.py:663(mpf_neg)
        1    0.000    0.000    0.000    0.000 backend_tools.py:248(SetCursorBase)
        1    0.000    0.000    0.000    0.000 numbers.py:3961(EulerGamma)
        1    0.000    0.000    0.000    0.000 colorbar.py:262(_ColorbarAutoMinorLocator)
        1    0.000    0.000    0.000    0.000 dates.py:1697(MicrosecondLocator)
        1    0.000    0.000    0.000    0.000 _dcsrch.py:17(DCSRCH)
        1    0.000    0.000    0.000    0.000 batchnorm.py:121(_BatchNorm)
        1    0.000    0.000    0.000    0.000 determinant.py:72(Permanent)
        1    0.000    0.000    0.000    0.000 selectors.py:433(PollSelector)
        1    0.000    0.000    0.000    0.000 polyoptions.py:684(Gen)
        1    0.000    0.000    0.000    0.000 _guards.py:284(GuardsContext)
        1    0.000    0.000    0.000    0.000 _rules.py:323(_FxFrontendDynamoMakeFx)
        4    0.000    0.000    0.000    0.000 __init__.py:799(<dictcomp>)
        1    0.000    0.000    0.000    0.000 conv.py:90(Conv2d)
        1    0.000    0.000    0.000    0.000 constraints.py:68(Constraint)
        1    0.000    0.000    0.000    0.000 more.py:941(bucket)
        1    0.000    0.000    0.000    0.000 headerregistry.py:104(Group)
        1    0.000    0.000    0.000    0.000 batchnorm.py:186(_LazyNormBase)
        1    0.000    0.000    0.000    0.000 _script.py:1534(_ScriptProfile)
        1    0.000    0.000    0.000    0.000 pooling.py:990(_AdaptiveMaxPoolNd)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3061(invwishart_frozen)
        1    0.000    0.000    0.000    0.000 polar.py:362(ThetaAxis)
        1    0.000    0.000    0.000    0.000 rrule.py:305(rrule)
        1    0.000    0.000    0.000    0.000 computed_entries.py:226(TemperatureEnergyAdjustment)
        1    0.000    0.000    0.000    0.000 printer.py:388(_PrintFunction)
        1    0.000    0.000    0.000    0.000 assume.py:14(AssumptionsContext)
        1    0.000    0.000    0.000    0.000 loss.py:219(NLLLoss2d)
        1    0.000    0.000    0.000    0.000 reductions.py:49(SharedCache)
        1    0.000    0.000    0.000    0.000 _base.py:1554(sparray)
        1    0.000    0.000    0.000    0.000 _globals.py:32(_NoValueType)
        1    0.000    0.000    0.000    0.000 _rotation_spline.py:251(RotationSpline)
        1    0.000    0.000    0.000    0.000 transports.py:72(WriteTransport)
        1    0.000    0.000    0.000    0.000 observer.py:1419(ReuseInputObserver)
        1    0.000    0.000    0.000    0.000 line.py:1872(LinearEntity2D)
        1    0.000    0.000    0.000    0.000 boolalg.py:1137(Nor)
        1    0.000    0.000    0.000    0.000 padding.py:382(ReplicationPad2d)
        1    0.000    0.000    0.000    0.000 constraints.py:186(_IndependentConstraint)
        1    0.000    0.000    0.000    0.000 pyprojecttoml.py:413(_EnsurePackagesDiscovered)
        1    0.000    0.000    0.000    0.000 fake_tensor.py:1398(FakeCopyMode)
        6    0.000    0.000    0.000    0.000 _common.py:13(tzname_in_python2)
        1    0.000    0.000    0.000    0.000 mathtext.py:3324(__init__)
        1    0.000    0.000    0.000    0.000 torch_version.py:41(TorchVersion)
        1    0.000    0.000    0.000    0.000 widgets.py:133(Button)
        1    0.000    0.000    0.000    0.000 __init__.py:58(cuFFTPlanCacheManager)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:860(SupportsComplex)
        1    0.000    0.000    0.000    0.000 _survival.py:219(ECDFResult)
        1    0.000    0.000    0.000    0.000 runner.py:161(TextTestRunner)
        1    0.000    0.000    0.000    0.000 _internal.py:616(_Stream)
        1    0.000    0.000    0.000    0.000 ImageMode.py:24(ModeDescriptor)
        1    0.000    0.000    0.000    0.000 equality.py:69(UnequalityPredicate)
        1    0.000    0.000    0.000    0.000 _guards.py:216(DuplicateInputs)
        1    0.000    0.000    0.000    0.000 cnf.py:109(AND)
        1    0.000    0.000    0.000    0.000 transforms.py:107(__init__)
        1    0.000    0.000    0.000    0.000 grad_scaler.py:13(_MultiDeviceReplicator)
        1    0.000    0.000    0.000    0.000 fnmatch.py:12(WildCard)
        1    0.000    0.000    0.000    0.000 abc.py:161(ResourceLoader)
        1    0.000    0.000    0.000    0.000 parameters.py:60(__init__)
        1    0.000    0.000    0.000    0.000 tz.py:1253(tzical)
        1    0.000    0.000    0.000    0.000 _page_trend_test.py:12(PageTrendTestResult)
        1    0.000    0.000    0.000    0.000 _constraints.py:227(Bounds)
        1    0.000    0.000    0.000    0.000 _nonlin.py:843(BroydenFirst)
        3    0.000    0.000    0.000    0.000 core.py:806(__init__)
        7    0.000    0.000    0.000    0.000 _pep440.py:446(<lambda>)
        1    0.000    0.000    0.000    0.000 loss.py:726(HingeEmbeddingLoss)
        1    0.000    0.000    0.000    0.000 _jit_internal.py:67(SourceLoader)
        6    0.000    0.000    0.000    0.000 fromnumeric.py:2317(_any_dispatcher)
        3    0.000    0.000    0.000    0.000 {method 'toordinal' of 'datetime.date' objects}
        5    0.000    0.000    0.000    0.000 datetime.py:545(_check_tzinfo_arg)
        1    0.000    0.000    0.000    0.000 line.py:2160(Ray2D)
        1    0.000    0.000    0.000    0.000 boolalg.py:1108(Nand)
        1    0.000    0.000    0.000    0.000 _guards.py:78(ShapeGuard)
        1    0.000    0.000    0.000    0.000 _trustregion_dogleg.py:38(DoglegSubproblem)
        1    0.000    0.000    0.000    0.000 matrixbase.py:5400(DeferredVector)
        1    0.000    0.000    0.000    0.000 _utils.py:39(Interval)
        1    0.000    0.000    0.000    0.000 parameter.py:13(Parameter)
        1    0.000    0.000    0.000    0.000 _binomtest.py:10(BinomTestResult)
        1    0.000    0.000    0.000    0.000 zeta_functions.py:706(stieltjes)
        1    0.000    0.000    0.000    0.000 combining.py:496(MultiplexerIterDataPipe)
        3    0.000    0.000    0.000    0.000 rendezvous.py:22(register_rendezvous_handler)
        1    0.000    0.000    0.000    0.000 polar.py:269(ThetaTick)
        1    0.000    0.000    0.000    0.000 _rules.py:277(_AtenlibFxToOnnx)
        1    0.000    0.000    0.000    0.000 _pytree.py:135(LeafSpec)
        1    0.000    0.000    0.000    0.000 tensor.py:4578(WildTensorHead)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:517(AddrSpec)
        6    0.000    0.000    0.000    0.000 version.py:471(_parse_letter_version)
        1    0.000    0.000    0.000    0.000 _rules.py:152(_FxTracerFailure)
        1    0.000    0.000    0.000    0.000 hooks.py:92(BackwardHook)
        1    0.000    0.000    0.000    0.000 tensor.py:4849(WildTensorIndex)
        1    0.000    0.000    0.000    0.000 _differentiable_functions.py:463(_VectorHessWrapper)
        1    0.000    0.000    0.000    0.000 locks.py:24(Lock)
        1    0.000    0.000    0.000    0.000 library.py:18(Library)
        1    0.000    0.000    0.000    0.000 activation.py:733(LeakyReLU)
        3    0.000    0.000    0.000    0.000 {method 'copy' of 'mappingproxy' objects}
        1    0.000    0.000    0.000    0.000 extras.py:213(_fromnxfunction)
        6    0.000    0.000    0.000    0.000 core.py:846(__init__)
        1    0.000    0.000    0.000    0.000 mathtext.py:1374(Node)
        1    0.000    0.000    0.000    0.000 _datasource.py:74(_FileOpeners)
        1    0.000    0.000    0.000    0.000 request.py:834(HTTPPasswordMgr)
        1    0.000    0.000    0.000    0.000 _rules.py:300(_FxNodeToOnnx)
        1    0.000    0.000    0.000    0.000 pyfunctorch.py:118(GradInterpreter)
        1    0.000    0.000    0.000    0.000 _print_helpers.py:8(Printable)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:224(QuotedString)
        1    0.000    0.000    0.000    0.000 mock.py:281(_SentinelObject)
        8    0.000    0.000    0.000    0.000 _multiufuncs.py:80(_override_finalize_out)
        1    0.000    0.000    0.000    0.000 _multivariate.py:5769(uniform_direction_gen)
        1    0.000    0.000    0.000    0.000 line.py:2429(LinearEntity3D)
        1    0.000    0.000    0.000    0.000 conv.py:1538(LazyConvTranspose3d)
        1    0.000    0.000    0.000    0.000 ctx_iv.py:292(ivmpf_constant)
        6    0.000    0.000    0.000    0.000 symbolic_opset9.py:1997(_interpolate)
        1    0.000    0.000    0.000    0.000 legend.py:50(DraggableLegend)
        1    0.000    0.000    0.000    0.000 setupcfg.py:759(_AmbiguousMarker)
        1    0.000    0.000    0.000    0.000 _ufunc_config.py:367(errstate)
        1    0.000    0.000    0.000    0.000 _stats_py.py:11024(_SimpleNormal)
        1    0.000    0.000    0.000    0.000 __init__.py:840(_CudaBase)
        1    0.000    0.000    0.000    0.000 anomaly_mode.py:91(set_detect_anomaly)
        1    0.000    0.000    0.000    0.000 context.py:283(SpawnProcess)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:851(SupportsFloat)
        1    0.000    0.000    0.000    0.000 _aliases.py:182(UniqueAllResult)
        1    0.000    0.000    0.000    0.000 transforms.py:89(__init__)
        1    0.000    0.000    0.000    0.000 grad_mode.py:108(set_grad_enabled)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha3_256}
        1    0.000    0.000    0.000    0.000 npyio.py:42(BagObj)
        1    0.000    0.000    0.000    0.000 _polyint.py:245(KroghInterpolator)
        1    0.000    0.000    0.000    0.000 abc.py:112(PathEntryFinder)
        1    0.000    0.000    0.000    0.000 polynomials.py:728(chebyshevu_root)
        1    0.000    0.000    0.000    0.000 tarfile.py:304(_LowLevelFile)
        5    0.000    0.000    0.000    0.000 multiarray.py:85(empty_like)
        1    0.000    0.000    0.000    0.000 legend_handler.py:652(__init__)
        1    0.000    0.000    0.000    0.000 core.py:255(InputGenerator)
        1    0.000    0.000    0.000    0.000 exponential.py:139(exp_polar)
        2    0.000    0.000    0.000    0.000 {method 'removesuffix' of 'str' objects}
        1    0.000    0.000    0.000    0.000 pc_groups.py:7(PolycyclicGroup)
        1    0.000    0.000    0.000    0.000 comments.py:204(Format)
        1    0.000    0.000    0.000    0.000 gaussiandomains.py:171(GaussianInteger)
        1    0.000    0.000    0.000    0.000 package_importer.py:662(_PackageNode)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:626(_ProtocolMeta)
        2    0.000    0.000    0.000    0.000 compat.py:113(__init__)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:885(MeijerFormula)
        1    0.000    0.000    0.000    0.000 _script.py:215(OrderedModuleDict)
        1    0.000    0.000    0.000    0.000 grad_mode.py:164(inference_mode)
        1    0.000    0.000    0.000    0.000 selectors.py:442(EpollSelector)
        3    0.000    0.000    0.000    0.000 six.py:885(add_metaclass)
        1    0.000    0.000    0.000    0.000 torch_version.py:6(_LazyImport)
        1    0.000    0.000    0.000    0.000 ctx_mp.py:1301(PrecisionManager)
        1    0.000    0.000    0.000    0.000 actions.py:19(OnlyOnce)
        4    0.000    0.000    0.000    0.000 results.py:26(__init__)
        1    0.000    0.000    0.000    0.000 transforms.py:587(SigmoidTransform)
        1    0.000    0.000    0.000    0.000 scale.py:91(LinearScale)
        1    0.000    0.000    0.000    0.000 dates.py:648(ConciseDateFormatter)
        1    0.000    0.000    0.000    0.000 headerregistry.py:562(HeaderRegistry)
        1    0.000    0.000    0.000    0.000 _typing.py:52(JustComplex)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:1232(_Sparse_Matrix_coo)
        1    0.000    0.000    0.000    0.000 equality.py:161(GreaterThanPredicate)
        1    0.000    0.000    0.000    0.000 grouping.py:19(__getattr__)
        1    0.000    0.000    0.000    0.000 ops.py:156(<listcomp>)
        1    0.000    0.000    0.000    0.000 expr_with_limits.py:538(AddWithLimits)
        1    0.000    0.000    0.000    0.000 activation.py:298(Hardsigmoid)
        1    0.000    0.000    0.000    0.000 mathtext.py:1618(Hlist)
        1    0.000    0.000    0.000    0.000 hb.py:375(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _kdtree.py:318(leafnode)
        1    0.000    0.000    0.000    0.000 mlab.py:962(GaussianKDE)
        1    0.000    0.000    0.000    0.000 csv.py:165(Sniffer)
        1    0.000    0.000    0.000    0.000 single.py:1436(HomogeneousCoeffSubsDepDivIndep)
        1    0.000    0.000    0.000    0.000 polyoptions.py:384(Composite)
        1    0.000    0.000    0.000    0.000 _multivariate.py:1385(matrix_normal_frozen)
        1    0.000    0.000    0.000    0.000 _shgo.py:1538(LMapCache)
        7    0.000    0.000    0.000    0.000 numeric.py:1389(_moveaxis_dispatcher)
        1    0.000    0.000    0.000    0.000 dev.py:147(__init__)
        1    0.000    0.000    0.000    0.000 single.py:1203(Separable)
        3    0.000    0.000    0.000    0.000 facts.py:290(split_alpha_beta)
        4    0.000    0.000    0.000    0.000 _ops.py:129(py_impl)
        1    0.000    0.000    0.000    0.000 scale.py:334(FuncScaleLog)
        1    0.000    0.000    0.000    0.000 ImageFile.py:734(PyCodec)
        1    0.000    0.000    0.000    0.000 ImageFile.py:101(_Tile)
        1    0.000    0.000    0.000    0.000 ticker.py:2372(LogLocator)
        1    0.000    0.000    0.000    0.000 _meta.py:32(SimplePath)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3505(multinomial_frozen)
        1    0.000    0.000    0.000    0.000 art3d.py:375(Patch3DCollection)
        1    0.000    0.000    0.000    0.000 expand.py:422(LazyMappingProxy)
        1    0.000    0.000    0.000    0.000 _comparison.py:414(NonePair)
        1    0.000    0.000    0.000    0.000 backend_tools.py:736(ZoomPanBase)
        1    0.000    0.000    0.000    0.000 _interpolate.py:167(_do_extrapolate)
        1    0.000    0.000    0.000    0.000 _creation.py:17(<dictcomp>)
        1    0.000    0.000    0.000    0.000 pycode.py:673(<dictcomp>)
        1    0.000    0.000    0.000    0.000 hub.py:20(_Faketqdm)
        1    0.000    0.000    0.000    0.000 __init__.py:2213(NullHandler)
        1    0.000    0.000    0.000    0.000 ImageSequence.py:24(Iterator)
        1    0.000    0.000    0.000    0.000 streams.py:117(FlowControlMixin)
        1    0.000    0.000    0.000    0.000 laplace.py:1267(LaplaceTransform)
        1    0.000    0.000    0.000    0.000 reductions.py:62(_after_fork)
        1    0.000    0.000    0.000    0.000 array_comprehension.py:344(ArrayComprehensionMap)
        1    0.000    0.000    0.000    0.000 _infra.py:40(PatchedPropertyBag)
        1    0.000    0.000    0.000    0.000 _czt.py:115(CZT)
        1    0.000    0.000    0.000    0.000 least_squares.py:255(_WrapArgsKwargs)
        1    0.000    0.000    0.000    0.000 boolalg.py:368(__hash__)
        1    0.000    0.000    0.000    0.000 rnn.py:46(PackedParameter)
        1    0.000    0.000    0.000    0.000 activation.py:361(SiLU)
        1    0.000    0.000    0.000    0.000 relational.py:891(_Less)
        1    0.000    0.000    0.000    0.000 distance.py:1771(PDistMetricWrapper)
        1    0.000    0.000    0.000    0.000 modules.py:1005(SubQuotientModule)
        1    0.000    0.000    0.000    0.000 util.py:6(assoc)
        1    0.000    0.000    0.000    0.000 conv.py:220(ConvTranspose1d)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3562(special_ortho_group_gen)
        1    0.000    0.000    0.000    0.000 graph.py:247(_node_list)
        1    0.000    0.000    0.000    0.000 emitter.py:57(Indents)
        1    0.000    0.000    0.000    0.000 animation.py:1521(FuncAnimation)
        1    0.000    0.000    0.000    0.000 readers.py:31(ZipReader)
        1    0.000    0.000    0.000    0.000 relational.py:873(_Greater)
        1    0.000    0.000    0.000    0.000 pooling.py:38(MaxPool1d)
        1    0.000    0.000    0.000    0.000 __init__.py:1323(disable)
        1    0.000    0.000    0.000    0.000 _multivariate.py:1832(dirichlet_frozen)
        1    0.000    0.000    0.000    0.000 activation.py:524(CELU)
        1    0.000    0.000    0.000    0.000 lines.py:1399(_AxLine)
        2    0.000    0.000    0.000    0.000 decorator.py:120(__init__)
        1    0.000    0.000    0.000    0.000 polyoptions.py:527(Gaussian)
        1    0.000    0.000    0.000    0.000 line.py:1987(Line2D)
        1    0.000    0.000    0.000    0.000 _vertex.py:179(VertexCacheBase)
        3    0.000    0.000    0.000    0.000 core.py:104(do_one)
        1    0.000    0.000    0.000    0.000 equality.py:257(LessThanPredicate)
        1    0.000    0.000    0.000    0.000 records.py:87(format_parser)
        1    0.000    0.000    0.000    0.000 numpy.py:35(<dictcomp>)
        1    0.000    0.000    0.000    0.000 symbol.py:26(Str)
        1    0.000    0.000    0.000    0.000 __init__.py:275(cudaStatus)
        1    0.000    0.000    0.000    0.000 image.py:1351(BboxImage)
        1    0.000    0.000    0.000    0.000 core.py:957(NullCache)
        1    0.000    0.000    0.000    0.000 _quad_vec.py:12(LRUDict)
        1    0.000    0.000    0.000    0.000 timestamp.py:16(TimeStamp)
        1    0.000    0.000    0.000    0.000 numpy.py:483(CuPyPrinter)
        1    0.000    0.000    0.000    0.000 inverselaplace.py:667(LaplaceTransformInversionMethods)
        1    0.000    0.000    0.000    0.000 _infra.py:167(StackFrame)
        1    0.000    0.000    0.000    0.000 loss.py:380(KLDivLoss)
        1    0.000    0.000    0.000    0.000 _internal.py:205(dummy_ctype)
        1    0.000    0.000    0.000    0.000 _rules.py:346(_ArgFormatTooVerbose)
        1    0.000    0.000    0.000    0.000 tasks.py:689(_GatheringFuture)
        1    0.000    0.000    0.000    0.000 protocols.py:9(BaseProtocol)
        1    0.000    0.000    0.000    0.000 analyzer.py:1691(SpacegroupOperations)
        1    0.000    0.000    0.000    0.000 arpack.py:315(_ArpackParams)
        1    0.000    0.000    0.000    0.000 lambdarepr.py:228(IntervalPrinter)
        1    0.000    0.000    0.000    0.000 _dtype_like.py:81(_SupportsDType)
        1    0.000    0.000    0.000    0.000 process.py:364(_ParentProcess)
        1    0.000    0.000    0.000    0.000 compat.py:112(Nprint)
        1    0.000    0.000    0.000    0.000 ImageFile.py:866(PyEncoder)
        1    0.000    0.000    0.000    0.000 numpy.py:481(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _parser.py:15(Node)
        1    0.000    0.000    0.000    0.000 mathtext.py:321(MathtextBackendPath)
        1    0.000    0.000    0.000    0.000 ops.py:294(IndexableIter)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:15(TriInterpolator)
        1    0.000    0.000    0.000    0.000 widgets.py:238(Slider)
        1    0.000    0.000    0.000    0.000 mathtext.py:1262(FontConstantsBase)
        1    0.000    0.000    0.000    0.000 core.py:4381(MatchFirst)
        1    0.000    0.000    0.000    0.000 loader.py:23(_FailedTest)
        1    0.000    0.000    0.000    0.000 _rules.py:208(_FxPassConvertNegToSigmoid)
        1    0.000    0.000    0.000    0.000 mock.py:2473(__init__)
        1    0.000    0.000    0.000    0.000 _stats_py.py:11053(_SimpleBeta)
        1    0.000    0.000    0.000    0.000 polynomials.py:687(chebyshevt_root)
        1    0.000    0.000    0.000    0.000 traversal.py:68(preorder_traversal)
        1    0.000    0.000    0.000    0.000 _symbolic_trace.py:876(_PatchedFn)
        1    0.000    0.000    0.000    0.000 _pep440.py:77(NegativeInfinity)
        1    0.000    0.000    0.000    0.000 typing.py:951(__repr__)
        1    0.000    0.000    0.000    0.000 _adapters.py:114(OrphanPath)
        1    0.000    0.000    0.000    0.000 pydoc.py:1127(TextRepr)
        1    0.000    0.000    0.000    0.000 _datasource.py:99(__init__)
        1    0.000    0.000    0.000    0.000 _functions.py:52(Gather)
        1    0.000    0.000    0.000    0.000 _parser.py:1589(ParserError)
        1    0.000    0.000    0.000    0.000 _basinhopping.py:196(AdaptiveStepsize)
        1    0.000    0.000    0.000    0.000 join.py:11(JoinHook)
        1    0.000    0.000    0.000    0.000 __init__.py:41(_LazySeedTracker)
        1    0.000    0.000    0.000    0.000 utils.py:8(SequenceWrapperMapDataPipe)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:556(DisplayName)
        1    0.000    0.000    0.000    0.000 _docscrape.py:578(FunctionDoc)
        1    0.000    0.000    0.000    0.000 tools_common.py:90(FusionGroup)
        1    0.000    0.000    0.000    0.000 core.py:5313(Opt)
        1    0.000    0.000    0.000    0.000 comments.py:1136(TaggedScalar)
        1    0.000    0.000    0.000    0.000 request.py:1256(AbstractHTTPHandler)
        1    0.000    0.000    0.000    0.000 pprint.py:80(_safe_key)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3705(ortho_group_gen)
        1    0.000    0.000    0.000    0.000 _pep440.py:135(_BaseVersion)
        1    0.000    0.000    0.000    0.000 boolalg.py:1487(Exclusive)
        1    0.000    0.000    0.000    0.000 loss.py:1226(CosineEmbeddingLoss)
        1    0.000    0.000    0.000    0.000 bessel.py:1347(AiryBase)
        1    0.000    0.000    0.000    0.000 _musllinux.py:18(_MuslVersion)
        1    0.000    0.000    0.000    0.000 _arffread.py:655(MetaData)
        1    0.000    0.000    0.000    0.000 locks.py:219(Condition)
        1    0.000    0.000    0.000    0.000 __init__.py:46(__getattr__)
        1    0.000    0.000    0.000    0.000 core.py:195(<listcomp>)
        1    0.000    0.000    0.000    0.000 conv.py:1333(LazyConv3d)
        1    0.000    0.000    0.000    0.000 pathlib.py:422(_PathParents)
        1    0.000    0.000    0.000    0.000 core.py:3473(CharsNotIn)
        5    0.000    0.000    0.000    0.000 version.py:537(<lambda>)
        1    0.000    0.000    0.000    0.000 para4tb.py:133(__init__)
        1    0.000    0.000    0.000    0.000 constraints.py:146(_DependentProperty)
        1    0.000    0.000    0.000    0.000 activation.py:244(ReLU6)
        1    0.000    0.000    0.000    0.000 lines.py:1440(VertexSelector)
        1    0.000    0.000    0.000    0.000 __init__.py:46(PackageNotFoundError)
        1    0.000    0.000    0.000    0.000 unix_events.py:980(BaseChildWatcher)
        1    0.000    0.000    0.000    0.000 category.py:113(StrCategoryLocator)
        1    0.000    0.000    0.000    0.000 hyper.py:1129(appellf1)
        1    0.000    0.000    0.000    0.000 _exceptions.py:38(_UFuncNoLoopError)
        1    0.000    0.000    0.000    0.000 _constraints.py:309(PreparedConstraint)
        1    0.000    0.000    0.000    0.000 __future__.py:81(_Feature)
        1    0.000    0.000    0.000    0.000 report.py:36(SQPReport)
        1    0.000    0.000    0.000    0.000 sdm.py:1447(unop_dict)
        1    0.000    0.000    0.000    0.000 polyutils.py:187(<listcomp>)
        1    0.000    0.000    0.000    0.000 proxy.py:22(Scope)
        1    0.000    0.000    0.000    0.000 parser.py:16(Parser)
        1    0.000    0.000    0.000    0.000 _state.py:12(EnabledProxy)
        1    0.000    0.000    0.000    0.000 _beartype.py:38(_create_beartype_decorator)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:186(LambdaLR)
        1    0.000    0.000    0.000    0.000 _sensitivity_analysis.py:155(BootstrapSobolResult)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:263(Comment)
        1    0.000    0.000    0.000    0.000 _base.py:74(_AsCompletedWaiter)
        1    0.000    0.000    0.000    0.000 single.py:912(RiccatiSpecial)
        1    0.000    0.000    0.000    0.000 core.py:5823(Combine)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:289(AddressList)
        1    0.000    0.000    0.000    0.000 sympy_parser.py:1251(__init__)
        1    0.000    0.000    0.000    0.000 datapipe.py:326(_DataPipeSerializationWrapper)
        1    0.000    0.000    0.000    0.000 activation.py:650(GELU)
        1    0.000    0.000    0.000    0.000 expand.py:53(StaticModule)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:782(_make_node_sizes_strides)
        1    0.000    0.000    0.000    0.000 single.py:1748(LinearCoefficients)
        1    0.000    0.000    0.000    0.000 _tanhsinh.py:1285(<listcomp>)
        1    0.000    0.000    0.000    0.000 _rules.py:254(_AtenlibSymbolicFunction)
        1    0.000    0.000    0.000    0.000 _arffread.py:232(StringAttribute)
        1    0.000    0.000    0.000    0.000 _survival.py:469(LogRankResult)
        7    0.000    0.000    0.000    0.000 due.py:31(non_decorating_decorator)
        1    0.000    0.000    0.000    0.000 one_hot_categorical.py:113(OneHotCategoricalStraightThrough)
        1    0.000    0.000    0.000    0.000 storage.py:230(UntypedStorage)
        1    0.000    0.000    0.000    0.000 widgets.py:1621(SpanSelector)
        1    0.000    0.000    0.000    0.000 pooling.py:893(LPPool1d)
        4    0.000    0.000    0.000    0.000 bessel.py:385(c_memo)
        1    0.000    0.000    0.000    0.000 transforms.py:1137(SineCosineTypeTransform)
        1    0.000    0.000    0.000    0.000 bessel.py:2149(_besseli)
        1    0.000    0.000    0.000    0.000 loss.py:1279(MarginRankingLoss)
        1    0.000    0.000    0.000    0.000 runner.py:14(_WritelnDecorator)
        1    0.000    0.000    0.000    0.000 _hypotests.py:1702(TukeyHSDResult)
        1    0.000    0.000    0.000    0.000 equality.py:209(StrictLessThanPredicate)
        1    0.000    0.000    0.000    0.000 __init__.py:7(is_built)
        1    0.000    0.000    0.000    0.000 split_module.py:11(Partition)
        1    0.000    0.000    0.000    0.000 core.py:943(_CacheType)
        1    0.000    0.000    0.000    0.000 version.py:454(_TrimmedRelease)
        1    0.000    0.000    0.000    0.000 series.py:1608(Parametric2DLineSeries)
        1    0.000    0.000    0.000    0.000 transforms.py:40(IntegralTransformError)
        1    0.000    0.000    0.000    0.000 graphs.py:118(graph)
        1    0.000    0.000    0.000    0.000 core.py:977(_MaskedBinaryOperation)
        1    0.000    0.000    0.000    0.000 _parser.py:50(ParsedRequirement)
        1    0.000    0.000    0.000    0.000 throughput_benchmark.py:61(ThroughputBenchmark)
        2    0.000    0.000    0.000    0.000 {method 'acquire' of '_thread.lock' objects}
        1    0.000    0.000    0.000    0.000 _basinhopping.py:41(BasinHoppingRunner)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:717(PolynomialLR)
        1    0.000    0.000    0.000    0.000 jiterator.py:42(_JittedFunction)
        1    0.000    0.000    0.000    0.000 graph.py:42(_CustomBuiltin)
        1    0.000    0.000    0.000    0.000 sympy_parser.py:91(AppliedFunction)
        1    0.000    0.000    0.000    0.000 _ops.py:115(PyOperator)
        1    0.000    0.000    0.000    0.000 _jit_internal.py:514(FunctionModifiers)
        1    0.000    0.000    0.000    0.000 _multivariate.py:5288(multivariate_hypergeom_frozen)
        1    0.000    0.000    0.000    0.000 _minimize.py:1066(_Remove_From_Func)
        1    0.000    0.000    0.000    0.000 gzip.py:99(prepend)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:869(SupportsBytes)
        1    0.000    0.000    0.000    0.000 _collections.py:5(FreezableDefaultDict)
        1    0.000    0.000    0.000    0.000 configparser.py:168(Error)
        1    0.000    0.000    0.000    0.000 numpy.py:504(<dictcomp>)
        1    0.000    0.000    0.000    0.000 fancysets.py:1493(Complexes)
        1    0.000    0.000    0.000    0.000 _warnings_errors.py:12(ConstantInputWarning)
        1    0.000    0.000    0.000    0.000 request.py:1374(HTTPHandler)
        1    0.000    0.000    0.000    0.000 _differentiable_functions.py:16(_ScalarGradWrapper)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:878(SupportsIndex)
        1    0.000    0.000    0.000    0.000 blocking_input.py:271(BlockingContourLabeler)
        1    0.000    0.000    0.000    0.000 readers.py:15(FileReader)
        1    0.000    0.000    0.000    0.000 discovery.py:179(PEP420PackageFinder)
        3    0.000    0.000    0.000    0.000 core.py:16(exhaust)
        1    0.000    0.000    0.000    0.000 core.py:194(<listcomp>)
        1    0.000    0.000    0.000    0.000 threading.py:279(_is_owned)
        1    0.000    0.000    0.000    0.000 ticker.py:211(TickHelper)
        1    0.000    0.000    0.000    0.000 dviread.py:607(Vf)
        1    0.000    0.000    0.000    0.000 pythonfinitefield.py:9(PythonFiniteField)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:280(PngInfo)
        1    0.000    0.000    0.000    0.000 pathlib.py:49(_Flavour)
        1    0.000    0.000    0.000    0.000 _multivariate.py:5689(random_table_frozen)
        1    0.000    0.000    0.000    0.000 _jit_internal.py:631(_IgnoreContextManager)
        1    0.000    0.000    0.000    0.000 polyoptions.py:611(Strict)
        1    0.000    0.000    0.000    0.000 bessel.py:2180(_besselk)
        1    0.000    0.000    0.000    0.000 radau.py:549(RadauDenseOutput)
        1    0.000    0.000    0.000    0.000 text.py:6(TextBackend)
        1    0.000    0.000    0.000    0.000 linear.py:127(NonDynamicallyQuantizableLinear)
        1    0.000    0.000    0.000    0.000 context.py:203(reducer)
        1    0.000    0.000    0.000    0.000 _package_pickler.py:21(PackagePickler)
        1    0.000    0.000    0.000    0.000 _minimize.py:1050(_Patch_Callback_Equal_Variables)
        1    0.000    0.000    0.000    0.000 _functions.py:85(Scatter)
        1    0.000    0.000    0.000    0.000 server_process_global_profiler.py:16(_server_process_global_profile)
        1    0.000    0.000    0.000    0.000 datetime.py:1219(tzinfo)
        1    0.000    0.000    0.000    0.000 _adapters.py:7(SpecLoaderAdapter)
        1    0.000    0.000    0.000    0.000 util.py:19(LazyEval)
        1    0.000    0.000    0.000    0.000 _monitor.py:15(TMonitor)
        1    0.000    0.000    0.000    0.000 base.py:274(ConstantDenseOutput)
        1    0.000    0.000    0.000    0.000 polyoptions.py:50(BooleanOption)
        1    0.000    0.000    0.000    0.000 transforms.py:331(MellinTransform)
        1    0.000    0.000    0.000    0.000 conv.py:154(_ConvTransposeNd)
        1    0.000    0.000    0.000    0.000 profiler.py:552(emit_itt)
        1    0.000    0.000    0.000    0.000 assume.py:174(PredicateMeta)
        1    0.000    0.000    0.000    0.000 utils.py:138(ObjectWrapper)
        1    0.000    0.000    0.000    0.000 transforms.py:1224(InverseSineTransform)
        1    0.000    0.000    0.000    0.000 kl.py:80(_Match)
        1    0.000    0.000    0.000    0.000 zipfile.py:742(_SharedFile)
        1    0.000    0.000    0.000    0.000 fancysets.py:139(Naturals0)
        1    0.000    0.000    0.000    0.000 orderings.py:137(InverseOrder)
        3    0.000    0.000    0.000    0.000 rcsetup.py:391(validate_aspect)
        1    0.000    0.000    0.000    0.000 __init__.py:1239(<dictcomp>)
        1    0.000    0.000    0.000    0.000 configparser.py:360(Interpolation)
        1    0.000    0.000    0.000    0.000 tensor.py:4666(WildTensor)
        1    0.000    0.000    0.000    0.000 colorbar.py:1636(ColorbarPatch)
        1    0.000    0.000    0.000    0.000 grouping.py:89(UnBatcherIterDataPipe)
        1    0.000    0.000    0.000    0.000 __init__.py:1237(_StderrHandler)
        1    0.000    0.000    0.000    0.000 single.py:2192(NthLinearConstantCoeffVariationOfParameters)
        1    0.000    0.000    0.000    0.000 distributed.py:153(_BufferCommHook)
        1    0.000    0.000    0.000    0.000 transforms.py:964(FourierTypeTransform)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha3_512}
        1    0.000    0.000    0.000    0.000 _hypotests.py:917(BarnardExactResult)
        1    0.000    0.000    0.000    0.000 main.py:882(YAMLContextManager)
        1    0.000    0.000    0.000    0.000 mathtext.py:932(DejaVuSerifFonts)
        1    0.000    0.000    0.000    0.000 facts.py:301(rules_alpha)
        1    0.000    0.000    0.000    0.000 _symbolic_trace.py:48(ProxyableClassMeta)
        1    0.000    0.000    0.000    0.000 loss.py:17(_Loss)
        1    0.000    0.000    0.000    0.000 getopt.py:43(GetoptError)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:308(Address)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:900(ShapeGuardPrinter)
        1    0.000    0.000    0.000    0.000 series.py:1800(SurfaceBaseSeries)
        1    0.000    0.000    0.000    0.000 sparse.py:462(MutableSparseMatrix)
        1    0.000    0.000    0.000    0.000 forward_ad.py:190(_set_fwd_grad_enabled)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:1459(OneCycleLR)
        1    0.000    0.000    0.000    0.000 module.py:27(_IncompatibleKeys)
        1    0.000    0.000    0.000    0.000 _pytree.py:41(NodeDef)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:493(Domain)
        1    0.000    0.000    0.000    0.000 visualization.py:9(VisualizationMethods)
        1    0.000    0.000    0.000    0.000 _nonlin.py:1243(LinearMixing)
        1    0.000    0.000    0.000    0.000 pkgutil.py:194(ImpImporter)
        1    0.000    0.000    0.000    0.000 polyoptions.py:638(Frac)
        1    0.000    0.000    0.000    0.000 graph.py:236(_InsertPoint)
        1    0.000    0.000    0.000    0.000 _convertions.py:1(<module>)
        1    0.000    0.000    0.000    0.000 py3k.py:92(contextlib_nullcontext)
        1    0.000    0.000    0.000    0.000 widgets.py:1209(Cursor)
        1    0.000    0.000    0.000    0.000 more.py:2438(islice_extended)
        1    0.000    0.000    0.000    0.000 queue.py:223(PriorityQueue)
        1    0.000    0.000    0.000    0.000 {method 'getrandbits' of '_random.Random' objects}
        1    0.000    0.000    0.000    0.000 trifinder.py:24(TrapezoidMapTriFinder)
        1    0.000    0.000    0.000    0.000 transforms.py:2654(TransformedPath)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:485(_IntegerInterval)
        1    0.000    0.000    0.000    0.000 arpack.py:908(SpLuInv)
        1    0.000    0.000    0.000    0.000 analyzer.py:1751(PointGroupOperations)
        1    0.000    0.000    0.000    0.000 deprecation.py:101(_DeprecationHelperStr)
        1    0.000    0.000    0.000    0.000 inverselaplace.py:4(InverseLaplaceTransform)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:1740(ParamSpec)
        1    0.000    0.000    0.000    0.000 widgets.py:1303(MultiCursor)
        2    0.000    0.000    0.000    0.000 sysconfig.py:279(_get_preferred_schemes)
        1    0.000    0.000    0.000    0.000 pyfunctorch.py:147(JvpInterpreter)
        1    0.000    0.000    0.000    0.000 memory.py:673(_CUDAAllocator)
        1    0.000    0.000    0.000    0.000 dates.py:846(AutoDateFormatter)
        1    0.000    0.000    0.000    0.000 base.py:233(DenseOutput)
        1    0.000    0.000    0.000    0.000 string.py:54(Stringify)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1304(DatetimeFormat)
        4    0.000    0.000    0.000    0.000 _inspect.py:142(<lambda>)
        1    0.000    0.000    0.000    0.000 _quadpack_py.py:1213(_RangeFunc)
        1    0.000    0.000    0.000    0.000 arrayop.py:458(Flatten)
        1    0.000    0.000    0.000    0.000 conv.py:1402(LazyConvTranspose1d)
        1    0.000    0.000    0.000    0.000 _spdx.py:6(SPDXLicense)
        4    0.000    0.000    0.000    0.000 _multiufuncs.py:69(_override_ufunc_default_kwargs)
        1    0.000    0.000    0.000    0.000 scale.py:126(FuncTransform)
        1    0.000    0.000    0.000    0.000 activation.py:438(Hardswish)
        1    0.000    0.000    0.000    0.000 fake_tensor.py:49(IncrementRecursionCount)
        1    0.000    0.000    0.000    0.000 activation.py:402(Mish)
        1    0.000    0.000    0.000    0.000 _bary_rational.py:599(FloaterHormannInterpolator)
        1    0.000    0.000    0.000    0.000 conv_fused.py:495(ConvBn2d)
        1    0.000    0.000    0.000    0.000 _vertex.py:205(VertexCube)
        1    0.000    0.000    0.000    0.000 _nonlin.py:1289(ExcitingMixing)
        1    0.000    0.000    0.000    0.000 reinplace.py:53(_FunctionalizationMetadataProp)
        1    0.000    0.000    0.000    0.000 single.py:572(FirstLinear)
        2    0.000    0.000    0.000    0.000 __init__.py:109(<genexpr>)
        1    0.000    0.000    0.000    0.000 transforms.py:865(SoftmaxTransform)
        1    0.000    0.000    0.000    0.000 pathlib.py:792(is_absolute)
        1    0.000    0.000    0.000    0.000 geo.py:229(_GeoTransform)
        1    0.000    0.000    0.000    0.000 modules.py:504(FreeModuleQuotientRing)
        1    0.000    0.000    0.000    0.000 arrayprint.py:905(FloatingFormat)
        1    0.000    0.000    0.000    0.000 transforms.py:1165(SineTransform)
        1    0.000    0.000    0.000    0.000 rk.py:552(RkDenseOutput)
        1    0.000    0.000    0.000    0.000 sets.py:2759(SetKind)
        1    0.000    0.000    0.000    0.000 activation.py:849(Softshrink)
        1    0.000    0.000    0.000    0.000 index_tricks.py:303(__init__)
        1    0.000    0.000    0.000    0.000 {built-in method _thread.get_native_id}
        1    0.000    0.000    0.000    0.000 __init__.py:711(BufferingFormatter)
        1    0.000    0.000    0.000    0.000 {method 'copy' of 'set' objects}
        1    0.000    0.000    0.000    0.000 _optimize.py:3934(_Brute_Wrapper)
        1    0.000    0.000    0.000    0.000 hyper.py:29(TupleArg)
        4    0.000    0.000    0.000    0.000 function_base.py:1800(_trim_zeros)
        1    0.000    0.000    0.000    0.000 events.py:76(CollectionStartEvent)
        1    0.000    0.000    0.000    0.000 _directory_reader.py:9(_HasStorage)
        1    0.000    0.000    0.000    0.000 report.py:28(BasicReport)
        1    0.000    0.000    0.000    0.000 codeprinter.py:18(requires)
        1    0.000    0.000    0.000    0.000 stubs.py:4(QuantStub)
        1    0.000    0.000    0.000    0.000 _linalg.py:33(EighResult)
        1    0.000    0.000    0.000    0.000 __init__.py:9(verbose)
        1    0.000    0.000    0.000    0.000 __init__.py:307(_LowLevelFile)
        1    0.000    0.000    0.000    0.000 _stats_py.py:11039(_SimpleChi2)
        1    0.000    0.000    0.000    0.000 constraint_registry.py:79(ConstraintRegistry)
        1    0.000    0.000    0.000    0.000 __init__.py:86(_StrongRef)
        1    0.000    0.000    0.000    0.000 csv.py:130(DictWriter)
        1    0.000    0.000    0.000    0.000 bessel.py:901(SphericalBesselBase)
        2    0.000    0.000    0.000    0.000 {built-in method maketrans}
        1    0.000    0.000    0.000    0.000 _tokenizer.py:18(ParserSyntaxError)
        1    0.000    0.000    0.000    0.000 _util.py:559(_FunctionWrapper)
        2    0.000    0.000    0.000    0.000 rl.py:10(rm_id)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:598(LocalPart)
        1    0.000    0.000    0.000    0.000 graph_manipulation.py:43(size_bytes)
        1    0.000    0.000    0.000    0.000 facts.py:286(__init__)
        1    0.000    0.000    0.000    0.000 linear.py:5(Linear)
        1    0.000    0.000    0.000    0.000 __init__.py:21(cuFFTPlanCacheAttrContextProp)
        1    0.000    0.000    0.000    0.000 polar.py:202(_AxisWrapper)
        2    0.000    0.000    0.000    0.000 annotations.py:30(__init__)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_sha3_384}
        1    0.000    0.000    0.000    0.000 _cubic.py:72(CubicHermiteSpline)
        1    0.000    0.000    0.000    0.000 dbapi2.py:49(<listcomp>)
        6    0.000    0.000    0.000    0.000 feedparser.py:125(__iter__)
        1    0.000    0.000    0.000    0.000 package_exporter.py:128(PackagingError)
        1    0.000    0.000    0.000    0.000 loss.py:786(MultiLabelMarginLoss)
        1    0.000    0.000    0.000    0.000 widgets.py:948(RadioButtons)
        1    0.000    0.000    0.000    0.000 pickle.py:263(_Unframer)
        1    0.000    0.000    0.000    0.000 _upfirdn.py:73(_UpFIRDn)
        1    0.000    0.000    0.000    0.000 _util.py:1064(__getattr__)
        2    0.000    0.000    0.000    0.000 __init__.py:8(__init__)
        1    0.000    0.000    0.000    0.000 _manylinux.py:80(_GLibCVersion)
        1    0.000    0.000    0.000    0.000 series.py:28(IntervalMathPrinter)
        1    0.000    0.000    0.000    0.000 gmpyfinitefield.py:9(GMPYFiniteField)
        1    0.000    0.000    0.000    0.000 collections.py:1664(CircleCollection)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:657(Parameter)
        1    0.000    0.000    0.000    0.000 ordinals.py:261(OrdinalOmega)
        1    0.000    0.000    0.000    0.000 _base.py:111(_AllCompletedWaiter)
        1    0.000    0.000    0.000    0.000 parameters.py:7(_global_parameters)
        1    0.000    0.000    0.000    0.000 widgets.py:2368(LassoSelector)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:1274(_TypedDictSpecialForm)
        1    0.000    0.000    0.000    0.000 abc.py:276(SourceLoader)
        1    0.000    0.000    0.000    0.000 single.py:1560(HomogeneousCoeffSubsIndepDivDep)
        1    0.000    0.000    0.000    0.000 pooling.py:1121(_AdaptiveAvgPoolNd)
        1    0.000    0.000    0.000    0.000 variable.py:13(Variable)
        1    0.000    0.000    0.000    0.000 core.py:5097(_MultipleMatch)
        1    0.000    0.000    0.000    0.000 arpack.py:389(_SymmetricArpackParams)
        1    0.000    0.000    0.000    0.000 _hypotests.py:1188(BoschlooExactResult)
        1    0.000    0.000    0.000    0.000 _interface.py:639(_AdjointLinearOperator)
        1    0.000    0.000    0.000    0.000 anchor.py:10(Anchor)
        1    0.000    0.000    0.000    0.000 inputs.py:1919(Orbital)
        1    0.000    0.000    0.000    0.000 _testutils.py:56(PytestTester)
        1    0.000    0.000    0.000    0.000 tz.py:1036(tzstr)
        1    0.000    0.000    0.000    0.000 _tokenizer.py:11(Token)
        1    0.000    0.000    0.000    0.000 arpack.py:274(ArpackError)
        2    0.000    0.000    0.000    0.000 ctx_mp_python.py:620(<lambda>)
        1    0.000    0.000    0.000    0.000 index_tricks.py:569(ndenumerate)
        1    0.000    0.000    0.000    0.000 sparse_ndim_array.py:104(ImmutableSparseNDimArray)
        1    0.000    0.000    0.000    0.000 calendar.py:573(LocaleTextCalendar)
        1    0.000    0.000    0.000    0.000 __init__.py:790(Filterer)
        1    0.000    0.000    0.000    0.000 autograd_function.py:251(VmapInfo)
        1    0.000    0.000    0.000    0.000 numpy.py:346(<dictcomp>)
        1    0.000    0.000    0.000    0.000 _aliases.py:194(UniqueInverseResult)
        1    0.000    0.000    0.000    0.000 extension.py:23(Extension)
        2    0.000    0.000    0.000    0.000 __init__.py:24(__init__)
        1    0.000    0.000    0.000    0.000 pathlib.py:331(_PreciseSelector)
        1    0.000    0.000    0.000    0.000 discovery.py:68(_Filter)
        1    0.000    0.000    0.000    0.000 serialization.py:286(_open_zipfile_writer_file)
        1    0.000    0.000    0.000    0.000 pydoc.py:1979(__init__)
        1    0.000    0.000    0.000    0.000 patches.py:2001(Square)
        1    0.000    0.000    0.000    0.000 docinfo.py:95(Tag)
        1    0.000    0.000    0.000    0.000 dataloader.py:83(_InfiniteConstantSampler)
        4    0.000    0.000    0.000    0.000 fromnumeric.py:2687(_max_dispatcher)
        1    0.000    0.000    0.000    0.000 parse.py:795(_Quoter)
        4    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:797(is_package)
        1    0.000    0.000    0.000    0.000 backend_tools.py:366(RubberbandBase)
        1    0.000    0.000    0.000    0.000 _hessian_update_strategy.py:425(SR1)
        1    0.000    0.000    0.000    0.000 response.py:37(addclosehook)
        1    0.000    0.000    0.000    0.000 __init__.py:13(verbose)
        1    0.000    0.000    0.000    0.000 gridspec.py:545(GridSpecFromSubplotSpec)
        1    0.000    0.000    0.000    0.000 _ltisys.py:737(TransferFunctionContinuous)
        1    0.000    0.000    0.000    0.000 _zeros_py.py:35(RootResults)
        1    0.000    0.000    0.000    0.000 comments.py:50(IDX)
        1    0.000    0.000    0.000    0.000 __init__.py:279(CudaError)
        1    0.000    0.000    0.000    0.000 colors.py:1418(BoundaryNorm)
        1    0.000    0.000    0.000    0.000 widgets.py:517(CheckButtons)
        1    0.000    0.000    0.000    0.000 storage.py:972(_LegacyStorageMeta)
        5    0.000    0.000    0.000    0.000 polyhedron.py:473(faces)
        1    0.000    0.000    0.000    0.000 _factories.py:8(_TzSingleton)
        1    0.000    0.000    0.000    0.000 core.py:2679(CloseMatch)
        1    0.000    0.000    0.000    0.000 core.py:5(Registry)
        1    0.000    0.000    0.000    0.000 tarfile.py:570(_StreamProxy)
        4    0.000    0.000    0.000    0.000 stride_tricks.py:363(_broadcast_to_dispatcher)
        1    0.000    0.000    0.000    0.000 csv.py:54(excel)
        1    0.000    0.000    0.000    0.000 transports.py:46(ReadTransport)
        1    0.000    0.000    0.000    0.000 modules.py:1746(ModuleHomomorphism)
        1    0.000    0.000    0.000    0.000 __init__.py:29(context)
        3    0.000    0.000    0.000    0.000 {built-in method sys.audit}
        1    0.000    0.000    0.000    0.000 GimpGradientFile.py:67(GradientFile)
        1    0.000    0.000    0.000    0.000 bessel.py:800(hankel1)
        1    0.000    0.000    0.000    0.000 Image.py:3228(SupportsArrayInterface)
        1    0.000    0.000    0.000    0.000 _static.py:9(Static)
        1    0.000    0.000    0.000    0.000 mock.py:341(_CallList)
        1    0.000    0.000    0.000    0.000 __init__.py:1152(FileHandler)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_shake_256}
        1    0.000    0.000    0.000    0.000 colorbar.py:289(_ColorbarLogLocator)
        1    0.000    0.000    0.000    0.000 argparse.py:878(BooleanOptionalAction)
        1    0.000    0.000    0.000    0.000 fake_tensor.py:69(DataDependentOutputException)
        1    0.000    0.000    0.000    0.000 proxy.py:304(GraphAppendingTracer)
        1    0.000    0.000    0.000    0.000 _fitpack_repro.py:416(F)
        1    0.000    0.000    0.000    0.000 zipfile.py:618(LZMACompressor)
        1    0.000    0.000    0.000    0.000 _interface.py:832(_AdjointMatrixOperator)
        2    0.000    0.000    0.000    0.000 constraints.py:290(__init__)
        1    0.000    0.000    0.000    0.000 six.py:129(_LazyModule)
        1    0.000    0.000    0.000    0.000 widgets.py:2298(EllipseSelector)
        1    0.000    0.000    0.000    0.000 __init__.py:576(_StreamProxy)
        1    0.000    0.000    0.000    0.000 _array_api.py:585(<setcomp>)
        1    0.000    0.000    0.000    0.000 _base.py:59(_Waiter)
        1    0.000    0.000    0.000    0.000 core.py:2403(Token)
        1    0.000    0.000    0.000    0.000 _differentialevolution.py:1851(_ConstraintWrapper)
        1    0.000    0.000    0.000    0.000 quadrature.py:459(QuadratureMethods)
        1    0.000    0.000    0.000    0.000 _guards.py:74(GuardBuilderBase)
        1    0.000    0.000    0.000    0.000 utils.py:102(FormatReplace)
        1    0.000    0.000    0.000    0.000 threading.py:410(Semaphore)
        1    0.000    0.000    0.000    0.000 core.py:5054(NotAny)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:182(WhiteSpaceTokenList)
        1    0.000    0.000    0.000    0.000 core.py:2483(Empty)
        1    0.000    0.000    0.000    0.000 _nonlin.py:382(Jacobian)
        1    0.000    0.000    0.000    0.000 case.py:1446(_SubTest)
        1    0.000    0.000    0.000    0.000 str.py:998(StrReprPrinter)
        1    0.000    0.000    0.000    0.000 transforms.py:611(SoftplusTransform)
        1    0.000    0.000    0.000    0.000 __init__.py:28(_QEngineProp)
        1    0.000    0.000    0.000    0.000 {built-in method _hashlib.openssl_shake_128}
        1    0.000    0.000    0.000    0.000 _stats_py.py:11078(_SimpleStudentT)
        1    0.000    0.000    0.000    0.000 rrule.py:66(weekday)
        1    0.000    0.000    0.000    0.000 _multivariate.py:7252(normal_inverse_gamma_frozen)
        3    0.000    0.000    0.000    0.000 mock.py:283(__init__)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:230(__init__)
        1    0.000    0.000    0.000    0.000 dev.py:125(requires)
        1    0.000    0.000    0.000    0.000 _recursive.py:123(SourceContext)
        1    0.000    0.000    0.000    0.000 _differentiable_functions.py:760(LinearVectorFunction)
        1    0.000    0.000    0.000    0.000 exceptions.py:29(IncompleteReadError)
        1    0.000    0.000    0.000    0.000 _dual_annealing.py:384(LocalSearchWrapper)
        1    0.000    0.000    0.000    0.000 locks.py:331(Semaphore)
        1    0.000    0.000    0.000    0.000 polyutils.py:444(PicklableWithSlots)
        1    0.000    0.000    0.000    0.000 graph.py:458(_CloneArgBeforeMutateMode)
        1    0.000    0.000    0.000    0.000 TiffTags.py:24(_TagInfo)
        2    0.000    0.000    0.000    0.000 _onenormest.py:121(_blocked_elementwise)
        1    0.000    0.000    0.000    0.000 polyerrors.py:13(ExactQuotientFailed)
        1    0.000    0.000    0.000    0.000 zipfile.py:1995(PyZipFile)
        1    0.000    0.000    0.000    0.000 bessel.py:846(hankel2)
        4    0.000    0.000    0.000    0.000 shape_base.py:19(_atleast_1d_dispatcher)
        1    0.000    0.000    0.000    0.000 _compression.py:63(seekable)
        2    0.000    0.000    0.000    0.000 libmpf.py:692(mpf_sign)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:2500(TypeVarTuple)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:364(Group)
        1    0.000    0.000    0.000    0.000 ticker.py:367(FuncFormatter)
        1    0.000    0.000    0.000    0.000 rcsetup.py:50(ValidateInStrings)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:1328(_DerivedBivariateSpline)
        1    0.000    0.000    0.000    0.000 expr_with_intlimits.py:5(ReorderError)
        4    0.000    0.000    0.000    0.000 {method 'count' of 'list' objects}
        1    0.000    0.000    0.000    0.000 recipes.py:336(UnequalIterablesError)
        1    0.000    0.000    0.000    0.000 mathtext.py:888(DejaVuFonts)
        1    0.000    0.000    0.000    0.000 kind.py:84(_UndefinedKind)
        2    0.000    0.000    0.000    0.000 __init__.py:983(setFormatter)
        1    0.000    0.000    0.000    0.000 core.py:2627(CaselessLiteral)
        6    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:3305(_moment_standardized_formula)
        1    0.000    0.000    0.000    0.000 _mgc.py:17(_ParallelP)
        1    0.000    0.000    0.000    0.000 core.py:6844(_frommethod)
        1    0.000    0.000    0.000    0.000 index_tricks.py:618(ndindex)
        1    0.000    0.000    0.000    0.000 more.py:2688(SequenceView)
        1    0.000    0.000    0.000    0.000 ndim_array.py:591(ImmutableNDimArray)
        1    0.000    0.000    0.000    0.000 loss.py:931(HuberLoss)
        1    0.000    0.000    0.000    0.000 _nonlin.py:1352(KrylovJacobian)
        1    0.000    0.000    0.000    0.000 containers.py:379(TupleKind)
        1    0.000    0.000    0.000    0.000 __init__.py:156(py_object)
        1    0.000    0.000    0.000    0.000 colors.py:1367(PowerNorm)
        2    0.000    0.000    0.000    0.000 core.py:3433(shape)
        1    0.000    0.000    0.000    0.000 offsetbox.py:577(PaddedBox)
        1    0.000    0.000    0.000    0.000 __init__.py:46(__init__)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:1153(_Frame)
        1    0.000    0.000    0.000    0.000 inference.py:273(PropKB)
        1    0.000    0.000    0.000    0.000 _multivariate.py:6860(vonmises_fisher_frozen)
        1    0.000    0.000    0.000    0.000 sympy_parser.py:1242(_T)
        1    0.000    0.000    0.000    0.000 art3d.py:441(Path3DCollection)
        1    0.000    0.000    0.000    0.000 symbolic_opset13.py:410(_reduce_op_symbolic)
        1    0.000    0.000    0.000    0.000 csv.py:69(unix_dialect)
        1    0.000    0.000    0.000    0.000 _mio4.py:89(VarHeader4)
        1    0.000    0.000    0.000    0.000 logic.py:399(Not)
        1    0.000    0.000    0.000    0.000 _numdiff.py:863(_Fun_Wrapper)
        1    0.000    0.000    0.000    0.000 pydoc.py:389(ErrorDuringImport)
        1    0.000    0.000    0.000    0.000 dataset.py:36(Dataset)
        1    0.000    0.000    0.000    0.000 c10d_error_logger.py:30(_get_logging_handler)
        1    0.000    0.000    0.000    0.000 __init__.py:10(NBitBase)
        1    0.000    0.000    0.000    0.000 cm.py:78(__init__)
        1    0.000    0.000    0.000    0.000 _multivariate.py:6223(dirichlet_multinomial_frozen)
        3    0.000    0.000    0.000    0.000 arrayprint.py:898(_none_or_positive_arg)
        1    0.000    0.000    0.000    0.000 _dual_annealing.py:129(EnergyState)
        1    0.000    0.000    0.000    0.000 mutable_ndim_array.py:4(MutableNDimArray)
        1    0.000    0.000    0.000    0.000 legend_handler.py:338(HandlerRegularPolyCollection)
        1    0.000    0.000    0.000    0.000 outputs.py:5916(UnconvergedVASPWarning)
        1    0.000    0.000    0.000    0.000 overrides.py:1872(enable_reentrant_dispatch)
        4    0.000    0.000    0.000    0.000 stride_tricks.py:345(<genexpr>)
        1    0.000    0.000    0.000    0.000 _basic.py:2819(_range_prod)
        1    0.000    0.000    0.000    0.000 polyutils.py:516(IntegerPowerable)
        1    0.000    0.000    0.000    0.000 loss.py:850(SmoothL1Loss)
        1    0.000    0.000    0.000    0.000 offsetbox.py:417(VPacker)
        1    0.000    0.000    0.000    0.000 backend_bases.py:3563(Show)
        1    0.000    0.000    0.000    0.000 core.py:3639(GoToColumn)
        1    0.000    0.000    0.000    0.000 transforms.py:670(AbsTransform)
        1    0.000    0.000    0.000    0.000 _ops.py:594(_Ops)
        1    0.000    0.000    0.000    0.000 Manager.py:1(manager)
        1    0.000    0.000    0.000    0.000 hamiltonian.py:3(Hamiltonian)
        1    0.000    0.000    0.000    0.000 polar.py:515(RadialTick)
        1    0.000    0.000    0.000    0.000 _orthogonal.py:115(orthopoly1d)
        1    0.000    0.000    0.000    0.000 request.py:605(BaseHandler)
        1    0.000    0.000    0.000    0.000 scale.py:162(FuncScale)
        1    0.000    0.000    0.000    0.000 multidimensional.py:56(vectorize)
        1    0.000    0.000    0.000    0.000 parameters.py:70(evaluate)
        1    0.000    0.000    0.000    0.000 _miobase.py:337(MatVarReader)
        1    0.000    0.000    0.000    0.000 design_patterns.py:115(NullFile)
        1    0.000    0.000    0.000    0.000 combining.py:62(ForkerIterDataPipe)
        1    0.000    0.000    0.000    0.000 case.py:282(_AssertWarnsContext)
        1    0.000    0.000    0.000    0.000 request.py:791(ProxyHandler)
        1    0.000    0.000    0.000    0.000 zipfile.py:2271(FastLookup)
        1    0.000    0.000    0.000    0.000 threading.py:1001(_set_ident)
        1    0.000    0.000    0.000    0.000 transforms.py:1284(CosineTransform)
        1    0.000    0.000    0.000    0.000 animation.py:637(FFMpegFileWriter)
        1    0.000    0.000    0.000    0.000 _recursive.py:358(__init__)
        1    0.000    0.000    0.000    0.000 backend_bases.py:3571(ShowBase)
        1    0.000    0.000    0.000    0.000 __init__.py:115(<dictcomp>)
        1    0.000    0.000    0.000    0.000 conv.py:342(ConvTranspose3d)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:608(SequentialLR)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:482(InvalidMailbox)
        1    0.000    0.000    0.000    0.000 bdf.py:456(BdfDenseOutput)
        1    0.000    0.000    0.000    0.000 single.py:839(Factorable)
        1    0.000    0.000    0.000    0.000 rrule.py:1315(_genitem)
        1    0.000    0.000    0.000    0.000 Image.py:3727(register_save)
        1    0.000    0.000    0.000    0.000 autograd_function.py:29(CustomFunctionPyOperator)
        1    0.000    0.000    0.000    0.000 index_tricks.py:109(nd_grid)
        1    0.000    0.000    0.000    0.000 cyaml.py:70(CBaseDumper)
        1    0.000    0.000    0.000    0.000 polyoptions.py:728(Method)
        1    0.000    0.000    0.000    0.000 scale.py:372(SymmetricalLogTransform)
        1    0.000    0.000    0.000    0.000 animation.py:1384(TimedAnimation)
        1    0.000    0.000    0.000    0.000 pooling.py:171(MaxPool3d)
        1    0.000    0.000    0.000    0.000 grad_mode.py:226(set_multithreading_enabled)
        1    0.000    0.000    0.000    0.000 permutations.py:3067(AppliedPermutation)
        1    0.000    0.000    0.000    0.000 _morestats.py:4287(DirectionalStats)
        1    0.000    0.000    0.000    0.000 _interface.py:781(_PowerLinearOperator)
        1    0.000    0.000    0.000    0.000 _quad_vec.py:29(SemiInfiniteFunc)
        1    0.000    0.000    0.000    0.000 _base.py:96(_FirstCompletedWaiter)
        3    0.000    0.000    0.000    0.000 symbolic_opset9.py:2106(wrap_logical_op_with_cast_to)
        1    0.000    0.000    0.000    0.000 _policybase.py:41(__init__)
        1    0.000    0.000    0.000    0.000 core.py:2654(CaselessKeyword)
        1    0.000    0.000    0.000    0.000 error.py:52(StringMark)
        1    0.000    0.000    0.000    0.000 _classes.py:6(_ClassNamespace)
        1    0.000    0.000    0.000    0.000 mock.py:2388(_ANY)
        1    0.000    0.000    0.000    0.000 structures.py:7(DataChunkDF)
        1    0.000    0.000    0.000    0.000 arpack.py:957(IterInv)
        1    0.000    0.000    0.000    0.000 core.py:903(_MaskedUnaryOperation)
        1    0.000    0.000    0.000    0.000 kind.py:36(KindMeta)
        1    0.000    0.000    0.000    0.000 argparse.py:783(Action)
        1    0.000    0.000    0.000    0.000 py39.py:28(UnequalIterablesError)
        1    0.000    0.000    0.000    0.000 context.py:330(on_interrupt)
        1    0.000    0.000    0.000    0.000 _linalg.py:41(SlogdetResult)
        1    0.000    0.000    0.000    0.000 extrapolation.py:728(cohen_alt_class)
        1    0.000    0.000    0.000    0.000 qconfig.py:79(QConfig)
        1    0.000    0.000    0.000    0.000 {built-in method torch._C._cuda_getCompiledVersion}
        1    0.000    0.000    0.000    0.000 grad_mode.py:61(enable_grad)
        1    0.000    0.000    0.000    0.000 PaletteFile.py:22(PaletteFile)
        1    0.000    0.000    0.000    0.000 qs.py:9(SievePolynomial)
        1    0.000    0.000    0.000    0.000 conv_fused.py:627(ConvBn3d)
        1    0.000    0.000    0.000    0.000 ticker.py:1816(IndexLocator)
        1    0.000    0.000    0.000    0.000 common.py:11(HolderModule)
        3    0.000    0.000    0.000    0.000 orderings.py:156(__init__)
        1    0.000    0.000    0.000    0.000 mul.py:25(NC_Marker)
        2    0.000    0.000    0.000    0.000 rootoftools.py:83(__init__)
        1    0.000    0.000    0.000    0.000 frontend.py:101(FrontendError)
        1    0.000    0.000    0.000    0.000 parameter.py:165(UninitializedParameter)
        1    0.000    0.000    0.000    0.000 _linalg.py:37(QRResult)
        1    0.000    0.000    0.000    0.000 fake_tensor.py:64(DynamicOutputShapeException)
        1    0.000    0.000    0.000    0.000 facts.py:214(rules_2prereq)
        1    0.000    0.000    0.000    0.000 exceptions.py:98(AxisError)
        1    0.000    0.000    0.000    0.000 _memory_viz.py:112(Bytes)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1677(poisson_binomial_frozen)
        1    0.000    0.000    0.000    0.000 activation.py:274(Sigmoid)
        1    0.000    0.000    0.000    0.000 geo.py:17(ThetaFormatter)
        1    0.000    0.000    0.000    0.000 argparse.py:1638(_ArgumentGroup)
        1    0.000    0.000    0.000    0.000 Orbit_spd_manager.py:11(orbit_spd_manager)
        1    0.000    0.000    0.000    0.000 parse.py:182(_NetlocResultMixinStr)
        1    0.000    0.000    0.000    0.000 _typing.py:118(DTypesSigned)
        4    0.000    0.000    0.000    0.000 _pep440.py:426(_parse_local_version)
        1    0.000    0.000    0.000    0.000 series.py:1755(Parametric3DLineSeries)
        1    0.000    0.000    0.000    0.000 errors.py:45(UnsupportedOperatorError)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:424(_moment_raw_formula)
        1    0.000    0.000    0.000    0.000 Lattice.py:7(lattice)
        1    0.000    0.000    0.000    0.000 dotproduct.py:6(DotProduct)
        1    0.000    0.000    0.000    0.000 _util.py:571(_ScalarFunctionWrapper)
        1    0.000    0.000    0.000    0.000 protocols.py:66(Protocol)
        2    0.000    0.000    0.000    0.000 calendar.py:76(__init__)
        1    0.000    0.000    0.000    0.000 _animation_data.py:1(<module>)
        1    0.000    0.000    0.000    0.000 facts.py:571(FactKB)
        1    0.000    0.000    0.000    0.000 mathtext.py:1437(Hbox)
        1    0.000    0.000    0.000    0.000 core.py:3782(WordStart)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:69(SymDispatchMode)
        1    0.000    0.000    0.000    0.000 parameter.py:6(_ParameterMeta)
        1    0.000    0.000    0.000    0.000 _nonlin.py:1019(Anderson)
        2    0.000    0.000    0.000    0.000 gzip.py:323(closed)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1374(MouseEvent)
        1    0.000    0.000    0.000    0.000 doccer.py:23(Decorator)
        1    0.000    0.000    0.000    0.000 ticker.py:2964(OldAutoLocator)
        1    0.000    0.000    0.000    0.000 constraints.py:245(_IntegerInterval)
        1    0.000    0.000    0.000    0.000 backend_tools.py:487(AxisScaleBase)
        1    0.000    0.000    0.000    0.000 request.py:1474(FileHandler)
        1    0.000    0.000    0.000    0.000 ticker.py:2041(_Edge_integer)
        1    0.000    0.000    0.000    0.000 _multivariate.py:4127(unitary_group_gen)
        1    0.000    0.000    0.000    0.000 _typing.py:126(DTypesUnsigned)
        1    0.000    0.000    0.000    0.000 transforms.py:1343(InverseCosineTransform)
        1    0.000    0.000    0.000    0.000 _pytesttester.py:46(PytestTester)
        1    0.000    0.000    0.000    0.000 constraints.py:409(_Multinomial)
        1    0.000    0.000    0.000    0.000 {built-in method posix.cpu_count}
        1    0.000    0.000    0.000    0.000 kind.py:106(_NumberKind)
        1    0.000    0.000    0.000    0.000 __init__.py:413(SeparatedValues)
        1    0.000    0.000    0.000    0.000 _covariance.py:503(CovViaDiagonal)
        1    0.000    0.000    0.000    0.000 context.py:233(__init__)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:1336(CosineAnnealingWarmRestarts)
        1    0.000    0.000    0.000    0.000 diophantine.py:224(Univariate)
        1    0.000    0.000    0.000    0.000 patches.py:2025(Circle)
        1    0.000    0.000    0.000    0.000 __init__.py:270(TarError)
        1    0.000    0.000    0.000    0.000 _typing.py:63(NestedSequence)
        1    0.000    0.000    0.000    0.000 splitter_base.py:186(Subgraph)
        1    0.000    0.000    0.000    0.000 polyoptions.py:701(Series)
        1    0.000    0.000    0.000    0.000 _ops.py:524(_OpNamespace)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:809(FormulaCollection)
        1    0.000    0.000    0.000    0.000 forward_ad.py:145(dual_level)
        1    0.000    0.000    0.000    0.000 decoder.py:20(JSONDecodeError)
        1    0.000    0.000    0.000    0.000 collections.py:1296(StarPolygonCollection)
        1    0.000    0.000    0.000    0.000 scale.py:246(InvertedLogTransform)
        1    0.000    0.000    0.000    0.000 fused.py:13(ConvReLU1d)
        1    0.000    0.000    0.000    0.000 threading.py:498(BoundedSemaphore)
        1    0.000    0.000    0.000    0.000 util.py:127(LRUMemo)
        1    0.000    0.000    0.000    0.000 _aliases.py:189(UniqueCountsResult)
        1    0.000    0.000    0.000    0.000 modules.py:1889(EndomorphismRing)
        1    0.000    0.000    0.000    0.000 sympy_parser.py:364(split_symbols_custom)
        1    0.000    0.000    0.000    0.000 dataframes.py:241(CaptureVariable)
        1    0.000    0.000    0.000    0.000 pooling.py:488(_AvgPoolNd)
        1    0.000    0.000    0.000    0.000 __init__.py:1786(RootLogger)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:1330(P2POp)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:1129(_idat)
        1    0.000    0.000    0.000    0.000 mathtext.py:1309(STIXFontConstants)
        1    0.000    0.000    0.000    0.000 _infra.py:302(Invocation)
        1    0.000    0.000    0.000    0.000 events.py:659(_Local)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1118(MeijerShiftA)
        1    0.000    0.000    0.000    0.000 six.py:91(_LazyDescr)
        1    0.000    0.000    0.000    0.000 six.py:178(__init__)
        1    0.000    0.000    0.000    0.000 decorator.py:101(no_attrs_in_subclass)
        1    0.000    0.000    0.000    0.000 profiler_util.py:534(FunctionEventAvg)
        1    0.000    0.000    0.000    0.000 _special_sparse_arrays.py:836(MikotaPair)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1278(_TimelikeFormat)
        1    0.000    0.000    0.000    0.000 core.py:3722(LineEnd)
        1    0.000    0.000    0.000    0.000 spectral_norm.py:159(SpectralNormLoadStateDictPreHook)
        1    0.000    0.000    0.000    0.000 mathtext.py:349(MathtextBackendCairo)
        2    0.000    0.000    0.000    0.000 {built-in method torch._C._cuda_getArchFlags}
        1    0.000    0.000    0.000    0.000 patches.py:2252(Sawtooth)
        1    0.000    0.000    0.000    0.000 logic.py:365(And)
        1    0.000    0.000    0.000    0.000 ssl.py:170(_TLSContentType)
        1    0.000    0.000    0.000    0.000 threading.py:1370(Timer)
        3    0.000    0.000    0.000    0.000 core.py:867(__init__)
        1    0.000    0.000    0.000    0.000 _vertex.py:222(VertexCacheIndex)
        1    0.000    0.000    0.000    0.000 single.py:732(Bernoulli)
        1    0.000    0.000    0.000    0.000 art3d.py:324(PathPatch3D)
        1    0.000    0.000    0.000    0.000 _warnings_errors.py:4(DegenerateDataWarning)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:333(MailboxList)
        1    0.000    0.000    0.000    0.000 _ndgriddata.py:20(NearestNDInterpolator)
        1    0.000    0.000    0.000    0.000 conv.py:281(ConvTranspose2d)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:353(StepLR)
        1    0.000    0.000    0.000    0.000 loss.py:991(SoftMarginLoss)
        1    0.000    0.000    0.000    0.000 locks.py:421(BoundedSemaphore)
        1    0.000    0.000    0.000    0.000 container.py:31(Container)
        1    0.000    0.000    0.000    0.000 PngImagePlugin.py:376(_RewindState)
        1    0.000    0.000    0.000    0.000 blas.py:250(<dictcomp>)
        1    0.000    0.000    0.000    0.000 parser.py:79(BytesParser)
        1    0.000    0.000    0.000    0.000 python.py:67(Lit)
        1    0.000    0.000    0.000    0.000 inverselaplace.py:220(Stehfest)
        1    0.000    0.000    0.000    0.000 stubs.py:21(DeQuantStub)
        1    0.000    0.000    0.000    0.000 parse.py:212(_NetlocResultMixinBytes)
        1    0.000    0.000    0.000    0.000 axis.py:596(_LazyTickList)
        1    0.000    0.000    0.000    0.000 transforms.py:986(FourierTransform)
        1    0.000    0.000    0.000    0.000 _sources.py:86(SourceContext)
        1    0.000    0.000    0.000    0.000 core.py:5206(ZeroOrMore)
        4    0.000    0.000    0.000    0.000 core.py:6052(postParse)
        1    0.000    0.000    0.000    0.000 locks.py:13(_ContextManagerMixin)
        1    0.000    0.000    0.000    0.000 graph_module.py:28(__init__)
        1    0.000    0.000    0.000    0.000 _linalg.py:45(SVDResult)
        1    0.000    0.000    0.000    0.000 _exporter_states.py:9(ExportTypes)
        2    0.000    0.000    0.000    0.000 index_tricks.py:144(__init__)
        1    0.000    0.000    0.000    0.000 single.py:2842(LieGroup)
        1    0.000    0.000    0.000    0.000 pyfunctorch.py:176(FunctionalizeInterpreter)
        1    0.000    0.000    0.000    0.000 protocols.py:177(SubprocessProtocol)
        1    0.000    0.000    0.000    0.000 function.py:867(UndefSageHelper)
        1    0.000    0.000    0.000    0.000 streamreader.py:8(StreamReaderIterDataPipe)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:1088(_DOF_estimator_geom)
        1    0.000    0.000    0.000    0.000 polyoptions.py:664(Include)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:443(_RealInterval)
        1    0.000    0.000    0.000    0.000 __init__.py:26(ContextProp)
        1    0.000    0.000    0.000    0.000 {built-in method numpy._set_promotion_state}
        1    0.000    0.000    0.000    0.000 _vertex.py:165(VertexVectorField)
        1    0.000    0.000    0.000    0.000 abc.py:75(MetaPathFinder)
        1    0.000    0.000    0.000    0.000 domainelement.py:6(DomainElement)
        1    0.000    0.000    0.000    0.000 tarfile.py:704(ExFileObject)
        1    0.000    0.000    0.000    0.000 cache.py:5(_cache)
        1    0.000    0.000    0.000    0.000 stride_tricks.py:15(DummyArray)
        1    0.000    0.000    0.000    0.000 __init__.py:50(InvalidLicenseExpression)
        1    0.000    0.000    0.000    0.000 mock.py:2933(_AsyncIterator)
        1    0.000    0.000    0.000    0.000 protocols.py:109(BufferedProtocol)
        1    0.000    0.000    0.000    0.000 spawn.py:79(ProcessContext)
        1    0.000    0.000    0.000    0.000 serialization.py:239(_opener)
        1    0.000    0.000    0.000    0.000 index_tricks.py:211(MGridClass)
        3    0.000    0.000    0.000    0.000 _parser.py:99(checklookbehindgroup)
        1    0.000    0.000    0.000    0.000 core.py:4841(AtStringStart)
        1    0.000    0.000    0.000    0.000 request.py:1050(HTTPBasicAuthHandler)
        1    0.000    0.000    0.000    0.000 spawn.py:25(ProcessRaisedException)
        4    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:4330(_shift_scale_distribution_function_2arg)
        1    0.000    0.000    0.000    0.000 dtypes.py:1(<module>)
        1    0.000    0.000    0.000    0.000 std.py:214(EMA)
        1    0.000    0.000    0.000    0.000 ticker.py:1845(FixedLocator)
        1    0.000    0.000    0.000    0.000 numbers.py:12(Number)
        1    0.000    0.000    0.000    0.000 __init__.py:522(maxdict)
        1    0.000    0.000    0.000    0.000 _interface.py:692(_SumLinearOperator)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:659(FitDataError)
        1    0.000    0.000    0.000    0.000 nodes.py:79(ScalarNode)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1278(LocationEvent)
        1    0.000    0.000    0.000    0.000 band_data_in.py:25(check)
        1    0.000    0.000    0.000    0.000 modules.py:1286(SubModuleQuotientRing)
        1    0.000    0.000    0.000    0.000 fused.py:58(ConvBn2d)
        1    0.000    0.000    0.000    0.000 __init__.py:2332(_classproperty)
        1    0.000    0.000    0.000    0.000 _interface.py:660(_TransposedLinearOperator)
        1    0.000    0.000    0.000    0.000 geo.py:255(AitoffTransform)
        1    0.000    0.000    0.000    0.000 _basinhopping.py:301(Metropolis)
        1    0.000    0.000    0.000    0.000 fetch.py:18(_IterableDatasetFetcher)
        1    0.000    0.000    0.000    0.000 queue.py:242(LifoQueue)
        1    0.000    0.000    0.000    0.000 request.py:1383(HTTPSHandler)
        1    0.000    0.000    0.000    0.000 configparser.py:1242(SafeConfigParser)
        1    0.000    0.000    0.000    0.000 _trustregion_ncg.py:42(CGSteihaugSubproblem)
        1    0.000    0.000    0.000    0.000 fake_tensor.py:59(UnsupportedFakeTensorException)
        5    0.000    0.000    0.000    0.000 platform.py:775(_unknown_as_blank)
        1    0.000    0.000    0.000    0.000 backend_bases.py:3437(StatusbarBase)
        1    0.000    0.000    0.000    0.000 ticker.py:1985(MultipleLocator)
        1    0.000    0.000    0.000    0.000 error.py:278(MarkedYAMLFutureWarning)
        1    0.000    0.000    0.000    0.000 orderings.py:35(LexOrder)
        1    0.000    0.000    0.000    0.000 annotations.py:29(Module)
        1    0.000    0.000    0.000    0.000 _typing.py:47(SupportsRead)
        1    0.000    0.000    0.000    0.000 ticker.py:2577(SymmetricalLogLocator)
        1    0.000    0.000    0.000    0.000 minimize_trustregion_constr.py:26(HessianLinearOperator)
        1    0.000    0.000    0.000    0.000 homomorphisms.py:537(FreeModuleHomomorphism)
        1    0.000    0.000    0.000    0.000 nodes.py:130(MappingNode)
        1    0.000    0.000    0.000    0.000 mock.py:388(_MockIter)
        1    0.000    0.000    0.000    0.000 solveset.py:68(NonlinearError)
        1    0.000    0.000    0.000    0.000 ctx_mp_python.py:33(mpnumeric)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:960(NoDefaultType)
        1    0.000    0.000    0.000    0.000 request.py:624(HTTPErrorProcessor)
        1    0.000    0.000    0.000    0.000 _czt.py:275(ZoomFFT)
        1    0.000    0.000    0.000    0.000 connection.py:578(SocketListener)
        1    0.000    0.000    0.000    0.000 pooling.py:97(MaxPool2d)
        2    0.000    0.000    0.000    0.000 __init__.py:133(create_module)
        2    0.000    0.000    0.000    0.000 axis.py:604(__init__)
        1    0.000    0.000    0.000    0.000 core.py:797(_DomainCheckInterval)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:2011(nchypergeom_wallenius_gen)
        1    0.000    0.000    0.000    0.000 ElementPath.py:350(_SelectorContext)
        1    0.000    0.000    0.000    0.000 single.py:2572(NthLinearEulerEqNonhomogeneousUndeterminedCoefficients)
        1    0.000    0.000    0.000    0.000 numbers.py:2751(RationalConstant)
        1    0.000    0.000    0.000    0.000 pickletools.py:174(ArgumentDescriptor)
        1    0.000    0.000    0.000    0.000 transports.py:172(DatagramTransport)
        1    0.000    0.000    0.000    0.000 single.py:1685(HomogeneousCoeffBest)
        1    0.000    0.000    0.000    0.000 gaussiandomains.py:211(GaussianRational)
        1    0.000    0.000    0.000    0.000 enum.py:769(__getitem__)
        1    0.000    0.000    0.000    0.000 _constraints.py:21(NonlinearConstraint)
        1    0.000    0.000    0.000    0.000 protocols.py:162(DatagramProtocol)
        1    0.000    0.000    0.000    0.000 request.py:1226(HTTPDigestAuthHandler)
        1    0.000    0.000    0.000    0.000 serialization.py:1096(StorageType)
        1    0.000    0.000    0.000    0.000 splitter_base.py:37(_SplitterSettingBase)
        1    0.000    0.000    0.000    0.000 patches.py:2047(LArrow)
        1    0.000    0.000    0.000    0.000 argparse.py:1097(_HelpAction)
        1    0.000    0.000    0.000    0.000 argparse.py:1680(_MutuallyExclusiveGroup)
        1    0.000    0.000    0.000    0.000 util.py:368(ForkAwareThreadLock)
        1    0.000    0.000    0.000    0.000 __init__.py:235(Splitter)
        1    0.000    0.000    0.000    0.000 series.py:1742(Line3DBaseSeries)
        1    0.000    0.000    0.000    0.000 decoder.py:114(ImageHandler)
        1    0.000    0.000    0.000    0.000 dates.py:1928(ConciseDateConverter)
        1    0.000    0.000    0.000    0.000 unicode.py:282(Hangul)
        1    0.000    0.000    0.000    0.000 core.py:5240(DelimitedList)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:251(BareQuotedString)
        1    0.000    0.000    0.000    0.000 _interface.py:719(_ProductLinearOperator)
        1    0.000    0.000    0.000    0.000 index_methods.py:22(IndexConformanceException)
        1    0.000    0.000    0.000    0.000 patches.py:3165(_Bracket)
        1    0.000    0.000    0.000    0.000 events.py:170(AliasEvent)
        1    0.000    0.000    0.000    0.000 fetch.py:7(_BaseDatasetFetcher)
        1    0.000    0.000    0.000    0.000 pickletools.py:2550(_Example)
        1    0.000    0.000    0.000    0.000 _filter_design.py:38(BadCoefficients)
        1    0.000    0.000    0.000    0.000 _quadpack_py.py:1226(_OptFunc)
        1    0.000    0.000    0.000    0.000 legend_handler.py:132(HandlerNpoints)
        1    0.000    0.000    0.000    0.000 unicode.py:8(_lazyclassproperty)
        1    0.000    0.000    0.000    0.000 report.py:44(IPReport)
        1    0.000    0.000    0.000    0.000 modules.py:1867(InnerEndomorphism)
        2    0.000    0.000    0.000    0.000 core.py:883(__init__)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:658(InterpolatedUnivariateSpline)
        1    0.000    0.000    0.000    0.000 _quad_vec.py:57(DoubleInfiniteFunc)
        1    0.000    0.000    0.000    0.000 mixins.py:9(_LoopBoundMixin)
        1    0.000    0.000    0.000    0.000 errors.py:93(NonPrintableDefect)
        1    0.000    0.000    0.000    0.000 memory.py:683(CUDAPluggableAllocator)
        1    0.000    0.000    0.000    0.000 _spdx.py:10(SPDXException)
        1    0.000    0.000    0.000    0.000 _morestats.py:1203(_BigFloat)
        1    0.000    0.000    0.000    0.000 client.py:1481(IncompleteRead)
        1    0.000    0.000    0.000    0.000 usertools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 decorators.py:207(_SympifyWrapper)
        1    0.000    0.000    0.000    0.000 fused.py:149(ConvAdd2d)
        1    0.000    0.000    0.000    0.000 datapipe.py:207(DFIterDataPipe)
        1    0.000    0.000    0.000    0.000 dataframes.py:324(CaptureSub)
        1    0.000    0.000    0.000    0.000 _array_like.py:39(_SupportsArray)
        1    0.000    0.000    0.000    0.000 animation.py:99(__init__)
        1    0.000    0.000    0.000    0.000 dataframes.py:360(CaptureInitial)
        1    0.000    0.000    0.000    0.000 core.py:2415(NoMatch)
        1    0.000    0.000    0.000    0.000 __init__.py:160(_special_method_cache)
        1    0.000    0.000    0.000    0.000 _differentiable_functions.py:820(IdentityVectorFunction)
        1    0.000    0.000    0.000    0.000 entity.py:540(GeometrySet)
        1    0.000    0.000    0.000    0.000 threading.py:267(__exit__)
        1    0.000    0.000    0.000    0.000 legend_handler.py:541(HandlerStem)
        1    0.000    0.000    0.000    0.000 core.py:3673(LineStart)
        1    0.000    0.000    0.000    0.000 _fortran_format_parser.py:224(FortranFormatParser)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1009(ShiftA)
        1    0.000    0.000    0.000    0.000 instancenorm.py:153(LazyInstanceNorm1d)
        1    0.000    0.000    0.000    0.000 _hypotests.py:356(CramerVonMisesResult)
        1    0.000    0.000    0.000    0.000 errors.py:33(MessageDefect)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:451(ConstantLR)
        1    0.000    0.000    0.000    0.000 serialization.py:250(_open_file)
        1    0.000    0.000    0.000    0.000 minimize_trustregion_constr.py:39(LagrangianHessian)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:99(_moment_raw_formula)
        1    0.000    0.000    0.000    0.000 series.py:2104(ContourSeries)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:577(ExponentialLR)
        1    0.000    0.000    0.000    0.000 legend_handler.py:433(HandlerErrorbar)
        1    0.000    0.000    0.000    0.000 lsoda.py:211(LsodaDenseOutput)
        1    0.000    0.000    0.000    0.000 hb.py:376(<dictcomp>)
        1    0.000    0.000    0.000    0.000 signals.py:9(_InterruptHandler)
        1    0.000    0.000    0.000    0.000 util.py:81(_UnboundedCache)
        1    0.000    0.000    0.000    0.000 suite.py:375(_DebugResult)
        1    0.000    0.000    0.000    0.000 geo.py:419(LambertTransform)
        1    0.000    0.000    0.000    0.000 _version.py:70(<listcomp>)
        1    0.000    0.000    0.000    0.000 {built-in method _imp.get_frozen_object}
        1    0.000    0.000    0.000    0.000 numbers.py:2764(IntegerConstant)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:840(ChainedScheduler)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:1554(RectBivariateSpline)
        1    0.000    0.000    0.000    0.000 pickletools.py:948(StackObject)
        1    0.000    0.000    0.000    0.000 font_manager.py:939(_JSONEncoder)
        1    0.000    0.000    0.000    0.000 single.py:1930(NthOrderReducible)
        1    0.000    0.000    0.000    0.000 context.py:295(ForkServerProcess)
        1    0.000    0.000    0.000    0.000 batchnorm.py:306(LazyBatchNorm1d)
        1    0.000    0.000    0.000    0.000 _exceptions.py:32(UFuncTypeError)
        1    0.000    0.000    0.000    0.000 para4band.py:72(Eigen_Trans)
        1    0.000    0.000    0.000    0.000 arpack.py:288(ArpackNoConvergence)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:591(rv_discrete_frozen)
        1    0.000    0.000    0.000    0.000 _ltisys.py:1625(StateSpaceContinuous)
        1    0.000    0.000    0.000    0.000 comments.py:1085(CommentedOrderedMap)
        1    0.000    0.000    0.000    0.000 _typing.py:139(DTypesReal)
        1    0.000    0.000    0.000    0.000 calendar.py:26(IllegalMonthError)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:1623(_TypeVarLikeMeta)
        1    0.000    0.000    0.000    0.000 traceback.py:613(_ExceptionPrintContext)
        1    0.000    0.000    0.000    0.000 dropout.py:25(Dropout)
        1    0.000    0.000    0.000    0.000 parameter.py:196(UninitializedBuffer)
        1    0.000    0.000    0.000    0.000 {method 'groups' of 're.Match' objects}
        1    0.000    0.000    0.000    0.000 transforms.py:1047(InverseFourierTransform)
        1    0.000    0.000    0.000    0.000 util.py:185(_GroupConsecutive)
        1    0.000    0.000    0.000    0.000 message.py:1195(EmailMessage)
        1    0.000    0.000    0.000    0.000 core.py:1125(_DomainedBinaryOperation)
        1    0.000    0.000    0.000    0.000 six.py:144(MovedAttribute)
        4    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1798(_process_parameters)
        1    0.000    0.000    0.000    0.000 _exceptions.py:71(_UFuncCastingError)
        1    0.000    0.000    0.000    0.000 _exceptions.py:98(_UFuncOutputCastingError)
        1    0.000    0.000    0.000    0.000 contour.py:35(ClabelText)
        1    0.000    0.000    0.000    0.000 _multivariate.py:5899(uniform_direction_frozen)
        1    0.000    0.000    0.000    0.000 _interface.py:747(_ScaledLinearOperator)
        1    0.000    0.000    0.000    0.000 _polyint.py:145(_Interpolator1DWithDerivatives)
        1    0.000    0.000    0.000    0.000 core.py:4073(_ErrorStop)
        1    0.000    0.000    0.000    0.000 error.py:120(MarkedYAMLError)
        1    0.000    0.000    0.000    0.000 connection.py:764(ConnectionWrapper)
        1    0.000    0.000    0.000    0.000 tensor.py:816(<listcomp>)
        1    0.000    0.000    0.000    0.000 scale.py:404(InvertedSymmetricalLogTransform)
        1    0.000    0.000    0.000    0.000 mathtext.py:1984(VCentered)
        1    0.000    0.000    0.000    0.000 _linesearch.py:23(LineSearchWarning)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:272(MultiplicativeLR)
        1    0.000    0.000    0.000    0.000 function.py:281(FunctionMeta)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:404(GroupMember)
        1    0.000    0.000    0.000    0.000 unicode.py:160(Greek)
        1    0.000    0.000    0.000    0.000 events.py:128(DocumentStartEvent)
        1    0.000    0.000    0.000    0.000 line.py:2834(Segment3D)
        1    0.000    0.000    0.000    0.000 sqrtdenest.py:216(SqrtdenestStopIteration)
        1    0.000    0.000    0.000    0.000 expr.py:4076(UnevaluatedExpr)
        1    0.000    0.000    0.000    0.000 optimization.py:15(Newton)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:173(_enable_get_lr_call)
        2    0.000    0.000    0.000    0.000 torch_version.py:19(__init__)
        1    0.000    0.000    0.000    0.000 Physics_System.py:5(Phy_Sys)
        1    0.000    0.000    0.000    0.000 constraints.py:311(_GreaterThan)
        1    0.000    0.000    0.000    0.000 characteristiczero.py:7(CharacteristicZero)
        1    0.000    0.000    0.000    0.000 request.py:1398(HTTPCookieProcessor)
        1    0.000    0.000    0.000    0.000 _array_like.py:44(_SupportsArrayFunc)
        1    0.000    0.000    0.000    0.000 _dual_annealing.py:212(StrategyChain)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:10816(FitUniformFixedScaleDataError)
        1    0.000    0.000    0.000    0.000 mathieu_functions.py:9(MathieuBase)
        1    0.000    0.000    0.000    0.000 numbers.py:3142(_as_mpf_val)
        1    0.000    0.000    0.000    0.000 error.py:19(URLError)
        1    0.000    0.000    0.000    0.000 resource_sharer.py:45(DupFd)
        1    0.000    0.000    0.000    0.000 __init__.py:234(silent_list)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:336(_median_formula)
        1    0.000    0.000    0.000    0.000 sympify.py:27(SympifyError)
        1    0.000    0.000    0.000    0.000 _jit_internal.py:1090(BroadcastingListCls)
        1    0.000    0.000    0.000    0.000 dates.py:621(IndexDateFormatter)
        1    0.000    0.000    0.000    0.000 Image.py:3712(register_mime)
        1    0.000    0.000    0.000    0.000 core.py:4931(PrecededBy)
        1    0.000    0.000    0.000    0.000 ase.py:31(Atoms)
        1    0.000    0.000    0.000    0.000 _quadpack_py.py:1235(_NQuad)
        1    0.000    0.000    0.000    0.000 diophantine.py:256(Linear)
        1    0.000    0.000    0.000    0.000 utilities.py:7(DotProdSimpState)
        1    0.000    0.000    0.000    0.000 dispatcher.py:33(RaiseNotImplementedError)
        1    0.000    0.000    0.000    0.000 parser.py:71(HeaderParser)
        1    0.000    0.000    0.000    0.000 __init__.py:753(Filter)
        1    0.000    0.000    0.000    0.000 jiterator.py:10(_CodeParser)
        1    0.000    0.000    0.000    0.000 _ode.py:767(IntegratorConcurrencyError)
        1    0.000    0.000    0.000    0.000 _quad_vec.py:94(_Bunch)
        1    0.000    0.000    0.000    0.000 single.py:2294(NthLinearConstantCoeffUndeterminedCoefficients)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:268(_reduce_op)
        1    0.000    0.000    0.000    0.000 _trace.py:290(TracingCheckError)
        1    0.000    0.000    0.000    0.000 more.py:3250(time_limited)
        1    0.000    0.000    0.000    0.000 mock.py:1053(_AnyComparer)
        1    0.000    0.000    0.000    0.000 core.py:840(_DomainSafeDivide)
        4    0.000    0.000    0.000    0.000 {built-in method _sre.ascii_tolower}
        2    0.000    0.000    0.000    0.000 six.py:199(__get_module)
        1    0.000    0.000    0.000    0.000 activation.py:1315(Softsign)
        1    0.000    0.000    0.000    0.000 profiler.py:619(emit_nvtx)
        1    0.000    0.000    0.000    0.000 polyoptions.py:674(All)
        1    0.000    0.000    0.000    0.000 fused.py:159(ConvAddReLU2d)
        1    0.000    0.000    0.000    0.000 polyoptions.py:375(Greedy)
        1    0.000    0.000    0.000    0.000 pooling.py:1006(AdaptiveMaxPool1d)
        1    0.000    0.000    0.000    0.000 profiler.py:745(EnforceUnique)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3828(ortho_group_frozen)
        2    0.000    0.000    0.000    0.000 _adapters.py:25(__init__)
        1    0.000    0.000    0.000    0.000 core.py:3810(WordEnd)
        1    0.000    0.000    0.000    0.000 _monkeytype_config.py:153(JitTypeTraceStoreLogger)
        1    0.000    0.000    0.000    0.000 _utils.py:610(ExceptionWrapper)
        1    0.000    0.000    0.000    0.000 Image.py:3740(register_save_all)
        1    0.000    0.000    0.000    0.000 ticker.py:296(IndexFormatter)
        1    0.000    0.000    0.000    0.000 polyoptions.py:366(Field)
        1    0.000    0.000    0.000    0.000 worker.py:51(ManagerWatchdog)
        1    0.000    0.000    0.000    0.000 numerictypes.py:425(_typedict)
        1    0.000    0.000    0.000    0.000 __init__.py:822(Lookup)
        1    0.000    0.000    0.000    0.000 _typing.py:145(DTypesComplex)
        1    0.000    0.000    0.000    0.000 homomorphisms.py:574(SubModuleHomomorphism)
        1    0.000    0.000    0.000    0.000 datapipes.py:111(ExampleAggregateAsDataFrames)
        3    0.000    0.000    0.000    0.000 fromnumeric.py:2831(_min_dispatcher)
        1    0.000    0.000    0.000    0.000 GimpGradientFile.py:115(GimpGradientFile)
        1    0.000    0.000    0.000    0.000 configparser.py:190(DuplicateSectionError)
        1    0.000    0.000    0.000    0.000 solvers.py:18(PolyNonlinearError)
        1    0.000    0.000    0.000    0.000 polyerrors.py:6(BasePolynomialError)
        1    0.000    0.000    0.000    0.000 _endian.py:23(_swapped_meta)
        1    0.000    0.000    0.000    0.000 _warnings_errors.py:21(NearConstantInputWarning)
        1    0.000    0.000    0.000    0.000 queues.py:234(LifoQueue)
        1    0.000    0.000    0.000    0.000 _typing.py:340(_IterDataPipeMeta)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:2442(_UnpackSpecialForm)
        1    0.000    0.000    0.000    0.000 _mio5_params.py:234(MatlabObject)
        2    0.000    0.000    0.000    0.000 version.py:511(_parse_local_version)
        1    0.000    0.000    0.000    0.000 mock.py:40(InvalidSpecError)
        2    0.000    0.000    0.000    0.000 core.py:47(condition)
        1    0.000    0.000    0.000    0.000 single.py:2667(SecondLinearBessel)
        1    0.000    0.000    0.000    0.000 source.py:1(<module>)
        1    0.000    0.000    0.000    0.000 rszeta.py:53(RSCache)
        1    0.000    0.000    0.000    0.000 conv.py:1128(_ConvTransposeMixin)
        1    0.000    0.000    0.000    0.000 fancy_getopt.py:450(OptionDummy)
        1    0.000    0.000    0.000    0.000 constraints.py:284(_IntegerGreaterThan)
        1    0.000    0.000    0.000    0.000 polynomial.py:29(RankWarning)
        2    0.000    0.000    0.000    0.000 results.py:460(<lambda>)
        1    0.000    0.000    0.000    0.000 mock.py:295(__init__)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:690(Attribute)
        1    0.000    0.000    0.000    0.000 configparser.py:284(InterpolationDepthError)
        1    0.000    0.000    0.000    0.000 cyaml.py:54(CLoader)
        1    0.000    0.000    0.000    0.000 pydoc.py:2209(ModuleScanner)
        1    0.000    0.000    0.000    0.000 errors.py:73(SymbolicValueError)
        1    0.000    0.000    0.000    0.000 {built-in method numpy.core._multiarray_umath._reload_guard}
        1    0.000    0.000    0.000    0.000 _covariance.py:618(CovViaPSD)
        1    0.000    0.000    0.000    0.000 _base.py:141(_AcquireFutures)
        1    0.000    0.000    0.000    0.000 client.py:176(HTTPMessage)
        1    0.000    0.000    0.000    0.000 argparse.py:1253(FileType)
        1    0.000    0.000    0.000    0.000 factorials.py:17(CombinatorialFunction)
        1    0.000    0.000    0.000    0.000 response.py:57(addinfo)
        1    0.000    0.000    0.000    0.000 calendar.py:594(LocaleHTMLCalendar)
        1    0.000    0.000    0.000    0.000 parse.py:127(_ResultMixinStr)
        1    0.000    0.000    0.000    0.000 linsolve.py:28(MatrixRankWarning)
        1    0.000    0.000    0.000    0.000 std.py:40(TqdmWarning)
        3    0.000    0.000    0.000    0.000 numeric.py:63(_zeros_like_dispatcher)
        1    0.000    0.000    0.000    0.000 single.py:2098(NthLinearConstantCoeffHomogeneous)
        1    0.000    0.000    0.000    0.000 graph.py:203(save_on_cpu)
        1    0.000    0.000    0.000    0.000 legend_handler.py:306(HandlerLineCollection)
        1    0.000    0.000    0.000    0.000 cyaml.py:22(CBaseLoader)
        1    0.000    0.000    0.000    0.000 _base.py:19(SparseWarning)
        1    0.000    0.000    0.000    0.000 patches.py:2099(DArrow)
        1    0.000    0.000    0.000    0.000 core.py:5917(Dict)
        1    0.000    0.000    0.000    0.000 __init__.py:41(PropModule)
        1    0.000    0.000    0.000    0.000 mathtext.py:1404(Box)
        1    0.000    0.000    0.000    0.000 core.py:184(_should_enable_warnings)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:672(FitSolverError)
        1    0.000    0.000    0.000    0.000 argparse.py:1116(_VersionAction)
        1    0.000    0.000    0.000    0.000 frontend.py:118(UnsupportedNodeError)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:1454(LSQBivariateSpline)
        1    0.000    0.000    0.000    0.000 simpledomain.py:7(SimpleDomain)
        1    0.000    0.000    0.000    0.000 core.py:5880(Group)
        1    0.000    0.000    0.000    0.000 _adapters.py:20(TraversableResourcesLoader)
        1    0.000    0.000    0.000    0.000 datapipes.py:18(DataFramesAsTuplesPipe)
        1    0.000    0.000    0.000    0.000 feedparser.py:532(BytesFeedParser)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1245(ComplexFloatingFormat)
        1    0.000    0.000    0.000    0.000 mathtext.py:1974(HCentered)
        1    0.000    0.000    0.000    0.000 emitter.py:32(ScalarAnalysis)
        1    0.000    0.000    0.000    0.000 transforms.py:2199(BlendedAffine2D)
        2    0.000    0.000    0.000    0.000 __init__.py:440(__init__)
        1    0.000    0.000    0.000    0.000 offsetbox.py:495(HPacker)
        1    0.000    0.000    0.000    0.000 parse.py:315(DefragResult)
        1    0.000    0.000    0.000    0.000 backend_agg.py:612(_BackendAgg)
        2    0.000    0.000    0.000    0.000 rcsetup.py:400(validate_fontsize_None)
        1    0.000    0.000    0.000    0.000 core.py:2378(__init__)
        1    0.000    0.000    0.000    0.000 collections.py:1301(AsteriskPolygonCollection)
        1    0.000    0.000    0.000    0.000 mock.py:394(Base)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:767(CosineAnnealingLR)
        1    0.000    0.000    0.000    0.000 _jit_internal.py:68(__init__)
        1    0.000    0.000    0.000    0.000 animation.py:753(ImageMagickFileWriter)
        1    0.000    0.000    0.000    0.000 more.py:3661(AbortThread)
        1    0.000    0.000    0.000    0.000 shutil.py:67(SpecialFileError)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 __init__.py:2349(__init__)
        1    0.000    0.000    0.000    0.000 _differentiable_functions.py:408(_VectorFunWrapper)
        1    0.000    0.000    0.000    0.000 mock.py:2100(NonCallableMagicMock)
        1    0.000    0.000    0.000    0.000 backend_tools.py:429(_ToolEnableNavigation)
        1    0.000    0.000    0.000    0.000 ticker.py:1154(LogFormatterMathtext)
        1    0.000    0.000    0.000    0.000 diophantine.py:454(BinaryQuadratic)
        1    0.000    0.000    0.000    0.000 polyutils.py:47(RankWarning)
        1    0.000    0.000    0.000    0.000 computed_entries.py:155(ManualEnergyAdjustment)
        1    0.000    0.000    0.000    0.000 _shgo.py:1529(LMap)
        1    0.000    0.000    0.000    0.000 _typing.py:113(DTypesBool)
        1    0.000    0.000    0.000    0.000 modules.py:1328(QuotientModuleElement)
        1    0.000    0.000    0.000    0.000 constraints.py:232(_OneHot)
        1    0.000    0.000    0.000    0.000 tz.py:373(_tzfile)
        1    0.000    0.000    0.000    0.000 patches.py:2139(Round)
        1    0.000    0.000    0.000    0.000 reader.py:35(ReaderError)
        1    0.000    0.000    0.000    0.000 single.py:2787(SecondLinearAiry)
        2    0.000    0.000    0.000    0.000 calendar.py:57(__init__)
        1    0.000    0.000    0.000    0.000 single.py:2387(NthLinearEulerEqHomogeneous)
        1    0.000    0.000    0.000    0.000 arpack.py:606(_UnsymmetricArpackParams)
        1    0.000    0.000    0.000    0.000 mock.py:2140(MagicProxy)
        1    0.000    0.000    0.000    0.000 optimizer.py:20(_RequiredParameter)
        1    0.000    0.000    0.000    0.000 single.py:2483(NthLinearEulerEqNonhomogeneousVariationOfParameters)
        1    0.000    0.000    0.000    0.000 inverselaplace.py:39(FixedTalbot)
        1    0.000    0.000    0.000    0.000 _symbolic_trace.py:191(PHBase)
        1    0.000    0.000    0.000    0.000 package_importer.py:668(_ModuleNode)
        1    0.000    0.000    0.000    0.000 core.py:2500(_SingleCharLiteral)
        1    0.000    0.000    0.000    0.000 _quadpack_py.py:13(IntegrationWarning)
        1    0.000    0.000    0.000    0.000 _typing.py:215(__init__)
        1    0.000    0.000    0.000    0.000 instancenorm.py:269(LazyInstanceNorm2d)
        1    0.000    0.000    0.000    0.000 pooling.py:1036(AdaptiveMaxPool2d)
        1    0.000    0.000    0.000    0.000 units.py:74(AxisInfo)
        1    0.000    0.000    0.000    0.000 unicode.py:135(BasicMultilingualPlane)
        1    0.000    0.000    0.000    0.000 mock.py:2345(AsyncMock)
        1    0.000    0.000    0.000    0.000 mathtext.py:949(DejaVuSansFonts)
        1    0.000    0.000    0.000    0.000 exceptions.py:15(BadRequiredStrength)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:1355(SmoothBivariateSpline)
        1    0.000    0.000    0.000    0.000 inputs.py:1943(PmgVaspPspDirError)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:926(MeijerFormulaCollection)
        2    0.000    0.000    0.000    0.000 arrayprint.py:493(_recursive_guard)
        1    0.000    0.000    0.000    0.000 parse.py:135(_ResultMixinBytes)
        1    0.000    0.000    0.000    0.000 _utils.py:603(KeyErrorMessage)
        1    0.000    0.000    0.000    0.000 mathtext.py:1298(ComputerModernFontConstants)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:347(GroupList)
        1    0.000    0.000    0.000    0.000 scalarint.py:82(BinaryInt)
        1    0.000    0.000    0.000    0.000 _fortran_format_parser.py:169(Token)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:106(HyperbolicFunction)
        1    0.000    0.000    0.000    0.000 trifinder.py:7(TriFinder)
        1    0.000    0.000    0.000    0.000 core.py:241(_ParseActionIndexError)
        1    0.000    0.000    0.000    0.000 core.py:5813(TokenConverter)
        1    0.000    0.000    0.000    0.000 comments.py:643(CommentedMapView)
        1    0.000    0.000    0.000    0.000 _nonlin.py:589(GenericBroyden)
        1    0.000    0.000    0.000    0.000 constraints.py:362(_Interval)
        1    0.000    0.000    0.000    0.000 {method 'close' of 'generator' objects}
        1    0.000    0.000    0.000    0.000 uuid.py:78(SafeUUID)
        1    0.000    0.000    0.000    0.000 hyper.py:71(TupleParametersBase)
        1    0.000    0.000    0.000    0.000 unicode.py:141(Latin1)
        1    0.000    0.000    0.000    0.000 rcsetup.py:442(_validate_mathtext_fallback_to_cm)
        1    0.000    0.000    0.000    0.000 configparser.py:181(NoSectionError)
        1    0.000    0.000    0.000    0.000 _idl.py:145(Pointer)
        1    0.000    0.000    0.000    0.000 errors.py:21(OnnxExporterWarning)
        1    0.000    0.000    0.000    0.000 _interface.py:816(MatrixLinearOperator)
        1    0.000    0.000    0.000    0.000 events.py:151(DocumentEndEvent)
        1    0.000    0.000    0.000    0.000 exceptions.py:47(LimitOverrunError)
        1    0.000    0.000    0.000    0.000 utils.py:34(MatchAllNode)
        1    0.000    0.000    0.000    0.000 registration.py:210(__init__)
        1    0.000    0.000    0.000    0.000 _exceptions.py:56(_UFuncBinaryResolutionError)
        1    0.000    0.000    0.000    0.000 utils.py:226(CallbackIOWrapper)
        1    0.000    0.000    0.000    0.000 _helpers.py:685(_dask_device)
        1    0.000    0.000    0.000    0.000 dataframes.py:39(CaptureControl)
        1    0.000    0.000    0.000    0.000 tz.py:1156(_tzicalvtzcomp)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:933(EWWhiteSpaceTerminal)
        1    0.000    0.000    0.000    0.000 argparse.py:917(_StoreAction)
        1    0.000    0.000    0.000    0.000 pathlib.py:300(_Selector)
        1    0.000    0.000    0.000    0.000 Image.py:3238(SupportsArrowArrayInterface)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:217(EncodedWord)
        1    0.000    0.000    0.000    0.000 series.py:2122(GenericDataSeries)
        1    0.000    0.000    0.000    0.000 scalarstring.py:54(LiteralScalarString)
        1    0.000    0.000    0.000    0.000 backend_managers.py:11(ToolEvent)
        1    0.000    0.000    0.000    0.000 deprecation.py:254(_deprecate_privatize_attribute)
        1    0.000    0.000    0.000    0.000 reduction.py:211(_C)
        1    0.000    0.000    0.000    0.000 unicode.py:307(Thai)
        1    0.000    0.000    0.000    0.000 orderings.py:242(_ItemGetter)
        1    0.000    0.000    0.000    0.000 patches.py:3340(Simple)
        1    0.000    0.000    0.000    0.000 dataframes.py:178(CaptureA)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:163(_Sentinel)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1449(PickEvent)
        1    0.000    0.000    0.000    0.000 _multivariate.py:3675(special_ortho_group_frozen)
        2    0.000    0.000    0.000    0.000 matexpr.py:486(get_postprocessor)
        1    0.000    0.000    0.000    0.000 worker.py:119(_IterableDatasetStopIteration)
        1    0.000    0.000    0.000    0.000 graph.py:494(_AllowMutationOnSavedContext)
        1    0.000    0.000    0.000    0.000 api.py:87(AllGatherStates)
        1    0.000    0.000    0.000    0.000 __init__.py:399(PyDLL)
        1    0.000    0.000    0.000    0.000 iterables.py:3015(NotIterable)
        1    0.000    0.000    0.000    0.000 colors.py:1525(NoNorm)
        1    0.000    0.000    0.000    0.000 constraints.py:265(_IntegerLessThan)
        1    0.000    0.000    0.000    0.000 kind.py:48(Kind)
        1    0.000    0.000    0.000    0.000 cyaml.py:115(CSafeDumper)
        1    0.000    0.000    0.000    0.000 patches.py:2496(Arc3)
        1    0.000    0.000    0.000    0.000 unicode.py:336(Devanagari)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:446(ObsRoute)
        1    0.000    0.000    0.000    0.000 events.py:237(SequenceStartEvent)
        1    0.000    0.000    0.000    0.000 traceback.py:90(_Sentinel)
        1    0.000    0.000    0.000    0.000 geo.py:349(MollweideTransform)
        1    0.000    0.000    0.000    0.000 offsetbox.py:368(PackerBase)
        1    0.000    0.000    0.000    0.000 configparser.py:216(DuplicateOptionError)
        1    0.000    0.000    0.000    0.000 inputs.py:787(BadPoscarWarning)
        1    0.000    0.000    0.000    0.000 engine.py:379(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:1261(PlaceHolder)
        1    0.000    0.000    0.000    0.000 trirefine.py:12(TriRefiner)
        1    0.000    0.000    0.000    0.000 _differentiable_functions.py:418(_VectorJacWrapper)
        1    0.000    0.000    0.000    0.000 tokens.py:220(StreamStartToken)
        1    0.000    0.000    0.000    0.000 readers.py:107(NamespaceReader)
        1    0.000    0.000    0.000    0.000 _misc.py:9(LinAlgWarning)
        1    0.000    0.000    0.000    0.000 dispatcher.py:10(MDNotImplementedError)
        1    0.000    0.000    0.000    0.000 queue.py:23(Full)
        1    0.000    0.000    0.000    0.000 variable.py:8(VariableMeta)
        1    0.000    0.000    0.000    0.000 mathtext.py:1810(Rule)
        1    0.000    0.000    0.000    0.000 spglib.py:75(SpglibError)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1035(UnShiftA)
        1    0.000    0.000    0.000    0.000 groundtypes.py:21(_GMPYInteger)
        1    0.000    0.000    0.000    0.000 lambdify.py:1336(_TensorflowEvaluatorPrinter)
        1    0.000    0.000    0.000    0.000 mathtext.py:1932(Fil)
        1    0.000    0.000    0.000    0.000 tokens.py:200(DirectiveToken)
        1    0.000    0.000    0.000    0.000 sharding.py:21(_ShardingIterDataPipe)
        1    0.000    0.000    0.000    0.000 patches.py:3053(Curve)
        1    0.000    0.000    0.000    0.000 frontend.py:315(Builder)
        1    0.000    0.000    0.000    0.000 core.py:4895(FollowedBy)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:913(WhiteSpaceTerminal)
        1    0.000    0.000    0.000    0.000 dataframes.py:43(DataFrameTracedOps)
        1    0.000    0.000    0.000    0.000 streams.py:117(ExternalStream)
        1    0.000    0.000    0.000    0.000 batchnorm.py:341(BatchNorm2d)
        1    0.000    0.000    0.000    0.000 __init__.py:250(ExecutableNotFoundError)
        1    0.000    0.000    0.000    0.000 constraints.py:345(_LessThan)
        1    0.000    0.000    0.000    0.000 {built-in method _functools.cmp_to_key}
        1    0.000    0.000    0.000    0.000 diophantine.py:695(HomogeneousTernaryQuadraticNormal)
        1    0.000    0.000    0.000    0.000 calendar.py:548(different_locale)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:310(__init__)
        3    0.000    0.000    0.000    0.000 core.py:2493(_generateDefaultName)
        1    0.000    0.000    0.000    0.000 _exporter_states.py:18(SymbolicContext)
        1    0.000    0.000    0.000    0.000 __init__.py:714(ExFileObject)
        1    0.000    0.000    0.000    0.000 magic.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dataframes.py:205(CaptureCall)
        1    0.000    0.000    0.000    0.000 __init__.py:10(__init__)
        1    0.000    0.000    0.000    0.000 exceptions.py:19(DuplicateConstraint)
        1    0.000    0.000    0.000    0.000 isoparser.py:43(__init__)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:650(MIMEVersion)
        1    0.000    0.000    0.000    0.000 spawn.py:163(SpawnContext)
        1    0.000    0.000    0.000    0.000 rk.py:577(Dop853DenseOutput)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1200(MeijerUnShiftB)
        1    0.000    0.000    0.000    0.000 pathlib.py:378(_RecursiveWildcardSelector)
        1    0.000    0.000    0.000    0.000 __init__.py:730(AbsolutePathError)
        1    0.000    0.000    0.000    0.000 modules.py:454(FreeModulePolyRing)
        1    0.000    0.000    0.000    0.000 activation.py:337(Tanh)
        1    0.000    0.000    0.000    0.000 pooling.py:1132(AdaptiveAvgPool1d)
        1    0.000    0.000    0.000    0.000 parser.py:804(RoundTripParser)
        1    0.000    0.000    0.000    0.000 _lil.py:505(lil_array)
        1    0.000    0.000    0.000    0.000 legend_handler.py:260(HandlerPatch)
        1    0.000    0.000    0.000    0.000 core.py:3762(StringEnd)
        1    0.000    0.000    0.000    0.000 quadrature.py:260(TanhSinh)
        1    0.000    0.000    0.000    0.000 gradcheck.py:18(GradcheckError)
        1    0.000    0.000    0.000    0.000 more.py:4171(countable)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1222(IntegerFormat)
        1    0.000    0.000    0.000    0.000 loader.py:23(BaseLoader)
        1    0.000    0.000    0.000    0.000 _odepack_py.py:16(ODEintWarning)
        2    0.000    0.000    0.000    0.000 _state.py:39(__bool__)
        1    0.000    0.000    0.000    0.000 contextlib.py:340(__init__)
        1    0.000    0.000    0.000    0.000 core.py:3017(Char)
        1    0.000    0.000    0.000    0.000 _codata.py:2116(ConstantWarning)
        1    0.000    0.000    0.000    0.000 libhyper.py:43(NoConvergence)
        1    0.000    0.000    0.000    0.000 request.py:1531(FTPHandler)
        1    0.000    0.000    0.000    0.000 request.py:898(HTTPPasswordMgrWithDefaultRealm)
        1    0.000    0.000    0.000    0.000 typing.py:1543(__repr__)
        1    0.000    0.000    0.000    0.000 geo.py:458(InvertedLambertTransform)
        1    0.000    0.000    0.000    0.000 _ltisys.py:1081(ZerosPolesGainContinuous)
        1    0.000    0.000    0.000    0.000 symbolic_shapes.py:25(GuardOnDataDependentSymNode)
        1    0.000    0.000    0.000    0.000 orderings.py:45(GradedLexOrder)
        1    0.000    0.000    0.000    0.000 function.py:107(ArgumentIndexError)
        1    0.000    0.000    0.000    0.000 _comparison.py:389(ObjectPair)
        1    0.000    0.000    0.000    0.000 index_tricks.py:262(OGridClass)
        1    0.000    0.000    0.000    0.000 dumper.py:21(BaseDumper)
        1    0.000    0.000    0.000    0.000 events.py:66(NodeEvent)
        1    0.000    0.000    0.000    0.000 operator_schemas.py:44(_FakeGlobalNamespace)
        1    0.000    0.000    0.000    0.000 api.py:466(RRef)
        1    0.000    0.000    0.000    0.000 overrides.py:1865(BaseTorchFunctionMode)
        1    0.000    0.000    0.000    0.000 legend_handler.py:637(HandlerTuple)
        1    0.000    0.000    0.000    0.000 fused.py:31(ConvReLU3d)
        1    0.000    0.000    0.000    0.000 zipfile.py:47(LargeZipFile)
        1    0.000    0.000    0.000    0.000 backend_bases.py:2625(NonGuiException)
        1    0.000    0.000    0.000    0.000 backend_tools.py:682(ViewsPositionsBase)
        1    0.000    0.000    0.000    0.000 _vertex.py:430(ConstraintWrapper)
        1    0.000    0.000    0.000    0.000 _symbolic_trace.py:885(_PatchedFnSetItem)
        1    0.000    0.000    0.000    0.000 activation.py:1465(Softmax2d)
        1    0.000    0.000    0.000    0.000 tarfile.py:267(TarError)
        1    0.000    0.000    0.000    0.000 copyreg.py:22(constructor)
        2    0.000    0.000    0.000    0.000 {method '__exit__' of 'posix.ScandirIterator' objects}
        1    0.000    0.000    0.000    0.000 errors.py:41(RemovedCommandError)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:1928(nchypergeom_fisher_gen)
        1    0.000    0.000    0.000    0.000 io.py:25(EncodingWarning)
        2    0.000    0.000    0.000    0.000 ordinals.py:84(<genexpr>)
        1    0.000    0.000    0.000    0.000 activation.py:784(LogSigmoid)
        1    0.000    0.000    0.000    0.000 pooling.py:1160(AdaptiveAvgPool2d)
        1    0.000    0.000    0.000    0.000 arpack.py:932(LuInv)
        1    0.000    0.000    0.000    0.000 case.py:201(_AssertRaisesBaseContext)
        1    0.000    0.000    0.000    0.000 exceptions.py:300(RecursiveGrammarException)
        1    0.000    0.000    0.000    0.000 dataframes.py:187(CaptureLikeMock)
        1    0.000    0.000    0.000    0.000 _parser.py:1378(_attr)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1076(UnShiftB)
        5    0.000    0.000    0.000    0.000 libmpf.py:49(<lambda>)
        1    0.000    0.000    0.000    0.000 datapipe.py:372(_MapDataPipeSerializationWrapper)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:3256(_NamedTupleMeta)
        4    0.000    0.000    0.000    0.000 {built-in method _sre.ascii_iscased}
        1    0.000    0.000    0.000    0.000 patches.py:1945(_Base)
        1    0.000    0.000    0.000    0.000 dir_util.py:23(__init__)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:717(_RealParameter)
        1    0.000    0.000    0.000    0.000 meijerint.py:313(_CoeffExpValueError)
        1    0.000    0.000    0.000    0.000 fused.py:76(ConvBnReLU2d)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:1670(SphereBivariateSpline)
        1    0.000    0.000    0.000    0.000 diophantine.py:782(HomogeneousTernaryQuadratic)
        1    0.000    0.000    0.000    0.000 pytree_hacks.py:16(PlaceHolder)
        1    0.000    0.000    0.000    0.000 __init__.py:273(ExtractError)
        1    0.000    0.000    0.000    0.000 _ltisys.py:2295(Bunch)
        1    0.000    0.000    0.000    0.000 error.py:232(UnsafeLoaderWarning)
        1    0.000    0.000    0.000    0.000 boolalg.py:443(__hash__)
        1    0.000    0.000    0.000    0.000 mathtext.py:2079(AutoWidthChar)
        1    0.000    0.000    0.000    0.000 unicode.py:322(Hebrew)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:600(rv_continuous_frozen)
        1    0.000    0.000    0.000    0.000 exponential.py:212(ExpMeta)
        1    0.000    0.000    0.000    0.000 request.py:1061(ProxyBasicAuthHandler)
        1    0.000    0.000    0.000    0.000 graph.py:422(_swap_with_cloned)
        1    0.000    0.000    0.000    0.000 profiler_util.py:373(Interval)
        1    0.000    0.000    0.000    0.000 unicode.py:154(LatinB)
        1    0.000    0.000    0.000    0.000 _fortran_format_parser.py:182(Tokenizer)
        1    0.000    0.000    0.000    0.000 argparse.py:1308(Namespace)
        1    0.000    0.000    0.000    0.000 __init__.py:94(cuBLASModule)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:212(Token)
        1    0.000    0.000    0.000    0.000 geo.py:280(InvertedAitoffTransform)
        1    0.000    0.000    0.000    0.000 instancenorm.py:192(InstanceNorm2d)
        1    0.000    0.000    0.000    0.000 __init__.py:10(warn_distutils_present)
        1    0.000    0.000    0.000    0.000 _factories.py:25(_TzOffsetFactory)
        1    0.000    0.000    0.000    0.000 {built-in method _elementtree._set_factories}
        1    0.000    0.000    0.000    0.000 error.py:176(MarkedYAMLWarning)
        1    0.000    0.000    0.000    0.000 exceptions.py:13(DMError)
        1    0.000    0.000    0.000    0.000 optimization.py:58(Secant)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:1837(SmoothSphereBivariateSpline)
        1    0.000    0.000    0.000    0.000 _guards.py:205(GuardEnvExpr)
        1    0.000    0.000    0.000    0.000 markers.py:33(InvalidMarker)
        1    0.000    0.000    0.000    0.000 mock.py:2112(AsyncMagicMixin)
        1    0.000    0.000    0.000    0.000 diophantine.py:958(GeneralSumOfSquares)
        1    0.000    0.000    0.000    0.000 instancenorm.py:77(InstanceNorm1d)
        1    0.000    0.000    0.000    0.000 exceptions.py:58(ModuleDeprecationWarning)
        1    0.000    0.000    0.000    0.000 errors.py:1(Error)
        1    0.000    0.000    0.000    0.000 cyaml.py:158(CDumper)
        1    0.000    0.000    0.000    0.000 argparse.py:669(RawDescriptionHelpFormatter)
        1    0.000    0.000    0.000    0.000 argparse.py:1144(_ChoicesPseudoAction)
        1    0.000    0.000    0.000    0.000 qs.py:36(FactorBaseElem)
        1    0.000    0.000    0.000    0.000 constraints.py:222(_Boolean)
        1    0.000    0.000    0.000    0.000 _exceptions.py:80(_UFuncInputCastingError)
        1    0.000    0.000    0.000    0.000 csv.py:64(excel_tab)
        1    0.000    0.000    0.000    0.000 _pep440.py:141(<lambda>)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1129(MeijerShiftB)
        1    0.000    0.000    0.000    0.000 _memory_viz.py:313(PlotWriter)
        1    0.000    0.000    0.000    0.000 mathtext.py:1938(Fill)
        1    0.000    0.000    0.000    0.000 exceptions.py:26(DuplicateEditVariable)
        1    0.000    0.000    0.000    0.000 <decorator-gen-1>:1(<module>)
        1    0.000    0.000    0.000    0.000 argparse.py:204(_Section)
        1    0.000    0.000    0.000    0.000 dataframes.py:311(CaptureMul)
        1    0.000    0.000    0.000    0.000 constraints.py:466(_Square)
        1    0.000    0.000    0.000    0.000 legend_handler.py:423(HandlerCircleCollection)
        1    0.000    0.000    0.000    0.000 unicode.py:314(Arabic)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:780(LSQUnivariateSpline)
        1    0.000    0.000    0.000    0.000 ElementTree.py:106(ParseError)
        1    0.000    0.000    0.000    0.000 pooling.py:1078(AdaptiveMaxPool3d)
        1    0.000    0.000    0.000    0.000 core.py:84(MaskedArrayFutureWarning)
        1    0.000    0.000    0.000    0.000 index_tricks.py:435(RClass)
        1    0.000    0.000    0.000    0.000 results.py:103(List)
        1    0.000    0.000    0.000    0.000 case.py:192(_BaseTestCaseContext)
        1    0.000    0.000    0.000    0.000 _python_dispatch.py:97(BaseTorchDispatchMode)
        1    0.000    0.000    0.000    0.000 mathtext.py:1318(STIXSansFontConstants)
        1    0.000    0.000    0.000    0.000 patches.py:3060(CurveA)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:949(SingletonMeta)
        1    0.000    0.000    0.000    0.000 ticker.py:325(NullFormatter)
        1    0.000    0.000    0.000    0.000 unix_events.py:798(_UnixSubprocessTransport)
        1    0.000    0.000    0.000    0.000 package_exporter.py:120(EmptyMatchError)
        1    0.000    0.000    0.000    0.000 patches.py:2200(Round4)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:980(NoExtraItemsType)
        1    0.000    0.000    0.000    0.000 _bvp.py:515(BVPResult)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:107(<listcomp>)
        1    0.000    0.000    0.000    0.000 _basinhopping.py:262(RandomDisplacement)
        1    0.000    0.000    0.000    0.000 _dual_annealing.py:366(ObjectiveFunWrapper)
        1    0.000    0.000    0.000    0.000 argparse.py:720(MetavarTypeHelpFormatter)
        1    0.000    0.000    0.000    0.000 patches.py:2080(RArrow)
        1    0.000    0.000    0.000    0.000 bezier.py:25(NonIntersectingPathException)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:949(Operator)
        1    0.000    0.000    0.000    0.000 rootoftools.py:152(RootOf)
        1    0.000    0.000    0.000    0.000 patches.py:3242(BracketAB)
        1    0.000    0.000    0.000    0.000 tokens.py:294(AliasToken)
        1    0.000    0.000    0.000    0.000 decorator.py:254(ContextManager)
        1    0.000    0.000    0.000    0.000 constraints.py:380(_HalfOpenInterval)
        1    0.000    0.000    0.000    0.000 fused.py:40(LinearReLU)
        1    0.000    0.000    0.000    0.000 __init__.py:323(device_of)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:1173(_DOF_estimator_min_E)
        1    0.000    0.000    0.000    0.000 _spectral.py:11(_NoConvergence)
        1    0.000    0.000    0.000    0.000 design_patterns.py:128(NullStream)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1140(MeijerShiftC)
        1    0.000    0.000    0.000    0.000 unicode.py:213(Chinese)
        1    0.000    0.000    0.000    0.000 error.py:248(MantissaNoDotYAML1_1Warning)
        1    0.000    0.000    0.000    0.000 argparse.py:1242(_ExtendAction)
        1    0.000    0.000    0.000    0.000 sympy_parser.py:86(ParenthesisGroup)
        1    0.000    0.000    0.000    0.000 unicode.py:148(LatinA)
        1    0.000    0.000    0.000    0.000 deprecation.py:7(MatplotlibDeprecationWarning)
        1    0.000    0.000    0.000    0.000 _factories.py:19(_TzFactory)
        1    0.000    0.000    0.000    0.000 base_subprocess.py:281(ReadSubprocessPipeProto)
        1    0.000    0.000    0.000    0.000 simplex.py:77(UnboundedLPError)
        1    0.000    0.000    0.000    0.000 pickletools.py:1093(OpcodeInfo)
        1    0.000    0.000    0.000    0.000 streamplot.py:233(StreamplotSet)
        1    0.000    0.000    0.000    0.000 decorator.py:46(get_init)
        1    0.000    0.000    0.000    0.000 __init__.py:165(c_short)
        1    0.000    0.000    0.000    0.000 ImageFile.py:723(PyCodecState)
        1    0.000    0.000    0.000    0.000 core.py:3745(StringStart)
        1    0.000    0.000    0.000    0.000 _testutils.py:51(FPUModeChangeWarning)
        1    0.000    0.000    0.000    0.000 threading.py:1400(_MainThread)
        1    0.000    0.000    0.000    0.000 representer.py:48(RepresenterError)
        1    0.000    0.000    0.000    0.000 events.py:253(MappingStartEvent)
        1    0.000    0.000    0.000    0.000 _typing.py:68(SupportsArrayNamespace)
        1    0.000    0.000    0.000    0.000 core.py:893(_MaskedUFunc)
        1    0.000    0.000    0.000    0.000 _array_like.py:160(_UnknownType)
        1    0.000    0.000    0.000    0.000 core.py:3632(PositionToken)
        1    0.000    0.000    0.000    0.000 constraints.py:398(_Simplex)
        1    0.000    0.000    0.000    0.000 __init__.py:201(DeferredCudaCallError)
        1    0.000    0.000    0.000    0.000 __init__.py:281(sic)
        1    0.000    0.000    0.000    0.000 functions.py:138(NoShapeError)
        1    0.000    0.000    0.000    0.000 cache.py:45(__cacheit)
        1    0.000    0.000    0.000    0.000 fused.py:67(ConvBnReLU1d)
        1    0.000    0.000    0.000    0.000 dviread.py:734(Tfm)
        1    0.000    0.000    0.000    0.000 constraints.py:303(_Real)
        1    0.000    0.000    0.000    0.000 error.py:73(ContentTooShortError)
        1    0.000    0.000    0.000    0.000 errors.py:81(HeaderDefect)
        1    0.000    0.000    0.000    0.000 units.py:189(Registry)
        1    0.000    0.000    0.000    0.000 unicode.py:239(Kanji)
        1    0.000    0.000    0.000    0.000 numbers.py:2315(_MultisetHistogram)
        1    0.000    0.000    0.000    0.000 parsing.py:52(NotParenUncert)
        1    0.000    0.000    0.000    0.000 <decorator-gen-2>:1(<module>)
        2    0.000    0.000    0.000    0.000 index_tricks.py:761(__init__)
        1    0.000    0.000    0.000    0.000 exceptions.py:47(ComplexWarning)
        1    0.000    0.000    0.000    0.000 mathtext.py:2025(SubSuperCluster)
        1    0.000    0.000    0.000    0.000 _optimize.py:1152(_LineSearchError)
        1    0.000    0.000    0.000    0.000 orderings.py:54(ReversedGradedLexOrder)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:1078(_DOF_estimator_user)
        1    0.000    0.000    0.000    0.000 animation.py:613(FFMpegWriter)
        1    0.000    0.000    0.000    0.000 analyzer.py:66(SymmetryUndeterminedError)
        1    0.000    0.000    0.000    0.000 connection.py:786(XmlListener)
        1    0.000    0.000    0.000    0.000 function.py:576(InplaceFunction)
        1    0.000    0.000    0.000    0.000 types.py:26(SymInt)
        1    0.000    0.000    0.000    0.000 core.py:4783(_Indent)
        1    0.000    0.000    0.000    0.000 configparser.py:276(InterpolationSyntaxError)
        1    0.000    0.000    0.000    0.000 _sf_error.py:5(SpecialFunctionWarning)
        1    0.000    0.000    0.000    0.000 __init__.py:414(_make_alias)
        1    0.000    0.000    0.000    0.000 groundtypes.py:25(_GMPYRational)
        1    0.000    0.000    0.000    0.000 socket.py:211(_GiveupOnSendfile)
        1    0.000    0.000    0.000    0.000 pooling.py:1199(AdaptiveAvgPool3d)
        1    0.000    0.000    0.000    0.000 pathlib.py:834(PurePosixPath)
        1    0.000    0.000    0.000    0.000 geo.py:322(InvertedHammerTransform)
        1    0.000    0.000    0.000    0.000 ticker.py:1889(NullLocator)
        1    0.000    0.000    0.000    0.000 context.py:242(__init__)
        1    0.000    0.000    0.000    0.000 mock.py:2118(MagicMock)
        1    0.000    0.000    0.000    0.000 _monitor.py:9(TqdmSynchronisationWarning)
        1    0.000    0.000    0.000    0.000 core.py:861(_DomainGreater)
        1    0.000    0.000    0.000    0.000 six.py:245(_MovedItems)
        1    0.000    0.000    0.000    0.000 error.py:228(ReusedAnchorWarning)
        1    0.000    0.000    0.000    0.000 _lil.py:570(lil_matrix)
        1    0.000    0.000    0.000    0.000 _base.py:24(SparseFormatWarning)
        1    0.000    0.000    0.000    0.000 spectral_norm.py:205(SpectralNormStateDictHook)
        1    0.000    0.000    0.000    0.000 package_importer.py:658(_PathNode)
        1    0.000    0.000    0.000    0.000 geo.py:304(HammerTransform)
        1    0.000    0.000    0.000    0.000 exceptions.py:6(MatrixError)
        1    0.000    0.000    0.000    0.000 datapipes.py:30(PerRowDataFramesPipe)
        1    0.000    0.000    0.000    0.000 _optimize.py:544(_MaxFuncCallError)
        1    0.000    0.000    0.000    0.000 calculus.py:1(CalculusMethods)
        1    0.000    0.000    0.000    0.000 fetch.py:45(_MapDatasetFetcher)
        1    0.000    0.000    0.000    0.000 parse.py:328(ParseResult)
        1    0.000    0.000    0.000    0.000 diophantine.py:1134(GeneralSumOfEvenPowers)
        1    0.000    0.000    0.000    0.000 dataframes.py:268(CaptureGetItem)
        1    0.000    0.000    0.000    0.000 unicode.py:246(Hiragana)
        1    0.000    0.000    0.000    0.000 core.py:5305(_NullToken)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:2163(RectSphereBivariateSpline)
        1    0.000    0.000    0.000    0.000 patches.py:3420(Fancy)
        1    0.000    0.000    0.000    0.000 mathtext.py:2040(AutoHeightChar)
        1    0.000    0.000    0.000    0.000 comments.py:52(__init__)
        1    0.000    0.000    0.000    0.000 <decorator-gen-0>:1(<module>)
        1    0.000    0.000    0.000    0.000 dense.py:115(MutableDenseMatrix)
        1    0.000    0.000    0.000    0.000 fused.py:49(ConvBn1d)
        1    0.000    0.000    0.000    0.000 datapipes.py:83(FilterDataFramesPipe)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1151(MeijerShiftD)
        1    0.000    0.000    0.000    0.000 __init__.py:256(c_wchar_p)
        1    0.000    0.000    0.000    0.000 _multivariate.py:4083(random_correlation_frozen)
        1    0.000    0.000    0.000    0.000 __init__.py:2229(createLock)
        1    0.000    0.000    0.000    0.000 _ops.py:588(_PyOpNamespace)
        1    0.000    0.000    0.000    0.000 _axis_nan_policy.py:37(SmallSampleWarning)
        1    0.000    0.000    0.000    0.000 patches.py:3508(Wedge)
        1    0.000    0.000    0.000    0.000 headerregistry.py:387(SingleAddressHeader)
        1    0.000    0.000    0.000    0.000 _vertex.py:446(FieldWrapper)
        1    0.000    0.000    0.000    0.000 polysys.py:35(SolveFailed)
        1    0.000    0.000    0.000    0.000 process.py:349(AuthenticationString)
        1    0.000    0.000    0.000    0.000 nodes.py:107(CollectionNode)
        1    0.000    0.000    0.000    0.000 assumptions.py:680(ManagedProperties)
        1    0.000    0.000    0.000    0.000 extras.py:1637(mr_class)
        1    0.000    0.000    0.000    0.000 scalarstring.py:66(FoldedScalarString)
        1    0.000    0.000    0.000    0.000 _sparse.py:6(SparseABC)
        1    0.000    0.000    0.000    0.000 optimization.py:104(MNewton)
        1    0.000    0.000    0.000    0.000 legend_handler.py:176(HandlerNpointsYoffsets)
        1    0.000    0.000    0.000    0.000 utils.py:18(InvalidName)
        1    0.000    0.000    0.000    0.000 periodic_table.py:1586(Specie)
        1    0.000    0.000    0.000    0.000 abc.py:267(FileLoader)
        1    0.000    0.000    0.000    0.000 inputs.py:1178(BadIncarWarning)
        1    0.000    0.000    0.000    0.000 client.py:1470(UnknownProtocol)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1809(DraggableAnnotation)
        2    0.000    0.000    0.000    0.000 ops.py:173(no_complex_result)
        1    0.000    0.000    0.000    0.000 version.py:59(InvalidVersion)
        1    0.000    0.000    0.000    0.000 structure.py:5574(StructureError)
        1    0.000    0.000    0.000    0.000 patches.py:2428(SimpleEvent)
        1    0.000    0.000    0.000    0.000 _mio5_params.py:225(mat_struct)
        1    0.000    0.000    0.000    0.000 argparse.py:680(RawTextHelpFormatter)
        1    0.000    0.000    0.000    0.000 _script.py:264(ScriptMeta)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1207(Event)
        1    0.000    0.000    0.000    0.000 ticker.py:1138(LogFormatterExponent)
        1    0.000    0.000    0.000    0.000 unicode.py:258(Katakana)
        1    0.000    0.000    0.000    0.000 _tzpath.py:170(InvalidTZPathWarning)
        1    0.000    0.000    0.000    0.000 __init__.py:519(FileHash)
        1    0.000    0.000    0.000    0.000 calendar.py:33(IllegalWeekdayError)
        1    0.000    0.000    0.000    0.000 batchnorm.py:233(BatchNorm1d)
        1    0.000    0.000    0.000    0.000 _parser.py:29(Variable)
        1    0.000    0.000    0.000    0.000 logic.py:391(Or)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:700(Section)
        1    0.000    0.000    0.000    0.000 scalarstring.py:75(SingleQuotedScalarString)
        1    0.000    0.000    0.000    0.000 request.py:1244(ProxyDigestAuthHandler)
        1    0.000    0.000    0.000    0.000 activation.py:1338(Tanhshrink)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1341(SubArrayFormat)
        1    0.000    0.000    0.000    0.000 tokens.py:303(AnchorToken)
        1    0.000    0.000    0.000    0.000 dataframes.py:337(CaptureGetAttr)
        1    0.000    0.000    0.000    0.000 net_min_base.py:31(FxNetMinimizerBadModuleError)
        1    0.000    0.000    0.000    0.000 _factories.py:55(_TzStrFactory)
        1    0.000    0.000    0.000    0.000 unicode.py:200(Cyrillic)
        1    0.000    0.000    0.000    0.000 core.py:720(NegativeStdDev)
        1    0.000    0.000    0.000    0.000 nodes.py:125(SequenceNode)
        1    0.000    0.000    0.000    0.000 patches.py:2532(Angle3)
        1    0.000    0.000    0.000    0.000 _docscrape.py:615(ObjDoc)
        1    0.000    0.000    0.000    0.000 argparse.py:1009(_AppendAction)
        1    0.000    0.000    0.000    0.000 exceptions.py:4(ClosureFailure)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:807(ParameterizedHeaderValue)
        1    0.000    0.000    0.000    0.000 tokens.py:321(ScalarToken)
        1    0.000    0.000    0.000    0.000 results.py:19(<genexpr>)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:862(Header)
        1    0.000    0.000    0.000    0.000 warnings.py:89(InformationOnly)
        1    0.000    0.000    0.000    0.000 resolver.py:135(<dictcomp>)
        1    0.000    0.000    0.000    0.000 splitter_base.py:182(FxNetSplitterInternalError)
        1    0.000    0.000    0.000    0.000 single.py:37(ODEMatchError)
        1    0.000    0.000    0.000    0.000 polyerrors.py:30(PolynomialDivisionFailed)
        1    0.000    0.000    0.000    0.000 _typing.py:22(GenericMeta)
        1    0.000    0.000    0.000    0.000 legend_handler.py:689(HandlerPolyCollection)
        1    0.000    0.000    0.000    0.000 vq.py:84(ClusterError)
        1    0.000    0.000    0.000    0.000 cyaml.py:38(CSafeLoader)
        1    0.000    0.000    0.000    0.000 _array_api.py:582(<listcomp>)
        1    0.000    0.000    0.000    0.000 importer.py:16(ObjNotFoundError)
        1    0.000    0.000    0.000    0.000 __init__.py:752(LinkOutsideDestinationError)
        1    0.000    0.000    0.000    0.000 mock.py:2778(_SpecState)
        1    0.000    0.000    0.000    0.000 polar.py:185(ThetaFormatter)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1228(DrawEvent)
        1    0.000    0.000    0.000    0.000 tokens.py:312(TagToken)
        1    0.000    0.000    0.000    0.000 rl.py:43(glom)
        1    0.000    0.000    0.000    0.000 libmpf.py:132(h_mask_big)
        1    0.000    0.000    0.000    0.000 constraints.py:481(_Symmetric)
        1    0.000    0.000    0.000    0.000 _basinhopping.py:285(MinimizerWrapper)
        2    0.000    0.000    0.000    0.000 _multiufuncs.py:66(_override_ufunc_default_args)
        1    0.000    0.000    0.000    0.000 facts.py:565(InconsistentAssumptions)
        1    0.000    0.000    0.000    0.000 _elffile.py:19(ELFInvalid)
        1    0.000    0.000    0.000    0.000 composition.py:1396(CompositionError)
        1    0.000    0.000    0.000    0.000 argparse.py:754(ArgumentError)
        1    0.000    0.000    0.000    0.000 _monkeytype_config.py:158(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:735(OutsideDestinationError)
        2    0.000    0.000    0.000    0.000 ordinals.py:83(<listcomp>)
        1    0.000    0.000    0.000    0.000 parser.py:126(BytesHeaderParser)
        1    0.000    0.000    0.000    0.000 zipfile.py:641(LZMADecompressor)
        2    0.000    0.000    0.000    0.000 distributed_c10d.py:313(default_pg)
        1    0.000    0.000    0.000    0.000 discovery.py:263(FlatLayoutModuleFinder)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1002(MultOperator)
        1    0.000    0.000    0.000    0.000 libmpf.py:43(ComplexResult)
        1    0.000    0.000    0.000    0.000 __init__.py:82(is_available)
        1    0.000    0.000    0.000    0.000 ticker.py:395(FormatStrFormatter)
        1    0.000    0.000    0.000    0.000 rcsetup.py:1039(_ignorecase)
        1    0.000    0.000    0.000    0.000 dumper.py:171(RoundTripDumper)
        1    0.000    0.000    0.000    0.000 conflict.py:3(AmbiguityWarning)
        1    0.000    0.000    0.000    0.000 mathtext.py:1840(Vrule)
        1    0.000    0.000    0.000    0.000 dumper.py:71(SafeDumper)
        1    0.000    0.000    0.000    0.000 scanner.py:2037(BlankLineComment)
        1    0.000    0.000    0.000    0.000 tokens.py:246(BlockEndToken)
        1    0.000    0.000    0.000    0.000 <decorator-gen-3>:1(<module>)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1022(ShiftB)
        1    0.000    0.000    0.000    0.000 calendar.py:162(setfirstweekday)
        1    0.000    0.000    0.000    0.000 request.py:1641(DataHandler)
        1    0.000    0.000    0.000    0.000 mathtext.py:212(MathtextBackendBitmap)
        1    0.000    0.000    0.000    0.000 configparser.py:340(MissingSectionHeaderError)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1298(MeijerUnShiftD)
        1    0.000    0.000    0.000    0.000 fused.py:22(ConvReLU2d)
        1    0.000    0.000    0.000    0.000 _ufunc_config.py:360(_unspecified)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1260(AnchoredText)
        1    0.000    0.000    0.000    0.000 polyoptions.py:61(OptionType)
        1    0.000    0.000    0.000    0.000 scanner.py:57(SimpleKey)
        1    0.000    0.000    0.000    0.000 config.py:1(<module>)
        1    0.000    0.000    0.000    0.000 profiler_util.py:622(MemRecordsAcc)
        1    0.000    0.000    0.000    0.000 extras.py:263(_fromnxfunction_single)
        1    0.000    0.000    0.000    0.000 wavfile.py:27(WavFileWarning)
        1    0.000    0.000    0.000    0.000 events.py:108(StreamStartEvent)
        1    0.000    0.000    0.000    0.000 modules.py:1096(ModuleOrder)
        1    0.000    0.000    0.000    0.000 coreerrors.py:6(BaseCoreError)
        1    0.000    0.000    0.000    0.000 instancenorm.py:308(InstanceNorm3d)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:1615(_DefaultMixin)
        1    0.000    0.000    0.000    0.000 serialization.py:52(SourceChangeWarning)
        1    0.000    0.000    0.000    0.000 _dia.py:604(dia_matrix)
        1    0.000    0.000    0.000    0.000 utils.py:77(_ntuple_from_first)
        1    0.000    0.000    0.000    0.000 backend_tools.py:439(ToolEnableNavigation)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:706(Value)
        1    0.000    0.000    0.000    0.000 dataframes.py:231(CaptureVariableAssign)
        1    0.000    0.000    0.000    0.000 pretty_symbology.py:41(pretty_use_unicode)
        1    0.000    0.000    0.000    0.000 _utils.py:769(_ClassPropertyDescriptor)
        1    0.000    0.000    0.000    0.000 exceptions.py:33(UnknownConstraint)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:821(ContentType)
        1    0.000    0.000    0.000    0.000 request.py:1416(UnknownHandler)
        1    0.000    0.000    0.000    0.000 __init__.py:240(c_char_p)
        1    0.000    0.000    0.000    0.000 _arffread.py:54(ArffError)
        1    0.000    0.000    0.000    0.000 polyerrors.py:67(HeuristicGCDFailed)
        1    0.000    0.000    0.000    0.000 singleton.py:158(Singleton)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:273(_ExtensionsSpecialForm)
        1    0.000    0.000    0.000    0.000 six.py:340(Module_six_moves_urllib_parse)
        1    0.000    0.000    0.000    0.000 dist.py:1119(DistDeprecationWarning)
        1    0.000    0.000    0.000    0.000 optimization.py:517(ANewton)
        1    0.000    0.000    0.000    0.000 fused.py:10(_FusedModule)
        1    0.000    0.000    0.000    0.000 engine.py:20(DiagnosticError)
        1    0.000    0.000    0.000    0.000 __init__.py:13(_PyFutureMeta)
        1    0.000    0.000    0.000    0.000 container.py:46(BarContainer)
        1    0.000    0.000    0.000    0.000 deprecation.py:325(_deprecated_parameter_class)
        1    0.000    0.000    0.000    0.000 _script.py:352(ConstMap)
        1    0.000    0.000    0.000    0.000 core.py:4789(_IndentGreater)
        1    0.000    0.000    0.000    0.000 polyerrors.py:155(PolificationFailed)
        1    0.000    0.000    0.000    0.000 {method 'isdecimal' of 'str' objects}
        1    0.000    0.000    0.000    0.000 exceptions.py:3(GeometryError)
        1    0.000    0.000    0.000    0.000 patches.py:3147(CurveFilledAB)
        1    0.000    0.000    0.000    0.000 case.py:25(SkipTest)
        1    0.000    0.000    0.000    0.000 pathlib.py:844(PureWindowsPath)
        1    0.000    0.000    0.000    0.000 dates.py:1558(MonthLocator)
        1    0.000    0.000    0.000    0.000 _threadsafety.py:9(ReentrancyError)
        1    0.000    0.000    0.000    0.000 _parser.py:39(Op)
        1    0.000    0.000    0.000    0.000 <decorator-gen-4>:1(<module>)
        1    0.000    0.000    0.000    0.000 pydoc.py:1545(_PlainTextDoc)
        1    0.000    0.000    0.000    0.000 _base.py:28(SparseEfficiencyWarning)
        1    0.000    0.000    0.000    0.000 diophantine.py:676(InhomogeneousTernaryQuadratic)
        1    0.000    0.000    0.000    0.000 diophantine.py:918(InhomogeneousGeneralQuadratic)
        1    0.000    0.000    0.000    0.000 backend_managers.py:27(ToolManagerMessageEvent)
        1    0.000    0.000    0.000    0.000 outputs.py:4533(VaspParseError)
        1    0.000    0.000    0.000    0.000 polyerrors.py:71(ModularGCDFailed)
        1    0.000    0.000    0.000    0.000 constraints.py:427(_LowerTriangular)
        1    0.000    0.000    0.000    0.000 _comparison.py:306(UnsupportedInputs)
        1    0.000    0.000    0.000    0.000 pathlib.py:43(_is_wildcard_pattern)
        1    0.000    0.000    0.000    0.000 mathtext.py:1944(Filll)
        1    0.000    0.000    0.000    0.000 patches.py:2632(Arc)
        1    0.000    0.000    0.000    0.000 errors.py:33(InvalidConfigError)
        1    0.000    0.000    0.000    0.000 argparse.py:952(_StoreConstAction)
        2    0.000    0.000    0.000    0.000 groundtypes.py:26(__init__)
        1    0.000    0.000    0.000    0.000 evalf.py:65(PrecisionExhausted)
        1    0.000    0.000    0.000    0.000 patches.py:2570(Angle)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:845(MsgID)
        1    0.000    0.000    0.000    0.000 _monkeytype_config.py:157(JitTypeTraceStore)
        1    0.000    0.000    0.000    0.000 exceptions.py:265(ParseException)
        1    0.000    0.000    0.000    0.000 _mio5_params.py:256(MatlabFunction)
        1    0.000    0.000    0.000    0.000 scanner.py:2030(FullLineComment)
        1    0.000    0.000    0.000    0.000 events.py:709(_RunningLoop)
        1    0.000    0.000    0.000    0.000 errors.py:41(NoBoundaryInMultipartDefect)
        1    0.000    0.000    0.000    0.000 batchnorm.py:413(LazyBatchNorm2d)
        1    0.000    0.000    0.000    0.000 ctx_base.py:21(Context)
        1    0.000    0.000    0.000    0.000 errors.py:27(CallHintViolationWarning)
        1    0.000    0.000    0.000    0.000 pickle.py:73(PickleError)
        1    0.000    0.000    0.000    0.000 __init__.py:78(UnidentifiedImageError)
        1    0.000    0.000    0.000    0.000 tokens.py:231(StreamEndToken)
        1    0.000    0.000    0.000    0.000 indexed.py:120(IndexException)
        1    0.000    0.000    0.000    0.000 quadrature.py:389(GaussLegendre)
        1    0.000    0.000    0.000    0.000 specifiers.py:32(InvalidSpecifier)
        1    0.000    0.000    0.000    0.000 error.py:109(CommentMark)
        1    0.000    0.000    0.000    0.000 queues.py:11(QueueEmpty)
        1    0.000    0.000    0.000    0.000 Image.py:70(DecompressionBombWarning)
        1    0.000    0.000    0.000    0.000 optimization.py:290(Bisection)
        1    0.000    0.000    0.000    0.000 core.py:822(_DomainTan)
        1    0.000    0.000    0.000    0.000 _parser.py:1608(UnknownTimezoneWarning)
        1    0.000    0.000    0.000    0.000 core.py:5012(Located)
        1    0.000    0.000    0.000    0.000 _fortran.py:13(FortranEOFError)
        1    0.000    0.000    0.000    0.000 serializer.py:29(SerializerError)
        1    0.000    0.000    0.000    0.000 _docscrape.py:101(ParseError)
        1    0.000    0.000    0.000    0.000 optimization.py:213(Muller)
        1    0.000    0.000    0.000    0.000 datapipes.py:59(ShuffleDataFramesPipe)
        1    0.000    0.000    0.000    0.000 context.py:302(ForkContext)
        2    0.000    0.000    0.000    0.000 _compression.py:36(readable)
        1    0.000    0.000    0.000    0.000 ticker.py:2883(AutoLocator)
        1    0.000    0.000    0.000    0.000 transforms.py:2725(TransformedPatchPath)
        1    0.000    0.000    0.000    0.000 _miobase.py:20(MatReadError)
        1    0.000    0.000    0.000    0.000 _dok.py:536(dok_array)
        1    0.000    0.000    0.000    0.000 _base.py:45(Error)
        1    0.000    0.000    0.000    0.000 patches.py:3274(BracketA)
        1    0.000    0.000    0.000    0.000 ticker.py:414(StrMethodFormatter)
        1    0.000    0.000    0.000    0.000 transforms.py:2542(BboxTransformToMaxOnly)
        1    0.000    0.000    0.000    0.000 _monkeytype_config.py:161(JitTypeTraceConfig)
        1    0.000    0.000    0.000    0.000 pathlib.py:347(_WildcardSelector)
        1    0.000    0.000    0.000    0.000 __init__.py:747(AbsoluteLinkError)
        1    0.000    0.000    0.000    0.000 optimization.py:159(Halley)
        1    0.000    0.000    0.000    0.000 serialization.py:258(_open_buffer_reader)
        1    0.000    0.000    0.000    0.000 parse.py:323(SplitResult)
        1    0.000    0.000    0.000    0.000 _coo.py:1463(coo_matrix)
        1    0.000    0.000    0.000    0.000 hyperbolic.py:1200(InverseHyperbolicFunction)
        1    0.000    0.000    0.000    0.000 codeprinter.py:31(AssignmentError)
        1    0.000    0.000    0.000    0.000 patches.py:3129(CurveFilledB)
        1    0.000    0.000    0.000    0.000 core.py:5174(OneOrMore)
        1    0.000    0.000    0.000    0.000 animation.py:735(ImageMagickWriter)
        1    0.000    0.000    0.000    0.000 _nonlin.py:32(NoConvergence)
        1    0.000    0.000    0.000    0.000 optimization.py:458(Ridder)
        1    0.000    0.000    0.000    0.000 constraints.py:504(_PositiveDefinite)
        1    0.000    0.000    0.000    0.000 client.py:1507(BadStatusLine)
        1    0.000    0.000    0.000    0.000 error.py:48(FileMark)
        1    0.000    0.000    0.000    0.000 _coo.py:1352(coo_array)
        1    0.000    0.000    0.000    0.000 _typing.py:151(DTypesNumeric)
        1    0.000    0.000    0.000    0.000 argparse.py:975(_StoreTrueAction)
        1    0.000    0.000    0.000    0.000 __init__.py:11(_PyAwaitMeta)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:2223(_TypeFormForm)
        1    0.000    0.000    0.000    0.000 dates.py:1677(SecondLocator)
        1    0.000    0.000    0.000    0.000 _parser.py:34(Value)
        1    0.000    0.000    0.000    0.000 patches.py:2726(Bar)
        1    0.000    0.000    0.000    0.000 main.py:773(<listcomp>)
        1    0.000    0.000    0.000    0.000 argparse.py:1074(_CountAction)
        1    0.000    0.000    0.000    0.000 pyplot.py:121(_NotIPython)
        1    0.000    0.000    0.000    0.000 shutil.py:61(Error)
        1    0.000    0.000    0.000    0.000 units.py:144(UnitError)
        1    0.000    0.000    0.000    0.000 _pep440.py:150(<lambda>)
        1    0.000    0.000    0.000    0.000 dataframes.py:298(CaptureAdd)
        1    0.000    0.000    0.000    0.000 figure.py:154(AxesStack)
        1    0.000    0.000    0.000    0.000 mathtext.py:1950(NegFil)
        1    0.000    0.000    0.000    0.000 emitter.py:1777(RoundTripEmitter)
        1    0.000    0.000    0.000    0.000 request.py:641(HTTPDefaultErrorHandler)
        1    0.000    0.000    0.000    0.000 pathlib.py:1391(PosixPath)
        1    0.000    0.000    0.000    0.000 legend_handler.py:412(HandlerPathCollection)
        1    0.000    0.000    0.000    0.000 exceptions.py:10(CancelledError)
        1    0.000    0.000    0.000    0.000 transforms.py:1454(HankelTransform)
        1    0.000    0.000    0.000    0.000 exceptions.py:18(DMBadInputError)
        1    0.000    0.000    0.000    0.000 facts.py:252(TautologyDetected)
        1    0.000    0.000    0.000    0.000 utils.py:117(_lazy_property_and_property)
        1    0.000    0.000    0.000    0.000 __init__.py:14(_Await)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1235(BoolFormat)
        1    0.000    0.000    0.000    0.000 mathtext.py:1070(StixSansFonts)
        1    0.000    0.000    0.000    0.000 ticker.py:1202(LogFormatterSciNotation)
        1    0.000    0.000    0.000    0.000 ticker.py:434(OldScalarFormatter)
        1    0.000    0.000    0.000    0.000 mathtext.py:1956(NegFill)
        1    0.000    0.000    0.000    0.000 configparser.py:264(InterpolationMissingOptionError)
        1    0.000    0.000    0.000    0.000 _fitpack2.py:1979(LSQSphereBivariateSpline)
        1    0.000    0.000    0.000    0.000 _fitpack_repro.py:537(Bunch)
        1    0.000    0.000    0.000    0.000 errors.py:8(MessageError)
        1    0.000    0.000    0.000    0.000 zipfile.py:43(BadZipFile)
        1    0.000    0.000    0.000    0.000 mathtext.py:1829(Hrule)
        1    0.000    0.000    0.000    0.000 scalarstring.py:84(DoubleQuotedScalarString)
        1    0.000    0.000    0.000    0.000 process.py:397(_MainProcess)
        1    0.000    0.000    0.000    0.000 _elementwise_iterative_method.py:114(<listcomp>)
        1    0.000    0.000    0.000    0.000 misc.py:13(Undecidable)
        1    0.000    0.000    0.000    0.000 inverselaplace.py:354(deHoog)
        1    0.000    0.000    0.000    0.000 legend_handler.py:208(HandlerLine2D)
        1    0.000    0.000    0.000    0.000 sympify.py:49(CantSympify)
        1    0.000    0.000    0.000    0.000 serialization.py:264(_open_buffer_writer)
        1    0.000    0.000    0.000    0.000 _nonlin.py:955(BroydenSecond)
        1    0.000    0.000    0.000    0.000 core.py:830(__init__)
        1    0.000    0.000    0.000    0.000 _subplots.py:218(<genexpr>)
        1    0.000    0.000    0.000    0.000 hyperexpand.py:1247(MeijerUnShiftC)
        1    0.000    0.000    0.000    0.000 optimization.py:602(MDNewton)
        1    0.000    0.000    0.000    0.000 profiler_util.py:613(StringTable)
        1    0.000    0.000    0.000    0.000 pathlib.py:1398(WindowsPath)
        1    0.000    0.000    0.000    0.000 shutil.py:64(SameFileError)
        1    0.000    0.000    0.000    0.000 _ltisys.py:1699(StateSpaceDiscrete)
        1    0.000    0.000    0.000    0.000 dataframes.py:169(CaptureF)
        1    0.000    0.000    0.000    0.000 context.py:310(ForkServerContext)
        1    0.000    0.000    0.000    0.000 _mio5.py:445(EmptyStructMarker)
        1    0.000    0.000    0.000    0.000 tokens.py:210(DocumentStartToken)
        1    0.000    0.000    0.000    0.000 units.py:54(ConversionError)
        1    0.000    0.000    0.000    0.000 systems.py:37(ODENonlinearError)
        1    0.000    0.000    0.000    0.000 ivp.py:24(OdeResult)
        1    0.000    0.000    0.000    0.000 case.py:334(_OrderedChainMap)
        1    0.000    0.000    0.000    0.000 dropout.py:237(FeatureAlphaDropout)
        1    0.000    0.000    0.000    0.000 loader.py:39(SafeLoader)
        1    0.000    0.000    0.000    0.000 optimization.py:357(Illinois)
        1    0.000    0.000    0.000    0.000 context.py:306(SpawnContext)
        1    0.000    0.000    0.000    0.000 index_tricks.py:537(CClass)
        1    0.000    0.000    0.000    0.000 linalg.py:67(LinAlgError)
        1    0.000    0.000    0.000    0.000 mathtext.py:1968(SsGlue)
        1    0.000    0.000    0.000    0.000 alphabets.py:1(<module>)
        1    0.000    0.000    0.000    0.000 polyerrors.py:57(OperationNotSupported)
        1    0.000    0.000    0.000    0.000 transforms.py:453(MellinTransformStripError)
        1    0.000    0.000    0.000    0.000 configparser.py:243(NoOptionError)
        1    0.000    0.000    0.000    0.000 scalarint.py:100(HexInt)
        1    0.000    0.000    0.000    0.000 _typing.py:134(DTypesIntegral)
        1    0.000    0.000    0.000    0.000 repmatrix.py:186(<genexpr>)
        1    0.000    0.000    0.000    0.000 arrayprint.py:1336(TimedeltaFormat)
        1    0.000    0.000    0.000    0.000 galois_resolvents.py:39(GaloisGroupException)
        1    0.000    0.000    0.000    0.000 fused.py:131(LinearLeakyReLU)
        1    0.000    0.000    0.000    0.000 fused.py:140(LinearTanh)
        1    0.000    0.000    0.000    0.000 streamplot.py:416(InvalidIndexError)
        1    0.000    0.000    0.000    0.000 errors.py:5(PreprocessError)
        1    0.000    0.000    0.000    0.000 _ltisys.py:814(TransferFunctionDiscrete)
        1    0.000    0.000    0.000    0.000 function.py:103(PoleError)
        1    0.000    0.000    0.000    0.000 requirements.py:15(InvalidRequirement)
        1    0.000    0.000    0.000    0.000 _adapters.py:143(__init__)
        1    0.000    0.000    0.000    0.000 ordinals.py:253(OrdinalZero)
        1    0.000    0.000    0.000    0.000 constraints.py:438(_LowerCholesky)
        1    0.000    0.000    0.000    0.000 _fortran.py:24(FortranFormattingError)
        1    0.000    0.000    0.000    0.000 hierarchy.py:157(ClusterWarning)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1255(ResizeEvent)
        1    0.000    0.000    0.000    0.000 markers.py:39(UndefinedComparison)
        1    0.000    0.000    0.000    0.000 numbers.py:3308(_as_mpf_val)
        1    0.000    0.000    0.000    0.000 mock.py:1188(Mock)
        1    0.000    0.000    0.000    0.000 systems.py:32(ODEOrderError)
        1    0.000    0.000    0.000    0.000 lr_scheduler.py:169(_LRScheduler)
        1    0.000    0.000    0.000    0.000 pathlib.py:325(_TerminatingSelector)
        1    0.000    0.000    0.000    0.000 container.py:71(ErrorbarContainer)
        1    0.000    0.000    0.000    0.000 errors.py:37(RemovedConfigError)
        1    0.000    0.000    0.000    0.000 _fortran_format_parser.py:28(BadFortranFormat)
        1    0.000    0.000    0.000    0.000 _multivariate.py:4243(unitary_group_frozen)
        1    0.000    0.000    0.000    0.000 _sf_error.py:13(SpecialFunctionError)
        1    0.000    0.000    0.000    0.000 polyerrors.py:136(ComputationFailed)
        1    0.000    0.000    0.000    0.000 _memory_viz.py:113(__init__)
        1    0.000    0.000    0.000    0.000 configparser.py:254(InterpolationError)
        1    0.000    0.000    0.000    0.000 loader.py:55(Loader)
        1    0.000    0.000    0.000    0.000 core.py:148(MAError)
        1    0.000    0.000    0.000    0.000 _warnings_errors.py:33(FitError)
        1    0.000    0.000    0.000    0.000 resolver.py:102(ResolverError)
        1    0.000    0.000    0.000    0.000 case.py:38(_UnexpectedSuccess)
        1    0.000    0.000    0.000    0.000 _endian.py:48(BigEndianStructure)
        1    0.000    0.000    0.000    0.000 container.py:103(StemContainer)
        1    0.000    0.000    0.000    0.000 fused.py:104(BNReLU2d)
        1    0.000    0.000    0.000    0.000 fused.py:85(ConvBn3d)
        1    0.000    0.000    0.000    0.000 util.py:108(_platform_supports_abstract_sockets)
        1    0.000    0.000    0.000    0.000 _csr.py:314(csr_array)
        1    0.000    0.000    0.000    0.000 operations.py:483(ShortCircuit)
        1    0.000    0.000    0.000    0.000 mathtext.py:1962(NegFilll)
        1    0.000    0.000    0.000    0.000 patches.py:3314(BarAB)
        1    0.000    0.000    0.000    0.000 _typing.py:156(DTypesAll)
        1    0.000    0.000    0.000    0.000 diophantine.py:1107(CubicThue)
        1    0.000    0.000    0.000    0.000 parse.py:342(SplitResultBytes)
        1    0.000    0.000    0.000    0.000 _static.py:61(Str)
        1    0.000    0.000    0.000    0.000 scanner.py:53(ScannerError)
        1    0.000    0.000    0.000    0.000 exceptions.py:10(ShapeError)
        1    0.000    0.000    0.000    0.000 codeprinter.py:37(PrintMethodNotImplementedError)
        1    0.000    0.000    0.000    0.000 errors.py:87(InvalidHeaderDefect)
        1    0.000    0.000    0.000    0.000 dates.py:1583(WeekdayLocator)
        1    0.000    0.000    0.000    0.000 transforms.py:1516(InverseHankelTransform)
        1    0.000    0.000    0.000    0.000 net_min_base.py:40(FxNetMinimizerRunFuncError)
        1    0.000    0.000    0.000    0.000 exceptions.py:15(NonSquareMatrixError)
        1    0.000    0.000    0.000    0.000 dropout.py:104(Dropout2d)
        1    0.000    0.000    0.000    0.000 dates.py:1657(MinuteLocator)
        1    0.000    0.000    0.000    0.000 hb.py:377(<dictcomp>)
        1    0.000    0.000    0.000    0.000 fused.py:123(LinearBn1d)
        1    0.000    0.000    0.000    0.000 _script.py:323(_CachedForward)
        1    0.000    0.000    0.000    0.000 forward_ad.py:108(UnpackedDualTensor)
        1    0.000    0.000    0.000    0.000 threading.py:1199(daemon)
        1    0.000    0.000    0.000    0.000 pickle.py:97(_Stop)
        1    0.000    0.000    0.000    0.000 fused.py:94(ConvBnReLU3d)
        1    0.000    0.000    0.000    0.000 util.py:167(UnboundedMemo)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:943(_InvalidEwError)
        1    0.000    0.000    0.000    0.000 _ccallback.py:9(CData)
        1    0.000    0.000    0.000    0.000 constraints.py:493(_PositiveSemidefinite)
        1    0.000    0.000    0.000    0.000 periodic_table.py:1592(DummySpecie)
        1    0.000    0.000    0.000    0.000 context.py:14(ProcessError)
        2    0.000    0.000    0.000    0.000 __init__.py:137(exec_module)
        1    0.000    0.000    0.000    0.000 dates.py:1637(HourLocator)
        1    0.000    0.000    0.000    0.000 extension.py:176(Library)
        1    0.000    0.000    0.000    0.000 tokens.py:289(FlowEntryToken)
        1    0.000    0.000    0.000    0.000 _bsr.py:660(bsr_array)
        1    0.000    0.000    0.000    0.000 patches.py:3077(CurveB)
        1    0.000    0.000    0.000    0.000 util.py:102(_FifoCache)
        1    0.000    0.000    0.000    0.000 exceptions.py:20(_ExceptionWordUnicodeSet)
        1    0.000    0.000    0.000    0.000 utils.py:24(InvalidWheelFilename)
        1    0.000    0.000    0.000    0.000 _csc.py:179(csc_array)
        1    0.000    0.000    0.000    0.000 tarfile.py:279(StreamError)
        1    0.000    0.000    0.000    0.000 patches.py:3294(BracketB)
        1    0.000    0.000    0.000    0.000 _optimize.py:112(OptimizeResult)
        1    0.000    0.000    0.000    0.000 queues.py:16(QueueFull)
        1    0.000    0.000    0.000    0.000 solveset.py:794(_SolveTrig1Error)
        1    0.000    0.000    0.000    0.000 polyoptions.py:44(Flag)
        1    0.000    0.000    0.000    0.000 distributed_c10d.py:401(group)
        1    0.000    0.000    0.000    0.000 shutil.py:74(ReadError)
        1    0.000    0.000    0.000    0.000 io.py:340(FileLockException)
        1    0.000    0.000    0.000    0.000 argparse.py:992(_StoreFalseAction)
        1    0.000    0.000    0.000    0.000 utils.py:79(<dictcomp>)
        1    0.000    0.000    0.000    0.000 dropout.py:153(Dropout3d)
        1    0.000    0.000    0.000    0.000 backend_managers.py:20(ToolTriggerEvent)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:193(UnstructuredTokenList)
        1    0.000    0.000    0.000    0.000 __init__.py:25(clear_distutils)
        1    0.000    0.000    0.000    0.000 _static.py:108(Dict)
        1    0.000    0.000    0.000    0.000 factorials.py:281(MultiFactorial)
        1    0.000    0.000    0.000    0.000 _symbolic_trace.py:890(_PatchedFnDel)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:828(ContentDisposition)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:507(DotAtomText)
        1    0.000    0.000    0.000    0.000 mathtext.py:1325(DejaVuSerifFontConstants)
        1    0.000    0.000    0.000    0.000 emitter.py:28(EmitterError)
        1    0.000    0.000    0.000    0.000 scalarint.py:89(OctalInt)
        1    0.000    0.000    0.000    0.000 rl.py:83(sort)
        1    0.000    0.000    0.000    0.000 symbolic_opset13.py:23(_apply_params)
        1    0.000    0.000    0.000    0.000 scalarint.py:118(DecimalInt)
        1    0.000    0.000    0.000    0.000 dumper.py:121(Dumper)
        1    0.000    0.000    0.000    0.000 scalarstring.py:93(PlainScalarString)
        1    0.000    0.000    0.000    0.000 util.py:385(ForkAwareLocal)
        1    0.000    0.000    0.000    0.000 importer.py:22(ObjMismatchError)
        1    0.000    0.000    0.000    0.000 __init__.py:67(_256Bit)
        1    0.000    0.000    0.000    0.000 _endian.py:34(_swapped_struct_meta)
        1    0.000    0.000    0.000    0.000 _csr.py:437(csr_matrix)
        1    0.000    0.000    0.000    0.000 _dia.py:528(dia_array)
        1    0.000    0.000    0.000    0.000 errors.py:20(DistutilsError)
        1    0.000    0.000    0.000    0.000 diophantine.py:938(HomogeneousGeneralQuadratic)
        1    0.000    0.000    0.000    0.000 patches.py:3094(CurveAB)
        1    0.000    0.000    0.000    0.000 client.py:1459(HTTPException)
        1    0.000    0.000    0.000    0.000 mathtext.py:1430(Vbox)
        1    0.000    0.000    0.000    0.000 _static.py:145(SpecifierSet)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:333(_mode_formula)
        1    0.000    0.000    0.000    0.000 _pep440.py:129(InvalidVersion)
        1    0.000    0.000    0.000    0.000 facts.py:451(<setcomp>)
        1    0.000    0.000    0.000    0.000 extras.py:281(_fromnxfunction_seq)
        1    0.000    0.000    0.000    0.000 identification.py:13(IdentificationMethods)
        1    0.000    0.000    0.000    0.000 __init__.py:260(IgnoredKeywordWarning)
        1    0.000    0.000    0.000    0.000 __init__.py:310(first_invoke)
        1    0.000    0.000    0.000    0.000 eigen.py:38(Eigen)
        1    0.000    0.000    0.000    0.000 {method '__subclasses__' of 'type' objects}
        1    0.000    0.000    0.000    0.000 boolalg.py:371(__eq__)
        1    0.000    0.000    0.000    0.000 inverselaplace.py:542(Cohen)
        1    0.000    0.000    0.000    0.000 errors.py:12(MessageParseError)
        1    0.000    0.000    0.000    0.000 batchnorm.py:446(BatchNorm3d)
        1    0.000    0.000    0.000    0.000 tarfile.py:294(InvalidHeaderError)
        1    0.000    0.000    0.000    0.000 font_manager.py:957(JSONEncoder)
        1    0.000    0.000    0.000    0.000 json.py:906(MSONError)
        1    0.000    0.000    0.000    0.000 gzip.py:117(BadGzipFile)
        1    0.000    0.000    0.000    0.000 _internal.py:244(c_void_p)
        1    0.000    0.000    0.000    0.000 {built-in method numpy.core._multiarray_umath._set_madvise_hugepage}
        1    0.000    0.000    0.000    0.000 constructor.py:47(ConstructorError)
        1    0.000    0.000    0.000    0.000 events.py:123(StreamEndEvent)
        1    0.000    0.000    0.000    0.000 parse.py:334(DefragResultBytes)
        1    0.000    0.000    0.000    0.000 pyprojecttoml.py:458(_ExperimentalConfiguration)
        1    0.000    0.000    0.000    0.000 _miobase.py:24(MatWriteError)
        1    0.000    0.000    0.000    0.000 _mio5_params.py:268(MatlabOpaque)
        1    0.000    0.000    0.000    0.000 _static.py:65(Tuple)
        1    0.000    0.000    0.000    0.000 core.py:156(MaskError)
        1    0.000    0.000    0.000    0.000 std.py:52(TqdmExperimentalWarning)
        1    0.000    0.000    0.000    0.000 __init__.py:169(c_ushort)
        1    0.000    0.000    0.000    0.000 patches.py:3111(CurveFilledA)
        1    0.000    0.000    0.000    0.000 events.py:248(SequenceEndEvent)
        1    0.000    0.000    0.000    0.000 ops.py:861(NotUpcast)
        1    0.000    0.000    0.000    0.000 function.py:583(_nested_map)
        1    0.000    0.000    0.000    0.000 <string>:1(<module>)
        1    0.000    0.000    0.000    0.000 core.py:270(ParseError)
        1    0.000    0.000    0.000    0.000 scalarint.py:109(HexCapsInt)
        1    0.000    0.000    0.000    0.000 _base.py:49(CancelledError)
        1    0.000    0.000    0.000    0.000 facts.py:115(<listcomp>)
        1    0.000    0.000    0.000    0.000 client.py:1514(LineTooLong)
        1    0.000    0.000    0.000    0.000 tarfile.py:270(ExtractError)
        1    0.000    0.000    0.000    0.000 {built-in method _thread._set_sentinel}
        1    0.000    0.000    0.000    0.000 __init__.py:11(DeprecatedTzFormatWarning)
        1    0.000    0.000    0.000    0.000 error.py:168(YAMLStreamError)
        1    0.000    0.000    0.000    0.000 tokens.py:266(FlowMappingEndToken)
        2    0.000    0.000    0.000    0.000 groundtypes.py:22(__init__)
        1    0.000    0.000    0.000    0.000 headerregistry.py:271(UniqueUnstructuredHeader)
        1    0.000    0.000    0.000    0.000 _endian.py:55(BigEndianUnion)
        1    0.000    0.000    0.000    0.000 animation.py:674(AVConvWriter)
        1    0.000    0.000    0.000    0.000 transports.py:148(Transport)
        1    0.000    0.000    0.000    0.000 exceptions.py:19(NonInvertibleMatrixError)
        1    0.000    0.000    0.000    0.000 _csc.py:274(csc_matrix)
        1    0.000    0.000    0.000    0.000 constraints.py:452(_CorrCholesky)
        1    0.000    0.000    0.000    0.000 threading.py:832(<listcomp>)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1274(CloseEvent)
        1    0.000    0.000    0.000    0.000 colors.py:1169(DivergingNorm)
        1    0.000    0.000    0.000    0.000 _miobase.py:31(MatWriteWarning)
        1    0.000    0.000    0.000    0.000 net_min_base.py:49(FxNetMinimizerResultMismatchError)
        1    0.000    0.000    0.000    0.000 repmatrix.py:201(<genexpr>)
        1    0.000    0.000    0.000    0.000 release.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:197(Phrase)
        1    0.000    0.000    0.000    0.000 random.py:811(seed)
        1    0.000    0.000    0.000    0.000 _idl.py:153(ObjectPointer)
        1    0.000    0.000    0.000    0.000 exceptions.py:24(NonPositiveDefiniteMatrixError)
        1    0.000    0.000    0.000    0.000 boolalg.py:446(__eq__)
        1    0.000    0.000    0.000    0.000 exceptions.py:85(TooHardError)
        1    0.000    0.000    0.000    0.000 unicode.py:304(CJK)
        1    0.000    0.000    0.000    0.000 _static.py:69(List)
        1    0.000    0.000    0.000    0.000 subprocess.py:123(SubprocessError)
        1    0.000    0.000    0.000    0.000 __init__.py:70(_128Bit)
        1    0.000    0.000    0.000    0.000 backend_tools.py:721(ConfigureSubplotsBase)
        1    0.000    0.000    0.000    0.000 errors.py:13(LibError)
        1    0.000    0.000    0.000    0.000 tokens.py:251(FlowSequenceStartToken)
        1    0.000    0.000    0.000    0.000 _base.py:55(InvalidStateError)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:200(Word)
        1    0.000    0.000    0.000    0.000 __init__.py:276(ReadError)
        1    0.000    0.000    0.000    0.000 warnings.py:99(SetuptoolsDeprecationWarning)
        1    0.000    0.000    0.000    0.000 _optimize.py:157(OptimizeWarning)
        1    0.000    0.000    0.000    0.000 _optimize.py:3113(BracketError)
        1    0.000    0.000    0.000    0.000 exceptions.py:17(InvalidStateError)
        1    0.000    0.000    0.000    0.000 _dist_ver.py:1(<module>)
        1    0.000    0.000    0.000    0.000 exceptions.py:291(ParseSyntaxException)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:834(ContentTransferEncoding)
        1    0.000    0.000    0.000    0.000 events.py:101(CollectionEndEvent)
        1    0.000    0.000    0.000    0.000 core.py:115(switch)
        1    0.000    0.000    0.000    0.000 polyoptions.py:658(Polys)
        1    0.000    0.000    0.000    0.000 backend_tools.py:424(ToolEnableAllNavigation)
        1    0.000    0.000    0.000    0.000 context.py:17(BufferTooShort)
        1    0.000    0.000    0.000    0.000 _common.py:163(ZoneInfoNotFoundError)
        1    0.000    0.000    0.000    0.000 exceptions.py:43(DMRankError)
        1    0.000    0.000    0.000    0.000 odes.py:4(ODEMethods)
        1    0.000    0.000    0.000    0.000 client.py:1504(ResponseNotReady)
        1    0.000    0.000    0.000    0.000 setupcfg.py:779(_DeprecatedConfig)
        1    0.000    0.000    0.000    0.000 threading.py:798(BrokenBarrierError)
        1    0.000    0.000    0.000    0.000 parse.py:347(ParseResultBytes)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:512(NoFoldLiteral)
        1    0.000    0.000    0.000    0.000 markers.py:45(UndefinedEnvironmentName)
        1    0.000    0.000    0.000    0.000 <string>:1(__create_fn__)
        1    0.000    0.000    0.000    0.000 exceptions.py:40(UnknownEditVariable)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:3403(Buffer)
        1    0.000    0.000    0.000    0.000 dates.py:1611(DayLocator)
        1    0.000    0.000    0.000    0.000 mathtext.py:1329(DejaVuSansFontConstants)
        1    0.000    0.000    0.000    0.000 {method 'clear' of 'list' objects}
        1    0.000    0.000    0.000    0.000 errors.py:9(CompileError)
        1    0.000    0.000    0.000    0.000 _ltisys.py:1151(ZerosPolesGainDiscrete)
        1    0.000    0.000    0.000    0.000 __init__.py:186(c_int)
        1    0.000    0.000    0.000    0.000 streamplot.py:420(TerminateTrajectory)
        1    0.000    0.000    0.000    0.000 case.py:33(_ShouldStop)
        1    0.000    0.000    0.000    0.000 polyerrors.py:74(HomomorphismFailed)
        1    0.000    0.000    0.000    0.000 __init__.py:14(is_available)
        1    0.000    0.000    0.000    0.000 extras.py:319(_fromnxfunction_allargs)
        1    0.000    0.000    0.000    0.000 argparse.py:774(ArgumentTypeError)
        1    0.000    0.000    0.000    0.000 tarfile.py:273(ReadError)
        1    0.000    0.000    0.000    0.000 tarfile.py:282(HeaderError)
        1    0.000    0.000    0.000    0.000 tokens.py:236(BlockSequenceStartToken)
        1    0.000    0.000    0.000    0.000 errors.py:33(OnnxExporterError)
        1    0.000    0.000    0.000    0.000 {built-in method _abc.get_cache_token}
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:550(ObsLocalPart)
        1    0.000    0.000    0.000    0.000 parser.py:98(ParserError)
        1    0.000    0.000    0.000    0.000 _bsr.py:771(bsr_matrix)
        1    0.000    0.000    0.000    0.000 graph.py:419(_Handle)
        1    0.000    0.000    0.000    0.000 exceptions.py:189(DTypePromotionError)
        1    0.000    0.000    0.000    0.000 shutil.py:71(ExecError)
        1    0.000    0.000    0.000    0.000 headerregistry.py:322(UniqueDateHeader)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:503(DotAtom)
        1    0.000    0.000    0.000    0.000 bdist.py:21(deprecated)
        1    0.000    0.000    0.000    0.000 tokens.py:261(FlowSequenceEndToken)
        1    0.000    0.000    0.000    0.000 extras.py:294(_fromnxfunction_args)
        1    0.000    0.000    0.000    0.000 six.py:402(Module_six_moves_urllib_request)
        1    0.000    0.000    0.000    0.000 client.py:1519(RemoteDisconnected)
        1    0.000    0.000    0.000    0.000 __init__.py:173(c_long)
        1    0.000    0.000    0.000    0.000 tokens.py:284(BlockEntryToken)
        1    0.000    0.000    0.000    0.000 simplex.py:96(InfeasibleLPError)
        1    0.000    0.000    0.000    0.000 exceptions.py:39(StructureError)
        1    0.000    0.000    0.000    0.000 exceptions.py:47(MissingUnityError)
        1    0.000    0.000    0.000    0.000 _iotools.py:421(ConverterError)
        1    0.000    0.000    0.000    0.000 errors.py:51(PackageDiscoveryError)
        1    0.000    0.000    0.000    0.000 tokens.py:215(DocumentEndToken)
        1    0.000    0.000    0.000    0.000 std.py:62(TqdmMonitorWarning)
        1    0.000    0.000    0.000    0.000 polyerrors.py:122(UnsolvableFactorError)
        1    0.000    0.000    0.000    0.000 exceptions.py:284(ParseFatalException)
        1    0.000    0.000    0.000    0.000 std.py:32(TqdmTypeError)
        1    0.000    0.000    0.000    0.000 errors.py:48(DistutilsArgError)
        1    0.000    0.000    0.000    0.000 tokens.py:279(ValueToken)
        1    0.000    0.000    0.000    0.000 errors.py:16(HeaderParseError)
        1    0.000    0.000    0.000    0.000 __init__.py:177(c_ulong)
        1    0.000    0.000    0.000    0.000 {method 'keys' of 'mappingproxy' objects}
        1    0.000    0.000    0.000    0.000 frontend.py:114(NotSupportedError)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:685(InvalidParameter)
        1    0.000    0.000    0.000    0.000 errors.py:18(LinkError)
        1    0.000    0.000    0.000    0.000 _typing.py:30(Boolean)
        1    0.000    0.000    0.000    0.000 __init__.py:79(_64Bit)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:854(MessageID)
        1    0.000    0.000    0.000    0.000 context.py:319(suppress)
        1    0.000    0.000    0.000    0.000 __init__.py:300(SubsequentHeaderError)
        1    0.000    0.000    0.000    0.000 tarfile.py:285(EmptyHeaderError)
        1    0.000    0.000    0.000    0.000 exceptions.py:74(VisibleDeprecationWarning)
        1    0.000    0.000    0.000    0.000 exceptions.py:21(SendfileNotAvailableError)
        1    0.000    0.000    0.000    0.000 __init__.py:198(c_double)
        1    0.000    0.000    0.000    0.000 tokens.py:256(FlowMappingStartToken)
        1    0.000    0.000    0.000    0.000 function.py:113(BadSignatureError)
        1    0.000    0.000    0.000    0.000 six.py:480(Module_six_moves_urllib_robotparser)
        1    0.000    0.000    0.000    0.000 frontend.py:131(FrontendTypeError)
        1    0.000    0.000    0.000    0.000 context.py:20(TimeoutError)
        1    0.000    0.000    0.000    0.000 polyerrors.py:98(NotInvertible)
        1    0.000    0.000    0.000    0.000 pickle.py:84(UnpicklingError)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:840(HeaderLabel)
        1    0.000    0.000    0.000    0.000 _iotools.py:437(ConversionWarning)
        1    0.000    0.000    0.000    0.000 six.py:459(Module_six_moves_urllib_response)
        1    0.000    0.000    0.000    0.000 __init__.py:727(FilterError)
        1    0.000    0.000    0.000    0.000 coreerrors.py:10(NonCommutativeExpression)
        1    0.000    0.000    0.000    0.000 tarfile.py:288(TruncatedHeaderError)
        1    0.000    0.000    0.000    0.000 exceptions.py:47(UnsatisfiableConstraint)
        1    0.000    0.000    0.000    0.000 errors.py:39(CheckerError)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:204(CFWSList)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:858(InvalidMessageID)
        1    0.000    0.000    0.000    0.000 tarfile.py:276(CompressionError)
        1    0.000    0.000    0.000    0.000 mathtext.py:1370(MathTextWarning)
        1    0.000    0.000    0.000    0.000 errors.py:107(DistutilsByteCompileError)
        1    0.000    0.000    0.000    0.000 errors.py:24(MultipartConversionError)
        1    0.000    0.000    0.000    0.000 __init__.py:190(c_uint)
        1    0.000    0.000    0.000    0.000 __init__.py:285(HeaderError)
        1    0.000    0.000    0.000    0.000 errors.py:42(DistutilsGetoptError)
        1    0.000    0.000    0.000    0.000 _diagnostic.py:107(background_context)
        1    0.000    0.000    0.000    0.000 __init__.py:194(c_float)
        1    0.000    0.000    0.000    0.000 __init__.py:261(c_wchar)
        1    0.000    0.000    0.000    0.000 exceptions.py:61(BrokenBarrierError)
        1    0.000    0.000    0.000    0.000 package_importer.py:675(_ExternNode)
        1    0.000    0.000    0.000    0.000 __init__.py:279(CompressionError)
        1    0.000    0.000    0.000    0.000 errors.py:23(UnknownFileType)
        1    0.000    0.000    0.000    0.000 _arffread.py:58(ParseArffError)
        1    0.000    0.000    0.000    0.000 _distribution_infrastructure.py:1823(tol)
        1    0.000    0.000    0.000    0.000 std.py:36(TqdmKeyError)
        1    0.000    0.000    0.000    0.000 utils.py:30(InvalidSdistFilename)
        1    0.000    0.000    0.000    0.000 errors.py:74(DistutilsSetupError)
        1    0.000    0.000    0.000    0.000 tokens.py:271(KeyToken)
        1    0.000    0.000    0.000    0.000 galois_resolvents.py:43(ResolventException)
        1    0.000    0.000    0.000    0.000 _script.py:328(ScriptWarning)
        1    0.000    0.000    0.000    0.000 animation.py:685(AVConvFileWriter)
        1    0.000    0.000    0.000    0.000 readers.py:27(files)
        1    0.000    0.000    0.000    0.000 comments.py:200(NotNone)
        1    0.000    0.000    0.000    0.000 error.py:116(YAMLError)
        1    0.000    0.000    0.000    0.000 events.py:264(MappingEndEvent)
        1    0.000    0.000    0.000    0.000 tarfile.py:291(EOFHeaderError)
        1    0.000    0.000    0.000    0.000 __init__.py:73(_96Bit)
        1    0.000    0.000    0.000    0.000 __init__.py:202(c_longdouble)
        1    0.000    0.000    0.000    0.000 six.py:382(Module_six_moves_urllib_error)
        1    0.000    0.000    0.000    0.000 _header_value_parser.py:208(Atom)
        1    0.000    0.000    0.000    0.000 tokens.py:241(BlockMappingStartToken)
        1    0.000    0.000    0.000    0.000 exceptions.py:33(DMFormatError)
        1    0.000    0.000    0.000    0.000 proxy.py:317(TraceError)
        1    0.000    0.000    0.000    0.000 _miobase.py:28(MatReadWarning)
        1    0.000    0.000    0.000    0.000 repmatrix.py:202(<genexpr>)
        1    0.000    0.000    0.000    0.000 _iotools.py:429(ConverterLockError)
        1    0.000    0.000    0.000    0.000 fromnumeric.py:91(_take_dispatcher)
        1    0.000    0.000    0.000    0.000 hb.py:30(MalformedHeader)
        1    0.000    0.000    0.000    0.000 client.py:1475(UnknownTransferEncoding)
        1    0.000    0.000    0.000    0.000 Image.py:74(DecompressionBombError)
        1    0.000    0.000    0.000    0.000 errors.py:103(DistutilsTemplateError)
        1    0.000    0.000    0.000    0.000 errors.py:20(BoundaryError)
        1    0.000    0.000    0.000    0.000 __init__.py:82(_32Bit)
        1    0.000    0.000    0.000    0.000 _endian.py:35(_swapped_union_meta)
        1    0.000    0.000    0.000    0.000 errors.py:96(DistutilsInternalError)
        1    0.000    0.000    0.000    0.000 composer.py:27(ComposerError)
        1    0.000    0.000    0.000    0.000 errors.py:90(HeaderMissingRequiredValue)
        1    0.000    0.000    0.000    0.000 std.py:57(TqdmDeprecationWarning)
        1    0.000    0.000    0.000    0.000 exceptions.py:23(DMDomainError)
        1    0.000    0.000    0.000    0.000 tarfile.py:297(SubsequentHeaderError)
        1    0.000    0.000    0.000    0.000 __init__.py:230(c_byte)
        1    0.000    0.000    0.000    0.000 typing_extensions.py:2055(_EllipsisDummy)
        1    0.000    0.000    0.000    0.000 errors.py:81(DistutilsPlatformError)
        1    0.000    0.000    0.000    0.000 __init__.py:246(c_void_p)
        1    0.000    0.000    0.000    0.000 contextlib.py:342(__enter__)
        1    0.000    0.000    0.000    0.000 error.py:274(YAMLFutureWarning)
        1    0.000    0.000    0.000    0.000 errors.py:55(DistutilsFileError)
        1    0.000    0.000    0.000    0.000 errors.py:61(MultipartInvariantViolationDefect)
        1    0.000    0.000    0.000    0.000 __init__.py:251(c_bool)
        1    0.000    0.000    0.000    0.000 __init__.py:288(EmptyHeaderError)
        1    0.000    0.000    0.000    0.000 client.py:1464(NotConnected)
        1    0.000    0.000    0.000    0.000 errors.py:28(CharsetError)
        1    0.000    0.000    0.000    0.000 __init__.py:85(_16Bit)
        1    0.000    0.000    0.000    0.000 __init__.py:297(InvalidHeaderError)
        1    0.000    0.000    0.000    0.000 error.py:172(YAMLWarning)
        1    0.000    0.000    0.000    0.000 _base.py:651(BrokenExecutor)
        1    0.000    0.000    0.000    0.000 errors.py:64(InvalidMultipartContentTransferEncodingDefect)
        1    0.000    0.000    0.000    0.000 errors.py:104(ObsoleteHeaderDefect)
        1    0.000    0.000    0.000    0.000 __init__.py:294(EOFHeaderError)
        1    0.000    0.000    0.000    0.000 __init__.py:223(c_ubyte)
        1    0.000    0.000    0.000    0.000 errors.py:73(InvalidBase64CharactersDefect)
        1    0.000    0.000    0.000    0.000 __init__.py:76(_80Bit)
        1    0.000    0.000    0.000    0.000 __init__.py:282(StreamError)
        1    0.000    0.000    0.000    0.000 polyerrors.py:128(GeneratorsError)
        1    0.000    0.000    0.000    0.000 errors.py:44(StartBoundaryNotFoundDefect)
        1    0.000    0.000    0.000    0.000 errors.py:112(InvalidDateDefect)
        1    0.000    0.000    0.000    0.000 pickle.py:77(PicklingError)
        1    0.000    0.000    0.000    0.000 headerregistry.py:382(UniqueAddressHeader)
        1    0.000    0.000    0.000    0.000 errors.py:63(DistutilsOptionError)
        1    0.000    0.000    0.000    0.000 {method '__enter__' of '_thread.lock' objects}
        1    0.000    0.000    0.000    0.000 errors.py:107(NonASCIILocalPartDefect)
        1    0.000    0.000    0.000    0.000 context.py:23(AuthenticationError)
        1    0.000    0.000    0.000    0.000 __init__.py:88(_8Bit)
        1    0.000    0.000    0.000    0.000 errors.py:89(DistutilsExecError)
        1    0.000    0.000    0.000    0.000 shutil.py:77(RegistryError)
        1    0.000    0.000    0.000    0.000 resolver.py:294(Resolver)
        1    0.000    0.000    0.000    0.000 errors.py:76(InvalidBase64LengthDefect)
        1    0.000    0.000    0.000    0.000 galoisgroups.py:35(MaxTriesException)
        1    0.000    0.000    0.000    0.000 headerregistry.py:397(UniqueSingleAddressHeader)
        1    0.000    0.000    0.000    0.000 expressiondomain.py:163(__init__)
        1    0.000    0.000    0.000    0.000 dataframes.py:367(CaptureDataFrame)
        1    0.000    0.000    0.000    0.000 client.py:1467(InvalidURL)
        1    0.000    0.000    0.000    0.000 shutil.py:81(_GiveupOnFastCopy)
        1    0.000    0.000    0.000    0.000 __init__.py:291(TruncatedHeaderError)
        1    0.000    0.000    0.000    0.000 errors.py:33(DistutilsClassError)
        1    0.000    0.000    0.000    0.000 exceptions.py:48(DMShapeError)
        1    0.000    0.000    0.000    0.000 exceptions.py:53(DMNonSquareMatrixError)
        1    0.000    0.000    0.000    0.000 polyerrors.py:82(ExtraneousFactors)
        1    0.000    0.000    0.000    0.000 _typing.py:26(Integer)
        1    0.000    0.000    0.000    0.000 errors.py:53(MisplacedEnvelopeHeaderDefect)
        1    0.000    0.000    0.000    0.000 errors.py:67(UndecodableBytesDefect)
        1    0.000    0.000    0.000    0.000 __init__.py:235(c_char)
        1    0.000    0.000    0.000    0.000 polyerrors.py:78(IsomorphismFailed)
        1    0.000    0.000    0.000    0.000 streamplot.py:495(OutOfBounds)
        1    0.000    0.000    0.000    0.000 bdist.py:22(<lambda>)
        1    0.000    0.000    0.000    0.000 polyerrors.py:181(FlagError)
        1    0.000    0.000    0.000    0.000 constructor.py:51(DuplicateKeyFutureWarning)
        1    0.000    0.000    0.000    0.000 integerring.py:51(__init__)
        1    0.000    0.000    0.000    0.000 polyerrors.py:147(UnivariatePolynomialError)
        1    0.000    0.000    0.000    0.000 constructor.py:58(DuplicateKeyError)
        1    0.000    0.000    0.000    0.000 pyprojecttoml.py:465(_ToolsTypoInMetadata)
        1    0.000    0.000    0.000    0.000 errors.py:50(FirstHeaderLineIsContinuationDefect)
        1    0.000    0.000    0.000    0.000 polyerrors.py:177(OptionError)
        1    0.000    0.000    0.000    0.000 client.py:1501(CannotSendHeader)
        1    0.000    0.000    0.000    0.000 hb.py:34(LineOverflow)
        1    0.000    0.000    0.000    0.000 exceptions.py:28(DMNotAField)
        1    0.000    0.000    0.000    0.000 client.py:1495(ImproperConnectionState)
        1    0.000    0.000    0.000    0.000 errors.py:70(InvalidBase64PaddingDefect)
        1    0.000    0.000    0.000    0.000 client.py:1478(UnimplementedFileMode)
        1    0.000    0.000    0.000    0.000 errors.py:26(DistutilsModuleError)
        1    0.000    0.000    0.000    0.000 client.py:1498(CannotSendRequest)
        1    0.000    0.000    0.000    0.000 gaussiandomains.py:442(__init__)
        1    0.000    0.000    0.000    0.000 errors.py:47(CloseBoundaryNotFoundDefect)
        1    0.000    0.000    0.000    0.000 errors.py:56(MissingHeaderBodySeparatorDefect)
        1    0.000    0.000    0.000    0.000 function.py:118(BadArgumentsError)
        1    0.000    0.000    0.000    0.000 polyerrors.py:86(EvaluationFailed)
        1    0.000    0.000    0.000    0.000 fromnumeric.py:584(_transpose_dispatcher)
        1    0.000    0.000    0.000    0.000 polyerrors.py:151(MultivariatePolynomialError)
        1    0.000    0.000    0.000    0.000 exceptions.py:58(DMValueError)
        1    0.000    0.000    0.000    0.000 polyerrors.py:132(GeneratorsNeeded)
        1    0.000    0.000    0.000    0.000 polyerrors.py:94(CoercionFailed)
        1    0.000    0.000    0.000    0.000 polyerrors.py:118(UnificationFailed)
        1    0.000    0.000    0.000    0.000 six.py:239(exec_module)
        1    0.000    0.000    0.000    0.000 exceptions.py:38(DMNonInvertibleMatrixError)
        1    0.000    0.000    0.000    0.000 polyerrors.py:90(RefinementFailed)
        1    0.000    0.000    0.000    0.000 polyerrors.py:102(NotReversible)
        1    0.000    0.000    0.000    0.000 gaussiandomains.py:647(__init__)
        1    0.000    0.000    0.000    0.000 {method 'isascii' of 'str' objects}
        1    0.000    0.000    0.000    0.000 polyerrors.py:106(NotAlgebraic)
        1    0.000    0.000    0.000    0.000 polyerrors.py:110(DomainError)
        1    0.000    0.000    0.000    0.000 rationalfield.py:45(__init__)
        1    0.000    0.000    0.000    0.000 _functools.py:83(<lambda>)
        1    0.000    0.000    0.000    0.000 expressionrawdomain.py:28(__init__)
        1    0.000    0.000    0.000    0.000 polyerrors.py:114(PolynomialError)
        1    0.000    0.000    0.000    0.000 _utils_internal.py:37(prepare_multiprocessing_environment)
        1    0.000    0.000    0.000    0.000 enum.py:1163(_missing_)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:96(_mode_formula)
        1    0.000    0.000    0.000    0.000 _new_distributions.py:93(_median_formula)


