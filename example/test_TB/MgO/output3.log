nohup: 忽略输入
atom间距搜索达到近邻要求
atom_rep: [[0.  0.  0.  1. ]
 [0.5 0.5 0.5 1. ]]
neighbour_table: [{'0': [(0, array([0., 0., 0.]))], '1': [(1, array([-0.5, -0.5,  0.5])), (1, array([-0.5,  0.5, -0.5])), (1, array([-0.5,  0.5,  0.5])), (1, array([ 0.5, -0.5, -0.5])), (1, array([ 0.5, -0.5,  0.5])), (1, array([ 0.5,  0.5, -0.5]))], '2': [(0, array([-1.,  0.,  0.])), (0, array([-1.,  0.,  1.])), (0, array([-1.,  1.,  0.])), (0, array([ 0., -1.,  0.])), (0, array([ 0., -1.,  1.])), (0, array([ 0.,  0., -1.])), (0, array([0., 0., 1.])), (0, array([ 0.,  1., -1.])), (0, array([0., 1., 0.])), (0, array([ 1., -1.,  0.])), (0, array([ 1.,  0., -1.])), (0, array([1., 0., 0.]))], '3': [(1, array([0.5, 0.5, 0.5])), (1, array([-0.5, -0.5, -0.5])), (1, array([-0.5, -0.5,  1.5])), (1, array([-0.5,  1.5, -0.5])), (1, array([ 1.5, -0.5, -0.5])), (1, array([-1.5,  0.5,  0.5])), (1, array([ 0.5, -1.5,  0.5])), (1, array([ 0.5,  0.5, -1.5]))], '4': [(0, array([-1., -1.,  1.])), (0, array([-1.,  1., -1.])), (0, array([-1.,  1.,  1.])), (0, array([ 1., -1., -1.])), (0, array([ 1., -1.,  1.])), (0, array([ 1.,  1., -1.]))], '5': [(1, array([-0.5,  0.5,  1.5])), (1, array([-0.5,  1.5,  0.5])), (1, array([ 0.5, -0.5,  1.5])), (1, array([ 0.5,  1.5, -0.5])), (1, array([ 1.5, -0.5,  0.5])), (1, array([ 1.5,  0.5, -0.5])), (1, array([-1.5, -0.5,  0.5])), (1, array([-1.5, -0.5,  1.5])), (1, array([-1.5,  0.5, -0.5])), (1, array([-1.5,  0.5,  1.5])), (1, array([-1.5,  1.5, -0.5])), (1, array([-1.5,  1.5,  0.5])), (1, array([-0.5, -1.5,  0.5])), (1, array([-0.5, -1.5,  1.5])), (1, array([-0.5,  0.5, -1.5])), (1, array([-0.5,  1.5, -1.5])), (1, array([ 0.5, -1.5, -0.5])), (1, array([ 0.5, -1.5,  1.5])), (1, array([ 0.5, -0.5, -1.5])), (1, array([ 0.5,  1.5, -1.5])), (1, array([ 1.5, -1.5, -0.5])), (1, array([ 1.5, -1.5,  0.5])), (1, array([ 1.5, -0.5, -1.5])), (1, array([ 1.5,  0.5, -1.5]))]}, {'0': [(1, array([0.5, 0.5, 0.5]))], '1': [(0, array([0., 0., 1.])), (0, array([0., 1., 0.])), (0, array([0., 1., 1.])), (0, array([1., 0., 0.])), (0, array([1., 0., 1.])), (0, array([1., 1., 0.]))], '2': [(1, array([-0.5,  0.5,  0.5])), (1, array([-0.5,  0.5,  1.5])), (1, array([-0.5,  1.5,  0.5])), (1, array([ 0.5, -0.5,  0.5])), (1, array([ 0.5, -0.5,  1.5])), (1, array([ 0.5,  0.5, -0.5])), (1, array([0.5, 0.5, 1.5])), (1, array([ 0.5,  1.5, -0.5])), (1, array([0.5, 1.5, 0.5])), (1, array([ 1.5, -0.5,  0.5])), (1, array([ 1.5,  0.5, -0.5])), (1, array([1.5, 0.5, 0.5]))], '3': [(0, array([0., 0., 0.])), (0, array([-1.,  1.,  1.])), (0, array([ 1., -1.,  1.])), (0, array([ 1.,  1., -1.])), (0, array([1., 1., 1.])), (0, array([0., 0., 2.])), (0, array([0., 2., 0.])), (0, array([2., 0., 0.]))], '4': [(1, array([-0.5, -0.5,  1.5])), (1, array([-0.5,  1.5, -0.5])), (1, array([-0.5,  1.5,  1.5])), (1, array([ 1.5, -0.5, -0.5])), (1, array([ 1.5, -0.5,  1.5])), (1, array([ 1.5,  1.5, -0.5]))], '5': [(0, array([-1.,  0.,  1.])), (0, array([-1.,  1.,  0.])), (0, array([ 0., -1.,  1.])), (0, array([ 0.,  1., -1.])), (0, array([ 1., -1.,  0.])), (0, array([ 1.,  0., -1.])), (0, array([-1.,  0.,  2.])), (0, array([-1.,  1.,  2.])), (0, array([-1.,  2.,  0.])), (0, array([-1.,  2.,  1.])), (0, array([ 0., -1.,  2.])), (0, array([0., 1., 2.])), (0, array([ 0.,  2., -1.])), (0, array([0., 2., 1.])), (0, array([ 1., -1.,  2.])), (0, array([1., 0., 2.])), (0, array([ 1.,  2., -1.])), (0, array([1., 2., 0.])), (0, array([ 2., -1.,  0.])), (0, array([ 2., -1.,  1.])), (0, array([ 2.,  0., -1.])), (0, array([2., 0., 1.])), (0, array([ 2.,  1., -1.])), (0, array([2., 1., 0.]))]}]
orbit0 ['s', 'px', 'py', 'pz']
orbit1 ['s', 'px', 'py', 'pz']
lattice vector: Matrix([[0, 1/2, 1/2], [1/2, 0, 1/2], [1/2, 1/2, 0]])
完成无对称性约束的Hamiltonian生成
完成Hamiltonian旋转矩阵的构建
(32, 56)
[1, 8, 9, 2, 3, 16, 17, 4, 5, 24, 25, 6, 7, 11, 18, 19, 12, 13, 26, 27, 14, 15, 21, 28, 29, 22, 23, 31, 33, 40, 41, 34, 35, 48, 49, 36, 37, 56, 57, 38, 39, 43, 50, 51, 44, 45, 58, 59, 46, 47, 53, 60, 61, 54, 55, 63]
([0, 2, 3, 4, 5, 6, 7, 10, 12, 13, 14, 15, 20, 22, 23, 30, 32, 34, 35, 36, 37, 38, 39, 42, 44, 45, 46, 47, 52, 54, 55, 62], 32)
neighbour: 0 op_name: ['E', [0, 0, 0]]
([0, 2, 3, 4, 5, 6, 7, 10, 12, 13, 14, 15, 20, 22, 23, 30, 32, 34, 35, 36, 37, 38, 39, 42, 44, 45, 46, 47, 52, 54, 55, 62], 32)
neighbour: 0 op_name: ['C2x', [0, 0, 0]]
(16, 16)
([0, 2, 3, 10, 20, 22, 23, 30, 32, 34, 35, 42, 52, 54, 55, 62], 16)
neighbour: 0 op_name: ['C2y', [0, 0, 0]]
(8, 8)
([0, 10, 20, 30, 32, 42, 52, 62], 8)
neighbour: 0 op_name: ['C2z', [0, 0, 0]]
([0, 10, 20, 30, 32, 42, 52, 62], 8)
neighbour: 0 op_name: ['C31+', [0, 0, 0]]
(6, 6)
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['C31-', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['C33-', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['C33+', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['C34-', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['C34+', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['C32-', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['C32+', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['C4x+', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['C4x-', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['C4y+', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['C4y-', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['C4z+', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['C4z-', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['C2a', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['C2b', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['C2c', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['C2e', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['C2d', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['C2f', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['I', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['Sigma_x', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['Sigma_y', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['Sigma_z', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['S61-', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['S61+', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['S63+', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['S63-', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['S64+', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['S64-', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['S62+', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['S62-', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['S4x-', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['S4x+', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['S4y-', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['S4y+', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['S4z-', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['S4z+', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['Sigma_da', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['Sigma_db', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['Sigma_dc', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['Sigma_de', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['Sigma_dd', [0, 0, 0]]
([0, 30, 32, 62], 4)
neighbour: 0 op_name: ['Sigma_df', [0, 0, 0]]
([0, 30, 32, 62], 4)
(192, 384)
[192, 193, 10, 11, 194, 195, 8, 9, 196, 197, 6, 7, 198, 199, 4, 5, 200, 201, 2, 3, 202, 203, 0, 1, 240, 241, 22, 23, 242, 243, 20, 21, 244, 245, 18, 19, 246, 247, 16, 17, 248, 249, 14, 15, 250, 251, 12, 13, 288, 289, 34, 35, 290, 291, 32, 33, 292, 293, 30, 31, 294, 295, 28, 29, 296, 297, 26, 27, 298, 299, 24, 25, 336, 337, 46, 47, 338, 339, 44, 45, 340, 341, 42, 43, 342, 343, 40, 41, 344, 345, 38, 39, 346, 347, 36, 37, 204, 205, 58, 59, 206, 207, 56, 57, 208, 209, 54, 55, 210, 211, 52, 53, 212, 213, 50, 51, 214, 215, 48, 49, 252, 253, 70, 71, 254, 255, 68, 69, 256, 257, 66, 67, 258, 259, 64, 65, 260, 261, 62, 63, 262, 263, 60, 61, 300, 301, 82, 83, 302, 303, 80, 81, 304, 305, 78, 79, 306, 307, 76, 77, 308, 309, 74, 75, 310, 311, 72, 73, 348, 349, 94, 95, 350, 351, 92, 93, 352, 353, 90, 91, 354, 355, 88, 89, 356, 357, 86, 87, 358, 359, 84, 85, 216, 217, 106, 107, 218, 219, 104, 105, 220, 221, 102, 103, 222, 223, 100, 101, 224, 225, 98, 99, 226, 227, 96, 97, 264, 265, 118, 119, 266, 267, 116, 117, 268, 269, 114, 115, 270, 271, 112, 113, 272, 273, 110, 111, 274, 275, 108, 109, 312, 313, 130, 131, 314, 315, 128, 129, 316, 317, 126, 127, 318, 319, 124, 125, 320, 321, 122, 123, 322, 323, 120, 121, 360, 361, 142, 143, 362, 363, 140, 141, 364, 365, 138, 139, 366, 367, 136, 137, 368, 369, 134, 135, 370, 371, 132, 133, 228, 229, 154, 155, 230, 231, 152, 153, 232, 233, 150, 151, 234, 235, 148, 149, 236, 237, 146, 147, 238, 239, 144, 145, 276, 277, 166, 167, 278, 279, 164, 165, 280, 281, 162, 163, 282, 283, 160, 161, 284, 285, 158, 159, 286, 287, 156, 157, 324, 325, 178, 179, 326, 327, 176, 177, 328, 329, 174, 175, 330, 331, 172, 173, 332, 333, 170, 171, 334, 335, 168, 169, 372, 373, 190, 191, 374, 375, 188, 189, 376, 377, 186, 187, 378, 379, 184, 185, 380, 381, 182, 183, 382, 383, 180, 181]
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], 192)
neighbour: 1 op_name: ['E', [0, 0, 0]]
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], 192)
neighbour: 1 op_name: ['C2x', [0, 0, 0]]
(160, 160)
([10, 11, 8, 9, 4, 5, 6, 7, 22, 23, 20, 21, 16, 17, 18, 19, 34, 35, 32, 33, 46, 47, 44, 45, 58, 59, 56, 57, 52, 53, 54, 55, 70, 71, 68, 69, 64, 65, 66, 67, 82, 83, 80, 81, 94, 95, 92, 93, 106, 107, 104, 105, 118, 119, 116, 117, 130, 131, 128, 129, 124, 125, 126, 127, 142, 143, 140, 141, 136, 137, 138, 139, 154, 155, 152, 153, 166, 167, 164, 165, 178, 179, 176, 177, 172, 173, 174, 175, 190, 191, 188, 189, 184, 185, 186, 187], 96)
neighbour: 1 op_name: ['C2y', [0, 0, 0]]
(96, 64)
([10, 11, 8, 9, 6, 7, 18, 19, 32, 33, 46, 47, 54, 55, 70, 71, 68, 69, 66, 67, 82, 83, 92, 93, 104, 105, 118, 119, 130, 131, 128, 129, 126, 127, 138, 139, 154, 155, 164, 165, 174, 175, 190, 191, 188, 189, 186, 187], 48)
neighbour: 1 op_name: ['C2z', [0, 0, 0]]
([10, 11, 8, 9, 6, 7, 18, 19, 32, 33, 46, 47, 54, 55, 70, 71, 68, 69, 66, 67, 82, 83, 92, 93, 104, 105, 118, 119, 130, 131, 128, 129, 126, 127, 138, 139, 154, 155, 164, 165, 174, 175, 190, 191, 188, 189, 186, 187], 48)
neighbour: 1 op_name: ['C31+', [0, 0, 0]]
(96, 48)
([6, 7, 46, 47, 154, 155, 188, 189, 186, 187, 190, 191, 164, 165, 174, 175], 16)
neighbour: 1 op_name: ['C31-', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 188, 189, 186, 187, 190, 191, 164, 165, 174, 175], 16)
neighbour: 1 op_name: ['C33-', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 188, 189, 186, 187, 190, 191, 164, 165, 174, 175], 16)
neighbour: 1 op_name: ['C33+', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 188, 189, 186, 187, 190, 191, 164, 165, 174, 175], 16)
neighbour: 1 op_name: ['C34-', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 188, 189, 186, 187, 190, 191, 164, 165, 174, 175], 16)
neighbour: 1 op_name: ['C34+', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 188, 189, 186, 187, 190, 191, 164, 165, 174, 175], 16)
neighbour: 1 op_name: ['C32-', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 188, 189, 186, 187, 190, 191, 164, 165, 174, 175], 16)
neighbour: 1 op_name: ['C32+', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 188, 189, 186, 187, 190, 191, 164, 165, 174, 175], 16)
neighbour: 1 op_name: ['C4x+', [0, 0, 0]]
(48, 8)
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191, 164, 165], 12)
neighbour: 1 op_name: ['C4x-', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191, 164, 165], 12)
neighbour: 1 op_name: ['C4y+', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191, 164, 165], 12)
neighbour: 1 op_name: ['C4y-', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191, 164, 165], 12)
neighbour: 1 op_name: ['C4z+', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191, 164, 165], 12)
neighbour: 1 op_name: ['C4z-', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191, 164, 165], 12)
neighbour: 1 op_name: ['C2a', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191, 164, 165], 12)
neighbour: 1 op_name: ['C2b', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191, 164, 165], 12)
neighbour: 1 op_name: ['C2c', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191, 164, 165], 12)
neighbour: 1 op_name: ['C2e', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191, 164, 165], 12)
neighbour: 1 op_name: ['C2d', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191, 164, 165], 12)
neighbour: 1 op_name: ['C2f', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191, 164, 165], 12)
neighbour: 1 op_name: ['I', [0, 0, 0]]
(24, 2)
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['Sigma_x', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['Sigma_y', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['Sigma_z', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['S61-', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['S61+', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['S63+', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['S63-', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['S64+', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['S64-', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['S62+', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['S62-', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['S4x-', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['S4x+', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['S4y-', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['S4y+', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['S4z-', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['S4z+', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['Sigma_da', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['Sigma_db', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['Sigma_dc', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['Sigma_de', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['Sigma_dd', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
neighbour: 1 op_name: ['Sigma_df', [0, 0, 0]]
([6, 7, 46, 47, 154, 155, 186, 187, 190, 191], 10)
(384, 768)

([22, 23, 20, 21, 18, 19, 16, 17, 14, 15, 12, 13, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 142, 143, 140, 141, 138, 139, 136, 137, 134, 135, 132, 133, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 262, 263, 260, 261, 258, 259, 256, 257, 254, 255, 252, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 382, 383, 380, 381, 378, 379, 376, 377, 374, 375, 372, 373, 406, 407, 404, 405, 402, 403, 400, 401, 398, 399, 396, 397, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 526, 527, 524, 525, 522, 523, 520, 521, 518, 519, 516, 517, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 646, 647, 644, 645, 642, 643, 640, 641, 638, 639, 636, 637, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 766, 767, 764, 765, 762, 763, 760, 761, 758, 759, 756, 757], 384)
neighbour: 2 op_name: ['E', [0, 0, 0]]
([22, 23, 20, 21, 18, 19, 16, 17, 14, 15, 12, 13, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 142, 143, 140, 141, 138, 139, 136, 137, 134, 135, 132, 133, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 262, 263, 260, 261, 258, 259, 256, 257, 254, 255, 252, 253, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 382, 383, 380, 381, 378, 379, 376, 377, 374, 375, 372, 373, 406, 407, 404, 405, 402, 403, 400, 401, 398, 399, 396, 397, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 526, 527, 524, 525, 522, 523, 520, 521, 518, 519, 516, 517, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 646, 647, 644, 645, 642, 643, 640, 641, 638, 639, 636, 637, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 766, 767, 764, 765, 762, 763, 760, 761, 758, 759, 756, 757], 384)
neighbour: 2 op_name: ['C2x', [0, 0, 0]]
(384, 368)
([22, 16, 17, 12, 13, 14, 46, 47, 40, 41, 36, 37, 44, 45, 38, 39, 42, 43, 70, 71, 64, 65, 60, 61, 68, 69, 62, 63, 66, 67, 94, 95, 88, 89, 84, 85, 92, 93, 86, 87, 90, 91, 142, 136, 137, 132, 133, 134, 166, 167, 160, 161, 156, 157, 164, 165, 158, 159, 162, 163, 190, 191, 184, 185, 180, 181, 188, 189, 182, 183, 186, 187, 262, 256, 257, 252, 253, 254, 286, 287, 280, 281, 276, 277, 284, 285, 278, 279, 282, 283, 382, 376, 377, 372, 373, 374, 406, 400, 401, 396, 397, 398, 430, 431, 424, 425, 420, 421, 428, 429, 422, 423, 426, 427, 454, 455, 448, 449, 444, 445, 452, 453, 446, 447, 450, 451, 478, 479, 472, 473, 468, 469, 476, 477, 470, 471, 474, 475, 526, 520, 521, 516, 517, 518, 550, 551, 544, 545, 540, 541, 548, 549, 542, 543, 546, 547, 574, 575, 568, 569, 564, 565, 572, 573, 566, 567, 570, 571, 646, 640, 641, 636, 637, 638, 670, 671, 664, 665, 660, 661, 668, 669, 662, 663, 666, 667, 766, 760, 761, 756, 757, 758], 192)
neighbour: 2 op_name: ['C2y', [0, 0, 0]]
(384, 176)
([14, 16, 12, 38, 39, 44, 45, 42, 43, 62, 63, 68, 69, 66, 67, 86, 87, 92, 93, 90, 91, 134, 136, 132, 158, 159, 164, 165, 162, 163, 182, 183, 188, 189, 186, 187, 254, 256, 252, 278, 279, 284, 285, 282, 283, 374, 376, 372, 398, 400, 396, 422, 423, 428, 429, 426, 427, 446, 447, 452, 453, 450, 451, 470, 471, 476, 477, 474, 475, 518, 520, 516, 542, 543, 548, 549, 546, 547, 566, 567, 572, 573, 570, 571, 638, 640, 636, 662, 663, 668, 669, 666, 667, 758, 760, 756], 96)
neighbour: 2 op_name: ['C2z', [0, 0, 0]]
([14, 16, 12, 38, 39, 44, 45, 42, 43, 62, 63, 68, 69, 66, 67, 86, 87, 92, 93, 90, 91, 134, 136, 132, 158, 159, 164, 165, 162, 163, 182, 183, 188, 189, 186, 187, 254, 256, 252, 278, 279, 284, 285, 282, 283, 374, 376, 372, 398, 400, 396, 422, 423, 428, 429, 426, 427, 446, 447, 452, 453, 450, 451, 470, 471, 476, 477, 474, 475, 518, 520, 516, 542, 543, 548, 549, 546, 547, 566, 567, 572, 573, 570, 571, 638, 640, 636, 662, 663, 668, 669, 666, 667, 758, 760, 756], 96)
neighbour: 2 op_name: ['C31+', [0, 0, 0]]
(384, 96)
([16, 90, 91, 86, 87, 92, 93, 372, 374, 376, 186, 187, 182, 183, 188, 189, 400, 474, 475, 470, 471, 476, 477, 756, 758, 760, 570, 571, 566, 567, 572, 573], 32)
neighbour: 2 op_name: ['C31-', [0, 0, 0]]
([16, 90, 91, 86, 87, 92, 93, 372, 374, 376, 186, 187, 182, 183, 188, 189, 400, 474, 475, 470, 471, 476, 477, 756, 758, 760, 570, 571, 566, 567, 572, 573], 32)
neighbour: 2 op_name: ['C33-', [0, 0, 0]]
([16, 90, 91, 86, 87, 92, 93, 372, 374, 376, 186, 187, 182, 183, 188, 189, 400, 474, 475, 470, 471, 476, 477, 756, 758, 760, 570, 571, 566, 567, 572, 573], 32)
neighbour: 2 op_name: ['C33+', [0, 0, 0]]
([16, 90, 91, 86, 87, 92, 93, 372, 374, 376, 186, 187, 182, 183, 188, 189, 400, 474, 475, 470, 471, 476, 477, 756, 758, 760, 570, 571, 566, 567, 572, 573], 32)
neighbour: 2 op_name: ['C34-', [0, 0, 0]]
([16, 90, 91, 86, 87, 92, 93, 372, 374, 376, 186, 187, 182, 183, 188, 189, 400, 474, 475, 470, 471, 476, 477, 756, 758, 760, 570, 571, 566, 567, 572, 573], 32)
neighbour: 2 op_name: ['C34+', [0, 0, 0]]
([16, 90, 91, 86, 87, 92, 93, 372, 374, 376, 186, 187, 182, 183, 188, 189, 400, 474, 475, 470, 471, 476, 477, 756, 758, 760, 570, 571, 566, 567, 572, 573], 32)
neighbour: 2 op_name: ['C32-', [0, 0, 0]]
([16, 90, 91, 86, 87, 92, 93, 372, 374, 376, 186, 187, 182, 183, 188, 189, 400, 474, 475, 470, 471, 476, 477, 756, 758, 760, 570, 571, 566, 567, 572, 573], 32)
neighbour: 2 op_name: ['C32+', [0, 0, 0]]
([16, 90, 91, 86, 87, 92, 93, 372, 374, 376, 186, 187, 182, 183, 188, 189, 400, 474, 475, 470, 471, 476, 477, 756, 758, 760, 570, 571, 566, 567, 572, 573], 32)
neighbour: 2 op_name: ['C4x+', [0, 0, 0]]
(336, 26)
([16, 92, 93, 372, 376, 186, 187, 188, 400, 476, 477, 756, 760, 570, 571, 572], 16)
neighbour: 2 op_name: ['C4x-', [0, 0, 0]]
([16, 92, 93, 372, 376, 186, 187, 188, 400, 476, 477, 756, 760, 570, 571, 572], 16)
neighbour: 2 op_name: ['C4y+', [0, 0, 0]]
([16, 92, 93, 372, 376, 186, 187, 188, 400, 476, 477, 756, 760, 570, 571, 572], 16)
neighbour: 2 op_name: ['C4y-', [0, 0, 0]]
([16, 92, 93, 372, 376, 186, 187, 188, 400, 476, 477, 756, 760, 570, 571, 572], 16)
neighbour: 2 op_name: ['C4z+', [0, 0, 0]]
([16, 92, 93, 372, 376, 186, 187, 188, 400, 476, 477, 756, 760, 570, 571, 572], 16)
neighbour: 2 op_name: ['C4z-', [0, 0, 0]]
([16, 92, 93, 372, 376, 186, 187, 188, 400, 476, 477, 756, 760, 570, 571, 572], 16)
neighbour: 2 op_name: ['C2a', [0, 0, 0]]
([16, 92, 93, 372, 376, 186, 187, 188, 400, 476, 477, 756, 760, 570, 571, 572], 16)
neighbour: 2 op_name: ['C2b', [0, 0, 0]]
([16, 92, 93, 372, 376, 186, 187, 188, 400, 476, 477, 756, 760, 570, 571, 572], 16)
neighbour: 2 op_name: ['C2c', [0, 0, 0]]
([16, 92, 93, 372, 376, 186, 187, 188, 400, 476, 477, 756, 760, 570, 571, 572], 16)
neighbour: 2 op_name: ['C2e', [0, 0, 0]]
([16, 92, 93, 372, 376, 186, 187, 188, 400, 476, 477, 756, 760, 570, 571, 572], 16)
neighbour: 2 op_name: ['C2d', [0, 0, 0]]
([16, 92, 93, 372, 376, 186, 187, 188, 400, 476, 477, 756, 760, 570, 571, 572], 16)
neighbour: 2 op_name: ['C2f', [0, 0, 0]]
([16, 92, 93, 372, 376, 186, 187, 188, 400, 476, 477, 756, 760, 570, 571, 572], 16)
neighbour: 2 op_name: ['I', [0, 0, 0]]
(96, 4)
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['Sigma_x', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['Sigma_y', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['Sigma_z', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['S61-', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['S61+', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['S63+', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['S63-', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['S64+', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['S64-', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['S62+', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['S62-', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['S4x-', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['S4x+', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['S4y-', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['S4y+', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['S4z-', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['S4z+', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['Sigma_da', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['Sigma_db', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['Sigma_dc', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['Sigma_de', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['Sigma_dd', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
neighbour: 2 op_name: ['Sigma_df', [0, 0, 0]]
([16, 92, 93, 372, 376, 188, 400, 476, 477, 756, 760, 572], 12)
(256, 512)
[256, 257, 0, 1, 258, 259, 8, 9, 260, 261, 6, 7, 262, 263, 4, 5, 264, 265, 2, 3, 266, 267, 14, 15, 268, 269, 12, 13, 270, 271, 10, 11, 320, 321, 16, 17, 322, 323, 24, 25, 324, 325, 22, 23, 326, 327, 20, 21, 328, 329, 18, 19, 330, 331, 30, 31, 332, 333, 28, 29, 334, 335, 26, 27, 384, 385, 32, 33, 386, 387, 40, 41, 388, 389, 38, 39, 390, 391, 36, 37, 392, 393, 34, 35, 394, 395, 46, 47, 396, 397, 44, 45, 398, 399, 42, 43, 448, 449, 48, 49, 450, 451, 56, 57, 452, 453, 54, 55, 454, 455, 52, 53, 456, 457, 50, 51, 458, 459, 62, 63, 460, 461, 60, 61, 462, 463, 58, 59, 272, 273, 64, 65, 274, 275, 72, 73, 276, 277, 70, 71, 278, 279, 68, 69, 280, 281, 66, 67, 282, 283, 78, 79, 284, 285, 76, 77, 286, 287, 74, 75, 336, 337, 80, 81, 338, 339, 88, 89, 340, 341, 86, 87, 342, 343, 84, 85, 344, 345, 82, 83, 346, 347, 94, 95, 348, 349, 92, 93, 350, 351, 90, 91, 400, 401, 96, 97, 402, 403, 104, 105, 404, 405, 102, 103, 406, 407, 100, 101, 408, 409, 98, 99, 410, 411, 110, 111, 412, 413, 108, 109, 414, 415, 106, 107, 464, 465, 112, 113, 466, 467, 120, 121, 468, 469, 118, 119, 470, 471, 116, 117, 472, 473, 114, 115, 474, 475, 126, 127, 476, 477, 124, 125, 478, 479, 122, 123, 288, 289, 128, 129, 290, 291, 136, 137, 292, 293, 134, 135, 294, 295, 132, 133, 296, 297, 130, 131, 298, 299, 142, 143, 300, 301, 140, 141, 302, 303, 138, 139, 352, 353, 144, 145, 354, 355, 152, 153, 356, 357, 150, 151, 358, 359, 148, 149, 360, 361, 146, 147, 362, 363, 158, 159, 364, 365, 156, 157, 366, 367, 154, 155, 416, 417, 160, 161, 418, 419, 168, 169, 420, 421, 166, 167, 422, 423, 164, 165, 424, 425, 162, 163, 426, 427, 174, 175, 428, 429, 172, 173, 430, 431, 170, 171, 480, 481, 176, 177, 482, 483, 184, 185, 484, 485, 182, 183, 486, 487, 180, 181, 488, 489, 178, 179, 490, 491, 190, 191, 492, 493, 188, 189, 494, 495, 186, 187, 304, 305, 192, 193, 306, 307, 200, 201, 308, 309, 198, 199, 310, 311, 196, 197, 312, 313, 194, 195, 314, 315, 206, 207, 316, 317, 204, 205, 318, 319, 202, 203, 368, 369, 208, 209, 370, 371, 216, 217, 372, 373, 214, 215, 374, 375, 212, 213, 376, 377, 210, 211, 378, 379, 222, 223, 380, 381, 220, 221, 382, 383, 218, 219, 432, 433, 224, 225, 434, 435, 232, 233, 436, 437, 230, 231, 438, 439, 228, 229, 440, 441, 226, 227, 442, 443, 238, 239, 444, 445, 236, 237, 446, 447, 234, 235, 496, 497, 240, 241, 498, 499, 248, 249, 500, 501, 246, 247, 502, 503, 244, 245, 504, 505, 242, 243, 506, 507, 254, 255, 508, 509, 252, 253, 510, 511, 250, 251]
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], 256)
neighbour: 3 op_name: ['E', [0, 0, 0]]
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], 256)
neighbour: 3 op_name: ['C2x', [0, 0, 0]]
(256, 256)
([10, 11, 8, 9, 6, 7, 14, 15, 26, 27, 24, 25, 22, 23, 30, 31, 42, 43, 40, 41, 38, 39, 46, 47, 58, 59, 56, 57, 54, 55, 62, 63, 74, 75, 72, 73, 70, 71, 78, 79, 90, 91, 88, 89, 86, 87, 94, 95, 106, 107, 104, 105, 102, 103, 110, 111, 122, 123, 120, 121, 118, 119, 126, 127, 138, 139, 136, 137, 134, 135, 142, 143, 154, 155, 152, 153, 150, 151, 158, 159, 170, 171, 168, 169, 166, 167, 174, 175, 186, 187, 184, 185, 182, 183, 190, 191, 202, 203, 200, 201, 198, 199, 206, 207, 218, 219, 216, 217, 214, 215, 222, 223, 234, 235, 232, 233, 230, 231, 238, 239, 250, 251, 248, 249, 246, 247, 254, 255], 128)
neighbour: 3 op_name: ['C2y', [0, 0, 0]]
(256, 128)
([14, 15, 6, 7, 30, 31, 22, 23, 46, 47, 38, 39, 62, 63, 54, 55, 78, 79, 70, 71, 94, 95, 86, 87, 110, 111, 102, 103, 126, 127, 118, 119, 142, 143, 134, 135, 158, 159, 150, 151, 174, 175, 166, 167, 190, 191, 182, 183, 206, 207, 198, 199, 222, 223, 214, 215, 238, 239, 230, 231, 254, 255, 246, 247], 64)
neighbour: 3 op_name: ['C2z', [0, 0, 0]]
([14, 15, 6, 7, 30, 31, 22, 23, 46, 47, 38, 39, 62, 63, 54, 55, 78, 79, 70, 71, 94, 95, 86, 87, 110, 111, 102, 103, 126, 127, 118, 119, 142, 143, 134, 135, 158, 159, 150, 151, 174, 175, 166, 167, 190, 191, 182, 183, 206, 207, 198, 199, 222, 223, 214, 215, 238, 239, 230, 231, 254, 255, 246, 247], 64)
neighbour: 3 op_name: ['C31+', [0, 0, 0]]
(240, 60)
([14, 15, 6, 7, 62, 63, 54, 55, 206, 207, 198, 199, 254, 255, 246, 247, 222, 223, 214, 215, 238, 239, 230, 231], 24)
neighbour: 3 op_name: ['C31-', [0, 0, 0]]
([14, 15, 6, 7, 62, 63, 54, 55, 206, 207, 198, 199, 254, 255, 246, 247, 222, 223, 214, 215, 238, 239, 230, 231], 24)
neighbour: 3 op_name: ['C33-', [0, 0, 0]]
([14, 15, 6, 7, 62, 63, 54, 55, 206, 207, 198, 199, 254, 255, 246, 247, 222, 223, 214, 215, 238, 239, 230, 231], 24)
neighbour: 3 op_name: ['C33+', [0, 0, 0]]
([14, 15, 6, 7, 62, 63, 54, 55, 206, 207, 198, 199, 254, 255, 246, 247, 222, 223, 214, 215, 238, 239, 230, 231], 24)
neighbour: 3 op_name: ['C34-', [0, 0, 0]]
([14, 15, 6, 7, 62, 63, 54, 55, 206, 207, 198, 199, 254, 255, 246, 247, 222, 223, 214, 215, 238, 239, 230, 231], 24)
neighbour: 3 op_name: ['C34+', [0, 0, 0]]
([14, 15, 6, 7, 62, 63, 54, 55, 206, 207, 198, 199, 254, 255, 246, 247, 222, 223, 214, 215, 238, 239, 230, 231], 24)
neighbour: 3 op_name: ['C32-', [0, 0, 0]]
([14, 15, 6, 7, 62, 63, 54, 55, 206, 207, 198, 199, 254, 255, 246, 247, 222, 223, 214, 215, 238, 239, 230, 231], 24)
neighbour: 3 op_name: ['C32+', [0, 0, 0]]
([14, 15, 6, 7, 62, 63, 54, 55, 206, 207, 198, 199, 254, 255, 246, 247, 222, 223, 214, 215, 238, 239, 230, 231], 24)
neighbour: 3 op_name: ['C4x+', [0, 0, 0]]
(256, 24)
([6, 7, 54, 55, 198, 199, 246, 247, 222, 223, 214, 215], 12)
neighbour: 3 op_name: ['C4x-', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 222, 223, 214, 215], 12)
neighbour: 3 op_name: ['C4y+', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 222, 223, 214, 215], 12)
neighbour: 3 op_name: ['C4y-', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 222, 223, 214, 215], 12)
neighbour: 3 op_name: ['C4z+', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 222, 223, 214, 215], 12)
neighbour: 3 op_name: ['C4z-', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 222, 223, 214, 215], 12)
neighbour: 3 op_name: ['C2a', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 222, 223, 214, 215], 12)
neighbour: 3 op_name: ['C2b', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 222, 223, 214, 215], 12)
neighbour: 3 op_name: ['C2c', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 222, 223, 214, 215], 12)
neighbour: 3 op_name: ['C2e', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 222, 223, 214, 215], 12)
neighbour: 3 op_name: ['C2d', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 222, 223, 214, 215], 12)
neighbour: 3 op_name: ['C2f', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 222, 223, 214, 215], 12)
neighbour: 3 op_name: ['I', [0, 0, 0]]
(96, 4)
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['Sigma_x', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['Sigma_y', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['Sigma_z', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['S61-', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['S61+', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['S63+', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['S63-', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['S64+', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['S64-', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['S62+', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['S62-', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['S4x-', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['S4x+', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['S4y-', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['S4y+', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['S4z-', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['S4z+', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['Sigma_da', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['Sigma_db', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['Sigma_dc', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['Sigma_de', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['Sigma_dd', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
neighbour: 3 op_name: ['Sigma_df', [0, 0, 0]]
([6, 7, 54, 55, 198, 199, 246, 247, 214, 215], 10)
(192, 384)
[0, 1, 10, 11, 2, 3, 8, 9, 4, 5, 6, 7, 48, 49, 22, 23, 50, 51, 20, 21, 52, 53, 18, 19, 54, 55, 16, 17, 56, 57, 14, 15, 58, 59, 12, 13, 96, 97, 34, 35, 98, 99, 32, 33, 100, 101, 30, 31, 102, 103, 28, 29, 104, 105, 26, 27, 106, 107, 24, 25, 144, 145, 46, 47, 146, 147, 44, 45, 148, 149, 42, 43, 150, 151, 40, 41, 152, 153, 38, 39, 154, 155, 36, 37, 60, 61, 70, 71, 62, 63, 68, 69, 64, 65, 66, 67, 108, 109, 82, 83, 110, 111, 80, 81, 112, 113, 78, 79, 114, 115, 76, 77, 116, 117, 74, 75, 118, 119, 72, 73, 156, 157, 94, 95, 158, 159, 92, 93, 160, 161, 90, 91, 162, 163, 88, 89, 164, 165, 86, 87, 166, 167, 84, 85, 120, 121, 130, 131, 122, 123, 128, 129, 124, 125, 126, 127, 168, 169, 142, 143, 170, 171, 140, 141, 172, 173, 138, 139, 174, 175, 136, 137, 176, 177, 134, 135, 178, 179, 132, 133, 180, 181, 190, 191, 182, 183, 188, 189, 184, 185, 186, 187, 192, 193, 202, 203, 194, 195, 200, 201, 196, 197, 198, 199, 240, 241, 214, 215, 242, 243, 212, 213, 244, 245, 210, 211, 246, 247, 208, 209, 248, 249, 206, 207, 250, 251, 204, 205, 288, 289, 226, 227, 290, 291, 224, 225, 292, 293, 222, 223, 294, 295, 220, 221, 296, 297, 218, 219, 298, 299, 216, 217, 336, 337, 238, 239, 338, 339, 236, 237, 340, 341, 234, 235, 342, 343, 232, 233, 344, 345, 230, 231, 346, 347, 228, 229, 252, 253, 262, 263, 254, 255, 260, 261, 256, 257, 258, 259, 300, 301, 274, 275, 302, 303, 272, 273, 304, 305, 270, 271, 306, 307, 268, 269, 308, 309, 266, 267, 310, 311, 264, 265, 348, 349, 286, 287, 350, 351, 284, 285, 352, 353, 282, 283, 354, 355, 280, 281, 356, 357, 278, 279, 358, 359, 276, 277, 312, 313, 322, 323, 314, 315, 320, 321, 316, 317, 318, 319, 360, 361, 334, 335, 362, 363, 332, 333, 364, 365, 330, 331, 366, 367, 328, 329, 368, 369, 326, 327, 370, 371, 324, 325, 372, 373, 382, 383, 374, 375, 380, 381, 376, 377, 378, 379]
([10, 11, 8, 9, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 70, 71, 68, 69, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 130, 131, 128, 129, 126, 127, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 190, 191, 188, 189, 186, 187, 202, 203, 200, 201, 198, 199, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 262, 263, 260, 261, 258, 259, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 322, 323, 320, 321, 318, 319, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 382, 383, 380, 381, 378, 379], 192)
neighbour: 4 op_name: ['E', [0, 0, 0]]
([10, 11, 8, 9, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 70, 71, 68, 69, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 130, 131, 128, 129, 126, 127, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 190, 191, 188, 189, 186, 187, 202, 203, 200, 201, 198, 199, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 262, 263, 260, 261, 258, 259, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 322, 323, 320, 321, 318, 319, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 382, 383, 380, 381, 378, 379], 192)
neighbour: 4 op_name: ['C2x', [0, 0, 0]]
(160, 144)
([10, 8, 6, 7, 22, 23, 20, 21, 16, 17, 18, 19, 34, 35, 32, 33, 46, 47, 44, 45, 70, 68, 66, 67, 82, 83, 80, 81, 94, 95, 92, 93, 130, 128, 126, 127, 142, 143, 140, 141, 136, 137, 138, 139, 190, 188, 186, 187, 202, 200, 198, 199, 214, 215, 212, 213, 208, 209, 210, 211, 226, 227, 224, 225, 238, 239, 236, 237, 262, 260, 258, 259, 274, 275, 272, 273, 286, 287, 284, 285, 322, 320, 318, 319, 334, 335, 332, 333, 328, 329, 330, 331, 382, 380, 378, 379], 96)
neighbour: 4 op_name: ['C2y', [0, 0, 0]]
(96, 56)
([10, 8, 6, 18, 19, 32, 33, 46, 47, 70, 68, 66, 82, 83, 92, 93, 130, 128, 126, 138, 139, 190, 188, 186, 202, 200, 198, 210, 211, 224, 225, 238, 239, 262, 260, 258, 274, 275, 284, 285, 322, 320, 318, 330, 331, 382, 380, 378], 48)
neighbour: 4 op_name: ['C2z', [0, 0, 0]]
([10, 8, 6, 18, 19, 32, 33, 46, 47, 70, 68, 66, 82, 83, 92, 93, 130, 128, 126, 138, 139, 190, 188, 186, 202, 200, 198, 210, 211, 224, 225, 238, 239, 262, 260, 258, 274, 275, 284, 285, 322, 320, 318, 330, 331, 382, 380, 378], 48)
neighbour: 4 op_name: ['C31+', [0, 0, 0]]
(96, 48)
([6, 46, 47, 188, 186, 190, 92, 93, 198, 238, 239, 380, 378, 382, 284, 285], 16)
neighbour: 4 op_name: ['C31-', [0, 0, 0]]
([6, 46, 47, 188, 186, 190, 92, 93, 198, 238, 239, 380, 378, 382, 284, 285], 16)
neighbour: 4 op_name: ['C33-', [0, 0, 0]]
([6, 46, 47, 188, 186, 190, 92, 93, 198, 238, 239, 380, 378, 382, 284, 285], 16)
neighbour: 4 op_name: ['C33+', [0, 0, 0]]
([6, 46, 47, 188, 186, 190, 92, 93, 198, 238, 239, 380, 378, 382, 284, 285], 16)
neighbour: 4 op_name: ['C34-', [0, 0, 0]]
([6, 46, 47, 188, 186, 190, 92, 93, 198, 238, 239, 380, 378, 382, 284, 285], 16)
neighbour: 4 op_name: ['C34+', [0, 0, 0]]
([6, 46, 47, 188, 186, 190, 92, 93, 198, 238, 239, 380, 378, 382, 284, 285], 16)
neighbour: 4 op_name: ['C32-', [0, 0, 0]]
([6, 46, 47, 188, 186, 190, 92, 93, 198, 238, 239, 380, 378, 382, 284, 285], 16)
neighbour: 4 op_name: ['C32+', [0, 0, 0]]
([6, 46, 47, 188, 186, 190, 92, 93, 198, 238, 239, 380, 378, 382, 284, 285], 16)
neighbour: 4 op_name: ['C4x+', [0, 0, 0]]
(48, 6)
([6, 46, 47, 186, 190, 92, 198, 238, 239, 378, 382, 284], 12)
neighbour: 4 op_name: ['C4x-', [0, 0, 0]]
([6, 46, 47, 186, 190, 92, 198, 238, 239, 378, 382, 284], 12)
neighbour: 4 op_name: ['C4y+', [0, 0, 0]]
([6, 46, 47, 186, 190, 92, 198, 238, 239, 378, 382, 284], 12)
neighbour: 4 op_name: ['C4y-', [0, 0, 0]]
([6, 46, 47, 186, 190, 92, 198, 238, 239, 378, 382, 284], 12)
neighbour: 4 op_name: ['C4z+', [0, 0, 0]]
([6, 46, 47, 186, 190, 92, 198, 238, 239, 378, 382, 284], 12)
neighbour: 4 op_name: ['C4z-', [0, 0, 0]]
([6, 46, 47, 186, 190, 92, 198, 238, 239, 378, 382, 284], 12)
neighbour: 4 op_name: ['C2a', [0, 0, 0]]
([6, 46, 47, 186, 190, 92, 198, 238, 239, 378, 382, 284], 12)
neighbour: 4 op_name: ['C2b', [0, 0, 0]]
([6, 46, 47, 186, 190, 92, 198, 238, 239, 378, 382, 284], 12)
neighbour: 4 op_name: ['C2c', [0, 0, 0]]
([6, 46, 47, 186, 190, 92, 198, 238, 239, 378, 382, 284], 12)
neighbour: 4 op_name: ['C2e', [0, 0, 0]]
([6, 46, 47, 186, 190, 92, 198, 238, 239, 378, 382, 284], 12)
neighbour: 4 op_name: ['C2d', [0, 0, 0]]
([6, 46, 47, 186, 190, 92, 198, 238, 239, 378, 382, 284], 12)
neighbour: 4 op_name: ['C2f', [0, 0, 0]]
([6, 46, 47, 186, 190, 92, 198, 238, 239, 378, 382, 284], 12)
neighbour: 4 op_name: ['I', [0, 0, 0]]
(24, 2)
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['Sigma_x', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['Sigma_y', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['Sigma_z', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['S61-', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['S61+', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['S63+', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['S63-', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['S64+', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['S64-', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['S62+', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['S62-', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['S4x-', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['S4x+', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['S4y-', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['S4y+', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['S4z-', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['S4z+', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['Sigma_da', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['Sigma_db', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['Sigma_dc', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['Sigma_de', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['Sigma_dd', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
neighbour: 4 op_name: ['Sigma_df', [0, 0, 0]]
([6, 46, 47, 186, 190, 198, 238, 239, 378, 382], 10)
(768, 1536)
[768, 769, 10, 11, 770, 771, 8, 9, 772, 773, 6, 7, 774, 775, 4, 5, 776, 777, 2, 3, 778, 779, 0, 1, 780, 781, 46, 47, 782, 783, 44, 45, 784, 785, 42, 43, 786, 787, 40, 41, 788, 789, 38, 39, 790, 791, 36, 37, 792, 793, 34, 35, 794, 795, 32, 33, 796, 797, 30, 31, 798, 799, 28, 29, 800, 801, 26, 27, 802, 803, 24, 25, 804, 805, 22, 23, 806, 807, 20, 21, 808, 809, 18, 19, 810, 811, 16, 17, 812, 813, 14, 15, 814, 815, 12, 13, 960, 961, 58, 59, 962, 963, 56, 57, 964, 965, 54, 55, 966, 967, 52, 53, 968, 969, 50, 51, 970, 971, 48, 49, 972, 973, 94, 95, 974, 975, 92, 93, 976, 977, 90, 91, 978, 979, 88, 89, 980, 981, 86, 87, 982, 983, 84, 85, 984, 985, 82, 83, 986, 987, 80, 81, 988, 989, 78, 79, 990, 991, 76, 77, 992, 993, 74, 75, 994, 995, 72, 73, 996, 997, 70, 71, 998, 999, 68, 69, 1000, 1001, 66, 67, 1002, 1003, 64, 65, 1004, 1005, 62, 63, 1006, 1007, 60, 61, 1152, 1153, 106, 107, 1154, 1155, 104, 105, 1156, 1157, 102, 103, 1158, 1159, 100, 101, 1160, 1161, 98, 99, 1162, 1163, 96, 97, 1164, 1165, 142, 143, 1166, 1167, 140, 141, 1168, 1169, 138, 139, 1170, 1171, 136, 137, 1172, 1173, 134, 135, 1174, 1175, 132, 133, 1176, 1177, 130, 131, 1178, 1179, 128, 129, 1180, 1181, 126, 127, 1182, 1183, 124, 125, 1184, 1185, 122, 123, 1186, 1187, 120, 121, 1188, 1189, 118, 119, 1190, 1191, 116, 117, 1192, 1193, 114, 115, 1194, 1195, 112, 113, 1196, 1197, 110, 111, 1198, 1199, 108, 109, 1344, 1345, 154, 155, 1346, 1347, 152, 153, 1348, 1349, 150, 151, 1350, 1351, 148, 149, 1352, 1353, 146, 147, 1354, 1355, 144, 145, 1356, 1357, 190, 191, 1358, 1359, 188, 189, 1360, 1361, 186, 187, 1362, 1363, 184, 185, 1364, 1365, 182, 183, 1366, 1367, 180, 181, 1368, 1369, 178, 179, 1370, 1371, 176, 177, 1372, 1373, 174, 175, 1374, 1375, 172, 173, 1376, 1377, 170, 171, 1378, 1379, 168, 169, 1380, 1381, 166, 167, 1382, 1383, 164, 165, 1384, 1385, 162, 163, 1386, 1387, 160, 161, 1388, 1389, 158, 159, 1390, 1391, 156, 157, 816, 817, 202, 203, 818, 819, 200, 201, 820, 821, 198, 199, 822, 823, 196, 197, 824, 825, 194, 195, 826, 827, 192, 193, 828, 829, 238, 239, 830, 831, 236, 237, 832, 833, 234, 235, 834, 835, 232, 233, 836, 837, 230, 231, 838, 839, 228, 229, 840, 841, 226, 227, 842, 843, 224, 225, 844, 845, 222, 223, 846, 847, 220, 221, 848, 849, 218, 219, 850, 851, 216, 217, 852, 853, 214, 215, 854, 855, 212, 213, 856, 857, 210, 211, 858, 859, 208, 209, 860, 861, 206, 207, 862, 863, 204, 205, 1008, 1009, 250, 251, 1010, 1011, 248, 249, 1012, 1013, 246, 247, 1014, 1015, 244, 245, 1016, 1017, 242, 243, 1018, 1019, 240, 241, 1020, 1021, 286, 287, 1022, 1023, 284, 285, 1024, 1025, 282, 283, 1026, 1027, 280, 281, 1028, 1029, 278, 279, 1030, 1031, 276, 277, 1032, 1033, 274, 275, 1034, 1035, 272, 273, 1036, 1037, 270, 271, 1038, 1039, 268, 269, 1040, 1041, 266, 267, 1042, 1043, 264, 265, 1044, 1045, 262, 263, 1046, 1047, 260, 261, 1048, 1049, 258, 259, 1050, 1051, 256, 257, 1052, 1053, 254, 255, 1054, 1055, 252, 253, 1200, 1201, 298, 299, 1202, 1203, 296, 297, 1204, 1205, 294, 295, 1206, 1207, 292, 293, 1208, 1209, 290, 291, 1210, 1211, 288, 289, 1212, 1213, 334, 335, 1214, 1215, 332, 333, 1216, 1217, 330, 331, 1218, 1219, 328, 329, 1220, 1221, 326, 327, 1222, 1223, 324, 325, 1224, 1225, 322, 323, 1226, 1227, 320, 321, 1228, 1229, 318, 319, 1230, 1231, 316, 317, 1232, 1233, 314, 315, 1234, 1235, 312, 313, 1236, 1237, 310, 311, 1238, 1239, 308, 309, 1240, 1241, 306, 307, 1242, 1243, 304, 305, 1244, 1245, 302, 303, 1246, 1247, 300, 301, 1392, 1393, 346, 347, 1394, 1395, 344, 345, 1396, 1397, 342, 343, 1398, 1399, 340, 341, 1400, 1401, 338, 339, 1402, 1403, 336, 337, 1404, 1405, 382, 383, 1406, 1407, 380, 381, 1408, 1409, 378, 379, 1410, 1411, 376, 377, 1412, 1413, 374, 375, 1414, 1415, 372, 373, 1416, 1417, 370, 371, 1418, 1419, 368, 369, 1420, 1421, 366, 367, 1422, 1423, 364, 365, 1424, 1425, 362, 363, 1426, 1427, 360, 361, 1428, 1429, 358, 359, 1430, 1431, 356, 357, 1432, 1433, 354, 355, 1434, 1435, 352, 353, 1436, 1437, 350, 351, 1438, 1439, 348, 349, 864, 865, 394, 395, 866, 867, 392, 393, 868, 869, 390, 391, 870, 871, 388, 389, 872, 873, 386, 387, 874, 875, 384, 385, 876, 877, 430, 431, 878, 879, 428, 429, 880, 881, 426, 427, 882, 883, 424, 425, 884, 885, 422, 423, 886, 887, 420, 421, 888, 889, 418, 419, 890, 891, 416, 417, 892, 893, 414, 415, 894, 895, 412, 413, 896, 897, 410, 411, 898, 899, 408, 409, 900, 901, 406, 407, 902, 903, 404, 405, 904, 905, 402, 403, 906, 907, 400, 401, 908, 909, 398, 399, 910, 911, 396, 397, 1056, 1057, 442, 443, 1058, 1059, 440, 441, 1060, 1061, 438, 439, 1062, 1063, 436, 437, 1064, 1065, 434, 435, 1066, 1067, 432, 433, 1068, 1069, 478, 479, 1070, 1071, 476, 477, 1072, 1073, 474, 475, 1074, 1075, 472, 473, 1076, 1077, 470, 471, 1078, 1079, 468, 469, 1080, 1081, 466, 467, 1082, 1083, 464, 465, 1084, 1085, 462, 463, 1086, 1087, 460, 461, 1088, 1089, 458, 459, 1090, 1091, 456, 457, 1092, 1093, 454, 455, 1094, 1095, 452, 453, 1096, 1097, 450, 451, 1098, 1099, 448, 449, 1100, 1101, 446, 447, 1102, 1103, 444, 445, 1248, 1249, 490, 491, 1250, 1251, 488, 489, 1252, 1253, 486, 487, 1254, 1255, 484, 485, 1256, 1257, 482, 483, 1258, 1259, 480, 481, 1260, 1261, 526, 527, 1262, 1263, 524, 525, 1264, 1265, 522, 523, 1266, 1267, 520, 521, 1268, 1269, 518, 519, 1270, 1271, 516, 517, 1272, 1273, 514, 515, 1274, 1275, 512, 513, 1276, 1277, 510, 511, 1278, 1279, 508, 509, 1280, 1281, 506, 507, 1282, 1283, 504, 505, 1284, 1285, 502, 503, 1286, 1287, 500, 501, 1288, 1289, 498, 499, 1290, 1291, 496, 497, 1292, 1293, 494, 495, 1294, 1295, 492, 493, 1440, 1441, 538, 539, 1442, 1443, 536, 537, 1444, 1445, 534, 535, 1446, 1447, 532, 533, 1448, 1449, 530, 531, 1450, 1451, 528, 529, 1452, 1453, 574, 575, 1454, 1455, 572, 573, 1456, 1457, 570, 571, 1458, 1459, 568, 569, 1460, 1461, 566, 567, 1462, 1463, 564, 565, 1464, 1465, 562, 563, 1466, 1467, 560, 561, 1468, 1469, 558, 559, 1470, 1471, 556, 557, 1472, 1473, 554, 555, 1474, 1475, 552, 553, 1476, 1477, 550, 551, 1478, 1479, 548, 549, 1480, 1481, 546, 547, 1482, 1483, 544, 545, 1484, 1485, 542, 543, 1486, 1487, 540, 541, 912, 913, 586, 587, 914, 915, 584, 585, 916, 917, 582, 583, 918, 919, 580, 581, 920, 921, 578, 579, 922, 923, 576, 577, 924, 925, 622, 623, 926, 927, 620, 621, 928, 929, 618, 619, 930, 931, 616, 617, 932, 933, 614, 615, 934, 935, 612, 613, 936, 937, 610, 611, 938, 939, 608, 609, 940, 941, 606, 607, 942, 943, 604, 605, 944, 945, 602, 603, 946, 947, 600, 601, 948, 949, 598, 599, 950, 951, 596, 597, 952, 953, 594, 595, 954, 955, 592, 593, 956, 957, 590, 591, 958, 959, 588, 589, 1104, 1105, 634, 635, 1106, 1107, 632, 633, 1108, 1109, 630, 631, 1110, 1111, 628, 629, 1112, 1113, 626, 627, 1114, 1115, 624, 625, 1116, 1117, 670, 671, 1118, 1119, 668, 669, 1120, 1121, 666, 667, 1122, 1123, 664, 665, 1124, 1125, 662, 663, 1126, 1127, 660, 661, 1128, 1129, 658, 659, 1130, 1131, 656, 657, 1132, 1133, 654, 655, 1134, 1135, 652, 653, 1136, 1137, 650, 651, 1138, 1139, 648, 649, 1140, 1141, 646, 647, 1142, 1143, 644, 645, 1144, 1145, 642, 643, 1146, 1147, 640, 641, 1148, 1149, 638, 639, 1150, 1151, 636, 637, 1296, 1297, 682, 683, 1298, 1299, 680, 681, 1300, 1301, 678, 679, 1302, 1303, 676, 677, 1304, 1305, 674, 675, 1306, 1307, 672, 673, 1308, 1309, 718, 719, 1310, 1311, 716, 717, 1312, 1313, 714, 715, 1314, 1315, 712, 713, 1316, 1317, 710, 711, 1318, 1319, 708, 709, 1320, 1321, 706, 707, 1322, 1323, 704, 705, 1324, 1325, 702, 703, 1326, 1327, 700, 701, 1328, 1329, 698, 699, 1330, 1331, 696, 697, 1332, 1333, 694, 695, 1334, 1335, 692, 693, 1336, 1337, 690, 691, 1338, 1339, 688, 689, 1340, 1341, 686, 687, 1342, 1343, 684, 685, 1488, 1489, 730, 731, 1490, 1491, 728, 729, 1492, 1493, 726, 727, 1494, 1495, 724, 725, 1496, 1497, 722, 723, 1498, 1499, 720, 721, 1500, 1501, 766, 767, 1502, 1503, 764, 765, 1504, 1505, 762, 763, 1506, 1507, 760, 761, 1508, 1509, 758, 759, 1510, 1511, 756, 757, 1512, 1513, 754, 755, 1514, 1515, 752, 753, 1516, 1517, 750, 751, 1518, 1519, 748, 749, 1520, 1521, 746, 747, 1522, 1523, 744, 745, 1524, 1525, 742, 743, 1526, 1527, 740, 741, 1528, 1529, 738, 739, 1530, 1531, 736, 737, 1532, 1533, 734, 735, 1534, 1535, 732, 733]
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767], 768)
neighbour: 5 op_name: ['E', [0, 0, 0]]
([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767], 768)
neighbour: 5 op_name: ['C2x', [0, 0, 0]]
(768, 768)
([22, 23, 18, 19, 20, 21, 14, 15, 16, 17, 12, 13, 46, 47, 38, 39, 42, 43, 34, 35, 44, 45, 40, 41, 70, 71, 66, 67, 68, 69, 62, 63, 64, 65, 60, 61, 94, 95, 86, 87, 90, 91, 82, 83, 92, 93, 88, 89, 118, 119, 114, 115, 116, 117, 110, 111, 112, 113, 108, 109, 142, 143, 134, 135, 138, 139, 130, 131, 140, 141, 136, 137, 166, 167, 162, 163, 164, 165, 158, 159, 160, 161, 156, 157, 190, 191, 182, 183, 186, 187, 178, 179, 188, 189, 184, 185, 214, 215, 210, 211, 212, 213, 206, 207, 208, 209, 204, 205, 238, 239, 230, 231, 234, 235, 226, 227, 236, 237, 232, 233, 262, 263, 258, 259, 260, 261, 254, 255, 256, 257, 252, 253, 286, 287, 278, 279, 282, 283, 274, 275, 284, 285, 280, 281, 310, 311, 306, 307, 308, 309, 302, 303, 304, 305, 300, 301, 334, 335, 326, 327, 330, 331, 322, 323, 332, 333, 328, 329, 358, 359, 354, 355, 356, 357, 350, 351, 352, 353, 348, 349, 382, 383, 374, 375, 378, 379, 370, 371, 380, 381, 376, 377, 406, 407, 402, 403, 404, 405, 398, 399, 400, 401, 396, 397, 430, 431, 422, 423, 426, 427, 418, 419, 428, 429, 424, 425, 454, 455, 450, 451, 452, 453, 446, 447, 448, 449, 444, 445, 478, 479, 470, 471, 474, 475, 466, 467, 476, 477, 472, 473, 502, 503, 498, 499, 500, 501, 494, 495, 496, 497, 492, 493, 526, 527, 518, 519, 522, 523, 514, 515, 524, 525, 520, 521, 550, 551, 546, 547, 548, 549, 542, 543, 544, 545, 540, 541, 574, 575, 566, 567, 570, 571, 562, 563, 572, 573, 568, 569, 598, 599, 594, 595, 596, 597, 590, 591, 592, 593, 588, 589, 622, 623, 614, 615, 618, 619, 610, 611, 620, 621, 616, 617, 646, 647, 642, 643, 644, 645, 638, 639, 640, 641, 636, 637, 670, 671, 662, 663, 666, 667, 658, 659, 668, 669, 664, 665, 694, 695, 690, 691, 692, 693, 686, 687, 688, 689, 684, 685, 718, 719, 710, 711, 714, 715, 706, 707, 716, 717, 712, 713, 742, 743, 738, 739, 740, 741, 734, 735, 736, 737, 732, 733, 766, 767, 758, 759, 762, 763, 754, 755, 764, 765, 760, 761], 384)
neighbour: 5 op_name: ['C2y', [0, 0, 0]]
(768, 384)
([40, 41, 44, 45, 42, 43, 46, 47, 34, 35, 38, 39, 88, 89, 92, 93, 90, 91, 94, 95, 82, 83, 86, 87, 136, 137, 140, 141, 138, 139, 142, 143, 130, 131, 134, 135, 184, 185, 188, 189, 186, 187, 190, 191, 178, 179, 182, 183, 232, 233, 236, 237, 234, 235, 238, 239, 226, 227, 230, 231, 280, 281, 284, 285, 282, 283, 286, 287, 274, 275, 278, 279, 328, 329, 332, 333, 330, 331, 334, 335, 322, 323, 326, 327, 376, 377, 380, 381, 378, 379, 382, 383, 370, 371, 374, 375, 424, 425, 428, 429, 426, 427, 430, 431, 418, 419, 422, 423, 472, 473, 476, 477, 474, 475, 478, 479, 466, 467, 470, 471, 520, 521, 524, 525, 522, 523, 526, 527, 514, 515, 518, 519, 568, 569, 572, 573, 570, 571, 574, 575, 562, 563, 566, 567, 616, 617, 620, 621, 618, 619, 622, 623, 610, 611, 614, 615, 664, 665, 668, 669, 666, 667, 670, 671, 658, 659, 662, 663, 712, 713, 716, 717, 714, 715, 718, 719, 706, 707, 710, 711, 760, 761, 764, 765, 762, 763, 766, 767, 754, 755, 758, 759], 192)
neighbour: 5 op_name: ['C2z', [0, 0, 0]]
([40, 41, 44, 45, 42, 43, 46, 47, 34, 35, 38, 39, 88, 89, 92, 93, 90, 91, 94, 95, 82, 83, 86, 87, 136, 137, 140, 141, 138, 139, 142, 143, 130, 131, 134, 135, 184, 185, 188, 189, 186, 187, 190, 191, 178, 179, 182, 183, 232, 233, 236, 237, 234, 235, 238, 239, 226, 227, 230, 231, 280, 281, 284, 285, 282, 283, 286, 287, 274, 275, 278, 279, 328, 329, 332, 333, 330, 331, 334, 335, 322, 323, 326, 327, 376, 377, 380, 381, 378, 379, 382, 383, 370, 371, 374, 375, 424, 425, 428, 429, 426, 427, 430, 431, 418, 419, 422, 423, 472, 473, 476, 477, 474, 475, 478, 479, 466, 467, 470, 471, 520, 521, 524, 525, 522, 523, 526, 527, 514, 515, 518, 519, 568, 569, 572, 573, 570, 571, 574, 575, 562, 563, 566, 567, 616, 617, 620, 621, 618, 619, 622, 623, 610, 611, 614, 615, 664, 665, 668, 669, 666, 667, 670, 671, 658, 659, 662, 663, 712, 713, 716, 717, 714, 715, 718, 719, 706, 707, 710, 711, 760, 761, 764, 765, 762, 763, 766, 767, 754, 755, 758, 759], 192)
neighbour: 5 op_name: ['C31+', [0, 0, 0]]
(768, 192)
([34, 35, 42, 43, 190, 191, 182, 183, 188, 189, 178, 179, 184, 185, 186, 187, 622, 623, 614, 615, 620, 621, 610, 611, 616, 617, 618, 619, 766, 767, 758, 759, 764, 765, 754, 755, 760, 761, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667, 718, 719, 710, 711, 716, 717, 706, 707, 712, 713, 714, 715], 64)
neighbour: 5 op_name: ['C31-', [0, 0, 0]]
([34, 35, 42, 43, 190, 191, 182, 183, 188, 189, 178, 179, 184, 185, 186, 187, 622, 623, 614, 615, 620, 621, 610, 611, 616, 617, 618, 619, 766, 767, 758, 759, 764, 765, 754, 755, 760, 761, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667, 718, 719, 710, 711, 716, 717, 706, 707, 712, 713, 714, 715], 64)
neighbour: 5 op_name: ['C33-', [0, 0, 0]]
([34, 35, 42, 43, 190, 191, 182, 183, 188, 189, 178, 179, 184, 185, 186, 187, 622, 623, 614, 615, 620, 621, 610, 611, 616, 617, 618, 619, 766, 767, 758, 759, 764, 765, 754, 755, 760, 761, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667, 718, 719, 710, 711, 716, 717, 706, 707, 712, 713, 714, 715], 64)
neighbour: 5 op_name: ['C33+', [0, 0, 0]]
([34, 35, 42, 43, 190, 191, 182, 183, 188, 189, 178, 179, 184, 185, 186, 187, 622, 623, 614, 615, 620, 621, 610, 611, 616, 617, 618, 619, 766, 767, 758, 759, 764, 765, 754, 755, 760, 761, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667, 718, 719, 710, 711, 716, 717, 706, 707, 712, 713, 714, 715], 64)
neighbour: 5 op_name: ['C34-', [0, 0, 0]]
([34, 35, 42, 43, 190, 191, 182, 183, 188, 189, 178, 179, 184, 185, 186, 187, 622, 623, 614, 615, 620, 621, 610, 611, 616, 617, 618, 619, 766, 767, 758, 759, 764, 765, 754, 755, 760, 761, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667, 718, 719, 710, 711, 716, 717, 706, 707, 712, 713, 714, 715], 64)
neighbour: 5 op_name: ['C34+', [0, 0, 0]]
([34, 35, 42, 43, 190, 191, 182, 183, 188, 189, 178, 179, 184, 185, 186, 187, 622, 623, 614, 615, 620, 621, 610, 611, 616, 617, 618, 619, 766, 767, 758, 759, 764, 765, 754, 755, 760, 761, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667, 718, 719, 710, 711, 716, 717, 706, 707, 712, 713, 714, 715], 64)
neighbour: 5 op_name: ['C32-', [0, 0, 0]]
([34, 35, 42, 43, 190, 191, 182, 183, 188, 189, 178, 179, 184, 185, 186, 187, 622, 623, 614, 615, 620, 621, 610, 611, 616, 617, 618, 619, 766, 767, 758, 759, 764, 765, 754, 755, 760, 761, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667, 718, 719, 710, 711, 716, 717, 706, 707, 712, 713, 714, 715], 64)
neighbour: 5 op_name: ['C32+', [0, 0, 0]]
([34, 35, 42, 43, 190, 191, 182, 183, 188, 189, 178, 179, 184, 185, 186, 187, 622, 623, 614, 615, 620, 621, 610, 611, 616, 617, 618, 619, 766, 767, 758, 759, 764, 765, 754, 755, 760, 761, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667, 718, 719, 710, 711, 716, 717, 706, 707, 712, 713, 714, 715], 64)
neighbour: 5 op_name: ['C4x+', [0, 0, 0]]
(768, 64)
([42, 43, 182, 183, 178, 179, 186, 187, 614, 615, 610, 611, 618, 619, 758, 759, 754, 755, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667], 32)
neighbour: 5 op_name: ['C4x-', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 186, 187, 614, 615, 610, 611, 618, 619, 758, 759, 754, 755, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667], 32)
neighbour: 5 op_name: ['C4y+', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 186, 187, 614, 615, 610, 611, 618, 619, 758, 759, 754, 755, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667], 32)
neighbour: 5 op_name: ['C4y-', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 186, 187, 614, 615, 610, 611, 618, 619, 758, 759, 754, 755, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667], 32)
neighbour: 5 op_name: ['C4z+', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 186, 187, 614, 615, 610, 611, 618, 619, 758, 759, 754, 755, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667], 32)
neighbour: 5 op_name: ['C4z-', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 186, 187, 614, 615, 610, 611, 618, 619, 758, 759, 754, 755, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667], 32)
neighbour: 5 op_name: ['C2a', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 186, 187, 614, 615, 610, 611, 618, 619, 758, 759, 754, 755, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667], 32)
neighbour: 5 op_name: ['C2b', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 186, 187, 614, 615, 610, 611, 618, 619, 758, 759, 754, 755, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667], 32)
neighbour: 5 op_name: ['C2c', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 186, 187, 614, 615, 610, 611, 618, 619, 758, 759, 754, 755, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667], 32)
neighbour: 5 op_name: ['C2e', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 186, 187, 614, 615, 610, 611, 618, 619, 758, 759, 754, 755, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667], 32)
neighbour: 5 op_name: ['C2d', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 186, 187, 614, 615, 610, 611, 618, 619, 758, 759, 754, 755, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667], 32)
neighbour: 5 op_name: ['C2f', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 186, 187, 614, 615, 610, 611, 618, 619, 758, 759, 754, 755, 762, 763, 670, 671, 662, 663, 668, 669, 658, 659, 664, 665, 666, 667], 32)
neighbour: 5 op_name: ['I', [0, 0, 0]]
(288, 12)
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['Sigma_x', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['Sigma_y', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['Sigma_z', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['S61-', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['S61+', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['S63+', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['S63-', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['S64+', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['S64-', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['S62+', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['S62-', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['S4x-', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['S4x+', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['S4y-', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['S4y+', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['S4z-', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['S4z+', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['Sigma_da', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['Sigma_db', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['Sigma_dc', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['Sigma_de', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['Sigma_dd', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
neighbour: 5 op_name: ['Sigma_df', [0, 0, 0]]
([42, 43, 182, 183, 178, 179, 614, 615, 610, 611, 758, 759, 754, 755, 762, 763, 670, 671, 668, 669], 20)
完成Hamiltonian构建
{0: 0, 30: 1, 32: 2, 62: 3}
{6: 4, 7: 5, 46: 6, 47: 7, 154: 8, 155: 9, 186: 10, 187: 11, 190: 12, 191: 13}
{16: 14, 92: 15, 93: 16, 372: 17, 376: 18, 188: 19, 400: 20, 476: 21, 477: 22, 756: 23, 760: 24, 572: 25}
{6: 26, 7: 27, 54: 28, 55: 29, 198: 30, 199: 31, 246: 32, 247: 33, 214: 34, 215: 35}
{6: 36, 46: 37, 47: 38, 186: 39, 190: 40, 198: 41, 238: 42, 239: 43, 378: 44, 382: 45}
{42: 46, 43: 47, 182: 48, 183: 49, 178: 50, 179: 51, 614: 52, 615: 53, 610: 54, 611: 55, 758: 56, 759: 57, 754: 58, 755: 59, 762: 60, 763: 61, 670: 62, 671: 63, 668: 64, 669: 65}
{0: array([[([array([0., 0., 0.])], [{0: 1}]), ([], []), ([], []), ([], []),
        ([], []), ([], []), ([], []), ([], [])],
       [([], []), ([array([0., 0., 0.])], [{1: (1-0j)}]), ([], []),
        ([], []), ([], []), ([], []), ([], []), ([], [])],
       [([], []), ([], []), ([array([0., 0., 0.])], [{1: (1-0j)}]),
        ([], []), ([], []), ([], []), ([], []), ([], [])],
       [([], []), ([], []), ([], []), ([array([0., 0., 0.])], [{1: 1}]),
        ([], []), ([], []), ([], []), ([], [])],
       [([], []), ([], []), ([], []), ([], []),
        ([array([0., 0., 0.])], [{2: 1}]), ([], []), ([], []), ([], [])],
       [([], []), ([], []), ([], []), ([], []), ([], []),
        ([array([0., 0., 0.])], [{3: (1+0j)}]), ([], []), ([], [])],
       [([], []), ([], []), ([], []), ([], []), ([], []), ([], []),
        ([array([0., 0., 0.])], [{3: (1-0j)}]), ([], [])],
       [([], []), ([], []), ([], []), ([], []), ([], []), ([], []),
        ([], []), ([array([0., 0., 0.])], [{3: 1}])]], dtype=object), 1: array([[([], []), ([], []), ([], []), ([], []),
        ([array([-0.5, -0.5,  0.5]), array([-0.5,  0.5, -0.5]), array([-0.5,  0.5,  0.5]), array([ 0.5, -0.5, -0.5]), array([ 0.5, -0.5,  0.5]), array([ 0.5,  0.5, -0.5])], [{4: (1-0j), 5: 1j}, {4: (1-0j), 5: 1j}, {4: (1-0j), 5: 1j}, {4: 1, 5: 1j}, {4: (1-0j), 5: 1j}, {4: (1-0j), 5: 1j}]),
        ([array([-0.5,  0.5,  0.5]), array([ 0.5, -0.5, -0.5])], [{6: (1+0j), 7: (-0+1j)}, {6: (-1+0j), 7: -1j}]),
        ([array([-0.5,  0.5, -0.5]), array([ 0.5, -0.5,  0.5])], [{6: (-1+0j), 7: -1j}, {6: (1-0j), 7: 1j}]),
        ([array([-0.5, -0.5,  0.5]), array([ 0.5,  0.5, -0.5])], [{6: (-1+0j), 7: -1j}, {6: 1, 7: 1j}])],
       [([], []), ([], []), ([], []), ([], []),
        ([array([-0.5,  0.5,  0.5]), array([ 0.5, -0.5, -0.5])], [{8: (1+0j), 9: (-0+1j)}, {8: (-1+0j), 9: -1j}]),
        ([array([-0.5, -0.5,  0.5]), array([-0.5,  0.5, -0.5]), array([-0.5,  0.5,  0.5]), array([ 0.5, -0.5, -0.5]), array([ 0.5, -0.5,  0.5]), array([ 0.5,  0.5, -0.5])], [{10: (1-0j), 11: 1j}, {10: (1-0j), 11: 1j}, {12: (1-0j), 13: 1j}, {12: (1-0j), 13: 1j}, {10: (1-0j), 11: 1j}, {10: (1-0j), 11: 1j}]),
        ([], []), ([], [])],
       [([], []), ([], []), ([], []), ([], []),
        ([array([-0.5,  0.5, -0.5]), array([ 0.5, -0.5,  0.5])], [{8: (-1+0j), 9: -1j}, {8: (1-0j), 9: 1j}]),
        ([], []),
        ([array([-0.5, -0.5,  0.5]), array([-0.5,  0.5, -0.5]), array([-0.5,  0.5,  0.5]), array([ 0.5, -0.5, -0.5]), array([ 0.5, -0.5,  0.5]), array([ 0.5,  0.5, -0.5])], [{10: (1-0j), 11: 1j}, {12: (1-0j), 13: 1j}, {10: (1-0j), 11: 1j}, {10: (1-0j), 11: 1j}, {12: (1-0j), 13: 1j}, {10: (1-0j), 11: 1j}]),
        ([], [])],
       [([], []), ([], []), ([], []), ([], []),
        ([array([-0.5, -0.5,  0.5]), array([ 0.5,  0.5, -0.5])], [{8: (-1+0j), 9: -1j}, {8: 1, 9: 1j}]),
        ([], []), ([], []),
        ([array([-0.5, -0.5,  0.5]), array([-0.5,  0.5, -0.5]), array([-0.5,  0.5,  0.5]), array([ 0.5, -0.5, -0.5]), array([ 0.5, -0.5,  0.5]), array([ 0.5,  0.5, -0.5])], [{12: (1-0j), 13: 1j}, {10: (1+0j), 11: 1j}, {10: (1-0j), 11: 1j}, {10: 1, 11: 1j}, {10: (1-0j), 11: 1j}, {12: 1, 13: 1j}])],
       [([array([-0.5, -0.5,  0.5]), array([-0.5,  0.5, -0.5]), array([-0.5,  0.5,  0.5]), array([ 0.5, -0.5, -0.5]), array([ 0.5, -0.5,  0.5]), array([ 0.5,  0.5, -0.5])], [{4: (1-0j), 5: -1j}, {4: (1-0j), 5: -1j}, {4: (1-0j), 5: -1j}, {4: (1-0j), 5: -1j}, {4: (1-0j), 5: -1j}, {4: (1-0j), 5: -1j}]),
        ([array([-0.5,  0.5,  0.5]), array([ 0.5, -0.5, -0.5])], [{8: (-1+0j), 9: (-0+1j)}, {8: (1+0j), 9: -1j}]),
        ([array([-0.5,  0.5, -0.5]), array([ 0.5, -0.5,  0.5])], [{8: (1-0j), 9: -1j}, {8: (-1+0j), 9: 1j}]),
        ([array([-0.5, -0.5,  0.5]), array([ 0.5,  0.5, -0.5])], [{8: (1-0j), 9: -1j}, {8: (-1+0j), 9: (-0+1j)}]),
        ([], []), ([], []), ([], []), ([], [])],
       [([array([-0.5,  0.5,  0.5]), array([ 0.5, -0.5, -0.5])], [{6: (-1+0j), 7: (-0+1j)}, {6: (1+0j), 7: -1j}]),
        ([array([-0.5, -0.5,  0.5]), array([-0.5,  0.5, -0.5]), array([-0.5,  0.5,  0.5]), array([ 0.5, -0.5, -0.5]), array([ 0.5, -0.5,  0.5]), array([ 0.5,  0.5, -0.5])], [{10: (1-0j), 11: -1j}, {10: (1-0j), 11: -1j}, {12: (1-0j), 13: -1j}, {12: (1-0j), 13: -1j}, {10: (1-0j), 11: -1j}, {10: (1-0j), 11: -1j}]),
        ([], []), ([], []), ([], []), ([], []), ([], []), ([], [])],
       [([array([-0.5,  0.5, -0.5]), array([ 0.5, -0.5,  0.5])], [{6: (1-0j), 7: -1j}, {6: (-1+0j), 7: 1j}]),
        ([], []),
        ([array([-0.5, -0.5,  0.5]), array([-0.5,  0.5, -0.5]), array([-0.5,  0.5,  0.5]), array([ 0.5, -0.5, -0.5]), array([ 0.5, -0.5,  0.5]), array([ 0.5,  0.5, -0.5])], [{10: (1-0j), 11: -1j}, {12: (1-0j), 13: -1j}, {10: (1-0j), 11: -1j}, {10: (1-0j), 11: -1j}, {12: (1-0j), 13: -1j}, {10: (1-0j), 11: -1j}]),
        ([], []), ([], []), ([], []), ([], []), ([], [])],
       [([array([-0.5, -0.5,  0.5]), array([ 0.5,  0.5, -0.5])], [{6: (1-0j), 7: -1j}, {6: (-1+0j), 7: (-0+1j)}]),
        ([], []), ([], []),
        ([array([-0.5, -0.5,  0.5]), array([-0.5,  0.5, -0.5]), array([-0.5,  0.5,  0.5]), array([ 0.5, -0.5, -0.5]), array([ 0.5, -0.5,  0.5]), array([ 0.5,  0.5, -0.5])], [{12: (1-0j), 13: -1j}, {10: (1-0j), 11: -1j}, {10: (1-0j), 11: -1j}, {10: (1-0j), 11: -1j}, {10: (1+0j), 11: -1j}, {12: (1-0j), 13: -1j}]),
        ([], []), ([], []), ([], []), ([], [])]], dtype=object), 2: array([[([array([-1.,  0.,  0.]), array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([ 0.,  1., -1.]), array([0., 1., 0.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.]), array([1., 0., 0.])], [{14: (1-0j)}, {14: (1-0j)}, {14: (1-0j)}, {14: (1-0j)}, {14: (1-0j)}, {14: (1-0j)}, {14: (1-0j)}, {14: (1-0j)}, {14: 1}, {14: (1-0j)}, {14: (1-0j)}, {14: (1-0j)}]),
        ([array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  0.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([0., 1., 0.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.])], [{15: (1+0j), 16: 1j}, {15: (1+0j), 16: (-0+1j)}, {15: (-1+0j), 16: -1j}, {15: (-1+0j), 16: -1j}, {15: (1+0j), 16: (-0+1j)}, {15: (1+0j), 16: 1j}, {15: (-1+0j), 16: -1j}, {15: (-1+0j), 16: -1j}]),
        ([array([-1.,  0.,  0.]), array([-1.,  1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([ 0.,  1., -1.]), array([ 1., -1.,  0.]), array([1., 0., 0.])], [{15: (-1-0j), 16: -1j}, {15: (-1+0j), 16: -1j}, {15: (1+0j), 16: (-0+1j)}, {15: (-1+0j), 16: -1j}, {15: (1-0j), 16: 1j}, {15: (-1+0j), 16: -1j}, {15: (1-0j), 16: 1j}, {15: (1+0j), 16: (-0+1j)}]),
        ([array([-1.,  0.,  0.]), array([-1.,  0.,  1.]), array([ 0., -1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  1., -1.]), array([0., 1., 0.]), array([ 1.,  0., -1.]), array([1., 0., 0.])], [{15: (-1+0j), 16: -1j}, {15: (-1+0j), 16: -1j}, {15: (-1+0j), 16: -1j}, {15: (-1+0j), 16: -1j}, {15: (1-0j), 16: 1j}, {15: (1-0j), 16: 1j}, {15: 1, 16: 1j}, {15: (1-0j), 16: 1j}]),
        ([], []), ([], []), ([], []), ([], [])],
       [([array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  0.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([0., 1., 0.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.])], [{15: (-1+0j), 16: 1j}, {15: (-1+0j), 16: (-0+1j)}, {15: (1+0j), 16: -1j}, {15: (1+0j), 16: -1j}, {15: (-1+0j), 16: (-0+1j)}, {15: (-1+0j), 16: 1j}, {15: (1+0j), 16: -1j}, {15: (1+0j), 16: -1j}]),
        ([array([-1.,  0.,  0.]), array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([ 0.,  1., -1.]), array([0., 1., 0.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.]), array([1., 0., 0.])], [{17: (1-0j)}, {18: (1-0j)}, {18: (1-0j)}, {18: (1-0j)}, {17: (1-0j)}, {18: (1-0j)}, {18: (1-0j)}, {17: (1-0j)}, {18: (1-0j)}, {18: (1-0j)}, {18: (1-0j)}, {17: (1-0j)}]),
        ([array([-1.,  1.,  0.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([ 1., -1.,  0.])], [{19: (1+0j)}, {19: (-1+0j)}, {19: (-1+0j)}, {19: (1-0j)}]),
        ([array([-1.,  0.,  1.]), array([ 0., -1.,  0.]), array([0., 1., 0.]), array([ 1.,  0., -1.])], [{19: (1+0j)}, {19: (-1+0j)}, {19: (-1+0j)}, {19: 1}]),
        ([], []), ([], []), ([], []), ([], [])],
       [([array([-1.,  0.,  0.]), array([-1.,  1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([ 0.,  1., -1.]), array([ 1., -1.,  0.]), array([1., 0., 0.])], [{15: (1+0j), 16: -1j}, {15: (1-0j), 16: -1j}, {15: (-1+0j), 16: (-0+1j)}, {15: (1-0j), 16: -1j}, {15: (-1+0j), 16: 1j}, {15: (1+0j), 16: -1j}, {15: (-1+0j), 16: 1j}, {15: (-1-0j), 16: (-0+1j)}]),
        ([array([-1.,  1.,  0.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([ 1., -1.,  0.])], [{19: (1-0j)}, {19: (-1+0j)}, {19: (-1+0j)}, {19: (1+0j)}]),
        ([array([-1.,  0.,  0.]), array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([ 0.,  1., -1.]), array([0., 1., 0.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.]), array([1., 0., 0.])], [{18: (1-0j)}, {17: (1-0j)}, {18: (1-0j)}, {17: (1-0j)}, {18: (1-0j)}, {18: (1-0j)}, {18: (1-0j)}, {18: (1-0j)}, {17: (1-0j)}, {18: (1-0j)}, {17: (1-0j)}, {18: (1-0j)}]),
        ([array([-1.,  0.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  1., -1.]), array([1., 0., 0.])], [{19: (-1+0j)}, {19: (1-0j)}, {19: (1-0j)}, {19: (-1+0j)}]),
        ([], []), ([], []), ([], []), ([], [])],
       [([array([-1.,  0.,  0.]), array([-1.,  0.,  1.]), array([ 0., -1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  1., -1.]), array([0., 1., 0.]), array([ 1.,  0., -1.]), array([1., 0., 0.])], [{15: (1-0j), 16: -1j}, {15: (1-0j), 16: -1j}, {15: (1-0j), 16: -1j}, {15: (1-0j), 16: -1j}, {15: (-1+0j), 16: 1j}, {15: (-1+0j), 16: (-0+1j)}, {15: (-1+0j), 16: 1j}, {15: (-1+0j), 16: 1j}]),
        ([array([-1.,  0.,  1.]), array([ 0., -1.,  0.]), array([0., 1., 0.]), array([ 1.,  0., -1.])], [{19: (1-0j)}, {19: (-1+0j)}, {19: (-1+0j)}, {19: (1+0j)}]),
        ([array([-1.,  0.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  1., -1.]), array([1., 0., 0.])], [{19: (-1+0j)}, {19: (1-0j)}, {19: (1-0j)}, {19: (-1+0j)}]),
        ([array([-1.,  0.,  0.]), array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([ 0.,  1., -1.]), array([0., 1., 0.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.]), array([1., 0., 0.])], [{18: (1-0j)}, {18: (1-0j)}, {17: (1-0j)}, {18: (1-0j)}, {18: (1-0j)}, {17: (1-0j)}, {17: 1}, {18: (1-0j)}, {18: 1}, {17: (1-0j)}, {18: (1-0j)}, {18: (1-0j)}]),
        ([], []), ([], []), ([], []), ([], [])],
       [([], []), ([], []), ([], []), ([], []),
        ([array([-1.,  0.,  0.]), array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([ 0.,  1., -1.]), array([0., 1., 0.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.]), array([1., 0., 0.])], [{20: (1-0j)}, {20: (1-0j)}, {20: (1-0j)}, {20: (1-0j)}, {20: (1-0j)}, {20: (1-0j)}, {20: (1-0j)}, {20: (1-0j)}, {20: 1}, {20: (1-0j)}, {20: (1-0j)}, {20: (1-0j)}]),
        ([array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  0.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([0., 1., 0.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.])], [{21: (1+0j), 22: 1j}, {21: (1+0j), 22: (-0+1j)}, {21: (-1+0j), 22: -1j}, {21: (-1+0j), 22: -1j}, {21: (1+0j), 22: (-0+1j)}, {21: (1+0j), 22: 1j}, {21: (-1+0j), 22: -1j}, {21: (-1+0j), 22: -1j}]),
        ([array([-1.,  0.,  0.]), array([-1.,  1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([ 0.,  1., -1.]), array([ 1., -1.,  0.]), array([1., 0., 0.])], [{21: (-1-0j), 22: -1j}, {21: (-1+0j), 22: -1j}, {21: (1+0j), 22: (-0+1j)}, {21: (-1+0j), 22: -1j}, {21: (1-0j), 22: 1j}, {21: (-1+0j), 22: -1j}, {21: (1-0j), 22: 1j}, {21: (1+0j), 22: (-0+1j)}]),
        ([array([-1.,  0.,  0.]), array([-1.,  0.,  1.]), array([ 0., -1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  1., -1.]), array([0., 1., 0.]), array([ 1.,  0., -1.]), array([1., 0., 0.])], [{21: (-1+0j), 22: -1j}, {21: (-1+0j), 22: -1j}, {21: (-1+0j), 22: -1j}, {21: (-1+0j), 22: -1j}, {21: (1-0j), 22: 1j}, {21: (1-0j), 22: 1j}, {21: 1, 22: 1j}, {21: (1-0j), 22: 1j}])],
       [([], []), ([], []), ([], []), ([], []),
        ([array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  0.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([0., 1., 0.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.])], [{21: (-1+0j), 22: 1j}, {21: (-1+0j), 22: (-0+1j)}, {21: (1+0j), 22: -1j}, {21: (1+0j), 22: -1j}, {21: (-1+0j), 22: (-0+1j)}, {21: (-1+0j), 22: 1j}, {21: (1+0j), 22: -1j}, {21: (1+0j), 22: -1j}]),
        ([array([-1.,  0.,  0.]), array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([ 0.,  1., -1.]), array([0., 1., 0.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.]), array([1., 0., 0.])], [{23: (1-0j)}, {24: (1-0j)}, {24: (1-0j)}, {24: (1-0j)}, {23: (1-0j)}, {24: (1-0j)}, {24: (1-0j)}, {23: (1-0j)}, {24: (1-0j)}, {24: (1-0j)}, {24: (1-0j)}, {23: (1-0j)}]),
        ([array([-1.,  1.,  0.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([ 1., -1.,  0.])], [{25: (1+0j)}, {25: (-1+0j)}, {25: (-1+0j)}, {25: (1-0j)}]),
        ([array([-1.,  0.,  1.]), array([ 0., -1.,  0.]), array([0., 1., 0.]), array([ 1.,  0., -1.])], [{25: (1+0j)}, {25: (-1+0j)}, {25: (-1+0j)}, {25: 1}])],
       [([], []), ([], []), ([], []), ([], []),
        ([array([-1.,  0.,  0.]), array([-1.,  1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([ 0.,  1., -1.]), array([ 1., -1.,  0.]), array([1., 0., 0.])], [{21: (1+0j), 22: -1j}, {21: (1-0j), 22: -1j}, {21: (-1+0j), 22: (-0+1j)}, {21: (1-0j), 22: -1j}, {21: (-1+0j), 22: 1j}, {21: (1+0j), 22: -1j}, {21: (-1+0j), 22: 1j}, {21: (-1-0j), 22: (-0+1j)}]),
        ([array([-1.,  1.,  0.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([ 1., -1.,  0.])], [{25: (1-0j)}, {25: (-1+0j)}, {25: (-1+0j)}, {25: (1+0j)}]),
        ([array([-1.,  0.,  0.]), array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([ 0.,  1., -1.]), array([0., 1., 0.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.]), array([1., 0., 0.])], [{24: (1-0j)}, {23: (1-0j)}, {24: (1-0j)}, {23: (1-0j)}, {24: (1-0j)}, {24: (1-0j)}, {24: (1-0j)}, {24: (1-0j)}, {23: (1-0j)}, {24: (1-0j)}, {23: (1-0j)}, {24: (1-0j)}]),
        ([array([-1.,  0.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  1., -1.]), array([1., 0., 0.])], [{25: (-1+0j)}, {25: (1-0j)}, {25: (1-0j)}, {25: (-1+0j)}])],
       [([], []), ([], []), ([], []), ([], []),
        ([array([-1.,  0.,  0.]), array([-1.,  0.,  1.]), array([ 0., -1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  1., -1.]), array([0., 1., 0.]), array([ 1.,  0., -1.]), array([1., 0., 0.])], [{21: (1-0j), 22: -1j}, {21: (1-0j), 22: -1j}, {21: (1-0j), 22: -1j}, {21: (1-0j), 22: -1j}, {21: (-1+0j), 22: 1j}, {21: (-1+0j), 22: (-0+1j)}, {21: (-1+0j), 22: 1j}, {21: (-1+0j), 22: 1j}]),
        ([array([-1.,  0.,  1.]), array([ 0., -1.,  0.]), array([0., 1., 0.]), array([ 1.,  0., -1.])], [{25: (1-0j)}, {25: (-1+0j)}, {25: (-1+0j)}, {25: (1+0j)}]),
        ([array([-1.,  0.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  1., -1.]), array([1., 0., 0.])], [{25: (-1+0j)}, {25: (1-0j)}, {25: (1-0j)}, {25: (-1+0j)}]),
        ([array([-1.,  0.,  0.]), array([-1.,  0.,  1.]), array([-1.,  1.,  0.]), array([ 0., -1.,  0.]), array([ 0., -1.,  1.]), array([ 0.,  0., -1.]), array([0., 0., 1.]), array([ 0.,  1., -1.]), array([0., 1., 0.]), array([ 1., -1.,  0.]), array([ 1.,  0., -1.]), array([1., 0., 0.])], [{24: (1-0j)}, {24: (1-0j)}, {23: (1-0j)}, {24: (1-0j)}, {24: (1-0j)}, {23: (1-0j)}, {23: 1}, {24: (1-0j)}, {24: 1}, {23: (1-0j)}, {24: (1-0j)}, {24: (1-0j)}])]],
      dtype=object), 3: array([[([], []), ([], []), ([], []), ([], []),
        ([array([0.5, 0.5, 0.5]), array([-0.5, -0.5, -0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5])], [{26: (1-0j), 27: 1j}, {26: (1-0j), 27: 1j}, {26: (1-0j), 27: 1j}, {26: 1, 27: 1j}, {26: (1-0j), 27: 1j}, {26: (1-0j), 27: 1j}, {26: (1-0j), 27: 1j}, {26: (1-0j), 27: 1j}]),
        ([array([0.5, 0.5, 0.5]), array([-0.5, -0.5, -0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5])], [{28: (1+0j), 29: 1j}, {28: (-1+0j), 29: -1j}, {28: (1-0j), 29: 1j}, {28: (1-0j), 29: 1j}, {28: (-1+0j), 29: -1j}, {28: (1+0j), 29: 1j}, {28: (-1+0j), 29: -1j}, {28: (-1+0j), 29: -1j}]),
        ([array([0.5, 0.5, 0.5]), array([-0.5, -0.5, -0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5])], [{28: (1+0j), 29: 1j}, {28: (-1-0j), 29: -1j}, {28: (1+0j), 29: (-0+1j)}, {28: (-1+0j), 29: -1j}, {28: (1+0j), 29: (-0+1j)}, {28: (-1+0j), 29: -1j}, {28: (1+0j), 29: 1j}, {28: (-1+0j), 29: -1j}]),
        ([array([0.5, 0.5, 0.5]), array([-0.5, -0.5, -0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5])], [{28: (1+0j), 29: 1j}, {28: (-1+0j), 29: -1j}, {28: (-1+0j), 29: -1j}, {28: 1, 29: 1j}, {28: (1-0j), 29: 1j}, {28: (-1+0j), 29: -1j}, {28: (-1+0j), 29: -1j}, {28: (1-0j), 29: 1j}])],
       [([], []), ([], []), ([], []), ([], []),
        ([array([0.5, 0.5, 0.5]), array([-0.5, -0.5, -0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5])], [{30: (1+0j), 31: 1j}, {30: (-1+0j), 31: -1j}, {30: (1-0j), 31: 1j}, {30: (1-0j), 31: 1j}, {30: (-1+0j), 31: -1j}, {30: (1+0j), 31: 1j}, {30: (-1+0j), 31: -1j}, {30: (-1+0j), 31: -1j}]),
        ([array([0.5, 0.5, 0.5]), array([-0.5, -0.5, -0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5])], [{32: (1-0j), 33: 1j}, {32: (1-0j), 33: 1j}, {32: (1-0j), 33: 1j}, {32: (1-0j), 33: 1j}, {32: (1-0j), 33: 1j}, {32: (1-0j), 33: 1j}, {32: (1-0j), 33: 1j}, {32: (1-0j), 33: 1j}]),
        ([array([0.5, 0.5, 0.5]), array([-0.5, -0.5, -0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5])], [{34: (1+0j), 35: (-0+1j)}, {34: (1+0j), 35: (-0+1j)}, {34: (1+0j), 35: (-0+1j)}, {34: (-1+0j), 35: -1j}, {34: (-1+0j), 35: -1j}, {34: (-1-0j), 35: -1j}, {34: (-1-0j), 35: -1j}, {34: (1+0j), 35: (-0+1j)}]),
        ([array([0.5, 0.5, 0.5]), array([-0.5, -0.5, -0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5])], [{34: (1+0j), 35: (-0+1j)}, {34: (1+0j), 35: (-0+1j)}, {34: (-1-0j), 35: -1j}, {34: (1+0j), 35: (-0+1j)}, {34: (-1-0j), 35: -1j}, {34: (-1+0j), 35: -1j}, {34: (1+0j), 35: (-0+1j)}, {34: (-1+0j), 35: -1j}])],
       [([], []), ([], []), ([], []), ([], []),
        ([array([0.5, 0.5, 0.5]), array([-0.5, -0.5, -0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5])], [{30: (1+0j), 31: 1j}, {30: (-1-0j), 31: -1j}, {30: (1+0j), 31: (-0+1j)}, {30: (-1+0j), 31: -1j}, {30: (1+0j), 31: (-0+1j)}, {30: (-1+0j), 31: -1j}, {30: (1+0j), 31: 1j}, {30: (-1+0j), 31: -1j}]),
        ([array([0.5, 0.5, 0.5]), array([-0.5, -0.5, -0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5])], [{34: (1+0j), 35: (-0+1j)}, {34: (1+0j), 35: (-0+1j)}, {34: (1+0j), 35: (-0+1j)}, {34: (-1+0j), 35: -1j}, {34: (-1+0j), 35: -1j}, {34: (-1-0j), 35: -1j}, {34: (-1-0j), 35: -1j}, {34: (1+0j), 35: (-0+1j)}]),
        ([array([0.5, 0.5, 0.5]), array([-0.5, -0.5, -0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5])], [{32: (1-0j), 33: 1j}, {32: (1-0j), 33: 1j}, {32: (1-0j), 33: 1j}, {32: (1-0j), 33: 1j}, {32: (1-0j), 33: 1j}, {32: (1-0j), 33: 1j}, {32: (1-0j), 33: 1j}, {32: (1-0j), 33: 1j}]),
        ([array([0.5, 0.5, 0.5]), array([-0.5, -0.5, -0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5])], [{34: (1+0j), 35: (-0+1j)}, {34: (1+0j), 35: (-0+1j)}, {34: (-1+0j), 35: -1j}, {34: (-1+0j), 35: -1j}, {34: (1+0j), 35: (-0+1j)}, {34: (1+0j), 35: (-0+1j)}, {34: (-1+0j), 35: -1j}, {34: (-1+0j), 35: -1j}])],
       [([], []), ([], []), ([], []), ([], []),
        ([array([0.5, 0.5, 0.5]), array([-0.5, -0.5, -0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5])], [{30: (1+0j), 31: 1j}, {30: (-1+0j), 31: -1j}, {30: (-1+0j), 31: -1j}, {30: 1, 31: 1j}, {30: (1-0j), 31: 1j}, {30: (-1+0j), 31: -1j}, {30: (-1+0j), 31: -1j}, {30: (1-0j), 31: 1j}]),
        ([array([0.5, 0.5, 0.5]), array([-0.5, -0.5, -0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5])], [{34: (1+0j), 35: (-0+1j)}, {34: (1+0j), 35: (-0+1j)}, {34: (-1+0j), 35: -1j}, {34: 1, 35: 1j}, {34: (-1+0j), 35: -1j}, {34: (-1+0j), 35: -1j}, {34: (1+0j), 35: (-0+1j)}, {34: (-1+0j), 35: -1j}]),
        ([array([0.5, 0.5, 0.5]), array([-0.5, -0.5, -0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5])], [{34: (1+0j), 35: (-0+1j)}, {34: (1+0j), 35: (-0+1j)}, {34: (-1+0j), 35: -1j}, {34: (-1+0j), 35: -1j}, {34: (1+0j), 35: (-0+1j)}, {34: (1+0j), 35: (-0+1j)}, {34: (-1+0j), 35: -1j}, {34: (-1+0j), 35: -1j}]),
        ([array([0.5, 0.5, 0.5]), array([-0.5, -0.5, -0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5])], [{32: (1-0j), 33: 1j}, {32: (1-0j), 33: 1j}, {32: (1-0j), 33: 1j}, {32: 1, 33: 1j}, {32: (1-0j), 33: 1j}, {32: (1-0j), 33: 1j}, {32: (1-0j), 33: 1j}, {32: (1-0j), 33: 1j}])],
       [([array([-0.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5]), array([0.5, 0.5, 0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5])], [{26: (1-0j), 27: -1j}, {26: (1-0j), 27: -1j}, {26: (1-0j), 27: -1j}, {26: (1-0j), 27: -1j}, {26: (1-0j), 27: -1j}, {26: (1-0j), 27: -1j}, {26: (1-0j), 27: -1j}, {26: (1-0j), 27: -1j}]),
        ([array([-0.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5]), array([0.5, 0.5, 0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5])], [{30: (1+0j), 31: -1j}, {30: (-1+0j), 31: 1j}, {30: (1-0j), 31: -1j}, {30: (1-0j), 31: -1j}, {30: (-1+0j), 31: 1j}, {30: (-1+0j), 31: 1j}, {30: (-1+0j), 31: 1j}, {30: (1+0j), 31: -1j}]),
        ([array([-0.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5]), array([0.5, 0.5, 0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5])], [{30: (1+0j), 31: -1j}, {30: (1+0j), 31: -1j}, {30: (-1+0j), 31: (-0+1j)}, {30: (1+0j), 31: -1j}, {30: (-1-0j), 31: (-0+1j)}, {30: (-1+0j), 31: 1j}, {30: (1+0j), 31: -1j}, {30: (-1+0j), 31: 1j}]),
        ([array([-0.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5]), array([0.5, 0.5, 0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5])], [{30: (1+0j), 31: -1j}, {30: (1-0j), 31: -1j}, {30: (1-0j), 31: -1j}, {30: (-1+0j), 31: (-0+1j)}, {30: (-1+0j), 31: 1j}, {30: (1-0j), 31: -1j}, {30: (-1+0j), 31: 1j}, {30: (-1+0j), 31: 1j}]),
        ([], []), ([], []), ([], []), ([], [])],
       [([array([-0.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5]), array([0.5, 0.5, 0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5])], [{28: (1+0j), 29: -1j}, {28: (-1+0j), 29: 1j}, {28: (1-0j), 29: -1j}, {28: (1-0j), 29: -1j}, {28: (-1+0j), 29: 1j}, {28: (-1+0j), 29: 1j}, {28: (-1+0j), 29: 1j}, {28: (1+0j), 29: -1j}]),
        ([array([-0.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5]), array([0.5, 0.5, 0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5])], [{32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}]),
        ([array([-0.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5]), array([0.5, 0.5, 0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5])], [{34: (1+0j), 35: -1j}, {34: (-1+0j), 35: (-0+1j)}, {34: (-1+0j), 35: (-0+1j)}, {34: (1+0j), 35: -1j}, {34: (1+0j), 35: -1j}, {34: (1+0j), 35: -1j}, {34: (-1-0j), 35: (-0+1j)}, {34: (-1-0j), 35: (-0+1j)}]),
        ([array([-0.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5]), array([0.5, 0.5, 0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5])], [{34: (1+0j), 35: -1j}, {34: (-1+0j), 35: (-0+1j)}, {34: (1-0j), 35: -1j}, {34: (-1+0j), 35: (-0+1j)}, {34: (1+0j), 35: -1j}, {34: (-1+0j), 35: (-0+1j)}, {34: (1+0j), 35: -1j}, {34: (-1+0j), 35: (-0+1j)}]),
        ([], []), ([], []), ([], []), ([], [])],
       [([array([-0.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5]), array([0.5, 0.5, 0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5])], [{28: (1+0j), 29: -1j}, {28: (1+0j), 29: -1j}, {28: (-1+0j), 29: (-0+1j)}, {28: (1+0j), 29: -1j}, {28: (-1-0j), 29: (-0+1j)}, {28: (-1+0j), 29: 1j}, {28: (1+0j), 29: -1j}, {28: (-1+0j), 29: 1j}]),
        ([array([-0.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5]), array([0.5, 0.5, 0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5])], [{34: (1+0j), 35: -1j}, {34: (-1+0j), 35: (-0+1j)}, {34: (-1+0j), 35: (-0+1j)}, {34: (1+0j), 35: -1j}, {34: (1+0j), 35: -1j}, {34: (1+0j), 35: -1j}, {34: (-1-0j), 35: (-0+1j)}, {34: (-1-0j), 35: (-0+1j)}]),
        ([array([-0.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5]), array([0.5, 0.5, 0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5])], [{32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}]),
        ([array([-0.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5]), array([0.5, 0.5, 0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5])], [{34: (1+0j), 35: -1j}, {34: (1+0j), 35: -1j}, {34: (-1+0j), 35: (-0+1j)}, {34: (-1+0j), 35: (-0+1j)}, {34: (1+0j), 35: -1j}, {34: (-1+0j), 35: (-0+1j)}, {34: (-1+0j), 35: (-0+1j)}, {34: (1+0j), 35: -1j}]),
        ([], []), ([], []), ([], []), ([], [])],
       [([array([-0.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5]), array([0.5, 0.5, 0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5])], [{28: (1+0j), 29: -1j}, {28: (1-0j), 29: -1j}, {28: (1-0j), 29: -1j}, {28: (-1+0j), 29: (-0+1j)}, {28: (-1+0j), 29: 1j}, {28: (1-0j), 29: -1j}, {28: (-1+0j), 29: 1j}, {28: (-1+0j), 29: 1j}]),
        ([array([-0.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5]), array([0.5, 0.5, 0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5])], [{34: (1+0j), 35: -1j}, {34: (-1-0j), 35: (-0+1j)}, {34: (1+0j), 35: -1j}, {34: (-1-0j), 35: (-0+1j)}, {34: (1+0j), 35: -1j}, {34: (-1+0j), 35: (-0+1j)}, {34: (1+0j), 35: -1j}, {34: (-1+0j), 35: (-0+1j)}]),
        ([array([-0.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5]), array([0.5, 0.5, 0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5])], [{34: (1+0j), 35: -1j}, {34: (1+0j), 35: -1j}, {34: (-1+0j), 35: (-0+1j)}, {34: (-1+0j), 35: (-0+1j)}, {34: (1+0j), 35: -1j}, {34: (-1+0j), 35: (-0+1j)}, {34: (-1+0j), 35: (-0+1j)}, {34: (1+0j), 35: -1j}]),
        ([array([-0.5, -0.5, -0.5]), array([-1.5,  0.5,  0.5]), array([ 0.5, -1.5,  0.5]), array([ 0.5,  0.5, -1.5]), array([0.5, 0.5, 0.5]), array([-0.5, -0.5,  1.5]), array([-0.5,  1.5, -0.5]), array([ 1.5, -0.5, -0.5])], [{32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}, {32: (1-0j), 33: -1j}]),
        ([], []), ([], []), ([], []), ([], [])]], dtype=object), 4: array([[([array([-1., -1.,  1.]), array([-1.,  1., -1.]), array([-1.,  1.,  1.]), array([ 1., -1., -1.]), array([ 1., -1.,  1.]), array([ 1.,  1., -1.])], [{36: (1-0j)}, {36: (1-0j)}, {36: (1-0j)}, {36: 1}, {36: (1-0j)}, {36: (1-0j)}]),
        ([array([-1.,  1.,  1.]), array([ 1., -1., -1.])], [{37: (1+0j), 38: (-0+1j)}, {37: (-1+0j), 38: -1j}]),
        ([array([-1.,  1., -1.]), array([ 1., -1.,  1.])], [{37: (-1+0j), 38: -1j}, {37: (1-0j), 38: 1j}]),
        ([array([-1., -1.,  1.]), array([ 1.,  1., -1.])], [{37: (-1+0j), 38: -1j}, {37: 1, 38: 1j}]),
        ([], []), ([], []), ([], []), ([], [])],
       [([array([-1.,  1.,  1.]), array([ 1., -1., -1.])], [{37: (-1+0j), 38: (-0+1j)}, {37: (1+0j), 38: -1j}]),
        ([array([-1., -1.,  1.]), array([-1.,  1., -1.]), array([-1.,  1.,  1.]), array([ 1., -1., -1.]), array([ 1., -1.,  1.]), array([ 1.,  1., -1.])], [{39: (1-0j)}, {39: (1-0j)}, {40: (1-0j)}, {40: (1-0j)}, {39: (1-0j)}, {39: (1-0j)}]),
        ([], []), ([], []), ([], []), ([], []), ([], []), ([], [])],
       [([array([-1.,  1., -1.]), array([ 1., -1.,  1.])], [{37: (1-0j), 38: -1j}, {37: (-1+0j), 38: 1j}]),
        ([], []),
        ([array([-1., -1.,  1.]), array([-1.,  1., -1.]), array([-1.,  1.,  1.]), array([ 1., -1., -1.]), array([ 1., -1.,  1.]), array([ 1.,  1., -1.])], [{39: (1-0j)}, {40: (1-0j)}, {39: (1-0j)}, {39: (1-0j)}, {40: (1-0j)}, {39: (1-0j)}]),
        ([], []), ([], []), ([], []), ([], []), ([], [])],
       [([array([-1., -1.,  1.]), array([ 1.,  1., -1.])], [{37: (1-0j), 38: -1j}, {37: (-1+0j), 38: (-0+1j)}]),
        ([], []), ([], []),
        ([array([-1., -1.,  1.]), array([-1.,  1., -1.]), array([-1.,  1.,  1.]), array([ 1., -1., -1.]), array([ 1., -1.,  1.]), array([ 1.,  1., -1.])], [{40: (1-0j)}, {39: (1-0j)}, {39: (1-0j)}, {39: 1}, {39: (1-0j)}, {40: 1}]),
        ([], []), ([], []), ([], []), ([], [])],
       [([], []), ([], []), ([], []), ([], []),
        ([array([-1., -1.,  1.]), array([-1.,  1., -1.]), array([-1.,  1.,  1.]), array([ 1., -1., -1.]), array([ 1., -1.,  1.]), array([ 1.,  1., -1.])], [{41: (1-0j)}, {41: (1-0j)}, {41: (1-0j)}, {41: 1}, {41: (1-0j)}, {41: (1-0j)}]),
        ([array([-1.,  1.,  1.]), array([ 1., -1., -1.])], [{42: (1+0j), 43: (-0+1j)}, {42: (-1+0j), 43: -1j}]),
        ([array([-1.,  1., -1.]), array([ 1., -1.,  1.])], [{42: (-1+0j), 43: -1j}, {42: (1-0j), 43: 1j}]),
        ([array([-1., -1.,  1.]), array([ 1.,  1., -1.])], [{42: (-1+0j), 43: -1j}, {42: 1, 43: 1j}])],
       [([], []), ([], []), ([], []), ([], []),
        ([array([-1.,  1.,  1.]), array([ 1., -1., -1.])], [{42: (-1+0j), 43: (-0+1j)}, {42: (1+0j), 43: -1j}]),
        ([array([-1., -1.,  1.]), array([-1.,  1., -1.]), array([-1.,  1.,  1.]), array([ 1., -1., -1.]), array([ 1., -1.,  1.]), array([ 1.,  1., -1.])], [{44: (1-0j)}, {44: (1-0j)}, {45: (1-0j)}, {45: (1-0j)}, {44: (1-0j)}, {44: (1-0j)}]),
        ([], []), ([], [])],
       [([], []), ([], []), ([], []), ([], []),
        ([array([-1.,  1., -1.]), array([ 1., -1.,  1.])], [{42: (1-0j), 43: -1j}, {42: (-1+0j), 43: 1j}]),
        ([], []),
        ([array([-1., -1.,  1.]), array([-1.,  1., -1.]), array([-1.,  1.,  1.]), array([ 1., -1., -1.]), array([ 1., -1.,  1.]), array([ 1.,  1., -1.])], [{44: (1-0j)}, {45: (1-0j)}, {44: (1-0j)}, {44: (1-0j)}, {45: (1-0j)}, {44: (1-0j)}]),
        ([], [])],
       [([], []), ([], []), ([], []), ([], []),
        ([array([-1., -1.,  1.]), array([ 1.,  1., -1.])], [{42: (1-0j), 43: -1j}, {42: (-1+0j), 43: (-0+1j)}]),
        ([], []), ([], []),
        ([array([-1., -1.,  1.]), array([-1.,  1., -1.]), array([-1.,  1.,  1.]), array([ 1., -1., -1.]), array([ 1., -1.,  1.]), array([ 1.,  1., -1.])], [{45: (1-0j)}, {44: (1-0j)}, {44: (1-0j)}, {44: 1}, {44: (1-0j)}, {45: 1}])]],
      dtype=object), 5: array([[([], []), ([], []), ([], []), ([], []),
        ([array([-0.5,  0.5,  1.5]), array([-0.5,  1.5,  0.5]), array([ 0.5, -0.5,  1.5]), array([ 0.5,  1.5, -0.5]), array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -0.5]), array([-1.5, -0.5,  0.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5, -0.5]), array([-1.5,  0.5,  1.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5, -1.5,  0.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  0.5, -1.5]), array([-0.5,  1.5, -1.5]), array([ 0.5, -1.5, -0.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5, -0.5, -1.5]), array([ 0.5,  1.5, -1.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5,  0.5, -1.5])], [{46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}, {46: 1, 47: 1j}, {46: (1-0j), 47: 1j}, {46: (1-0j), 47: 1j}]),
        ([array([-0.5,  0.5,  1.5]), array([-0.5,  1.5,  0.5]), array([ 0.5, -0.5,  1.5]), array([ 0.5,  1.5, -0.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5,  1.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5, -1.5,  0.5]), array([-0.5,  0.5, -1.5]), array([ 0.5, -1.5, -0.5]), array([ 0.5, -0.5, -1.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5,  0.5, -1.5])], [{48: (1+0j), 49: 1j}, {48: (1+0j), 49: (-0+1j)}, {50: (-1+0j), 51: -1j}, {50: (-1+0j), 51: -1j}, {50: (-1+0j), 51: -1j}, {48: (1+0j), 49: (-0+1j)}, {50: (-1+0j), 51: -1j}, {48: (1+0j), 49: 1j}, {50: (1-0j), 51: 1j}, {50: (1-0j), 51: (-0+1j)}, {48: (-1+0j), 49: -1j}, {48: (-1+0j), 49: -1j}, {48: (-1+0j), 49: -1j}, {50: (1-0j), 51: (-0+1j)}, {48: (-1+0j), 49: -1j}, {50: (1-0j), 51: 1j}]),
        ([array([-0.5,  0.5,  1.5]), array([ 0.5, -0.5,  1.5]), array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -0.5]), array([-1.5, -0.5,  0.5]), array([-1.5,  0.5, -0.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  0.5, -1.5]), array([-0.5,  1.5, -1.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5, -0.5, -1.5]), array([ 0.5,  1.5, -1.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5])], [{50: (-1-0j), 51: -1j}, {48: (1+0j), 49: 1j}, {48: (1+0j), 49: 1j}, {50: (-1+0j), 51: -1j}, {50: (1-0j), 51: (-0+1j)}, {48: (-1+0j), 49: -1j}, {48: (-1+0j), 49: -1j}, {50: (1+0j), 51: (-0+1j)}, {50: (-1+0j), 51: -1j}, {48: (-1+0j), 49: -1j}, {48: (-1+0j), 49: -1j}, {48: (1-0j), 49: 1j}, {50: (1+0j), 51: (-0+1j)}, {50: (1-0j), 51: (-0+1j)}, {50: (-1+0j), 51: -1j}, {48: (1-0j), 49: 1j}]),
        ([array([-0.5,  1.5,  0.5]), array([ 0.5,  1.5, -0.5]), array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -0.5]), array([-1.5, -0.5,  0.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5, -0.5]), array([-1.5,  0.5,  1.5]), array([-0.5, -1.5,  0.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  1.5, -1.5]), array([ 0.5, -1.5, -0.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5,  1.5, -1.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5,  0.5, -1.5])], [{50: (-1+0j), 51: -1j}, {48: (1+0j), 49: 1j}, {50: (-1+0j), 51: -1j}, {48: (1+0j), 49: (-0+1j)}, {48: (-1+0j), 49: -1j}, {48: (-1+0j), 49: -1j}, {50: (1-0j), 51: 1j}, {50: (1-0j), 51: (-0+1j)}, {48: (-1+0j), 49: -1j}, {48: (-1+0j), 49: -1j}, {50: (-1+0j), 51: -1j}, {50: (1-0j), 51: (-0+1j)}, {50: 1, 51: 1j}, {48: 1, 49: 1j}, {50: (-1+0j), 51: -1j}, {48: (1-0j), 49: 1j}])],
       [([], []), ([], []), ([], []), ([], []),
        ([array([-0.5,  0.5,  1.5]), array([-0.5,  1.5,  0.5]), array([ 0.5, -0.5,  1.5]), array([ 0.5,  1.5, -0.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5,  1.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5, -1.5,  0.5]), array([-0.5,  0.5, -1.5]), array([ 0.5, -1.5, -0.5]), array([ 0.5, -0.5, -1.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5,  0.5, -1.5])], [{52: (1+0j), 53: 1j}, {52: (1+0j), 53: (-0+1j)}, {54: (-1-0j), 55: -1j}, {54: (-1+0j), 55: -1j}, {54: (-1+0j), 55: -1j}, {52: (1+0j), 53: (-0+1j)}, {54: (-1-0j), 55: -1j}, {52: (1+0j), 53: 1j}, {54: (1-0j), 55: 1j}, {54: (1+0j), 55: (-0+1j)}, {52: (-1+0j), 53: -1j}, {52: (-1+0j), 53: -1j}, {52: (-1+0j), 53: -1j}, {54: (1+0j), 55: (-0+1j)}, {52: (-1+0j), 53: -1j}, {54: (1-0j), 55: 1j}]),
        ([array([-0.5,  0.5,  1.5]), array([-0.5,  1.5,  0.5]), array([ 0.5, -0.5,  1.5]), array([ 0.5,  1.5, -0.5]), array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -0.5]), array([-1.5, -0.5,  0.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5, -0.5]), array([-1.5,  0.5,  1.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5, -1.5,  0.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  0.5, -1.5]), array([-0.5,  1.5, -1.5]), array([ 0.5, -1.5, -0.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5, -0.5, -1.5]), array([ 0.5,  1.5, -1.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5,  0.5, -1.5])], [{56: (1-0j), 57: 1j}, {56: (1-0j), 57: 1j}, {58: (1-0j), 59: 1j}, {58: (1-0j), 59: 1j}, {60: (1-0j), 61: 1j}, {60: (1-0j), 61: 1j}, {60: (1-0j), 61: 1j}, {58: (1-0j), 59: 1j}, {60: (1-0j), 61: 1j}, {56: (1-0j), 57: 1j}, {58: (1-0j), 59: 1j}, {56: (1-0j), 57: 1j}, {58: (1-0j), 59: 1j}, {60: (1-0j), 61: 1j}, {58: (1-0j), 59: 1j}, {60: (1-0j), 61: 1j}, {56: (1-0j), 57: 1j}, {60: (1-0j), 61: 1j}, {56: (1-0j), 57: 1j}, {60: (1-0j), 61: 1j}, {56: (1-0j), 57: 1j}, {58: (1-0j), 59: 1j}, {56: (1-0j), 57: 1j}, {58: (1-0j), 59: 1j}]),
        ([array([-0.5,  0.5,  1.5]), array([ 0.5, -0.5,  1.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5,  0.5, -1.5]), array([ 0.5, -0.5, -1.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5])], [{62: (-1+0j), 63: -1j}, {64: (-1+0j), 65: -1j}, {64: (1-0j), 65: 1j}, {62: (1-0j), 63: 1j}, {64: (-1+0j), 65: -1j}, {62: (-1+0j), 63: -1j}, {62: (1-0j), 63: 1j}, {64: (1-0j), 65: 1j}]),
        ([array([-0.5,  1.5,  0.5]), array([ 0.5,  1.5, -0.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5,  1.5]), array([-0.5, -1.5,  0.5]), array([ 0.5, -1.5, -0.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5,  0.5, -1.5])], [{62: (-1+0j), 63: -1j}, {64: (-1+0j), 65: -1j}, {64: (1-0j), 65: 1j}, {62: (1-0j), 63: 1j}, {64: (-1+0j), 65: -1j}, {62: (-1+0j), 63: -1j}, {62: (1-0j), 63: 1j}, {64: (1-0j), 65: 1j}])],
       [([], []), ([], []), ([], []), ([], []),
        ([array([-0.5,  0.5,  1.5]), array([ 0.5, -0.5,  1.5]), array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -0.5]), array([-1.5, -0.5,  0.5]), array([-1.5,  0.5, -0.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  0.5, -1.5]), array([-0.5,  1.5, -1.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5, -0.5, -1.5]), array([ 0.5,  1.5, -1.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5])], [{54: (-1-0j), 55: -1j}, {52: (1+0j), 53: 1j}, {52: (1+0j), 53: 1j}, {54: (-1-0j), 55: -1j}, {54: (1+0j), 55: (-0+1j)}, {52: (-1+0j), 53: -1j}, {52: (-1+0j), 53: -1j}, {54: (1+0j), 55: (-0+1j)}, {54: (-1-0j), 55: -1j}, {52: (-1+0j), 53: -1j}, {52: (-1+0j), 53: -1j}, {52: (1-0j), 53: 1j}, {54: (1+0j), 55: (-0+1j)}, {54: (1+0j), 55: (-0+1j)}, {54: (-1+0j), 55: -1j}, {52: (1-0j), 53: 1j}]),
        ([array([-0.5,  0.5,  1.5]), array([ 0.5, -0.5,  1.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5,  0.5, -1.5]), array([ 0.5, -0.5, -1.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5])], [{64: (-1+0j), 65: -1j}, {62: (-1+0j), 63: -1j}, {62: (1-0j), 63: 1j}, {64: (1-0j), 65: 1j}, {62: (-1+0j), 63: -1j}, {64: (-1+0j), 65: -1j}, {64: (1-0j), 65: 1j}, {62: (1-0j), 63: 1j}]),
        ([array([-0.5,  0.5,  1.5]), array([-0.5,  1.5,  0.5]), array([ 0.5, -0.5,  1.5]), array([ 0.5,  1.5, -0.5]), array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -0.5]), array([-1.5, -0.5,  0.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5, -0.5]), array([-1.5,  0.5,  1.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5, -1.5,  0.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  0.5, -1.5]), array([-0.5,  1.5, -1.5]), array([ 0.5, -1.5, -0.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5, -0.5, -1.5]), array([ 0.5,  1.5, -1.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5,  0.5, -1.5])], [{58: (1-0j), 59: 1j}, {60: (1-0j), 61: 1j}, {56: (1-0j), 57: 1j}, {60: (1-0j), 61: 1j}, {56: (1-0j), 57: 1j}, {58: (1-0j), 59: 1j}, {58: (1-0j), 59: 1j}, {60: (1-0j), 61: 1j}, {56: (1-0j), 57: 1j}, {60: (1-0j), 61: 1j}, {56: (1-0j), 57: 1j}, {58: (1-0j), 59: 1j}, {60: (1-0j), 61: 1j}, {58: (1-0j), 59: 1j}, {56: (1-0j), 57: 1j}, {56: (1-0j), 57: 1j}, {60: (1-0j), 61: 1j}, {56: (1-0j), 57: 1j}, {58: (1-0j), 59: 1j}, {58: (1-0j), 59: 1j}, {58: (1-0j), 59: 1j}, {56: (1-0j), 57: 1j}, {60: (1-0j), 61: 1j}, {60: (1-0j), 61: 1j}]),
        ([array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -0.5]), array([-1.5, -0.5,  0.5]), array([-1.5,  0.5, -0.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  1.5, -1.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5,  1.5, -1.5])], [{62: (-1+0j), 63: -1j}, {64: (-1+0j), 65: -1j}, {64: (-1+0j), 65: -1j}, {62: (-1+0j), 63: -1j}, {64: (1-0j), 65: 1j}, {62: (1-0j), 63: 1j}, {62: (1-0j), 63: 1j}, {64: (1-0j), 65: 1j}])],
       [([], []), ([], []), ([], []), ([], []),
        ([array([-0.5,  1.5,  0.5]), array([ 0.5,  1.5, -0.5]), array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -0.5]), array([-1.5, -0.5,  0.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5, -0.5]), array([-1.5,  0.5,  1.5]), array([-0.5, -1.5,  0.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  1.5, -1.5]), array([ 0.5, -1.5, -0.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5,  1.5, -1.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5,  0.5, -1.5])], [{54: (-1-0j), 55: -1j}, {52: (1+0j), 53: 1j}, {54: (-1+0j), 55: -1j}, {52: (1+0j), 53: (-0+1j)}, {52: (-1+0j), 53: -1j}, {52: (-1+0j), 53: -1j}, {54: (1-0j), 55: 1j}, {54: (1+0j), 55: (-0+1j)}, {52: (-1+0j), 53: -1j}, {52: (-1+0j), 53: -1j}, {54: (-1+0j), 55: -1j}, {54: (1+0j), 55: (-0+1j)}, {54: 1, 55: 1j}, {52: 1, 53: 1j}, {54: (-1+0j), 55: -1j}, {52: (1-0j), 53: 1j}]),
        ([array([-0.5,  1.5,  0.5]), array([ 0.5,  1.5, -0.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5,  1.5]), array([-0.5, -1.5,  0.5]), array([ 0.5, -1.5, -0.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5,  0.5, -1.5])], [{64: (-1+0j), 65: -1j}, {62: (-1+0j), 63: -1j}, {62: (1-0j), 63: 1j}, {64: (1-0j), 65: 1j}, {62: (-1+0j), 63: -1j}, {64: (-1+0j), 65: -1j}, {64: 1, 65: 1j}, {62: 1, 63: 1j}]),
        ([array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -0.5]), array([-1.5, -0.5,  0.5]), array([-1.5,  0.5, -0.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  1.5, -1.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5,  1.5, -1.5])], [{64: (-1+0j), 65: -1j}, {62: (-1+0j), 63: -1j}, {62: (-1+0j), 63: -1j}, {64: (-1+0j), 65: -1j}, {62: (1-0j), 63: 1j}, {64: (1-0j), 65: 1j}, {64: (1-0j), 65: 1j}, {62: (1-0j), 63: 1j}]),
        ([array([-0.5,  0.5,  1.5]), array([-0.5,  1.5,  0.5]), array([ 0.5, -0.5,  1.5]), array([ 0.5,  1.5, -0.5]), array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -0.5]), array([-1.5, -0.5,  0.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5, -0.5]), array([-1.5,  0.5,  1.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5, -1.5,  0.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  0.5, -1.5]), array([-0.5,  1.5, -1.5]), array([ 0.5, -1.5, -0.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5, -0.5, -1.5]), array([ 0.5,  1.5, -1.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5,  0.5, -1.5])], [{60: (1-0j), 61: 1j}, {58: (1-0j), 59: 1j}, {60: (1-0j), 61: 1j}, {56: (1-0j), 57: 1j}, {58: (1-0j), 59: 1j}, {56: (1-0j), 57: 1j}, {56: (1-0j), 57: 1j}, {56: (1-0j), 57: 1j}, {58: (1-0j), 59: 1j}, {58: (1-0j), 59: 1j}, {60: (1-0j), 61: 1j}, {60: (1-0j), 61: 1j}, {56: (1-0j), 57: 1j}, {56: (1-0j), 57: 1j}, {60: (1-0j), 61: 1j}, {58: (1-0j), 59: 1j}, {58: (1-0j), 59: 1j}, {58: 1, 59: 1j}, {60: (1+0j), 61: 1j}, {56: 1, 57: 1j}, {60: (1-0j), 61: 1j}, {60: 1, 61: 1j}, {58: (1-0j), 59: 1j}, {56: (1-0j), 57: 1j}])],
       [([array([-1.5, -0.5,  0.5]), array([-1.5,  0.5, -0.5]), array([-0.5, -1.5,  0.5]), array([-0.5,  0.5, -1.5]), array([ 0.5, -1.5, -0.5]), array([ 0.5, -0.5, -1.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5,  1.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  0.5,  1.5]), array([-0.5,  1.5, -1.5]), array([-0.5,  1.5,  0.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5, -0.5,  1.5]), array([ 0.5,  1.5, -1.5]), array([ 0.5,  1.5, -0.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -1.5]), array([ 1.5,  0.5, -0.5])], [{46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}, {46: (1-0j), 47: -1j}]),
        ([array([-0.5, -1.5,  0.5]), array([-0.5,  0.5, -1.5]), array([ 0.5, -1.5, -0.5]), array([ 0.5, -0.5, -1.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5,  1.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5,  0.5,  1.5]), array([-0.5,  1.5,  0.5]), array([ 0.5, -0.5,  1.5]), array([ 0.5,  1.5, -0.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5,  0.5, -1.5])], [{54: (-1+0j), 55: 1j}, {54: (-1-0j), 55: (-0+1j)}, {52: (1+0j), 53: -1j}, {52: (1+0j), 53: -1j}, {54: (1-0j), 55: -1j}, {52: (-1+0j), 53: (-0+1j)}, {54: (1+0j), 55: -1j}, {52: (-1+0j), 53: 1j}, {52: (-1+0j), 53: 1j}, {52: (-1+0j), 53: (-0+1j)}, {54: (1+0j), 55: -1j}, {54: (1-0j), 55: -1j}, {52: (1+0j), 53: -1j}, {54: (-1-0j), 55: (-0+1j)}, {52: (1+0j), 53: -1j}, {54: (-1+0j), 55: 1j}]),
        ([array([-1.5, -0.5,  0.5]), array([-1.5,  0.5, -0.5]), array([-0.5,  0.5, -1.5]), array([ 0.5, -0.5, -1.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  0.5,  1.5]), array([-0.5,  1.5, -1.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5, -0.5,  1.5]), array([ 0.5,  1.5, -1.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5]), array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -0.5])], [{54: (-1-0j), 55: (-0+1j)}, {52: (1+0j), 53: -1j}, {52: (1+0j), 53: -1j}, {54: (-1-0j), 55: (-0+1j)}, {52: (1-0j), 53: -1j}, {54: (-1+0j), 55: (-0+1j)}, {54: (1+0j), 55: -1j}, {54: (1+0j), 55: -1j}, {52: (1-0j), 53: -1j}, {52: (-1+0j), 53: 1j}, {52: (-1+0j), 53: 1j}, {54: (-1-0j), 55: (-0+1j)}, {54: (1+0j), 55: -1j}, {52: (-1+0j), 53: 1j}, {52: (-1+0j), 53: 1j}, {54: (1+0j), 55: -1j}]),
        ([array([-1.5, -0.5,  0.5]), array([-1.5,  0.5, -0.5]), array([-0.5, -1.5,  0.5]), array([ 0.5, -1.5, -0.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5,  1.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  1.5, -1.5]), array([-0.5,  1.5,  0.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5,  1.5, -1.5]), array([ 0.5,  1.5, -0.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -1.5]), array([ 1.5,  0.5, -0.5])], [{52: (1+0j), 53: -1j}, {54: (-1+0j), 55: 1j}, {52: (1+0j), 53: -1j}, {54: (-1-0j), 55: (-0+1j)}, {52: (1-0j), 53: -1j}, {54: (-1+0j), 55: (-0+1j)}, {52: (1-0j), 53: -1j}, {54: (1-0j), 55: -1j}, {54: (1+0j), 55: -1j}, {54: (-1+0j), 55: (-0+1j)}, {52: (-1+0j), 53: (-0+1j)}, {52: (-1+0j), 53: 1j}, {54: (1+0j), 55: -1j}, {54: (1-0j), 55: -1j}, {52: (-1+0j), 53: 1j}, {52: (-1+0j), 53: (-0+1j)}]),
        ([], []), ([], []), ([], []), ([], [])],
       [([array([-0.5, -1.5,  0.5]), array([-0.5,  0.5, -1.5]), array([ 0.5, -1.5, -0.5]), array([ 0.5, -0.5, -1.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5,  1.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5,  0.5,  1.5]), array([-0.5,  1.5,  0.5]), array([ 0.5, -0.5,  1.5]), array([ 0.5,  1.5, -0.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5,  0.5, -1.5])], [{50: (-1+0j), 51: 1j}, {50: (-1+0j), 51: (-0+1j)}, {48: (1+0j), 49: -1j}, {48: (1+0j), 49: -1j}, {50: (1-0j), 51: -1j}, {48: (-1+0j), 49: (-0+1j)}, {50: (1-0j), 51: -1j}, {48: (-1+0j), 49: 1j}, {48: (-1+0j), 49: 1j}, {48: (-1+0j), 49: (-0+1j)}, {50: (1-0j), 51: -1j}, {50: (1-0j), 51: -1j}, {48: (1+0j), 49: -1j}, {50: (-1+0j), 51: (-0+1j)}, {48: (1+0j), 49: -1j}, {50: (-1+0j), 51: 1j}]),
        ([array([-1.5, -0.5,  0.5]), array([-1.5,  0.5, -0.5]), array([-0.5, -1.5,  0.5]), array([-0.5,  0.5, -1.5]), array([ 0.5, -1.5, -0.5]), array([ 0.5, -0.5, -1.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5,  1.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  0.5,  1.5]), array([-0.5,  1.5, -1.5]), array([-0.5,  1.5,  0.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5, -0.5,  1.5]), array([ 0.5,  1.5, -1.5]), array([ 0.5,  1.5, -0.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -1.5]), array([ 1.5,  0.5, -0.5])], [{60: (1-0j), 61: -1j}, {60: (1-0j), 61: -1j}, {58: (1-0j), 59: -1j}, {58: (1-0j), 59: -1j}, {56: (1-0j), 57: -1j}, {56: (1-0j), 57: -1j}, {58: (1-0j), 59: -1j}, {56: (1-0j), 57: -1j}, {58: (1-0j), 59: -1j}, {56: (1-0j), 57: -1j}, {60: (1-0j), 61: -1j}, {56: (1-0j), 57: -1j}, {60: (1-0j), 61: -1j}, {56: (1-0j), 57: -1j}, {60: (1-0j), 61: -1j}, {58: (1-0j), 59: -1j}, {60: (1-0j), 61: -1j}, {58: (1-0j), 59: -1j}, {56: (1-0j), 57: -1j}, {58: (1-0j), 59: -1j}, {56: (1-0j), 57: -1j}, {60: (1-0j), 61: -1j}, {58: (1-0j), 59: -1j}, {60: (1-0j), 61: -1j}]),
        ([array([-0.5,  0.5, -1.5]), array([ 0.5, -0.5, -1.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5,  0.5,  1.5]), array([ 0.5, -0.5,  1.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5])], [{62: (-1+0j), 63: 1j}, {64: (-1+0j), 65: 1j}, {62: (1-0j), 63: -1j}, {64: (1-0j), 65: -1j}, {64: (-1+0j), 65: 1j}, {62: (-1+0j), 63: 1j}, {64: (1-0j), 65: -1j}, {62: (1-0j), 63: -1j}]),
        ([array([-0.5, -1.5,  0.5]), array([ 0.5, -1.5, -0.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5,  1.5]), array([-0.5,  1.5,  0.5]), array([ 0.5,  1.5, -0.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5,  0.5, -1.5])], [{62: (-1+0j), 63: 1j}, {64: (-1+0j), 65: 1j}, {62: (1-0j), 63: -1j}, {64: (1-0j), 65: -1j}, {64: (-1+0j), 65: (-0+1j)}, {62: (-1+0j), 63: (-0+1j)}, {64: (1-0j), 65: -1j}, {62: (1-0j), 63: -1j}]),
        ([], []), ([], []), ([], []), ([], [])],
       [([array([-1.5, -0.5,  0.5]), array([-1.5,  0.5, -0.5]), array([-0.5,  0.5, -1.5]), array([ 0.5, -0.5, -1.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  0.5,  1.5]), array([-0.5,  1.5, -1.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5, -0.5,  1.5]), array([ 0.5,  1.5, -1.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5]), array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -0.5])], [{50: (-1+0j), 51: (-0+1j)}, {48: (1+0j), 49: -1j}, {48: (1+0j), 49: -1j}, {50: (-1-0j), 51: (-0+1j)}, {48: (1-0j), 49: -1j}, {50: (-1+0j), 51: (-0+1j)}, {50: (1-0j), 51: -1j}, {50: (1+0j), 51: -1j}, {48: (1-0j), 49: -1j}, {48: (-1+0j), 49: 1j}, {48: (-1+0j), 49: 1j}, {50: (-1+0j), 51: (-0+1j)}, {50: (1+0j), 51: -1j}, {48: (-1+0j), 49: 1j}, {48: (-1+0j), 49: 1j}, {50: (1-0j), 51: -1j}]),
        ([array([-0.5,  0.5, -1.5]), array([ 0.5, -0.5, -1.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5,  0.5,  1.5]), array([ 0.5, -0.5,  1.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5])], [{64: (-1+0j), 65: 1j}, {62: (-1+0j), 63: 1j}, {64: (1-0j), 65: -1j}, {62: (1-0j), 63: -1j}, {62: (-1+0j), 63: 1j}, {64: (-1+0j), 65: 1j}, {62: (1-0j), 63: -1j}, {64: (1-0j), 65: -1j}]),
        ([array([-1.5, -0.5,  0.5]), array([-1.5,  0.5, -0.5]), array([-0.5, -1.5,  0.5]), array([-0.5,  0.5, -1.5]), array([ 0.5, -1.5, -0.5]), array([ 0.5, -0.5, -1.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5,  1.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  0.5,  1.5]), array([-0.5,  1.5, -1.5]), array([-0.5,  1.5,  0.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5, -0.5,  1.5]), array([ 0.5,  1.5, -1.5]), array([ 0.5,  1.5, -0.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -1.5]), array([ 1.5,  0.5, -0.5])], [{58: (1-0j), 59: -1j}, {56: (1-0j), 57: -1j}, {60: (1-0j), 61: -1j}, {56: (1-0j), 57: -1j}, {60: (1-0j), 61: -1j}, {58: (1-0j), 59: -1j}, {60: (1-0j), 61: -1j}, {60: (1-0j), 61: -1j}, {56: (1-0j), 57: -1j}, {58: (1-0j), 59: -1j}, {58: (1-0j), 59: -1j}, {58: (1-0j), 59: -1j}, {56: (1-0j), 57: -1j}, {60: (1-0j), 61: -1j}, {56: (1-0j), 57: -1j}, {56: (1-0j), 57: -1j}, {58: (1-0j), 59: -1j}, {60: (1-0j), 61: -1j}, {58: (1-0j), 59: -1j}, {56: (1-0j), 57: -1j}, {60: (1-0j), 61: -1j}, {56: (1-0j), 57: -1j}, {60: (1-0j), 61: -1j}, {58: (1-0j), 59: -1j}]),
        ([array([-1.5, -0.5,  0.5]), array([-1.5,  0.5, -0.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  1.5, -1.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5,  1.5, -1.5]), array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -0.5])], [{62: (-1+0j), 63: 1j}, {64: (-1+0j), 65: 1j}, {62: (1-0j), 63: -1j}, {64: (1-0j), 65: -1j}, {64: (1-0j), 65: -1j}, {62: (1-0j), 63: -1j}, {64: (-1+0j), 65: 1j}, {62: (-1+0j), 63: 1j}]),
        ([], []), ([], []), ([], []), ([], [])],
       [([array([-1.5, -0.5,  0.5]), array([-1.5,  0.5, -0.5]), array([-0.5, -1.5,  0.5]), array([ 0.5, -1.5, -0.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5,  1.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  1.5, -1.5]), array([-0.5,  1.5,  0.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5,  1.5, -1.5]), array([ 0.5,  1.5, -0.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -1.5]), array([ 1.5,  0.5, -0.5])], [{48: (1+0j), 49: -1j}, {50: (-1+0j), 51: 1j}, {48: (1+0j), 49: -1j}, {50: (-1+0j), 51: (-0+1j)}, {48: (1-0j), 49: -1j}, {50: (-1+0j), 51: (-0+1j)}, {48: (1-0j), 49: -1j}, {50: (1-0j), 51: -1j}, {50: (1-0j), 51: -1j}, {50: (-1+0j), 51: (-0+1j)}, {48: (-1+0j), 49: (-0+1j)}, {48: (-1+0j), 49: 1j}, {50: (1-0j), 51: -1j}, {50: (1-0j), 51: -1j}, {48: (-1+0j), 49: 1j}, {48: (-1+0j), 49: (-0+1j)}]),
        ([array([-0.5, -1.5,  0.5]), array([ 0.5, -1.5, -0.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5,  1.5]), array([-0.5,  1.5,  0.5]), array([ 0.5,  1.5, -0.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5,  0.5, -1.5])], [{64: (-1+0j), 65: 1j}, {62: (-1+0j), 63: 1j}, {64: (1-0j), 65: -1j}, {62: (1-0j), 63: -1j}, {62: (-1+0j), 63: 1j}, {64: (-1+0j), 65: 1j}, {62: (1-0j), 63: -1j}, {64: (1-0j), 65: -1j}]),
        ([array([-1.5, -0.5,  0.5]), array([-1.5,  0.5, -0.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  1.5, -1.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5,  1.5, -1.5]), array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -0.5])], [{64: (-1+0j), 65: 1j}, {62: (-1+0j), 63: 1j}, {64: (1-0j), 65: -1j}, {62: (1-0j), 63: -1j}, {62: (1-0j), 63: -1j}, {64: (1-0j), 65: -1j}, {62: (-1+0j), 63: 1j}, {64: (-1+0j), 65: 1j}]),
        ([array([-1.5, -0.5,  0.5]), array([-1.5,  0.5, -0.5]), array([-0.5, -1.5,  0.5]), array([-0.5,  0.5, -1.5]), array([ 0.5, -1.5, -0.5]), array([ 0.5, -0.5, -1.5]), array([-1.5, -0.5,  1.5]), array([-1.5,  0.5,  1.5]), array([-1.5,  1.5, -0.5]), array([-1.5,  1.5,  0.5]), array([-0.5, -1.5,  1.5]), array([-0.5,  0.5,  1.5]), array([-0.5,  1.5, -1.5]), array([-0.5,  1.5,  0.5]), array([ 0.5, -1.5,  1.5]), array([ 0.5, -0.5,  1.5]), array([ 0.5,  1.5, -1.5]), array([ 0.5,  1.5, -0.5]), array([ 1.5, -1.5, -0.5]), array([ 1.5, -1.5,  0.5]), array([ 1.5, -0.5, -1.5]), array([ 1.5, -0.5,  0.5]), array([ 1.5,  0.5, -1.5]), array([ 1.5,  0.5, -0.5])], [{56: (1-0j), 57: -1j}, {58: (1-0j), 59: -1j}, {56: (1-0j), 57: -1j}, {60: (1-0j), 61: -1j}, {58: (1-0j), 59: -1j}, {60: (1-0j), 61: -1j}, {56: (1-0j), 57: -1j}, {58: (1-0j), 59: -1j}, {60: (1-0j), 61: -1j}, {60: (1-0j), 61: -1j}, {56: (1-0j), 57: -1j}, {60: (1+0j), 61: -1j}, {58: (1-0j), 59: -1j}, {58: (1-0j), 59: -1j}, {58: (1-0j), 59: -1j}, {60: (1-0j), 61: -1j}, {56: (1-0j), 57: -1j}, {56: (1-0j), 57: -1j}, {60: (1-0j), 61: -1j}, {60: (1-0j), 61: -1j}, {58: (1-0j), 59: -1j}, {58: (1-0j), 59: -1j}, {56: (1-0j), 57: -1j}, {56: (1-0j), 57: -1j}]),
        ([], []), ([], []), ([], []), ([], [])]], dtype=object)}/home/hp/users/kfh/DFTBAI1/module/parameter/para4band/para4band.py:76: UserWarning: Casting complex values to real discards the imaginary part (Triggered internally at ../aten/src/ATen/native/Copy.cpp:250.)
  eigens = torch.diagonal(eigen_matrices,dim1=-1,dim2=-2).type(torch.float32) ###Hermit矩阵实数特征值

band_index: [11, 12, 13, 14, 15, 16, 17, 18]
model_index: [0, 1, 2, 3, 4, 5, 6, 7]
mask: []
neighbour_list [6, 6]
0 特征值优化 tensor(63.6154, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990, 0.9990,
         0.9990, 0.9990, 0.9990]], device='cuda:0') 0
1000 特征值优化 tensor(9.7942, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0434,  0.6665,  1.1220,  0.6692,  0.1972,  0.1472,  0.0863,  0.1057,
          0.0585,  0.1055,  0.1794,  0.1689,  0.2493,  0.2457,  0.0657,  0.3332,
          0.2596, -0.0012,  0.1930,  0.3387,  0.0297,  0.2920,  0.2613,  0.0322,
          0.2194,  0.2489,  0.1182,  0.1062,  0.2714,  0.2893,  0.2185,  0.2899,
          0.1277,  0.1169,  0.3711,  0.4386,  0.2335,  0.3520,  0.2571,  0.2230,
          0.1562,  0.1262,  0.2760,  0.2504,  0.2033,  0.0914,  0.1572,  0.1679,
          0.2170,  0.3158,  0.3009,  0.2933,  0.1621,  0.1833,  0.4151,  0.3136,
          0.1565,  0.1611,  0.2119,  0.2223,  0.1695,  0.1672,  0.3348,  0.2251,
          0.3709,  0.2625]], device='cuda:0') tensor(0.3891, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
2000 特征值优化 tensor(5.2528, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.3063,  1.7929,  2.5940,  1.8880,  0.1396,  0.1359, -0.1946, -0.2148,
         -0.1474,  0.1042,  0.1084,  0.1819,  0.3147,  0.5988, -0.1825,  0.4819,
          0.2119, -0.5352,  0.2127,  0.3516, -0.0945,  0.3713,  0.1875, -0.1810,
          0.2760,  0.0100, -0.2189, -0.1878,  0.1274,  0.0966,  0.1188,  0.1735,
         -0.0342, -0.1439,  0.5156,  0.1963,  0.3157,  0.2119,  0.1388,  0.3999,
          0.0395, -0.2544,  0.4453,  0.0755,  0.1662, -0.4816,  0.0737,  0.0786,
          0.0835,  0.2910,  0.2123,  0.2552, -0.0061, -0.1228,  0.3573,  0.2386,
          0.0187, -0.0129,  0.1480,  0.2416,  0.0735,  0.1101,  0.2675, -0.1012,
          0.2840,  0.0677]], device='cuda:0') tensor(0.3380, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
3000 特征值优化 tensor(4.2750, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.5922e+00,  2.2968e+00,  3.2355e+00,  2.2477e+00,  3.0537e-01,
          2.2917e-01, -4.7832e-01,  1.1191e-01, -5.7324e-01,  3.6380e-01,
          2.9420e-01,  3.6318e-01,  5.0419e-01,  9.3618e-01, -2.8722e-01,
          3.6228e-01,  2.5350e-01, -6.0812e-01,  2.3195e-01,  2.7470e-01,
         -1.1667e-01,  3.5738e-01,  2.0503e-01, -1.6052e-01,  2.7337e-01,
          1.3174e-01, -3.8615e-01, -2.2206e-01,  2.0232e-01,  3.6634e-01,
          5.9423e-02,  1.5905e-01, -2.3598e-02, -1.7372e-01,  5.4590e-01,
         -3.3902e-02,  2.8848e-01,  9.9094e-02, -1.2293e-01,  3.6702e-01,
         -1.1251e-01, -3.9058e-01,  1.6457e-01, -6.5727e-02,  1.8780e-01,
         -5.0453e-01,  5.7486e-02,  5.7937e-02, -7.0831e-02,  1.3197e-01,
         -2.1900e-03,  1.5467e-01,  1.2620e-02, -2.8224e-01,  2.4283e-01,
          2.5604e-01, -6.9664e-03, -1.0360e-02,  4.5003e-02,  1.6305e-01,
          6.6513e-03,  5.9140e-02, -8.1397e-02, -3.5531e-01,  1.9344e-01,
          2.0285e-01]], device='cuda:0') tensor(0.2503, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
4000 特征值优化 tensor(3.7717, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.3731,  2.5722,  3.5626,  2.4487,  0.3449,  0.4415, -0.6212,  0.0603,
         -0.7280,  0.1987,  0.4833,  0.5193,  0.6755,  1.2662, -0.2677,  0.1916,
          0.2668, -0.6707,  0.2425,  0.0060, -0.2152,  0.4205,  0.1995, -0.0854,
          0.3088,  0.0238, -0.4595, -0.1690,  0.2402,  0.3705,  0.1138,  0.0525,
         -0.0320, -0.1807,  0.5160, -0.1857,  0.1628,  0.0961, -0.4842,  0.3690,
         -0.0820, -0.3317, -0.1782,  0.2149,  0.0766, -0.4859,  0.0650, -0.0433,
         -0.1321, -0.0093, -0.0586,  0.0838,  0.0299, -0.3694,  0.1434,  0.1857,
         -0.0359, -0.0135, -0.0460,  0.0656, -0.1151, -0.0422, -0.1758, -0.3865,
          0.1481,  0.1025]], device='cuda:0') tensor(0.3601, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
5000 正交保障 tensor(0.3451, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.2199e+00,  2.5616e+00,  3.8514e+00,  2.5453e+00,  2.8547e-01,
          5.5240e-01, -6.0066e-01,  4.2401e-02, -9.1653e-01,  1.5612e-01,
          5.9050e-01,  5.3943e-01,  6.6918e-01,  1.3379e+00, -2.8758e-01,
          1.0378e-01,  3.0155e-01, -7.1039e-01,  2.5810e-01, -5.0579e-02,
         -2.0175e-01,  4.3452e-01,  2.5597e-01, -5.1731e-02,  3.0506e-01,
         -1.5912e-01, -4.8089e-01, -1.5601e-01,  2.4427e-01,  3.3237e-01,
          1.0177e-01,  4.2410e-02, -6.0055e-02, -1.5245e-01,  4.4099e-01,
         -1.6973e-01,  1.9105e-01, -6.4044e-02, -4.9593e-01,  3.4512e-01,
          8.7275e-02, -3.5071e-01, -1.8883e-01,  3.2839e-01, -2.8721e-02,
         -5.2581e-01,  7.7381e-02, -8.7420e-02, -1.3846e-01, -5.5219e-02,
         -1.1681e-02,  7.2717e-02, -6.9437e-03, -3.0345e-01,  1.3287e-01,
          1.4694e-01, -1.1412e-01, -1.7837e-03, -8.5564e-02,  3.5391e-02,
         -1.7366e-01, -3.0352e-02, -5.9786e-02, -4.2197e-01,  2.4153e-01,
          3.7788e-02]], device='cuda:0') tensor(0.3451, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
6000 特征值优化 tensor(2.8434, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2750,  2.2661,  3.8716,  2.9698,  0.2286,  0.4727, -0.3528, -0.0082,
         -1.1956,  0.1475,  0.5961,  0.4258,  0.5885,  1.4573, -0.3122,  0.0453,
          0.2394, -0.7077,  0.2926,  0.1428, -0.1066,  0.3816,  0.2504, -0.1041,
          0.2813, -0.7120, -0.4662, -0.1570,  0.2591,  0.2998,  0.0731,  0.0789,
         -0.0740, -0.1427,  0.3134, -0.1352,  0.4332, -0.1199, -0.2043,  0.3793,
          0.2080, -0.3575, -0.2660,  0.3147, -0.1273, -0.5892,  0.0919, -0.0540,
         -0.1825, -0.1070,  0.1213,  0.0212, -0.1048, -0.1724,  0.1260,  0.1717,
         -0.1563,  0.0690, -0.0919,  0.0263, -0.1687,  0.0311, -0.0095, -0.2482,
          0.2521, -0.0494]], device='cuda:0') tensor(0.4178, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
7000 特征值优化 tensor(2.8157, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9857,  2.1463,  3.8167,  3.2069,  0.2043,  0.4069, -0.3539, -0.0250,
         -1.1930,  0.1762,  0.6014,  0.4303,  0.5814,  1.4830, -0.2656,  0.0112,
          0.2180, -0.6536,  0.2711,  0.2105, -0.1642,  0.3913,  0.2662, -0.1500,
          0.3043, -0.7197, -0.4842, -0.1493,  0.2476,  0.2795,  0.0611,  0.1385,
         -0.0662, -0.1598,  0.2798, -0.1205,  0.3776, -0.1679, -0.1767,  0.3364,
          0.1561, -0.2514, -0.2721,  0.2583, -0.0841, -0.5974,  0.1073, -0.0435,
         -0.1759, -0.1134,  0.1216,  0.0238, -0.0976, -0.1448,  0.1171,  0.1919,
         -0.1635,  0.0691, -0.0851,  0.0397, -0.1507,  0.0300,  0.0099, -0.2523,
          0.2798, -0.0247]], device='cuda:0') tensor(0.4231, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
8000 特征值优化 tensor(2.7942, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.7370,  2.0244,  3.7824,  3.4199,  0.2014,  0.3652, -0.3568, -0.0258,
         -1.1894,  0.1594,  0.6108,  0.4343,  0.5742,  1.4932, -0.2178, -0.0051,
          0.2004, -0.6011,  0.2461,  0.2729, -0.2290,  0.3927,  0.2869, -0.1921,
          0.3312, -0.7207, -0.4959, -0.1247,  0.2305,  0.2602,  0.0501,  0.1875,
         -0.0526, -0.1747,  0.2554, -0.1107,  0.3156, -0.2009, -0.1392,  0.2831,
          0.1114, -0.1485, -0.2773,  0.1896, -0.0357, -0.5911,  0.1110, -0.0443,
         -0.1762, -0.1082,  0.1216,  0.0234, -0.0799, -0.1274,  0.0986,  0.2012,
         -0.1650,  0.0665, -0.0790,  0.0505, -0.1362,  0.0285,  0.0199, -0.2563,
          0.2926,  0.0043]], device='cuda:0') tensor(0.3771, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
9000 特征值优化 tensor(2.7761, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5075,  1.8820,  3.7530,  3.6386,  0.1957,  0.3501, -0.3448, -0.0252,
         -1.1804,  0.1486,  0.6107,  0.4313,  0.5887,  1.4932, -0.1608, -0.0249,
          0.1855, -0.5555,  0.2103,  0.3370, -0.2832,  0.3848,  0.2962, -0.2370,
          0.3667, -0.7291, -0.4827, -0.1269,  0.1988,  0.2517,  0.0418,  0.2233,
         -0.0521, -0.1848,  0.2319, -0.0993,  0.2503, -0.2013, -0.1072,  0.2325,
          0.0544, -0.0351, -0.2979,  0.1226,  0.0102, -0.5668,  0.1106, -0.0382,
         -0.1598, -0.1065,  0.1149,  0.0250, -0.0644, -0.1175,  0.0819,  0.1989,
         -0.1588,  0.0605, -0.0630,  0.0532, -0.1151,  0.0288,  0.0364, -0.2654,
          0.3016,  0.0247]], device='cuda:0') tensor(0.3733, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
10000 特征值优化 tensor(2.7653, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3288,  1.7604,  3.7353,  3.8127,  0.1866,  0.3205, -0.3285, -0.0324,
         -1.1745,  0.1282,  0.6083,  0.4282,  0.5869,  1.4818, -0.1204, -0.0260,
          0.1702, -0.5259,  0.1854,  0.3771, -0.3250,  0.3846,  0.3164, -0.2678,
          0.3917, -0.7324, -0.4698, -0.1177,  0.1818,  0.2404,  0.0405,  0.2331,
         -0.0443, -0.1949,  0.2207, -0.0968,  0.2067, -0.1828, -0.0827,  0.1952,
          0.0131,  0.0416, -0.3215,  0.0757,  0.0464, -0.5457,  0.1086, -0.0344,
         -0.1493, -0.0964,  0.1048,  0.0245, -0.0498, -0.1179,  0.0746,  0.1939,
         -0.1523,  0.0527, -0.0542,  0.0544, -0.0998,  0.0262,  0.0434, -0.2580,
          0.3072,  0.0541]], device='cuda:0') tensor(0.3492, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
11000 特征值优化 tensor(2.7602, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1797,  1.6696,  3.7324,  3.9366,  0.1916,  0.2824, -0.2990, -0.0372,
         -1.1723,  0.1161,  0.6047,  0.4248,  0.5860,  1.4697, -0.0928, -0.0243,
          0.1533, -0.5012,  0.1668,  0.3970, -0.3564,  0.3786,  0.3315, -0.2903,
          0.4114, -0.7345, -0.4588, -0.1125,  0.1677,  0.2340,  0.0436,  0.2374,
         -0.0379, -0.2003,  0.2187, -0.0958,  0.1730, -0.1618, -0.0771,  0.1697,
         -0.0157,  0.0918, -0.3488,  0.0441,  0.0757, -0.5400,  0.0988, -0.0274,
         -0.1367, -0.0912,  0.0932,  0.0243, -0.0427, -0.1187,  0.0697,  0.1866,
         -0.1517,  0.0475, -0.0492,  0.0524, -0.0904,  0.0228,  0.0422, -0.2485,
          0.3098,  0.0762]], device='cuda:0') tensor(0.4234, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
12000 特征值优化 tensor(2.7543, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.0500,  1.6012,  3.7449,  4.0387,  0.1900,  0.2610, -0.2755, -0.0483,
         -1.1631,  0.1093,  0.5970,  0.4250,  0.5911,  1.4559, -0.0691, -0.0221,
          0.1401, -0.4798,  0.1534,  0.4188, -0.3778,  0.3723,  0.3457, -0.3111,
          0.4259, -0.7373, -0.4344, -0.1223,  0.1511,  0.2243,  0.0403,  0.2428,
         -0.0433, -0.2027,  0.2112, -0.1016,  0.1479, -0.1343, -0.0692,  0.1466,
         -0.0428,  0.1382, -0.3687,  0.0307,  0.0976, -0.5291,  0.0934, -0.0200,
         -0.1254, -0.0920,  0.0853,  0.0267, -0.0330, -0.1169,  0.0674,  0.1827,
         -0.1501,  0.0407, -0.0481,  0.0500, -0.0850,  0.0210,  0.0397, -0.2386,
          0.3085,  0.0916]], device='cuda:0') tensor(0.3575, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
13000 特征值优化 tensor(2.7499, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0572,  1.5296,  3.7614,  4.1336,  0.1924,  0.2334, -0.2513, -0.0495,
         -1.1566,  0.1030,  0.5830,  0.4254,  0.5995,  1.4431, -0.0459, -0.0213,
          0.1301, -0.4624,  0.1369,  0.4352, -0.4025,  0.3612,  0.3593, -0.3294,
          0.4424, -0.7403, -0.4129, -0.1163,  0.1391,  0.2084,  0.0383,  0.2477,
         -0.0485, -0.2047,  0.2099, -0.1093,  0.1191, -0.1166, -0.0613,  0.1240,
         -0.0613,  0.1792, -0.4019,  0.0319,  0.1191, -0.5178,  0.0883, -0.0155,
         -0.1169, -0.0887,  0.0769,  0.0249, -0.0226, -0.1101,  0.0647,  0.1768,
         -0.1472,  0.0346, -0.0444,  0.0463, -0.0778,  0.0176,  0.0338, -0.2278,
          0.3095,  0.1046]], device='cuda:0') tensor(0.3836, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
14000 特征值优化 tensor(19.4375, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9996,  0.8163,  0.1784,  1.0338,  0.1964, -0.9843, -0.1361, -0.0992,
          1.4719, -1.1194, -0.1093, -1.6171,  0.4599,  0.1336, -0.7931, -1.3376,
         -1.8793, -0.7852,  1.3563,  0.2895, -0.4061, -0.0219,  0.2568, -0.4667,
          0.4631, -0.2077,  0.4209,  0.0748, -0.2195, -1.4666, -0.5507,  0.0822,
          0.4467, -0.8902, -0.3949, -0.4415,  0.4117, -0.0050,  0.7848,  0.5382,
         -0.0317,  0.6459, -0.1702, -0.8755,  0.0063,  0.0856, -0.4380,  0.2119,
         -0.1236,  0.8467, -0.3835,  0.2327, -0.3475,  0.2095, -0.1383,  0.8891,
          0.0939, -0.3650, -0.9554,  0.4379, -0.0038,  0.6573, -0.3400, -1.4802,
          0.3726, -0.1091]], device='cuda:0') tensor(0.7516, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
15000 特征值优化 tensor(5.1161, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.9502e+00,  2.0508e+00,  9.3552e-01,  2.2601e+00,  1.9218e-01,
         -2.7550e-01,  1.2019e-01,  1.6720e-01,  5.3514e-01, -4.9200e-01,
          1.1200e-01, -1.0170e+00,  5.0436e-01, -2.8755e-01, -2.8311e-01,
         -5.4772e-01, -9.8676e-01, -3.6266e-01,  6.1203e-01,  3.7856e-01,
         -2.3842e-01,  1.4330e-03,  8.3762e-02, -4.8844e-01,  1.2041e-01,
         -4.8464e-01,  3.1816e-01,  2.3783e-01, -1.7925e-01, -5.9560e-01,
         -1.4390e-01,  1.4042e-01,  1.7767e-01, -3.1939e-01,  5.5311e-02,
         -1.6384e-01,  2.9150e-01,  1.8902e-01,  7.0147e-01,  2.3263e-01,
          1.3655e-01,  1.5954e-01, -1.3059e-01, -2.2641e-01, -1.8731e-01,
         -1.8351e-01, -1.5745e-01, -4.0108e-02, -1.8008e-01,  3.4292e-01,
         -1.4854e-02, -7.4838e-02, -2.7611e-02, -1.1373e-01,  1.7705e-02,
          2.6233e-01, -2.1927e-02,  3.2210e-02, -4.2466e-01,  2.2913e-01,
          2.2512e-02,  4.4633e-01, -2.8205e-02, -6.6829e-01, -1.6246e-04,
          4.5377e-01]], device='cuda:0') tensor(0.3821, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
16000 特征值优化 tensor(3.5779, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.3753,  2.7160,  0.7777,  3.0256,  0.0094, -0.1544,  0.1427,  0.4431,
          0.2919, -0.2931,  0.1431, -0.8641,  0.0641, -0.4641, -0.2432, -0.2981,
         -0.6203, -0.2217,  0.4816,  0.4212, -0.2625,  0.0318,  0.0766, -0.6387,
          0.1798, -0.5886,  0.3325,  0.3133, -0.1367, -0.3877, -0.1229,  0.2297,
          0.2938, -0.2348,  0.1843, -0.0422,  0.3596, -0.1504,  0.1985,  0.3094,
         -0.0657,  0.1868, -0.2228, -0.0712, -0.3473, -0.1754, -0.0949, -0.0626,
         -0.1448,  0.1336,  0.0242, -0.1095,  0.1275, -0.1113,  0.0535,  0.2067,
         -0.0352, -0.0055, -0.2956,  0.1925,  0.0960,  0.4209,  0.0181, -0.3708,
          0.1103,  0.4506]], device='cuda:0') tensor(0.3753, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
17000 特征值优化 tensor(2.8475, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.9575,  3.0050,  0.7446,  3.2495, -0.1309, -0.1833, -0.0586,  0.3932,
          0.1653, -0.4551,  0.2128, -0.8760, -0.4956, -0.8002, -0.3500, -0.1998,
         -0.3849, -0.2969,  0.4876,  0.6917, -0.2783,  0.0916,  0.0783, -0.5494,
          0.1994, -0.7020,  0.3092,  0.3391, -0.0694, -0.3727, -0.1253,  0.2771,
          0.3641, -0.1972,  0.1565, -0.1091,  0.3691, -0.1582,  0.0482,  0.1995,
          0.0553,  0.2090, -0.3111, -0.0198, -0.3380, -0.1997, -0.0671, -0.0611,
         -0.0461,  0.1713, -0.0286, -0.1482,  0.1407, -0.0102,  0.0305,  0.1265,
          0.0151, -0.0660, -0.1009,  0.2334,  0.0178,  0.4532,  0.1425, -0.1296,
          0.0132,  0.0526]], device='cuda:0') tensor(0.3646, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
18000 特征值优化 tensor(2.5635, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.3451e+00,  3.2422e+00,  6.9492e-01,  3.1516e+00, -1.3680e-01,
         -2.0676e-01, -8.0513e-02,  3.3157e-01,  2.2601e-01, -5.8856e-01,
          2.7621e-01, -7.4853e-01, -1.0554e+00, -9.7266e-01, -3.3705e-01,
         -1.6374e-01, -2.3484e-01, -4.3580e-01,  5.0429e-01,  7.3232e-01,
         -2.8308e-01,  7.3485e-02,  1.5910e-01, -4.0214e-01,  1.8754e-01,
         -7.2599e-01,  2.9199e-01,  3.3860e-01, -2.8940e-03, -4.0507e-01,
         -1.3489e-01,  2.6027e-01,  3.8857e-01, -1.6819e-01,  2.1156e-01,
          3.1799e-02,  4.2917e-01, -1.5412e-01,  5.2215e-02,  1.0342e-01,
          2.5877e-01,  2.2403e-01, -2.8574e-01, -2.7393e-01, -2.3764e-01,
         -4.6378e-01, -6.5010e-02, -6.0484e-02, -6.6819e-02,  2.0954e-01,
          1.7187e-02, -1.1687e-01,  1.0156e-01, -1.2330e-02, -1.6120e-02,
          8.2373e-02, -8.6401e-02, -9.3273e-02,  6.7853e-02,  2.2840e-01,
          2.1002e-02,  3.2479e-01,  2.7835e-01, -1.4755e-02,  3.3393e-02,
          4.3894e-02]], device='cuda:0') tensor(0.3559, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
19000 特征值优化 tensor(2.5365, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2131,  3.3263,  0.7542,  3.0465, -0.1415, -0.2057, -0.0993,  0.3295,
          0.2498, -0.5857,  0.2373, -0.7119, -1.2146, -1.0400, -0.3190, -0.1609,
         -0.2446, -0.4449,  0.5131,  0.7236, -0.2957,  0.0741,  0.1653, -0.3910,
          0.1774, -0.7187,  0.2897,  0.3417, -0.0056, -0.3988, -0.1510,  0.2727,
          0.3704, -0.1470,  0.2249,  0.0827,  0.4180, -0.1419,  0.0430,  0.0655,
          0.3495,  0.2437, -0.2717, -0.2902, -0.2053, -0.5328, -0.0684, -0.0620,
         -0.0665,  0.2010,  0.0235, -0.1103,  0.1153, -0.0067, -0.0259,  0.0750,
         -0.1137, -0.0827,  0.0841,  0.2066,  0.0276,  0.2728,  0.2928,  0.0348,
          0.0344,  0.0566]], device='cuda:0') tensor(0.3728, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
20000 特征值优化 tensor(2.5286, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1722,  3.3672,  0.8346,  2.9768, -0.1511, -0.1822, -0.0974,  0.3303,
          0.3109, -0.5622,  0.2146, -0.6971, -1.2678, -1.0711, -0.3087, -0.1353,
         -0.2651, -0.4376,  0.5332,  0.7169, -0.3017,  0.0827,  0.1851, -0.3976,
          0.1552, -0.7190,  0.2955,  0.3402, -0.0102, -0.3988, -0.1490,  0.2829,
          0.3423, -0.1295,  0.2505,  0.0873,  0.4090, -0.1111,  0.0135,  0.0651,
          0.4011,  0.2452, -0.2567, -0.2925, -0.2010, -0.5730, -0.0686, -0.0654,
         -0.0604,  0.1922,  0.0236, -0.1097,  0.1237,  0.0045, -0.0321,  0.0663,
         -0.1426, -0.0734,  0.0695,  0.1988,  0.0109,  0.2535,  0.2733,  0.0525,
          0.0095,  0.0590]], device='cuda:0') tensor(0.4198, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
21000 正交保障 tensor(0.3236, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1210e+00,  3.4144e+00,  9.1022e-01,  2.9391e+00, -1.6445e-01,
         -1.5083e-01, -1.0198e-01,  3.3960e-01,  3.8667e-01, -5.4349e-01,
          1.8604e-01, -6.8291e-01, -1.2772e+00, -1.0747e+00, -2.9851e-01,
         -1.0435e-01, -2.7496e-01, -4.3219e-01,  5.5467e-01,  7.0727e-01,
         -3.0505e-01,  9.0855e-02,  2.0368e-01, -4.0608e-01,  1.3325e-01,
         -7.2551e-01,  3.0678e-01,  3.3405e-01, -1.3895e-03, -4.0464e-01,
         -1.4095e-01,  2.9196e-01,  3.1906e-01, -1.0913e-01,  2.6672e-01,
          7.6898e-02,  3.9656e-01, -9.6363e-02, -9.5364e-03,  6.6450e-02,
          4.3714e-01,  2.4370e-01, -2.3656e-01, -3.0622e-01, -2.0461e-01,
         -6.0173e-01, -6.7436e-02, -6.6375e-02, -5.3109e-02,  1.9199e-01,
          2.5104e-02, -1.1261e-01,  1.2898e-01,  1.3793e-02, -3.6681e-02,
          5.4186e-02, -1.6153e-01, -5.3940e-02,  5.1519e-02,  2.0444e-01,
          2.6504e-03,  2.4258e-01,  2.3666e-01,  7.3398e-02, -3.1552e-02,
          6.4949e-02]], device='cuda:0') tensor(0.3236, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
22000 特征值优化 tensor(2.5112, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0793,  3.4552,  0.9667,  2.9091, -0.2051, -0.1203, -0.1163,  0.3457,
          0.4701, -0.4807,  0.1445, -0.6537, -1.3162, -1.0751, -0.2958, -0.0599,
         -0.2793, -0.4190,  0.5627,  0.7003, -0.3038,  0.0979,  0.2119, -0.4273,
          0.1252, -0.7156,  0.3195,  0.3143,  0.0043, -0.4050, -0.1432,  0.2972,
          0.2950, -0.0988,  0.2859,  0.0774,  0.3891, -0.0084, -0.0350,  0.0596,
          0.4237,  0.2516, -0.1788, -0.3386, -0.1957, -0.5847, -0.0688, -0.0658,
         -0.0479,  0.1840,  0.0296, -0.1129,  0.1285,  0.0287, -0.0473,  0.0400,
         -0.1802, -0.0377,  0.0280,  0.2185, -0.0133,  0.2272,  0.1989,  0.1114,
         -0.0599,  0.0735]], device='cuda:0') tensor(0.3606, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
23000 正交保障 tensor(0.3803, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0529e+00,  3.4171e+00,  1.0093e+00,  2.9390e+00, -2.3677e-01,
         -1.0879e-01, -1.3202e-01,  3.4636e-01,  5.2874e-01, -4.3285e-01,
          1.0557e-01, -6.3962e-01, -1.3543e+00, -1.0926e+00, -2.9210e-01,
         -5.7367e-03, -2.7588e-01, -4.0439e-01,  5.5973e-01,  6.9238e-01,
         -3.0946e-01,  1.0925e-01,  2.1487e-01, -4.3670e-01,  1.2872e-01,
         -7.1538e-01,  3.3305e-01,  2.9098e-01,  1.4903e-03, -4.1008e-01,
         -1.4131e-01,  3.0176e-01,  2.8590e-01, -7.4278e-02,  3.0767e-01,
          5.9243e-02,  3.8292e-01,  3.7844e-02, -4.5502e-02,  5.6949e-02,
          3.9885e-01,  2.5671e-01, -1.6428e-01, -3.6159e-01, -1.8858e-01,
         -5.7679e-01, -6.6831e-02, -7.0807e-02, -4.8119e-02,  1.8197e-01,
          3.1772e-02, -1.1341e-01,  1.1257e-01,  2.2626e-02, -4.9712e-02,
          3.4062e-02, -1.8603e-01, -2.5380e-02,  2.3622e-02,  2.1503e-01,
         -1.2215e-02,  2.0859e-01,  1.7877e-01,  1.2986e-01, -8.8479e-02,
          6.6227e-02]], device='cuda:0') tensor(0.3803, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
24000 特征值优化 tensor(2.5034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0378e+00,  3.3887e+00,  1.0453e+00,  2.9641e+00, -2.5201e-01,
         -1.0573e-01, -1.3782e-01,  3.4833e-01,  5.6362e-01, -4.0679e-01,
          7.6857e-02, -6.3603e-01, -1.3820e+00, -1.1009e+00, -2.8973e-01,
          1.2055e-02, -2.6604e-01, -3.9245e-01,  5.5584e-01,  6.8854e-01,
         -3.1244e-01,  1.1519e-01,  2.1402e-01, -4.4242e-01,  1.3264e-01,
         -7.1358e-01,  3.4225e-01,  2.7927e-01,  1.2484e-03, -4.1040e-01,
         -1.3948e-01,  3.0630e-01,  2.7793e-01, -5.7904e-02,  3.1529e-01,
          5.0392e-02,  3.8167e-01,  3.9345e-02, -3.7866e-02,  5.4633e-02,
          3.7965e-01,  2.5656e-01, -1.4833e-01, -3.7205e-01, -1.8205e-01,
         -5.7541e-01, -6.5818e-02, -7.0069e-02, -4.5189e-02,  1.8367e-01,
          3.5473e-02, -1.1467e-01,  1.0178e-01,  2.2501e-02, -4.9626e-02,
          3.3179e-02, -1.8891e-01, -1.2319e-02,  2.1046e-02,  2.1161e-01,
         -1.2879e-02,  1.9747e-01,  1.7094e-01,  1.3892e-01, -9.7164e-02,
          6.1039e-02]], device='cuda:0') tensor(0.3366, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
25000 正交保障 tensor(0.3874, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0093,  3.3503,  1.1019,  2.9925, -0.2582, -0.1025, -0.1454,  0.3445,
          0.5939, -0.3932,  0.0573, -0.6313, -1.4002, -1.1126, -0.2849,  0.0240,
         -0.2607, -0.3862,  0.5510,  0.6861, -0.3179,  0.1201,  0.2173, -0.4472,
          0.1369, -0.7147,  0.3451,  0.2757,  0.0037, -0.4093, -0.1407,  0.3065,
          0.2735, -0.0495,  0.3151,  0.0470,  0.3756,  0.0430, -0.0341,  0.0494,
          0.3777,  0.2581, -0.1376, -0.3810, -0.1778, -0.5707, -0.0646, -0.0720,
         -0.0450,  0.1852,  0.0389, -0.1136,  0.0957,  0.0207, -0.0503,  0.0314,
         -0.1895, -0.0064,  0.0200,  0.2081, -0.0137,  0.1890,  0.1658,  0.1433,
         -0.1002,  0.0572]], device='cuda:0') tensor(0.3874, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
26000 特征值优化 tensor(13.0981, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.4394,  0.9015, -1.5873,  0.2529,  0.2259,  0.4194, -1.2735,  0.1026,
         -0.2562,  0.8691, -1.6811,  0.0834,  0.5155,  0.0820,  0.0357,  0.1526,
         -0.2066,  1.0353,  0.2273,  0.1365,  0.3910,  0.0102, -0.2038, -1.2272,
         -1.0225,  0.4543,  0.3528,  0.5220,  0.0530, -0.4444,  0.1586,  0.4121,
          0.3448,  0.2354,  0.1288,  0.2858,  0.3257, -0.4296, -0.7346,  0.1595,
         -0.1779, -0.0364,  0.4900,  0.3002,  0.4482,  1.0057, -0.5935, -0.0661,
          0.4374,  0.0189,  0.4918, -0.7830,  0.6892,  0.0820, -0.0769, -0.3706,
          0.2697, -0.1477, -0.8424, -0.0635,  0.7645, -0.1590,  0.1117, -0.9624,
          0.2452,  0.2851]], device='cuda:0') tensor(0.4927, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
27000 特征值优化 tensor(4.4489, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.1598,  2.2746, -1.0011,  1.2446,  0.3697,  0.1607, -0.4937,  0.6676,
         -0.0454,  0.1013, -1.1906, -0.1359,  0.3890,  0.1002, -0.0552,  0.0919,
         -0.4693,  0.6729,  0.4042, -0.0273,  0.1050, -0.0544, -0.0076, -0.6443,
         -0.5873, -0.0146, -0.0061,  0.0695,  0.0447, -0.2325,  0.0344,  0.0598,
          0.1909,  0.1760, -0.0553,  0.0508, -0.4859, -0.1585, -0.2874, -0.3447,
          0.0677,  0.0470,  0.2862,  0.0087,  0.5794,  0.7625, -0.1551, -0.0174,
          0.0781,  0.0720,  0.1975, -0.2874,  0.3016, -0.0208, -0.0902, -0.1424,
          0.1084, -0.0578, -0.4063,  0.0579,  0.4283, -0.1053,  0.0593, -0.3044,
          0.0845,  0.1005]], device='cuda:0') tensor(0.4163, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
28000 特征值优化 tensor(2.0343, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.3129e+00,  3.1703e+00, -5.1202e-01,  2.0977e+00,  3.1030e-01,
          2.3365e-01, -6.3113e-01,  9.6203e-01,  1.5077e-01, -1.4695e-01,
         -9.6859e-01, -1.9423e-01,  2.1547e-01,  2.2585e-03,  4.7370e-02,
         -9.2288e-02, -4.5744e-01,  5.9852e-01,  4.2169e-01, -6.9532e-01,
          6.0040e-02, -6.4294e-03,  9.1556e-02, -6.1460e-01, -4.5772e-01,
          3.9889e-03,  2.4992e-03,  1.9825e-03, -1.7893e-02, -2.0741e-01,
          6.8164e-02, -7.1107e-02,  1.8058e-01,  2.3453e-01, -2.3572e-01,
          1.1250e-01, -6.4553e-01, -5.0233e-02, -4.5523e-01, -3.6563e-01,
          1.8560e-01,  1.7204e-02,  5.2105e-02, -1.2424e-02,  5.9950e-01,
          5.3140e-01, -7.7173e-02, -5.4290e-02,  1.3091e-01,  3.0489e-02,
          1.3211e-01, -1.5677e-01,  7.9689e-02, -4.7070e-02, -3.8822e-02,
          3.2308e-02, -8.7188e-02,  8.4532e-02, -2.5534e-01,  1.5727e-03,
          3.9277e-01, -2.7210e-01,  5.2026e-02,  2.7337e-02, -1.4849e-01,
          1.3371e-02]], device='cuda:0') tensor(0.3645, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
29000 正交保障 tensor(0.4221, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.5326e+00,  3.6265e+00, -5.6600e-01,  2.4135e+00,  2.4324e-01,
          1.4957e-01, -7.2569e-01,  9.3060e-01,  1.4136e-01, -1.1087e-01,
         -9.2800e-01, -1.8675e-01,  4.5902e-02, -3.3332e-01,  5.1694e-02,
         -1.3797e-01, -4.5073e-01,  4.9659e-01,  4.2165e-01, -6.8268e-01,
          4.2665e-02, -3.4027e-02,  8.9464e-02, -5.2221e-01, -4.4612e-01,
          3.1741e-03,  4.1231e-03,  2.5500e-05, -6.1972e-02, -2.2928e-01,
          6.3199e-02, -5.1468e-02,  1.5933e-01,  3.0873e-01, -2.3528e-01,
          1.8579e-01, -6.7171e-01, -1.9812e-01, -4.4410e-01, -4.9489e-01,
          3.3816e-01,  2.9076e-03,  5.6075e-02, -2.1725e-03,  6.1871e-01,
          3.5518e-01, -6.4391e-02, -3.9873e-02,  1.6867e-01,  3.2155e-02,
          1.1417e-01, -1.0575e-01,  5.6763e-02, -3.5571e-02, -4.0068e-02,
          2.1290e-02, -1.9877e-01,  1.2858e-01, -2.0315e-01,  4.0729e-02,
          3.9991e-01, -2.2667e-01, -2.4832e-02,  9.3125e-02, -1.3295e-01,
          4.4327e-04]], device='cuda:0') tensor(0.4221, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
30000 特征值优化 tensor(1.6715, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.4572e+00,  3.7269e+00, -6.0116e-01,  2.4574e+00,  1.8522e-01,
          1.0785e-01, -8.2401e-01,  9.8850e-01,  9.4001e-02, -6.3926e-02,
         -9.2946e-01, -2.1646e-01, -5.9355e-02, -6.0767e-01,  4.8923e-02,
         -1.6564e-01, -4.2510e-01,  3.9689e-01,  4.0209e-01, -6.6899e-01,
          4.3255e-02, -1.7513e-02,  6.0401e-02, -4.1982e-01, -4.2367e-01,
          5.8492e-02, -1.5667e-03, -1.4474e-03, -8.1722e-02, -2.0295e-01,
          3.6387e-02, -2.5777e-02,  1.5116e-01,  3.2746e-01, -2.1715e-01,
          2.3357e-01, -6.5231e-01, -1.9723e-01, -4.4312e-01, -5.4115e-01,
          4.6803e-01,  1.0408e-02,  2.2009e-02,  4.2251e-02,  6.1509e-01,
          2.3050e-01, -4.7773e-02, -2.7614e-02,  1.7408e-01,  4.9537e-02,
          1.0233e-01, -1.0766e-01,  4.2314e-02, -3.3974e-02, -2.4940e-02,
          1.6529e-02, -2.3938e-01,  1.2652e-01, -1.7111e-01,  4.5965e-02,
          3.6820e-01, -1.9551e-01, -3.4722e-02,  1.2475e-01, -1.3214e-01,
         -1.9012e-03]], device='cuda:0') tensor(0.3745, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
31000 特征值优化 tensor(1.6280, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.2246e+00,  3.7377e+00, -6.0052e-01,  2.4751e+00,  1.2418e-01,
          7.0997e-02, -9.1005e-01,  1.0840e+00,  6.0180e-02, -3.0801e-02,
         -9.5299e-01, -2.2552e-01, -1.2278e-01, -8.1008e-01,  3.7970e-02,
         -1.4946e-01, -3.5955e-01,  2.9859e-01,  3.9611e-01, -6.6236e-01,
          4.3716e-02, -1.5643e-02,  4.4697e-02, -3.3697e-01, -3.9990e-01,
          1.1374e-01, -1.4188e-03, -1.0763e-03, -7.9278e-02, -1.8185e-01,
          1.5996e-02, -7.4760e-03,  1.4003e-01,  2.9942e-01, -1.7768e-01,
          2.6272e-01, -6.1922e-01, -2.3588e-01, -4.3848e-01, -6.1932e-01,
          6.0565e-01,  1.1843e-02,  8.9295e-03,  3.4030e-02,  6.4336e-01,
          1.4090e-01, -3.1550e-02, -1.8442e-02,  1.7243e-01,  7.5418e-02,
          1.0103e-01, -9.3522e-02,  2.7829e-02, -2.8091e-02, -1.6329e-02,
          7.0415e-03, -2.5819e-01,  9.2226e-02, -1.4632e-01,  2.4272e-02,
          3.4514e-01, -1.7849e-01, -3.4378e-02,  1.2719e-01, -1.2008e-01,
         -1.6402e-02]], device='cuda:0') tensor(0.4395, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
32000 特征值优化 tensor(1.4757, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.8721e+00,  3.8244e+00, -6.4035e-01,  2.4791e+00,  5.5391e-02,
          3.3658e-02, -7.8992e-01,  1.0895e+00,  2.0444e-02, -9.5772e-03,
         -9.8343e-01, -1.9922e-01, -1.8041e-01, -1.1221e+00,  3.3355e-02,
         -1.0594e-01, -2.5769e-01,  2.0664e-01,  3.5656e-01, -6.8336e-01,
          4.9445e-02, -4.6726e-03,  2.2996e-02, -2.8512e-01, -3.4416e-01,
          1.5878e-01, -3.1100e-03, -2.2544e-04, -3.0643e-02, -2.1697e-01,
          1.1473e-02, -3.8131e-03,  1.4222e-01,  3.0092e-01, -1.6539e-01,
          2.2373e-01, -5.5314e-01, -2.8711e-01, -5.3573e-01, -6.6763e-01,
          7.8840e-01,  5.1075e-03,  7.1686e-03,  1.4112e-02,  6.0056e-01,
          1.1625e-01, -1.5446e-02, -6.9563e-03,  1.4430e-01,  1.6551e-01,
          8.8724e-02, -4.4745e-02,  1.6661e-02, -9.3916e-03, -3.5151e-03,
          1.5040e-03, -2.3681e-01,  8.0856e-03, -1.3428e-01,  5.1971e-02,
          3.1462e-01, -1.4533e-01, -3.4816e-02,  9.2880e-02, -1.3794e-01,
          2.1212e-02]], device='cuda:0') tensor(0.3884, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
33000 特征值优化 tensor(1.4620, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.6532e+00,  3.8420e+00, -6.4580e-01,  2.5417e+00,  2.4410e-02,
          1.4156e-02, -7.8811e-01,  1.1295e+00,  1.0642e-02, -3.7960e-03,
         -9.6807e-01, -2.1183e-01, -1.8965e-01, -1.2554e+00,  3.4344e-02,
         -8.5610e-02, -2.4540e-01,  1.9869e-01,  3.0860e-01, -6.9310e-01,
          4.7750e-02, -7.0365e-04,  1.3256e-02, -2.7020e-01, -2.9840e-01,
          2.0475e-01,  1.0326e-03, -1.3567e-03, -3.7264e-02, -2.1910e-01,
          4.5875e-03, -3.1668e-03,  1.5458e-01,  2.7837e-01, -1.4692e-01,
          2.2720e-01, -5.1802e-01, -2.8981e-01, -4.9993e-01, -6.7553e-01,
          8.1472e-01,  4.6887e-03,  3.6156e-03,  7.9970e-03,  6.0737e-01,
          4.3492e-02, -6.7333e-03, -1.8696e-03,  1.1392e-01,  1.7200e-01,
          9.4476e-02, -2.2761e-02,  8.8336e-03, -2.8466e-03, -2.7633e-03,
         -4.6088e-04, -2.3937e-01, -2.2402e-02, -1.1938e-01,  6.2947e-02,
          2.9191e-01, -1.5294e-01, -3.6125e-02,  7.8990e-02, -1.3121e-01,
          3.4517e-02]], device='cuda:0') tensor(0.4273, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
34000 特征值优化 tensor(1.4567, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.4321e+00,  3.8332e+00, -6.4766e-01,  2.6211e+00,  1.1396e-02,
          7.4265e-03, -7.8491e-01,  1.1374e+00,  5.0550e-03, -7.2669e-04,
         -9.6976e-01, -2.1629e-01, -2.0362e-01, -1.2915e+00,  3.4999e-02,
         -8.2571e-02, -2.3238e-01,  1.9586e-01,  2.9373e-01, -6.9394e-01,
          4.8410e-02, -1.9218e-03,  5.9673e-03, -2.6501e-01, -2.8462e-01,
          2.3753e-01, -8.5184e-05, -1.0279e-03, -4.3742e-02, -2.2014e-01,
          1.4789e-03, -1.8635e-03,  1.6062e-01,  2.6332e-01, -1.4827e-01,
          2.3728e-01, -4.7938e-01, -2.9330e-01, -4.7857e-01, -6.8269e-01,
          8.2599e-01,  4.8986e-03,  7.4454e-04,  3.2929e-03,  6.1405e-01,
         -2.8420e-03, -1.8978e-03, -8.3123e-04,  1.0223e-01,  1.7642e-01,
          8.8280e-02, -1.3126e-02,  3.4673e-03, -2.1430e-03, -2.4388e-03,
          7.9825e-04, -2.3463e-01, -3.5096e-02, -1.0359e-01,  5.7125e-02,
          2.9205e-01, -1.5952e-01, -3.6369e-02,  6.8619e-02, -1.1917e-01,
          2.7421e-02]], device='cuda:0') tensor(0.3000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
35000 特征值优化 tensor(1.4542, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.2106e+00,  3.8330e+00, -6.4756e-01,  2.6868e+00,  7.7334e-03,
          3.8803e-03, -7.9622e-01,  1.1315e+00,  3.8429e-03, -2.3508e-03,
         -9.7528e-01, -2.1975e-01, -2.1204e-01, -1.3181e+00,  3.4547e-02,
         -8.4317e-02, -2.2084e-01,  1.9628e-01,  2.8512e-01, -6.9491e-01,
          4.8432e-02, -2.0687e-04,  4.2174e-03, -2.6502e-01, -2.7580e-01,
          2.6684e-01, -1.0295e-03,  5.3013e-04, -4.6193e-02, -2.1588e-01,
          1.3066e-03, -2.7425e-04,  1.6587e-01,  2.5103e-01, -1.5342e-01,
          2.4778e-01, -4.4308e-01, -2.9451e-01, -4.5571e-01, -6.8986e-01,
          8.3711e-01,  5.2966e-03,  1.7525e-03,  2.7301e-03,  6.1764e-01,
         -4.6124e-02, -1.3739e-03, -1.3060e-03,  8.9696e-02,  1.7154e-01,
          7.8256e-02, -9.0052e-03,  2.7208e-03, -1.3134e-03, -1.2343e-03,
          1.2801e-03, -2.2913e-01, -3.9381e-02, -8.3709e-02,  4.5423e-02,
          2.9185e-01, -1.6163e-01, -3.0666e-02,  5.4927e-02, -1.0411e-01,
          1.6242e-02]], device='cuda:0') tensor(0.5000, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
36000 特征值优化 tensor(1.4535, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.9720e+00,  3.8462e+00, -6.5159e-01,  2.7458e+00,  6.5628e-03,
          2.7920e-03, -7.9763e-01,  1.1241e+00,  4.2660e-03, -4.7569e-03,
         -9.7758e-01, -2.2383e-01, -2.1396e-01, -1.3252e+00,  3.0967e-02,
         -8.4489e-02, -2.1283e-01,  2.0327e-01,  2.8191e-01, -6.9323e-01,
          4.7934e-02, -1.6860e-03,  5.3830e-03, -2.6919e-01, -2.7250e-01,
          3.0059e-01, -6.0937e-03, -1.3863e-04, -5.5554e-02, -2.1312e-01,
          2.5340e-03, -3.0524e-03,  1.7072e-01,  2.4625e-01, -1.5344e-01,
          2.5865e-01, -4.0282e-01, -2.9290e-01, -4.3848e-01, -6.9305e-01,
          8.4527e-01,  5.7293e-03,  1.3340e-03,  3.3754e-03,  6.1661e-01,
         -8.4979e-02, -1.4107e-03, -1.6575e-03,  8.6574e-02,  1.6508e-01,
          6.5786e-02, -1.0070e-02,  2.5563e-03, -1.3318e-03,  4.7805e-04,
         -3.2133e-03, -2.2774e-01, -3.4968e-02, -7.7097e-02,  4.1378e-02,
          2.8822e-01, -1.5960e-01, -3.2550e-02,  4.4880e-02, -9.7392e-02,
          5.9960e-03]], device='cuda:0') tensor(0.4403, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
37000 特征值优化 tensor(1.4511, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.7910e+00,  3.8586e+00, -6.4891e-01,  2.7916e+00,  4.5806e-03,
          2.0362e-03, -7.8763e-01,  1.1157e+00,  2.6948e-03, -1.5958e-03,
         -9.8488e-01, -2.2408e-01, -2.1347e-01, -1.3210e+00,  3.3435e-02,
         -8.1258e-02, -2.0752e-01,  2.0183e-01,  2.7687e-01, -6.9114e-01,
          4.8019e-02, -3.8444e-05,  3.5293e-03, -2.7086e-01, -2.6719e-01,
          3.2667e-01, -5.6173e-05, -1.7080e-04, -5.6400e-02, -2.0884e-01,
          1.2467e-03, -8.3529e-04,  1.7156e-01,  2.4749e-01, -1.5221e-01,
          2.6163e-01, -3.7176e-01, -2.7796e-01, -4.3051e-01, -6.9174e-01,
          8.5261e-01,  5.0544e-03,  9.1853e-04,  2.4943e-03,  6.1690e-01,
         -1.2305e-01, -1.7486e-03, -1.0338e-03,  8.1584e-02,  1.6255e-01,
          6.0922e-02, -8.2634e-03,  1.9365e-03, -9.6086e-04, -5.4533e-04,
          2.3895e-05, -2.2521e-01, -3.3706e-02, -7.3670e-02,  3.8300e-02,
          2.8686e-01, -1.6095e-01, -3.5691e-02,  3.8669e-02, -9.6402e-02,
          9.2444e-04]], device='cuda:0') tensor(0.5285, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
38000 特征值优化 tensor(12.5337, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0142e+00,  3.0830e+00,  2.1130e+00,  1.2956e+00,  7.7934e-01,
          2.7029e-01, -9.7158e-02, -2.2939e-01,  2.2520e-02, -8.7876e-01,
         -9.2806e-02, -1.0633e+00,  3.4296e-01, -2.6558e-01, -1.5495e-01,
         -5.0617e-02,  1.7645e-01,  9.5921e-01, -3.8680e-01,  5.0829e-02,
          3.6520e-01, -7.4248e-01, -6.7189e-02, -1.1559e-01,  6.7409e-02,
         -6.4819e-02,  7.7417e-01, -1.8109e-01, -2.1960e-01, -2.9795e-01,
         -1.6779e+00, -5.3966e-01, -1.4516e-02,  2.3672e-01,  9.4808e-02,
         -7.1579e-02, -1.7560e-01,  3.7262e-01, -9.6337e-01,  5.6351e-01,
         -7.7358e-01,  3.2064e-01,  1.3089e-03, -2.1064e-01, -8.8658e-01,
          5.2080e-01, -3.6173e-01,  4.5765e-03, -4.1581e-01,  4.9995e-02,
         -3.3397e-02, -1.5636e-01,  4.6640e-01,  1.0330e+00,  4.9538e-01,
         -5.1010e-04,  1.3037e-01,  1.5184e+00, -7.6770e-02, -4.9218e-01,
         -2.5743e-01, -2.0811e-01, -2.6633e-01,  1.2489e-01,  3.8502e-01,
          3.4809e-01]], device='cuda:0') tensor(0.3997, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
39000 特征值优化 tensor(4.6118, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.0692e-01,  3.5599e+00,  2.6359e+00,  2.0264e+00,  3.1202e-01,
         -4.1223e-02, -8.1939e-02, -1.0371e-02, -2.2134e-01, -6.5141e-01,
          2.5626e-01, -5.8572e-01,  4.6067e-01, -1.6723e-01,  4.5154e-02,
          1.3153e-01, -1.2577e-02,  3.4497e-01, -3.5233e-02,  1.5449e-02,
         -4.0472e-02, -2.0968e-01, -1.1991e-01, -1.5949e-01, -3.6928e-02,
         -6.3583e-01,  1.3425e-01, -5.1124e-02,  3.3949e-03,  5.4000e-02,
         -9.8496e-01, -9.6670e-02, -1.1370e-01,  1.7228e-01,  2.9495e-01,
         -2.0854e-01, -7.3140e-02,  4.4223e-01, -4.6629e-01,  7.2650e-01,
         -4.4132e-01, -2.9557e-01, -8.1496e-03,  1.2346e-01, -5.9478e-01,
          7.5964e-01, -6.2208e-02, -5.8850e-03, -6.3417e-02, -5.7768e-02,
          5.9490e-04,  2.4877e-02,  1.7171e-01,  4.4082e-01,  5.1115e-02,
         -1.1880e-01,  2.0310e-01,  8.7518e-01,  1.9077e-02, -3.0287e-01,
         -3.3415e-01, -9.5239e-02, -1.0184e-01,  2.8093e-02,  1.9971e-01,
          2.4780e-01]], device='cuda:0') tensor(0.2641, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
40000 特征值优化 tensor(1.9793, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.2644e-01,  3.6800e+00,  2.3865e+00,  2.7762e+00,  1.6170e-01,
         -1.0850e-01, -1.8783e-02,  2.5613e-02, -1.9848e-01, -1.0590e+00,
          8.1318e-01,  7.4025e-02,  5.1130e-02, -3.3054e-01, -3.1748e-02,
          4.5221e-02, -1.0109e-01,  4.3402e-03, -6.8464e-03,  2.2928e-01,
          2.8073e-02, -7.8152e-02,  3.1857e-02, -3.4743e-02, -3.9952e-03,
         -7.2545e-01,  3.3613e-03, -1.1141e-02, -2.3950e-03,  1.3745e-02,
         -5.5126e-01,  3.3787e-02, -8.9277e-02,  2.2308e-01,  4.2379e-01,
         -6.8146e-04, -3.9228e-02,  1.5224e-01, -7.9132e-02,  8.3070e-01,
          1.4553e-02, -4.5683e-01, -2.0628e-01,  2.7882e-01, -7.1639e-01,
          4.2126e-01, -4.5402e-02,  1.2783e-02,  7.8114e-03,  2.4438e-02,
         -4.7783e-03,  5.8166e-04, -1.5485e-01,  2.2859e-01, -6.0937e-02,
         -9.4616e-03,  2.1104e-01,  3.8108e-01,  5.3148e-02, -2.2288e-01,
         -4.7826e-01,  4.5493e-02, -1.0120e-01,  2.7034e-02, -5.6188e-02,
          2.1268e-01]], device='cuda:0') tensor(0.3109, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
41000 特征值优化 tensor(1.7975, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.1197e-01,  3.6510e+00,  2.1294e+00,  2.9637e+00,  8.3827e-02,
         -5.0320e-02,  6.6727e-03,  8.0569e-03, -2.4925e-01, -1.2701e+00,
          8.3074e-01,  3.0591e-01,  5.8043e-02, -3.6617e-01, -3.2023e-02,
          2.1138e-02, -5.6213e-02, -8.2389e-03, -4.8426e-02,  2.8387e-01,
          4.3446e-02, -1.5772e-02,  1.0838e-01, -3.5430e-03,  1.6708e-02,
         -7.1300e-01,  6.6942e-04, -6.4833e-03,  3.0796e-03,  3.3191e-03,
         -4.1499e-01,  1.2813e-02, -1.1290e-01,  2.8725e-01,  4.2186e-01,
          6.1939e-03, -2.3863e-02,  4.6420e-02, -3.2447e-02,  8.7676e-01,
         -7.8591e-02, -4.3729e-01, -1.9901e-01,  3.6267e-01, -7.1796e-01,
          4.2653e-01, -2.1124e-02,  6.7353e-03,  9.3948e-03,  2.0288e-02,
         -1.9278e-03, -1.8070e-03, -1.9745e-01,  2.0759e-01, -4.9967e-02,
          3.6570e-02,  2.5760e-01,  2.0981e-01,  2.0771e-02, -1.5490e-01,
         -4.4737e-01,  1.8230e-02, -9.1273e-02,  5.0858e-02, -4.7840e-02,
          1.7889e-01]], device='cuda:0') tensor(0.3283, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
42000 正交保障 tensor(0.3776, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.2957e-01,  3.6462e+00,  1.8312e+00,  3.0909e+00,  4.8673e-02,
         -3.2295e-02,  1.3340e-02,  6.7441e-04, -2.5080e-01, -1.3030e+00,
          8.0548e-01,  4.0395e-01,  9.4184e-02, -5.2156e-01, -3.2413e-02,
          1.0601e-02, -3.1598e-02, -2.8577e-02, -1.0357e-01,  3.1462e-01,
          3.8800e-02,  3.9876e-02,  1.5289e-01, -2.1149e-03,  8.5701e-02,
         -7.0490e-01, -1.0533e-03, -2.4632e-03,  7.4053e-03, -9.1827e-05,
         -3.3290e-01,  8.4582e-03, -1.0476e-01,  3.2952e-01,  4.2772e-01,
          2.8648e-02, -2.3225e-02,  2.5111e-02, -1.9272e-02,  8.7765e-01,
         -1.7299e-01, -3.9083e-01, -1.8590e-01,  3.7601e-01, -7.1755e-01,
          4.7927e-01, -1.1407e-02,  4.0429e-03,  4.9264e-03,  1.6195e-02,
         -3.3216e-03,  3.9470e-04, -2.1562e-01,  2.0470e-01, -5.2956e-02,
          4.6500e-02,  2.7843e-01,  1.3203e-01,  1.6532e-02, -9.1494e-02,
         -4.1666e-01,  2.1992e-02, -9.0112e-02,  1.0502e-01, -1.5329e-02,
          2.0563e-01]], device='cuda:0') tensor(0.3776, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
43000 特征值优化 tensor(1.7196, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.1305e-01,  3.6715e+00,  1.4987e+00,  3.1547e+00,  2.4231e-02,
         -1.4283e-02,  7.2450e-03,  4.5467e-03, -2.4350e-01, -1.2718e+00,
          7.7312e-01,  4.6087e-01,  1.3843e-01, -6.7834e-01, -3.5918e-02,
          5.6977e-03, -1.7346e-02, -4.5697e-02, -1.6042e-01,  3.6617e-01,
          3.9025e-02,  6.4003e-02,  1.7345e-01,  1.3465e-02,  1.4645e-01,
         -6.8652e-01,  4.3115e-04, -2.7799e-03,  3.0375e-03,  2.3642e-03,
         -2.8661e-01,  1.0610e-02, -8.6570e-02,  3.7042e-01,  4.1527e-01,
          3.5930e-02, -2.0921e-02,  1.3306e-02, -1.2277e-02,  8.6443e-01,
         -2.5075e-01, -3.3502e-01, -1.6950e-01,  3.7916e-01, -7.0771e-01,
          5.0999e-01, -7.1665e-03,  3.1019e-03,  1.3510e-03,  8.4433e-03,
         -3.5484e-03,  8.8923e-04, -2.2190e-01,  1.9705e-01, -6.1742e-02,
          4.4012e-02,  2.9580e-01,  7.4171e-02, -1.5736e-02, -2.7154e-02,
         -3.9562e-01,  1.6228e-02, -8.4750e-02,  1.5180e-01, -2.2967e-02,
          2.3100e-01]], device='cuda:0') tensor(0.3255, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
44000 特征值优化 tensor(1.7085, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.1106e-01,  3.7499e+00,  1.2425e+00,  3.1537e+00,  1.8687e-02,
         -1.3755e-02,  8.3328e-03,  1.1865e-03, -2.4778e-01, -1.2233e+00,
          7.5330e-01,  4.8552e-01,  1.7228e-01, -7.0969e-01, -3.5703e-02,
          6.7607e-03, -1.4473e-02, -6.5873e-02, -1.9150e-01,  4.1168e-01,
          3.8298e-02,  8.1276e-02,  1.8334e-01,  4.4966e-02,  1.7332e-01,
         -6.8160e-01,  5.0905e-04, -5.6893e-04,  4.1906e-03, -9.3815e-04,
         -2.5553e-01,  5.9701e-03, -9.6612e-02,  3.8030e-01,  4.0734e-01,
          3.3560e-02, -2.1052e-02,  1.2058e-02, -9.2625e-03,  8.5732e-01,
         -2.8587e-01, -2.9388e-01, -1.4811e-01,  3.6594e-01, -6.9106e-01,
          4.8399e-01, -4.3215e-03,  4.4860e-04,  1.2382e-03,  6.1500e-03,
         -2.4714e-03, -6.1764e-04, -2.2421e-01,  1.7441e-01, -7.6445e-02,
          4.1458e-02,  3.1360e-01,  4.0563e-02, -1.0481e-02,  6.5300e-03,
         -3.9870e-01,  9.8299e-03, -7.6549e-02,  1.7716e-01, -3.1325e-02,
          2.3674e-01]], device='cuda:0') tensor(0.3554, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
45000 特征值优化 tensor(1.7022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.0897e-01,  3.8565e+00,  9.7778e-01,  3.1453e+00,  1.6623e-02,
         -1.4029e-02,  9.6123e-03,  2.8586e-03, -2.4933e-01, -1.1523e+00,
          7.5112e-01,  4.8477e-01,  1.8515e-01, -6.9856e-01, -3.5701e-02,
          3.3830e-03, -1.6076e-02, -7.7945e-02, -2.0550e-01,  4.5500e-01,
          3.7970e-02,  8.4955e-02,  1.8391e-01,  5.8711e-02,  1.9144e-01,
         -6.8330e-01, -1.4260e-03, -2.4417e-03,  2.9689e-03,  9.3179e-04,
         -2.3874e-01,  2.2939e-03, -1.0807e-01,  3.9699e-01,  4.0109e-01,
          3.3625e-02, -2.0446e-02,  1.1442e-02, -1.2854e-02,  8.5169e-01,
         -3.1812e-01, -2.5032e-01, -1.2698e-01,  3.4286e-01, -6.8651e-01,
          4.6939e-01, -4.3979e-03,  1.1088e-03,  2.2734e-03,  5.1747e-03,
         -4.4211e-03,  1.0257e-03, -2.2123e-01,  1.6062e-01, -8.3532e-02,
          3.8915e-02,  3.1756e-01,  1.2183e-02, -2.8252e-03,  3.4425e-02,
         -3.9706e-01, -5.4315e-03, -7.2988e-02,  1.9514e-01, -3.8008e-02,
          2.4218e-01]], device='cuda:0') tensor(0.4354, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
46000 特征值优化 tensor(1.6979, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.0742e-01,  3.9590e+00,  7.1324e-01,  3.1385e+00,  1.5815e-02,
         -1.2461e-02,  8.3807e-03,  3.7435e-03, -2.3840e-01, -1.0789e+00,
          7.4178e-01,  4.8420e-01,  1.9151e-01, -6.9292e-01, -3.6161e-02,
          6.0476e-03, -1.6461e-02, -8.0712e-02, -2.1746e-01,  4.9642e-01,
          3.5225e-02,  8.0565e-02,  1.7536e-01,  6.3065e-02,  2.0564e-01,
         -6.8155e-01,  1.7035e-03, -1.8305e-03,  4.4570e-03,  1.8670e-03,
         -2.2507e-01,  1.8416e-03, -1.1177e-01,  4.0522e-01,  3.9674e-01,
          3.0401e-02, -2.0582e-02,  1.1532e-02, -1.4291e-02,  8.5510e-01,
         -3.5892e-01, -2.0726e-01, -1.1471e-01,  3.2539e-01, -6.8761e-01,
          4.5860e-01, -4.1028e-03,  8.7778e-04,  3.7867e-03,  5.6886e-03,
         -2.7421e-03, -4.7855e-04, -2.1565e-01,  1.5002e-01, -7.7955e-02,
          3.2172e-02,  3.1691e-01,  1.6445e-03,  6.4886e-03,  4.9971e-02,
         -4.0091e-01, -1.5757e-02, -7.1935e-02,  2.0907e-01, -3.9424e-02,
          2.4319e-01]], device='cuda:0') tensor(0.3976, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
47000 特征值优化 tensor(1.6942, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.0879e-01,  4.0442e+00,  4.5996e-01,  3.1395e+00,  1.5711e-02,
         -1.3876e-02,  1.1127e-02,  3.4067e-03, -2.3271e-01, -9.9315e-01,
          7.3508e-01,  4.8561e-01,  1.9259e-01, -6.9311e-01, -3.5916e-02,
          5.9738e-03, -1.8578e-02, -7.9900e-02, -2.2552e-01,  5.3356e-01,
          3.2606e-02,  7.5848e-02,  1.6757e-01,  6.3301e-02,  2.1717e-01,
         -6.8156e-01,  7.5680e-04, -2.1729e-03,  4.4610e-03,  2.6902e-03,
         -2.0944e-01,  3.8169e-03, -1.1403e-01,  4.1108e-01,  3.9668e-01,
          2.4998e-02, -2.1879e-02,  1.1999e-02, -1.7703e-02,  8.5197e-01,
         -4.0202e-01, -1.6814e-01, -1.0172e-01,  3.0998e-01, -6.8505e-01,
          4.5985e-01, -4.0444e-03,  1.2605e-03,  4.2679e-03,  4.9109e-03,
         -2.5636e-03, -7.9611e-04, -2.1036e-01,  1.3753e-01, -7.4458e-02,
          2.8303e-02,  3.1512e-01, -5.9661e-03,  1.6804e-02,  5.9062e-02,
         -4.0250e-01, -2.2395e-02, -6.8602e-02,  2.1996e-01, -4.3593e-02,
          2.4383e-01]], device='cuda:0') tensor(0.3351, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
48000 特征值优化 tensor(1.6904, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.0745e-01,  4.1240e+00,  2.3691e-01,  3.1342e+00,  1.8166e-02,
         -1.4235e-02,  1.2659e-02,  7.5012e-03, -2.2439e-01, -8.9823e-01,
          7.4472e-01,  4.8783e-01,  2.0648e-01, -6.9615e-01, -3.5773e-02,
          9.9180e-03, -2.2339e-02, -8.3362e-02, -2.2807e-01,  5.6862e-01,
          3.1401e-02,  7.0287e-02,  1.5931e-01,  6.2354e-02,  2.2298e-01,
         -6.7929e-01,  3.8486e-04, -2.5406e-03,  4.7084e-03,  2.9684e-03,
         -2.0302e-01,  6.8324e-03, -1.2162e-01,  4.1366e-01,  3.9114e-01,
          2.3158e-02, -2.0547e-02,  1.6810e-02, -2.2072e-02,  8.4795e-01,
         -4.3738e-01, -1.3211e-01, -8.8036e-02,  2.8687e-01, -6.8486e-01,
          4.5692e-01, -4.0142e-03,  1.2916e-03,  6.3727e-03,  6.1843e-03,
         -3.5098e-03, -1.9995e-03, -2.0074e-01,  1.2585e-01, -6.4778e-02,
          2.4616e-02,  3.1290e-01, -1.6493e-02,  2.4379e-02,  6.8437e-02,
         -4.0112e-01, -2.4972e-02, -6.3295e-02,  2.3028e-01, -4.4613e-02,
          2.4781e-01]], device='cuda:0') tensor(0.3777, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
49000 特征值优化 tensor(1.6877, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.0790e-01,  4.1914e+00,  4.6459e-02,  3.1278e+00,  2.2415e-02,
         -1.9277e-02,  1.7476e-02,  9.1652e-03, -2.2222e-01, -8.1154e-01,
          7.5872e-01,  4.9483e-01,  2.1647e-01, -6.9249e-01, -3.5031e-02,
          1.3449e-02, -3.2515e-02, -8.0066e-02, -2.3096e-01,  5.9683e-01,
          2.8961e-02,  6.9586e-02,  1.4844e-01,  5.6967e-02,  2.2741e-01,
         -6.7868e-01,  1.6583e-03, -4.3909e-03,  8.2758e-03,  4.7142e-03,
         -1.9688e-01,  2.8615e-03, -1.2146e-01,  4.1330e-01,  3.8263e-01,
          1.6240e-02, -2.0739e-02,  2.1694e-02, -3.3483e-02,  8.5576e-01,
         -4.7378e-01, -1.0289e-01, -7.6730e-02,  2.6904e-01, -6.8890e-01,
          4.5907e-01, -5.6731e-03,  1.5078e-03,  9.6472e-03,  8.1187e-03,
         -4.4103e-03, -1.6650e-03, -1.8885e-01,  1.1529e-01, -5.4425e-02,
          2.2824e-02,  3.0067e-01, -2.0149e-02,  2.9708e-02,  7.0444e-02,
         -3.9901e-01, -3.3106e-02, -5.6527e-02,  2.3808e-01, -4.0969e-02,
          2.4787e-01]], device='cuda:0') tensor(0.4119, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
50000 特征值优化 tensor(11.4284, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5531,  2.0216, -0.6904, -0.3441,  0.1709,  0.8157, -0.2931, -0.2002,
          0.4545,  0.2192,  0.4202, -1.4666,  0.9439,  1.2326,  0.3168,  0.0781,
         -0.3659,  0.3176, -0.1913,  0.5489,  0.1003,  0.2511,  0.0299, -0.2586,
         -0.1400,  0.5217, -0.0503, -0.6840, -0.1145, -0.5789,  0.8799,  0.0227,
         -0.2927, -0.2524,  0.1506,  0.6478, -0.1204, -0.2454,  0.0296, -0.1149,
          0.1734,  0.0086,  0.0082,  0.2665,  0.7156,  0.5631, -0.0257, -0.7972,
          0.2521,  0.4538, -0.2077,  0.1566, -0.5019,  0.0252,  0.1138, -0.0415,
         -0.3671, -0.0362, -0.4461, -0.0576,  0.2115,  0.5045, -0.4618,  0.0639,
          0.6364, -0.2729]], device='cuda:0') tensor(0.3878, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
51000 特征值优化 tensor(5.1714, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.6501,  3.0193,  0.1152,  0.6032,  0.2587,  0.9971, -0.0384,  0.0612,
          0.0417,  0.0854,  0.1130, -1.1582,  0.8696,  1.1386,  0.6040,  0.0645,
         -0.2686, -0.0257, -0.1429,  0.2363,  0.3029,  0.1514,  0.0053, -0.1095,
         -0.2826,  0.3464, -0.0089, -0.2006,  0.1976, -0.1435,  0.5621,  0.1702,
         -0.1823, -0.2160, -0.0654,  0.3021, -0.0495,  0.0657,  0.0292,  0.0323,
         -0.2274,  0.0275,  0.3583,  0.3289,  0.4196,  0.4812, -0.0727, -0.3940,
          0.0610,  0.1922, -0.1822,  0.1396, -0.0298,  0.1244,  0.0234, -0.1556,
         -0.0104,  0.0374, -0.2510,  0.1338, -0.0519,  0.1599, -0.1452,  0.1845,
          0.2148, -0.2514]], device='cuda:0') tensor(0.3501, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
52000 特征值优化 tensor(3.9710, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.9971e+00,  3.5952e+00,  7.4486e-01,  1.2436e+00,  1.3226e-01,
          9.4432e-01, -7.7209e-02,  6.4903e-04, -4.0298e-02, -7.2022e-02,
          1.9545e-01, -9.9501e-01,  1.0844e+00,  1.1697e+00,  6.1884e-01,
          2.4297e-01, -8.7259e-02, -4.3614e-01, -2.2358e-01,  4.1224e-01,
          5.8748e-01,  1.7929e-01,  7.2864e-02,  8.8739e-02, -2.4358e-01,
          2.9241e-01,  1.7716e-03, -8.9765e-04,  1.6837e-01, -1.2127e-01,
          3.9088e-01,  1.6888e-01, -1.2751e-01, -2.0259e-01, -1.6184e-01,
          1.9962e-01, -6.2257e-02,  1.7463e-01,  3.5268e-01,  1.4357e-01,
         -2.1517e-01,  1.6401e-01,  1.8258e-01,  2.2414e-01, -1.6289e-02,
          5.7064e-01, -3.6277e-02, -2.3736e-01,  1.3167e-01,  5.1815e-02,
         -1.8474e-01,  1.2272e-01,  6.2095e-02,  1.0410e-01, -3.2161e-02,
         -1.5734e-01,  5.3966e-02,  3.2467e-02, -2.4024e-01,  1.1690e-01,
          3.0123e-02,  1.0709e-01, -1.3900e-02,  8.5405e-02, -5.4655e-02,
         -3.1795e-01]], device='cuda:0') tensor(0.2691, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
53000 特征值优化 tensor(3.5304, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.0382e+00,  3.9568e+00,  1.1222e+00,  1.6025e+00, -3.3137e-02,
          8.2784e-01, -4.0672e-01,  1.5095e-01,  8.2365e-02, -2.0544e-01,
          2.6580e-01, -7.8121e-01,  1.3571e+00,  1.4075e+00,  6.6038e-01,
          2.2203e-01, -1.9137e-01, -7.0108e-01, -2.2305e-01,  3.7653e-01,
          6.0534e-01,  5.2735e-02,  2.6075e-01,  1.4980e-01, -2.1794e-01,
          2.3431e-01,  2.8956e-02, -2.2457e-02, -3.4819e-02, -5.7603e-02,
          2.7342e-01,  4.3973e-02, -1.8341e-01, -1.0872e-01, -1.4200e-01,
          9.0858e-02, -1.5796e-01,  1.4105e-01,  6.9578e-01,  8.3446e-02,
         -1.8101e-01,  1.0212e-01,  2.4185e-01,  1.0945e-01, -1.7532e-01,
          7.3994e-01, -1.8022e-03, -1.9955e-01,  2.7768e-01, -2.2570e-02,
         -9.9727e-02,  1.0705e-01, -2.5957e-02,  2.3857e-01, -9.4036e-02,
         -9.9340e-02,  1.1981e-01,  1.0390e-02, -2.5312e-01,  6.3160e-04,
         -8.9424e-02,  1.1023e-01,  1.4311e-01, -3.2697e-02, -1.2688e-01,
         -2.6943e-01]], device='cuda:0') tensor(0.2209, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
54000 特征值优化 tensor(3.4847, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.0795e+00,  4.0698e+00,  1.2589e+00,  1.5809e+00, -4.1810e-02,
          8.1843e-01, -4.5419e-01,  2.2768e-01,  2.1102e-01, -2.6302e-01,
          3.3104e-01, -7.1023e-01,  1.4336e+00,  1.3572e+00,  6.8121e-01,
          2.6295e-01, -2.1095e-01, -7.8713e-01, -1.6724e-01,  3.6916e-01,
          6.1089e-01,  7.6983e-03,  3.0099e-01,  2.0577e-01, -2.6573e-01,
          2.3261e-01,  1.6950e-02, -4.1099e-02, -6.2931e-02, -4.0719e-02,
          2.2223e-01,  1.0229e-02, -1.9636e-01, -7.3676e-02, -1.5980e-01,
          3.8722e-02, -1.4971e-01,  1.9580e-01,  6.8734e-01,  3.8120e-02,
         -1.4904e-01,  7.5791e-02,  2.4192e-01,  1.0985e-01, -2.0099e-01,
          7.6599e-01,  6.0836e-03, -1.9651e-01,  2.7064e-01,  4.2154e-02,
         -7.8379e-02,  1.0476e-01, -1.5231e-02,  2.5929e-01, -6.0064e-02,
         -8.2985e-02,  1.1629e-01, -3.6554e-02, -2.2090e-01, -2.6990e-02,
         -1.3238e-01,  1.2913e-01,  1.6157e-01,  2.1200e-03, -1.0750e-01,
         -2.5204e-01]], device='cuda:0') tensor(0.2505, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
55000 特征值优化 tensor(3.4739, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.0820e+00,  4.1604e+00,  1.3320e+00,  1.5134e+00, -3.8880e-02,
          8.2464e-01, -4.5286e-01,  2.7613e-01,  3.4091e-01, -3.0439e-01,
          3.2806e-01, -6.7335e-01,  1.4524e+00,  1.3422e+00,  6.8276e-01,
          2.6956e-01, -1.9579e-01, -8.3220e-01, -1.4661e-01,  3.4794e-01,
          6.1702e-01, -1.9031e-02,  3.3058e-01,  2.4353e-01, -2.8485e-01,
          2.3873e-01,  1.3138e-02, -4.3624e-02, -7.6505e-02, -3.1618e-02,
          1.9336e-01, -4.9963e-03, -1.7756e-01, -5.7981e-02, -1.6847e-01,
          1.7644e-02, -1.4958e-01,  2.1284e-01,  6.7589e-01,  8.8612e-03,
         -1.0257e-01,  5.9071e-02,  2.1086e-01,  1.0714e-01, -1.8678e-01,
          7.2854e-01,  4.0929e-03, -1.9966e-01,  2.6470e-01,  7.0584e-02,
         -6.8729e-02,  1.0663e-01, -9.7010e-03,  2.6445e-01, -2.1798e-02,
         -7.0727e-02,  1.0491e-01, -4.8301e-02, -2.0991e-01, -3.3636e-02,
         -1.5058e-01,  1.2669e-01,  1.6601e-01,  2.4379e-02, -8.8215e-02,
         -2.5407e-01]], device='cuda:0') tensor(0.2622, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
56000 特征值优化 tensor(3.4671, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.0934e+00,  4.2455e+00,  1.3851e+00,  1.4444e+00, -3.5646e-02,
          8.2039e-01, -4.5721e-01,  3.1183e-01,  4.4125e-01, -3.0795e-01,
          3.1382e-01, -6.5104e-01,  1.4579e+00,  1.3324e+00,  6.8342e-01,
          2.7369e-01, -1.7061e-01, -8.6671e-01, -1.3838e-01,  3.2460e-01,
          6.2284e-01, -4.4215e-02,  3.5193e-01,  2.7106e-01, -2.9461e-01,
          2.3953e-01,  8.6722e-03, -4.4694e-02, -8.9446e-02, -2.5307e-02,
          1.6997e-01, -1.5807e-02, -1.5401e-01, -4.9451e-02, -1.6928e-01,
          6.2605e-03, -1.5331e-01,  2.3458e-01,  6.9288e-01, -1.3338e-02,
         -5.3709e-02,  5.0222e-02,  1.7545e-01,  1.1048e-01, -1.7216e-01,
          6.7393e-01,  2.1646e-03, -1.9995e-01,  2.5022e-01,  9.8295e-02,
         -5.6498e-02,  1.1030e-01,  5.4971e-04,  2.5264e-01,  4.3259e-03,
         -6.0982e-02,  1.0027e-01, -5.6609e-02, -2.0859e-01, -3.6016e-02,
         -1.6212e-01,  1.2286e-01,  1.6939e-01,  3.9040e-02, -7.0860e-02,
         -2.4871e-01]], device='cuda:0') tensor(0.2823, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
57000 正交保障 tensor(0.2929, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.0980e+00,  4.3248e+00,  1.3949e+00,  1.3828e+00, -3.3073e-02,
          8.1492e-01, -4.5266e-01,  3.3799e-01,  5.1548e-01, -2.9641e-01,
          2.9301e-01, -6.3281e-01,  1.4515e+00,  1.3210e+00,  6.8411e-01,
          2.6759e-01, -1.5061e-01, -9.0371e-01, -1.3420e-01,  3.0320e-01,
          6.2883e-01, -5.7687e-02,  3.6841e-01,  2.9967e-01, -2.9946e-01,
          2.4425e-01,  2.0814e-03, -4.7824e-02, -9.8876e-02, -2.0267e-02,
          1.5083e-01, -2.1196e-02, -1.3111e-01, -4.3173e-02, -1.6870e-01,
          4.3779e-03, -1.5282e-01,  2.4889e-01,  7.0680e-01, -4.0702e-02,
         -1.0717e-02,  4.8494e-02,  1.3129e-01,  1.1540e-01, -1.5361e-01,
          6.1975e-01,  2.8451e-03, -1.9997e-01,  2.4767e-01,  1.1423e-01,
         -4.3179e-02,  1.1609e-01,  3.7830e-03,  2.3574e-01,  2.1096e-02,
         -5.4838e-02,  9.8116e-02, -6.0713e-02, -2.0590e-01, -3.9395e-02,
         -1.6951e-01,  1.2273e-01,  1.6501e-01,  5.1104e-02, -6.8897e-02,
         -2.3832e-01]], device='cuda:0') tensor(0.2929, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
58000 特征值优化 tensor(3.4591, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.0939e+00,  4.3856e+00,  1.4090e+00,  1.3349e+00, -3.2113e-02,
          8.0057e-01, -4.5823e-01,  3.4706e-01,  5.5478e-01, -2.8468e-01,
          2.7484e-01, -6.2821e-01,  1.4357e+00,  1.3102e+00,  6.8364e-01,
          2.6464e-01, -1.3241e-01, -9.2942e-01, -1.2940e-01,  2.8452e-01,
          6.3253e-01, -6.7263e-02,  3.8074e-01,  3.2293e-01, -3.0470e-01,
          2.4837e-01,  2.5135e-03, -4.7650e-02, -1.0680e-01, -2.0611e-02,
          1.3402e-01, -2.9400e-02, -1.1255e-01, -3.9796e-02, -1.6252e-01,
          7.8720e-03, -1.5212e-01,  2.6507e-01,  7.2577e-01, -6.1781e-02,
          3.1303e-02,  4.8732e-02,  1.0495e-01,  1.2087e-01, -1.3338e-01,
          5.6970e-01,  3.8782e-04, -1.9644e-01,  2.4275e-01,  1.1998e-01,
         -3.7334e-02,  1.1722e-01,  7.3780e-03,  2.2020e-01,  2.8870e-02,
         -5.1797e-02,  9.9734e-02, -6.3440e-02, -2.0534e-01, -4.2140e-02,
         -1.7410e-01,  1.2404e-01,  1.6344e-01,  5.3746e-02, -6.6924e-02,
         -2.2860e-01]], device='cuda:0') tensor(0.2558, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
59000 特征值优化 tensor(3.4559, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.0924e+00,  4.4537e+00,  1.4215e+00,  1.2856e+00, -2.6392e-02,
          7.8277e-01, -4.6562e-01,  3.6193e-01,  6.0556e-01, -2.6312e-01,
          2.5796e-01, -6.3123e-01,  1.4132e+00,  1.2975e+00,  6.8143e-01,
          2.6016e-01, -1.0977e-01, -9.5640e-01, -1.2078e-01,  2.5517e-01,
          6.3478e-01, -7.9815e-02,  3.9395e-01,  3.4769e-01, -3.1482e-01,
          2.5669e-01, -1.3533e-03, -4.8816e-02, -1.1492e-01, -1.9773e-02,
          1.1823e-01, -3.7948e-02, -1.0009e-01, -3.9199e-02, -1.5011e-01,
          1.9586e-02, -1.5246e-01,  2.7425e-01,  7.5025e-01, -9.3779e-02,
          6.5138e-02,  4.7229e-02,  7.7232e-02,  1.2695e-01, -1.0128e-01,
          5.2362e-01, -8.5795e-04, -1.9208e-01,  2.3995e-01,  1.3200e-01,
         -2.9224e-02,  1.1730e-01,  1.7642e-02,  1.9353e-01,  3.8156e-02,
         -4.6140e-02,  1.0413e-01, -6.5697e-02, -2.0418e-01, -4.4773e-02,
         -1.7669e-01,  1.2968e-01,  1.6049e-01,  6.0569e-02, -5.8673e-02,
         -2.0858e-01]], device='cuda:0') tensor(0.2880, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
60000 特征值优化 tensor(3.4531, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.0769e+00,  4.5224e+00,  1.4374e+00,  1.2485e+00, -2.1875e-02,
          7.6353e-01, -4.6727e-01,  3.8069e-01,  6.2970e-01, -2.4797e-01,
          2.5179e-01, -6.3636e-01,  1.3869e+00,  1.2821e+00,  6.7602e-01,
          2.5475e-01, -9.1171e-02, -9.7800e-01, -1.1443e-01,  2.2918e-01,
          6.3717e-01, -8.1611e-02,  4.0308e-01,  3.6406e-01, -3.2515e-01,
          2.6740e-01, -6.1281e-03, -4.7784e-02, -1.1981e-01, -1.5697e-02,
          1.0843e-01, -4.3505e-02, -9.3019e-02, -3.5212e-02, -1.3469e-01,
          3.1655e-02, -1.4840e-01,  2.8064e-01,  7.6109e-01, -1.2020e-01,
          9.2744e-02,  4.5316e-02,  5.7539e-02,  1.2435e-01, -7.8083e-02,
          4.7561e-01, -2.3220e-04, -1.8702e-01,  2.4127e-01,  1.3691e-01,
         -1.8288e-02,  1.2010e-01,  2.4603e-02,  1.7114e-01,  4.4234e-02,
         -4.4033e-02,  1.1205e-01, -6.7180e-02, -2.0389e-01, -4.6992e-02,
         -1.7526e-01,  1.3450e-01,  1.6381e-01,  6.2311e-02, -5.4293e-02,
         -1.9303e-01]], device='cuda:0') tensor(0.2745, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
61000 特征值优化 tensor(27.9528, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5980,  0.4053,  0.5025, -0.7369, -1.1088, -0.4544,  0.4196, -0.7505,
         -0.0165, -0.2703, -0.4823,  0.8129,  2.0837, -0.3118,  0.9823,  0.4446,
          0.9186, -0.3731, -0.1025, -0.4816,  0.1618, -0.4082, -1.1257,  0.0854,
         -0.1531,  0.0266,  0.6560,  0.6467, -0.2984, -1.3933, -1.3167,  0.9083,
          0.7023, -0.2768, -1.2348, -0.0862, -0.0267, -0.3042,  0.8667, -0.0328,
          1.0806, -0.7445,  0.1920, -0.0573,  0.2292,  1.4987,  0.1901, -0.3584,
          0.2593,  1.3049, -0.5387, -0.6907, -0.6178,  0.8623, -0.2806,  0.4115,
         -0.2088,  1.4386, -0.4592, -0.3861,  1.4324,  0.0740, -0.3590, -2.4418,
          0.9352,  0.5188]], device='cuda:0') tensor(0.8508, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
62000 正交保障 tensor(0.4318, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1920,  1.4456,  1.3574,  0.2664, -0.2985,  0.0653,  0.1954, -0.4504,
          0.0259, -0.4011, -0.5750,  0.2503,  1.1793,  0.3914,  0.2489,  0.1548,
          0.2372, -0.2467,  0.0063,  0.2492, -0.0269,  0.1616, -0.4026,  0.3162,
         -0.1337,  0.0307, -0.0037,  0.0570,  0.0906, -0.5199, -0.5912,  0.2384,
          0.2885,  0.0419, -0.3887,  0.0062, -0.2953, -0.1249,  0.1501,  0.1965,
          0.5478, -0.4195,  0.2898,  0.3193,  0.2293,  0.7202,  0.1348, -0.0079,
          0.1020,  0.4714, -0.0979, -0.0433, -0.0444,  0.1704,  0.0204,  0.1018,
          0.0640,  0.7065, -0.4408, -0.2242,  0.5972, -0.2799, -0.1617, -1.4349,
          0.2199,  0.3310]], device='cuda:0') tensor(0.4318, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
63000 特征值优化 tensor(4.1355, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.4237,  2.4686,  2.1026,  1.2164,  0.0450,  0.2782, -0.0121, -0.1874,
          0.3552, -0.5123, -0.3868,  0.3397,  0.8232,  0.6302,  0.1096,  0.2156,
          0.2468, -0.7402,  0.0231,  0.3480, -0.1061,  0.0219, -0.2783,  0.6952,
         -0.0812, -0.0957, -0.0188, -0.0159,  0.1557, -0.1863, -0.4139,  0.1972,
          0.2526, -0.0982, -0.2240,  0.1794, -0.4616, -0.1011, -0.1453,  0.2142,
          0.5812, -0.5657,  0.0897,  0.1495,  0.1776,  0.3206,  0.0305, -0.0737,
          0.1428,  0.1843, -0.1974,  0.0606, -0.1063, -0.0183, -0.0806,  0.1304,
          0.0157,  0.5033, -0.2916, -0.2289,  0.3205, -0.2175, -0.0420, -0.7177,
          0.0686, -0.0205]], device='cuda:0') tensor(0.4181, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
64000 特征值优化 tensor(3.3784, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.3885,  3.1247,  2.5116,  1.7524, -0.0726,  0.4326,  0.0371, -0.1376,
          0.2899, -0.6838, -0.3660,  0.3986,  0.8656,  0.7211,  0.1536,  0.2693,
          0.1840, -0.9822, -0.0326,  0.4881, -0.0563, -0.1314, -0.3370,  0.9243,
         -0.0561, -0.0984, -0.0340,  0.0091,  0.1742, -0.1458, -0.2528,  0.1811,
          0.1863, -0.0897, -0.2642,  0.2509, -0.4194, -0.1820, -0.1320,  0.1517,
          0.5101, -0.6081,  0.0357,  0.0531,  0.2138,  0.3369,  0.0501, -0.1069,
          0.2012,  0.1300, -0.2694,  0.0699, -0.0612, -0.1063, -0.0594,  0.1759,
         -0.0850,  0.3928, -0.2481, -0.1955,  0.2515, -0.2563,  0.0201, -0.4728,
          0.0729,  0.0594]], device='cuda:0') tensor(0.2827, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
65000 正交保障 tensor(0.3883, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 8.1859e-01,  3.4389e+00,  2.7563e+00,  1.9727e+00, -1.6024e-01,
          3.7792e-01, -1.8499e-02, -2.3967e-02,  4.0023e-01, -7.8035e-01,
         -2.9127e-01,  5.2580e-01,  8.9803e-01,  6.6067e-01,  6.0491e-02,
          2.5250e-01,  9.1247e-02, -1.0337e+00, -2.1696e-02,  4.8739e-01,
         -3.9514e-02, -1.7759e-01, -3.5608e-01,  9.7972e-01, -5.0300e-02,
         -1.3981e-02, -4.8488e-02,  1.2056e-02,  1.7225e-01, -1.0935e-01,
         -1.4577e-01,  2.0644e-01,  1.5809e-01, -3.8360e-02, -2.6626e-01,
          2.2574e-01, -3.7584e-01, -1.5601e-01, -1.6750e-01,  1.0545e-01,
          5.2485e-01, -6.4288e-01, -8.6593e-02,  8.4486e-03,  1.8047e-01,
          2.8687e-01,  5.6975e-02, -9.3314e-02,  1.6665e-01,  8.4500e-02,
         -2.7746e-01,  8.3039e-02, -2.2361e-03, -1.4971e-01, -7.6370e-02,
          1.9865e-01, -1.6047e-01,  2.9880e-01, -1.7811e-01, -1.8647e-01,
          2.1926e-01, -2.7248e-01,  1.0595e-01, -4.6819e-01,  1.0230e-01,
          1.5108e-01]], device='cuda:0') tensor(0.3883, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
66000 特征值优化 tensor(3.1416, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.5594e-01,  3.6195e+00,  2.8406e+00,  2.0768e+00, -1.4608e-01,
          2.9611e-01, -6.3168e-02,  9.0385e-02,  4.9594e-01, -7.7070e-01,
         -1.9534e-01,  6.3059e-01,  9.4910e-01,  6.2131e-01,  3.2229e-02,
          1.9260e-01,  6.7710e-02, -1.0195e+00, -1.4767e-02,  4.6603e-01,
         -1.9286e-02, -1.4138e-01, -4.3973e-01,  9.6665e-01, -5.6990e-02,
          7.5343e-02, -4.9609e-02, -1.5461e-03,  1.7853e-01, -8.0106e-02,
         -9.9240e-02,  2.2061e-01,  1.3665e-01,  1.6361e-02, -2.9271e-01,
          1.8963e-01, -2.8494e-01, -1.6729e-01, -2.4274e-01,  6.9778e-02,
          5.7206e-01, -6.5213e-01, -1.0360e-01,  1.4669e-02,  1.8175e-01,
          1.7709e-01,  5.5306e-02, -6.8424e-02,  9.4957e-02,  4.4603e-02,
         -2.5840e-01,  9.7559e-02,  1.9992e-04, -1.7479e-01, -8.3949e-02,
          1.9389e-01, -2.1701e-01,  2.2739e-01, -1.0865e-01, -1.6968e-01,
          1.8819e-01, -2.8986e-01,  1.0486e-01, -4.9951e-01,  1.0366e-01,
          2.2230e-01]], device='cuda:0') tensor(0.3416, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
67000 特征值优化 tensor(3.0610, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-2.2440e-01,  3.7585e+00,  2.6541e+00,  2.2084e+00, -8.8089e-02,
          1.5198e-01, -1.6290e-01,  1.9345e-01,  5.5103e-01, -6.5225e-01,
         -1.1952e-01,  7.7748e-01,  1.0020e+00,  5.8191e-01,  4.5473e-03,
          1.2169e-01,  8.8731e-02, -9.7791e-01, -1.6283e-03,  4.4968e-01,
         -1.2270e-02, -2.0507e-02, -5.1203e-01,  9.3277e-01, -6.4795e-02,
          1.7359e-01, -5.1487e-02, -2.5001e-02,  1.3050e-01, -6.1941e-02,
         -1.1069e-01,  2.1232e-01,  1.5513e-01,  7.2887e-02, -2.8199e-01,
          1.0578e-01, -1.8633e-01, -1.7051e-01, -2.4902e-01,  5.4027e-02,
          5.8535e-01, -6.3800e-01, -8.0133e-02,  3.9378e-02,  2.0708e-01,
         -7.0006e-03,  4.0784e-02, -2.7629e-02,  3.1150e-02,  4.5034e-02,
         -1.9922e-01,  1.1243e-01,  1.1616e-03, -1.9891e-01, -1.0777e-01,
          1.6492e-01, -2.2336e-01,  1.3092e-01, -6.2166e-02, -1.4498e-01,
          1.4957e-01, -3.3104e-01,  6.9841e-02, -5.1950e-01,  1.2728e-01,
          2.8680e-01]], device='cuda:0') tensor(0.3417, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
68000 特征值优化 tensor(3.0196, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4753,  3.8342,  2.5414,  2.2878, -0.0156,  0.0577, -0.2714,  0.1634,
          0.6391, -0.5453, -0.1068,  0.8885,  1.0685,  0.5710, -0.0082,  0.0636,
          0.0661, -0.9480,  0.0239,  0.4325, -0.0046,  0.0987, -0.5065,  0.9081,
         -0.0936,  0.2314, -0.0528, -0.0238,  0.0575, -0.0581, -0.1272,  0.1841,
          0.1978,  0.0987, -0.2019,  0.0739, -0.1275, -0.1623, -0.2134,  0.0887,
          0.5454, -0.6394, -0.0348,  0.0774,  0.1709, -0.0624,  0.0228, -0.0068,
          0.0329,  0.0303, -0.1474,  0.1085, -0.0333, -0.2408, -0.1403,  0.1360,
         -0.1922,  0.0443, -0.0664, -0.1319,  0.1469, -0.3606,  0.0110, -0.5055,
          0.1532,  0.3280]], device='cuda:0') tensor(0.3882, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
69000 正交保障 tensor(0.3606, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.6513e-01,  3.9191e+00,  2.4891e+00,  2.3093e+00,  1.2702e-02,
          1.6721e-02, -3.1216e-01,  1.1789e-01,  6.9348e-01, -4.8096e-01,
         -1.1331e-01,  9.7553e-01,  1.1336e+00,  5.2672e-01, -1.2700e-02,
          3.5360e-02,  5.5135e-02, -9.2536e-01,  6.3020e-02,  4.1839e-01,
         -1.1302e-03,  1.5266e-01, -5.0712e-01,  8.8304e-01, -1.3414e-01,
          2.4842e-01, -5.2543e-02, -2.2280e-02,  3.0174e-02, -7.1009e-02,
         -1.2972e-01,  1.5793e-01,  2.0778e-01,  1.0921e-01, -1.6186e-01,
          5.7101e-02, -1.0579e-01, -1.7349e-01, -1.9045e-01,  1.0013e-01,
          5.1937e-01, -6.3794e-01, -1.1184e-02,  1.0870e-01,  1.4838e-01,
         -7.4788e-02,  1.4950e-02,  3.6664e-03,  2.9969e-02,  2.0901e-02,
         -1.2785e-01,  1.0786e-01, -4.4015e-02, -2.4853e-01, -1.5749e-01,
          1.2132e-01, -1.6214e-01, -8.9706e-03, -8.0012e-02, -1.2554e-01,
          1.4623e-01, -3.5619e-01,  2.2164e-03, -4.8916e-01,  1.3091e-01,
          3.4133e-01]], device='cuda:0') tensor(0.3606, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
70000 特征值优化 tensor(2.9974, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.9048e-01,  3.9681e+00,  2.4744e+00,  2.3082e+00,  2.4032e-02,
         -1.6202e-02, -3.3258e-01,  9.0285e-02,  7.3572e-01, -4.6458e-01,
         -1.3307e-01,  1.0449e+00,  1.1671e+00,  4.8295e-01, -1.2807e-02,
          1.0509e-02,  5.0543e-02, -9.0201e-01,  9.5735e-02,  4.1786e-01,
          6.2539e-04,  1.7970e-01, -5.0793e-01,  8.5869e-01, -1.7019e-01,
          2.7275e-01, -5.2180e-02, -2.0634e-02,  9.6923e-03, -6.4558e-02,
         -1.1898e-01,  1.3824e-01,  2.0776e-01,  1.0412e-01, -1.4761e-01,
          3.9110e-02, -1.0046e-01, -1.7723e-01, -1.8279e-01,  1.0634e-01,
          5.3295e-01, -6.3281e-01,  5.8682e-03,  1.5260e-01,  1.3063e-01,
         -9.5281e-02,  1.2415e-02,  9.3182e-03,  2.9137e-02,  8.0250e-03,
         -1.0823e-01,  9.9299e-02, -5.3914e-02, -2.4888e-01, -1.7063e-01,
          1.1829e-01, -1.3739e-01, -3.7078e-02, -8.7812e-02, -1.2143e-01,
          1.4503e-01, -3.3252e-01,  6.6362e-03, -4.7773e-01,  8.9395e-02,
          3.4243e-01]], device='cuda:0') tensor(0.3376, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
71000 特征值优化 tensor(2.9931, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.9864e-01,  4.0342e+00,  2.4551e+00,  2.2736e+00,  1.8675e-02,
         -3.4652e-02, -3.4303e-01,  8.3604e-02,  7.6789e-01, -4.7138e-01,
         -1.3966e-01,  1.0839e+00,  1.1919e+00,  4.5374e-01, -1.3418e-02,
          6.6067e-03,  5.5633e-02, -8.7222e-01,  1.1643e-01,  4.1714e-01,
          1.7538e-03,  1.8481e-01, -5.0313e-01,  8.2894e-01, -1.9158e-01,
          2.8596e-01, -4.9047e-02, -1.8253e-02, -2.2085e-03, -5.6452e-02,
         -1.0087e-01,  1.2950e-01,  2.0761e-01,  1.0070e-01, -1.4162e-01,
          2.6785e-02, -9.8052e-02, -1.8161e-01, -1.7165e-01,  1.2201e-01,
          5.2099e-01, -6.3185e-01,  2.0945e-03,  1.7053e-01,  1.1055e-01,
         -9.2929e-02,  1.5767e-02,  1.6357e-02,  3.0649e-02,  1.0006e-04,
         -9.8327e-02,  9.0517e-02, -5.9921e-02, -2.4716e-01, -1.7901e-01,
          1.2041e-01, -1.2397e-01, -5.6020e-02, -8.8383e-02, -1.2750e-01,
          1.4104e-01, -3.1470e-01,  1.4247e-02, -4.7070e-01,  5.5147e-02,
          3.3940e-01]], device='cuda:0') tensor(0.4230, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
72000 特征值优化 tensor(2.9907, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.9110e-01,  4.1007e+00,  2.4585e+00,  2.2066e+00,  7.6103e-03,
         -4.3032e-02, -3.5915e-01,  9.0174e-02,  7.8546e-01, -4.7538e-01,
         -1.4472e-01,  1.1050e+00,  1.2037e+00,  4.3465e-01, -1.3689e-02,
          6.2957e-03,  6.3248e-02, -8.3798e-01,  1.3520e-01,  4.1669e-01,
          1.2719e-03,  1.8746e-01, -4.9054e-01,  7.9261e-01, -2.1205e-01,
          2.8766e-01, -4.9381e-02, -2.0496e-02, -7.6758e-03, -4.6366e-02,
         -8.8380e-02,  1.1901e-01,  2.0655e-01,  9.5533e-02, -1.3518e-01,
          2.7437e-02, -9.9988e-02, -1.9033e-01, -1.6789e-01,  1.4785e-01,
          5.0284e-01, -6.3151e-01, -1.2703e-03,  1.7661e-01,  8.9044e-02,
         -8.6561e-02,  1.8782e-02,  1.7535e-02,  3.2148e-02, -4.7844e-03,
         -9.7279e-02,  8.0183e-02, -6.7141e-02, -2.5144e-01, -1.8408e-01,
          1.2132e-01, -1.1827e-01, -6.5410e-02, -8.6634e-02, -1.3071e-01,
          1.3729e-01, -2.9599e-01,  2.1893e-02, -4.6758e-01,  3.9421e-02,
          3.4461e-01]], device='cuda:0') tensor(0.3389, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
73000 特征值优化 tensor(35.1790, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.4963,  0.4766,  0.1648,  0.1728,  0.4707,  0.2747,  0.2220,  1.0963,
          0.9899,  0.1539,  0.6202, -0.0086,  0.7915,  0.4017, -0.3785, -0.1026,
         -0.9305, -0.5910,  0.8053, -1.3216,  0.0553,  0.5202,  0.2008,  0.1094,
         -0.1507,  0.2408,  0.2573,  0.0937, -0.3490,  0.3145,  1.2620,  0.3707,
          0.8353,  0.4627, -0.1775,  0.3351, -0.9077, -0.1655, -0.0996,  0.2714,
          1.5113, -1.0754,  0.6370, -1.1486,  1.1491, -0.5222,  0.5835, -1.2291,
          0.8901,  0.9485, -0.2111,  0.5514,  1.4727, -1.0142, -0.9019, -1.9710,
          1.3050,  1.4116, -0.1000, -0.9333, -0.8232,  0.0818, -0.4059,  0.0494,
         -1.3097,  0.7344]], device='cuda:0') tensor(0.8992, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
74000 特征值优化 tensor(8.3183, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.4997,  1.9691,  1.4450,  1.3918, -0.0364,  0.8457, -0.2130,  0.3698,
          0.2489,  0.5716,  0.2262, -0.3118,  0.4149,  0.1853,  0.1346, -0.0618,
         -0.2640, -0.4561,  0.2628, -0.4466,  0.3037,  0.1656,  0.1029,  0.0990,
         -0.2928, -0.0919, -0.0642,  0.1467, -0.0479, -0.0093,  0.3709,  0.2489,
          0.2377,  0.0621,  0.1906, -0.2162, -0.1898,  0.3068,  0.2396, -0.0489,
          0.7814, -0.1385,  0.1424, -0.5210,  0.3944,  0.1872,  0.0744, -0.4906,
          0.1873,  0.2084,  0.0321,  0.1863,  0.5855, -0.3996, -0.1840, -0.9538,
          0.5970,  0.7014, -0.3158, -0.3746, -0.4967, -0.0930,  0.1342,  0.0773,
         -0.4966,  0.0723]], device='cuda:0') tensor(0.3720, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
75000 特征值优化 tensor(3.3659, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.6453e-01,  2.9773e+00,  2.2960e+00,  2.2119e+00, -1.6911e-01,
          8.0124e-01, -8.0066e-02,  6.2075e-01, -1.6702e-02,  5.4231e-01,
          7.6094e-01, -3.7249e-01,  7.3973e-02,  2.2676e-01,  4.4418e-02,
         -1.9699e-01, -1.8188e-01, -3.5302e-01,  2.7703e-01, -2.8687e-01,
          5.2986e-02,  2.9953e-01,  7.6372e-03,  2.5011e-01, -3.1106e-01,
         -2.4855e-03, -8.7634e-03, -1.4359e-02, -5.7633e-02,  1.5122e-01,
          1.5187e-01, -1.4807e-01,  1.3530e-01,  2.5940e-01,  2.5776e-01,
         -1.8047e-01, -2.9668e-01,  5.7496e-01, -1.0581e-01,  2.0164e-01,
          1.6174e-01, -4.3271e-01, -5.6774e-02, -5.4776e-01, -6.0795e-02,
          7.1163e-01,  4.0684e-02, -2.4072e-01,  1.3116e-01, -6.9590e-02,
          7.5009e-02,  1.1505e-01,  3.1870e-01,  1.3003e-02, -8.6563e-02,
         -3.8950e-01,  3.4034e-01,  3.4699e-01, -3.2216e-01, -2.4142e-01,
         -3.8416e-01,  1.8481e-01, -3.8262e-02,  3.0768e-01, -3.7155e-01,
         -2.5065e-01]], device='cuda:0') tensor(0.3088, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
76000 特征值优化 tensor(2.0739, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.1117e-02,  3.5886e+00,  2.9907e+00,  2.3250e+00, -1.3889e-01,
          6.8654e-01, -2.6824e-02,  3.8020e-01, -1.3193e-01,  5.2605e-01,
          7.4111e-01, -3.1207e-01,  1.9198e-01,  4.0702e-01,  9.1827e-02,
         -7.3957e-02, -1.3975e-01, -5.9966e-01,  2.0622e-01, -6.8800e-01,
          3.9787e-02,  4.1896e-01, -3.1020e-02,  4.9751e-01, -2.3388e-01,
         -3.0799e-02,  2.6002e-04,  1.6005e-02,  5.6298e-03,  1.8561e-01,
          2.0090e-01, -2.0323e-01,  1.0319e-01,  4.2380e-01,  2.1221e-01,
         -1.1321e-01, -3.7778e-02,  3.0092e-01, -8.0961e-02, -1.1913e-01,
         -1.0482e-01, -6.0111e-01, -1.9493e-01, -8.3376e-01,  1.7535e-01,
          8.5657e-01,  3.7821e-02, -1.7303e-01,  1.6959e-01, -2.2252e-02,
          9.7016e-03, -8.3884e-02,  1.8967e-01, -6.6840e-02, -4.7967e-02,
         -1.8885e-01,  3.1180e-01,  1.5645e-01, -2.6372e-01, -2.4130e-01,
         -4.7908e-01,  2.4799e-01, -1.0486e-01,  2.4877e-01, -1.9755e-01,
         -1.9999e-01]], device='cuda:0') tensor(0.3548, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
77000 特征值优化 tensor(1.8041, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.6258e-01,  3.8376e+00,  3.4239e+00,  2.1757e+00, -7.5015e-02,
          4.6488e-01,  3.0573e-02,  2.9167e-01, -2.4109e-01,  6.2964e-01,
          7.7867e-01, -3.0133e-01,  2.1224e-01,  4.3907e-01,  5.3108e-02,
         -3.9060e-02, -5.8221e-02, -6.6450e-01,  7.0807e-02, -7.1633e-01,
          4.8740e-02,  5.0722e-01, -9.5393e-02,  6.6442e-01, -1.2100e-01,
          1.1311e-02, -9.2128e-03,  4.2122e-03,  1.3390e-02,  1.4226e-01,
          2.3089e-01, -2.1654e-01,  1.0569e-01,  4.2654e-01,  2.0036e-01,
         -6.7351e-02, -1.0082e-02,  1.6149e-01, -4.6964e-03, -2.6845e-01,
          1.1093e-01, -6.7083e-01, -1.2630e-01, -8.1193e-01,  3.3166e-01,
          7.0709e-01,  2.0785e-02, -1.1341e-01,  1.1111e-01,  2.6757e-02,
         -2.0765e-03, -6.2767e-02,  1.1639e-01, -1.1605e-01,  2.7096e-04,
         -7.7429e-02,  3.1513e-01,  5.4451e-02, -2.0653e-01, -2.6172e-01,
         -4.7797e-01,  2.2784e-01, -1.1969e-01,  1.3578e-01, -1.6597e-01,
         -1.2753e-01]], device='cuda:0') tensor(0.4471, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
78000 特征值优化 tensor(1.7356, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.2155e-01,  4.0930e+00,  3.5792e+00,  1.9497e+00, -5.6436e-02,
          3.5349e-01,  3.3496e-02,  2.2661e-01, -3.5278e-01,  6.2604e-01,
          8.5566e-01, -3.3803e-01,  2.4283e-01,  4.3831e-01,  4.3709e-02,
         -3.0914e-02, -1.6084e-02, -7.3324e-01,  1.9625e-02, -7.1075e-01,
          4.3643e-02,  5.6865e-01, -1.2199e-01,  7.4738e-01, -7.0073e-02,
          2.6650e-02, -4.0627e-03,  2.7681e-03,  1.2319e-02,  1.1298e-01,
          2.1521e-01, -2.1650e-01,  7.9826e-02,  4.0595e-01,  1.8574e-01,
         -6.1098e-02,  5.5444e-03,  1.1511e-01,  1.4081e-02, -3.3316e-01,
          3.3622e-01, -6.8411e-01, -5.9586e-02, -7.3390e-01,  3.6903e-01,
          5.1500e-01,  1.4511e-02, -8.6377e-02,  6.2194e-02,  2.8049e-02,
         -5.5070e-03, -5.5064e-02,  7.0387e-02, -1.5812e-01,  1.2382e-02,
         -6.8931e-02,  3.0050e-01,  4.0958e-02, -2.0579e-01, -2.4194e-01,
         -4.3681e-01,  2.0883e-01, -8.8746e-02,  1.2639e-01, -1.6618e-01,
         -1.2279e-01]], device='cuda:0') tensor(0.3744, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
79000 正交保障 tensor(0.3927, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.4561e-01,  4.3100e+00,  3.6297e+00,  1.7406e+00, -4.1346e-02,
          3.3095e-01,  1.9487e-02,  2.1704e-01, -5.1456e-01,  5.7544e-01,
          9.0494e-01, -3.5296e-01,  2.5078e-01,  4.5068e-01,  3.8775e-02,
         -2.3788e-02,  7.9081e-03, -7.5780e-01, -3.1981e-03, -6.9752e-01,
          4.7767e-02,  5.7976e-01, -9.1890e-02,  7.7082e-01, -4.5595e-02,
          2.8147e-02, -3.5884e-03,  2.7945e-03,  7.9665e-03,  1.1326e-01,
          1.9055e-01, -2.1834e-01,  8.1349e-02,  4.0070e-01,  1.5787e-01,
         -7.5113e-02,  2.8517e-03,  1.1657e-01,  1.4785e-02, -3.5162e-01,
          4.7077e-01, -6.8667e-01,  1.0295e-02, -6.6842e-01,  3.7683e-01,
          3.9545e-01,  1.0251e-02, -7.9417e-02,  5.1726e-02,  2.7356e-02,
         -2.6140e-03, -5.4882e-02,  5.9919e-02, -1.8835e-01,  8.8328e-03,
         -8.3217e-02,  2.7325e-01,  3.8085e-02, -2.1205e-01, -2.0429e-01,
         -3.9990e-01,  1.8743e-01, -5.9972e-02,  1.2377e-01, -1.5658e-01,
         -1.3190e-01]], device='cuda:0') tensor(0.3927, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
80000 特征值优化 tensor(1.6828, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-6.1623e-01,  4.5568e+00,  3.5666e+00,  1.5306e+00, -3.5265e-02,
          3.5504e-01,  1.0238e-02,  2.4234e-01, -6.6859e-01,  5.2647e-01,
          9.5529e-01, -3.5430e-01,  2.6626e-01,  4.7786e-01,  4.2683e-02,
         -2.1302e-02,  2.2852e-02, -7.7368e-01, -1.9290e-02, -6.8313e-01,
          4.8359e-02,  5.7014e-01, -6.7737e-02,  7.8450e-01, -2.4083e-02,
          1.7608e-02, -6.5581e-03,  3.1201e-03,  5.2139e-03,  1.2714e-01,
          1.6007e-01, -2.1749e-01,  7.6744e-02,  3.8098e-01,  1.2421e-01,
         -8.5663e-02,  7.6425e-03,  1.2665e-01,  1.8845e-02, -3.7816e-01,
          5.8527e-01, -6.7666e-01,  4.3996e-02, -5.9821e-01,  3.8157e-01,
          2.9768e-01,  8.7864e-03, -8.6383e-02,  4.3804e-02,  2.1503e-02,
         -1.1562e-03, -6.1575e-02,  4.6343e-02, -2.0214e-01,  1.0500e-02,
         -8.9502e-02,  2.4690e-01,  3.5465e-02, -2.1242e-01, -1.8919e-01,
         -3.5227e-01,  1.7330e-01, -3.9821e-02,  1.1602e-01, -1.4331e-01,
         -1.4703e-01]], device='cuda:0') tensor(0.4846, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
81000 特征值优化 tensor(1.6529, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.9961e-01,  4.7810e+00,  3.3842e+00,  1.3446e+00, -3.0973e-02,
          3.7560e-01,  6.3366e-03,  2.6359e-01, -7.8208e-01,  5.1119e-01,
          9.8706e-01, -3.4277e-01,  2.9139e-01,  5.3577e-01,  4.4445e-02,
         -2.1062e-02,  4.8826e-02, -7.6729e-01, -2.3486e-02, -6.4903e-01,
          4.8024e-02,  5.6326e-01, -6.0722e-02,  7.8565e-01, -1.7460e-02,
          1.9030e-02, -7.1403e-03,  1.9594e-03,  3.5779e-03,  1.3696e-01,
          1.3041e-01, -2.1916e-01,  7.4833e-02,  3.6512e-01,  8.3163e-02,
         -5.8558e-02,  1.0299e-02,  1.4562e-01,  4.5603e-02, -3.8169e-01,
          6.6693e-01, -6.4887e-01,  2.8315e-02, -5.1875e-01,  3.7803e-01,
          2.0993e-01,  7.4986e-03, -9.1723e-02,  4.3666e-02,  1.7265e-02,
          1.9144e-03, -6.6449e-02,  2.8525e-02, -2.1209e-01,  1.7670e-02,
         -8.6475e-02,  2.2414e-01,  9.9934e-03, -1.8122e-01, -1.8570e-01,
         -2.9928e-01,  1.5261e-01, -3.9296e-02,  1.1670e-01, -1.3864e-01,
         -1.4408e-01]], device='cuda:0') tensor(0.3981, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
82000 特征值优化 tensor(1.6440, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.8650e-01,  4.9509e+00,  3.1542e+00,  1.2169e+00, -2.4290e-02,
          3.7133e-01,  1.6216e-03,  2.6965e-01, -8.5769e-01,  4.9312e-01,
          1.0193e+00, -3.4113e-01,  3.0597e-01,  5.2660e-01,  4.3085e-02,
         -1.8960e-02,  6.6383e-02, -7.6045e-01, -2.3036e-02, -6.1714e-01,
          4.6156e-02,  5.5656e-01, -4.6188e-02,  7.8287e-01, -1.6039e-02,
          1.8708e-02, -4.6422e-03,  1.9476e-03, -7.2215e-04,  1.4092e-01,
          1.0609e-01, -2.1453e-01,  7.0852e-02,  3.5452e-01,  6.2683e-02,
         -6.2344e-02,  1.0771e-02,  1.4768e-01,  5.3990e-02, -3.7275e-01,
          6.8459e-01, -6.0714e-01,  2.9448e-02, -4.4661e-01,  3.6962e-01,
          1.6289e-01,  4.9158e-03, -9.0283e-02,  3.6388e-02,  1.8176e-02,
          4.2573e-03, -6.8086e-02,  1.9827e-02, -2.1685e-01,  1.7975e-02,
         -8.5054e-02,  2.0285e-01,  9.0766e-03, -1.7529e-01, -1.6097e-01,
         -2.7979e-01,  1.4707e-01, -3.0770e-02,  1.1392e-01, -1.2907e-01,
         -1.3000e-01]], device='cuda:0') tensor(0.3880, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
83000 特征值优化 tensor(1.6401, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.8280e-01,  5.0448e+00,  2.9976e+00,  1.1615e+00, -1.8613e-02,
          3.7268e-01,  1.0990e-03,  2.7329e-01, -9.1240e-01,  4.8041e-01,
          1.0400e+00, -3.3926e-01,  3.2068e-01,  5.1904e-01,  4.3176e-02,
         -1.6849e-02,  7.9928e-02, -7.6076e-01, -1.9359e-02, -5.9374e-01,
          4.7963e-02,  5.5148e-01, -3.2649e-02,  7.8293e-01, -1.9851e-02,
          1.9636e-02, -9.0425e-04,  1.5680e-03, -3.5889e-04,  1.4311e-01,
          9.5952e-02, -2.0750e-01,  6.2360e-02,  3.4714e-01,  4.9300e-02,
         -6.8246e-02,  1.0597e-02,  1.4684e-01,  5.3161e-02, -3.7005e-01,
          6.8816e-01, -5.7714e-01,  2.7414e-02, -4.1155e-01,  3.6612e-01,
          1.4091e-01,  5.0325e-03, -8.6397e-02,  2.9841e-02,  1.6954e-02,
          4.3017e-03, -7.0303e-02,  1.7280e-02, -2.1482e-01,  1.5215e-02,
         -7.7364e-02,  1.9104e-01,  5.5819e-03, -1.7253e-01, -1.5260e-01,
         -2.6934e-01,  1.5521e-01, -2.6119e-02,  1.1435e-01, -1.2949e-01,
         -1.3101e-01]], device='cuda:0') tensor(0.4467, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
84000 特征值优化 tensor(1.6391, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.8099e-01,  5.1043e+00,  2.8961e+00,  1.1375e+00, -1.6256e-02,
          3.6660e-01, -4.8951e-03,  2.7582e-01, -9.6015e-01,  4.6337e-01,
          1.0534e+00, -3.3938e-01,  3.2388e-01,  5.1034e-01,  4.3646e-02,
         -1.7039e-02,  8.9353e-02, -7.5714e-01, -1.5560e-02, -5.7612e-01,
          4.4787e-02,  5.4719e-01, -1.7810e-02,  7.7910e-01, -2.3999e-02,
          1.6365e-02, -3.0199e-03,  1.4935e-03, -2.4294e-03,  1.4543e-01,
          9.5102e-02, -2.0071e-01,  6.3457e-02,  3.4232e-01,  3.9973e-02,
         -7.2767e-02,  1.1076e-02,  1.4246e-01,  5.5206e-02, -3.6889e-01,
          6.7686e-01, -5.6373e-01,  2.5163e-02, -3.8359e-01,  3.6671e-01,
          1.3357e-01,  2.4073e-03, -8.8659e-02,  2.4420e-02,  1.7654e-02,
          5.1652e-03, -7.1027e-02,  1.0749e-02, -2.1137e-01,  1.6896e-02,
         -7.0947e-02,  1.8275e-01, -6.0799e-04, -1.7199e-01, -1.5062e-01,
         -2.6145e-01,  1.6112e-01, -1.9126e-02,  1.1427e-01, -1.2546e-01,
         -1.3203e-01]], device='cuda:0') tensor(0.4668, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
85000 特征值优化 tensor(30.2986, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.7520,  0.3189,  0.8940,  0.5218, -0.2822, -0.9415,  0.5380, -0.4161,
         -0.1902, -0.6289, -0.1902, -0.9883,  0.7323,  0.3334,  0.2300, -0.1706,
         -1.8775,  1.0796, -0.5014, -0.1246, -0.0741, -1.4725,  0.2915, -0.0331,
          0.4361, -0.9129, -1.0770,  0.4019,  0.1212, -1.2264, -0.3566, -0.7771,
          0.5564, -0.3117, -0.5541, -0.4759,  1.2702,  2.3097, -0.5551,  0.5257,
         -0.3565, -0.1048,  0.4302, -0.2943, -0.7530,  1.1905,  0.9536,  0.2165,
         -0.3881, -1.5836, -0.4428, -1.2056, -0.1618,  0.7490, -0.4983,  1.2417,
          0.3509,  0.3682,  0.0851,  1.4891, -1.4662,  0.5614,  0.2593, -0.2935,
          0.2635, -2.1423]], device='cuda:0') tensor(0.8674, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
86000 特征值优化 tensor(7.8053, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.6385,  1.3364,  1.6070,  1.4900, -0.5086, -0.2691,  0.1538,  0.3094,
         -0.4930,  0.0436,  0.4346, -0.5822,  0.4427, -0.3101, -0.0397, -0.1911,
         -0.9222,  0.4710, -0.2231,  0.2875,  0.2826, -0.6173,  0.1370, -0.0784,
         -0.0048, -0.1527, -0.2388,  0.0320,  0.0697, -0.4029, -0.1041, -0.2148,
          0.0581,  0.0141,  0.0817, -0.0836,  0.3508,  1.3465,  0.1829,  0.1766,
         -0.1049, -0.0572,  0.3059,  0.2339, -0.2660,  0.3630,  0.3369,  0.1575,
         -0.0706, -0.6990, -0.0556, -0.4286, -0.1941,  0.0357,  0.0385,  0.3775,
          0.1836, -0.0712, -0.0215,  0.6141, -0.6535,  0.1864,  0.0646,  0.3547,
          0.0819, -1.1237]], device='cuda:0') tensor(0.3439, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
87000 正交保障 tensor(0.3119, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.0880,  2.2758,  1.5047,  2.3403, -0.5347, -0.2699,  0.4777,  0.4555,
         -0.5846,  0.2768,  0.5637, -0.4256, -0.0779, -0.0757,  0.4540, -0.1500,
         -0.4659,  0.1258, -0.2373,  0.2414,  0.5961, -0.2713, -0.0099, -0.4668,
         -0.1571, -0.0832,  0.0053,  0.0229,  0.0773, -0.2455, -0.1605,  0.0143,
         -0.1689, -0.1381,  0.2774,  0.0056, -0.2604,  0.8811,  0.2463, -0.0939,
          0.6607,  0.0272,  0.0121, -0.0592, -0.1230,  0.3826,  0.1401,  0.0863,
         -0.0931, -0.3843,  0.1013, -0.2955, -0.1812, -0.0334,  0.0172,  0.1018,
          0.2888, -0.1638,  0.1685,  0.4942, -0.4450,  0.1048,  0.1412,  0.3470,
         -0.0408, -0.5417]], device='cuda:0') tensor(0.3119, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
88000 正交保障 tensor(0.2578, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.2628e+00,  2.2783e+00,  1.0208e+00,  2.8004e+00, -4.6194e-01,
         -2.1506e-01,  4.3553e-01,  6.2637e-01, -5.8420e-01,  1.4401e-01,
          5.6343e-01, -4.8384e-01, -2.2872e-01, -1.3768e-01,  5.8009e-01,
         -2.7110e-01, -2.3650e-01,  1.3620e-01, -2.4024e-01,  3.7257e-01,
          5.8819e-01, -2.0467e-01, -6.1696e-02, -5.5638e-01, -1.8535e-01,
         -3.6746e-01,  1.2231e-02,  8.2332e-03,  1.1752e-01, -1.9497e-01,
         -1.6034e-01, -3.9500e-03, -2.0772e-01, -1.5450e-01,  2.8670e-01,
          1.0903e-02, -3.8444e-01,  7.5696e-01,  2.6626e-01, -1.9510e-01,
          8.4706e-01,  1.1565e-01, -5.3777e-02, -1.9775e-01, -9.0553e-02,
          1.2070e-01,  1.1669e-01,  5.8438e-02, -1.2501e-01, -3.4777e-01,
          1.0381e-01, -1.9946e-01, -2.2163e-01,  6.6587e-03, -1.1422e-03,
          5.9802e-02,  2.8391e-01, -1.4715e-01,  2.0180e-01,  4.7525e-01,
         -4.2432e-01,  1.0428e-01,  3.1382e-01,  3.5526e-01, -1.6314e-01,
         -4.3651e-01]], device='cuda:0') tensor(0.2578, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
89000 特征值优化 tensor(2.7588, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.4868,  1.8034,  0.5932,  3.4499, -0.7488, -0.3452,  0.1931,  0.7337,
         -0.2367, -0.0715,  0.6953, -0.6244, -0.0770, -0.1018,  0.5752, -0.3664,
         -0.0489,  0.0772, -0.3778, -0.1130,  0.6178, -0.1365, -0.0343, -0.5771,
         -0.0070, -0.7389,  0.0439,  0.0172,  0.2249, -0.1807, -0.1133, -0.0262,
         -0.1670, -0.1909,  0.2312, -0.0815, -0.4405,  0.6810,  0.1470, -0.0310,
          0.9794,  0.2345,  0.0067,  0.1824, -0.2672, -0.0630,  0.2092,  0.0932,
         -0.0216, -0.2492,  0.0607, -0.0800,  0.0380,  0.0411,  0.0718,  0.0098,
          0.1909, -0.1537,  0.1365,  0.4581, -0.4363,  0.2009,  0.1929,  0.3265,
         -0.1630, -0.0599]], device='cuda:0') tensor(0.2859, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
90000 特征值优化 tensor(2.6822, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.4058e+00,  1.5369e+00,  6.2049e-01,  3.7967e+00, -7.6012e-01,
         -3.4095e-01,  6.9031e-02,  7.6402e-01, -2.5625e-01, -1.4338e-01,
          7.0234e-01, -6.2774e-01, -1.4291e-01, -8.9775e-02,  5.7597e-01,
         -3.7965e-01,  2.7553e-02,  2.0891e-01, -4.0725e-01, -1.0567e-01,
          6.1888e-01, -1.0619e-01, -5.3689e-02, -7.3664e-01,  1.7553e-02,
         -7.2762e-01,  3.4808e-02,  1.4671e-02,  1.9635e-01, -1.9126e-01,
         -1.2518e-01, -6.8814e-02, -1.5466e-01, -1.7359e-01,  2.2237e-01,
         -7.6949e-02, -4.5370e-01,  6.0865e-01,  2.5167e-01,  2.9752e-03,
          7.8049e-01,  2.3399e-01, -1.6242e-02,  1.8546e-01, -2.7896e-01,
          8.3986e-02,  2.1548e-01,  9.2189e-02,  1.5482e-02, -2.1863e-01,
          3.0181e-02, -6.6179e-02,  8.8426e-02,  1.3038e-02,  7.4626e-02,
          3.0817e-02,  1.8809e-01, -1.4460e-01,  1.3659e-01,  4.1861e-01,
         -4.1595e-01,  2.0976e-01,  1.4871e-01,  2.7466e-01, -1.3900e-01,
          1.3642e-04]], device='cuda:0') tensor(0.2762, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
91000 正交保障 tensor(0.2374, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.2931e+00,  1.2290e+00,  6.4529e-01,  4.1830e+00, -7.5773e-01,
         -3.3074e-01, -5.3395e-02,  7.9889e-01, -2.6466e-01, -1.8771e-01,
          7.1982e-01, -6.4484e-01, -2.1388e-01, -9.7369e-02,  5.7823e-01,
         -4.0132e-01,  7.9330e-02,  2.9612e-01, -4.0753e-01, -8.5311e-02,
          6.1154e-01, -6.5167e-02, -7.5975e-02, -8.3704e-01,  1.1797e-02,
         -6.9002e-01,  3.2218e-02,  1.5117e-02,  1.4466e-01, -2.0252e-01,
         -1.2801e-01, -9.4289e-02, -1.5852e-01, -1.3760e-01,  2.1119e-01,
         -7.0962e-02, -4.3689e-01,  4.9352e-01,  2.4867e-01,  4.2212e-02,
          5.3944e-01,  2.3053e-01, -1.6262e-02,  1.7423e-01, -3.3894e-01,
          3.1939e-01,  2.1481e-01,  9.0642e-02,  2.9309e-02, -1.9253e-01,
          3.9814e-02, -5.7254e-02,  8.5735e-02,  1.2785e-03,  7.1336e-02,
          4.6584e-02,  1.6564e-01, -1.4348e-01,  1.3405e-01,  3.8323e-01,
         -3.7318e-01,  2.0755e-01,  1.3707e-01,  2.8510e-01, -1.1604e-01,
         -2.0176e-03]], device='cuda:0') tensor(0.2374, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
92000 正交保障 tensor(0.2443, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.1522e+00,  9.6677e-01,  6.8180e-01,  4.5041e+00, -7.6156e-01,
         -3.2615e-01, -1.0929e-01,  8.4105e-01, -2.5997e-01, -2.1269e-01,
          7.2032e-01, -6.2880e-01, -2.8695e-01, -1.2788e-01,  5.8190e-01,
         -3.9540e-01,  1.0144e-01,  3.3580e-01, -3.9812e-01, -7.9158e-02,
          6.0651e-01, -4.3749e-02, -9.9081e-02, -9.0164e-01,  4.2242e-03,
         -6.7493e-01,  3.1661e-02,  1.6691e-02,  1.0726e-01, -2.0576e-01,
         -1.2749e-01, -1.0930e-01, -1.7146e-01, -1.0664e-01,  1.9939e-01,
         -6.3486e-02, -4.1025e-01,  3.9175e-01,  2.1988e-01,  6.4641e-02,
          3.7545e-01,  2.2453e-01, -1.6958e-02,  1.7494e-01, -3.7253e-01,
          4.7267e-01,  2.1372e-01,  9.1033e-02,  3.0525e-02, -1.7143e-01,
          4.5685e-02, -4.5499e-02,  7.2948e-02,  1.6935e-03,  7.1032e-02,
          5.2661e-02,  1.4821e-01, -1.4244e-01,  1.1977e-01,  3.4464e-01,
         -3.2370e-01,  1.9532e-01,  1.2434e-01,  2.7988e-01, -9.6771e-02,
         -3.4677e-03]], device='cuda:0') tensor(0.2443, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
93000 特征值优化 tensor(2.5521, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.0633,  0.7178,  0.7042,  4.8461, -0.7507, -0.3184, -0.1469,  0.8579,
         -0.2568, -0.2336,  0.6972, -0.6314, -0.3504, -0.1700,  0.5855, -0.3819,
          0.1216,  0.3434, -0.3697, -0.0692,  0.6062, -0.0287, -0.1214, -0.9597,
         -0.0139, -0.7066,  0.0289,  0.0124,  0.0733, -0.1831, -0.1256, -0.1232,
         -0.1677, -0.0641,  0.1678, -0.0810, -0.3969,  0.3010,  0.1484,  0.0700,
          0.2598,  0.2190, -0.0311,  0.1739, -0.3930,  0.5610,  0.2094,  0.0885,
          0.0412, -0.1675,  0.0401, -0.0366,  0.0586,  0.0163,  0.0715,  0.0581,
          0.1271, -0.1339,  0.1021,  0.3142, -0.2710,  0.1832,  0.1003,  0.2608,
         -0.0935, -0.0084]], device='cuda:0') tensor(0.2855, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
94000 特征值优化 tensor(2.5288, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.0022e+00,  5.1507e-01,  7.3104e-01,  5.1022e+00, -7.5253e-01,
         -3.1527e-01, -1.8525e-01,  9.1907e-01, -2.4685e-01, -2.4786e-01,
          6.5593e-01, -6.3343e-01, -4.1563e-01, -2.0658e-01,  5.8604e-01,
         -3.7078e-01,  1.3704e-01,  3.3415e-01, -3.3282e-01, -6.7347e-02,
          6.0577e-01, -2.4246e-02, -1.4221e-01, -9.7779e-01, -3.3462e-02,
         -6.8457e-01,  2.7965e-02,  1.1674e-02,  6.5024e-02, -1.7543e-01,
         -1.2334e-01, -1.2748e-01, -1.2934e-01, -3.8684e-02,  1.4308e-01,
         -7.3124e-02, -3.8626e-01,  2.6046e-01,  9.6761e-02,  6.9672e-02,
          1.6659e-01,  2.1433e-01, -2.5727e-02,  2.0145e-01, -4.1423e-01,
          6.3408e-01,  2.0953e-01,  8.7553e-02,  5.2835e-02, -1.7855e-01,
          4.1496e-02, -2.8785e-02,  5.3194e-02,  2.0101e-02,  6.8271e-02,
          6.2817e-02,  1.0309e-01, -1.2833e-01,  6.4440e-02,  2.9751e-01,
         -2.2560e-01,  1.7693e-01,  7.0498e-02,  2.6161e-01, -7.5885e-02,
          2.3383e-03]], device='cuda:0') tensor(0.2302, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
95000 特征值优化 tensor(2.5144, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.0130e+00,  3.4979e-01,  7.3852e-01,  5.2451e+00, -7.5733e-01,
         -3.1020e-01, -2.0555e-01,  9.7801e-01, -2.3196e-01, -2.4947e-01,
          6.0402e-01, -6.4503e-01, -4.4915e-01, -2.2519e-01,  5.8744e-01,
         -3.5832e-01,  1.5123e-01,  3.1178e-01, -2.9027e-01, -6.1182e-02,
          6.0707e-01, -2.8909e-02, -1.6268e-01, -9.6021e-01, -6.7700e-02,
         -6.5787e-01,  2.4423e-02,  1.1391e-02,  7.4514e-02, -1.6460e-01,
         -1.1736e-01, -1.2409e-01, -7.9787e-02, -1.7943e-03,  1.2623e-01,
         -5.8215e-02, -3.8820e-01,  2.5133e-01,  4.1486e-02,  6.6087e-02,
          1.1965e-01,  2.1236e-01, -4.1391e-03,  2.2887e-01, -4.2001e-01,
          6.8910e-01,  2.1245e-01,  8.4922e-02,  3.2602e-02, -1.9793e-01,
          4.7780e-02, -2.7841e-02,  3.7916e-02,  2.2663e-02,  6.4790e-02,
          6.3011e-02,  8.0081e-02, -1.4370e-01,  3.8853e-02,  3.0079e-01,
         -2.0456e-01,  1.5984e-01,  4.5257e-02,  2.7150e-01, -5.8835e-02,
          1.0030e-02]], device='cuda:0') tensor(0.2498, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
96000 特征值优化 tensor(2.5071, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9893e+00,  2.4945e-01,  7.4767e-01,  5.3339e+00, -7.6621e-01,
         -3.1292e-01, -2.3000e-01,  1.0034e+00, -2.1901e-01, -2.3877e-01,
          5.7293e-01, -6.5588e-01, -4.6522e-01, -2.5340e-01,  5.9004e-01,
         -3.4679e-01,  1.4854e-01,  2.8057e-01, -2.5154e-01, -6.2874e-02,
          6.0550e-01, -3.1655e-02, -1.7297e-01, -9.3550e-01, -1.0325e-01,
         -6.5539e-01,  2.4862e-02,  9.2401e-03,  8.3345e-02, -1.4098e-01,
         -1.1180e-01, -1.1927e-01, -4.9164e-02,  2.4699e-02,  1.1641e-01,
         -5.9932e-02, -3.8318e-01,  2.2760e-01,  2.3155e-03,  4.9959e-02,
          9.8024e-02,  2.0972e-01,  6.3015e-03,  2.3980e-01, -4.0187e-01,
          7.0964e-01,  2.1500e-01,  8.5345e-02,  2.6040e-02, -2.1159e-01,
          5.8119e-02, -2.9531e-02,  2.2258e-02,  2.1801e-02,  6.1035e-02,
          6.1568e-02,  6.9514e-02, -1.4177e-01,  1.7479e-02,  2.9525e-01,
         -1.8209e-01,  1.5042e-01,  2.8136e-02,  2.7175e-01, -4.7724e-02,
          1.5663e-02]], device='cuda:0') tensor(0.2285, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
97000 特征值优化 tensor(2.5034, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9751,  0.1860,  0.7536,  5.3954, -0.7764, -0.3137, -0.2293,  1.0206,
         -0.2094, -0.2276,  0.5484, -0.6650, -0.4698, -0.2986,  0.5893, -0.3313,
          0.1431,  0.2579, -0.2221, -0.0676,  0.6060, -0.0318, -0.1808, -0.9161,
         -0.1320, -0.6551,  0.0222,  0.0099,  0.0784, -0.1279, -0.1067, -0.1154,
         -0.0259,  0.0532,  0.1132, -0.0628, -0.3813,  0.2048, -0.0318,  0.0355,
          0.0854,  0.2114,  0.0215,  0.2572, -0.3828,  0.7192,  0.2167,  0.0880,
          0.0188, -0.2225,  0.0572, -0.0360,  0.0144,  0.0198,  0.0606,  0.0572,
          0.0548, -0.1457,  0.0060,  0.2886, -0.1726,  0.1466,  0.0135,  0.2658,
         -0.0413,  0.0209]], device='cuda:0') tensor(0.2557, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
98000 正交保障 tensor(0.2347, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9588e+00,  1.3885e-01,  7.5886e-01,  5.4456e+00, -7.8417e-01,
         -3.1625e-01, -2.2790e-01,  1.0327e+00, -2.0101e-01, -2.2250e-01,
          5.3202e-01, -6.6862e-01, -4.6130e-01, -3.3434e-01,  5.8972e-01,
         -3.2257e-01,  1.4054e-01,  2.3817e-01, -1.9837e-01, -6.8814e-02,
          6.0388e-01, -3.3829e-02, -1.8485e-01, -8.9832e-01, -1.5653e-01,
         -6.5480e-01,  2.4244e-02,  6.1309e-03,  7.4442e-02, -1.1998e-01,
         -1.0502e-01, -1.0784e-01, -1.2115e-02,  7.1160e-02,  1.0910e-01,
         -6.2648e-02, -3.7723e-01,  1.8349e-01, -5.1818e-02,  2.5316e-02,
          7.8902e-02,  2.0954e-01,  2.8166e-02,  2.6954e-01, -3.7092e-01,
          7.2459e-01,  2.1845e-01,  8.8245e-02,  1.3684e-02, -2.2993e-01,
          6.0034e-02, -3.9815e-02,  4.4408e-03,  2.5255e-02,  5.7323e-02,
          5.6107e-02,  4.4399e-02, -1.4768e-01, -5.0043e-03,  2.8339e-01,
         -1.6437e-01,  1.4545e-01,  4.5459e-03,  2.5809e-01, -3.7871e-02,
          2.4402e-02]], device='cuda:0') tensor(0.2347, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
99000 特征值优化 tensor(26.4807, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2143,  1.1728, -0.2238,  2.1405, -0.9056, -0.8616,  0.1120, -0.2869,
          0.3198,  0.3350,  0.4433, -0.1223,  1.3401, -0.8314, -0.8971,  1.1587,
          0.1282, -0.2436,  0.6854, -0.3746,  0.1611, -0.9472, -0.2937, -0.4256,
          1.5742,  0.7207, -0.3775,  0.4045, -0.7871, -0.3391,  0.7821,  2.5432,
          0.2585, -0.3199,  0.1750,  0.7616, -0.1007, -0.1694, -0.3698,  0.0664,
          0.7500,  0.0985,  0.0236,  0.4083, -0.1401, -0.3665,  1.0837,  0.8771,
          0.8905,  0.1870, -0.8450, -0.2038, -0.3867, -0.2537, -0.3164, -0.5660,
         -0.0862,  0.4148, -0.8033,  0.3966, -0.0895,  1.1336,  0.4952, -0.1213,
         -1.1073,  0.4371]], device='cuda:0') tensor(0.5826, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
100000 特征值优化 tensor(7.7024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2353,  1.8305,  1.0387,  2.6604, -0.9904, -1.0044,  0.2239, -0.2904,
          0.2417,  0.3500,  0.2223, -0.5266,  0.9190, -0.4346, -0.3378,  0.4820,
         -0.0275, -0.7296,  0.1479,  0.1587, -0.1674, -0.3422,  0.0684, -0.2647,
          0.7516,  0.0339, -0.3385, -0.0244, -0.2355,  0.0977,  0.1795,  1.4909,
          0.3311,  0.0158, -0.0058,  0.2484,  0.2056, -0.2062, -0.1748,  0.3268,
         -0.0160,  0.2492,  0.2408,  0.3976, -0.2315, -0.0229,  0.4997,  0.3622,
          0.3473, -0.0112, -0.2559,  0.0383,  0.0280, -0.5464,  0.0233, -0.3003,
          0.0988, -0.0324, -0.5068,  0.2136, -0.0945,  0.5792,  0.5128,  0.0027,
         -0.4013,  0.1112]], device='cuda:0') tensor(0.2820, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
101000 特征值优化 tensor(3.7284, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.9852,  1.8166,  1.6753,  3.5750, -0.3608, -0.5326,  0.4501, -0.9057,
          0.0490, -0.0085,  0.4228, -0.5411,  0.4771, -0.4482, -0.2352,  0.3031,
          0.0141, -0.5200,  0.1695, -0.0850, -0.1656, -0.0772,  0.1936, -0.3493,
          0.4682, -0.2994, -0.3751, -0.0492, -0.1031,  0.2195,  0.0246,  0.7858,
          0.4234,  0.0476, -0.0230, -0.2682, -0.0133, -0.0411, -0.3094,  0.4156,
         -0.0444,  0.3152, -0.0670,  0.5275, -0.2867, -0.2247,  0.2423,  0.1432,
          0.1953, -0.0098, -0.1520, -0.0270,  0.0979, -0.1406,  0.0109,  0.0113,
          0.0638, -0.0203, -0.3521,  0.1034, -0.0495,  0.4397,  0.2472,  0.1205,
         -0.3754, -0.2574]], device='cuda:0') tensor(0.3131, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
102000 特征值优化 tensor(3.0126, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.4814e+00,  1.5173e+00,  1.6728e+00,  4.1939e+00, -3.2229e-02,
         -3.8652e-01,  6.0619e-01, -1.0078e+00, -5.1185e-02, -1.4872e-01,
          6.2207e-01, -6.7085e-01,  3.0845e-02, -6.0519e-01, -3.1163e-01,
          3.8610e-01,  5.5696e-03, -2.8178e-01,  2.6172e-01,  1.2376e-02,
         -2.2344e-01,  1.0627e-01,  2.5002e-01, -5.6728e-01,  3.8961e-01,
         -3.0456e-01, -4.5423e-01,  4.2267e-02,  5.1595e-02,  2.3984e-01,
         -2.6848e-03,  5.2229e-01,  4.5179e-01,  4.7842e-02, -4.8119e-02,
         -3.2367e-01, -8.6272e-03, -1.6707e-01, -1.7239e-01,  3.9021e-01,
         -1.6023e-01,  3.6948e-01, -4.6485e-01,  2.9850e-01, -3.3994e-01,
         -1.2317e-01,  1.6582e-01,  7.0282e-02,  4.0839e-02,  1.3904e-02,
         -3.2509e-02, -3.2625e-02,  1.6661e-01,  3.1615e-02,  4.1193e-02,
          3.1453e-02, -3.1887e-03,  4.5605e-02, -2.1213e-01,  1.3609e-01,
         -6.6202e-02,  4.0087e-01,  8.8746e-02,  2.0852e-01, -3.3463e-02,
         -4.0939e-01]], device='cuda:0') tensor(0.3739, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
103000 特征值优化 tensor(2.8494, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.5794,  1.2584,  1.4171,  4.6058,  0.1205, -0.3679,  0.7315, -0.9961,
         -0.0769, -0.1661,  0.6408, -0.6628, -0.2302, -0.7755, -0.3177,  0.3780,
         -0.0096, -0.2080,  0.2962,  0.0532, -0.2806,  0.1888,  0.2682, -0.6023,
          0.3714, -0.3007, -0.4458,  0.1143,  0.1145,  0.2634, -0.0253,  0.4114,
          0.4498,  0.0184, -0.0106, -0.2653, -0.0202, -0.2139, -0.0234,  0.2748,
          0.0654,  0.3505, -0.5382,  0.1362, -0.3357, -0.2329,  0.1150,  0.0523,
         -0.0143,  0.0295, -0.0093,  0.0191,  0.1585,  0.0478,  0.0449,  0.0477,
         -0.0414,  0.0233, -0.1262,  0.1677, -0.0395,  0.3482,  0.0073,  0.2073,
          0.1870, -0.3829]], device='cuda:0') tensor(0.3466, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
104000 特征值优化 tensor(2.8062, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.3226e+00,  1.1360e+00,  1.3331e+00,  4.7420e+00,  2.2753e-01,
         -4.0214e-01,  8.0324e-01, -8.8400e-01, -1.0431e-01, -1.9874e-01,
          6.4433e-01, -6.2497e-01, -3.9928e-01, -8.5437e-01, -3.1482e-01,
          3.4530e-01,  9.4544e-05, -2.2485e-01,  2.9327e-01,  4.8478e-02,
         -2.9379e-01,  2.0798e-01,  2.7464e-01, -5.6567e-01,  3.8027e-01,
         -2.5664e-01, -4.2837e-01,  1.8536e-01,  1.5109e-01,  2.6975e-01,
         -5.8088e-02,  3.7593e-01,  4.5296e-01, -3.5321e-03, -1.6343e-02,
         -2.6857e-01,  1.6933e-02, -2.2176e-01,  1.2034e-01,  2.5894e-01,
          1.5067e-01,  3.5707e-01, -5.2739e-01,  8.1266e-02, -3.2708e-01,
         -2.8820e-01,  8.0419e-02,  3.8102e-02, -4.1347e-02,  3.8146e-02,
          2.0708e-02,  4.3037e-02,  1.6221e-01,  4.3061e-02,  4.0262e-02,
          5.7066e-02, -7.4280e-02, -8.3843e-03, -7.6263e-02,  1.6395e-01,
         -2.4711e-02,  3.0650e-01, -3.3325e-02,  1.5905e-01,  2.6393e-01,
         -3.5365e-01]], device='cuda:0') tensor(0.3284, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
105000 特征值优化 tensor(2.7650, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.9371,  1.0839,  1.3584,  4.8590,  0.2911, -0.4224,  0.7953, -0.6860,
         -0.0983, -0.1997,  0.6342, -0.5912, -0.5726, -0.9347, -0.3133,  0.2976,
          0.0145, -0.2720,  0.2811,  0.0334, -0.3013,  0.2378,  0.3126, -0.5180,
          0.4012, -0.1940, -0.3880,  0.2436,  0.2106,  0.2702, -0.0810,  0.3720,
          0.4535, -0.0248, -0.0160, -0.2789,  0.0751, -0.2477,  0.2451,  0.2439,
          0.2135,  0.3713, -0.4923,  0.0333, -0.3073, -0.3930,  0.0566,  0.0248,
         -0.0602,  0.0465,  0.0573,  0.0814,  0.1485,  0.0398,  0.0358,  0.0617,
         -0.1060, -0.0405, -0.0310,  0.1784, -0.0053,  0.2713, -0.0832,  0.0841,
          0.3573, -0.3001]], device='cuda:0') tensor(0.3357, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
106000 特征值优化 tensor(2.7459, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.5781e+00,  1.0928e+00,  1.5001e+00,  4.9564e+00,  3.2007e-01,
         -3.9845e-01,  7.3435e-01, -5.5300e-01, -7.1657e-02, -2.0994e-01,
          6.1468e-01, -5.7150e-01, -6.4834e-01, -9.6445e-01, -2.9489e-01,
          2.4545e-01,  2.7956e-02, -3.0255e-01,  2.7220e-01,  1.0004e-02,
         -3.2022e-01,  2.5056e-01,  3.4858e-01, -4.8218e-01,  4.0729e-01,
         -1.5313e-01, -3.6340e-01,  2.6336e-01,  2.4198e-01,  2.7877e-01,
         -9.0389e-02,  3.6399e-01,  4.5469e-01, -3.2270e-02, -1.9170e-02,
         -2.7292e-01,  1.1342e-01, -2.6213e-01,  3.1933e-01,  2.0263e-01,
          2.8032e-01,  3.7111e-01, -5.3350e-01, -3.4456e-03, -2.6833e-01,
         -5.0759e-01,  5.3119e-02,  1.6631e-02, -7.9246e-02,  7.5742e-02,
          6.3862e-02,  7.9740e-02,  1.4624e-01,  3.7574e-02,  1.9124e-02,
          6.4201e-02, -1.0921e-01, -5.3222e-02, -1.3099e-02,  1.8470e-01,
          3.9800e-05,  2.6158e-01, -9.0779e-02,  4.9241e-02,  3.8175e-01,
         -2.6811e-01]], device='cuda:0') tensor(0.3368, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
107000 特征值优化 tensor(2.7346, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2604e+00,  1.0662e+00,  1.6798e+00,  5.0482e+00,  3.4324e-01,
         -3.6927e-01,  6.4892e-01, -4.5379e-01, -2.4801e-02, -2.1959e-01,
          5.9584e-01, -5.7129e-01, -6.7544e-01, -9.8307e-01, -2.5676e-01,
          1.9333e-01,  4.3699e-02, -3.1319e-01,  2.6808e-01,  2.6215e-03,
         -3.5664e-01,  2.6788e-01,  3.7304e-01, -4.7218e-01,  4.0861e-01,
         -1.2147e-01, -3.4125e-01,  2.7253e-01,  2.5087e-01,  2.8520e-01,
         -1.0179e-01,  3.6086e-01,  4.5483e-01, -3.3383e-02, -1.3376e-02,
         -2.5245e-01,  1.1755e-01, -2.8295e-01,  3.5190e-01,  1.7928e-01,
          3.2436e-01,  3.8854e-01, -5.7542e-01, -2.1151e-02, -2.3638e-01,
         -5.8887e-01,  4.7075e-02,  1.0211e-02, -9.6397e-02,  1.0758e-01,
          6.6646e-02,  7.3103e-02,  1.4472e-01,  3.3155e-02,  6.6016e-03,
          6.5072e-02, -1.0473e-01, -5.5714e-02, -6.1087e-03,  1.9084e-01,
          1.3435e-03,  2.5785e-01, -1.0115e-01,  3.4972e-02,  3.9794e-01,
         -2.3694e-01]], device='cuda:0') tensor(0.3371, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
108000 特征值优化 tensor(2.7259, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.8323e-01,  1.0431e+00,  1.8678e+00,  5.1061e+00,  3.5016e-01,
         -3.4463e-01,  5.7823e-01, -3.9342e-01,  1.2365e-02, -2.2791e-01,
          5.7859e-01, -5.7999e-01, -6.8801e-01, -9.8583e-01, -2.1096e-01,
          1.5495e-01,  5.4326e-02, -3.1422e-01,  2.6769e-01, -3.8688e-05,
         -3.9902e-01,  2.8538e-01,  3.8971e-01, -4.6870e-01,  4.0674e-01,
         -1.0574e-01, -3.0884e-01,  2.8265e-01,  2.5367e-01,  2.8932e-01,
         -1.1317e-01,  3.6190e-01,  4.5348e-01, -3.6691e-02, -3.5418e-03,
         -2.3011e-01,  1.0197e-01, -2.9116e-01,  3.6786e-01,  1.5465e-01,
          3.6383e-01,  4.1596e-01, -5.9932e-01, -5.6878e-02, -2.1113e-01,
         -6.4230e-01,  3.8854e-02,  1.7974e-03, -1.0640e-01,  1.3169e-01,
          7.5310e-02,  6.5869e-02,  1.3794e-01,  2.6771e-02, -2.6549e-03,
          6.7814e-02, -1.0065e-01, -5.3758e-02, -1.3298e-03,  1.9508e-01,
          3.6133e-03,  2.5636e-01, -1.1579e-01,  1.9603e-02,  4.1284e-01,
         -2.1056e-01]], device='cuda:0') tensor(0.3247, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
109000 特征值优化 tensor(2.7191, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 7.5163e-01,  1.0197e+00,  2.0187e+00,  5.1527e+00,  3.4152e-01,
         -3.2491e-01,  5.2299e-01, -3.4070e-01,  5.3053e-02, -2.3623e-01,
          5.5359e-01, -5.8287e-01, -7.0493e-01, -1.0007e+00, -1.6910e-01,
          1.2460e-01,  6.0103e-02, -3.0933e-01,  2.6937e-01, -5.6308e-03,
         -4.3824e-01,  2.9382e-01,  4.0302e-01, -4.7078e-01,  4.0163e-01,
         -9.2681e-02, -2.8296e-01,  2.8235e-01,  2.5256e-01,  2.8469e-01,
         -1.2576e-01,  3.5365e-01,  4.5165e-01, -4.2006e-02,  9.2579e-03,
         -1.9851e-01,  8.6402e-02, -2.9251e-01,  3.8470e-01,  1.3961e-01,
          3.9348e-01,  4.4229e-01, -6.2638e-01, -9.4587e-02, -1.8432e-01,
         -6.9715e-01,  3.2332e-02,  8.9209e-04, -1.1048e-01,  1.5464e-01,
          8.1489e-02,  5.2270e-02,  1.3427e-01,  2.0887e-02, -1.2571e-02,
          6.8891e-02, -9.3062e-02, -5.5834e-02,  3.8323e-03,  2.0289e-01,
          7.2148e-03,  2.5591e-01, -1.3104e-01,  1.0569e-02,  4.2953e-01,
         -1.7804e-01]], device='cuda:0') tensor(0.3294, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
110000 特征值优化 tensor(2.7151, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 6.1505e-01,  1.0010e+00,  2.1140e+00,  5.1883e+00,  3.3525e-01,
         -3.1733e-01,  4.9900e-01, -3.0187e-01,  8.9388e-02, -2.2973e-01,
          5.3666e-01, -5.8309e-01, -7.1470e-01, -1.0033e+00, -1.4092e-01,
          1.1048e-01,  6.4010e-02, -2.9630e-01,  2.6940e-01, -8.9996e-03,
         -4.6427e-01,  2.9093e-01,  4.1665e-01, -4.8260e-01,  4.0036e-01,
         -8.7007e-02, -2.6426e-01,  2.7654e-01,  2.4489e-01,  2.8227e-01,
         -1.3448e-01,  3.4407e-01,  4.4942e-01, -4.7699e-02,  1.8190e-02,
         -1.7132e-01,  7.1638e-02, -2.9336e-01,  3.9115e-01,  1.2479e-01,
          4.0948e-01,  4.6128e-01, -6.4890e-01, -1.2190e-01, -1.6757e-01,
         -7.2357e-01,  2.7384e-02,  3.4561e-04, -1.0813e-01,  1.6270e-01,
          8.0052e-02,  4.2934e-02,  1.3465e-01,  1.9361e-02, -2.1737e-02,
          6.4405e-02, -8.7280e-02, -5.7960e-02,  6.9883e-03,  2.0570e-01,
          9.4090e-03,  2.5345e-01, -1.4394e-01,  5.4982e-03,  4.3582e-01,
         -1.5511e-01]], device='cuda:0') tensor(0.2702, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
111000 特征值优化 tensor(2.7105, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.2746e-01,  9.6153e-01,  2.2107e+00,  5.2357e+00,  3.1977e-01,
         -3.1418e-01,  4.7836e-01, -2.7375e-01,  1.3984e-01, -2.1375e-01,
          5.2065e-01, -5.8988e-01, -7.2908e-01, -1.0031e+00, -1.1851e-01,
          9.9716e-02,  6.4359e-02, -2.8398e-01,  2.7061e-01, -1.4513e-02,
         -4.8360e-01,  2.8682e-01,  4.3857e-01, -4.9541e-01,  3.9888e-01,
         -8.1932e-02, -2.4719e-01,  2.5970e-01,  2.3619e-01,  2.7051e-01,
         -1.4756e-01,  3.3407e-01,  4.4703e-01, -5.4750e-02,  3.6675e-02,
         -1.4082e-01,  5.6143e-02, -2.8672e-01,  3.7981e-01,  1.1671e-01,
          4.1946e-01,  4.8561e-01, -6.7032e-01, -1.3643e-01, -1.4945e-01,
         -7.4816e-01,  2.8008e-02,  1.0731e-04, -1.0163e-01,  1.6102e-01,
          8.0188e-02,  3.4805e-02,  1.3887e-01,  1.2019e-02, -3.2974e-02,
          6.0146e-02, -8.5299e-02, -5.7337e-02,  1.1194e-02,  2.0649e-01,
          1.2979e-02,  2.5027e-01, -1.5577e-01,  2.4282e-04,  4.4292e-01,
         -1.2774e-01]], device='cuda:0') tensor(0.4097, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
112000 特征值优化 tensor(27.8875, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.6423,  0.7206,  0.3710, -0.3742,  0.0427,  0.0857,  0.8785,  0.1876,
         -3.2336,  0.6346, -0.9801, -0.7871,  0.4028, -0.0831, -0.0873,  0.6390,
          0.3641, -1.7460, -0.6047,  0.8064,  0.3677, -0.3018,  0.1624, -0.0376,
          0.1172,  0.4109,  0.0441, -1.9810, -0.5927, -0.4112,  0.3171, -0.3746,
          0.5316,  1.6005,  0.9550,  0.9702,  0.4019,  0.1187, -0.4620,  0.6265,
         -0.3462,  0.6149,  0.7088,  0.3231,  0.3550, -0.2761, -0.0571, -0.6296,
          1.0505,  0.2618,  0.5081, -0.5834,  0.6028, -0.7095, -1.0649, -0.2712,
          1.0941, -0.2552, -0.1840, -0.1414, -0.9227,  0.3257,  0.5260,  1.0055,
         -0.5823, -1.7254]], device='cuda:0') tensor(0.8094, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
113000 特征值优化 tensor(7.8126, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.8025e+00,  1.6383e+00,  1.6207e+00,  6.9640e-01,  4.3770e-01,
          4.9441e-01,  3.5526e-01,  2.2327e-01, -2.1415e+00,  1.3931e-01,
         -2.5137e-01, -5.9780e-02,  2.8435e-01, -3.2712e-01,  2.8016e-03,
          1.7107e-01,  1.5736e-01, -1.0004e+00,  3.9496e-03,  2.2898e-01,
          2.8238e-02, -1.9137e-01,  1.0033e-01, -1.2156e-02,  2.7272e-01,
          1.1228e-01, -2.4347e-03, -1.1697e+00, -1.0900e-01, -2.3071e-01,
         -2.7390e-02, -4.6031e-02,  7.3859e-02,  6.7304e-01,  3.3994e-01,
          2.9460e-01,  1.8318e-01, -1.2893e-01, -8.9335e-02,  5.4418e-01,
         -3.8651e-01,  2.9408e-01,  2.3147e-01, -2.3964e-01,  2.9347e-01,
         -8.8748e-01, -1.0312e-01, -1.1509e-01,  4.2976e-01,  1.5409e-01,
          7.6026e-02, -1.5250e-01,  2.2084e-01, -1.3081e-01, -2.3053e-01,
         -1.1039e-02,  3.9725e-01, -5.4273e-02, -1.2106e-01, -1.7524e-01,
         -3.1720e-01,  1.4654e-01,  9.0707e-02,  2.7189e-01, -8.3681e-02,
         -7.9424e-01]], device='cuda:0') tensor(0.4139, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
114000 特征值优化 tensor(4.9819, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.8581e+00,  2.3378e+00,  2.3712e+00,  1.5219e+00,  6.0598e-01,
          3.9400e-01,  5.2369e-01,  1.5269e-01, -1.7008e+00, -5.6076e-02,
         -2.0870e-01,  6.0544e-02, -2.9191e-03, -5.7667e-01,  9.4614e-02,
          1.1951e-01,  3.6383e-01, -8.1224e-01,  1.6578e-01,  3.6817e-01,
          2.2160e-01, -2.9437e-01,  1.2044e-01, -1.4336e-01,  1.1691e-01,
         -6.9460e-02,  1.8815e-04, -8.0601e-01,  1.6280e-01, -3.9674e-01,
          3.5567e-03,  1.8347e-01, -1.3722e-03,  2.9213e-01,  4.1539e-01,
          1.5360e-01, -8.2359e-02, -2.5799e-01, -4.6073e-01,  3.5446e-01,
          5.5709e-02,  6.6307e-02,  2.8346e-01, -3.0458e-01,  2.6416e-01,
         -8.6673e-01, -8.2907e-02, -4.1937e-02,  2.7958e-01,  8.4755e-02,
          1.1872e-01, -5.6955e-02, -6.1137e-02,  4.2597e-02,  5.6329e-02,
         -1.3870e-03,  1.7909e-01, -7.9432e-02, -1.4320e-01, -1.0730e-01,
         -2.4215e-01,  7.9677e-02,  6.8560e-02,  2.5031e-01,  5.0641e-02,
         -4.4280e-01]], device='cuda:0') tensor(0.2726, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
115000 特征值优化 tensor(4.1250, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.6056e+00,  2.3443e+00,  2.6859e+00,  1.9486e+00,  4.0054e-01,
          3.4688e-01,  5.6600e-01,  4.6621e-01, -1.4025e+00, -1.0089e-01,
         -1.2881e-01,  2.8981e-01, -2.0017e-01, -5.1355e-01,  2.6513e-01,
         -1.0550e-02,  3.1545e-01, -8.7691e-01,  1.7150e-01,  3.3974e-01,
          3.3009e-01, -2.8344e-01,  1.7442e-01, -1.9683e-01,  1.6180e-02,
         -3.1519e-01, -5.8685e-02, -5.2902e-01,  1.4953e-01, -3.9382e-01,
         -5.7431e-02,  2.1353e-01,  8.9313e-02,  2.5201e-01,  4.1053e-01,
          1.4780e-01,  4.7184e-02, -1.6643e-01, -6.3404e-01,  3.5135e-01,
          1.2056e-01,  3.0971e-01,  5.5623e-01, -2.8638e-01,  1.0002e-01,
         -1.1187e+00, -7.7744e-02,  6.5930e-02,  2.6148e-01, -7.4512e-02,
          1.1860e-01,  9.4215e-02, -1.5607e-01, -1.1432e-03,  1.3631e-01,
          5.0945e-02,  1.1148e-01, -1.4409e-01, -6.5585e-02, -7.0564e-02,
         -9.7270e-02,  4.6154e-02, -2.8105e-02,  1.1922e-01,  4.0254e-01,
         -2.5899e-01]], device='cuda:0') tensor(0.2480, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
116000 特征值优化 tensor(3.6084, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.1173e+00,  1.9673e+00,  2.3588e+00,  2.4457e+00,  4.1086e-01,
          3.1527e-01,  3.0892e-01,  6.0089e-01, -9.9771e-01, -1.5846e-01,
          6.4614e-03,  4.0948e-01, -3.5172e-01, -3.5998e-01,  3.5035e-01,
         -3.3502e-02,  2.6549e-01, -9.5066e-01,  1.5145e-01,  2.7845e-02,
          3.1968e-01, -2.6452e-01,  1.8480e-01, -1.6130e-01,  4.6160e-03,
         -5.7055e-01, -1.1692e-01, -4.8571e-01,  7.9465e-02, -3.4762e-01,
          2.4189e-02,  1.8400e-01,  1.2683e-01,  2.1562e-01,  4.1080e-01,
          1.7557e-01, -9.4766e-02, -1.5296e-01, -5.9660e-01,  4.8632e-01,
          1.7468e-01,  5.1233e-01,  5.9013e-01, -2.0515e-01, -6.6752e-02,
         -1.2670e+00, -6.6045e-02,  8.5297e-02,  3.0802e-01, -5.3841e-02,
          8.2488e-02,  7.1084e-02, -1.4556e-01, -6.7589e-02,  2.5161e-01,
          3.6648e-02,  4.7639e-02, -1.6829e-01, -2.2086e-02, -6.9801e-02,
         -6.3550e-02, -4.8310e-04, -6.6891e-02, -7.3374e-02,  3.9717e-01,
         -7.9038e-02]], device='cuda:0') tensor(0.2621, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
117000 特征值优化 tensor(3.5135, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.5435e+00,  1.8082e+00,  2.1762e+00,  2.6077e+00,  4.6785e-01,
          3.3796e-01,  1.2048e-01,  6.5139e-01, -8.2351e-01, -1.7210e-01,
         -4.9751e-02,  4.9070e-01, -5.2127e-01, -2.5988e-01,  3.4941e-01,
         -3.2707e-02,  2.9180e-01, -1.0064e+00,  1.1799e-01, -1.9059e-03,
          3.4074e-01, -2.3638e-01,  2.4149e-01, -1.4706e-01,  4.5571e-02,
         -5.9819e-01, -1.4694e-01, -4.7021e-01,  3.3583e-02, -3.3478e-01,
          5.5480e-02,  1.9493e-01,  1.6495e-01,  1.9877e-01,  3.9697e-01,
          1.6369e-01, -2.0030e-01, -1.2811e-01, -4.8370e-01,  5.2533e-01,
          1.3486e-01,  5.5647e-01,  5.6537e-01, -6.7843e-02, -4.7204e-02,
         -1.2329e+00, -7.2659e-02,  7.7684e-02,  3.5593e-01, -7.8188e-02,
          1.0102e-02,  4.3227e-02, -1.6136e-01, -5.6699e-02,  2.3797e-01,
          4.0420e-02,  1.2902e-02, -1.6322e-01, -4.1392e-02, -6.5350e-02,
         -1.1298e-02, -3.8507e-02,  3.8090e-02, -1.7211e-01,  3.8499e-01,
          2.3718e-02]], device='cuda:0') tensor(0.2726, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
118000 特征值优化 tensor(3.4982, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.7995e+00,  1.7365e+00,  2.0896e+00,  2.5859e+00,  4.7325e-01,
          3.3582e-01,  4.9445e-03,  6.1965e-01, -7.7471e-01, -1.9598e-01,
         -9.5174e-02,  4.9127e-01, -5.9985e-01, -2.5088e-01,  3.5201e-01,
         -3.0321e-02,  2.7371e-01, -9.7901e-01,  1.1585e-01, -3.3916e-03,
          3.3965e-01, -2.4954e-01,  2.4556e-01, -1.7379e-01,  4.1893e-02,
         -6.3267e-01, -1.6599e-01, -4.7018e-01,  1.1357e-02, -3.3125e-01,
          4.0940e-02,  1.9760e-01,  1.8790e-01,  1.8877e-01,  3.9250e-01,
          1.6039e-01, -2.4100e-01, -1.0634e-01, -4.4658e-01,  5.2059e-01,
          1.1984e-01,  5.6524e-01,  5.3616e-01, -7.9163e-02, -2.6633e-02,
         -1.2162e+00, -6.5417e-02,  7.6795e-02,  3.6131e-01, -7.1546e-02,
         -3.8261e-02,  1.4006e-02, -1.6750e-01, -5.5725e-02,  2.3485e-01,
          5.0210e-02,  1.6958e-02, -1.6632e-01, -5.5377e-02, -5.5358e-02,
          4.5218e-03, -3.6653e-02,  6.4228e-02, -1.8392e-01,  3.8932e-01,
          3.0829e-02]], device='cuda:0') tensor(0.3129, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
119000 特征值优化 tensor(3.4902, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 6.0020e+00,  1.6601e+00,  2.0175e+00,  2.5920e+00,  4.7429e-01,
          3.1782e-01, -4.6849e-02,  5.4517e-01, -7.5031e-01, -1.9979e-01,
         -1.3828e-01,  4.8684e-01, -6.4336e-01, -2.5169e-01,  3.4417e-01,
         -2.1191e-02,  2.5109e-01, -9.4805e-01,  1.1398e-01, -5.8656e-03,
          3.4855e-01, -2.6824e-01,  2.3380e-01, -2.0579e-01,  4.0786e-02,
         -6.5376e-01, -1.7398e-01, -4.6901e-01, -3.1164e-04, -3.3624e-01,
          2.4008e-02,  1.9807e-01,  2.0436e-01,  1.8487e-01,  3.8790e-01,
          1.4842e-01, -2.5519e-01, -9.9375e-02, -4.8450e-01,  5.1619e-01,
          1.1235e-01,  5.6598e-01,  4.9403e-01, -1.2282e-01, -1.0326e-02,
         -1.2040e+00, -6.4922e-02,  8.3843e-02,  3.5937e-01, -6.0944e-02,
         -7.3492e-02, -2.2551e-02, -1.6831e-01, -5.5918e-02,  2.3340e-01,
          5.1499e-02,  2.8112e-02, -1.6745e-01, -6.2504e-02, -5.5094e-02,
          9.5316e-03, -3.2448e-02,  8.2232e-02, -1.8940e-01,  3.8746e-01,
          2.6150e-02]], device='cuda:0') tensor(0.2803, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
120000 特征值优化 tensor(3.4864, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 6.1088e+00,  1.6309e+00,  1.9834e+00,  2.6399e+00,  4.6927e-01,
          2.9683e-01, -7.1521e-02,  4.8397e-01, -7.4285e-01, -1.9859e-01,
         -1.5973e-01,  4.8788e-01, -6.7247e-01, -2.5746e-01,  3.4016e-01,
         -1.8058e-02,  2.4271e-01, -9.3312e-01,  1.1445e-01, -4.9747e-03,
          3.5140e-01, -2.7749e-01,  2.2863e-01, -2.3728e-01,  4.1488e-02,
         -6.5948e-01, -1.7333e-01, -4.6870e-01, -1.0524e-02, -3.4775e-01,
          1.7082e-02,  1.9998e-01,  2.1763e-01,  1.8665e-01,  3.9015e-01,
          1.4770e-01, -2.6524e-01, -8.3567e-02, -5.0426e-01,  5.1627e-01,
          9.4001e-02,  5.5917e-01,  4.7370e-01, -1.5437e-01,  4.9573e-03,
         -1.1964e+00, -6.2187e-02,  8.8118e-02,  3.5458e-01, -6.2767e-02,
         -9.2163e-02, -4.4721e-02, -1.6905e-01, -5.7759e-02,  2.3320e-01,
          5.0163e-02,  3.5415e-02, -1.7089e-01, -7.0221e-02, -5.6007e-02,
          1.4020e-02, -3.3067e-02,  8.9735e-02, -1.9259e-01,  3.9094e-01,
          2.2714e-02]], device='cuda:0') tensor(0.2683, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
121000 特征值优化 tensor(3.4839, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 6.1464e+00,  1.5987e+00,  1.9694e+00,  2.6854e+00,  4.5895e-01,
          2.7313e-01, -8.8730e-02,  4.3010e-01, -7.3883e-01, -2.0469e-01,
         -1.8174e-01,  4.9026e-01, -6.9344e-01, -2.7745e-01,  3.4041e-01,
         -1.6402e-02,  2.3927e-01, -9.0725e-01,  1.1504e-01, -3.5870e-03,
          3.4488e-01, -2.8112e-01,  2.2675e-01, -2.6382e-01,  4.1177e-02,
         -6.6284e-01, -1.6692e-01, -4.7135e-01, -1.2379e-02, -3.5430e-01,
          9.5287e-03,  2.0982e-01,  2.2389e-01,  1.9322e-01,  3.8517e-01,
          1.3999e-01, -2.7380e-01, -4.8609e-02, -5.1843e-01,  5.1092e-01,
          7.6886e-02,  5.6003e-01,  4.5555e-01, -1.9667e-01,  2.1665e-02,
         -1.2005e+00, -6.1842e-02,  9.4792e-02,  3.5602e-01, -6.7421e-02,
         -9.9433e-02, -6.4011e-02, -1.7106e-01, -5.5018e-02,  2.3215e-01,
          5.0601e-02,  3.9992e-02, -1.7603e-01, -7.2214e-02, -6.0348e-02,
          1.9781e-02, -3.0940e-02,  9.7397e-02, -1.9593e-01,  3.9397e-01,
          1.2251e-02]], device='cuda:0') tensor(0.2244, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
122000 特征值优化 tensor(3.4546, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 6.0603,  1.5642,  1.9922,  2.8333,  0.5483,  0.2113, -0.0339,  0.3743,
         -0.6674, -0.2009, -0.1833,  0.5114, -0.6629, -0.2723,  0.3359, -0.0162,
          0.2360, -0.8932,  0.0952, -0.0257,  0.3732, -0.2514,  0.2424, -0.2334,
          0.0719, -0.6432, -0.1768, -0.4637,  0.0256, -0.3635,  0.0063,  0.2363,
          0.2197,  0.2022,  0.3636,  0.1350, -0.2729,  0.0105, -0.5774,  0.4994,
          0.0402,  0.6020,  0.4406, -0.2603,  0.0592, -1.2413, -0.0878,  0.1176,
          0.3614, -0.0637, -0.1528, -0.0780, -0.1205, -0.0585,  0.2223,  0.0452,
          0.0561, -0.1860, -0.0728, -0.0746,  0.0097, -0.0254,  0.1081, -0.2354,
          0.4165, -0.0184]], device='cuda:0') tensor(0.2817, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
123000 特征值优化 tensor(3.4502, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.9218e+00,  1.5245e+00,  2.0197e+00,  2.9251e+00,  5.7754e-01,
          1.6980e-01, -8.0982e-02,  3.1531e-01, -6.2975e-01, -1.9725e-01,
         -1.9276e-01,  5.0237e-01, -6.6614e-01, -2.9124e-01,  3.3300e-01,
         -3.4113e-02,  2.3109e-01, -8.8002e-01,  9.0111e-02, -2.1921e-02,
          3.8367e-01, -2.5828e-01,  2.3607e-01, -2.4532e-01,  7.8325e-02,
         -6.2858e-01, -1.6375e-01, -4.6772e-01,  1.5038e-02, -3.7254e-01,
          4.2658e-03,  2.5164e-01,  2.2149e-01,  2.0949e-01,  3.5926e-01,
          1.2361e-01, -2.5478e-01,  4.6116e-02, -5.9334e-01,  4.8433e-01,
          4.4383e-02,  6.0243e-01,  4.2240e-01, -3.0736e-01,  7.6622e-02,
         -1.2620e+00, -1.0076e-01,  1.3034e-01,  3.7014e-01, -7.4049e-02,
         -1.7152e-01, -8.5856e-02, -1.2494e-01, -5.1465e-02,  2.0835e-01,
          4.3186e-02,  6.2383e-02, -1.8530e-01, -7.2758e-02, -7.7845e-02,
          1.1065e-02, -2.0667e-02,  1.0298e-01, -2.4967e-01,  4.2009e-01,
         -1.7588e-02]], device='cuda:0') tensor(0.2624, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
124000 特征值优化 tensor(3.4457, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.8016e+00,  1.4686e+00,  2.0803e+00,  2.9951e+00,  5.8385e-01,
          1.1378e-01, -1.3110e-01,  2.5468e-01, -6.1233e-01, -1.9444e-01,
         -2.1140e-01,  4.9433e-01, -6.8139e-01, -3.0072e-01,  3.3578e-01,
         -4.9966e-02,  2.2629e-01, -8.6122e-01,  8.6640e-02, -1.2426e-02,
          3.8669e-01, -2.6245e-01,  2.3183e-01, -2.6418e-01,  7.9482e-02,
         -6.1995e-01, -1.4625e-01, -4.7256e-01,  9.2411e-03, -3.8022e-01,
          1.7005e-03,  2.6513e-01,  2.2398e-01,  2.1097e-01,  3.4873e-01,
          1.0806e-01, -2.4184e-01,  9.2282e-02, -6.0343e-01,  4.7042e-01,
          4.8244e-02,  5.9948e-01,  4.0197e-01, -3.5769e-01,  9.5163e-02,
         -1.2789e+00, -1.0957e-01,  1.4689e-01,  3.7861e-01, -7.5431e-02,
         -1.8110e-01, -9.6444e-02, -1.2561e-01, -4.3065e-02,  1.9816e-01,
          4.1601e-02,  6.6320e-02, -1.8670e-01, -7.7263e-02, -7.8300e-02,
          1.3456e-02, -1.8144e-02,  1.0009e-01, -2.5742e-01,  4.2761e-01,
         -2.3624e-02]], device='cuda:0') tensor(0.2618, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
125000 正交保障 tensor(0.2499, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.6518e+00,  1.4045e+00,  2.1552e+00,  3.0656e+00,  5.9129e-01,
          4.7837e-02, -1.7599e-01,  1.9035e-01, -5.9274e-01, -1.9816e-01,
         -2.3089e-01,  4.8774e-01, -6.8914e-01, -3.1955e-01,  3.3484e-01,
         -6.1891e-02,  2.2031e-01, -8.3952e-01,  8.4555e-02, -9.7817e-03,
          3.8979e-01, -2.6311e-01,  2.2707e-01, -2.8156e-01,  8.1625e-02,
         -6.0780e-01, -1.2667e-01, -4.7674e-01, -4.4887e-03, -3.8966e-01,
         -6.5565e-03,  2.7893e-01,  2.2646e-01,  2.1549e-01,  3.3655e-01,
          9.1910e-02, -2.1375e-01,  1.3442e-01, -6.1594e-01,  4.5584e-01,
          5.4849e-02,  5.7921e-01,  3.7631e-01, -4.1907e-01,  1.0967e-01,
         -1.2969e+00, -1.1851e-01,  1.6693e-01,  3.8917e-01, -7.7232e-02,
         -1.9102e-01, -1.0285e-01, -1.2457e-01, -3.7167e-02,  1.8168e-01,
          4.0430e-02,  7.0851e-02, -1.8754e-01, -7.9552e-02, -7.9528e-02,
          1.6118e-02, -1.4447e-02,  9.6382e-02, -2.6721e-01,  4.2914e-01,
         -2.5128e-02]], device='cuda:0') tensor(0.2499, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
126000 特征值优化 tensor(3.4359, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.4774,  1.3440,  2.2282,  3.1457,  0.5966, -0.0174, -0.2145,  0.1425,
         -0.5661, -0.2032, -0.2531,  0.4857, -0.6974, -0.3424,  0.3374, -0.0748,
          0.2125, -0.8177,  0.0816, -0.0078,  0.3890, -0.2658,  0.2154, -0.3120,
          0.0809, -0.5946, -0.1063, -0.4834, -0.0139, -0.3966, -0.0188,  0.2953,
          0.2246,  0.2220,  0.3245,  0.0833, -0.1851,  0.1776, -0.6279,  0.4427,
          0.0476,  0.5648,  0.3441, -0.4681,  0.1271, -1.3187, -0.1281,  0.1860,
          0.3994, -0.0692, -0.1971, -0.1080, -0.1170, -0.0320,  0.1665,  0.0427,
          0.0745, -0.1895, -0.0822, -0.0794,  0.0183, -0.0137,  0.0909, -0.2733,
          0.4297, -0.0204]], device='cuda:0') tensor(0.2471, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
127000 特征值优化 tensor(3.4319, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.3026,  1.3030,  2.2660,  3.2405,  0.6049, -0.0664, -0.2411,  0.1023,
         -0.5377, -0.1980, -0.2601,  0.4865, -0.6978, -0.3560,  0.3343, -0.0803,
          0.1998, -0.7994,  0.0788, -0.0093,  0.3902, -0.2674,  0.1969, -0.3282,
          0.0840, -0.5747, -0.0970, -0.4843, -0.0257, -0.3989, -0.0276,  0.3092,
          0.2284,  0.2233,  0.3187,  0.0809, -0.1545,  0.2155, -0.6435,  0.4331,
          0.0491,  0.5539,  0.3230, -0.5191,  0.1405, -1.3371, -0.1330,  0.1989,
          0.4082, -0.0634, -0.2111, -0.1110, -0.1111, -0.0268,  0.1545,  0.0385,
          0.0803, -0.1879, -0.0840, -0.0791,  0.0230, -0.0120,  0.0836, -0.2832,
          0.4300, -0.0144]], device='cuda:0') tensor(0.3068, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
128000 特征值优化 tensor(28.3807, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.2414, -1.4640,  0.7552,  0.4221, -0.1554,  0.2356, -0.5251,  1.1052,
         -0.7608, -1.0477, -0.0077, -0.1601, -0.6918,  0.9118, -0.3362, -0.5104,
          0.2994, -0.8311, -0.1513,  0.5401,  0.9640,  0.1036, -0.9732,  0.6221,
         -0.5128,  0.3724,  1.0895,  0.4014,  0.7995, -0.7273, -0.3013,  0.8879,
          0.1676, -1.4436,  0.4480, -0.1791, -0.7662,  0.3050,  1.3225,  0.6172,
          1.1280, -0.5425,  0.8859,  0.0347, -0.0752, -0.3152,  0.4595,  0.5505,
         -0.4038, -0.0578,  0.0952,  0.9938, -0.0183,  0.4260, -1.1155, -0.9414,
          0.4871,  0.4828, -1.5596, -0.0610,  0.4206, -0.8605, -1.1090,  1.0376,
          1.8482,  0.5365]], device='cuda:0') tensor(0.9670, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
129000 特征值优化 tensor(7.5440, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0411, -0.3254,  1.9656,  1.4482, -0.3144, -0.1024, -0.3983,  0.3835,
         -0.0586, -0.3225, -0.1500,  0.2404,  0.0832,  0.4075,  0.1223,  0.0309,
          0.0101, -0.2784, -0.1174,  0.4715,  0.5410,  0.1727, -0.2757,  0.1347,
         -0.2229, -0.2154,  0.4166,  0.1235,  0.1507, -0.1913, -0.1962,  0.2419,
          0.0578, -0.5914,  0.0193, -0.0932, -0.3436,  0.4128,  0.6564,  0.4217,
          0.5800, -0.5314,  0.3055,  0.0143,  0.1758,  0.0575,  0.1973,  0.1780,
         -0.0789,  0.0483,  0.0523,  0.2677,  0.0797,  0.0448, -0.3637, -0.2383,
          0.2504,  0.3568, -0.6794, -0.0207,  0.0503, -0.3261, -0.2466,  0.3058,
          0.8758,  0.0602]], device='cuda:0') tensor(0.4199, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
130000 特征值优化 tensor(5.0852, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.8749,  0.5002,  2.9536,  2.2062, -0.2867, -0.3130, -0.3937,  0.1616,
          0.3279, -0.1888, -0.1879,  0.5223,  0.1398,  0.1931,  0.3712,  0.1340,
         -0.0185, -0.3584, -0.1012,  0.2707,  0.3178,  0.3181, -0.2058,  0.2323,
         -0.2209, -0.3329,  0.1865,  0.0909, -0.0485, -0.1524, -0.3422,  0.2593,
          0.1309, -0.3513, -0.0367,  0.1576, -0.2678,  0.6621,  0.4931,  0.4388,
          0.4711, -0.5168,  0.5240,  0.0776,  0.0968,  0.3707,  0.1786,  0.1733,
         -0.1734,  0.2226,  0.1152,  0.1762,  0.0290,  0.1057, -0.2355, -0.0780,
          0.2605,  0.3024, -0.4974,  0.0252, -0.0554, -0.4690, -0.1851,  0.2411,
          0.3698, -0.0801]], device='cuda:0') tensor(0.3736, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
131000 特征值优化 tensor(4.3770, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.3037,  1.1107,  3.5309,  2.6181, -0.2366, -0.4705, -0.1268, -0.0302,
          0.4814, -0.2464,  0.0668,  0.7572,  0.2334,  0.0603,  0.5081,  0.1198,
          0.0551, -0.5214, -0.0541,  0.0328,  0.3242,  0.3316, -0.1407,  0.2495,
         -0.3285, -0.1995,  0.0990,  0.0582, -0.0672, -0.2058, -0.2659,  0.2701,
          0.2041, -0.2504,  0.0690,  0.2094, -0.1990,  0.7505,  0.3226,  0.2214,
          0.3702, -0.5037,  0.6364,  0.1571, -0.1167,  0.7983,  0.1321,  0.1799,
         -0.1941,  0.3359,  0.1933,  0.1890, -0.0987,  0.1946, -0.1560, -0.0393,
          0.1508,  0.2063, -0.4850, -0.0082, -0.0680, -0.5031, -0.1055,  0.2046,
          0.1439, -0.1342]], device='cuda:0') tensor(0.2674, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
132000 特征值优化 tensor(3.9202, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.2629e+00,  1.5377e+00,  3.9138e+00,  2.9681e+00, -1.5348e-01,
         -5.9915e-01,  1.5370e-02, -1.8964e-01,  5.2786e-01, -4.2780e-01,
          1.1698e-01,  7.9748e-01,  2.7099e-01,  2.4576e-02,  6.0190e-01,
          7.8438e-02,  7.8811e-02, -6.5612e-01, -4.8803e-02,  4.5855e-02,
          4.9426e-01,  3.6972e-01, -1.5597e-01,  3.3296e-01, -3.6125e-01,
         -1.4601e-01,  3.1760e-02,  1.4431e-02, -7.3558e-02, -1.8259e-01,
         -2.2718e-01,  2.8377e-01,  2.3332e-01, -2.1423e-01,  7.0728e-02,
          1.9426e-01, -1.2824e-01,  6.1976e-01,  2.4968e-01,  2.2421e-01,
          2.8159e-01, -4.3529e-01,  5.0410e-01,  2.8709e-01, -3.4650e-01,
          8.4719e-01,  4.7965e-02,  1.6623e-01, -1.2668e-01,  3.8455e-01,
          2.2954e-01,  1.1365e-01, -8.0659e-02,  2.1021e-01, -1.0833e-01,
         -5.7025e-02,  1.5365e-01,  1.8990e-01, -4.6280e-01, -2.4417e-03,
         -6.8236e-02, -4.9746e-01, -4.0394e-02,  2.1354e-02,  1.5318e-01,
          8.0616e-02]], device='cuda:0') tensor(0.2679, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
133000 正交保障 tensor(0.2560, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.7427e+00,  1.9111e+00,  4.0272e+00,  3.1643e+00, -1.8348e-03,
         -6.6627e-01,  9.6591e-02, -1.7140e-01,  5.1746e-01, -6.8264e-01,
          1.8887e-01,  8.7084e-01,  1.7728e-01,  6.4714e-02,  5.9803e-01,
          5.3919e-02,  6.0426e-02, -7.9138e-01, -3.7038e-02,  1.0834e-01,
          5.9095e-01,  3.6454e-01, -2.3929e-01,  3.7956e-01, -3.9363e-01,
          2.0660e-02,  6.6811e-03, -1.3141e-03, -6.5588e-02, -1.1535e-01,
         -1.4197e-01,  2.3224e-01,  2.5473e-01, -1.5784e-01,  1.3582e-02,
          1.1351e-01, -4.7816e-03,  5.7779e-01,  3.0130e-01,  2.9392e-01,
          1.0644e-01, -3.8836e-01,  2.2565e-01,  4.1402e-01, -5.0768e-01,
          8.7337e-01, -2.2066e-03,  1.7262e-01,  6.6941e-03,  4.0289e-01,
          2.0857e-01,  5.7501e-02, -1.1364e-01,  7.2643e-02,  9.0091e-03,
         -1.9941e-02,  1.4602e-01,  1.6926e-01, -3.9396e-01, -5.9889e-03,
         -6.0582e-02, -4.9559e-01, -1.9145e-02, -1.1542e-01,  1.5359e-01,
          3.5592e-01]], device='cuda:0') tensor(0.2560, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
134000 特征值优化 tensor(3.5745, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1879e+00,  2.1059e+00,  3.8518e+00,  3.1023e+00,  7.9145e-02,
         -7.4983e-01,  5.8531e-02, -1.6351e-01,  4.1801e-01, -6.9274e-01,
          2.3923e-01,  8.8061e-01,  5.6025e-03,  1.2278e-01,  5.9437e-01,
          1.0833e-01, -1.2775e-02, -8.2789e-01, -2.7151e-03,  2.6422e-01,
          6.0364e-01,  3.1799e-01, -3.0162e-01,  3.9694e-01, -4.2533e-01,
          2.6472e-01,  2.7751e-03, -5.1359e-04, -7.7492e-02, -7.1142e-02,
         -9.4433e-02,  2.2528e-01,  2.4813e-01, -9.8226e-02, -1.7195e-02,
         -2.9135e-02,  9.5944e-02,  5.1986e-01,  2.4312e-01,  2.6491e-01,
          3.1788e-02, -3.5477e-01,  1.0141e-01,  5.5805e-01, -4.4439e-01,
          9.0006e-01, -2.2290e-02,  1.9475e-01,  1.9920e-02,  3.8649e-01,
          1.7095e-01,  3.8336e-02, -1.5095e-01,  5.6562e-03,  9.0817e-02,
          1.8097e-02,  9.2933e-02,  1.7990e-01, -3.4537e-01, -1.5997e-03,
         -7.4715e-02, -5.1569e-01, -1.1706e-01, -2.0457e-01,  1.6962e-01,
          5.1870e-01]], device='cuda:0') tensor(0.2444, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
135000 特征值优化 tensor(3.5487, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0418e+00,  2.1222e+00,  3.7568e+00,  3.0727e+00,  6.6574e-02,
         -7.9078e-01,  7.8512e-03, -1.3984e-01,  3.6413e-01, -6.4866e-01,
          2.4116e-01,  8.5718e-01, -1.0543e-01,  1.8362e-01,  5.9000e-01,
          1.1711e-01, -3.2562e-02, -8.2927e-01,  2.9596e-02,  2.7649e-01,
          5.9850e-01,  2.5123e-01, -3.0708e-01,  3.9810e-01, -4.5355e-01,
          3.8173e-01,  7.5409e-04,  1.2329e-03, -9.0946e-02, -5.4692e-02,
         -8.7036e-02,  2.1468e-01,  2.6724e-01, -7.1491e-02, -2.9801e-02,
         -6.3827e-02,  1.2374e-01,  4.1730e-01,  2.3028e-01,  2.6045e-01,
          1.9839e-02, -3.3829e-01,  8.1083e-02,  5.9280e-01, -4.1790e-01,
          8.9568e-01, -2.1599e-02,  2.0613e-01,  6.5201e-03,  3.7778e-01,
          1.6861e-01,  3.7989e-02, -1.7968e-01, -1.4927e-02,  1.2706e-01,
          4.1354e-02,  5.5245e-02,  1.9051e-01, -3.1144e-01, -7.2254e-03,
         -8.1423e-02, -5.1400e-01, -1.3388e-01, -2.2211e-01,  2.0075e-01,
          5.2974e-01]], device='cuda:0') tensor(0.3103, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
136000 特征值优化 tensor(3.5335, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0693e+00,  2.0095e+00,  3.7721e+00,  3.0536e+00,  4.0257e-02,
         -8.0920e-01,  8.3878e-03, -1.0031e-01,  3.3486e-01, -6.0772e-01,
          2.2935e-01,  8.1528e-01, -2.1867e-01,  2.4005e-01,  5.9236e-01,
          1.3030e-01, -3.9178e-02, -8.1275e-01,  4.4799e-02,  2.8888e-01,
          5.9333e-01,  2.2721e-01, -3.0911e-01,  3.7993e-01, -4.6816e-01,
          4.3224e-01,  2.4598e-03,  5.1962e-03, -9.7633e-02, -4.5973e-02,
         -9.9578e-02,  2.2901e-01,  2.9582e-01, -4.8585e-02, -1.9341e-02,
         -8.4557e-02,  1.1960e-01,  3.2629e-01,  2.2213e-01,  2.7247e-01,
         -4.1142e-03, -3.3979e-01,  9.5288e-02,  6.3047e-01, -4.0555e-01,
          9.3293e-01, -1.7757e-02,  2.0773e-01, -7.9794e-03,  3.6045e-01,
          1.7881e-01,  3.9707e-02, -1.8478e-01, -3.1748e-02,  1.3850e-01,
          4.1838e-02,  3.9763e-02,  1.9927e-01, -2.7403e-01, -3.0630e-02,
         -9.9758e-02, -5.0732e-01, -1.6483e-01, -2.1575e-01,  2.7370e-01,
          4.9876e-01]], device='cuda:0') tensor(0.3102, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
137000 特征值优化 tensor(3.5209, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0477e+00,  1.8790e+00,  3.8654e+00,  3.1492e+00,  3.2665e-02,
         -7.8627e-01, -6.4166e-03, -4.7503e-02,  3.2083e-01, -6.1284e-01,
          1.9450e-01,  7.9603e-01, -3.5263e-01,  2.8997e-01,  5.9240e-01,
          1.4224e-01, -3.2578e-02, -7.8580e-01,  4.4970e-02,  2.7947e-01,
          5.9279e-01,  2.1903e-01, -3.1549e-01,  3.5524e-01, -4.7110e-01,
          4.3436e-01,  3.2791e-03,  4.8144e-03, -1.0419e-01, -3.8430e-02,
         -1.1138e-01,  2.4408e-01,  3.2257e-01, -4.1717e-02, -1.1417e-02,
         -8.6740e-02,  1.2369e-01,  2.7558e-01,  2.1227e-01,  2.8836e-01,
         -6.1998e-02, -3.5372e-01,  9.6813e-02,  6.5813e-01, -4.1714e-01,
          9.9310e-01, -1.2297e-02,  2.0468e-01, -1.0213e-02,  3.5122e-01,
          1.7779e-01,  4.6837e-02, -1.8546e-01, -4.5955e-02,  1.3007e-01,
          3.0359e-02,  1.6511e-02,  1.9570e-01, -2.1924e-01, -4.5710e-02,
         -1.1118e-01, -4.9980e-01, -1.8714e-01, -1.9991e-01,  3.2908e-01,
          4.6953e-01]], device='cuda:0') tensor(0.2881, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
138000 正交保障 tensor(0.2409, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.8172e-01,  1.7850e+00,  3.9526e+00,  3.2111e+00,  2.8036e-02,
         -7.7321e-01, -3.4502e-02,  1.2078e-02,  3.1238e-01, -6.0088e-01,
          1.5177e-01,  7.8316e-01, -5.0134e-01,  3.2191e-01,  5.9108e-01,
          1.6246e-01, -2.1454e-02, -7.5331e-01,  3.4821e-02,  2.6271e-01,
          5.9306e-01,  2.1691e-01, -3.1758e-01,  3.3252e-01, -4.6997e-01,
          4.4166e-01,  1.6010e-03,  4.3775e-03, -1.0804e-01, -2.8146e-02,
         -1.1907e-01,  2.6350e-01,  3.4524e-01, -4.6551e-02, -4.4632e-03,
         -9.1068e-02,  1.3406e-01,  2.4491e-01,  1.8054e-01,  3.1209e-01,
         -1.0890e-01, -3.6953e-01,  1.0189e-01,  6.8244e-01, -4.2262e-01,
          1.0211e+00, -1.2151e-02,  2.0054e-01, -1.0173e-02,  3.4382e-01,
          1.6585e-01,  5.2109e-02, -1.8076e-01, -5.7136e-02,  1.1413e-01,
          1.4989e-02, -6.1222e-03,  1.8971e-01, -1.5321e-01, -5.4466e-02,
         -1.2798e-01, -4.8172e-01, -2.0919e-01, -1.7267e-01,  3.6887e-01,
          4.3914e-01]], device='cuda:0') tensor(0.2409, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
139000 正交保障 tensor(0.2695, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.3604e-01,  1.7204e+00,  4.0390e+00,  3.2615e+00,  2.0492e-02,
         -7.7043e-01, -6.5665e-02,  5.7089e-02,  3.1303e-01, -6.0243e-01,
          1.1996e-01,  7.7481e-01, -6.3270e-01,  3.5401e-01,  5.9180e-01,
          1.7179e-01, -1.3426e-02, -7.2833e-01,  2.3080e-02,  2.5119e-01,
          5.9300e-01,  2.0754e-01, -3.1782e-01,  3.1359e-01, -4.6737e-01,
          4.4689e-01, -4.2970e-04,  6.7139e-03, -1.0856e-01, -1.8360e-02,
         -1.2224e-01,  2.7471e-01,  3.5850e-01, -5.1606e-02,  3.9908e-03,
         -9.4688e-02,  1.4179e-01,  2.2411e-01,  1.4818e-01,  3.1948e-01,
         -1.3674e-01, -3.8501e-01,  1.1098e-01,  7.0052e-01, -4.3500e-01,
          1.0573e+00, -1.0742e-02,  1.9856e-01, -4.4334e-03,  3.3752e-01,
          1.5447e-01,  5.9085e-02, -1.7893e-01, -6.1958e-02,  1.0161e-01,
          5.6373e-03, -1.7850e-02,  1.8216e-01, -1.0487e-01, -6.0393e-02,
         -1.2885e-01, -4.6648e-01, -2.2796e-01, -1.5254e-01,  3.9339e-01,
          4.1488e-01]], device='cuda:0') tensor(0.2695, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
140000 特征值优化 tensor(36.2659, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.1219, -0.3791,  2.0565,  0.9450, -0.7468,  1.5417, -0.3269,  0.0195,
          0.4428,  0.7531,  0.4043,  0.0130,  0.6364,  0.0245,  1.6835,  0.0671,
          1.0720,  0.8142, -0.0492,  1.6730,  0.2596,  1.5099, -0.9661, -2.3591,
         -1.3866,  0.1163, -0.5653,  1.1052, -0.1837, -0.1141,  1.8083,  1.7580,
          0.2362, -1.2945,  0.7003,  0.3946,  0.6563,  0.6172, -0.6604,  0.3011,
          1.8215,  0.2062, -0.1681, -0.9636, -0.8182,  1.1091,  0.6471, -1.2140,
         -0.3551, -0.0333, -0.6309, -0.3656, -0.0887, -0.4406, -0.8539, -0.8301,
          1.6541,  1.6930, -0.7754,  0.1433,  0.4406, -0.5008, -0.5163, -0.6106,
          0.1230, -0.3647]], device='cuda:0') tensor(1.1949, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
141000 正交保障 tensor(0.3639, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.7658,  0.8734,  3.1761,  1.8221, -0.5600,  1.2799, -0.1780, -0.1434,
          0.1712,  0.4249, -0.2096, -0.1142,  0.5801,  0.2729,  0.8721, -0.0044,
          0.2710,  0.1265,  0.0320,  0.8321,  0.1322,  0.5991, -0.2518, -1.3728,
         -0.5424,  0.5503, -0.0252,  0.1237, -0.0591,  0.0372,  0.8364,  0.7362,
         -0.0815, -0.5302,  0.1533,  0.0245, -0.0073,  0.1474, -0.1287,  0.1856,
          0.8189, -0.4600, -0.4120, -0.1365, -0.0987,  1.6758,  0.1878, -0.5173,
          0.0627, -0.0499, -0.1432, -0.1540, -0.2714, -0.0554, -0.1788, -0.2082,
          0.8858,  0.8673, -0.4566,  0.1306, -0.1623, -0.4160, -0.1204, -0.0856,
         -0.0250,  0.1356]], device='cuda:0') tensor(0.3639, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
142000 特征值优化 tensor(3.7264, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.8805e+00,  1.6823e+00,  4.2216e+00,  2.3823e+00, -1.7701e-01,
          6.3278e-01, -3.0376e-01, -4.4334e-01,  8.5996e-03, -5.3606e-02,
         -1.2023e-01,  3.8693e-01,  5.0625e-01,  1.3308e-01,  6.5723e-01,
          1.4938e-01,  6.3344e-02,  7.7374e-03, -8.5351e-02,  8.0245e-01,
          5.2776e-01,  3.6221e-01, -2.2811e-01, -7.1825e-01, -2.5628e-01,
          4.0249e-01,  7.0707e-03,  9.3770e-03, -1.6784e-04, -1.4721e-02,
          4.6057e-01,  3.0140e-01,  6.5848e-02, -4.0949e-01,  1.6804e-01,
          2.2980e-02, -5.9621e-02,  1.3933e-01,  1.7088e-01,  1.1982e-01,
         -1.0222e-01, -4.8127e-01,  6.6340e-02,  4.6157e-01, -2.9274e-01,
          1.5902e+00,  4.8254e-02, -1.7341e-01,  3.0408e-02, -1.7885e-01,
         -8.9213e-02, -1.4405e-01, -1.1201e-01,  1.0349e-01,  5.3763e-03,
         -2.2203e-02,  4.7883e-01,  3.3618e-01, -3.6222e-01,  1.3897e-01,
         -1.4471e-01, -1.7602e-01, -6.0948e-02, -1.0225e-02,  2.4806e-01,
          1.9720e-01]], device='cuda:0') tensor(0.2436, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
143000 特征值优化 tensor(2.9926, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.4483e+00,  1.8174e+00,  4.8960e+00,  2.9961e+00,  7.2949e-03,
          4.2717e-01, -2.4425e-01, -4.0019e-01,  9.4380e-02, -2.4157e-01,
         -3.4255e-02,  5.8589e-01,  1.6020e-01,  5.7061e-02,  6.5810e-01,
          2.8308e-01,  2.3049e-01, -1.5668e-01, -1.2546e-01,  7.6603e-01,
          5.9996e-01,  1.6916e-01, -3.2095e-01, -3.9037e-01, -2.9394e-01,
          5.5567e-01,  7.5516e-03,  3.6859e-03, -1.6075e-02, -3.0548e-02,
          4.0274e-01,  1.9934e-01,  1.6735e-01, -4.0950e-01,  1.3305e-01,
         -7.2196e-02,  6.6909e-02,  2.4419e-01,  1.4490e-01,  2.2027e-01,
         -5.7904e-01, -5.3049e-01,  1.0559e-01,  7.3681e-01, -3.5130e-01,
          1.4299e+00, -1.4407e-03, -1.0438e-01, -1.9861e-02, -1.0681e-01,
         -3.1541e-02, -1.2242e-01, -8.5900e-02,  1.3873e-01, -2.4298e-02,
          2.3315e-02,  3.0547e-01,  1.7161e-01, -3.1711e-01,  1.2937e-01,
         -6.2997e-02, -1.6219e-01, -6.1077e-02, -2.7007e-02,  2.5618e-01,
          1.6854e-01]], device='cuda:0') tensor(0.2001, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
144000 特征值优化 tensor(2.8282, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1610e+00,  1.5917e+00,  4.9723e+00,  3.4051e+00,  1.7183e-01,
          3.0295e-01, -1.2520e-01, -4.1422e-01,  6.3585e-02, -3.8803e-01,
          5.6898e-03,  5.8143e-01, -5.8458e-02,  2.2601e-01,  6.5689e-01,
          2.4617e-01,  2.3824e-01, -3.0543e-01, -5.1376e-02,  7.4881e-01,
          6.1490e-01,  7.1878e-02, -3.7015e-01, -2.3620e-01, -3.7985e-01,
          6.1220e-01,  4.7941e-03,  5.1838e-03, -1.6571e-02, -3.6430e-02,
          3.7189e-01,  1.7272e-01,  1.8085e-01, -3.5651e-01,  9.1657e-02,
         -1.2824e-01,  1.1560e-01,  3.0541e-01,  2.0562e-01,  2.4636e-01,
         -7.4120e-01, -5.3078e-01,  1.1567e-01,  8.7002e-01, -3.8241e-01,
          1.4995e+00, -4.5242e-02, -6.9807e-02, -2.9194e-02, -9.6383e-02,
          2.5298e-02, -1.0023e-01, -4.9855e-02,  8.0948e-02, -2.4675e-02,
          6.6276e-02,  2.0686e-01,  7.8166e-02, -2.8730e-01,  8.1773e-02,
         -2.1520e-02, -1.3047e-01, -5.3163e-02,  3.0516e-02,  2.2512e-01,
          1.0359e-01]], device='cuda:0') tensor(0.2223, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
145000 特征值优化 tensor(2.7868, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2796e+00,  1.5015e+00,  4.8409e+00,  3.5867e+00,  2.6220e-01,
          3.1002e-01, -3.3741e-02, -4.6454e-01,  9.2637e-02, -4.6960e-01,
         -4.9681e-03,  5.2333e-01, -9.2341e-02,  4.0144e-01,  6.7412e-01,
          2.4493e-01,  2.1980e-01, -3.7561e-01, -1.8249e-02,  7.4269e-01,
          6.1659e-01,  3.8333e-02, -3.7968e-01, -1.6280e-01, -4.2270e-01,
          5.9410e-01,  1.0592e-03, -4.0141e-03, -9.3709e-03, -3.7633e-02,
          3.5205e-01,  1.5250e-01,  1.7743e-01, -3.4008e-01,  8.1883e-02,
         -1.2060e-01,  9.7859e-02,  2.7784e-01,  2.3625e-01,  2.7745e-01,
         -8.1377e-01, -5.0216e-01,  1.5902e-01,  9.1669e-01, -4.2058e-01,
          1.5132e+00, -6.9345e-02, -7.7161e-02, -5.7811e-02, -7.4564e-02,
          4.0060e-02, -1.0416e-01, -2.0637e-02,  6.3056e-02, -2.8924e-02,
          1.0048e-01,  1.4111e-01,  3.6632e-02, -2.7231e-01,  5.6599e-02,
          2.4235e-02, -9.3051e-02, -6.1534e-02,  1.0316e-01,  2.3572e-01,
          3.6570e-02]], device='cuda:0') tensor(0.2516, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
146000 特征值优化 tensor(2.7412, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.3608e+00,  1.4939e+00,  4.7323e+00,  3.6017e+00,  2.8386e-01,
          4.1158e-01,  7.6457e-02, -4.5628e-01,  1.4878e-02, -5.5021e-01,
         -2.6812e-03,  3.7759e-01, -2.1099e-01,  6.2255e-01,  6.6535e-01,
          3.1888e-01,  1.8564e-01, -4.1943e-01,  2.7085e-03,  7.5593e-01,
          6.1123e-01,  4.7212e-02, -3.8004e-01, -1.2075e-01, -4.3943e-01,
          5.9693e-01,  7.7004e-03, -1.4185e-02,  3.7646e-02, -2.9540e-02,
          2.8333e-01,  9.9387e-02,  1.4336e-01, -3.0608e-01,  1.0111e-01,
         -1.0038e-01,  8.8731e-02,  2.4846e-01,  2.1022e-01,  2.7091e-01,
         -8.0036e-01, -4.9450e-01,  1.9592e-01,  8.7078e-01, -4.3651e-01,
          1.5333e+00, -7.2633e-02, -1.1058e-01, -1.1929e-01, -5.5136e-02,
          8.0636e-03, -1.0948e-01,  7.7017e-02,  1.5747e-01,  4.7474e-03,
          1.3217e-01,  9.1668e-02,  3.0361e-02, -2.6477e-01,  5.1257e-02,
          1.1063e-01, -9.4795e-02, -5.4655e-02,  1.6575e-01,  2.2069e-01,
         -2.1099e-02]], device='cuda:0') tensor(0.2175, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
147000 正交保障 tensor(0.2665, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.3394,  1.6046,  4.7364,  3.6186,  0.3262,  0.5152,  0.1790, -0.4765,
         -0.1701, -0.5214, -0.0570,  0.1614, -0.3024,  0.9173,  0.6558,  0.3547,
          0.1919, -0.4329,  0.0420,  0.7524,  0.6148,  0.0718, -0.3713, -0.0921,
         -0.4588,  0.6167, -0.0073, -0.0189,  0.0782, -0.0652,  0.1108,  0.1310,
          0.1420, -0.2424,  0.1263, -0.0758,  0.0960,  0.2241,  0.1399,  0.1988,
         -0.7071, -0.4919,  0.2551,  0.8485, -0.4299,  1.5183, -0.0859, -0.1378,
         -0.1376, -0.0469, -0.0182, -0.0728,  0.2083,  0.1638,  0.0606,  0.1294,
          0.0897,  0.0803, -0.2470,  0.0395,  0.1346, -0.1486, -0.0608,  0.1836,
          0.2035, -0.0670]], device='cuda:0') tensor(0.2665, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
148000 特征值优化 tensor(2.6618, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.3053,  1.6462,  4.7432,  3.5651,  0.3583,  0.5162,  0.2099, -0.5008,
         -0.1655, -0.5146, -0.0931,  0.0599, -0.2613,  1.0543,  0.6523,  0.3345,
          0.2137, -0.4614,  0.0441,  0.7487,  0.6138,  0.0817, -0.3731, -0.0679,
         -0.4655,  0.6129, -0.0106, -0.0162,  0.0758, -0.0884,  0.0565,  0.1741,
          0.1693, -0.2049,  0.1314, -0.0547,  0.1054,  0.2164,  0.1303,  0.1844,
         -0.6700, -0.4905,  0.2712,  0.8468, -0.4218,  1.4898, -0.0955, -0.1382,
         -0.1540, -0.0428, -0.0104, -0.0529,  0.2344,  0.1178,  0.0621,  0.1250,
          0.1138,  0.0865, -0.2646,  0.0144,  0.1188, -0.1479, -0.0665,  0.1816,
          0.1978, -0.0571]], device='cuda:0') tensor(0.2175, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
149000 特征值优化 tensor(2.6552, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.3431e+00,  1.6755e+00,  4.7642e+00,  3.4999e+00,  3.7838e-01,
          4.9214e-01,  2.2128e-01, -5.3566e-01, -1.2933e-01, -5.0790e-01,
         -1.1650e-01,  8.2583e-03, -2.1125e-01,  1.1354e+00,  6.5040e-01,
          3.1693e-01,  2.3916e-01, -4.7925e-01,  3.8709e-02,  7.4478e-01,
          6.1233e-01,  9.4754e-02, -3.6451e-01, -5.1819e-02, -4.6880e-01,
          6.0502e-01, -6.5487e-03, -1.9497e-02,  6.8421e-02, -9.9854e-02,
          2.4968e-02,  2.0055e-01,  1.9093e-01, -1.8113e-01,  1.3644e-01,
         -3.7686e-02,  9.7007e-02,  1.9930e-01,  1.2267e-01,  1.6936e-01,
         -6.4513e-01, -4.9105e-01,  2.7993e-01,  8.3172e-01, -4.0762e-01,
          1.4613e+00, -9.7560e-02, -1.3709e-01, -1.5207e-01, -4.1388e-02,
         -3.0403e-03, -4.9863e-02,  2.4364e-01,  8.3900e-02,  5.5154e-02,
          1.2264e-01,  1.3094e-01,  9.0009e-02, -2.8714e-01, -1.2797e-02,
          1.1026e-01, -1.3413e-01, -6.2575e-02,  1.6995e-01,  2.0998e-01,
         -3.9830e-02]], device='cuda:0') tensor(0.2011, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
150000 特征值优化 tensor(2.6543, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.3773,  1.7072,  4.7737,  3.4463,  0.3796,  0.4876,  0.2205, -0.5544,
         -0.1146, -0.5087, -0.1309, -0.0181, -0.1846,  1.1919,  0.6528,  0.3130,
          0.2466, -0.4904,  0.0414,  0.7422,  0.6149,  0.1038, -0.3542, -0.0457,
         -0.4707,  0.5949, -0.0115, -0.0155,  0.0716, -0.1005,  0.0168,  0.2047,
          0.1948, -0.1808,  0.1412, -0.0252,  0.0939,  0.1909,  0.1186,  0.1636,
         -0.6194, -0.4962,  0.2817,  0.8203, -0.3924,  1.4425, -0.1018, -0.1300,
         -0.1552, -0.0438, -0.0048, -0.0502,  0.2404,  0.0667,  0.0526,  0.1239,
          0.1339,  0.0943, -0.2972, -0.0280,  0.1150, -0.1221, -0.0621,  0.1649,
          0.2196, -0.0256]], device='cuda:0') tensor(0.2366, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
151000 正交保障 tensor(0.2165, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.4083,  1.7701,  4.7998,  3.3448,  0.3723,  0.4757,  0.2110, -0.5718,
         -0.1152, -0.5221, -0.1140, -0.0496, -0.1936,  1.2681,  0.6553,  0.3102,
          0.2456, -0.5241,  0.0488,  0.7469,  0.6134,  0.1107, -0.3458, -0.0228,
         -0.4701,  0.5825, -0.0126, -0.0143,  0.0745, -0.1040,  0.0200,  0.2108,
          0.1995, -0.1870,  0.1375, -0.0117,  0.0880,  0.1748,  0.1252,  0.1721,
         -0.5718, -0.5026,  0.2854,  0.7900, -0.3782,  1.4015, -0.1011, -0.1256,
         -0.1512, -0.0441, -0.0087, -0.0521,  0.2395,  0.0692,  0.0524,  0.1207,
          0.1380,  0.1016, -0.3011, -0.0468,  0.1016, -0.1052, -0.0715,  0.1978,
          0.2362, -0.0490]], device='cuda:0') tensor(0.2165, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
152000 特征值优化 tensor(28.4100, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.0218,  0.7100,  0.9706,  0.6431, -0.9626,  1.0696, -0.4893,  0.0682,
         -0.2314, -0.5321,  0.5667,  0.5557, -0.6142,  0.2574, -0.9657, -0.0402,
          0.3432, -1.0459,  0.4807,  0.6096, -0.2744,  0.1830, -0.6474,  0.8794,
         -0.2691,  0.1485, -0.0425, -0.7385, -0.2875,  0.0132,  0.6964, -0.2918,
         -0.2362,  0.1558, -0.1334, -0.0347,  1.2680, -1.1013,  0.1130, -0.0878,
          1.3178,  0.4082, -0.6826,  0.0083, -1.1902,  0.7169,  0.4270, -1.5539,
          0.9527,  0.2757, -0.3862,  0.2586, -0.2300,  2.0097,  0.1186,  1.7764,
         -0.8334, -0.3263,  0.5979, -1.5203, -0.1462,  0.6716,  0.1671, -0.9608,
         -0.2405,  1.0242]], device='cuda:0') tensor(0.6013, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
153000 正交保障 tensor(0.3574, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 9.0514e-01,  1.5592e+00,  2.2482e+00,  1.6093e+00, -2.4271e-01,
          1.6303e+00, -3.1933e-01,  4.4348e-01, -5.1221e-02, -1.1043e+00,
          2.5402e-01,  1.4907e-01, -7.4322e-01,  8.1000e-01,  3.7250e-02,
          1.5564e-01,  7.2455e-02, -5.9256e-01,  1.0839e-01,  4.2829e-01,
          2.7210e-01,  8.1257e-02, -1.4465e-01,  2.5708e-01, -1.1308e-01,
          5.8179e-02,  3.2164e-02, -1.2752e-01, -1.2267e-02,  1.1992e-02,
          1.1489e-01, -3.1300e-01, -2.0099e-03,  8.4742e-02, -2.6359e-01,
         -6.3722e-02,  2.0609e-01, -5.2300e-01, -5.5922e-02,  1.6439e-01,
          9.3341e-01, -1.4401e-01, -9.4879e-02,  6.9793e-02, -6.8811e-01,
          7.4626e-01,  6.0713e-02, -7.3952e-01,  3.6473e-01,  1.3274e-01,
         -8.0156e-02,  4.0360e-02, -5.8114e-02,  1.1224e+00,  2.9374e-02,
          8.3952e-01, -4.6387e-01, -1.6381e-01,  2.6953e-01, -8.2768e-01,
          1.3180e-02,  3.0758e-01, -4.1584e-03, -1.8008e-01, -2.3029e-02,
          2.0363e-01]], device='cuda:0') tensor(0.3574, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
154000 特征值优化 tensor(4.5499, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.4845,  2.4189,  3.1790,  2.2680,  0.1669,  1.2180, -0.2999,  0.3508,
          0.0479, -0.8247, -0.2247, -0.1194, -0.5537,  1.0168,  0.3633,  0.2126,
         -0.0184, -0.5262, -0.0932,  0.4632,  0.1219,  0.1991, -0.0658,  0.2792,
         -0.0547,  0.3200,  0.1126, -0.1626,  0.0680,  0.0763,  0.0596,  0.1374,
          0.0913,  0.1885, -0.2263, -0.0236, -0.1476, -0.2240,  0.1650,  0.4208,
          0.7218, -0.4945, -0.3635,  0.0313, -0.4913,  0.6026,  0.0584, -0.4728,
          0.2456,  0.1131, -0.1705,  0.0137, -0.1426,  0.5065,  0.1134,  0.3791,
         -0.5363, -0.1102,  0.2212, -0.5373,  0.1340,  0.1966,  0.0823,  0.1861,
         -0.3432,  0.1493]], device='cuda:0') tensor(0.2872, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
155000 正交保障 tensor(0.2978, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2393e+00,  3.2324e+00,  3.6791e+00,  1.9968e+00,  1.9014e-01,
          9.7580e-01, -6.3232e-02,  3.8982e-02, -1.6130e-01, -6.4910e-01,
         -4.0294e-01, -3.7062e-01, -4.2110e-01,  7.0464e-01,  4.6701e-01,
          3.6820e-01, -5.0499e-02, -6.8045e-01, -4.2109e-03,  7.8712e-01,
          2.5316e-02,  3.5087e-01, -1.0140e-01,  4.3639e-01, -1.1035e-01,
          7.2317e-01,  1.1041e-01, -1.1257e-01,  1.1382e-01,  1.3008e-01,
          6.7502e-02,  1.9285e-01,  9.7687e-02,  1.5002e-01, -4.9138e-02,
          1.8216e-01, -1.5282e-02,  6.5437e-02,  3.6654e-02,  2.7318e-01,
          6.0719e-01, -7.1309e-01, -3.1660e-01, -3.5028e-02, -3.1412e-01,
          4.6702e-01,  6.4566e-02, -3.5036e-01,  1.9298e-01, -3.2312e-02,
         -1.4607e-01, -1.4138e-01, -1.5233e-01,  2.6392e-01,  9.7096e-02,
          2.2955e-01, -4.8736e-01,  7.6484e-04,  1.5840e-01, -4.1876e-01,
          1.8015e-01,  3.1320e-01, -2.4443e-03,  8.3075e-02, -2.5952e-01,
          1.0336e-01]], device='cuda:0') tensor(0.2978, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
156000 特征值优化 tensor(3.2608, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 8.9099e-01,  3.6208e+00,  3.9140e+00,  1.7382e+00,  3.1199e-01,
          8.5978e-01,  1.5830e-01,  3.6246e-02, -2.8125e-01, -6.6468e-01,
         -5.4256e-01, -3.9368e-01, -3.2584e-01,  5.6519e-01,  5.0751e-01,
          2.8420e-01, -1.4444e-02, -7.8373e-01,  4.1155e-02,  8.1055e-01,
          2.7568e-02,  3.8276e-01, -6.4150e-02,  4.8104e-01, -1.7681e-01,
          6.8074e-01,  1.1571e-01, -2.7926e-02,  1.1615e-01,  1.5278e-01,
          1.2608e-01,  1.9909e-01,  8.3693e-02,  8.6025e-02,  5.9542e-02,
          1.9582e-01,  8.1159e-02,  1.1347e-01,  5.3413e-04,  1.5886e-01,
          7.9812e-01, -7.4857e-01, -2.5004e-01, -2.0369e-02, -2.0302e-01,
          2.4716e-01,  3.8822e-02, -2.4131e-01,  1.1804e-01, -6.0615e-02,
         -8.3708e-02, -1.7562e-01, -1.3769e-01,  6.6088e-02,  9.3459e-02,
          1.9938e-01, -4.3219e-01, -3.4420e-02,  1.3680e-01, -3.4973e-01,
          1.9477e-01,  3.1536e-01, -3.9426e-02,  9.6827e-02, -1.7623e-01,
          5.8124e-02]], device='cuda:0') tensor(0.2962, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
157000 特征值优化 tensor(3.2050, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.7535,  3.8223,  4.0692,  1.6094,  0.3823,  0.7933,  0.2501,  0.0459,
         -0.2820, -0.6444, -0.5757, -0.4016, -0.2808,  0.6029,  0.4846,  0.1945,
          0.0338, -0.8278,  0.0641,  0.7818,  0.0785,  0.3695,  0.0140,  0.4756,
         -0.2145,  0.6502,  0.1244,  0.0151,  0.1085,  0.1750,  0.1153,  0.2392,
          0.0924,  0.0801,  0.0857,  0.1977,  0.0895,  0.0369,  0.0531,  0.0763,
          0.9312, -0.7426, -0.2087,  0.0343, -0.1396,  0.1266,  0.0283, -0.1805,
          0.1358, -0.1098, -0.0470, -0.1863, -0.1368, -0.0585,  0.0884,  0.1901,
         -0.3987, -0.0201,  0.1226, -0.3262,  0.1799,  0.2836, -0.0585,  0.1191,
         -0.1528,  0.0319]], device='cuda:0') tensor(0.3473, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
158000 正交保障 tensor(0.2874, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6563,  3.8869,  4.0719,  1.5858,  0.3835,  0.6899,  0.3291,  0.0747,
         -0.2811, -0.6611, -0.5289, -0.3929, -0.2637,  0.6674,  0.4566,  0.1691,
          0.0773, -0.8403,  0.0966,  0.7654,  0.0903,  0.3784,  0.0430,  0.5136,
         -0.2319,  0.6363,  0.1339,  0.0269,  0.1041,  0.1801,  0.0886,  0.2527,
          0.1115,  0.0759,  0.0835,  0.1856,  0.0881,  0.0595,  0.1219,  0.0333,
          0.9876, -0.7343, -0.2137,  0.0839, -0.0797,  0.0249,  0.0354, -0.1410,
          0.1735, -0.1331, -0.0210, -0.1777, -0.1252, -0.0971,  0.0884,  0.1946,
         -0.3970, -0.0049,  0.1129, -0.3116,  0.1744,  0.2582, -0.0723,  0.1496,
         -0.1291,  0.0151]], device='cuda:0') tensor(0.2874, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
159000 特征值优化 tensor(3.1853, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 6.5462e-01,  3.8895e+00,  4.0610e+00,  1.5796e+00,  3.7923e-01,
          6.5432e-01,  3.7622e-01,  8.7155e-02, -2.6858e-01, -6.4908e-01,
         -5.1488e-01, -3.9048e-01, -2.5987e-01,  7.0435e-01,  4.4854e-01,
          1.6367e-01,  9.0236e-02, -8.5044e-01,  1.0633e-01,  7.6695e-01,
          9.0130e-02,  3.8635e-01,  4.6691e-02,  5.2226e-01, -2.4450e-01,
          6.3364e-01,  1.3888e-01,  2.2891e-02,  1.0776e-01,  1.7820e-01,
          7.5254e-02,  2.6284e-01,  1.1404e-01,  7.8088e-02,  7.8468e-02,
          1.7965e-01,  8.2091e-02,  9.6746e-02,  1.3583e-01,  2.8861e-02,
          9.9443e-01, -7.3268e-01, -2.0971e-01,  9.9404e-02, -7.2544e-02,
          1.1142e-02,  4.1077e-02, -1.3515e-01,  1.7529e-01, -1.4030e-01,
         -1.0496e-02, -1.7300e-01, -1.2038e-01, -9.8361e-02,  8.6094e-02,
          1.9177e-01, -3.9754e-01,  1.2687e-03,  1.0871e-01, -3.0688e-01,
          1.6942e-01,  2.4739e-01, -8.5668e-02,  1.6042e-01, -1.2125e-01,
          1.5988e-02]], device='cuda:0') tensor(0.2771, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
160000 特征值优化 tensor(3.1845, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6743,  3.8849,  4.0493,  1.5891,  0.3789,  0.6384,  0.4095,  0.0994,
         -0.2619, -0.6368, -0.5099, -0.3889, -0.2608,  0.7326,  0.4520,  0.1589,
          0.0992, -0.8577,  0.1142,  0.7663,  0.0858,  0.3871,  0.0491,  0.5263,
         -0.2519,  0.6333,  0.1395,  0.0181,  0.1092,  0.1787,  0.0694,  0.2695,
          0.1151,  0.0788,  0.0781,  0.1739,  0.0805,  0.1223,  0.1452,  0.0276,
          0.9941, -0.7350, -0.2029,  0.1092, -0.0746,  0.0226,  0.0414, -0.1351,
          0.1735, -0.1434, -0.0044, -0.1674, -0.1189, -0.0998,  0.0846,  0.1888,
         -0.3959,  0.0068,  0.1079, -0.3042,  0.1680,  0.2375, -0.0859,  0.1656,
         -0.1197,  0.0175]], device='cuda:0') tensor(0.3402, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
161000 特征值优化 tensor(3.1842, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 6.7818e-01,  3.8761e+00,  4.0427e+00,  1.6005e+00,  3.8281e-01,
          6.2878e-01,  4.2784e-01,  1.0872e-01, -2.5897e-01, -6.3093e-01,
         -5.1007e-01, -3.8893e-01, -2.6607e-01,  7.5634e-01,  4.5414e-01,
          1.5518e-01,  1.0491e-01, -8.6172e-01,  1.1729e-01,  7.6667e-01,
          8.3255e-02,  3.8446e-01,  4.8260e-02,  5.2869e-01, -2.5491e-01,
          6.3220e-01,  1.3901e-01,  1.5237e-02,  1.1156e-01,  1.7855e-01,
          6.6687e-02,  2.7379e-01,  1.1617e-01,  7.8743e-02,  7.8648e-02,
          1.7320e-01,  7.9716e-02,  1.4030e-01,  1.4682e-01,  2.8917e-02,
          9.8765e-01, -7.3619e-01, -2.0113e-01,  1.1839e-01, -7.4148e-02,
          2.9630e-02,  4.0685e-02, -1.3409e-01,  1.7072e-01, -1.4422e-01,
         -1.4187e-03, -1.6463e-01, -1.1960e-01, -9.9269e-02,  8.3655e-02,
          1.8758e-01, -3.9598e-01,  1.3559e-02,  1.0640e-01, -3.0370e-01,
          1.6927e-01,  2.3146e-01, -8.4528e-02,  1.6588e-01, -1.2108e-01,
          2.1954e-02]], device='cuda:0') tensor(0.3261, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
162000 正交保障 tensor(0.2862, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 6.7323e-01,  3.8703e+00,  4.0353e+00,  1.6079e+00,  3.8273e-01,
          6.2509e-01,  4.3983e-01,  1.1665e-01, -2.5382e-01, -6.2756e-01,
         -5.0919e-01, -3.8793e-01, -2.6992e-01,  7.6926e-01,  4.5877e-01,
          1.5239e-01,  1.0766e-01, -8.6409e-01,  1.1902e-01,  7.6638e-01,
          7.7585e-02,  3.8171e-01,  4.4854e-02,  5.3301e-01, -2.5717e-01,
          6.3472e-01,  1.3780e-01,  1.6866e-02,  1.1472e-01,  1.7850e-01,
          6.6314e-02,  2.7521e-01,  1.1782e-01,  7.9364e-02,  7.8805e-02,
          1.7318e-01,  8.4230e-02,  1.5343e-01,  1.4772e-01,  2.9543e-02,
          9.8327e-01, -7.3733e-01, -1.9863e-01,  1.2223e-01, -7.9135e-02,
          3.8222e-02,  3.8878e-02, -1.3247e-01,  1.6845e-01, -1.4689e-01,
         -1.3169e-03, -1.5994e-01, -1.1890e-01, -1.0099e-01,  8.3427e-02,
          1.8596e-01, -3.9675e-01,  1.8769e-02,  1.0482e-01, -3.0259e-01,
          1.6928e-01,  2.2719e-01, -8.2490e-02,  1.6494e-01, -1.2235e-01,
          2.6680e-02]], device='cuda:0') tensor(0.2862, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
163000 特征值优化 tensor(3.1836, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 6.7439e-01,  3.8601e+00,  4.0262e+00,  1.6212e+00,  3.8504e-01,
          6.2105e-01,  4.5235e-01,  1.2690e-01, -2.4879e-01, -6.2476e-01,
         -5.0863e-01, -3.8985e-01, -2.7585e-01,  7.8038e-01,  4.6241e-01,
          1.4816e-01,  1.1066e-01, -8.6654e-01,  1.2324e-01,  7.6561e-01,
          7.4723e-02,  3.8014e-01,  4.3023e-02,  5.3336e-01, -2.6066e-01,
          6.3575e-01,  1.3448e-01,  1.3743e-02,  1.1944e-01,  1.7914e-01,
          6.4209e-02,  2.7878e-01,  1.1948e-01,  8.2666e-02,  7.9527e-02,
          1.7351e-01,  8.4563e-02,  1.6515e-01,  1.4997e-01,  2.9650e-02,
          9.8056e-01, -7.3922e-01, -2.0224e-01,  1.2808e-01, -7.9731e-02,
          4.1795e-02,  3.8357e-02, -1.3187e-01,  1.6754e-01, -1.4682e-01,
          1.4411e-03, -1.5644e-01, -1.1944e-01, -1.0129e-01,  8.2151e-02,
          1.8501e-01, -3.9671e-01,  2.3095e-02,  1.0422e-01, -3.0285e-01,
          1.6897e-01,  2.2319e-01, -8.1154e-02,  1.6339e-01, -1.2322e-01,
          3.0540e-02]], device='cuda:0') tensor(0.3066, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
164000 正交保障 tensor(0.5242, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.0387e+00,  6.1807e-01, -6.9453e-01,  6.4409e-01, -1.1095e-01,
          1.4363e+00,  1.1326e-01, -1.5594e-01,  1.8276e+00,  6.1016e-01,
         -8.8340e-01, -1.8760e-03,  2.7178e-02, -1.4115e-01,  1.8898e-01,
         -6.3205e-02, -4.8106e-01, -1.4687e+00, -2.0650e-01,  8.7491e-01,
         -3.5319e-01,  3.8068e-01, -3.1456e-01,  5.6911e-01, -5.1161e-01,
          7.1763e-01,  1.3390e-01, -9.6974e-01, -2.5767e-01, -1.0764e+00,
          2.1899e-01,  8.7702e-01,  3.4787e-01,  2.2975e-01,  9.9148e-01,
         -1.1542e-02, -1.6382e-01, -2.8378e-01,  8.6884e-01,  4.4486e-01,
          1.0331e+00,  9.5421e-01, -1.4019e-02,  8.6755e-01,  4.1639e-01,
         -1.1003e-01,  5.4910e-01,  4.5347e-01,  3.8138e-01,  3.4979e-01,
          1.1938e-01,  1.5664e-01, -3.9425e-01, -5.4611e-01, -2.3648e-01,
         -8.3978e-01,  2.0967e-01,  1.0298e-01, -2.6800e-01, -7.1899e-01,
          2.6274e-01, -5.3797e-01,  3.9587e-01, -6.1931e-01, -2.3308e-01,
          4.2353e-03]], device='cuda:0') tensor(0.5242, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
165000 特征值优化 tensor(4.9361, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.3020,  1.7671,  0.5287,  1.7172, -0.3691,  0.9837,  0.1430, -0.2596,
          0.9918,  0.1758, -0.3393,  0.0573,  0.3580,  0.1407,  0.0365, -0.1664,
         -0.0570, -0.8571,  0.0777,  0.6717,  0.0627,  0.2086,  0.0753,  0.1018,
          0.1452,  0.6992, -0.0372, -0.4472, -0.1632, -0.5163, -0.1314,  0.2791,
          0.0583,  0.1913,  0.3708,  0.0992, -0.1525,  0.1618,  0.0817,  0.3736,
          0.0750,  0.4697,  0.3032,  0.1539,  0.1640, -0.4725,  0.2399,  0.0791,
          0.1292, -0.0494, -0.0954,  0.0502,  0.0483,  0.0721, -0.1124, -0.2229,
          0.1362,  0.1286, -0.1521, -0.3854,  0.0821, -0.2813,  0.2759, -0.2543,
          0.0699,  0.0952]], device='cuda:0') tensor(0.3279, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
166000 特征值优化 tensor(3.7572, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.2785e+00,  2.3247e+00,  1.1654e+00,  1.7977e+00, -4.1756e-01,
          8.4634e-01,  3.6663e-01,  1.4799e-02,  7.2465e-01, -5.5252e-02,
         -2.7383e-01, -5.0905e-03,  7.4687e-01,  8.0476e-03,  2.7515e-01,
          5.4760e-02,  2.4122e-01, -8.9662e-01,  7.0236e-02,  6.9937e-01,
          3.5234e-01,  2.8769e-01,  4.2684e-02, -2.3339e-01,  1.6700e-01,
          7.5158e-01, -1.1080e-01, -4.9239e-01, -2.0184e-01, -3.5851e-01,
         -1.3561e-01,  2.4835e-01, -3.2433e-02,  2.9423e-01,  2.7260e-01,
          9.1021e-02, -7.5733e-02, -7.5555e-03, -2.3184e-01,  2.4147e-01,
         -1.6308e-01,  5.9236e-01,  3.7538e-01, -1.5074e-01,  1.8315e-02,
         -3.0634e-01,  1.4067e-01, -3.7153e-02,  2.2272e-01, -6.3191e-02,
         -1.3326e-01,  9.8628e-03,  1.0081e-01,  1.3796e-01, -1.0831e-01,
         -9.3211e-02,  2.2734e-01,  1.8619e-01, -1.3453e-01, -2.9596e-01,
          8.5700e-03, -1.5983e-01,  3.1597e-01, -1.6462e-01, -5.0357e-02,
          3.4467e-01]], device='cuda:0') tensor(0.2248, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
167000 特征值优化 tensor(3.4087, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 5.9078e+00,  2.4665e+00,  1.6339e+00,  1.7318e+00, -3.8187e-01,
          7.4981e-01,  3.8693e-01,  2.0730e-01,  5.6558e-01, -2.1487e-01,
         -1.6966e-01, -8.4638e-02,  1.1808e+00, -1.8635e-01,  2.8496e-01,
          2.2545e-01,  2.7089e-01, -8.6193e-01,  1.4209e-01,  6.9034e-01,
          3.7546e-01,  1.8492e-01, -4.3753e-02, -4.8494e-01,  1.3414e-01,
          7.2839e-01, -1.1431e-01, -4.5415e-01, -1.7808e-01, -3.4951e-01,
         -1.1285e-01,  1.9131e-01, -1.4564e-01,  2.8991e-01,  2.1524e-01,
          1.4398e-01, -3.8472e-02, -1.8904e-01, -2.3861e-01,  7.9724e-02,
          2.5469e-02,  5.1197e-01,  4.2663e-01, -4.0837e-01, -1.2675e-01,
         -5.1382e-02,  1.3770e-01, -4.2224e-02,  1.4438e-01, -1.9093e-02,
         -1.1642e-01, -7.1635e-02,  1.2958e-01,  2.3681e-01, -6.4166e-02,
          3.0261e-02,  2.0784e-01,  1.1571e-01, -1.7517e-01, -2.4253e-01,
          2.8645e-02, -1.1708e-03,  2.3281e-01, -1.1270e-01, -1.3327e-03,
          3.0600e-01]], device='cuda:0') tensor(0.2129, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
168000 正交保障 tensor(0.2450, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 6.4116,  2.4147,  1.8640,  1.6929, -0.3952,  0.6843,  0.3076,  0.2931,
          0.4307, -0.2453, -0.1151, -0.1893,  1.3924, -0.3217,  0.2481,  0.2208,
          0.2585, -0.7950,  0.1553,  0.6940,  0.4101,  0.1446, -0.0520, -0.5107,
          0.1157,  0.7323, -0.1587, -0.4256, -0.1920, -0.3248, -0.1213,  0.2173,
         -0.1978,  0.2459,  0.1791,  0.1780, -0.0334, -0.2683, -0.2266,  0.0173,
          0.1436,  0.4225,  0.3448, -0.4970, -0.1707,  0.0519,  0.1610, -0.0407,
          0.1211, -0.0493, -0.1020, -0.0896,  0.0976,  0.2683, -0.0321,  0.0562,
          0.1831,  0.0788, -0.1736, -0.1848,  0.0201,  0.0733,  0.2216, -0.1052,
          0.0246,  0.2597]], device='cuda:0') tensor(0.2450, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
169000 特征值优化 tensor(3.2822, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 6.8879,  2.3743,  1.8057,  1.7257, -0.3866,  0.6252,  0.2686,  0.3077,
          0.3624, -0.2149, -0.1091, -0.2334,  1.4590, -0.3612,  0.2331,  0.2121,
          0.2581, -0.7710,  0.1421,  0.6984,  0.4281,  0.1436, -0.0594, -0.5079,
          0.1222,  0.7383, -0.1857, -0.4075, -0.1917, -0.3071, -0.1195,  0.2264,
         -0.2079,  0.2315,  0.1672,  0.1920, -0.0748, -0.3278, -0.2443, -0.0084,
          0.1796,  0.4019,  0.3108, -0.5326, -0.1985,  0.1173,  0.1701, -0.0336,
          0.1027, -0.0592, -0.0819, -0.0924,  0.0804,  0.2779, -0.0124,  0.0550,
          0.1771,  0.0616, -0.1780, -0.1675,  0.0223,  0.1039,  0.2123, -0.0771,
          0.0646,  0.2264]], device='cuda:0') tensor(0.2359, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
170000 特征值优化 tensor(3.2667, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 7.2613e+00,  2.3277e+00,  1.6170e+00,  1.7481e+00, -3.4563e-01,
          5.6908e-01,  2.4788e-01,  3.0242e-01,  2.9570e-01, -1.6112e-01,
         -1.1324e-01, -2.3448e-01,  1.4816e+00, -3.7090e-01,  1.9415e-01,
          2.0903e-01,  2.5153e-01, -7.6932e-01,  1.3976e-01,  7.0391e-01,
          4.5522e-01,  1.2859e-01, -7.8311e-02, -5.0386e-01,  1.2529e-01,
          7.4244e-01, -1.8495e-01, -3.8503e-01, -1.7941e-01, -2.9153e-01,
         -1.0397e-01,  2.2806e-01, -2.2090e-01,  2.2217e-01,  1.7971e-01,
          1.8697e-01, -5.4907e-02, -3.3048e-01, -2.9567e-01, -5.2103e-03,
          1.6462e-01,  3.6477e-01,  2.7001e-01, -5.3907e-01, -2.1560e-01,
          1.5282e-01,  1.5709e-01, -2.6578e-02,  9.1626e-02, -4.8714e-02,
         -6.8756e-02, -8.7248e-02,  6.6303e-02,  2.7600e-01,  8.6352e-04,
          5.3659e-02,  1.7735e-01,  5.6109e-02, -1.6787e-01, -1.5338e-01,
          2.7233e-02,  1.0804e-01,  2.0402e-01, -6.8115e-02,  8.4031e-02,
          2.1390e-01]], device='cuda:0') tensor(0.2428, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
171000 特征值优化 tensor(3.2574, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 7.4848,  2.3325,  1.4236,  1.7303, -0.2833,  0.5356,  0.2182,  0.2806,
          0.1913, -0.1071, -0.1195, -0.2253,  1.4845, -0.3727,  0.1599,  0.2176,
          0.2505, -0.7922,  0.1330,  0.7055,  0.4753,  0.1069, -0.1017, -0.4796,
          0.1325,  0.7426, -0.1780, -0.3555, -0.1700, -0.2839, -0.0876,  0.2327,
         -0.2240,  0.2208,  0.1899,  0.1785, -0.0225, -0.2862, -0.3229,  0.0227,
          0.1250,  0.3364,  0.2422, -0.5169, -0.2418,  0.1972,  0.1365, -0.0239,
          0.0654, -0.0312, -0.0641, -0.0806,  0.0493,  0.2730,  0.0139,  0.0579,
          0.1771,  0.0535, -0.1679, -0.1466,  0.0320,  0.1011,  0.1986, -0.0770,
          0.0992,  0.2135]], device='cuda:0') tensor(0.2174, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
172000 特征值优化 tensor(3.2495, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 7.6453e+00,  2.3303e+00,  1.3004e+00,  1.7028e+00, -2.2156e-01,
          5.5722e-01,  1.7339e-01,  2.8138e-01,  6.6166e-02, -5.2497e-02,
         -1.1429e-01, -2.1709e-01,  1.4862e+00, -3.6990e-01,  1.3948e-01,
          2.2884e-01,  2.3027e-01, -8.1236e-01,  1.2942e-01,  7.1173e-01,
          4.9154e-01,  7.6147e-02, -1.3114e-01, -4.6082e-01,  1.3291e-01,
          7.3620e-01, -1.5193e-01, -3.3948e-01, -1.5645e-01, -2.8130e-01,
         -8.0522e-02,  2.2999e-01, -2.2529e-01,  2.2163e-01,  1.9991e-01,
          1.6959e-01, -2.5229e-03, -2.2240e-01, -3.5763e-01,  4.0258e-02,
          9.9973e-02,  3.1999e-01,  2.1319e-01, -5.0752e-01, -2.5851e-01,
          2.2907e-01,  1.1106e-01, -3.4074e-02,  2.7538e-02, -5.1097e-03,
         -5.3915e-02, -7.9151e-02,  1.7974e-02,  2.7209e-01,  2.4235e-02,
          6.2925e-02,  1.7515e-01,  5.2019e-02, -1.6769e-01, -1.4244e-01,
          3.5307e-02,  9.4943e-02,  1.9596e-01, -8.7358e-02,  1.0862e-01,
          2.2050e-01]], device='cuda:0') tensor(0.2522, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
173000 特征值优化 tensor(3.2409, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 7.7386,  2.3211,  1.2481,  1.6956, -0.1338,  0.6188,  0.1129,  0.3048,
         -0.0640, -0.0314, -0.1191, -0.2072,  1.4777, -0.3692,  0.1242,  0.2362,
          0.1912, -0.8248,  0.1256,  0.7066,  0.5044,  0.0414, -0.1523, -0.4491,
          0.1356,  0.7318, -0.1206, -0.3346, -0.1425, -0.2754, -0.0854,  0.2212,
         -0.2217,  0.2267,  0.2104,  0.1597,  0.0128, -0.1491, -0.4047,  0.0516,
          0.0775,  0.3057,  0.1922, -0.5083, -0.2659,  0.2499,  0.0773, -0.0528,
         -0.0169,  0.0301, -0.0380, -0.0845, -0.0178,  0.2605,  0.0321,  0.0649,
          0.1765,  0.0527, -0.1706, -0.1449,  0.0382,  0.0859,  0.1955, -0.0972,
          0.1191,  0.2322]], device='cuda:0') tensor(0.2905, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
174000 正交保障 tensor(0.2532, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 7.7444e+00,  2.2924e+00,  1.2380e+00,  1.7127e+00, -2.5188e-02,
          6.5662e-01,  3.2959e-02,  3.5969e-01, -1.8804e-01, -3.4283e-02,
         -1.2785e-01, -1.9337e-01,  1.4807e+00, -3.5015e-01,  1.2079e-01,
          2.1807e-01,  1.5695e-01, -8.2597e-01,  1.2428e-01,  7.0192e-01,
          5.1094e-01,  6.5472e-03, -1.5783e-01, -4.5399e-01,  1.3749e-01,
          7.2593e-01, -8.7412e-02, -3.3921e-01, -1.2520e-01, -2.7972e-01,
         -1.0551e-01,  2.2132e-01, -2.2062e-01,  2.3238e-01,  2.1659e-01,
          1.5263e-01,  8.9635e-03, -8.2301e-02, -4.5851e-01,  5.3029e-02,
          6.3945e-02,  3.0311e-01,  1.6751e-01, -5.0707e-01, -2.6099e-01,
          2.6003e-01,  4.3988e-02, -6.0923e-02, -4.1524e-02,  8.0247e-02,
         -1.4707e-02, -1.0176e-01, -5.5136e-02,  2.3871e-01,  2.5113e-02,
          6.6111e-02,  1.8253e-01,  5.7082e-02, -1.7408e-01, -1.4999e-01,
          3.5500e-02,  7.9670e-02,  1.8938e-01, -1.0159e-01,  1.2295e-01,
          2.5003e-01]], device='cuda:0') tensor(0.2532, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
175000 特征值优化 tensor(3.2282, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 7.7274e+00,  2.2744e+00,  1.2554e+00,  1.7285e+00,  4.9951e-02,
          6.7901e-01, -2.1084e-02,  3.9426e-01, -2.7571e-01, -5.4873e-02,
         -1.2745e-01, -1.8627e-01,  1.4788e+00, -3.4538e-01,  1.1932e-01,
          1.9995e-01,  1.3290e-01, -8.2497e-01,  1.2266e-01,  6.9793e-01,
          5.1699e-01, -2.5234e-02, -1.5665e-01, -4.5221e-01,  1.4083e-01,
          7.2734e-01, -5.9562e-02, -3.4302e-01, -1.1122e-01, -2.7889e-01,
         -1.1630e-01,  2.1937e-01, -2.2018e-01,  2.3318e-01,  2.1678e-01,
          1.5124e-01,  1.0180e-02, -4.8532e-02, -5.0013e-01,  5.4507e-02,
          6.0273e-02,  2.9917e-01,  1.5646e-01, -4.9394e-01, -2.6039e-01,
          2.6339e-01,  1.1653e-02, -6.4865e-02, -5.5915e-02,  1.1707e-01,
         -1.7000e-03, -1.0997e-01, -7.2749e-02,  2.2417e-01,  1.7205e-02,
          6.6538e-02,  1.8250e-01,  5.6789e-02, -1.7657e-01, -1.5383e-01,
          3.3783e-02,  7.6377e-02,  1.8837e-01, -1.0000e-01,  1.2486e-01,
          2.5232e-01]], device='cuda:0') tensor(0.2283, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
176000 特征值优化 tensor(20.0279, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.2988e-01,  8.6862e-01,  7.6294e-01,  4.9026e-01, -9.5576e-01,
          8.3731e-02,  8.2617e-01, -1.0921e+00,  1.2008e+00,  9.7506e-02,
         -5.2470e-01,  6.2817e-01,  6.5500e-01,  8.0520e-01, -4.8503e-01,
          1.4502e-01,  1.0368e-02, -1.4736e-01,  7.1143e-02,  5.2202e-01,
         -1.7117e-01,  1.6770e+00, -9.4093e-01,  3.8801e-01, -3.5031e-01,
          4.5163e-02,  4.3126e-01,  3.3322e-01, -2.6182e-01, -1.7704e-03,
         -2.5667e-01, -5.4194e-02, -9.7191e-01,  9.5104e-01, -3.6749e-01,
          3.6833e-01,  2.1956e-01,  1.5318e-01, -3.5087e-01, -3.5600e-01,
          1.6073e+00,  3.0144e-01, -1.0532e+00,  4.1271e-01,  4.7548e-01,
          2.4100e-01, -6.7731e-03, -7.9722e-02, -1.8307e-01,  2.1125e+00,
          8.0441e-02,  2.5976e-01, -2.1863e-01, -1.4665e-01, -6.3899e-01,
          3.7909e-02, -1.5695e-01, -3.9956e-01, -9.7067e-01, -2.0708e-01,
          8.7504e-01,  2.0727e-01,  1.7859e-01, -2.2663e-01,  1.9153e-03,
          1.2210e-01]], device='cuda:0') tensor(0.9497, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
177000 正交保障 tensor(0.3669, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5806,  2.2006,  2.1679,  1.9207, -0.3920,  0.2186,  0.1690, -0.9396,
          0.3710, -0.3542, -0.4519,  0.3484,  0.9572,  0.5782,  0.1535,  0.0626,
          0.1136, -0.3782,  0.0312, -0.0027, -0.0155,  0.7732, -0.2869,  0.3827,
         -0.0110, -0.0047, -0.0166,  0.0310, -0.0380, -0.4624, -0.2251, -0.0415,
         -0.4352,  0.4782, -0.0861,  0.1356, -0.1001,  0.1514, -0.5199, -0.1163,
          1.1916, -0.4530, -0.5742,  0.1540, -0.0847,  0.0747,  0.0832, -0.0041,
         -0.0333,  1.2052,  0.1543,  0.1198,  0.1376,  0.0327, -0.2752, -0.0351,
          0.0350, -0.1909, -0.4399, -0.3399,  0.3367, -0.0846, -0.0198, -0.1223,
          0.1197, -0.1463]], device='cuda:0') tensor(0.3669, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
178000 特征值优化 tensor(3.4485, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.8670,  2.8694,  2.7294,  2.5653, -0.3255,  0.0206, -0.2463, -0.4922,
          0.4068, -0.3437, -0.6413,  0.4060,  1.1078,  1.0224,  0.1260,  0.1434,
          0.0799, -0.7507,  0.0533, -0.1602, -0.0279,  0.5112, -0.1433,  0.6746,
         -0.0875, -0.0449, -0.0225,  0.0502, -0.0438, -0.1425, -0.2866,  0.1102,
         -0.2908,  0.3593, -0.0265,  0.1286, -0.1975, -0.0899, -0.3792,  0.0594,
          1.0504, -0.6228, -0.1691, -0.0475, -0.0637,  0.0967,  0.0844,  0.0352,
         -0.0451,  0.6275,  0.0060, -0.1312,  0.1725, -0.0051, -0.2313, -0.0148,
          0.0738, -0.0746, -0.3271, -0.2228,  0.2146, -0.2976, -0.0263, -0.1442,
          0.0865, -0.1906]], device='cuda:0') tensor(0.4139, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
179000 正交保障 tensor(0.3274, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5886,  2.9502,  3.0477,  2.9055, -0.5471, -0.1635, -0.4842, -0.2523,
          0.6050, -0.4267, -0.7631,  0.3450,  1.2215,  1.2376,  0.1170,  0.1756,
          0.0491, -0.7598,  0.0376, -0.1420,  0.0067,  0.4920, -0.1739,  0.7173,
         -0.0772, -0.2649, -0.0510,  0.0550, -0.1015, -0.0521, -0.1767,  0.2446,
         -0.1931,  0.2311, -0.0706,  0.1059, -0.2475, -0.1371, -0.3075,  0.2653,
          0.9304, -0.6915, -0.0372, -0.2235, -0.2703,  0.1514,  0.1542,  0.0657,
         -0.0311,  0.3477, -0.0327, -0.1023,  0.1326,  0.0289, -0.1602,  0.0039,
         -0.0459, -0.0183, -0.2973, -0.1600,  0.1525, -0.3671, -0.0606, -0.1687,
         -0.1511, -0.1476]], device='cuda:0') tensor(0.3274, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
180000 特征值优化 tensor(1.7819, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-4.4842e-01,  3.0311e+00,  3.0781e+00,  3.2349e+00, -3.9676e-01,
         -4.9142e-02, -2.0741e-01,  5.5481e-02,  9.0368e-01, -5.7021e-01,
         -8.2197e-01,  3.1530e-01,  1.2551e+00,  1.3369e+00,  5.5349e-02,
          1.4037e-01, -6.8089e-03, -6.2217e-01,  3.1828e-02,  4.8955e-02,
          3.4107e-02,  3.9629e-01, -2.4106e-01,  5.9752e-01, -6.8615e-02,
         -6.5180e-01, -3.0169e-02,  2.9012e-02, -1.1150e-01, -2.1875e-02,
         -1.0675e-01,  3.1035e-01, -1.7764e-01,  1.9837e-01, -1.6450e-01,
          1.6527e-02, -3.5005e-02,  7.1615e-02,  1.9573e-02,  3.7246e-01,
          8.7954e-01, -6.7342e-01,  1.0732e-01, -1.3100e-01, -3.3639e-01,
         -6.8944e-02,  7.2986e-02,  2.3646e-03, -3.5129e-02,  9.2371e-02,
          5.5829e-02,  4.2867e-03,  1.7547e-01, -5.7454e-02, -6.0839e-02,
         -1.2821e-02, -4.6048e-02,  9.1857e-02, -1.9151e-01, -9.8010e-02,
          8.3059e-02, -3.2115e-01, -2.6385e-01, -1.3525e-01, -1.1150e-01,
         -4.2960e-02]], device='cuda:0') tensor(0.3605, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
181000 特征值优化 tensor(1.7164, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-7.5793e-01,  3.1020e+00,  2.8604e+00,  3.2946e+00, -2.2948e-01,
         -3.0426e-02, -1.0809e-01,  6.8516e-02,  9.1119e-01, -5.9502e-01,
         -8.6547e-01,  3.4668e-01,  1.2570e+00,  1.3935e+00,  4.0202e-03,
          7.7626e-02, -3.2273e-03, -5.4251e-01, -2.6973e-02,  1.2073e-01,
          7.9642e-02,  3.7121e-01, -2.8290e-01,  5.6129e-01, -2.1801e-02,
         -6.6002e-01, -1.9169e-02,  3.3287e-02, -5.8668e-02,  1.2969e-02,
         -6.3198e-02,  3.4902e-01, -1.3260e-01,  1.5780e-01, -1.8123e-01,
         -1.8287e-02, -2.9648e-02,  4.9066e-02,  1.8158e-02,  4.1966e-01,
          7.7473e-01, -6.0486e-01,  1.1664e-01, -1.2438e-01, -4.0220e-01,
          2.7932e-04,  3.2487e-02, -2.2293e-03, -2.3666e-02,  1.9700e-02,
          2.9600e-02, -7.4400e-03,  1.6949e-01, -5.2154e-02, -5.8130e-02,
         -5.3287e-02, -3.8058e-02,  1.0688e-01, -1.5972e-01, -1.0807e-01,
          3.3640e-02, -2.9633e-01, -2.5472e-01, -1.3164e-01, -1.2063e-01,
         -3.1177e-02]], device='cuda:0') tensor(0.3337, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
182000 特征值优化 tensor(1.6894, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8286,  3.2077,  2.7048,  3.2933, -0.1538, -0.0200, -0.0649,  0.0434,
          0.9901, -0.6095, -0.9297,  0.4070,  1.2226,  1.4222, -0.0100,  0.0464,
          0.0145, -0.5300, -0.0433,  0.1581,  0.0944,  0.3355, -0.2903,  0.5490,
         -0.0043, -0.6643,  0.0084,  0.0364, -0.0324,  0.0129, -0.0224,  0.3493,
         -0.0862,  0.1005, -0.1965, -0.0523, -0.0286,  0.0198,  0.0385,  0.4647,
          0.6779, -0.5755,  0.1240, -0.1375, -0.4361,  0.0597,  0.0174,  0.0047,
         -0.0221,  0.0066,  0.0153, -0.0075,  0.1382, -0.0543, -0.0625, -0.0518,
         -0.0196,  0.1198, -0.1264, -0.1142,  0.0184, -0.2414, -0.2244, -0.1222,
         -0.1229, -0.0363]], device='cuda:0') tensor(0.3488, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
183000 特征值优化 tensor(1.6727, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8383,  3.2931,  2.5291,  3.2874, -0.1323, -0.0153, -0.0488,  0.0317,
          1.0630, -0.6033, -0.9599,  0.4589,  1.2105,  1.4512, -0.0128,  0.0412,
          0.0200, -0.4790, -0.0660,  0.1879,  0.0991,  0.3042, -0.2761,  0.4898,
          0.0184, -0.6690,  0.0224,  0.0293, -0.0249,  0.0085,  0.0153,  0.3280,
         -0.0725,  0.0453, -0.2088, -0.0760, -0.0299,  0.0228,  0.0410,  0.5120,
          0.5761, -0.5554,  0.1285, -0.1500, -0.4660,  0.1190,  0.0105,  0.0083,
         -0.0263,  0.0092,  0.0106, -0.0058,  0.1035, -0.0541, -0.0656, -0.0535,
         -0.0062,  0.1317, -0.0995, -0.1319,  0.0141, -0.1872, -0.2047, -0.1248,
         -0.1308, -0.0382]], device='cuda:0') tensor(0.2626, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
184000 特征值优化 tensor(1.6636, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8377,  3.3888,  2.3374,  3.2516, -0.1346, -0.0163, -0.0474,  0.0285,
          1.1254, -0.5802, -0.9716,  0.4976,  1.1841,  1.4651, -0.0120,  0.0471,
          0.0224, -0.4252, -0.0802,  0.2175,  0.1053,  0.2850, -0.2560,  0.4302,
          0.0326, -0.6756,  0.0260,  0.0300, -0.0243,  0.0082,  0.0465,  0.2997,
         -0.0679,  0.0079, -0.2136, -0.0794, -0.0298,  0.0284,  0.0454,  0.5450,
          0.4968, -0.5357,  0.1309, -0.1525, -0.4951,  0.1638,  0.0110,  0.0090,
         -0.0290,  0.0127,  0.0108, -0.0042,  0.0794, -0.0526, -0.0702, -0.0619,
         -0.0043,  0.1319, -0.0908, -0.1332,  0.0262, -0.1626, -0.1916, -0.1209,
         -0.1395, -0.0400]], device='cuda:0') tensor(0.2773, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
185000 特征值优化 tensor(1.6589, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8359,  3.4682,  2.2117,  3.2210, -0.1333, -0.0132, -0.0454,  0.0321,
          1.1633, -0.5657, -0.9794,  0.5225,  1.1582,  1.4646, -0.0106,  0.0499,
          0.0233, -0.3843, -0.0877,  0.2381,  0.1084,  0.2679, -0.2384,  0.3809,
          0.0416, -0.6775,  0.0246,  0.0343, -0.0223,  0.0105,  0.0638,  0.2853,
         -0.0692, -0.0128, -0.2174, -0.0742, -0.0285,  0.0300,  0.0459,  0.5780,
          0.4350, -0.5192,  0.1311, -0.1546, -0.5231,  0.2008,  0.0114,  0.0068,
         -0.0274,  0.0117,  0.0115, -0.0071,  0.0682, -0.0495, -0.0736, -0.0682,
         -0.0073,  0.1299, -0.0880, -0.1308,  0.0378, -0.1571, -0.1886, -0.1173,
         -0.1449, -0.0439]], device='cuda:0') tensor(0.3334, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
186000 特征值优化 tensor(1.6551, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-0.8255,  3.5343,  2.1002,  3.1918, -0.1323, -0.0065, -0.0437,  0.0360,
          1.1843, -0.5539, -0.9837,  0.5437,  1.1330,  1.4602, -0.0113,  0.0510,
          0.0190, -0.3402, -0.0859,  0.2529,  0.1103,  0.2472, -0.2214,  0.3316,
          0.0421, -0.6817,  0.0251,  0.0327, -0.0223,  0.0130,  0.0820,  0.2732,
         -0.0712, -0.0310, -0.2225, -0.0664, -0.0271,  0.0361,  0.0462,  0.6115,
          0.3704, -0.5083,  0.1172, -0.1596, -0.5491,  0.2424,  0.0099,  0.0060,
         -0.0278,  0.0065,  0.0095, -0.0077,  0.0640, -0.0429, -0.0747, -0.0729,
         -0.0116,  0.1291, -0.0821, -0.1272,  0.0513, -0.1537, -0.1815, -0.1120,
         -0.1470, -0.0471]], device='cuda:0') tensor(0.2922, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
187000 特征值优化 tensor(1.6522, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-8.1793e-01,  3.5870e+00,  1.9866e+00,  3.1677e+00, -1.2848e-01,
         -6.9480e-03, -4.0097e-02,  3.7088e-02,  1.1999e+00, -5.4430e-01,
         -9.8103e-01,  5.5694e-01,  1.1135e+00,  1.4564e+00, -1.1709e-02,
          4.8016e-02,  1.8606e-02, -3.0179e-01, -8.4535e-02,  2.6858e-01,
          1.1364e-01,  2.3193e-01, -2.0540e-01,  2.9024e-01,  4.1163e-02,
         -6.8360e-01,  2.5250e-02,  2.8579e-02, -2.0584e-02,  1.4478e-02,
          9.4704e-02,  2.6613e-01, -7.7033e-02, -4.5040e-02, -2.2536e-01,
         -5.8460e-02, -2.6046e-02,  4.0112e-02,  5.2078e-02,  6.3614e-01,
          3.1601e-01, -4.9654e-01,  1.0501e-01, -1.6518e-01, -5.7157e-01,
          2.7702e-01,  8.2257e-03,  6.4856e-03, -2.7537e-02, -4.4722e-04,
          9.3104e-03, -8.1599e-03,  6.0740e-02, -3.9100e-02, -7.6093e-02,
         -7.6789e-02, -1.7907e-02,  1.2978e-01, -7.5936e-02, -1.2323e-01,
          6.3109e-02, -1.5559e-01, -1.7876e-01, -1.0832e-01, -1.4965e-01,
         -5.0430e-02]], device='cuda:0') tensor(0.3412, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
188000 特征值优化 tensor(18.5981, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.3524,  1.7431,  1.6650,  0.2766, -1.3423,  0.3736, -0.2165, -0.6584,
          1.0297,  0.4531,  0.0818,  0.2454,  0.8560,  0.3733,  0.6184, -1.6811,
         -2.1568,  0.2476,  0.0663,  0.7469, -0.0622,  0.5086, -0.3454,  0.3314,
         -0.0920,  0.1395,  0.3763, -0.5055,  0.1614, -0.7221, -0.7243,  0.3619,
          0.0898,  0.3969,  0.0908,  0.1206, -0.4736,  1.3422, -0.7711,  0.7061,
          0.0245, -1.0899, -0.7987, -0.0255, -0.9011,  0.6819,  0.9626, -0.0458,
         -0.2103, -0.3835, -0.3233,  0.0760,  0.9631, -0.3638,  0.2425,  0.0644,
         -0.1692,  0.0269, -0.2198, -0.1838,  0.0307, -0.4087, -0.1163,  0.5270,
          0.4052, -0.1437]], device='cuda:0') tensor(0.2700, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
189000 特征值优化 tensor(6.1382, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.0464e+00,  2.7507e+00,  2.4049e+00,  1.0291e+00, -1.2565e+00,
          9.4628e-02, -5.0368e-02, -1.4363e-01,  4.5539e-01, -8.1083e-02,
         -3.2006e-01,  4.3893e-01,  8.5669e-01,  4.7923e-01,  2.8935e-01,
         -7.9634e-01, -1.1969e+00, -3.3336e-01, -1.6930e-01,  3.1762e-01,
          9.7745e-02,  1.0148e-01, -1.0703e-01,  1.4436e-01,  1.5341e-02,
         -2.4870e-01,  1.9464e-01, -6.7602e-02, -1.9955e-03, -1.4679e-01,
         -3.4319e-01,  1.5344e-01,  1.7867e-01,  2.0619e-01,  4.2836e-02,
          2.5304e-02, -5.1963e-01,  8.1504e-01,  5.5706e-02,  8.1252e-01,
          6.5234e-01, -6.4603e-01, -1.7786e-01, -9.9704e-02, -5.8220e-01,
          8.2013e-01,  4.9483e-01, -3.3825e-03,  1.0953e-02, -1.7845e-02,
         -2.2258e-02, -4.6524e-03,  2.8731e-01, -1.9710e-01, -5.5901e-02,
          4.3248e-03, -2.2354e-01,  1.5826e-01, -1.7499e-01, -1.6179e-01,
          1.6576e-01, -2.5580e-01, -1.9128e-01,  2.3864e-02,  3.7740e-01,
         -8.2374e-02]], device='cuda:0') tensor(0.3309, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
190000 特征值优化 tensor(3.5007, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.9540e+00,  3.4780e+00,  3.1518e+00,  9.3287e-01, -8.2948e-01,
         -2.8348e-02,  4.0150e-01, -9.3537e-03,  3.3767e-01, -2.2950e-01,
         -4.0320e-01,  6.1154e-01,  8.1237e-01,  7.3027e-01,  1.5548e-01,
         -3.7125e-01, -6.8725e-01, -3.7840e-01, -1.2606e-01,  5.1848e-01,
         -6.5526e-02,  8.5460e-02, -1.3905e-01,  2.6863e-01,  6.3820e-02,
          4.5457e-02,  1.2078e-01,  2.0790e-02,  1.2898e-02,  2.0648e-03,
         -3.8486e-01,  2.0860e-01,  2.4361e-01,  8.2325e-02,  5.3541e-02,
         -1.2358e-01, -6.5790e-01,  4.1766e-01,  3.1009e-01,  5.9663e-01,
          7.1613e-01, -7.7687e-01,  5.3136e-02,  6.8808e-02, -3.4021e-01,
          6.1492e-01,  2.4157e-01,  6.7277e-03, -2.0719e-02, -1.4000e-01,
          9.3994e-02,  1.8431e-02,  1.7263e-01, -1.8918e-01, -1.0467e-01,
         -3.2984e-02, -1.6068e-01,  2.1580e-01, -2.0057e-01, -1.3789e-01,
          1.5807e-01, -2.1842e-01, -1.0902e-01, -1.6822e-02,  4.2832e-01,
          1.0162e-01]], device='cuda:0') tensor(0.3030, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
191000 特征值优化 tensor(2.7103, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.0021e+00,  4.1575e+00,  3.6594e+00,  6.9356e-01, -6.9698e-01,
         -2.4038e-01,  3.6214e-01,  3.2132e-01,  2.0236e-01, -2.3508e-01,
         -3.3532e-01,  6.5513e-01,  6.8564e-01,  7.9840e-01,  1.2181e-01,
         -2.3451e-01, -3.8248e-01, -4.1454e-01, -2.0583e-01,  7.2099e-01,
         -5.3535e-02,  4.6953e-02, -8.2467e-02,  2.7629e-01,  1.7067e-01,
          2.0905e-01,  8.6386e-02,  3.3553e-02, -2.6547e-02,  7.7948e-03,
         -3.6242e-01,  3.2316e-01,  2.8985e-01,  5.2022e-02,  7.2728e-02,
         -1.4740e-01, -5.9548e-01,  1.6401e-04,  5.1455e-01,  3.5010e-01,
          7.8554e-01, -8.0682e-01,  1.7517e-01,  9.6298e-02, -1.3531e-01,
          5.3274e-01,  1.9506e-01,  4.9390e-02, -2.0970e-02, -1.5383e-01,
          1.2318e-01,  1.0890e-01,  1.6541e-01, -2.3600e-01, -4.8449e-02,
          7.6672e-02, -9.9592e-02,  2.9035e-01, -2.1789e-01, -9.9711e-02,
          1.1914e-01, -2.5934e-01,  8.9849e-02,  1.5584e-02,  1.4028e-01,
          1.7189e-01]], device='cuda:0') tensor(0.3579, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
192000 特征值优化 tensor(2.6276, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.5209e+00,  4.5173e+00,  3.7059e+00,  6.4255e-01, -6.7568e-01,
         -2.9749e-01,  3.4388e-01,  3.8109e-01,  1.2430e-01, -3.0732e-01,
         -3.2214e-01,  6.6600e-01,  7.0570e-01,  8.1533e-01,  8.7673e-02,
         -2.1152e-01, -3.0849e-01, -3.8195e-01, -2.1165e-01,  7.0321e-01,
         -5.0147e-02,  4.3191e-02, -8.1239e-02,  2.2479e-01,  1.8506e-01,
          2.8528e-01,  7.4410e-02,  3.5657e-02, -1.8259e-02,  2.3971e-03,
         -3.4009e-01,  3.4208e-01,  2.4124e-01,  4.5045e-02,  1.2415e-01,
         -1.5978e-01, -5.0068e-01, -7.0856e-02,  5.8445e-01,  2.6810e-01,
          9.7467e-01, -8.0849e-01,  1.0771e-01,  6.0857e-02, -1.7423e-01,
          4.3250e-01,  1.8775e-01,  6.5595e-02, -3.2977e-02, -1.1952e-01,
          1.1809e-01,  1.3046e-01,  1.6341e-01, -2.4178e-01, -3.3943e-02,
          1.0065e-01, -2.1505e-02,  2.7673e-01, -2.3111e-01, -1.1810e-01,
          1.3362e-01, -2.2993e-01,  9.8411e-02, -2.7229e-03,  7.0455e-02,
          1.7677e-01]], device='cuda:0') tensor(0.4037, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
193000 特征值优化 tensor(2.6080, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.3134e+00,  4.6610e+00,  3.7303e+00,  5.5832e-01, -6.7207e-01,
         -3.1114e-01,  3.0842e-01,  4.0527e-01,  1.0969e-01, -3.5321e-01,
         -3.1252e-01,  6.4184e-01,  7.1660e-01,  7.8301e-01,  8.1324e-02,
         -2.0989e-01, -2.8488e-01, -3.4638e-01, -1.8616e-01,  6.9249e-01,
         -4.7219e-02,  5.1345e-02, -8.2737e-02,  1.9336e-01,  1.5909e-01,
          3.0833e-01,  7.5387e-02,  3.0990e-02, -1.5335e-02, -1.9054e-03,
         -3.4570e-01,  3.3718e-01,  2.0411e-01,  3.8074e-02,  1.3609e-01,
         -1.5504e-01, -4.5946e-01, -3.8761e-02,  5.4542e-01,  2.3390e-01,
          1.0666e+00, -8.0053e-01,  8.7859e-02,  4.9911e-02, -1.6334e-01,
          3.2246e-01,  1.8867e-01,  7.0157e-02, -2.1213e-02, -1.0166e-01,
          1.0809e-01,  1.3880e-01,  1.5728e-01, -2.4870e-01, -2.9526e-02,
          1.1114e-01, -3.7304e-03,  2.7001e-01, -2.4231e-01, -1.1871e-01,
          1.4570e-01, -2.0191e-01,  1.1774e-01,  7.8493e-03,  3.6841e-02,
          1.6350e-01]], device='cuda:0') tensor(0.3126, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
194000 特征值优化 tensor(2.6022, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.2112e+00,  4.7742e+00,  3.7397e+00,  4.8529e-01, -6.6378e-01,
         -3.0576e-01,  3.0046e-01,  4.3081e-01,  8.8881e-02, -3.7068e-01,
         -3.1287e-01,  6.1470e-01,  7.1862e-01,  7.5593e-01,  8.1600e-02,
         -2.1304e-01, -2.7714e-01, -3.1117e-01, -1.7633e-01,  6.9357e-01,
         -4.9835e-02,  5.2229e-02, -8.4994e-02,  1.6711e-01,  1.4834e-01,
          3.2471e-01,  7.6369e-02,  2.6942e-02, -1.1498e-02, -1.1446e-04,
         -3.4291e-01,  3.3222e-01,  1.7083e-01,  4.1274e-02,  1.4820e-01,
         -1.5029e-01, -4.4036e-01, -2.1269e-02,  5.2041e-01,  2.2830e-01,
          1.1161e+00, -7.9817e-01,  6.8870e-02,  2.8625e-02, -1.6561e-01,
          2.5613e-01,  1.8502e-01,  7.1575e-02, -1.1892e-02, -8.8731e-02,
          1.0265e-01,  1.3804e-01,  1.5433e-01, -2.5951e-01, -2.4831e-02,
          1.1444e-01,  1.0989e-02,  2.6538e-01, -2.3823e-01, -1.1081e-01,
          1.5222e-01, -1.9938e-01,  1.2448e-01,  1.8117e-02,  2.3248e-02,
          1.4906e-01]], device='cuda:0') tensor(0.3024, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
195000 特征值优化 tensor(2.5672, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0744e+00,  4.8534e+00,  3.7567e+00,  3.9736e-01, -6.6007e-01,
         -3.0612e-01,  2.8597e-01,  4.5055e-01,  7.2454e-02, -3.8589e-01,
         -3.1082e-01,  6.0373e-01,  6.3649e-01,  7.1123e-01,  8.6681e-02,
         -2.0265e-01, -2.4675e-01, -3.0034e-01, -1.3693e-01,  7.0225e-01,
         -2.0078e-02,  5.1909e-02, -9.2157e-02,  1.4018e-01,  1.1184e-01,
          3.4641e-01,  6.8193e-02,  2.9265e-02, -1.9504e-02,  3.8187e-03,
         -3.1788e-01,  2.9436e-01,  1.5351e-01,  2.2261e-02,  1.6796e-01,
         -1.4942e-01, -4.0725e-01, -4.1401e-02,  5.1883e-01,  1.6259e-01,
          1.3188e+00, -7.9797e-01,  4.0700e-02,  3.0859e-03, -1.3888e-01,
          1.2113e-01,  1.7651e-01,  7.0219e-02, -1.2431e-02, -7.3679e-02,
          1.0714e-01,  1.3608e-01,  1.3529e-01, -2.5903e-01, -1.9987e-02,
          1.1979e-01,  2.5654e-02,  2.5305e-01, -2.0385e-01, -9.2286e-02,
          1.5550e-01, -2.0387e-01,  1.3559e-01,  7.1181e-03, -1.3319e-02,
          1.3845e-01]], device='cuda:0') tensor(0.3283, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
196000 特征值优化 tensor(2.5609, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0122e+00,  4.9412e+00,  3.7505e+00,  3.2816e-01, -6.5263e-01,
         -3.0138e-01,  2.7963e-01,  4.7511e-01,  5.6100e-02, -3.9895e-01,
         -3.0977e-01,  5.6935e-01,  6.1593e-01,  6.7118e-01,  8.3553e-02,
         -2.0581e-01, -2.4194e-01, -2.9432e-01, -1.0246e-01,  7.0895e-01,
         -2.5105e-02,  4.8065e-02, -1.0924e-01,  1.2813e-01,  8.5491e-02,
          3.5240e-01,  6.7903e-02,  3.0267e-02, -1.7794e-02,  9.9479e-03,
         -3.2184e-01,  2.8597e-01,  1.2900e-01, -6.4707e-03,  1.7446e-01,
         -1.4345e-01, -3.9949e-01, -3.7255e-02,  5.1376e-01,  1.5262e-01,
          1.3792e+00, -7.9918e-01,  3.8727e-02, -2.2515e-02, -1.3046e-01,
          6.4811e-02,  1.7409e-01,  7.0104e-02, -8.8600e-03, -6.3896e-02,
          1.0856e-01,  1.3178e-01,  1.3970e-01, -2.7260e-01, -1.6708e-02,
          1.2243e-01,  3.8402e-02,  2.5060e-01, -1.8290e-01, -8.8837e-02,
          1.6032e-01, -1.9467e-01,  1.4044e-01,  2.4511e-03, -2.9888e-02,
          1.3454e-01]], device='cuda:0') tensor(0.3446, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
197000 特征值优化 tensor(2.5590, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0032,  4.9844,  3.7553,  0.2850, -0.6490, -0.2945,  0.2742,  0.4879,
          0.0530, -0.4038, -0.3156,  0.5521,  0.6227,  0.6470,  0.0851, -0.2094,
         -0.2419, -0.2860, -0.0855,  0.7116, -0.0281,  0.0360, -0.1068,  0.1160,
          0.0646,  0.3519,  0.0693,  0.0264, -0.0150,  0.0143, -0.3233,  0.2840,
          0.1164, -0.0156,  0.1780, -0.1334, -0.4006, -0.0298,  0.5111,  0.1511,
          1.3986, -0.7979,  0.0422, -0.0332, -0.1303,  0.0442,  0.1721,  0.0719,
         -0.0118, -0.0595,  0.1026,  0.1345,  0.1398, -0.2787, -0.0135,  0.1235,
          0.0433,  0.2469, -0.1762, -0.0928,  0.1571, -0.1848,  0.1382,  0.0108,
         -0.0348,  0.1346]], device='cuda:0') tensor(0.2870, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
198000 特征值优化 tensor(2.5579, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.0014,  5.0042,  3.7635,  0.2536, -0.6478, -0.2907,  0.2678,  0.4969,
          0.0542, -0.4009, -0.3153,  0.5405,  0.6334,  0.6355,  0.0864, -0.2081,
         -0.2428, -0.2907, -0.0750,  0.7150, -0.0273,  0.0323, -0.0996,  0.1091,
          0.0581,  0.3541,  0.0676,  0.0280, -0.0106,  0.0123, -0.3300,  0.2816,
          0.0931, -0.0169,  0.1802, -0.1295, -0.4025, -0.0253,  0.5110,  0.1515,
          1.4186, -0.7960,  0.0409, -0.0437, -0.1345,  0.0294,  0.1748,  0.0681,
         -0.0105, -0.0582,  0.0993,  0.1349,  0.1422, -0.2824, -0.0140,  0.1211,
          0.0502,  0.2414, -0.1701, -0.0938,  0.1585, -0.1782,  0.1359,  0.0141,
         -0.0383,  0.1322]], device='cuda:0') tensor(0.3428, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
199000 特征值优化 tensor(2.5572, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.9819,  5.0204,  3.7717,  0.2284, -0.6445, -0.2843,  0.2588,  0.4978,
          0.0560, -0.3992, -0.3020,  0.5264,  0.6306,  0.6258,  0.0873, -0.2120,
         -0.2388, -0.2829, -0.0754,  0.7172, -0.0260,  0.0353, -0.1010,  0.1004,
          0.0588,  0.3580,  0.0676,  0.0260, -0.0100,  0.0106, -0.3320,  0.2789,
          0.0716, -0.0152,  0.1823, -0.1276, -0.3998, -0.0239,  0.5040,  0.1530,
          1.4301, -0.7951,  0.0330, -0.0572, -0.1387,  0.0200,  0.1737,  0.0671,
         -0.0105, -0.0558,  0.0969,  0.1370,  0.1439, -0.2831, -0.0140,  0.1213,
          0.0577,  0.2392, -0.1660, -0.0946,  0.1623, -0.1775,  0.1369,  0.0195,
         -0.0430,  0.1289]], device='cuda:0') tensor(0.2987, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
200000 特征值优化 tensor(14.3961, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.9802,  1.1337,  0.7640,  0.0070, -0.1637,  1.0213,  0.1957, -0.0532,
          1.2266, -0.6335, -0.1415, -0.0921, -1.1981,  0.0518,  0.0026,  0.1522,
         -0.2394,  0.0958, -0.5177,  0.5199, -0.0973,  0.1247,  0.0039, -0.0916,
          0.1770, -0.6351,  0.5602,  0.3542,  0.2642,  0.3422, -1.2843, -0.5493,
         -0.1052, -0.0068,  0.0563, -0.1927,  0.0891, -1.5700,  0.9688,  0.6407,
         -0.2218,  0.7024,  0.1161,  0.1864,  0.6008,  0.2067,  0.0071, -1.3901,
         -0.0980, -0.1164, -0.0344,  0.0426,  0.5045,  0.2054,  0.1829,  0.0316,
         -0.1345, -0.1402,  0.4740,  0.3876,  0.2373, -0.0294, -0.1626,  0.0230,
          0.1783, -0.2375]], device='cuda:0') tensor(0.2663, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
201000 正交保障 tensor(0.2778, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.7980,  1.9349,  1.6780,  1.0717, -0.1691,  1.3537,  0.4278, -0.0359,
          0.6449, -0.3536, -0.1368,  0.0855, -0.8469,  0.1243,  0.1533,  0.2096,
         -0.1267,  0.3317, -0.4136,  0.4977,  0.0490,  0.0106, -0.1011,  0.0047,
          0.1215, -0.6046,  0.1860,  0.2910,  0.1562,  0.3764, -0.6963, -0.2009,
         -0.0615,  0.0224,  0.0248, -0.0821, -0.0365, -0.9794,  0.5881,  0.5690,
         -0.1845,  0.2252,  0.2104,  0.5086,  0.2184, -0.4577, -0.0037, -0.8135,
         -0.1059, -0.0670, -0.1023,  0.0170,  0.2006,  0.0164,  0.0614,  0.0955,
          0.0402, -0.0990,  0.2361,  0.2873,  0.0848,  0.0810, -0.1691, -0.1597,
         -0.1153, -0.3612]], device='cuda:0') tensor(0.2778, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
202000 特征值优化 tensor(5.8990, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.3496e+00,  2.4664e+00,  2.3246e+00,  1.5981e+00, -2.2897e-01,
          1.1738e+00,  6.5290e-01, -1.5383e-01,  3.9933e-01, -2.3841e-01,
         -2.0235e-01,  1.6222e-01, -8.4800e-01,  1.8467e-01,  1.4763e-01,
          1.2666e-01, -1.8578e-01,  4.1314e-01, -3.7510e-01,  4.2877e-01,
          5.2636e-02, -5.9922e-02, -2.0336e-01, -9.4540e-02,  5.1156e-02,
         -4.0289e-01,  1.3521e-01,  2.5202e-01,  1.3903e-01,  4.4093e-01,
         -5.6613e-01, -1.3275e-01, -2.1787e-02, -1.0209e-03,  1.2853e-01,
         -1.9956e-01,  2.3791e-02, -7.8667e-01,  5.6851e-01,  6.0387e-01,
         -4.6158e-01,  1.9840e-01,  2.8771e-01,  6.9092e-01,  2.6486e-01,
         -8.2634e-01, -1.8403e-02, -6.0990e-01, -6.2811e-02, -1.0771e-01,
         -1.8279e-01,  4.8038e-02,  7.2537e-02, -8.2547e-02,  1.0524e-01,
          1.3760e-01,  1.3350e-01, -9.7825e-02,  1.6741e-01,  2.6409e-01,
          1.6210e-01,  7.3411e-02, -1.9954e-01, -1.6143e-01, -2.3361e-01,
         -3.8299e-01]], device='cuda:0') tensor(0.2794, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
203000 特征值优化 tensor(5.7972, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.4308,  2.5081,  2.4476,  1.7553, -0.3217,  1.0212,  0.8234, -0.1764,
          0.4286, -0.3600, -0.2183,  0.1894, -0.8442,  0.2260,  0.0446,  0.0889,
         -0.1507,  0.4259, -0.3765,  0.4653,  0.0758, -0.0346, -0.2075, -0.0934,
          0.0507, -0.3785,  0.1296,  0.3030,  0.1281,  0.3903, -0.5151, -0.1223,
         -0.0159, -0.0208,  0.1507, -0.2255,  0.0443, -0.6900,  0.5439,  0.5511,
         -0.4453,  0.2219,  0.2183,  0.7435,  0.3558, -0.9847, -0.0639, -0.5241,
         -0.0142, -0.1203, -0.2086,  0.0777,  0.0455, -0.1434,  0.1152,  0.1384,
          0.1543, -0.0864,  0.1336,  0.2327,  0.2146,  0.0816, -0.1721, -0.1464,
         -0.2690, -0.3587]], device='cuda:0') tensor(0.2532, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
204000 正交保障 tensor(0.3366, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.3969e+00,  2.4359e+00,  2.5359e+00,  1.8410e+00, -3.6248e-01,
          8.9955e-01,  8.4638e-01, -1.4841e-01,  4.6129e-01, -4.4549e-01,
         -1.9371e-01,  2.1688e-01, -8.3343e-01,  2.0182e-01,  4.1002e-02,
          6.9479e-02, -1.3542e-01,  4.0912e-01, -3.8470e-01,  4.5738e-01,
          8.0952e-02, -4.2107e-02, -2.0918e-01, -8.2513e-02,  5.4720e-02,
         -3.6911e-01,  1.3133e-01,  3.1679e-01,  1.3747e-01,  3.7539e-01,
         -4.9676e-01, -1.0545e-01, -2.3619e-02, -2.9141e-02,  1.5128e-01,
         -2.4035e-01,  4.2148e-02, -6.4485e-01,  5.7549e-01,  5.2148e-01,
         -4.1010e-01,  2.1371e-01,  1.7751e-01,  7.4182e-01,  3.9027e-01,
         -1.0376e+00, -8.0595e-02, -4.7259e-01, -2.3396e-03, -1.3597e-01,
         -2.0763e-01,  8.0460e-02,  6.6063e-02, -1.5784e-01,  1.1841e-01,
          1.2862e-01,  1.5619e-01, -7.4223e-02,  1.2101e-01,  2.3217e-01,
          2.1767e-01,  7.2427e-02, -1.4499e-01, -1.5481e-01, -2.7337e-01,
         -3.2995e-01]], device='cuda:0') tensor(0.3366, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
205000 特征值优化 tensor(5.5622, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.5053,  2.3001,  2.6335,  2.1484, -0.2605,  0.6546,  0.8375,  0.0569,
          0.4184, -0.5618, -0.2018,  0.2867, -0.8586,  0.1379,  0.2525,  0.1981,
         -0.2350,  0.4355, -0.4101,  0.5133,  0.0904, -0.0375, -0.2092, -0.2066,
          0.0151, -0.4107,  0.1565,  0.3922,  0.1999,  0.3958, -0.4815, -0.1399,
         -0.0719, -0.0880,  0.0953, -0.2796,  0.1467, -0.5296,  0.6917,  0.4230,
         -0.3902,  0.2195,  0.2649,  0.7409,  0.4325, -1.1699, -0.0590, -0.3711,
          0.0792, -0.1084, -0.1987,  0.0381, -0.0345, -0.1559,  0.1425,  0.1911,
          0.1418,  0.0185,  0.1366,  0.1969,  0.2290, -0.0465, -0.0240, -0.1628,
         -0.2993, -0.2797]], device='cuda:0') tensor(0.2955, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
206000 特征值优化 tensor(5.4628, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.2509,  2.1928,  2.5617,  2.4449, -0.1447,  0.4473,  0.7677,  0.2141,
          0.3852, -0.6282, -0.1891,  0.4027, -0.6749,  0.0462,  0.3119,  0.1602,
         -0.2501,  0.5270, -0.3478,  0.5370,  0.0363, -0.0510, -0.2248, -0.2961,
         -0.0597, -0.4401,  0.1469,  0.4163,  0.1664,  0.3749, -0.4208, -0.1603,
         -0.0899, -0.1277,  0.0592, -0.2104,  0.2184, -0.3443,  0.8007,  0.2963,
         -0.2334,  0.2261,  0.3226,  0.7675,  0.4328, -1.2531, -0.0451, -0.3381,
          0.0906, -0.1106, -0.1755,  0.0157, -0.1372, -0.1406,  0.1526,  0.1821,
          0.1741,  0.0893,  0.1188,  0.1504,  0.2298, -0.1388,  0.0273, -0.1906,
         -0.3688, -0.2271]], device='cuda:0') tensor(0.2031, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
207000 特征值优化 tensor(5.2389, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.6696,  2.1431,  2.6711,  2.8480, -0.0580,  0.2880,  0.7468,  0.2981,
          0.3542, -0.7018, -0.1771,  0.4613, -0.5078, -0.0130,  0.3701,  0.1195,
         -0.2850,  0.5558, -0.3099,  0.5574,  0.1231, -0.1719, -0.2333, -0.3397,
         -0.1255, -0.4961,  0.1609,  0.4747,  0.1084,  0.3218, -0.3686, -0.1626,
         -0.1021, -0.1562,  0.0428, -0.1327,  0.3282, -0.2494,  0.7258,  0.2195,
         -0.1460,  0.3388,  0.3721,  0.7227,  0.3676, -1.3506, -0.0374, -0.2477,
          0.1014, -0.1174, -0.1714,  0.0081, -0.1897, -0.1021,  0.1544,  0.1717,
          0.1974,  0.1201,  0.0751,  0.1157,  0.1844, -0.1854,  0.0762, -0.2364,
         -0.4593, -0.2006]], device='cuda:0') tensor(0.2321, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
208000 正交保障 tensor(0.2459, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.9750e+00,  2.0514e+00,  2.6922e+00,  3.3440e+00,  5.3018e-03,
          1.8774e-02,  8.5596e-01,  2.8449e-01,  2.9554e-01, -9.0755e-01,
         -1.0971e-01,  5.1087e-01, -3.8101e-01, -9.4417e-02,  3.9407e-01,
          1.4863e-03, -4.0406e-01,  4.6019e-01, -3.3842e-01,  5.7794e-01,
          2.2595e-01, -2.4489e-01, -2.5287e-01, -2.5889e-01, -1.3103e-01,
         -6.5892e-01,  1.1625e-01,  4.9664e-01,  8.3202e-02,  2.6581e-01,
         -2.9938e-01, -1.7529e-01, -1.1995e-01, -1.7707e-01, -1.2200e-02,
         -9.7582e-02,  4.0139e-01, -2.8377e-01,  6.8119e-01,  1.9017e-01,
         -1.7680e-01,  4.7877e-01,  2.1323e-01,  6.9962e-01,  2.7646e-01,
         -1.4278e+00, -3.5828e-02, -1.6183e-01,  5.3728e-02, -1.1632e-01,
         -2.1042e-01, -4.4188e-02, -1.7603e-01, -6.0377e-02,  4.5924e-02,
          1.4648e-01,  1.9285e-01,  1.5507e-01,  5.0267e-02,  1.0975e-01,
          8.9786e-02, -1.6170e-01,  1.5400e-01, -2.9075e-01, -5.0774e-01,
         -2.2307e-01]], device='cuda:0') tensor(0.2459, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
209000 特征值优化 tensor(5.0584, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.7810e+00,  1.9703e+00,  2.6340e+00,  3.4810e+00, -4.6388e-03,
         -1.6836e-01,  8.7643e-01,  2.5364e-01,  2.0235e-01, -9.7013e-01,
         -2.5018e-02,  5.5907e-01, -3.2027e-01, -9.7196e-02,  3.9979e-01,
          1.5184e-02, -3.6866e-01,  3.9314e-01, -2.9465e-01,  5.8988e-01,
          2.3120e-01, -2.6290e-01, -2.6101e-01, -2.0500e-01, -1.8516e-01,
         -6.3689e-01,  8.5234e-02,  5.0195e-01,  8.7361e-02,  2.3313e-01,
         -2.9791e-01, -2.0594e-01, -1.1170e-01, -2.0589e-01, -5.0386e-02,
         -6.3074e-02,  4.1946e-01, -2.2027e-01,  6.3542e-01,  1.4053e-01,
         -1.5836e-01,  5.0620e-01,  1.4986e-01,  6.3729e-01,  2.8310e-01,
         -1.4133e+00, -2.0984e-02, -1.1849e-01,  7.0260e-02, -1.4313e-01,
         -2.3614e-01, -3.8573e-02, -1.6952e-01, -4.4062e-02,  1.2243e-03,
          1.2624e-01,  1.4348e-01,  1.7207e-01,  3.1750e-02,  8.5468e-02,
          7.6249e-02, -1.5704e-01,  2.3545e-01, -3.5913e-01, -4.8846e-01,
         -2.5577e-01]], device='cuda:0') tensor(0.2497, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
210000 特征值优化 tensor(5.0456, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.7228,  1.9433,  2.6325,  3.6072, -0.0163, -0.2296,  0.8760,  0.2275,
          0.1682, -0.9495,  0.0288,  0.6045, -0.3088, -0.1175,  0.3974,  0.0125,
         -0.3454,  0.3675, -0.2606,  0.5671,  0.2314, -0.2703, -0.2701, -0.1648,
         -0.2059, -0.6501,  0.0667,  0.5051,  0.0826,  0.2117, -0.3045, -0.2127,
         -0.1104, -0.2199, -0.0485, -0.0501,  0.4312, -0.2000,  0.6429,  0.1304,
         -0.1576,  0.5032,  0.1057,  0.6298,  0.2868, -1.4133, -0.0089, -0.1046,
          0.0724, -0.1592, -0.2425, -0.0342, -0.1750, -0.0413, -0.0128,  0.1133,
          0.1092,  0.1577,  0.0307,  0.0790,  0.0717, -0.1521,  0.2454, -0.3973,
         -0.4650, -0.3001]], device='cuda:0') tensor(0.2374, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
211000 正交保障 tensor(0.8515, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.6665,  0.5510,  1.4903,  1.2883,  0.4661, -0.1193, -1.0668, -1.3408,
          1.1329, -0.3880,  0.8439,  0.8673, -0.1171,  0.4399,  1.1795, -0.2644,
          1.0580,  1.3114, -0.4759, -0.2353, -1.2392, -0.7923, -0.3173, -2.7695,
          0.0515,  0.6431, -0.8767,  0.0844, -0.1527, -0.3556,  1.0786, -0.6893,
          0.4548, -1.5289, -0.0830,  0.5775,  1.9153, -0.0963, -1.0807,  0.1768,
          0.7155, -1.4719,  1.0572,  0.0403,  0.7730,  0.3646,  0.0307, -0.9288,
          0.0798, -0.0198, -0.5998, -0.5596, -0.7407,  0.6831, -0.4259, -1.9103,
         -1.0037,  0.6404,  1.5771,  0.3313, -0.3280,  0.8590, -0.1358, -0.7332,
         -1.0555, -1.6976]], device='cuda:0') tensor(0.8515, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
212000 正交保障 tensor(0.4035, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.1253,  1.5983,  2.3566,  2.2117,  0.0920,  0.4451, -0.2559, -0.4580,
          0.2681,  0.4461,  0.7847,  0.2033, -0.8577,  0.5129,  0.6691, -0.0184,
          0.1722,  0.7410, -0.1104,  0.0968, -0.3623, -0.1911,  0.1797, -1.6751,
         -0.1128,  0.2916, -0.1296,  0.1241, -0.1001, -0.0261,  0.2332,  0.1169,
         -0.0169, -0.6545,  0.0194,  0.0768,  0.9332,  0.2727, -0.2132,  0.2326,
         -0.2422, -0.6142,  0.3648,  0.4898,  0.2755,  0.0757, -0.0084, -0.2609,
          0.0490,  0.0691, -0.0350,  0.0139, -0.0684, -0.0600, -0.0477, -0.9131,
         -0.4210,  0.0114,  0.7341,  0.0573, -0.1236,  0.1974, -0.0723, -0.0439,
         -0.1562, -0.8262]], device='cuda:0') tensor(0.4035, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
213000 特征值优化 tensor(5.1470, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.2042e-01,  2.4002e+00,  2.5658e+00,  2.7234e+00,  2.5034e-02,
          3.5182e-01, -1.5099e-01, -1.9631e-01,  4.6099e-01,  5.8238e-01,
          4.5420e-01,  1.8185e-01, -7.1050e-01,  6.6267e-01,  6.9992e-01,
         -7.6806e-02, -5.6312e-02,  3.4280e-01, -8.7989e-02, -3.8230e-01,
          2.8913e-02, -1.8331e-01,  2.7802e-01, -1.2100e+00,  2.7947e-02,
          9.8554e-02,  5.2815e-03, -2.3317e-02, -2.5286e-02,  3.8624e-02,
          1.6324e-01,  8.4207e-02,  8.8029e-02, -3.5929e-01,  5.9906e-02,
         -1.0867e-03,  4.5239e-01,  1.3615e-01, -6.6335e-02,  1.0034e-01,
         -7.8881e-01, -4.3949e-01,  5.2683e-01,  4.7525e-01,  3.9971e-01,
          3.0152e-01,  2.3681e-03, -1.2772e-01, -2.4481e-02,  4.0373e-02,
          1.1271e-03,  3.4034e-02,  1.2847e-01,  5.3290e-02, -5.2904e-04,
         -5.5251e-01, -3.6840e-01, -4.6294e-02,  4.4214e-01, -1.6715e-01,
         -1.1254e-01,  5.9564e-02, -2.2579e-01, -1.1116e-01,  2.2783e-01,
         -6.0753e-01]], device='cuda:0') tensor(0.3263, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
214000 特征值优化 tensor(3.6322, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.5174e-01,  2.9905e+00,  2.4680e+00,  2.9788e+00,  3.3464e-02,
          3.2094e-01, -1.1069e-01, -2.2544e-01,  6.0952e-01,  2.2800e-01,
          7.6075e-01,  4.3026e-01, -8.0230e-01,  6.7080e-01,  5.8243e-01,
         -1.5003e-01, -1.7435e-01,  6.5351e-01, -1.9573e-01, -5.6188e-01,
          3.2650e-01, -1.9212e-01,  1.0616e-01, -1.0314e+00, -1.1699e-01,
         -4.6102e-02,  2.5244e-02, -8.9634e-02, -4.7466e-02,  1.1149e-01,
          1.5374e-01,  3.1393e-01,  5.4800e-02, -2.9000e-01,  1.9975e-01,
          1.0022e-01,  2.5780e-01, -6.3278e-03, -3.7420e-02, -3.2730e-01,
         -4.8410e-01, -4.0166e-01,  6.6147e-01,  6.9609e-01,  4.1556e-01,
          6.0701e-01, -4.4220e-04, -1.7916e-01, -1.5526e-01,  1.1316e-01,
          2.3576e-02,  6.5531e-02,  1.5748e-02,  1.2275e-01,  2.7720e-02,
         -3.2099e-01, -7.7948e-02,  9.5068e-02,  3.2933e-01, -2.7451e-01,
         -3.0703e-01, -7.5036e-02, -7.5625e-02, -2.1145e-01,  1.5876e-01,
         -3.4902e-01]], device='cuda:0') tensor(0.3230, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
215000 特征值优化 tensor(3.2844, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5975,  3.3512,  2.2060,  2.8171,  0.0910,  0.5289, -0.1347, -0.3861,
          0.8577,  0.2028,  0.9450,  0.5408, -0.8104,  0.6716,  0.4278, -0.2125,
         -0.2901,  0.5747, -0.1222, -0.5127,  0.3801, -0.2033,  0.1002, -0.9022,
         -0.1430, -0.1084,  0.0419, -0.1310, -0.0514,  0.1156,  0.2215,  0.1869,
          0.0184, -0.2947,  0.2008,  0.1394,  0.1527, -0.0971,  0.0123, -0.4643,
         -0.1635, -0.4140,  0.6148,  0.5257,  0.4880,  0.5858, -0.0117, -0.2681,
         -0.1735,  0.1388,  0.0295,  0.1093, -0.0609,  0.1581,  0.0397, -0.1834,
         -0.0160,  0.1609,  0.2151, -0.2859, -0.2752, -0.2550, -0.0116, -0.2233,
          0.0388, -0.2038]], device='cuda:0') tensor(0.3002, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
216000 特征值优化 tensor(3.2589, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 6.0483e-01,  3.4340e+00,  2.0690e+00,  2.7768e+00,  1.0583e-01,
          5.2468e-01, -1.8397e-01, -4.2834e-01,  8.7620e-01,  1.7487e-01,
          1.0061e+00,  5.2672e-01, -8.4377e-01,  6.7424e-01,  4.0575e-01,
         -2.0479e-01, -3.0485e-01,  5.3209e-01, -1.2496e-01, -4.9626e-01,
          4.0223e-01, -2.3153e-01,  1.3600e-01, -8.2598e-01, -1.4878e-01,
         -9.3421e-02,  3.4951e-02, -1.3147e-01, -7.5004e-02,  1.0966e-01,
          2.2216e-01,  1.5573e-01,  4.3799e-02, -3.0287e-01,  1.8181e-01,
          1.6388e-01,  1.3431e-01, -1.2899e-01,  4.4545e-02, -5.1579e-01,
         -7.5923e-02, -3.7689e-01,  6.0582e-01,  4.8600e-01,  5.2366e-01,
          4.9460e-01, -1.2142e-02, -2.7036e-01, -1.6955e-01,  1.3497e-01,
          4.5345e-02,  1.2071e-01, -7.2441e-02,  1.6921e-01,  3.6144e-02,
         -1.4011e-01, -3.7175e-02,  1.6979e-01,  1.5350e-01, -2.5884e-01,
         -2.3831e-01, -2.8597e-01,  1.3090e-03, -1.9127e-01,  8.3766e-03,
         -1.7928e-01]], device='cuda:0') tensor(0.2756, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
217000 特征值优化 tensor(3.2456, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.5293,  3.4395,  1.9460,  2.8104,  0.0981,  0.4973, -0.2359, -0.4492,
          0.8693,  0.1567,  1.0570,  0.5137, -0.8840,  0.6972,  0.3858, -0.1827,
         -0.3008,  0.4493, -0.1344, -0.4683,  0.4187, -0.2666,  0.1778, -0.7453,
         -0.1412, -0.0923,  0.0258, -0.1381, -0.0922,  0.0742,  0.2056,  0.1369,
          0.0690, -0.3088,  0.1671,  0.1759,  0.1198, -0.1382,  0.0576, -0.5763,
         -0.0172, -0.3377,  0.5431,  0.4558,  0.5874,  0.4090, -0.0142, -0.2642,
         -0.1737,  0.1256,  0.0586,  0.1242, -0.0600,  0.1497,  0.0495, -0.1160,
         -0.0522,  0.1700,  0.1337, -0.2386, -0.2132, -0.2815,  0.0083, -0.1840,
          0.0062, -0.1801]], device='cuda:0') tensor(0.3687, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
218000 特征值优化 tensor(3.2332, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.4497,  3.4115,  1.8595,  2.8975,  0.0859,  0.4931, -0.2762, -0.4717,
          0.8625,  0.1568,  1.0857,  0.5112, -0.8894,  0.7175,  0.3646, -0.1682,
         -0.2859,  0.3577, -0.1342, -0.4388,  0.4380, -0.3003,  0.2206, -0.6534,
         -0.1408, -0.0867,  0.0208, -0.1422, -0.0888,  0.0436,  0.1870,  0.1205,
          0.0817, -0.3003,  0.1577,  0.1884,  0.1110, -0.1368,  0.0638, -0.6492,
          0.0554, -0.3115,  0.4817,  0.4438,  0.6426,  0.3450, -0.0181, -0.2625,
         -0.1821,  0.1205,  0.0690,  0.1310, -0.0422,  0.1327,  0.0611, -0.0892,
         -0.0495,  0.1785,  0.1188, -0.2274, -0.2109, -0.2802,  0.0204, -0.1844,
          0.0064, -0.1884]], device='cuda:0') tensor(0.3183, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
219000 特征值优化 tensor(3.2275, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3904,  3.3622,  1.8013,  2.9750,  0.0822,  0.4744, -0.3035, -0.4789,
          0.8481,  0.1499,  1.0945,  0.5035, -0.8922,  0.7186,  0.3554, -0.1499,
         -0.2745,  0.2890, -0.1305, -0.4281,  0.4483, -0.3182,  0.2436, -0.5930,
         -0.1426, -0.0765,  0.0144, -0.1440, -0.0917,  0.0282,  0.1706,  0.1043,
          0.0874, -0.2997,  0.1507,  0.1967,  0.1121, -0.1308,  0.0672, -0.6919,
          0.0956, -0.2947,  0.4499,  0.4310,  0.6975,  0.2816, -0.0216, -0.2575,
         -0.1847,  0.1168,  0.0757,  0.1302, -0.0322,  0.1205,  0.0700, -0.0729,
         -0.0522,  0.1823,  0.1057, -0.2132, -0.2108, -0.2804,  0.0208, -0.1880,
          0.0060, -0.1939]], device='cuda:0') tensor(0.3437, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
220000 特征值优化 tensor(3.2246, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 0.3419,  3.3300,  1.7512,  3.0390,  0.0788,  0.4499, -0.3226, -0.4804,
          0.8395,  0.1522,  1.0989,  0.5086, -0.8832,  0.7212,  0.3470, -0.1378,
         -0.2681,  0.2444, -0.1273, -0.4174,  0.4542, -0.3333,  0.2579, -0.5498,
         -0.1442, -0.0706,  0.0074, -0.1457, -0.0869,  0.0163,  0.1608,  0.0942,
          0.0883, -0.3036,  0.1434,  0.1991,  0.1112, -0.1200,  0.0632, -0.7238,
          0.1220, -0.2738,  0.4225,  0.4168,  0.7333,  0.2345, -0.0273, -0.2506,
         -0.1864,  0.1124,  0.0832,  0.1292, -0.0206,  0.1035,  0.0765, -0.0616,
         -0.0554,  0.1853,  0.1023, -0.2052, -0.2204, -0.2817,  0.0167, -0.1952,
          0.0073, -0.1966]], device='cuda:0') tensor(0.3463, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
221000 特征值优化 tensor(3.2229, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.1342e-01,  3.2980e+00,  1.7287e+00,  3.0876e+00,  7.8576e-02,
          4.4184e-01, -3.3731e-01, -4.8097e-01,  8.3160e-01,  1.5568e-01,
          1.0997e+00,  5.1951e-01, -8.6757e-01,  7.1698e-01,  3.4014e-01,
         -1.2889e-01, -2.6088e-01,  2.1541e-01, -1.3005e-01, -4.1487e-01,
          4.6216e-01, -3.4535e-01,  2.7092e-01, -5.1985e-01, -1.4372e-01,
         -6.7994e-02,  2.9330e-03, -1.4556e-01, -8.7466e-02,  8.1140e-03,
          1.5375e-01,  8.5699e-02,  8.4795e-02, -3.0486e-01,  1.4340e-01,
          2.0302e-01,  1.1049e-01, -1.0908e-01,  5.8754e-02, -7.4062e-01,
          1.3076e-01, -2.6641e-01,  3.9370e-01,  4.0181e-01,  7.5595e-01,
          2.0844e-01, -2.9871e-02, -2.4770e-01, -1.8557e-01,  1.0050e-01,
          8.8302e-02,  1.3006e-01, -1.5221e-02,  8.4958e-02,  8.2413e-02,
         -4.9789e-02, -5.4294e-02,  1.8034e-01,  9.5857e-02, -1.9617e-01,
         -2.3026e-01, -2.7987e-01,  1.6259e-02, -1.9562e-01,  7.4619e-03,
         -1.9746e-01]], device='cuda:0') tensor(0.3590, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
222000 特征值优化 tensor(3.2160, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.9595e-01,  3.2519e+00,  1.6851e+00,  3.1753e+00,  7.7138e-02,
          4.2711e-01, -3.5765e-01, -5.0513e-01,  7.9933e-01,  1.7213e-01,
          1.0960e+00,  5.2802e-01, -8.4313e-01,  7.2562e-01,  3.2619e-01,
         -1.2115e-01, -2.4741e-01,  1.9612e-01, -1.3467e-01, -4.0618e-01,
          4.7436e-01, -3.6279e-01,  2.8503e-01, -5.1057e-01, -1.3507e-01,
         -5.4656e-02,  1.0559e-03, -1.5106e-01, -8.2173e-02,  8.0114e-03,
          1.5187e-01,  7.8238e-02,  7.9416e-02, -3.0295e-01,  1.4057e-01,
          2.0388e-01,  1.0841e-01, -9.8857e-02,  4.6569e-02, -7.8039e-01,
          1.7195e-01, -2.5554e-01,  3.3303e-01,  3.7330e-01,  7.9992e-01,
          1.4252e-01, -3.5618e-02, -2.4217e-01, -1.8194e-01,  7.8755e-02,
          9.5235e-02,  1.3263e-01, -7.9426e-03,  5.8685e-02,  9.5319e-02,
         -3.2227e-02, -4.9651e-02,  1.7525e-01,  9.5579e-02, -1.9516e-01,
         -2.4025e-01, -2.7837e-01, -3.5300e-04, -1.9474e-01,  3.4750e-02,
         -1.9329e-01]], device='cuda:0') tensor(0.3609, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
223000 正交保障 tensor(0.3278, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.4949e-01,  3.2208e+00,  1.6551e+00,  3.2574e+00,  7.0521e-02,
          4.2154e-01, -3.6993e-01, -5.1061e-01,  7.8212e-01,  2.0232e-01,
          1.0908e+00,  5.4477e-01, -8.0171e-01,  7.1541e-01,  3.1209e-01,
         -1.1006e-01, -2.3236e-01,  1.6132e-01, -1.4704e-01, -3.9158e-01,
          4.8956e-01, -3.8907e-01,  2.9432e-01, -4.8451e-01, -1.2123e-01,
         -5.2597e-02, -1.2092e-02, -1.5135e-01, -7.2951e-02,  9.8129e-04,
          1.4103e-01,  6.3560e-02,  6.8421e-02, -3.0162e-01,  1.3287e-01,
          1.9644e-01,  1.0700e-01, -6.7714e-02,  3.0264e-02, -8.0754e-01,
          1.8473e-01, -2.4209e-01,  2.5022e-01,  3.1341e-01,  8.4002e-01,
          9.7975e-02, -4.2573e-02, -2.3711e-01, -1.8150e-01,  4.6445e-02,
          9.8605e-02,  1.3595e-01,  4.3666e-03,  1.2978e-02,  9.6871e-02,
         -9.1141e-03, -4.7463e-02,  1.6918e-01,  8.5093e-02, -1.8814e-01,
         -2.6202e-01, -2.7385e-01, -8.4898e-03, -1.9715e-01,  3.6354e-02,
         -1.9623e-01]], device='cuda:0') tensor(0.3278, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
224000 特征值优化 tensor(27.2697, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.4223, -0.0036, -0.6349,  1.0709, -0.0603,  0.3761,  0.1052, -0.0528,
          1.0421, -0.3089,  0.0391, -1.9397,  0.5141, -0.1799, -0.3491,  0.5384,
         -1.0358,  0.0870, -0.7726, -0.2770,  1.8456, -0.2265, -1.3604, -0.9853,
          0.8040,  0.1514,  0.1393, -0.6536, -0.0050,  0.5279, -0.3923, -0.3157,
          0.9932,  0.6757, -0.7772,  0.1335, -0.5580, -0.5862,  2.1307,  0.4122,
          1.0511, -0.9342,  0.7132,  0.8119, -0.6000, -1.0321, -0.0362, -0.0160,
          0.0586, -0.0212,  0.8897,  1.1548, -0.5473,  0.6274, -0.2410,  0.8401,
         -0.5832,  1.7980,  0.8586,  0.6493,  0.1130, -0.2719, -0.3168,  0.2424,
         -1.4896, -0.5602]], device='cuda:0') tensor(0.7354, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
225000 特征值优化 tensor(6.7585, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.1772e+00,  9.1955e-01,  4.9777e-01,  2.0025e+00, -3.1465e-01,
          3.5228e-01, -4.6725e-02, -2.8637e-01,  1.6466e-01, -2.0264e-01,
         -1.6777e-01, -1.2344e+00, -1.1456e-01, -6.1824e-01, -8.7924e-02,
          5.3505e-02, -3.6863e-01,  2.5522e-01, -3.3679e-01, -2.5536e-02,
          9.6686e-01,  2.5554e-03, -4.4638e-01, -3.5285e-01,  1.3995e-01,
         -2.3192e-01,  1.9282e-04, -6.5746e-02, -3.0702e-04,  2.9009e-01,
          6.8327e-03,  1.3365e-02,  4.2191e-01,  2.5553e-01, -7.1302e-02,
         -4.1328e-02, -2.9587e-01,  1.6718e-01,  9.8935e-01,  3.4475e-01,
          8.0413e-01,  2.8239e-02,  2.5692e-01,  6.2785e-02, -7.1488e-02,
         -5.8974e-01,  6.3821e-02, -1.0401e-01,  4.5761e-02, -5.6222e-02,
          2.2716e-01,  4.1978e-01, -1.1411e-01,  8.5920e-02, -2.6708e-02,
          8.7590e-02, -1.5979e-01,  1.0157e+00,  1.4466e-01,  8.4366e-02,
          8.3306e-02, -2.0842e-01,  2.3971e-01,  2.1160e-01, -5.9289e-01,
          2.2248e-02]], device='cuda:0') tensor(0.3483, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
226000 特征值优化 tensor(4.0302, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.1977e+00,  1.6952e+00,  1.0381e+00,  2.8347e+00, -5.7526e-01,
          8.1042e-01, -1.1746e-02, -1.5930e-01,  1.5818e-02, -4.6031e-02,
          1.4387e-02, -6.9289e-01, -2.5892e-01, -1.0223e+00,  1.0189e-03,
         -4.4961e-02, -3.0200e-01,  2.7449e-01, -3.5863e-01, -6.7596e-02,
          6.3182e-01,  1.3449e-02, -1.4296e-01, -3.3909e-01,  3.5675e-02,
         -5.6983e-01, -3.9320e-02,  5.9845e-02, -9.2314e-02,  2.8287e-01,
         -3.0163e-02, -2.1376e-02,  4.2171e-01,  1.5093e-01, -3.8713e-02,
          3.0086e-02, -5.9456e-01,  5.0079e-01,  8.1021e-01,  4.1918e-01,
          6.1211e-01,  1.5576e-01,  1.7662e-01, -1.5425e-01,  2.4446e-01,
         -7.8114e-01,  1.1620e-01, -1.6077e-01,  2.6693e-02, -6.5839e-02,
          6.2296e-02,  2.3616e-01, -4.4566e-02, -1.4725e-01,  9.2046e-03,
          1.9170e-03, -1.4052e-01,  5.2859e-01, -2.2793e-02, -6.4621e-02,
          1.1159e-01, -1.0872e-01,  2.1306e-01,  2.6100e-01, -4.9774e-01,
          2.2994e-01]], device='cuda:0') tensor(0.3190, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
227000 特征值优化 tensor(3.6123, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.4986e+00,  1.9265e+00,  9.6694e-01,  3.3186e+00, -6.1921e-01,
          8.6777e-01, -2.5545e-02, -3.1466e-01,  6.9483e-02,  2.7636e-02,
          2.3146e-01, -5.0570e-01, -4.4878e-01, -1.2906e+00,  3.6308e-02,
         -5.1596e-02, -2.4645e-01,  3.1859e-01, -4.4131e-01, -9.0283e-03,
          5.3714e-01,  9.4387e-03, -4.8890e-02, -3.4999e-01,  1.3507e-01,
         -7.4051e-01, -7.4013e-02,  8.7169e-02, -7.9447e-02,  2.9638e-01,
          1.0668e-02,  8.1464e-04,  3.4241e-01,  1.3280e-01,  3.2337e-02,
         -6.9854e-02, -6.6503e-01,  4.9939e-01,  7.5506e-01,  3.0146e-01,
          6.9170e-01,  1.1054e-01,  1.8498e-01, -9.7167e-02,  2.5834e-01,
         -9.2961e-01,  8.4001e-02, -1.3550e-01,  1.4120e-02, -1.5865e-02,
          1.9603e-02,  1.7286e-01, -4.2892e-02, -1.6723e-01, -1.3875e-02,
         -1.0217e-02, -1.6365e-01,  3.7870e-01, -2.5916e-02, -3.3586e-02,
         -2.4354e-02, -1.6415e-01,  1.6158e-01,  3.0868e-01, -2.6050e-01,
          8.6316e-02]], device='cuda:0') tensor(0.2385, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
228000 特征值优化 tensor(2.2525, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.5395e+00,  2.2669e+00,  3.9995e-01,  3.4042e+00, -4.3846e-01,
          6.7980e-01,  1.1862e-01, -9.3934e-01,  3.4640e-01, -3.9053e-03,
          3.6344e-01, -3.0603e-01, -7.8741e-01, -1.8479e+00,  4.0985e-02,
          9.4916e-02, -3.4557e-01,  3.2121e-01, -3.2523e-01, -4.2615e-02,
          4.1406e-01, -2.1328e-01,  1.2779e-01, -6.4429e-01,  1.6388e-01,
         -7.1820e-01, -5.7960e-02,  7.4350e-02, -4.7754e-02,  1.6285e-01,
          1.9273e-01, -7.8689e-03,  2.2160e-01,  1.1297e-01,  7.1380e-02,
         -8.5478e-02, -6.6538e-01,  5.8213e-01,  6.9111e-01,  1.0797e-01,
          1.1338e+00,  1.1576e-01, -5.0498e-03,  9.7580e-03, -1.0384e-01,
         -4.8031e-01,  4.6152e-02, -9.0908e-02,  5.7976e-04, -4.5388e-02,
         -1.6376e-02,  1.7214e-01,  3.2418e-02, -2.4135e-01, -1.1138e-01,
          1.2951e-02, -1.3546e-01,  4.3271e-02, -8.5899e-03,  1.3114e-01,
         -7.1458e-02,  1.5735e-02,  5.2514e-02,  2.7895e-01, -5.8374e-02,
          4.0968e-02]], device='cuda:0') tensor(0.3421, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
229000 正交保障 tensor(0.3170, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.5271e+00,  2.2250e+00,  2.5225e-01,  3.5273e+00, -4.0182e-01,
          6.3250e-01,  1.2481e-01, -9.9299e-01,  3.7291e-01, -1.1235e-02,
          5.0215e-01, -3.1523e-01, -8.2002e-01, -1.8368e+00,  8.9595e-02,
          1.4448e-01, -3.7397e-01,  3.7351e-01, -3.0695e-01, -4.3001e-02,
          3.7225e-01, -2.0098e-01,  1.0983e-01, -7.0662e-01,  1.4813e-01,
         -6.9642e-01, -8.5299e-02,  7.8352e-02, -4.0389e-02,  1.5290e-01,
          1.9898e-01,  5.6615e-04,  1.8769e-01,  1.2122e-01,  7.4874e-02,
         -8.2437e-02, -6.3224e-01,  5.6712e-01,  6.1583e-01,  1.2121e-01,
          1.0422e+00,  1.0431e-01,  5.3159e-03,  4.8227e-03, -1.2761e-01,
         -4.1363e-01,  1.3665e-02, -7.6024e-02,  1.1050e-02, -3.5416e-02,
         -2.5611e-02,  1.5928e-01,  4.7713e-02, -1.9860e-01, -1.0839e-01,
          7.5831e-03, -9.2068e-02,  4.0043e-02,  1.0602e-02,  1.1352e-01,
         -1.0482e-01,  5.1190e-02,  4.2104e-02,  2.5922e-01, -5.8908e-02,
          5.5782e-02]], device='cuda:0') tensor(0.3170, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
230000 特征值优化 tensor(2.1729, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.4613e+00,  2.1282e+00,  1.1283e-01,  3.6751e+00, -3.7295e-01,
          5.8925e-01,  1.3000e-01, -1.0582e+00,  3.5641e-01,  1.1798e-03,
          6.9472e-01, -3.1598e-01, -7.9519e-01, -1.7133e+00,  1.3069e-01,
          1.5788e-01, -3.8643e-01,  3.8081e-01, -3.0672e-01, -4.9074e-02,
          3.3422e-01, -2.0850e-01,  9.7406e-02, -7.1266e-01,  1.4704e-01,
         -6.8265e-01, -9.6594e-02,  8.4779e-02, -2.1464e-02,  1.3473e-01,
          1.8822e-01,  4.3282e-03,  1.6246e-01,  1.1491e-01,  1.2193e-01,
         -9.4959e-02, -5.9138e-01,  5.5102e-01,  5.9229e-01,  1.3475e-01,
          9.4426e-01,  1.0074e-01, -8.0389e-04,  8.4385e-03, -1.0512e-01,
         -4.1203e-01, -3.8541e-03, -6.0189e-02,  7.5734e-03, -3.2276e-02,
         -5.2527e-02,  1.5114e-01,  4.8217e-02, -1.8554e-01, -1.0381e-01,
          2.1981e-03, -8.2385e-02,  1.2713e-02,  1.4805e-02,  5.5628e-02,
         -1.6478e-01,  1.0684e-01,  4.3494e-02,  2.1790e-01, -9.4017e-02,
          3.7691e-02]], device='cuda:0') tensor(0.3400, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
231000 正交保障 tensor(0.3482, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.3999e+00,  2.0425e+00,  2.6097e-02,  3.7973e+00, -3.5038e-01,
          5.6098e-01,  1.1472e-01, -1.1010e+00,  3.4446e-01, -3.7704e-03,
          7.9268e-01, -3.2522e-01, -7.8045e-01, -1.6360e+00,  1.6029e-01,
          1.7156e-01, -3.9115e-01,  3.9740e-01, -3.1596e-01, -4.7679e-02,
          2.9895e-01, -2.1219e-01,  9.2210e-02, -7.2872e-01,  1.5688e-01,
         -6.6341e-01, -1.0053e-01,  8.1200e-02, -8.8317e-03,  1.2966e-01,
          1.7674e-01,  2.8559e-03,  1.5529e-01,  1.2953e-01,  1.1674e-01,
         -8.5696e-02, -5.6537e-01,  5.3863e-01,  5.6390e-01,  1.4749e-01,
          8.7758e-01,  9.1063e-02, -2.3314e-02, -8.5581e-03, -1.1187e-01,
         -3.7771e-01, -1.5652e-02, -5.4231e-02,  3.0800e-02, -3.6450e-02,
         -6.8107e-02,  1.3818e-01,  4.5523e-02, -1.7102e-01, -1.0003e-01,
          1.9124e-03, -6.0043e-02, -1.8049e-03,  2.3572e-02,  4.8139e-02,
         -1.7863e-01,  1.1385e-01,  1.9326e-02,  1.9652e-01, -1.0499e-01,
          2.8656e-02]], device='cuda:0') tensor(0.3482, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
232000 特征值优化 tensor(2.1558, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.3338e+00,  1.9945e+00, -2.4092e-02,  3.8858e+00, -3.3788e-01,
          5.4121e-01,  8.3345e-02, -1.1245e+00,  3.4201e-01, -1.4253e-02,
          8.4025e-01, -3.3096e-01, -7.6572e-01, -1.5866e+00,  1.8032e-01,
          1.8497e-01, -3.8214e-01,  4.0842e-01, -3.2730e-01, -5.0229e-02,
          2.8222e-01, -2.1202e-01,  8.4055e-02, -7.4152e-01,  1.6792e-01,
         -6.4808e-01, -1.1432e-01,  7.1890e-02,  4.3999e-03,  1.2969e-01,
          1.7783e-01,  3.3285e-03,  1.5564e-01,  1.3926e-01,  1.1784e-01,
         -7.4271e-02, -5.4114e-01,  5.2861e-01,  5.4491e-01,  1.5022e-01,
          8.4078e-01,  8.8004e-02, -3.8793e-02,  4.1805e-03, -1.1444e-01,
         -3.5893e-01, -2.9200e-02, -6.0386e-02,  5.6086e-02, -3.3930e-02,
         -8.5084e-02,  1.2696e-01,  4.3731e-02, -1.5130e-01, -9.9121e-02,
          2.6870e-03, -4.8513e-02, -1.1076e-02,  2.9325e-02,  4.8257e-02,
         -1.8759e-01,  1.1601e-01, -5.0087e-04,  1.9776e-01, -1.0557e-01,
          1.5636e-02]], device='cuda:0') tensor(0.3119, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
233000 特征值优化 tensor(2.1505, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.2572e+00,  1.9441e+00, -6.5605e-02,  3.9860e+00, -3.2280e-01,
          5.2692e-01,  4.3695e-02, -1.1524e+00,  3.4248e-01, -1.8272e-02,
          8.7630e-01, -3.4169e-01, -7.4955e-01, -1.5352e+00,  2.0616e-01,
          1.8799e-01, -3.7438e-01,  4.1321e-01, -3.5090e-01, -4.9387e-02,
          2.6590e-01, -2.1531e-01,  7.5740e-02, -7.4733e-01,  1.8939e-01,
         -6.2690e-01, -1.2719e-01,  5.1837e-02,  1.0360e-02,  1.2634e-01,
          1.7378e-01,  4.2028e-03,  1.6350e-01,  1.5442e-01,  1.1797e-01,
         -5.7378e-02, -5.0935e-01,  5.0629e-01,  5.4091e-01,  1.5248e-01,
          8.0723e-01,  8.4119e-02, -6.0131e-02,  2.8110e-02, -1.1715e-01,
         -3.4545e-01, -4.9090e-02, -7.5233e-02,  8.3431e-02, -3.9275e-02,
         -1.0738e-01,  1.1311e-01,  3.5107e-02, -1.2976e-01, -9.7126e-02,
          1.5660e-04, -3.8838e-02, -2.6493e-02,  3.5929e-02,  5.5825e-02,
         -1.9351e-01,  1.1402e-01, -2.5314e-02,  2.1004e-01, -1.0133e-01,
         -5.3391e-03]], device='cuda:0') tensor(0.3442, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
234000 正交保障 tensor(0.3074, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.2429e+00,  1.8956e+00, -8.8253e-02,  4.0608e+00, -3.1472e-01,
          5.2633e-01,  2.6657e-02, -1.1818e+00,  3.3887e-01, -2.1477e-02,
          8.9657e-01, -3.4984e-01, -7.3727e-01, -1.4967e+00,  2.1988e-01,
          1.8890e-01, -3.7404e-01,  4.1563e-01, -3.6429e-01, -4.7426e-02,
          2.5516e-01, -2.1624e-01,  7.4650e-02, -7.4541e-01,  2.0260e-01,
         -6.1213e-01, -1.3171e-01,  4.3089e-02,  6.0655e-03,  1.1441e-01,
          1.7151e-01,  1.8934e-03,  1.6137e-01,  1.6870e-01,  1.2021e-01,
         -3.8573e-02, -4.9629e-01,  4.8147e-01,  5.3629e-01,  1.4950e-01,
          7.9211e-01,  7.8182e-02, -7.2996e-02,  4.1155e-02, -1.1551e-01,
         -3.4037e-01, -5.5338e-02, -8.4461e-02,  9.8216e-02, -4.2019e-02,
         -1.1909e-01,  1.1040e-01,  2.7683e-02, -1.1022e-01, -9.7665e-02,
         -1.2457e-03, -3.1642e-02, -3.5795e-02,  3.6586e-02,  6.3314e-02,
         -1.9730e-01,  1.0652e-01, -3.1379e-02,  2.1937e-01, -9.3976e-02,
         -1.3258e-02]], device='cuda:0') tensor(0.3074, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
235000 特征值优化 tensor(2.1446, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.2256e+00,  1.8332e+00, -1.2459e-01,  4.1365e+00, -3.0463e-01,
          5.1628e-01,  1.0144e-02, -1.2006e+00,  3.3311e-01, -2.6057e-02,
          9.1349e-01, -3.5936e-01, -7.3582e-01, -1.4645e+00,  2.3846e-01,
          1.8795e-01, -3.6111e-01,  4.0769e-01, -3.7186e-01, -4.8280e-02,
          2.3741e-01, -2.1818e-01,  6.9338e-02, -7.4064e-01,  2.1109e-01,
         -6.0298e-01, -1.3463e-01,  3.8609e-02,  3.5487e-03,  1.0278e-01,
          1.7084e-01,  1.5305e-03,  1.5497e-01,  1.8317e-01,  1.1881e-01,
         -2.6898e-02, -4.7949e-01,  4.6736e-01,  5.3074e-01,  1.4531e-01,
          7.7195e-01,  7.1999e-02, -7.8202e-02,  5.1867e-02, -1.1243e-01,
         -3.2817e-01, -6.0148e-02, -8.6235e-02,  1.1425e-01, -4.5630e-02,
         -1.2772e-01,  1.1064e-01,  1.4456e-02, -9.8552e-02, -9.6952e-02,
         -4.8767e-04, -2.5857e-02, -4.7169e-02,  3.2477e-02,  7.1205e-02,
         -1.9174e-01,  9.2375e-02, -4.1000e-02,  2.2773e-01, -9.5198e-02,
         -2.2726e-02]], device='cuda:0') tensor(0.3052, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
236000 特征值优化 tensor(22.9434, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-1.6595,  1.6258,  1.5281,  0.9426,  0.5898, -0.5211,  0.1509, -1.1531,
         -0.8448, -0.4983,  2.1536, -0.1082,  0.5912,  0.8208, -0.4328, -0.3883,
         -0.3085,  1.9421, -0.2326, -0.9390,  0.3042,  1.1770,  1.9175, -0.2975,
          0.4682,  1.1207,  0.2337, -0.4020,  1.3557, -1.3094,  0.1482, -0.4973,
         -0.0069, -0.1894,  0.4751,  0.2938,  0.5634, -0.0571,  0.6295,  0.6772,
         -0.5697,  0.2054, -2.2054, -1.4130, -0.0274, -0.0233, -0.1900,  0.1917,
         -0.1990, -0.2695,  0.4875, -0.9120,  1.6036, -0.1747,  0.3966,  0.2225,
          0.1943,  0.8024, -0.3166, -0.6640, -0.3272, -0.2131,  0.7616,  1.4100,
         -1.7964, -0.2674]], device='cuda:0') tensor(0.5967, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
237000 正交保障 tensor(0.3937, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[-5.7404e-01,  2.7324e+00,  2.2541e+00,  1.9879e+00, -1.1851e-01,
         -1.2485e-01,  1.4283e-01, -3.6590e-01, -6.3487e-01,  3.8734e-02,
          1.3228e+00, -2.4917e-01,  3.1491e-01,  4.2339e-01, -3.2346e-01,
          3.4797e-04,  1.2095e-01,  1.0842e+00, -1.3969e-01, -3.9225e-01,
         -5.1363e-02,  4.1156e-01,  9.7945e-01, -2.7057e-01, -5.0070e-02,
          4.9983e-01,  6.3115e-02, -2.2198e-01,  6.2318e-01, -5.7941e-01,
         -1.4943e-01, -1.3212e-01, -1.1529e-01, -9.1765e-02,  2.3310e-01,
          1.2518e-01,  3.1230e-01, -1.6721e-01,  9.4962e-02,  1.2247e-01,
         -2.8740e-01,  3.4627e-01, -1.1817e+00, -4.7256e-01,  2.9233e-01,
         -5.6157e-01,  8.5945e-03,  1.0059e-01, -2.7019e-01,  2.2239e-01,
          3.3963e-02, -2.3709e-01,  8.1381e-01, -3.6201e-02, -3.7036e-04,
          4.0659e-02, -7.9997e-02,  1.9422e-01, -1.4695e-01, -2.7886e-01,
         -3.8628e-01, -7.1487e-02,  1.8263e-01,  5.9177e-01, -7.8916e-01,
         -4.6402e-01]], device='cuda:0') tensor(0.3937, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
238000 特征值优化 tensor(4.3713, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.4827e-01,  3.2607e+00,  2.7642e+00,  2.1353e+00, -1.1251e-01,
         -1.6356e-02, -1.8699e-01,  3.7637e-02, -1.9812e-01,  1.1646e-01,
          1.0644e+00, -3.3373e-01,  4.2675e-01,  2.9427e-01, -5.4505e-01,
          8.9830e-02,  1.6516e-01,  9.0294e-01, -1.1256e-01, -5.2001e-01,
         -4.5120e-01,  1.3422e-01,  5.6049e-01,  2.4933e-01,  2.2633e-03,
          3.9550e-01,  9.4628e-03, -2.9348e-02,  3.9163e-01, -4.2141e-01,
          2.3856e-02, -4.6142e-02, -8.6833e-02, -1.0917e-01,  1.4169e-01,
          1.7721e-01,  7.0790e-01, -6.9620e-02, -2.6777e-01, -4.1733e-01,
          1.7294e-01,  7.4127e-01, -8.6806e-01, -1.8302e-01,  1.0496e-01,
         -7.3404e-01,  2.4095e-02,  8.3244e-03, -1.0219e-01,  1.6437e-01,
          9.0180e-02, -9.2910e-02,  4.3815e-01, -2.4066e-02, -7.8697e-02,
          1.7145e-02,  1.2415e-01,  1.9884e-01, -1.5725e-01, -2.2028e-01,
         -2.7353e-01, -9.1038e-02,  7.6487e-02,  3.1777e-01, -3.8573e-01,
         -4.3088e-01]], device='cuda:0') tensor(0.3355, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
239000 正交保障 tensor(0.3528, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.1634e+00,  3.3617e+00,  3.0013e+00,  1.8744e+00, -7.8149e-02,
          1.0413e-03, -2.2488e-01,  1.6512e-01, -1.1121e-02,  1.5208e-01,
          1.0197e+00, -3.8722e-01,  5.5486e-01,  2.5086e-01, -5.3847e-01,
          9.6823e-02,  1.7242e-01,  8.6117e-01, -1.3381e-01, -6.3909e-01,
         -5.9572e-01,  1.1235e-01,  4.6128e-01,  3.6106e-01,  4.2948e-02,
          5.1341e-01,  2.4117e-02, -3.1041e-02,  3.5547e-01, -3.7558e-01,
          1.5052e-02, -4.1265e-02, -7.9389e-02, -1.0086e-01,  1.2928e-01,
          2.0731e-01,  6.5533e-01, -8.1063e-02, -3.6332e-01, -5.1953e-01,
          2.5890e-01,  6.5994e-01, -8.1115e-01, -1.9473e-01,  1.4142e-01,
         -7.3074e-01,  1.0486e-02,  9.5366e-03, -8.8734e-02,  1.2680e-01,
          9.9315e-02, -8.3864e-02,  3.3732e-01, -2.1149e-02, -5.6270e-02,
         -2.3431e-02,  1.4462e-01,  2.3253e-01, -1.8104e-01, -1.7382e-01,
         -2.3168e-01, -1.3213e-01,  5.4825e-02,  1.8092e-01, -2.5801e-01,
         -4.0465e-01]], device='cuda:0') tensor(0.3528, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
240000 特征值优化 tensor(3.5735, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 1.6999,  3.5351,  2.5526,  1.7795, -0.0198,  0.0278, -0.5295,  0.2815,
          0.1232, -0.0056,  0.9813, -0.4570,  0.4537,  0.2448, -0.5952,  0.0534,
          0.0908,  0.8638, -0.1901, -0.7254, -0.5788, -0.0907,  0.3059,  0.4169,
          0.0991,  0.7040,  0.0096, -0.0058,  0.2965, -0.3349, -0.0800, -0.0250,
         -0.0547, -0.0652,  0.1319,  0.1153,  0.6860, -0.0579, -0.2817, -0.5413,
          0.2083,  0.7925, -0.3301,  0.1839,  0.2155, -0.8350, -0.0056, -0.0080,
          0.0111,  0.0822,  0.0910, -0.0477,  0.2829,  0.0246, -0.0745,  0.0078,
          0.0915,  0.2222, -0.1535, -0.1610, -0.1365, -0.1255, -0.0719, -0.0466,
         -0.0517, -0.2001]], device='cuda:0') tensor(0.3343, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
241000 特征值优化 tensor(3.4681, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.1888e+00,  3.6482e+00,  2.4047e+00,  1.6459e+00,  3.8692e-02,
          6.8015e-02, -8.3157e-01,  3.3975e-01,  9.9945e-02, -2.0702e-02,
          1.0026e+00, -5.0462e-01,  4.7158e-01,  2.8486e-01, -6.4820e-01,
          2.6157e-02, -1.3694e-02,  8.6180e-01, -2.2012e-01, -7.0878e-01,
         -5.7364e-01, -1.6978e-01,  2.2744e-01,  4.5298e-01,  1.2910e-01,
          6.8701e-01, -1.4007e-03, -3.1850e-03,  1.7205e-01, -2.2918e-01,
         -9.4789e-02, -6.1858e-02, -4.1946e-02, -2.2027e-02,  9.1982e-02,
          9.2550e-02,  7.1070e-01, -1.0703e-01, -1.3650e-01, -5.5230e-01,
          1.5527e-01,  7.5111e-01, -1.4483e-01,  2.5178e-01,  2.2943e-01,
         -7.6593e-01, -1.4546e-02, -1.5562e-02,  1.0932e-01, -1.3074e-02,
          1.3227e-01, -5.3139e-02,  2.7807e-01,  6.8903e-02, -6.1577e-02,
         -6.6921e-03,  4.3626e-02,  1.9025e-01, -1.4463e-01, -1.3289e-01,
         -8.0154e-02, -1.0274e-01, -7.2364e-02, -7.4288e-02, -1.7462e-02,
         -1.7381e-01]], device='cuda:0') tensor(0.3208, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
242000 特征值优化 tensor(3.4202, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.5266e+00,  3.6541e+00,  2.4431e+00,  1.5182e+00,  9.9295e-02,
          1.2541e-01, -1.0574e+00,  4.2569e-01,  7.5381e-02, -8.1572e-03,
          9.8378e-01, -4.9743e-01,  5.1197e-01,  2.9136e-01, -6.4597e-01,
          2.5935e-03, -3.7641e-02,  9.1087e-01, -2.5332e-01, -7.1852e-01,
         -5.6629e-01, -1.7035e-01,  2.2173e-01,  4.2502e-01,  1.5193e-01,
          6.5901e-01,  2.7601e-03,  7.7622e-04,  1.1435e-01, -1.3994e-01,
         -1.3152e-01, -5.9352e-02, -2.1007e-02,  3.6148e-03,  7.5286e-02,
          9.1618e-02,  6.4798e-01, -2.1408e-01, -1.9665e-01, -5.0247e-01,
          1.2117e-01,  7.5564e-01, -1.0119e-01,  2.5658e-01,  2.0169e-01,
         -7.1315e-01, -2.8489e-02, -2.9170e-02,  1.1289e-01, -7.3891e-02,
          1.4698e-01, -4.9733e-02,  3.0651e-01,  8.0641e-02, -5.1448e-02,
         -1.2225e-02,  7.1387e-03,  1.3050e-01, -1.4473e-01, -1.1725e-01,
         -5.0335e-02, -7.1770e-02, -6.0363e-02, -5.6527e-02, -1.9401e-02,
         -1.8474e-01]], device='cuda:0') tensor(0.3419, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
243000 特征值优化 tensor(3.3962, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.9017e+00,  3.6826e+00,  2.4308e+00,  1.3944e+00,  1.4673e-01,
          1.5308e-01, -1.1657e+00,  4.5437e-01,  8.3125e-02,  1.8968e-02,
          9.5287e-01, -4.8258e-01,  5.9313e-01,  3.3265e-01, -6.4653e-01,
         -5.3241e-02, -3.1011e-02,  9.4784e-01, -2.7071e-01, -7.2182e-01,
         -5.7798e-01, -1.6715e-01,  2.0568e-01,  3.9234e-01,  1.7033e-01,
          6.2299e-01,  2.9375e-03,  3.5989e-03,  8.8528e-02, -1.0463e-01,
         -1.3311e-01, -5.2193e-02,  6.6549e-03,  2.7354e-02,  5.8380e-02,
          8.9901e-02,  5.8442e-01, -2.5105e-01, -2.3821e-01, -4.6784e-01,
          9.6726e-02,  7.4570e-01, -8.8800e-02,  2.3678e-01,  1.6801e-01,
         -6.4940e-01, -3.7047e-02, -3.6007e-02,  8.5767e-02, -6.4828e-02,
          1.3702e-01, -4.4679e-02,  2.9205e-01,  8.2480e-02, -5.1859e-02,
         -1.9572e-02, -2.5211e-02,  8.5377e-02, -1.4337e-01, -1.0506e-01,
         -4.5102e-02, -7.7300e-02, -4.8711e-02, -4.1525e-02, -2.1046e-02,
         -1.8429e-01]], device='cuda:0') tensor(0.2679, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
244000 特征值优化 tensor(3.3767, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.2653e+00,  3.6765e+00,  2.4391e+00,  1.2782e+00,  1.8752e-01,
          1.7033e-01, -1.2422e+00,  4.7871e-01,  8.2190e-02,  4.9634e-02,
          9.0003e-01, -4.5299e-01,  6.7583e-01,  4.0348e-01, -6.5037e-01,
         -9.2221e-02,  7.5277e-03,  9.6673e-01, -2.6787e-01, -7.2015e-01,
         -5.7833e-01, -1.7206e-01,  2.0430e-01,  3.7492e-01,  1.7396e-01,
          5.8954e-01,  3.2518e-03,  4.2456e-03,  6.6738e-02, -9.0101e-02,
         -1.3966e-01, -4.4266e-02,  3.9923e-02,  5.3470e-02,  3.9380e-02,
          8.1711e-02,  5.3249e-01, -2.7244e-01, -2.7186e-01, -4.3883e-01,
          8.5460e-02,  7.4268e-01, -6.5529e-02,  2.1939e-01,  1.3969e-01,
         -5.7729e-01, -4.8722e-02, -3.9658e-02,  8.3302e-02, -4.3357e-02,
          1.2292e-01, -3.8536e-02,  2.9011e-01,  9.4957e-02, -5.3246e-02,
         -2.5650e-02, -5.3071e-02,  3.9684e-02, -1.4238e-01, -9.7639e-02,
         -4.0023e-02, -8.3725e-02, -3.4303e-02, -2.4310e-02, -1.7365e-02,
         -1.7983e-01]], device='cuda:0') tensor(0.3578, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
245000 特征值优化 tensor(3.3494, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.5889e+00,  3.6325e+00,  2.4720e+00,  1.2162e+00,  2.3680e-01,
          1.7453e-01, -1.2924e+00,  4.9084e-01,  5.6612e-02,  8.0204e-02,
          8.1235e-01, -4.2239e-01,  7.5797e-01,  4.9309e-01, -6.5334e-01,
         -1.0925e-01,  7.3652e-02,  9.5917e-01, -2.5086e-01, -7.2880e-01,
         -5.6750e-01, -1.9133e-01,  2.1147e-01,  3.8722e-01,  1.5661e-01,
          5.6334e-01,  1.8403e-03,  8.8380e-03,  4.3965e-02, -8.8633e-02,
         -1.6655e-01, -3.9610e-02,  8.5820e-02,  8.5792e-02,  2.3984e-02,
          6.7370e-02,  4.8378e-01, -3.0233e-01, -2.9610e-01, -4.2357e-01,
          5.2489e-02,  7.3792e-01, -4.2938e-02,  2.0144e-01,  1.2874e-01,
         -5.1050e-01, -5.9536e-02, -4.2729e-02,  7.9972e-02, -3.9046e-03,
          1.1477e-01, -2.9772e-02,  2.9620e-01,  1.0609e-01, -4.7995e-02,
         -3.2730e-02, -8.9643e-02, -2.0589e-02, -1.2573e-01, -8.9753e-02,
         -3.1183e-02, -8.9139e-02, -2.1707e-02,  5.6874e-03, -2.0915e-02,
         -1.7818e-01]], device='cuda:0') tensor(0.4247, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
246000 正交保障 tensor(0.3659, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.8889e+00,  3.5846e+00,  2.4847e+00,  1.1952e+00,  2.7874e-01,
          1.7122e-01, -1.3115e+00,  4.9779e-01,  6.4913e-02,  1.1635e-01,
          7.1904e-01, -3.7539e-01,  8.5159e-01,  5.9234e-01, -6.5361e-01,
         -1.4652e-01,  1.2897e-01,  9.2254e-01, -2.0777e-01, -7.3508e-01,
         -5.7060e-01, -1.9198e-01,  2.0701e-01,  4.3412e-01,  1.1072e-01,
          5.2296e-01, -1.3948e-04,  7.7614e-03,  3.2785e-02, -7.6936e-02,
         -1.9020e-01, -4.6302e-02,  1.3539e-01,  1.1528e-01,  1.5488e-02,
          6.4886e-02,  4.3396e-01, -2.9663e-01, -3.0717e-01, -4.2703e-01,
          7.0369e-03,  7.3149e-01, -2.4672e-02,  1.8571e-01,  1.4265e-01,
         -4.4711e-01, -6.9458e-02, -4.3647e-02,  7.1180e-02,  2.3270e-02,
          9.9852e-02, -1.1032e-02,  2.9317e-01,  1.1755e-01, -5.1354e-02,
         -4.3348e-02, -1.2830e-01, -6.8279e-02, -1.0474e-01, -8.6669e-02,
         -2.9268e-02, -9.9801e-02, -4.8742e-03,  2.7869e-02, -2.5970e-02,
         -1.8956e-01]], device='cuda:0') tensor(0.3659, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
247000 正交保障 tensor(0.4635, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.1038e+00,  3.4982e+00,  2.4724e+00,  1.2022e+00,  2.9873e-01,
          1.6713e-01, -1.3182e+00,  4.9467e-01,  6.7452e-02,  1.3885e-01,
          6.5518e-01, -3.4058e-01,  9.2520e-01,  6.7340e-01, -6.5381e-01,
         -1.8173e-01,  1.6905e-01,  8.8099e-01, -1.5860e-01, -7.3499e-01,
         -5.7396e-01, -1.9175e-01,  1.9614e-01,  4.8650e-01,  6.4276e-02,
          4.9338e-01, -1.0941e-03,  6.5100e-03,  1.8055e-02, -6.8521e-02,
         -2.2009e-01, -5.3517e-02,  1.6741e-01,  1.3140e-01,  7.0466e-03,
          6.2046e-02,  4.0086e-01, -2.5274e-01, -3.0485e-01, -4.3045e-01,
         -4.4669e-02,  7.2959e-01, -7.2652e-03,  1.7963e-01,  1.5954e-01,
         -3.9492e-01, -7.4086e-02, -4.3047e-02,  6.5745e-02,  4.2040e-02,
          8.6591e-02, -5.3196e-03,  2.9528e-01,  1.2797e-01, -5.0619e-02,
         -5.0140e-02, -1.4647e-01, -8.3734e-02, -9.9907e-02, -9.2414e-02,
         -2.3117e-02, -1.0708e-01,  1.4604e-02,  5.1435e-02, -4.0961e-02,
         -1.9697e-01]], device='cuda:0') tensor(0.4635, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
248000 特征值优化 tensor(3.3057, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.2588e+00,  3.4394e+00,  2.4623e+00,  1.2125e+00,  3.1345e-01,
          1.6314e-01, -1.3084e+00,  4.9589e-01,  7.5720e-02,  1.5227e-01,
          6.0361e-01, -3.0905e-01,  9.6878e-01,  7.2238e-01, -6.5539e-01,
         -2.0423e-01,  1.9794e-01,  8.4990e-01, -1.2564e-01, -7.3281e-01,
         -5.7255e-01, -1.8891e-01,  1.8887e-01,  5.1688e-01,  3.1600e-02,
          4.7307e-01, -1.3215e-03,  5.5296e-03,  7.1084e-03, -6.0128e-02,
         -2.4051e-01, -6.0888e-02,  1.8630e-01,  1.3958e-01,  1.3617e-03,
          5.8875e-02,  3.7594e-01, -2.1283e-01, -2.9824e-01, -4.2810e-01,
         -7.8038e-02,  7.2906e-01, -3.0008e-03,  1.7926e-01,  1.6222e-01,
         -3.5225e-01, -7.7002e-02, -4.4019e-02,  6.4487e-02,  5.1955e-02,
          7.7957e-02, -2.3786e-03,  2.9673e-01,  1.3574e-01, -5.3087e-02,
         -5.2549e-02, -1.5400e-01, -8.6065e-02, -9.5557e-02, -9.6509e-02,
         -1.6342e-02, -1.0904e-01,  3.3500e-02,  6.2796e-02, -5.3961e-02,
         -2.0208e-01]], device='cuda:0') tensor(0.3380, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
249000 特征值优化 tensor(3.3025, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.3988e+00,  3.3825e+00,  2.4531e+00,  1.2062e+00,  3.2089e-01,
          1.5717e-01, -1.3051e+00,  4.8994e-01,  7.2849e-02,  1.5230e-01,
          5.7338e-01, -2.8729e-01,  9.9132e-01,  7.4852e-01, -6.5627e-01,
         -2.1776e-01,  2.1233e-01,  8.3035e-01, -1.0164e-01, -7.2303e-01,
         -5.7234e-01, -1.8987e-01,  1.7974e-01,  5.3901e-01,  5.6954e-03,
          4.5490e-01, -2.2004e-04,  5.2664e-03, -4.3442e-03, -5.8990e-02,
         -2.4898e-01, -6.9826e-02,  1.9638e-01,  1.4303e-01, -2.9073e-03,
          6.2080e-02,  3.5485e-01, -1.9513e-01, -2.9547e-01, -4.2559e-01,
         -8.5575e-02,  7.2971e-01, -3.1206e-03,  1.7964e-01,  1.6805e-01,
         -3.2258e-01, -8.0636e-02, -4.0927e-02,  5.8621e-02,  5.2205e-02,
          6.8058e-02, -8.0355e-03,  2.9981e-01,  1.4355e-01, -5.1107e-02,
         -5.3315e-02, -1.5679e-01, -9.2472e-02, -9.5742e-02, -9.8075e-02,
         -1.2102e-02, -1.0904e-01,  4.2791e-02,  7.1155e-02, -6.5393e-02,
         -2.0462e-01]], device='cuda:0') tensor(0.3899, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
已收敛，重新迭代
250000 特征值优化 tensor(15.5106, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.0319e+00,  1.4781e+00, -5.2595e-01,  6.0948e-01,  1.6873e-01,
          9.9670e-01,  1.9063e-02,  6.0947e-02, -9.8014e-01, -3.0886e-01,
          8.4207e-01, -7.8176e-01,  8.6056e-01,  7.9034e-02, -6.2149e-02,
         -9.1611e-02, -1.0489e-01,  5.7173e-01, -6.6921e-01,  2.4657e-01,
         -1.4501e-02,  2.1676e-02,  3.2105e-02, -5.4473e-01,  2.5617e-01,
          3.3664e-01,  1.3127e-01, -2.6557e-01, -6.0410e-02,  3.9802e-02,
         -3.8926e-01, -1.0523e-01, -9.2357e-04,  2.0349e-01,  1.4723e-01,
          7.9592e-02, -4.6643e-02, -2.2419e-02,  9.5818e-02,  2.5606e-01,
          5.8439e-02,  8.2194e-02, -1.7536e-01, -2.5099e-01,  4.9454e-01,
          9.2451e-01,  6.6757e-02, -3.8409e-01, -4.9185e-01, -3.7422e-01,
          5.3087e-01, -1.7106e+00,  3.4443e-01, -1.4711e-02,  1.2278e+00,
          3.5884e-01, -9.8215e-01, -1.4133e-01,  1.1480e-01, -1.7692e-01,
         -7.6243e-02,  1.1862e-01,  5.6023e-01, -9.3397e-02, -4.4543e-01,
          1.5315e-01]], device='cuda:0') tensor(0.3345, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
251000 特征值优化 tensor(6.3780, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 2.8018,  2.3753,  0.3532,  1.4076,  0.2755,  0.1971, -0.2317,  0.8233,
         -0.7432, -0.2337,  0.3083, -0.4926,  0.5382,  0.0800,  0.0567,  0.0357,
         -0.0296,  0.3965, -0.3255,  0.0766,  0.2295,  0.0808, -0.0467, -0.2528,
          0.0596,  0.4153,  0.0365, -0.0515, -0.0207,  0.0311, -0.1760, -0.0717,
         -0.0072,  0.0982,  0.1246,  0.1294,  0.0035, -0.0249,  0.0634,  0.0317,
         -0.6331, -0.0038, -0.0325, -0.0537,  0.6839,  0.0206, -0.0346, -0.1190,
         -0.2323, -0.0138,  0.1313, -0.8904, -0.0168, -0.1028,  0.6320,  0.1034,
         -0.4376,  0.0192,  0.0548, -0.0963, -0.2249,  0.1230,  0.3195,  0.0986,
         -0.3006,  0.0868]], device='cuda:0') tensor(0.3139, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
252000 特征值优化 tensor(5.2603, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.3558e+00,  2.7429e+00,  5.6099e-01,  2.0622e+00,  2.9746e-01,
          5.6081e-02, -1.6269e-01,  8.1996e-01, -5.2267e-01, -2.2987e-01,
          1.1286e-01, -5.2756e-01,  6.3228e-01,  2.8096e-02,  1.4419e-01,
          1.4389e-01, -4.4104e-02,  4.4970e-01, -2.5341e-01,  3.2754e-01,
          1.7367e-01,  9.3897e-04, -7.4965e-02, -4.5834e-01, -5.5486e-03,
          3.1188e-01,  2.7047e-02, -2.4030e-02, -4.3957e-02, -3.4507e-02,
         -2.7402e-01, -9.2025e-02, -1.1134e-01,  2.1162e-01,  8.1456e-02,
          1.3775e-01, -4.8177e-01, -9.2828e-02,  3.2416e-01,  2.2872e-01,
         -9.6061e-01, -7.8854e-02, -4.3810e-02, -8.1801e-02,  8.4266e-01,
         -3.6136e-02, -7.3542e-02, -4.0438e-02, -2.2992e-01,  1.6970e-01,
          8.2112e-02, -6.3281e-01, -5.9366e-02, -1.4479e-01,  4.1709e-01,
          4.8968e-02, -3.8885e-01, -1.4209e-02,  5.5770e-02, -1.6740e-01,
         -1.7308e-01,  1.2434e-01,  5.0552e-01,  2.6496e-01, -5.0439e-01,
          1.3479e-02]], device='cuda:0') tensor(0.2820, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
253000 特征值优化 tensor(4.3944, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.9082e+00,  2.6239e+00,  2.3414e-01,  2.7737e+00,  3.5620e-01,
         -9.2769e-02, -1.7608e-01,  6.4744e-01, -1.7031e-01, -4.1152e-01,
          7.8873e-02, -6.3539e-01,  8.4470e-01,  2.2429e-01,  1.6620e-01,
          9.3203e-02, -2.2272e-03,  7.2896e-01, -1.8914e-01,  4.1368e-01,
          1.6324e-01, -1.9456e-01,  2.2210e-02, -6.4273e-01, -1.0748e-01,
          1.5935e-01,  2.0427e-02, -7.8601e-03, -8.6737e-02, -4.2072e-02,
         -2.4757e-01, -1.0604e-01, -1.3498e-01,  1.7140e-01,  2.0532e-01,
          2.8581e-01, -7.2444e-01,  7.0807e-02,  2.6706e-01,  1.4482e-01,
         -5.5802e-01, -5.0204e-02, -1.4748e-02, -1.2498e-01,  6.7924e-01,
          3.5926e-03, -8.5183e-02,  1.2414e-02, -5.8987e-02,  2.7612e-01,
          6.5778e-02, -4.1613e-01, -1.6939e-01, -8.0273e-02,  2.4374e-01,
          2.6952e-02, -4.2506e-01,  1.3308e-02,  1.0851e-02, -8.2964e-02,
         -1.9107e-01,  2.2874e-01,  4.6754e-01,  9.8970e-02, -2.9931e-01,
          1.3819e-01]], device='cuda:0') tensor(0.3365, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
254000 特征值优化 tensor(4.0105, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 4.0181,  2.4383,  0.0703,  3.3469,  0.4174, -0.1474, -0.0749,  0.7713,
         -0.0803, -0.4852,  0.1789, -0.7693,  0.7262,  0.3999,  0.2124,  0.2064,
          0.0277,  0.8150, -0.1581,  0.5417,  0.1431, -0.2013,  0.0130, -0.8236,
         -0.1211,  0.5501,  0.0354, -0.0111, -0.1206, -0.0919, -0.1987, -0.1449,
         -0.0887,  0.2142,  0.2153,  0.1941, -0.8542,  0.0803,  0.1737,  0.3222,
         -0.4284, -0.0514,  0.0427, -0.1734,  0.5174, -0.1850, -0.0930,  0.0406,
         -0.1038,  0.3274,  0.0554, -0.2677, -0.1860, -0.0131,  0.2051,  0.0301,
         -0.3503,  0.0831,  0.0583,  0.0094, -0.1590,  0.3362,  0.3728, -0.0924,
         -0.1677,  0.0504]], device='cuda:0') tensor(0.3404, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
255000 特征值优化 tensor(3.9251, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.6406e+00,  2.2436e+00,  1.6027e-02,  3.5928e+00,  2.8384e-01,
         -1.6240e-01, -5.1173e-02,  6.3989e-01, -4.0819e-04, -3.9979e-01,
          2.1143e-01, -8.7751e-01,  6.4963e-01,  5.1247e-01,  2.2857e-01,
          2.9754e-01,  2.4675e-02,  7.4965e-01, -2.3227e-01,  5.5723e-01,
          1.1655e-01, -1.8293e-01, -6.1962e-02, -7.8836e-01, -3.9411e-02,
          5.5853e-01,  3.6226e-02, -6.5528e-03, -1.4367e-01, -1.2680e-01,
         -1.6590e-01, -1.3587e-01, -3.3456e-02,  2.4987e-01,  2.4727e-01,
          1.5923e-01, -8.0019e-01,  1.0244e-01,  2.2539e-01,  2.8517e-01,
         -4.2252e-01, -6.6378e-02,  2.1330e-02, -3.1725e-01,  5.8015e-01,
         -2.4618e-01, -6.2893e-02,  5.6400e-02, -1.3941e-01,  3.7767e-01,
          5.4155e-02, -2.1798e-01, -2.1429e-01, -9.5523e-03,  2.0083e-01,
          5.6906e-02, -2.3287e-01,  1.4480e-01,  1.0291e-01,  7.0813e-02,
         -1.1369e-01,  3.5582e-01,  2.9236e-01, -1.5550e-01, -1.3853e-01,
          4.5296e-02]], device='cuda:0') tensor(0.2816, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
256000 正交保障 tensor(0.2461, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.4089e+00,  2.1269e+00,  4.9043e-02,  3.7571e+00,  1.9483e-01,
         -1.8673e-01, -3.3611e-02,  5.6431e-01,  2.9653e-02, -2.2324e-01,
          1.8338e-01, -9.1346e-01,  5.5288e-01,  5.7685e-01,  2.3466e-01,
          3.4752e-01,  6.5618e-02,  7.2107e-01, -2.5003e-01,  5.4249e-01,
          1.1021e-01, -1.5555e-01, -9.7626e-02, -7.6275e-01, -1.2837e-02,
          5.4649e-01,  4.1334e-02, -6.9071e-03, -1.4338e-01, -1.1858e-01,
         -1.6054e-01, -1.1426e-01, -9.3692e-03,  2.4273e-01,  2.5902e-01,
          1.2675e-01, -7.6315e-01,  1.1480e-01,  1.9400e-01,  2.6304e-01,
         -4.2838e-01, -7.9819e-02,  1.7988e-03, -4.1443e-01,  6.2851e-01,
         -2.6693e-01, -4.6147e-02,  6.5132e-02, -1.5590e-01,  3.8280e-01,
          5.5416e-02, -1.9220e-01, -2.3451e-01, -1.5492e-02,  2.0115e-01,
          9.8755e-02, -1.9718e-01,  1.4115e-01,  9.9230e-02,  9.0668e-02,
         -7.8474e-02,  3.5189e-01,  3.0046e-01, -2.0049e-01, -1.5745e-01,
          5.8201e-02]], device='cuda:0') tensor(0.2461, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
257000 特征值优化 tensor(3.8898, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) tensor([[ 3.2526e+00,  2.0185e+00,  1.8646e-01,  3.8451e+00,  1.7124e-01,
         -2.3742e-01,  2.3497e-04,  5.0690e-01,  5.1610e-02, -7.2228e-02,
          1.9123e-01, -9.1387e-01,  5.0529e-01,  6.1105e-01,  2.3831e-01,
          3.8504e-01,  9.5241e-02,  7.1260e-01, -2.4662e-01,  5.1049e-01,
          1.1546e-01, -1.4478e-01, -1.2804e-01, -7.5308e-01, -1.1939e-02,
          5.5001e-01,  4.1383e-02, -8.6894e-03, -1.3524e-01, -1.1670e-01,
         -1.6234e-01, -9.0658e-02,  9.4595e-03,  2.4564e-01,  2.6664e-01,
          1.0053e-01, -7.4340e-01,  1.1045e-01,  1.7711e-01,  2.5485e-01,
         -4.2530e-01, -1.0615e-01, -5.6064e-02, -4.6757e-01,  6.5120e-01,
         -2.7281e-01, -4.1914e-02,  7.6878e-02, -1.6084e-01,  3.8345e-01,
          5.0607e-02, -1.7477e-01, -2.3545e-01, -3.0280e-02,  1.9914e-01,
          1.2298e-01, -1.7555e-01,  1.2976e-01,  8.7589e-02,  9.8177e-02,
         -5.3180e-02,  3.3834e-01,  3.0110e-01, -2.3670e-01, -1.7010e-01,
          7.6177e-02]], device='cuda:0') tensor(0.3072, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>)
258000 特征值优化 tensor(3.8774, device='cuda:0', dtype=torch.float64, grad_fn=<AddBackward0>) 