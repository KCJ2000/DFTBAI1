import os
import sys
file_path = sys.argv[0]
root_path = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(file_path))))
sys.path.append(root_path)
sys.path.append(os.path.join(root_path,"module"))
import torch
import numpy as np


from module.physics_property.band.band import Band

band = Band()

band.get_data("/home/hp/users/kfh/DFTBAI1/example/BAND-total/MgO/BAND.dat")
#band.get_data("/home/hp/users/kfh/DFTBAI1/example/test_TB/Si_like/Si_PC/BAND.dat")
print(band.content['k_vector'].shape)
print(band.content["energy"].shape)

band_index = [6,7,8,9,10,11,12,13,14,15,16,17,18,19]
model_index = [i for i in range(14)]

# band.plot_data("/home/hp/users/kfh/DFTBAI1/example/test_TB/MgO/DFT_MgO.png",band_index)

### MgO_sp_sp
para_input = torch.tensor([[ 5.7728e-01,  2.5660e+00,  4.7586e+00,  6.2387e+00, -2.6187e-01,
          2.7352e-01, -3.8152e-01,  7.6249e-01, -5.1464e-01,  1.4123e+00,
         -2.5034e-02, -7.0609e-02, -1.0507e+00,  2.1496e+00,  2.0091e-01,
         -3.1234e-01,  3.7666e-03,  1.8798e-01, -1.4462e-01,  6.1336e-01,
         -5.2591e-01, -3.3116e-01, -1.4414e-01, -1.1983e-01,  2.1991e-01,
         -1.2758e-01,  1.9792e-01,  9.7995e-02,  1.3952e-01,  2.0120e-01,
          4.4860e-02,  6.2433e-02,  1.7590e-02, -8.7602e-03, -3.5072e-02,
          1.7091e-01,  1.1811e-02,  5.3018e-02,  1.2089e-01, -4.3278e-02,
          5.5369e-01,  2.5370e-01,  3.7853e-01, -5.2807e-02, -2.0152e-02,
         -5.6801e-01]])
### MgO_spd_sp_5n
para_input = torch.tensor([[ 6.1841e+00,  5.9635e+00,  7.8594e+00,  3.7963e+00,  4.5764e+00,
          5.8960e-04,  8.9209e-01, -8.1877e-01, -4.7850e-02,  7.1311e-01,
          9.6426e-01,  5.0398e-01,  8.1556e-01, -1.4169e+00,  1.0631e+00,
         -1.4817e+00,  2.9926e-01, -4.0030e-01,  5.2254e-01, -1.5818e-01,
          5.7110e-01,  1.0692e-01, -2.6191e-01,  2.6564e-01, -3.6237e-01,
         -1.1480e-01, -2.5826e-01,  5.6934e-01, -9.2133e-02,  1.7669e-01,
          1.4353e-01, -1.0823e-01, -1.2368e-01, -1.2452e-01,  2.1343e-01,
          1.8870e-01, -2.2124e-01,  6.1457e-01, -2.8098e-01, -4.8066e-01,
          3.8961e-01,  9.8559e-02, -2.4697e-01, -3.6975e-01,  1.2231e-01,
         -1.6610e-01,  3.1768e-01,  1.1331e-01, -2.8806e-01,  1.0521e-01,
         -5.8017e-02, -1.8455e-01, -1.9344e-01,  2.7073e-01, -1.1501e-01,
          7.0095e-02,  3.0766e-01, -1.1584e-01,  5.9402e-02, -7.8530e-02,
         -2.7015e-01,  3.3403e-03,  5.1395e-01, -1.7189e-02, -4.8393e-01,
         -3.4937e-01, -3.9461e-01,  2.3544e-01]])

### MgO_spd5_sp_5n
para_input = torch.tensor([[ 4.3109,  2.3537, -0.3766, -1.0011,  2.0607,  3.8731, -0.4208, -0.8328,
          0.6399, -1.2814, -0.8143, -0.8179,  1.2150,  0.3288,  0.6969, -1.5774,
          0.4376,  0.0545, -0.2342,  0.0977, -0.3942, -0.5068, -0.0412, -0.3962,
          0.0486,  0.2225,  0.0426,  0.3716, -0.1691,  0.1684,  0.1354, -0.0561,
          0.0202,  0.0622, -0.0792, -0.1266,  0.4640, -0.0368, -0.6302,  0.1262,
          0.3661, -0.1933,  0.2897,  0.2322,  0.1763, -0.1340,  0.1728,  0.1587,
          0.4136, -0.3121,  0.0358, -0.2566, -0.1494,  0.1494,  0.1030,  0.2426,
          0.1007,  0.1208,  0.5473, -0.1729, -0.2080, -0.1231,  0.2434, -0.2509,
         -0.4480, -0.2678, -0.1440, -0.3462,  0.4011]])
para_input = torch.tensor([[ 1.6372e+00,  1.0425e+00,  3.0339e-01, -1.0023e+00,  2.4867e+00,
          5.2462e+00,  2.8377e-01,  8.7132e-01, -5.5324e-01, -9.2021e-02,
         -1.1710e+00,  1.6991e-01, -1.1352e+00,  6.3093e-02,  1.5210e-01,
         -5.5173e-01,  9.7366e-01, -1.9736e-01, -1.7806e-01,  1.9708e-01,
         -2.2561e-02,  6.0646e-01,  4.3964e-02, -3.9194e-02,  9.0253e-02,
          2.7619e-01, -5.7871e-02, -8.9969e-02, -3.1141e-02,  2.7994e-01,
          1.1060e-01, -8.2269e-03,  8.5096e-02, -8.1117e-02,  1.3572e-01,
         -1.1951e-02, -2.2149e-03,  2.6339e-02, -3.1037e-01, -9.5000e-02,
         -3.6943e-01,  3.1748e-01,  2.3636e-01,  1.2183e-01, -2.2552e-01,
          6.8016e-02,  5.0893e-01, -2.7544e-01,  3.7102e-01,  1.0764e-01,
         -3.4647e-01, -6.4382e-02,  4.8267e-01,  5.4565e-02, -2.3768e-01,
          6.0024e-01,  1.0191e-02,  6.2290e-01,  5.1299e-01, -8.9139e-01,
          5.8201e-01,  4.1184e-03,  6.3386e-01, -5.7922e-01, -2.4095e-01,
          4.9986e-01, -1.6248e-02, -1.3743e-01,  5.2151e-01]])
para_input = torch.tensor([[ 2.2907,  2.2132, -0.3013, -1.0087,  2.3344,  4.5052, -0.1779,  0.6742,
          0.6161,  1.4353,  1.1182, -0.4419,  0.8882,  0.3067, -0.6118, -1.8837,
          0.0562,  0.7512,  0.0507,  0.2942, -0.2675, -0.0268,  0.2635, -0.0692,
         -0.3748,  0.3241,  0.2914,  0.2954,  0.1166,  0.0187,  0.1159, -0.0571,
          0.0147, -0.1709, -0.1414,  0.3647,  0.1095,  0.4076, -0.5031, -0.0462,
         -0.5955, -0.3411, -0.1615,  0.0341,  0.3512,  0.1774,  0.1391,  0.3099,
          0.0394,  0.1811, -0.2934, -0.1727, -0.2073,  0.1585,  0.0281,  0.2253,
          0.1225, -0.0171,  0.4544, -0.1383, -0.2077,  0.1647,  0.1557, -0.1884,
         -0.1753, -0.1410,  0.1094, -0.3844,  0.3466]])
para_input = torch.tensor([[ 4.9063e+00,  2.8105e+00, -5.6851e-01, -1.0058e+00, -1.0441e+00,
          4.5022e+00,  8.3790e-01,  5.2587e-01, -7.7595e-01,  8.1541e-01,
         -7.3267e-02,  1.1767e+00,  9.5972e-01, -7.9494e-01, -1.3527e+00,
         -1.1994e+00, -9.8690e-03,  4.3938e-01, -2.0813e-01,  1.6784e-01,
          7.8945e-02, -1.4336e-01,  4.7576e-02, -2.2457e-01, -1.1644e-01,
          5.3305e-01,  3.9439e-01, -2.4763e-01,  1.2193e-01,  8.4226e-02,
          1.4207e-01, -6.8141e-02, -3.8366e-02,  9.4859e-02,  1.5561e-01,
          1.5822e-01,  3.0369e-01,  1.1674e-01, -4.7036e-01, -4.6009e-01,
         -7.8514e-02,  1.4678e-01, -9.3509e-02, -7.9485e-02, -2.8404e-01,
          1.6885e-01,  1.6242e-01,  3.9477e-01,  5.2088e-02,  3.0314e-02,
          2.2111e-01, -6.5715e-02, -3.4444e-01,  6.9618e-02,  1.5929e-01,
         -7.0115e-02,  2.4659e-01, -2.3095e-03,  3.7501e-01, -2.2419e-01,
         -2.6687e-03,  2.4503e-01,  1.6122e-01, -1.6802e-01,  2.6422e-01,
          1.9918e-01,  8.0195e-02, -3.2134e-01,  2.3296e-01]])
para_input = torch.tensor([[ 2.2239e+00,  2.1704e+00, -5.1713e-01, -1.0052e+00,  3.6655e+00,
          4.3625e+00,  3.8563e-01,  9.8770e-01,  1.2354e+00,  3.2186e-01,
          2.1428e-03,  1.1817e+00, -6.4578e-01,  5.8987e-01,  1.7918e+00,
          9.9553e-01,  5.7707e-01, -6.6626e-01,  7.3912e-02, -2.8924e-01,
         -2.2319e-01, -6.8304e-03, -3.2413e-01, -1.2442e-01, -2.6457e-01,
          3.0904e-01, -1.9276e-01, -7.2104e-02,  4.3032e-02, -3.5267e-01,
          1.9190e-02, -1.0699e-01,  4.2128e-02, -2.2402e-01,  4.7792e-02,
          4.5624e-01,  2.4212e-01,  3.9103e-01, -7.4397e-01, -1.0015e-01,
         -4.4248e-01, -4.0073e-01,  6.3159e-02,  5.5698e-02, -2.1443e-01,
         -1.0653e-01, -1.8823e-01, -2.5081e-01, -6.9478e-02, -5.0812e-02,
         -3.2160e-01, -2.7797e-01, -5.3526e-02,  8.6050e-02,  4.2982e-02,
         -2.3309e-01,  1.3799e-01, -1.8409e-01,  1.4968e-01,  3.9261e-01,
          1.4598e-01,  3.0861e-02, -1.5008e-02, -1.3385e-01,  5.7025e-02,
          1.2574e-01,  6.2700e-02, -8.7942e-02,  1.2207e-01]])

###MgO_spd5_ssp_5n
para_input = torch.tensor([[-1.1234, -0.1396, -0.3593, -0.4290,  1.4406,  1.7573,  2.7163,  2.8446,
          5.9231,  0.0900, -0.1996,  0.3694,  0.3189,  0.3749,  0.6232, -0.3735,
         -0.8855,  0.4072, -0.6923,  0.0487, -0.1375,  1.5664, -1.4634, -0.8852,
         -0.0448,  0.1468,  0.0246, -0.1472, -0.0063,  0.0309,  0.0289,  0.3071,
          0.0335,  0.2613,  0.0390,  0.2778, -0.0393,  0.1286, -0.1719,  0.1320,
         -0.3046, -0.2482, -0.1042, -0.2667, -0.1849, -0.1806,  0.0233,  0.0857,
         -0.0275, -0.1868, -0.3704, -0.0213, -0.0731,  0.0659,  0.0484,  0.2389,
          0.1576,  0.1691, -0.0845,  0.2129,  0.0971,  0.1182,  0.1206,  0.3240,
         -0.2917,  0.0619, -0.2929,  0.2786, -0.1488,  0.1017, -0.3343,  0.1397,
          0.3338, -0.0408,  0.0061, -0.1932,  0.0806,  0.0369,  0.2294,  0.1168,
          0.2220, -0.3825,  0.3077,  0.4139, -0.1703, -0.0941,  0.2442, -0.0799,
          0.1936,  0.3756,  0.3128, -0.2734]])


###MgO_spd5_sp_6n
para_input = torch.tensor([[-7.5009e-01,  4.1407e-01,  4.0449e-01, -9.8113e-01,  4.0533e+00,
          6.0720e+00,  8.8398e-02,  2.6849e-01, -2.4602e-02, -2.5670e-01,
          9.1768e-01, -1.0209e-01, -4.2827e-01,  6.5260e-01,  4.7592e-01,
          9.8886e-01,  2.5987e-01,  7.8599e-01, -3.3849e-03, -7.7059e-02,
         -2.3286e-02,  1.3711e-01,  1.4224e-01,  1.5171e-01,  2.4333e-01,
          1.6373e-01, -1.0962e-01,  1.8486e-01, -2.2847e-01,  2.8279e-01,
          4.8754e-02, -1.2920e-01,  4.2982e-01, -1.8972e-01,  7.2059e-02,
         -1.3356e-01, -4.7222e-02, -1.0511e-01, -4.4688e-01, -4.2745e-01,
         -1.4338e-01, -1.1487e-01, -5.6324e-02, -1.4407e-01, -2.9561e-02,
         -2.8715e-01, -1.0424e-02, -1.1978e-01, -1.8715e-01,  3.8145e-01,
         -5.5468e-01,  2.7207e-01, -4.3586e-02, -3.3556e-01,  4.7591e-02,
         -6.9830e-02, -1.0361e-01, -5.9329e-02,  6.3153e-02, -3.6341e-03,
         -1.4325e-01,  1.9788e-01,  2.2819e-02, -4.0429e-01,  3.9375e-01,
          4.9663e-01,  1.6903e-01,  4.8653e-01, -4.7426e-01,  1.0715e-01,
          2.1461e-02,  3.0985e-03,  6.6908e-02, -2.7942e-02,  1.3719e-02,
         -1.0764e-01,  1.5268e-01, -2.1112e-01, -4.1998e-01, -8.4206e-02,
         -5.4250e-02, -1.5155e-02,  9.8277e-02,  9.9726e-03, -3.7895e-01,
          1.3293e-01,  1.2000e-01,  3.3747e-01, -1.3864e-01,  1.7551e-01,
          9.6780e-02, -6.9354e-02,  3.0895e-01, -2.8854e-01, -3.3366e-02,
         -1.6744e-02, -3.1075e-01,  9.2583e-02, -4.0624e-02]])

para_input = torch.tensor([[ 8.3874e-01,  4.1327e-01,  1.8028e+00,  1.1026e+00,  3.6404e+00,
          1.0160e+00, -2.3838e+00,  7.2009e-01,  8.8384e-01, -6.9853e-01,
          2.1367e+00,  1.5305e+00,  1.5755e+00,  1.1006e-01,  2.5515e-01,
         -4.9159e-01, -1.9684e-01, -8.9352e-01,  4.0935e-01,  1.1792e-01,
          4.6870e-01, -7.0932e-01,  6.4545e-02,  1.3651e-01,  9.9508e-01,
          8.5483e-01,  3.2901e-01, -5.0114e-01,  8.5680e-01, -4.2918e-01,
          9.3086e-01,  2.7292e-01,  9.7166e-01,  2.4937e-02,  2.1392e-01,
         -1.4645e-01,  7.6241e-02, -6.9476e-01, -3.0248e-01, -5.6627e-01,
          5.5564e-01, -1.7157e-02, -2.1256e-03, -2.1108e-01, -8.8681e-02,
          6.2982e-02,  8.2405e-02, -1.2036e-02, -6.5998e-02,  1.3182e-01,
         -2.9851e-01, -1.0308e-01,  1.0707e-02,  2.3926e-01, -2.2610e-01,
         -2.7836e-02, -1.1462e-01,  5.0962e-02,  3.9026e-03, -2.9765e-01,
         -8.9125e-02, -2.7500e-01,  2.5892e-02,  1.2920e-01, -1.9892e-01,
         -1.4152e-01,  8.2644e-02, -1.2931e-01, -1.7015e-01, -5.9091e-02,
          6.2106e-02,  7.3052e-02,  1.5874e-02, -2.2599e-01,  1.8973e-01,
          2.1815e-01, -5.3875e-02, -1.4184e-01,  7.3340e-02,  2.7246e-02,
          8.7609e-02, -1.9974e-01, -4.5761e-01,  5.7793e-03,  1.8051e-01,
         -1.6626e-01, -4.2799e-02, -2.6126e-01, -1.8628e-01, -8.5319e-02,
          3.3379e-02, -1.4202e-01, -1.3195e-01, -3.0338e-01, -3.1838e-01,
          4.2981e-02,  4.8656e-03, -6.0448e-02,  2.6194e-02, -1.4631e-02,
          1.2649e-01, -1.8887e-01, -4.4153e-02, -8.5103e-02, -1.2219e-01,
          1.6588e-01, -1.5190e-01,  1.3421e-01,  5.6772e-02,  2.1654e-01,
         -4.4466e-02,  3.4564e-01, -2.1725e-01, -3.0965e-01,  1.4055e-01,
         -3.4912e-01,  8.7153e-02, -2.4492e-01, -1.0930e-01,  2.4460e-01,
          3.6091e-01, -3.4284e-01, -2.9096e-01,  3.9769e-01,  5.2118e-03,
         -1.3572e-01, -8.3019e-02, -2.0138e-01, -1.1271e-01, -4.8803e-01,
          1.7776e-01,  1.1317e-01,  3.5766e-01, -5.5719e-02,  2.3594e-03,
          1.2750e-02,  8.8568e-02,  9.2249e-03, -9.6586e-02, -3.8617e-02,
          2.8764e-02,  1.0719e-01,  9.3737e-02, -7.2688e-02,  1.4850e-01,
         -1.1773e-02,  9.4098e-02, -1.4660e-01, -2.7537e-02,  8.3261e-04,
          2.9227e-02,  1.1971e-01, -1.4213e-01,  1.4083e-02,  5.2339e-02,
         -4.8280e-02, -4.1370e-02, -6.7447e-02, -1.9462e-01, -6.1714e-02,
         -3.7348e-02,  2.6246e-03,  1.9155e-01, -4.2022e-02, -3.8236e-02,
         -2.9811e-02,  9.0058e-02, -1.1777e-02, -5.2287e-02,  1.1648e-02,
         -3.2847e-02, -3.9204e-02,  8.7272e-02,  3.8193e-02,  9.7003e-04,
         -5.8593e-02, -1.0985e-01,  2.4954e-02, -3.2762e-02, -9.4619e-02,
          1.7664e-01,  5.8273e-02,  4.6402e-02,  1.4000e-01, -1.7220e-02,
         -5.0564e-02]])

###MgO_spd5_ssp_6n
para_input = torch.tensor([[ 1.2331,  1.9338,  0.2981, -1.0092,  2.6422,  2.2133, -1.9189,  0.6997,
          2.9324, -0.0956,  0.0295,  0.1606,  0.0777,  0.5089, -0.0210,  0.5442,
         -0.3494, -0.1937, -0.7943,  0.0349,  1.0006, -0.8858,  0.1378, -0.4660,
          0.7885, -0.3025, -0.1679, -0.4887,  0.4362,  0.6266,  0.4016, -0.1468,
         -0.0955, -0.5788,  0.4057,  0.0031, -0.5686, -0.0419,  0.0899,  0.2330,
         -0.0319,  0.0080, -0.0651, -0.1064,  0.4261, -0.0269, -0.2003,  0.0748,
         -0.3526,  0.3553, -0.6391, -0.3249, -0.2636, -0.3137, -0.0083, -0.2619,
          0.2612, -0.1737,  0.2885,  0.0727,  0.2212,  0.5265,  0.0764,  0.3023,
          0.1940,  0.0563, -0.0578, -0.1333, -0.0850, -0.0696, -0.1330, -0.1969,
          0.2202,  0.0751,  0.1835, -0.0178,  0.7722, -0.0737, -0.2795,  0.4375,
         -0.1403, -0.3435, -0.0974, -0.0069,  0.2091, -0.1424,  0.1058, -0.1447,
         -0.0971, -0.2405, -0.1366,  0.0160,  0.0986,  0.1819,  0.1038, -0.0114,
          0.1964, -0.2047, -0.0896,  0.1102, -0.0256, -0.1852,  0.0816,  0.0978,
          0.0070, -0.0555,  0.0099, -0.0171, -0.2203,  0.1473,  0.0441,  0.0915,
          0.0360, -0.3173,  0.0784, -0.1397,  0.0295, -0.0936, -0.0453, -0.0665,
         -0.0525, -0.0454, -0.0843,  0.1956,  0.0922,  0.0957, -0.1574, -0.1848,
         -0.0585, -0.0294]])
para_input = torch.tensor([[ 2.1020e+00,  2.4174e+00,  7.2985e-02, -1.0135e+00,  2.4020e+00,
         -2.7448e+00,  1.3421e+00,  1.1868e+00,  2.2998e+00, -8.2056e-01,
          2.3326e-01,  5.9283e-01, -2.6479e-01,  1.1799e-01,  1.0272e+00,
          5.5700e-02,  7.2344e-01, -2.4888e-01, -7.2818e-01, -4.1515e-01,
         -1.0891e-01,  7.2324e-01,  1.8686e+00,  3.8887e-01, -5.0246e-01,
         -3.5886e-01,  3.3217e-02,  2.1656e-02,  5.0259e-01, -3.6652e-01,
         -3.2465e-01,  2.8827e-01, -1.4164e-01, -8.4698e-02, -4.7762e-01,
          1.2792e-01, -6.9515e-01,  1.5273e-01,  9.1868e-02,  1.3139e-01,
          5.7212e-03, -1.0757e-01, -1.6179e-01,  2.6498e-01,  6.8101e-02,
         -1.3028e-01, -2.1763e-01,  2.2407e-01,  5.5282e-01, -2.8782e-01,
         -6.5228e-01,  4.1986e-01, -1.1739e-01,  2.1573e-02,  2.6693e-01,
         -5.5334e-02, -2.8147e-01, -1.3114e-01, -1.7900e-01,  1.5769e-01,
          1.0740e-01, -2.4648e-01,  1.7349e-01, -2.8970e-01,  2.1826e-02,
         -2.7199e-01, -1.4056e-01,  9.9473e-02,  2.2351e-02, -1.1212e-01,
         -7.4453e-02,  3.2967e-01,  1.3947e-01,  3.9779e-02,  1.6748e-01,
          1.7093e-01,  2.1193e-01,  1.2738e+00,  1.6150e-01,  1.8554e-02,
          1.0394e-01, -4.1782e-01,  1.7624e-02,  1.7633e-01,  9.0785e-03,
         -1.4909e-03,  3.3051e-02, -1.7907e-01, -1.0457e-01, -4.7798e-01,
          1.7682e-01, -9.3324e-01,  3.2059e-02,  1.2620e-02, -1.0003e-01,
          1.6578e-02, -1.4498e-01,  1.7427e-02, -2.1053e-02, -6.0145e-02,
         -1.3965e-01,  8.9381e-02,  9.0944e-02, -6.6109e-02,  3.5252e-02,
          1.4111e-01,  3.1463e-02, -5.6540e-02, -4.6674e-02, -1.4008e-01,
          1.8168e-01, -1.4282e-01,  1.4307e-02,  2.3747e-01,  2.1656e-01,
         -2.8940e-01, -4.8220e-02, -2.7183e-01,  2.9975e-02, -2.1575e-02,
          9.0905e-02,  8.5782e-03,  4.6539e-02,  9.3630e-02,  6.8145e-02,
          1.7437e-01, -9.6706e-02, -2.4784e-02,  3.3308e-03, -1.7024e-01]])

### MgO_s2p2_s2p_6n
para_input = torch.tensor([[ 8.3874e-01,  4.1327e-01,  1.8028e+00,  1.1026e+00,  3.6404e+00,
          1.0160e+00, -2.3838e+00,  7.2009e-01,  8.8384e-01, -6.9853e-01,
          2.1367e+00,  1.5305e+00,  1.5755e+00,  1.1006e-01,  2.5515e-01,
         -4.9159e-01, -1.9684e-01, -8.9352e-01,  4.0935e-01,  1.1792e-01,
          4.6870e-01, -7.0932e-01,  6.4545e-02,  1.3651e-01,  9.9508e-01,
          8.5483e-01,  3.2901e-01, -5.0114e-01,  8.5680e-01, -4.2918e-01,
          9.3086e-01,  2.7292e-01,  9.7166e-01,  2.4937e-02,  2.1392e-01,
         -1.4645e-01,  7.6241e-02, -6.9476e-01, -3.0248e-01, -5.6627e-01,
          5.5564e-01, -1.7157e-02, -2.1256e-03, -2.1108e-01, -8.8681e-02,
          6.2982e-02,  8.2405e-02, -1.2036e-02, -6.5998e-02,  1.3182e-01,
         -2.9851e-01, -1.0308e-01,  1.0707e-02,  2.3926e-01, -2.2610e-01,
         -2.7836e-02, -1.1462e-01,  5.0962e-02,  3.9026e-03, -2.9765e-01,
         -8.9125e-02, -2.7500e-01,  2.5892e-02,  1.2920e-01, -1.9892e-01,
         -1.4152e-01,  8.2644e-02, -1.2931e-01, -1.7015e-01, -5.9091e-02,
          6.2106e-02,  7.3052e-02,  1.5874e-02, -2.2599e-01,  1.8973e-01,
          2.1815e-01, -5.3875e-02, -1.4184e-01,  7.3340e-02,  2.7246e-02,
          8.7609e-02, -1.9974e-01, -4.5761e-01,  5.7793e-03,  1.8051e-01,
         -1.6626e-01, -4.2799e-02, -2.6126e-01, -1.8628e-01, -8.5319e-02,
          3.3379e-02, -1.4202e-01, -1.3195e-01, -3.0338e-01, -3.1838e-01,
          4.2981e-02,  4.8656e-03, -6.0448e-02,  2.6194e-02, -1.4631e-02,
          1.2649e-01, -1.8887e-01, -4.4153e-02, -8.5103e-02, -1.2219e-01,
          1.6588e-01, -1.5190e-01,  1.3421e-01,  5.6772e-02,  2.1654e-01,
         -4.4466e-02,  3.4564e-01, -2.1725e-01, -3.0965e-01,  1.4055e-01,
         -3.4912e-01,  8.7153e-02, -2.4492e-01, -1.0930e-01,  2.4460e-01,
          3.6091e-01, -3.4284e-01, -2.9096e-01,  3.9769e-01,  5.2118e-03,
         -1.3572e-01, -8.3019e-02, -2.0138e-01, -1.1271e-01, -4.8803e-01,
          1.7776e-01,  1.1317e-01,  3.5766e-01, -5.5719e-02,  2.3594e-03,
          1.2750e-02,  8.8568e-02,  9.2249e-03, -9.6586e-02, -3.8617e-02,
          2.8764e-02,  1.0719e-01,  9.3737e-02, -7.2688e-02,  1.4850e-01,
         -1.1773e-02,  9.4098e-02, -1.4660e-01, -2.7537e-02,  8.3261e-04,
          2.9227e-02,  1.1971e-01, -1.4213e-01,  1.4083e-02,  5.2339e-02,
         -4.8280e-02, -4.1370e-02, -6.7447e-02, -1.9462e-01, -6.1714e-02,
         -3.7348e-02,  2.6246e-03,  1.9155e-01, -4.2022e-02, -3.8236e-02,
         -2.9811e-02,  9.0058e-02, -1.1777e-02, -5.2287e-02,  1.1648e-02,
         -3.2847e-02, -3.9204e-02,  8.7272e-02,  3.8193e-02,  9.7003e-04,
         -5.8593e-02, -1.0985e-01,  2.4954e-02, -3.2762e-02, -9.4619e-02,
          1.7664e-01,  5.8273e-02,  4.6402e-02,  1.4000e-01, -1.7220e-02,
         -5.0564e-02]])

threshold = 1e-2
para_input = torch.where(abs(para_input) < threshold, torch.tensor(0.0), para_input)

band.init_calculate_model("/home/hp/users/kfh/DFTBAI1/example/test_TB/MgO/MgO_s2p2_s2p_6n.pkl",
                              para = para_input
                              )
# band.plot_model(band.content['k_vector'],save_path="/home/hp/users/kfh/DFTBAI1/example/test_TB/Fe_fm/calculate_band.png",
#                     select_band=model_index
#                     )

print(para_input.shape)
band.plot_compare(band.content['k_vector'],save_path="/home/hp/users/kfh/DFTBAI1/example/test_TB/MgO/compare.png",
                  model_index=model_index,band_index=band_index,title="MgO_s2p2_s2p_6n")