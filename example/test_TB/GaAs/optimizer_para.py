import os
import sys
file_path = sys.argv[0]
root_path = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(file_path))))
sys.path.append(root_path)
sys.path.append(os.path.join(root_path,"module"))
import time
import torch


from module.Hamiltonian.Hamiltonian4TB.tight_binding_hamiltonian import TBHamiltonian    
from module.parameter.para4band.para4band import Para4Band_train 
from module.physics_property.band.band import Band



# model_input = {"sysinit":{
#                             "sys_name":"GaAs_s3p2_s3p2_4n",
#                             "group_type":"Space Group",
#                             "group_name":"216",
#                             "lattice_type":"CubiFace",
#                             "lattice_parameter":{"a":1},
#                             "atompos":[[0,0,0],[0.25,0.25,0.25]],
#                             # "magdirect":[[1,1,0]],
#                             "neighbour_list":[4,4]
#                             },
#             "orbit_init":[{"orbit_list":["s","px","py","pz","s","px","py","pz","s"]},
#                           {"orbit_list":["s","px","py","pz","s","px","py","pz","s"]}]
#             }
# model = TBHamiltonian(**model_input)
# model.save_model("/home/hp/users/kfh/DFTBAI1/example/test_TB/GaAs")
# print(model.sym_hamiltonian_dict)


# mask = [1,3,7,9]
# mask = [1,3,7,9,14,16,18,20,23,25,27,29]
mask = []
device = "cuda:0"
# device = None
# device = "cpu"

model_path = "/data/home/kongfh/DFTBAI1/example/test_TB/GaAs/GaAs_s3p2_s3p2_5n.pkl"
# model_path = os.path.join(model_path,model_input["sysinit"]["sys_name"]+".pkl")

para_train = Para4Band_train(model_path,
                              zero_index=mask,
                              mask_index=mask,
                              device=device)
band = Band()
band.get_data("/data/home/kongfh/DFTBAI1/example/BAND-total/GaAs/BAND.dat")
k_points = torch.tensor(band.content["k_vector"]).transpose(dim0=0,dim1=1)*2*torch.pi
band_index = [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]
energy = torch.tensor(band.content["energy"][:,band_index,0].reshape(k_points.shape[1],-1))
model_index = [i for i in range(18)]

print("band_index:",band_index)
print("model_index:",model_index)
# print("mask:",mask)
# print("neighbour_list",model_input["sysinit"]["neighbour_list"])


para_input = torch.tensor([[-1.7366e+00, -6.2414e-01, -2.2007e-01,  8.0933e-01,  9.2963e-01,
         -1.6508e+00,  2.9369e-01,  3.0299e-01, -1.1103e+00, -1.2558e+00,
          3.0818e-01,  3.4377e-02, -7.1624e-01, -2.2637e+00, -6.3415e-01,
          5.1318e-01,  1.3220e-01,  1.0787e+00, -3.5248e+00, -9.5013e-01,
         -3.2217e-01, -1.1190e+00, -7.9519e-01,  2.5915e-01,  9.3600e-02,
         -1.3340e+00,  5.4927e-02, -2.6474e-01, -1.7005e-01,  4.9891e-01,
          3.3075e-01, -3.3497e-01,  7.7895e-02,  1.4402e-01, -3.2022e-01,
         -7.6090e-02, -7.5356e-02,  1.4899e-01, -9.4793e-02,  2.2966e-02,
         -7.3951e-01, -1.9680e-01,  5.7824e-02,  8.4135e-03,  1.6353e-01,
          2.6465e-01,  4.0544e-01,  8.0679e-02,  5.1643e-01, -6.7943e-02,
         -3.2059e-01,  4.6050e-01,  2.4079e-01,  3.2269e-01,  4.7623e-02,
         -2.9955e-01,  1.0860e-01,  1.4465e-01, -1.6574e-02, -1.2393e-01,
         -2.6954e-01,  2.2974e-02,  1.1812e-02, -9.0918e-02,  3.7343e-02,
         -7.2843e-02, -1.2748e-01, -1.3082e-01, -6.4562e-03, -9.0887e-02,
          4.0037e-02,  1.6774e-01,  7.3379e-02,  1.9363e-01, -2.1567e-01,
         -9.9794e-02, -7.0531e-02,  5.2709e-02,  1.2218e-02, -1.7797e-01,
         -5.1731e-01, -8.0215e-02, -1.0083e-02, -4.0414e-02, -8.9305e-02,
         -4.3673e-02,  5.1973e-02,  2.7225e-02, -2.7906e-02,  2.1902e-01,
         -1.0558e-02,  1.8230e-01,  2.7131e-02, -8.1460e-02,  7.5135e-02,
          3.9593e-02,  3.7395e-02, -1.8607e-01, -2.6189e-02, -1.1440e-02,
          7.7016e-02,  1.9075e-03, -5.4674e-02,  6.3885e-02,  6.8726e-02,
          1.8864e-01, -2.3781e-03,  4.9033e-02, -2.6421e-01,  1.9529e-01,
          1.2035e-01, -9.1800e-02, -1.7088e-01, -6.5954e-02, -1.4569e-01,
          2.8670e-01, -9.0906e-02,  2.3827e-01, -2.0659e-01, -2.4319e-01,
          1.3111e-01,  1.3392e-01, -7.0860e-02, -2.6790e-01, -1.0543e-02,
          3.6222e-02,  3.0282e-02,  3.9320e-02,  8.9763e-03,  5.6462e-02,
         -4.7259e-03,  8.4640e-02,  3.9980e-02,  9.7664e-02, -1.0602e-01,
         -7.6464e-02, -4.0586e-02, -4.2659e-02, -5.4926e-02, -9.6968e-02,
         -3.7289e-02, -2.3621e-01,  7.2014e-02,  1.2933e-01,  1.3574e-02,
         -3.7262e-02, -1.5003e-01,  1.1745e-01, -2.0607e-01, -6.8399e-03,
          7.6670e-02, -6.2269e-02,  1.7449e-02,  5.5427e-02, -8.9467e-02,
          3.1043e-02, -7.4133e-02,  7.5152e-03,  1.0821e-01, -1.1593e-01,
         -7.5783e-02,  6.6397e-02, -3.0182e-02,  5.4399e-02, -1.3953e-01,
         -9.5289e-02,  7.5624e-02, -9.5151e-02,  4.0331e-02, -3.9575e-02,
          5.5400e-03,  3.7672e-02,  7.5845e-02,  1.3534e-01, -3.3733e-02,
         -9.8880e-02,  6.0614e-02,  7.7492e-02, -1.9753e-01, -2.2267e-01,
         -1.4753e-01, -4.1662e-02, -2.2653e-02, -1.2093e-01, -8.0810e-02,
          6.7505e-02, -8.7094e-02, -7.7431e-02, -3.3963e-02,  1.4476e-02,
         -1.2529e-01,  9.5703e-02,  1.0683e-01, -2.0310e-01, -9.2587e-02,
          1.4431e-02,  1.0110e-01, -3.7640e-02,  4.6518e-02, -1.2539e-01,
         -1.0799e-01,  1.5651e-01,  5.0410e-02,  3.4066e-01, -7.2036e-02,
          1.1295e-01,  1.3107e-01,  1.5912e-01,  3.1478e-01, -1.1049e-02,
          1.2032e-02, -9.2745e-02, -1.1644e-03,  2.5169e-02,  4.8967e-02,
         -5.1950e-02, -2.8927e-01, -1.3584e-01, -1.9189e-01,  8.0649e-02,
         -9.1525e-02, -2.0531e-02,  1.4150e-01, -1.3167e-01,  1.1772e-02,
         -1.0149e-01, -1.3953e-01, -1.2663e-01, -1.6902e-01,  9.7970e-03,
         -2.7343e-01,  1.9933e-01, -1.6879e-01,  4.6934e-02,  1.5324e-02,
          2.1840e-01,  2.6339e-02, -2.8441e-01,  1.7653e-01, -1.8689e-01,
          1.4989e-01, -5.2399e-02,  2.6469e-01, -1.3915e-01, -7.1529e-02,
         -7.0857e-02,  2.4540e-02,  4.0091e-02,  2.0926e-02,  9.6612e-03,
         -9.5976e-02, -2.8315e-02, -5.7163e-02,  9.5405e-03, -2.1911e-02,
          9.6402e-02, -9.7237e-02,  6.0229e-02,  2.3569e-02,  1.1884e-02,
          1.5469e-01,  1.0499e-02,  1.0185e-01, -5.4186e-02, -1.8331e-01,
          1.5756e-01, -1.0680e-01, -2.4563e-01,  6.9186e-02, -4.8811e-02,
          8.7885e-02, -1.2143e-01, -1.6959e-01,  1.0693e-01,  2.6828e-01,
          1.5577e-01,  4.0164e-02, -6.4338e-02,  5.9068e-02, -2.0234e-02,
          1.3825e-01, -5.3611e-03, -3.2453e-01, -1.2574e-01, -1.9695e-01,
          1.0718e-01, -9.4381e-02,  1.6084e-01,  1.8424e-01, -2.6788e-01,
          1.1380e-01,  8.2709e-02, -3.7791e-02,  5.6904e-02, -1.0661e-01,
         -1.8421e-01,  3.9026e-01, -1.3563e-01,  3.9141e-03,  1.8073e-01,
          9.8883e-03, -2.3728e-02, -1.9651e-01, -1.0592e-01, -2.0046e-03,
          1.7253e-01, -4.5334e-03, -2.3587e-02, -1.3275e-01,  1.7424e-01,
         -7.2402e-02,  9.8469e-02, -1.5103e-01,  7.4629e-02, -6.1057e-02,
          1.1721e-01,  2.9447e-01, -1.3677e-01,  1.8669e-01, -1.2647e-01,
         -9.9586e-02,  2.1385e-01,  2.7526e-01,  6.5644e-02,  1.2736e-01,
          1.6875e-01, -1.1163e-02, -1.6611e-01,  1.1227e-01, -1.2115e-01,
          1.0693e-01, -2.2948e-01,  1.2635e-01,  1.9625e-01,  1.8214e-01,
          1.5268e-01,  8.1878e-02, -8.6791e-02, -1.6517e-01, -3.6284e-02,
          8.4744e-02,  2.2826e-01,  5.5523e-02, -1.0113e-01,  2.5587e-01,
         -2.2623e-02,  3.2372e-02,  3.5705e-01, -1.8981e-02, -2.5112e-02,
          3.4273e-01, -4.1203e-01,  1.5616e-01,  5.3406e-02, -5.1997e-02,
         -8.5329e-02, -1.1974e-01,  6.3373e-02, -1.3093e-01, -3.9029e-02,
         -3.9760e-02, -6.9918e-02]])

start_time = time.time()
para_train.train(epoch = int(1e4),
                k_points = k_points,
                energy = energy,
                model_index=model_index,
                para=para_input)
end_time = time.time()
print(end_time-start_time)